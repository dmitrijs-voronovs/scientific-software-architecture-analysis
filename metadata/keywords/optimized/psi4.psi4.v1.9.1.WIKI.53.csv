quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Performance,"D dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the higly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAPT¶. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. FREEZE_CORE¶. Specifies how many core orbitals to freeze in correlated computations. TRUE will default to freezing the standard default number of core orbitals. For PSI, the standard number of core orbitals is the number of orbitals in the nearest previous noble gas atom. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/sapt-1.html:13462,optimiz,optimized,13462,psi4manual/1.0.0/sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/sapt-1.html,2,['optimiz'],['optimized']
Performance,"D(T) cc-pVDZ energy for the NH molecule. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. pywrap-cbs1; Various basis set extrapolation tests. fnocc2; Test G2 method for H2O. cbs-xtpl-dict; Extrapolated water energies. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). mints15; check SP basis Fortran exponent parsing. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt10; usapt example with empty beta due to frozen core. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. scf-cholesky-basis; incremental Cholesky filtered SCF. scf-guess-read3; Test if the the guess read in the same basis converges. extern3; External potential calculation with one Ghost atom and one point charge at the same position. mbis-3; MBIS calculation on OH radical. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. isapt-charged; This test case shows an example of running the I-SAPT0/aug-cc-pVDZ computation for a positively charged system, illustrating the cation-pi interaction. The SIAO1 link partitioning algorithm is used. The system is taken from http://dx.doi.org/10.1016/j.comptc.2014.02.008. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:20738,optimiz,optimization,20738,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimization']
Performance,"D. Type: double; Default: 0.01. OPDM (DETCI); DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER opti",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:176239,optimiz,optimization,176239,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,4,['optimiz'],['optimization']
Performance,"D. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. mom-h2o-4; MOM excitation from LUMO HOMO+4. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. scf-response3; UHF Dipole Polarizability Test. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt10; usapt example with empty beta due to frozen core. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cc51; EOM-CC3/cc-pVTZ on H2O. opt7; Various c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:4605,perform,performed,4605,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['perform'],['performed']
Performance,"DC-06, DC-12, ODC-06, ODC-12, and ODC-13. The first four; methods use approximate N-representability conditions derived from; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods is derived from the density cumulant; in an approximate way (labelled by ‘06’), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by ‘12’). The corresponding DC and ODC methods; have similar description of the N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12.; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution , respectively,; and the orbitals are variationally optimized.; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [] can be used (see below).; For the detailed comparison of the quality of these methods we refer; users to our publications.; The DCFT functional can be specified by the DCFT_FUNCTIONAL option. The; default choice is the ODC-12 functional. In addition to five methods listed; above, DCFT_FUNCTIONAL option can be set to CEPA0 (coupled electron; pair approximation zero, equivalent to lineari",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/dcft-1.html:4927,optimiz,optimization,4927,psi4manual/1.0.0/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/dcft-1.html,2,['optimiz'],['optimization']
Performance,"DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/dct.html:13739,optimiz,optimize,13739,psi4manual/master/dct.html,https://psicode.org,https://psicode.org/psi4manual/master/dct.html,18,"['optimiz', 'perform']","['optimize', 'perform']"
Performance,"DCFT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis 3-21G. energy('dcft'). The energy('dcft') call to energy() executes the DCFT module, which will first call the SCF module and perform the SCF computation with UHF reference to obtain the guess for the DCFT orbitals. After the SCF is converged, the program will perform the energy computation using the DC-06 method. By default, the two-step algorithm will be used for the solution of the equations. Note that while the default value for the option REFERENCE is RHF, this option is set to UHF before the DCFT module is executed. For the DC-06 method one can also request to perform the geometry optimization following the example below:; molecule {; H; H 1 1.0; }. set basis 3-21G. optimize('dcft'). The optimize('dcft') call will first perform all of the procedures; described above to obtain the DC-06 energy. After that the DC-06 analytic; gradients code will be executed to perform the solution of the DCFT response; equations, compute the analytic gradients of the DCFT energy and perform the; geometry optimization. Recommendations¶; Here is the list of the recommendations for the DCFT module:. For the computations of small systems (less than 150 basis; functions and high symmetry) the use of the default parameters is recommended,; including the choice of the two-step algorithm.; For large systems (more than 150 basis functions) the simultaneous algorithm; is preferred and can be significantly faster than two-step, as the result of; smaller number of the expensive steps. In addition,; significant savings can be achieved if one sets AO_BASIS option to; DISK together with simultaneous algorithm. It should be noted, however, that; the analytic gradients of the DC-06 method are currently not implemented for; AOBASIS DISK option.; In the case when insufficient memory is available, set AO_BASIS option; to DISK. This will significantly reduce the memory requirements. However, when; used together with",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/dcft-1.html:10943,perform,perform,10943,psi4manual/4.0b4/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dcft-1.html,6,"['optimiz', 'perform']","['optimization', 'perform']"
Performance,"DCFT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis 3-21G. energy('dcft'). The energy('dcft') call to energy() executes the DCFT module, which will first call the SCF module and perform the SCF computation with UHF reference to obtain the guess for the DCFT orbitals. After the SCF is converged, the program will perform the energy computation using the DC-06 method. By default, the two-step algorithm will be used for the solution of the equations. Note that while the default value for the option REFERENCE is RHF, this option is set to UHF before the DCFT module is executed. For the DC-06 method one can also request to perform the geometry optimization following the example below:; molecule {; H; H 1 1.0; }. set basis 3-21G. optimize('dcft'). The optimize('dcft') call will first perform all of the procedures; described above to obtain the DC-06 energy. After that the DC-06 analytic; gradients code will be executed to perform the solution of the DCFT response; equations, compute the analytic gradients of the DCFT energy and perform the; geometry optimization. Recommendations¶; Here is the list of the recommendations for the DCFT module:. For the computations of small systems (less than 150 basis; functions and high symmetry) the use of the default parameters is recommended,; including the choice of the two-step algorithm.; For large systems (more than 150 basis functions) the simultaneous algorithm; is preferred and can be significantly faster than two-step, as the result of; smaller number of the expensive steps. In addition,; significant savings can be achieved if one sets AO_BASIS option to; DISK together with simultaneous algorithm.; In the case when insufficient memory is available, set AO_BASIS option; to DISK. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In the case when the oscillatory",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/dcft-1.html:10882,perform,perform,10882,psi4manual/4.0b5/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/dcft-1.html,6,"['optimiz', 'perform']","['optimization', 'perform']"
Performance,"DD_VECTORS (DCFT). STABILITY_ANALYSIS (SCF). STABILITY_AUGMENT_SPACE_TOL (DCFT). STABILITY_CHECK (DCFT). STABILITY_CONVERGENCE (DCFT). STABILITY_MAX_SPACE_SIZE (DCFT). STABILITY_N_EIGENVALUES (DCFT). STABILITY_N_GUESS_VECTORS (DCFT). STEP_TYPE (OPTKING). sub() in module qcdb.vecutil. success() in module util. superfunctional_list() in module functional. sym_label() LibmintsMolecule method. symbol() CoordEntry method. LibmintsMolecule method. symmetrize() LibmintsMolecule method. symmetry. molecule. symmetry_frame() LibmintsMolecule method. symmetry_from_input() LibmintsMolecule method. T. T (THERMO). T2_COUPLED (CCENERGY). T3_WS_INCORE (CCENERGY). (CCEOM). T_AMPS (CCHBAR). Table class in text. tblhead() in module wrappers. TDHF_MEM_SAFETY_FACTOR (CPHF). TDM (DETCI). TDM_PRINT (DETCI). TDM_WRITE (DETCI). TEST_B (OPTKING). test_ccl_functional() in module functional. TEST_DERIVATIVE_B (OPTKING). text module. theory; . ADC. CC. CI. DCFT. DF-MP2. DFT. OCEPA. OEProp. OMP2. OMP3. Orbital-Optimized Methods. SAPT. SCF. cbs(), [1]. THETA_POINTS (SCF). THICKNESS (SCF). threading. TIKHONOW_MAX (PSIMRCC). TIKHONOW_OMEGA (DCFT). (PSIMRCC). TIKHONOW_TRIPLES (PSIMRCC). TILE_SZ (SCF). TPDM (DCFT). (DETCI). TPDM_ABCD_TYPE (OCC). TPDM_ADD_REF (TRANSQT). TPDM_FILE (TRANSQT). TPDM_PRINT (DETCI). transition state; . geometry optimization. translate() LibmintsMolecule method. transpose() in module qcdb.vecutil. TRIPLES_ALGORITHM (PSIMRCC). TRIPLES_DIIS (PSIMRCC). TRIPLES_LOW_MEMORY (FNOCC). TURN_ON_ACTV (MCSCF). TWO-ELECTRONENERGY. type() CartesianEntry method. NumberValue method. VariableValue method. ZMatrixEntry method. U. UNCP-CORRECTED2-BODYINTERACTIONENERGY. unique() LibmintsMolecule method. units; . molecule. UNITS (GLOBALS). units() LibmintsMolecule method. UPDATE (DETCI). update_geometry() LibmintsMolecule method. USE_SPIN_SYM (PSIMRCC). USE_SPIN_SYMMETRY (PSIMRCC). useful() in module qcdb.dbproc. util module. V. VAL_EX_LEVEL (DETCI). valid_atom_map() LibmintsMolecule method. vali",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/genindex.html:44292,Optimiz,Optimized,44292,psi4manual/4.0b4/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html,1,['Optimiz'],['Optimized']
Performance,"DENSITY (Expert) — For internal use only! Compute the one-particle density matrix, but not the two-particle density matrix. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY)¶CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2)¶DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html:185803,optimiz,optimization,185803,psi4manual/1.6.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html,1,['optimiz'],['optimization']
Performance,"DETCI); DETCI — Do average the OPDM over several roots in order to obtain a state-average one-particle density matrix? This density matrix can be diagonalized to obtain the CI natural orbitals. Type: boolean; Default: false. OPDM_PRINT (DETCI); DETCI — Do print the one-particle density matrix for each root?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently Quasy Newton-Raphson algorithm avaliable with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algor",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:176549,optimiz,optimization,176549,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimization']
Performance,"DETCI); DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk; the number of vectors specified by RESTART_VECS (obsolete) is collapsed down to one vector per root. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM); CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (DETCI); DETCI — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_DOCC (PSIMRCC); PSIMRCC — The number of doubly occupied orbitals per irrep. Type: array; Default: No Default. RESTRICTED_DOCC (TRANSQT); TRANSQT — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (DETCI); DETCI — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (TRANSQT); TRANSQT — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RFO_FOLLOW_ROOT (OPTKING); OPTKING — Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_ROOT (OPTKING); OPTKING — Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RHF_TRIPLETS (CCEOM); CCEOM — Do form a triplet state from RHF reference?. Type: boolean; Default: false. RMS_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. RMS_FORCE_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms force (internal coordinates, atomi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:111077,optimiz,optimized,111077,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,6,['optimiz'],['optimized']
Performance,"DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. cbs-parser; mtd/basis syntax examples. options1; check all variety of options parsing. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. dfccsdat2; DF-A-CCSD(T) cc-pVDZ energy for the NH molecule. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dlpnomp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:15841,perform,performs,15841,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['perform'],['performs']
Performance,"DF-MP2 cc-pVDZ gradients for the H2O molecule. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. freq-masses; check nonphysical masses possible. cc17; Single point energies of multiple excited states with EOM-CCSD. fci-coverage; 6-31G H2O Test for coverage. cdoremp-energy1; Cholesky decomposed OO-REMP/cc-pVDZ energy for the H2O molecule. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. dft1-alt; DFT Functional Test. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. mbis-6; MBIS calculation on H2O. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc13c; Tests RHF CCSD(T)gradients. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. sad-scf-type; Test SAD SCF guesses on noble gas atom. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. cc38; RHF-CC2-LR/cc-pVDZ s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:2169,perform,performs,2169,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['perform'],['performs']
Performance,"DFJCOSK method. psi4.core.DirectJK method. psi4.core.JK method. psi4.core.MemDFJK method. c_omega() psi4.core.SuperFunctional method. c_os_alpha() psi4.core.SuperFunctional method. C_right_add() psi4.core.DFJCOSK method. psi4.core.DirectJK method. psi4.core.JK method. psi4.core.MemDFJK method. c_ss_alpha() psi4.core.SuperFunctional method. Ca() psi4.core.CCWavefunction method. psi4.core.CIWavefunction method. psi4.core.CUHF method. psi4.core.DFEP2Wavefunction method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.SADGuess method. psi4.core.UHF method. psi4.core.Wavefunction method. Ca_subset() psi4.core.CCWavefunction method. psi4.core.CIWavefunction method. psi4.core.CUHF method. psi4.core.DFEP2Wavefunction method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. psi4.core.Wavefunction method. CACHELEVEL (ADC). (CCDENSITY). (CCENERGY). (CCEOM). (CCHBAR). (CCLAMBDA). (CCRESPONSE). (CCTRANSORT). (DCT). (OCC). CACHETYPE (CCENERGY). (CCEOM). CALC_S_SQUARED (DETCI). CANONICALIZE_ACTIVE_FAVG (MCSCF). CANONICALIZE_INACTIVE_FAVG (MCSCF). CART_HESS_READ (OPTKING). Cartesian psi4.core.GaussianType attribute. Cb() psi4.core.CCWavefunction method. psi4.core.CIWavefunction method. psi4.core.CUHF method. psi4.core.DFEP2Wavefunction method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.SADGuess method. psi4.core.UHF method. psi4.core.Wavefunction method. Cb_subset() psi4.core.CCWavefunction method. psi4.core.CIWavefunction method. psi4.core.CUHF method. psi4.core.DFEP2Wavefunction method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. psi4.core.Wavefunction method. CBS CORRELATION ENERGY. CBS NUMBER. CBS REFERENCE ENERGY. CBS TOTAL ENERGY. cbs(). ; extrapolation schemes. output. setting keywords. theory, [1], [2]. cbs() in module psi4.driver. CC. ; theory. CC (DETCI). CC ALPHA-ALPHA PAIR ENERGIES. CC ALPHA-BETA PAIR ENERGIES. CC CORRELATION EN",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/genindex.html:17443,CACHE,CACHETYPE,17443,psi4manual/1.6.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/genindex.html,1,['CACHE'],['CACHETYPE']
Performance,"DFT_DISPERSION_PARAMETERS. -D; alias to -D2P4;  . -D1; -D1 [2] within Psi4;  . -D2; alias to -D2P4;  . -D2P4; -D2 [3] within Psi4; []. -D2GR; -D2 [3] through dftd3; [, ]. -D3; alias to -D3ZERO;  . -D3ZERO; -D3 [4] w/ original zero-damping through dftd3; [, , , ]. -D3BJ; -D3 [5] w/ newer Becke-Johnson rational damping through dftd3; [, , , ]. -D3M; alias to -D3MZERO;  . -D3MZERO; -D3 [6] w/ reparameterized and more flexible original zero-damping through dftd3; [, , , ]. -D3MBJ; -D3 [6] w/ reparameterized newer Becke-Johnson rational damping through dftd3; [, , , ]. Footnotes. [1]Note that there are functionals with these extensions (e.g., wB97X-D) that,; not being Grimme corrections, have nothing to do with this table. [2][Grimme:2004:1463]. [3](1, 2) [Grimme:2006:1787]. [4][Grimme:2010:154104]. [5][Grimme:2011:1456]. [6](1, 2) [Smith:2016:2197]. A few practical examples:. DFT-D2 single point with default parameters (dftd3 not called); energy('bp86-d'). DFT-D3BJ optimization with default parameters; optimize('pbe-d3bj'). DFT-D2 optimization with custom s6 parameter; set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values); set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). If only dispersion corrections (rather than total energies) are of; interest, the dftd3 program can be run independently of the scf; through the python function run_dftd3(). (This function; is the same Psi4/dftd3 interface that is called during an scf job.); This route is much faster than running a DFT-D energy. Some set-up:; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). The same four dispersion corrections/gradients as the section above:; >>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05. >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]. >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/dftd3-1.html:6244,optimiz,optimization,6244,psi4manual/1.0.0/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/dftd3-1.html,4,['optimiz'],"['optimization', 'optimize']"
Performance,"DIAGONAL_CCSD_T (PSIMRCC). OMEGA (CCRESPONSE). (CCSORT). OMEGA_ERF (MINTS). OMP2; . setting keywords. theory. OMP2.5; . setting keywords. OMP2CORRELATIONENERGY. OMP2TOTALENERGY. OMP3; . setting keywords. theory. OMP3CORRELATIONENERGY. OMP3TOTALENERGY. OMP_N_THREAD (CPHF). OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4]. ONE-ELECTRONENERGY. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OPDM (CPHF). (DETCI). OPDM_AVG (DETCI). OPDM_IN_FILE (TRANSQT). OPDM_KE (DETCI). OPDM_OUT_FILE (TRANSQT). OPDM_PRINT (DETCI). OPDM_RELAX (CCDENSITY). (CPHF). (DFMP2). opt(); . see optimize(); . OPT_METHOD (OCC). OPT_TYPE (OPTKING). optimization; . see geometry optimization; . optimize(); . setting keywords. optimize() in module driver. OptionsState class in p4util.optproc. OptionState class in p4util.optproc. ORB_OPT (OCC). ORB_RESP_SOLVER (OCC). Orbital-Optimized Methods; . theory. Orbital-Optimized Methods, OCEPA. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. orientation_fixed() LibmintsMolecule method. ORTH_TYPE (OCC). output; . SAPT. cbs(). database(). geometry optimization. P. P (THERMO). p4const module. p4const.__init__ module. p4const.physconst module. p4const.psifiles module. p4regex module. p4util module. p4util.__init__ module. p4util.basislist module. p4util.basislistdunning module. p4util.basislistother module. p4util.optproc module. p4util.procutil module. p4util.text module. p4util.util module. PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parse_arbitrary_order() in module driver. parse_cotton_irreps() in module driver. parse_error() in module pcmgetkw. parse_multiline_array() in module inputparser. parseFile() GetkwParser method. parseString() GetkwParser method. PATH, [1], [2], [3], [4]. PCG_BETA_TYPE (OCC). PCG_CONVERGENCE (OCC). PCG_MAXITER (OCC). pcmgetkw module. pcmpreprocess module. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/genindex.html:33766,Optimiz,Optimized,33766,psi4manual/4.0b5/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/genindex.html,1,['Optimiz'],['Optimized']
Performance,"DIIS'd); frac_diis = kwargs.get('frac_diis', True). # By default, use the neutral orbitals as a guess for the anion; neutral_guess = kwargs.get('neutral_guess', True). # By default, burn-in with UHF first, if UKS; hf_guess = False; if psi4.get_global_option('REFERENCE') == 'UKS':; hf_guess = kwargs.get('hf_guess', True). # By default, re-guess at each N; continuous_guess = kwargs.get('continuous_guess', False). # By default, drop the files to the molecule's name; root = kwargs.get('filename', molecule.name()); traverse_filename = root + '.traverse.dat'; # => Traverse <= #; occs = []; energies = []; potentials = []; convs = []. # => Run the neutral for its orbitals, if requested <= #. old_df_ints_io = psi4.get_global_option(""DF_INTS_IO""); psi4.set_global_option(""DF_INTS_IO"", ""SAVE""). old_guess = psi4.get_global_option(""GUESS""); if (neutral_guess):; if (hf_guess):; psi4.set_global_option(""REFERENCE"",""UHF""); energy('scf'); psi4.set_global_option(""GUESS"", ""READ""); psi4.set_global_option(""DF_INTS_IO"", ""LOAD""). # => Run the anion first <= #. molecule.set_molecular_charge(chargem); molecule.set_multiplicity(multm). # => Burn the anion in with hf, if requested <= #; if hf_guess:; psi4.set_global_option(""REFERENCE"",""UHF""); energy('scf', molecule=molecule, **kwargs); psi4.set_global_option(""REFERENCE"",""UKS""); psi4.set_global_option(""GUESS"", ""READ""); psi4.set_global_option(""DF_INTS_IO"", ""SAVE""). psi4.set_global_option(""FRAC_START"", frac_start); psi4.set_global_option(""FRAC_RENORMALIZE"", True); psi4.set_global_option(""FRAC_LOAD"", False). for occ in LUMO_occs:. psi4.set_global_option(""FRAC_OCC"", [LUMO]); psi4.set_global_option(""FRAC_VAL"", [occ]). E, wfn = energy('scf', return_wfn=True, molecule=molecule, **kwargs); C = 1; if E == 0.0:; E = psi4.get_variable('SCF ITERATION ENERGY'); C = 0. if LUMO > 0:; eps = wfn.epsilon_a(); potentials.append(eps[int(LUMO) - 1]); else:; eps = wfn.epsilon_b(); potentials.append(eps[-int(LUMO) - 1]). occs.append(occ); energies.append(E); convs.app",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/frac.html:3510,LOAD,LOAD,3510,psi4manual/1.0.0/_modules/frac.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/frac.html,1,['LOAD'],['LOAD']
Performance,"DIRECTION¶. IRC mapping direction. Type: string; Possible Values: FORWARD, BACKWARD; Default: FORWARD. IRC_STEP_SIZE¶. IRC step size in bohr(amu). Type: double; Default: 0.2. IRC_STOP¶. Decide when to stop IRC calculations. Type: string; Possible Values: ASK, STOP, GO; Default: STOP. OPT_TYPE¶. Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. RFO_FOLLOW_ROOT¶. Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_ROOT¶. Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. STEP_TYPE¶. Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. Convergence Control¶. FLEXIBLE_G_CONVERGENCE¶. Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. G_CONVERGENCE¶. Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. MAX_DISP_G_CONVERGENCE¶. Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE¶. Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE¶. Convergence criterion for geometry optmization: maximum force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. RMS_DISP_G_CONVERGENCE¶. Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. RMS_FORCE_G_CON",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__optking-1.html:2207,optimiz,optimization,2207,psi4manual/4.0b4/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__optking-1.html,4,['optimiz'],['optimization']
Performance,"DL Solver number of roots. Type: integer; Default: 1. SOLVER_PRECONDITION¶. Solver precondition type. Type: string; Possible Values: SUBSPACE, JACOBI, NONE; Default: JACOBI. SOLVER_PRECONDITION_MAXITER¶. Solver precondtion max steps. Type: integer; Default: 1. SOLVER_PRECONDITION_STEPS¶. Solver precondition step type. Type: string; Possible Values: CONSTANT, TRIANGULAR; Default: TRIANGULAR. SOLVER_QUANTITY¶. Solver residue or eigenvector delta. Type: string; Possible Values: EIGENVECTOR, RESIDUAL; Default: RESIDUAL. SOLVER_TYPE¶. Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. TDHF_MEM_SAFETY_FACTOR¶. Memory safety factor for allocating JK. Type: double; Default: 0.75. Expert¶. JOBTYPE¶. Type of job being performed. Type: string; Default: SP. WFN¶. Wavefunction type. Type: string; Possible Values: MP2; Default: MP2. Table Of Contents. CPHF; General; CACHELEVEL; CACHETYPE; CIS_AD_STATES; CIS_AMPLITUDE_CUTOFF; CIS_DOPDM_STATES; CIS_MEM_SAFETY_FACTOR; CIS_NO_STATES; CIS_OPDM_STATES; CIS_TOPDM_STATES; CPHF_MEM_SAFETY_FACTOR; CPHF_TASKS; DEBUG; DF_BASIS_SCF; DO_SINGLETS; DO_TRIPLETS; EXPLICIT_HAMILTONIAN; FITTING_ALGORITHM; FITTING_CONDITION; MODULE; MP2_OS_SCALE; MP2_SS_SCALE; MP2_TYPE; OMP_N_THREAD; OPDM; OPDM_RELAX; PRINT; REFERENCE; SCF_TYPE; SCHWARZ_CUTOFF; SCS; SCS_N; SOLVER_CONVERGENCE; SOLVER_EXACT_DIAGONAL; SOLVER_MAXITER; SOLVER_MAX_SUBSPACE; SOLVER_MIN_SUBSPACE; SOLVER_NORM; SOLVER_N_GUESS; SOLVER_N_ROOT; SOLVER_PRECONDITION; SOLVER_PRECONDITION_MAXITER; SOLVER_PRECONDITION_STEPS; SOLVER_QUANTITY; SOLVER_TYPE; TDHF_MEM_SAFETY_FACTOR. Expert; JOBTYPE; WFN. Previous topic; WFN; Next topic; CACHELEVEL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__cphf-1.html:5341,CACHE,CACHELEVEL,5341,psi4manual/4.0b5/autodir_options_c/module__cphf-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__cphf-1.html,6,['CACHE'],"['CACHELEVEL', 'CACHETYPE']"
Performance,"DM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (CPHF); CPHF — Do add relaxation terms to the one particle density matrix, for properties?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (OCC); OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORTH_TYPE (OCC); OCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. P (THERMO); THERMO — Pressure in Pascal for thermodynamic analysis. Type: double; Default: 101325. PAIR_ENERGIES_PRINT (CCENERGY); CCENERGY — Do print MP2 and CCSD pair energies for RHF references?. Type: boolean; Default: false. PARALLEL (SCF); SCF (Expert) — Do run in parallel?. Type: boolean; Default: false. PCG_BETA_TYPE (OCC); OCC — Type of PCG beta parameter (Fl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html:92313,optimiz,optimize,92313,psi4manual/4.0b5/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimize']
Performance,"DOCC and RESTRICTED_UOCC keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively, in the; MCSCF wavefunction. However, the form of these orbitals will be optimized in; the MCSCF procedure. It is also possible to literally freeze inactive orbitals; in their original (SCF) form using the FROZEN_DOCC and; FROZEN_UOCC keywords. This is not normally what one wishes to do in; an MCSCF computation (e.g., it complicates the computation of gradients), but; it can make the computations faster and is helpful in some circumstances where; unphysical mixing of inactive and active occupied orbitals might occur.; Presently, it is not possible to mix the use of restricted and frozen orbitals; in PSI4.; An illustrative CASSCF example is as follows:; molecule {; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; basis 6-31G**; restricted_docc [1, 0, 0, 0]; active [3, 0, 1, 2]; }; energy('casscf'). This input will compute the CASSCF energy of water where the 1s Oxygen orbital; and several virtual orbitals are not included in the CI expansion, but are; still optimized. The following is a full list of spaces within the various MCSCF; types. Orbital spaces for MCSCF computations¶. RASSCF; CASSCF. FROZEN_UOCC; FROZEN_UOCC. RESTRICTED_UOCC; RESTRICTED_UOCC. RAS4; ACTIVE. RAS3. RAS2. RAS1. RESTRICTED_DOCC; RESTRICTED_DOCC. FROZEN_DOCC; FROZEN_DOCC. Basic MCSCF Keywords¶. MCSCF_E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_R_CONVERGENCE¶. Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-5. MCSCF_TYPE¶. Method to handle the two-electron integrals. Type: string; Possible Values: DF, CONV, AO; Default: CONV. MCSCF_ALGORITHM¶. Convergence algorithm to utilize. Two-Step, Augmented Hessian, or One-Step. Defaults to TS for RASSCF. Type: string; Possible Values: TS, AH; Default: TS. MCSCF_MAXITER¶. M",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/mcscf-1.html:2702,optimiz,optimized,2702,psi4manual/1.4.0/mcscf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/mcscf-1.html,5,['optimiz'],['optimized']
Performance,"DOCC and RESTRICTED_UOCC keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively, in the; MCSCF wavefunction. However, the form of these orbitals will be optimized in; the MCSCF procedure. It is also possible to literally freeze inactive orbitals; in their original (SCF) form using the FROZEN_DOCC and; FROZEN_UOCC keywords. This is not normally what one wishes to do in; an MCSCF computation (e.g., it complicates the computation of gradients), but; it can make the computations faster and is helpful in some circumstances where; unphysical mixing of inactive and active occupied orbitals might occur.; Presently, it is not possible to mix the use of restricted and frozen orbitals; in PSI4.; An illustrative CASSCF example is as follows:; molecule {; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; basis 6-31G**; restricted_docc [1, 0, 0, 0]; active [3, 0, 1, 2]; }; energy('casscf'). This input will compute the CASSCF energy of water where the 1s Oxygen orbital; and several virtual orbitals are not included in the CI expansion, but are; still optimized. The following is a full list of spaces within the various MCSCF; types. Orbital spaces for MCSCF computations¶. RASSCF; CASSCF. FROZEN_UOCC; FROZEN_UOCC. RESTRICTED_UOCC; RESTRICTED_UOCC. RAS4; ACTIVE. RAS3. RAS2. RAS1. RESTRICTED_DOCC; RESTRICTED_DOCC. FROZEN_DOCC; FROZEN_DOCC. Basic MCSCF Keywords¶. MCSCF_E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_R_CONVERGENCE¶. Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-5. MCSCF_TYPE¶. Method to handle the two-electron integrals. Type: string; Possible Values: DF, CONV, AO; Default: CONV. MCSCF_ALGORITHM¶. Convergence algorithm to utilize. Two-Step, Augmented Hessian. Defaults to TS for RASSCF. Type: string; Possible Values: TS, AH; Default: TS. MCSCF_MAXITER¶. Maximum number",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/mcscf.html:2711,optimiz,optimized,2711,psi4manual/master/mcscf.html,https://psicode.org,https://psicode.org/psi4manual/master/mcscf.html,4,['optimiz'],['optimized']
Performance,"DTQ) TOTAL ENERGY¶. MP4(SDTQ) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the full MP4 level of theory. Quantity MP4 CORRELATION; ENERGY / MP4(SDTQ) CORRELATION ENERGY is left-hand term in Eq. (2). (2)¶\[E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}\]. MPn TOTAL ENERGY¶. MPn CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the labeled Møller–Plesset perturbation theory level.; n is MP perturbation order. NUCLEAR REPULSION ENERGY¶; The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/glossary_psivariables-1.html:14933,optimiz,optimized,14933,psi4manual/1.1.0/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/glossary_psivariables-1.html,2,['optimiz'],['optimized']
Performance,"DUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC)¶OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCT)¶DCT (Exper",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:183201,optimiz,optimize,183201,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,5,['optimiz'],['optimize']
Performance,"D_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DOI_BASIS_TOLERANCE (DLPNO)¶DLPNO (Expert) — Screening criteria for basis function values on DOI grids. Type: conv double; Default: 1.0e-10. DOI_PRUNING_SCHEME (DLPNO)¶DLPNO (Expert) — Pruning scheme for DOI grids. Type: string; Possible Values: ROBUST, TREUTLER, NONE, FLAT, P_GAUSSIAN, D_GAUSSIAN, P_SLATER, D_SLATER, LOG_GAUSSIAN, LOG_SLATER, NONE; Default: ROBUST. DOI_RADIAL_POINTS (DLPNO)¶DLPNO (Expert) — Number of radial points in DOI grid. Type: integer; Default: 25. DOI_SPHERICAL_POINTS (DLPNO)¶DLPNO (Expert) — Number of spherical points in DOI grid. Type: integer; Default: 50. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:122586,optimiz,optimization,122586,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,1,['optimiz'],['optimization']
Performance,"Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP (CFOUR); CFOUR — Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEM_UNIT (CFOUR); CFOUR — Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR); CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR); CFOUR — Specif",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:55506,optimiz,optimization,55506,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,8,['optimiz'],['optimization']
Performance,"Default. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_AMPS_PRINT¶. Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. PROP_ALL¶. Compute unrelaxed properties for all excited states. Type: boolean; Default: true. PROP_ROOT¶. Root number (within its irrep) for computing properties. Type: integer; Default: 1. PROP_SYM¶. The symmetry of states. Type: integer; Default: 1. RESTART¶. Do restart the coupled-cluster iterations from old and amplitudes?. Type: boolean; Default: false. ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. SEKINO¶. Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. ZETA¶. Do use zeta?. Type: boolean; Default: false. Expert¶. JOBTYPE¶. Type of job being performed. Type: string; Default: No Default. WFN¶. Wavefunction type. Type: string; Default: SCF. Table Of Contents. CCLAMBDA; General; ABCD; AO_BASIS; CACHELEVEL; DIIS; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; NUM_AMPS_PRINT; PROP_ALL; PROP_ROOT; PROP_SYM; RESTART; ROOTS_PER_IRREP; R_CONVERGENCE; SEKINO; ZETA. Expert; JOBTYPE; WFN. Previous topic; WFN; Next topic; ABCD. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Keywords by Module ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cclambda-1.html:3192,perform,performed,3192,psi4manual/1.0.0/autodir_options_c/module__cclambda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cclambda-1.html,4,"['CACHE', 'perform']","['CACHELEVEL', 'performed']"
Performance,"Default: 1e-5. RESTART¶. Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with PSI4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not account",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/cc.html:8032,CACHE,CACHETYPE,8032,psi4manual/master/cc.html,https://psicode.org,https://psicode.org/psi4manual/master/cc.html,15,['CACHE'],['CACHETYPE']
Performance,"Default: 5. DIIS_MAX_VECS (FNOCC); FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (LMP2); LMP2 — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (MCSCF); MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (PSIMRCC); PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF); SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCFT); DCFT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI); DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF); SCF — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_START (PSIMRCC); PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF); SCF — The minimum iteration to start storing DIIS vectors. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCFT); DCFT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI); DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIIS_START_ITER (LMP2); LMP2 — Iteration at which to start DIIS extrapolation. Type: integer; Default: 3. DIPMOM (DETCI); DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC); FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF); FINDIF — Displacement size in au for finite-di",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:33710,perform,performed,33710,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,2,['perform'],['performed']
Performance,"Default: 6.0/5.0. MP2_SOS_SCALE¶. MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2¶. Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OCC_ORBS_PRINT¶. Do print OCC orbital energies?. Type: boolean; Default: false. OEPROP¶. Do compute one electron properties?. Type: boolean; Default: false. OPT_METHOD¶. The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER¶. The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. PCG_BETA_TYPE¶. Type of PCG beta parameter (Fletcher-Reeves or Polak-Ribiere). Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_CONVERGENCE¶. Convergence criterion for residual vector of preconditioned conjugate gradient method. Type: conv double; Default: 1e-6. PCG_MAXITER¶. Maximum number of preconditioned conjugate gradient iterations. Type: integer; Def",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__occ-1.html:5536,optimiz,optimize,5536,psi4manual/1.0.0/autodir_options_c/module__occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__occ-1.html,6,['optimiz'],['optimize']
Performance,"Default: NONE. CACHELEVEL¶. Type: integer; Default: 2. EOM_REFERENCE¶. Type: string; Default: RHF. INTS_TOLERANCE¶. Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. KEEP_OEIFILE¶. Do retain the input one-electron integrals?. Type: boolean; Default: false. KEEP_TEIFILE¶. Do retain the input two-electron integrals?. Type: boolean; Default: false. LOCAL¶. Do ?. Type: boolean; Default: false. LOCAL_CORE_CUTOFF¶. Type: double; Default: 0.05. LOCAL_CPHF_CUTOFF¶. Type: double; Default: 0.10. LOCAL_CUTOFF¶. Type: double; Default: 0.02. LOCAL_DOMAIN_MAG¶. Do ?. Type: boolean; Default: false. LOCAL_DOMAIN_POLAR¶. Do ?. Type: boolean; Default: false. LOCAL_DOMAIN_SEP¶. Do ?. Type: boolean; Default: false. LOCAL_FILTER_SINGLES¶. Do ?. Type: boolean; Default: false. LOCAL_METHOD¶. Type: string; Default: WERNER. LOCAL_PAIRDEF¶. Type: string; Default: BP. LOCAL_WEAKP¶. Type: string; Default: NONE. OMEGA¶. Energy of applied field [au] for dynamic properties. Type: array; Default: No Default. PROPERTY¶. Type: string; Default: POLARIZABILITY. REFERENCE¶. Reference wavefunction type. Type: string; Default: RHF. SEMICANONICAL¶. Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. Expert¶. WFN¶. Wavefunction type. Type: string; Default: No Default. Table Of Contents. CCSORT; General; AO_BASIS; CACHELEVEL; EOM_REFERENCE; INTS_TOLERANCE; KEEP_OEIFILE; KEEP_TEIFILE; LOCAL; LOCAL_CORE_CUTOFF; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_DOMAIN_MAG; LOCAL_DOMAIN_POLAR; LOCAL_DOMAIN_SEP; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; OMEGA; PROPERTY; REFERENCE; SEMICANONICAL. Expert; WFN. Previous topic; WFN; Next topic; AO_BASIS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices »; Keywords by Module ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__ccsort-1.html:1721,CACHE,CACHELEVEL,1721,psi4manual/4.0b2/autodir_options_c/module__ccsort-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__ccsort-1.html,2,['CACHE'],['CACHELEVEL']
Performance,"Default: No Default. DO_ALL_TEI (TRANSQT); TRANSQT — Do transform all TEIs. Type: boolean; Default: false. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DOMAIN_PRINT (CCENERGY); CCENERGY — Do print the domains?. Type: boolean; Default: false. DOMAIN_PRINT_EXIT (CCENERGY); CCENERGY — Do exit after printing the domains?. Type: boolean; Default: false. DOMAINS (CCENERGY); CCENERGY —. Type: array; Default: No Default. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html:35991,perform,perform,35991,psi4manual/4.0b5/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html,2,['perform'],['perform']
Performance,"Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR); CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR); CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) an",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:50998,perform,performs,50998,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,6,['perform'],['performs']
Performance,"Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR); CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR); CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR); CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the and integrals are held in core; (=5) and and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:51071,perform,performs,51071,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['perform'],['performs']
Performance,"Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC¶. Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT¶. Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL¶. Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE¶. Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO¶. Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Psi4 Interface: The array above ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodir_options_c/module__cfour-1.html:15385,optimiz,optimization,15385,psi4manual/1.2.1/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodir_options_c/module__cfour-1.html,4,['optimiz'],['optimization']
Performance,"Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC¶. Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT¶. Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL¶. Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimization(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE¶. Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO¶. Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Type: string; Default: No Defaul",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:15246,optimiz,optimization,15246,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,4,['optimiz'],['optimization']
Performance,"Default: PK. SCHMIDT_ADD_RESIDUAL_TOLERANCE (CCEOM); CCEOM — Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. SCHWARZ_CUTOFF (CPHF); CPHF — The schwarz cutoff value. Type: double; Default: 1.0e-12. SCREEN_INTS (LMP2); LMP2 — Do screen integrals?. Type: boolean; Default: false. SCS (LMP2); LMP2 — Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SCS_CCSD (CCENERGY); CCENERGY — Do spin-component-scaled CCSD. Type: boolean; Default: false. SCS_CCSD (FNOCC); FNOCC — Do SCS-CCSD?. Type: boolean; Default: false. SCS_CEPA (FNOCC); FNOCC — Do SCS-CEPA? Note that the scaling factors will be identical to those for SCS-CCSD. Type: boolean; Default: false. SCS_MP2 (CCENERGY); CCENERGY — Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SCS_MP2 (FNOCC); FNOCC — Do SCS-MP2?. Type: boolean; Default: false. SCS_N (LMP2); LMP2 — Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SCS_TYPE (OCC); OCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCSN_MP2 (CCENERGY); CCENERGY — Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SEKINO (CCLAMBDA); CCLAMBDA — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEKINO (CCRESPONSE); CCRESPONSE — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEM_MAXITER (ADC); ADC — Maximum iteration number in simultaneous expansion method. Type: integer; Default: 30. SEMICANONICAL (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCEOM); CCEOM — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCSORT); CCSORT — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCTRIPLES); CCTRIPLES — Convert ROHF MO",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:118913,optimiz,optimized,118913,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimized']
Performance,"Default: SINGLES. EOM_REFERENCE (CCEOM); CCEOM — Reference wavefunction type for EOM computations. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. EOM_REFERENCE (CCHBAR); CCHBAR — Reference wavefunction type for EOM computations. Type: string; Default: RHF. EP_EA_POLES (OCC); OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC); OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC); OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI); DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST. Type: array; Default: No Default. EX_LEVEL (DETCI); DETCI — The CI excitation level. Type: integer; Default: 2. EXCH_SCALE_ALPHA (SAPT); SAPT — Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. EXCITATION_RANGE (CCEOM); CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF); CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF); SCF — An ExternalPotential (built by Python or NULL/None). Type: python; Default: No Default. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS); GLOBALS (Expert) — Assume external fields are arranged so that they ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:119848,perform,perform,119848,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,2,['perform'],['perform']
Performance,"Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT(DFT) computes the \(S^{inf}\) Exchange-Induction terms. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c-1.html:115487,perform,perform,115487,psi4manual/1.5.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c-1.html,2,['perform'],['perform']
Performance,"Disp are fulfilled. [6]; (1,2,3,4,5); Normal convergence achieved when all four criteria (Max Force, RMS Force,; Max Disp, and RMS Disp) are fulfilled. To help with flat; potential surfaces, alternate convergence achieved when 100\(\times\)rms force is less; than RMS Force criterion. [7]; Compensates for difficulties in converging geometry optmizations of supermolecular complexes; tightly, where large rms disp and max disp may result from flat potential surfaces even when; max force and/or rms force are small. For ultimate control, specifying a value for any of the five monitored options activates that; criterium and overwrites/appends it to the criteria set by G_CONVERGENCE.; Note that this revokes the special convergence arrangements detailed in notes [5] and [6]; and instead requires all active criteria to be fulfilled to; achieve convergence. To avoid this revokation, turn on keyword FLEXIBLE_G_CONVERGENCE. Interface to GeomeTRIC¶; The GeomeTRIC optimizer developed by Wang and Song [Wang:2016:214108] may be used in place of; Psi4’s native Optking optimizer. GeomeTRIC uses a translation-rotation-internal coordinate (TRIC); system that works well for optimizing geometries of systems containing noncovalent interactions.; Use of the GeomeTRIC optimizer is specified with the engine argument to; optimize(). The optimization will respect the keywords G_CONVERGENCE; and GEOM_MAXITER. Any other GeomeTRIC-specific options (including constraints); may be specified with the optimizer_keywords argument to optimize().; Constraints may be placed on cartesian coordinates, bonds, angles, and dihedrals, and they can be; used to either freeze a coordinate or set it to a specific value. See the GeomeTRIC github; for more information on keywords and JSON specification of constraints. Optimize the water molecule using GeomeTRIC:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; maxiter 100; g_convergence gau; }. optimize('hf/cc-pvdz', engine='geometric'). Optimize the water mole",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/optking.html:21735,optimiz,optimizer,21735,psi4manual/master/optking.html,https://psicode.org,https://psicode.org/psi4manual/master/optking.html,8,['optimiz'],['optimizer']
Performance,"Distant pair cutoff. Type: double; Default: 8.0. DISTRIBUTED_MATRIX (SCF); SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DO_ALL_TEI (TRANSQT); TRANSQT — Do transform all TEIs. Type: boolean; Default: false. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DOMAIN_PRINT (CIS); CIS — Do print the domains?. Type: boolean; Default: false. DOMAIN_PRINT_EXIT (LMP2); LMP2 — Do exit after printing the domains?. Type: boolean; Default: false. DOMAINS (CIS); CIS —. Type: array; Default: No Default. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:35704,perform,perform,35704,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,2,['perform'],['perform']
Performance,"Do allow “mixed” excitations involving RAS IV into the CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE, then if there are any electrons in RAS IV, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC)¶DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: integer; Default: 6. MO_MAXITER (DFOCC)¶DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC)¶OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF)¶MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC)¶OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_STEP_MAX (DFOCC)¶DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC)¶OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC)¶OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF)¶CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. MOGRAD_DAMPING (OCC)¶OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WITH_VIRTUAL (GLOBALS)¶GLOBALS — Write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs (false). Type: boolean; Default: true. MOLDEN_WRITE (DFOCC)¶DFOCC — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Defa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:167050,optimiz,optimization,167050,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimization']
Performance,"Do allow “mixed” excitations involving RAS IV into the CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE, then if there are any electrons in RAS IV, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC)¶DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: integer; Default: 6. MO_MAXITER (DFOCC)¶DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC)¶OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF)¶MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC)¶OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_STEP_MAX (DFOCC)¶DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC)¶OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC)¶OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF)¶CPHF — What app to test?. Type: string; Possible Values: RCPHF; Default: RCPHF. MOGRAD_DAMPING (OCC)¶OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WITH_VIRTUAL (GLOBALS)¶GLOBALS — Write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs (false). Type: boolean; Default: true. MOLDEN_WRITE (DFOCC)¶DFOCC — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (SCF)¶SC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c-1.html:168053,optimiz,optimization,168053,psi4manual/1.5.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimization']
Performance,"E (OMP2). SOS_SCALE2 (OMP2). SPINADAPT_ENERGIES (CCENERGY). split_menial() (in module wrappers). SS_E_CONVERGENCE (CCEOM). SS_R_CONVERGENCE (CCEOM). SS_SKIP_DIAG (CCEOM). SS_VECS_PER_ROOT (CCEOM). STEP_TYPE (OPTKING). success() (in module util). superfunctional_list() (in module functional). symmetry. molecule. T. T2_COUPLED (CCENERGY). T3_WS_INCORE (CCENERGY). (CCEOM). T_AMPS (CCHBAR). Table (class in text). TAU_SQUARED (DCFT). tblhead() (in module wrappers). TDHF_MEM_SAFETY_FACTOR (CPHF). (PLUGIN_FOCK), [1]. TDM (DETCI). TDM_PRINT (DETCI). TDM_WRITE (DETCI). TEST_B (OPTKING). test_ccl_functional() (in module functional). TEST_DERIVATIVE_B (OPTKING). text (module). theory; . ADC. CC. CI. DF-MP2. DFT. SAPT. SCF. cbs(), [1]. threading. TIKHONOW_MAX (PSIMRCC). TIKHONOW_OMEGA (DCFT). (PSIMRCC). TIKHONOW_TRIPLES (PSIMRCC). TILE_SIZE (PLUGIN_TEST_MATRIX), [1]. TILE_SZ (SCF). TPDM (DCFT). (DETCI). TPDM_ADD_REF (TRANSQT). TPDM_FILE (TRANSQT). TPDM_PRINT (DETCI). transition state; . geometry optimization. TRIPLES_ALGORITHM (PSIMRCC). TRIPLES_DIIS (PSIMRCC). TURN_ON_ACTV (MCSCF). TWO-ELECTRONENERGY. U. UNCP-CORRECTED2-BODYINTERACTIONENERGY. units; . molecule. UNITS (GLOBALS). UPDATE (DETCI). USE_SPIN_SYM (PSIMRCC). USE_SPIN_SYMMETRY (PSIMRCC). util (module). V. VAL_EX_LEVEL (DETCI). validate_bracketed_basis() (in module wrappers). validate_scheme_args() (in module wrappers). ValidationError. VECS_CC3 (CCEOM). VECS_PER_ROOT (CCEOM). VECS_WRITE (DETCI). W. WABEI_LOWDISK (CCHBAR). WFN (CCDENSITY). (CCENERGY). (CCEOM). (CCHBAR). (CCLAMBDA). (CCRESPONSE). (CCSORT). (CCTRIPLES). (CIS). (CLAG). (DETCI). (GLOBALS). (LMP2). (MP2). (SCF). (TRANSQT). (TRANSQT2). WFN_SYM (MCSCF). (PSIMRCC). wrappers (module). X. XI (CCDENSITY). XI_CONNECT (CCDENSITY). Z. ZAPTnCORRELATIONENERGY. ZAPTnTOTALENERGY. ZERO_INTERNAL_AMPS (PSIMRCC). ZETA (CCDENSITY). (CCLAMBDA). Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |; PSI4 [beta2] » . © Copyright 201",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/genindex.html:28233,optimiz,optimization,28233,psi4manual/4.0b2/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/genindex.html,1,['optimiz'],['optimization']
Performance,"E * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 1. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. IGNORE_TAU (DCFT); DCFT — Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: false. INTCO_FIXED_EQ_FORCE_CONSTANT (OPTKING); OPTKING — In constrained optimizations, for internal coordinates with user-specified equilibrium values, this is the force constant (in au) used to apply an additional force to each coordinate. If the user is only concerned to satify the desired constraint, then the user need only ensure that this value is sufficiently large. Alternatively, the user may specify this value to apply a force of a particular magnitude, in which case the given equilibrium value may or may not be reached by the optimization. Type: double; Default: 2.0. INTCOS_GENERATE_EXIT (OPTKING); OPTKING — Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. INTERFRAG_DIST_INV (OPTKING); OPTKING — Do use for the stretching coordinate between fragments? Otherwise, use . Type: boolean; Default: false. INTERFRAG_HESS (OPTKING); OPTKING — Model Hessian to guess interfragment force constants. Type: string; Possible Values: DEFAULT, FISCHER_LIKE; Default: DEFAULT. INTERFRAG_MODE (OPTKING); OPTKING — When interfragment coordinates are present, use as reference points",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html:44733,optimiz,optimizations,44733,psi4manual/4.0b2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimizations']
Performance,"E — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING); OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Def",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:10281,cache,cache,10281,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,6,['cache'],['cache']
Performance,"E — Specifies the choice of representation of the electric dipole operator. Acceptable values are LENGTH for the usual length-gauge representation, VELOCITY for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or BOTH. Note that, for optical rotation calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: LENGTH. GEOM_MAXITER (OPTKING); OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF); FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to CORE except for geometry optimizations, in which case READ becomes the default after the first geometry step. Type: string; Possible Values: CORE, GWH, SAD, READ; Default: CORE. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file; IMPORT to import a guess previously exported from a CI computation (possibly using a different CI space). Type: string; Possible Values: UNIT, H0_BLOCK, DFILE, IMPORT; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI); DETCI (Expert) — This parameter specifies the size of the H0 block of the ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:52209,optimiz,optimizations,52209,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,4,['optimiz'],['optimizations']
Performance,E; NUM_FROZEN_DOCC; NUM_FROZEN_UOCC; PARENT_SYMMETRY; PCM; PE; PRINT; PRINT_NOONS; PROPERTIES; PROPERTIES_ORIGIN; PUREAM; QC_MODULE; RAS1; RAS2; RAS3; RAS4; RELATIVISTIC; RESTRICTED_DOCC; RESTRICTED_UOCC; SCF_TYPE; SOCC; WFN; WRITER_FILE_LABEL; CANONICALIZE_ACTIVE_FAVG; CANONICALIZE_INACTIVE_FAVG; CI_DIIS; D_CONVERGENCE; DIIS; DIIS_MAX_VECS; DOCC; E_CONVERGENCE; FAVG; FAVG_START; FOLLOW_ROOT; FORCE_TWOCON; INTERNAL_ROTATIONS; LEVEL_SHIFT; MAXITER; MO_READ; REFERENCE; ROTATE_MO_ANGLE; ROTATE_MO_IRREP; ROTATE_MO_P; ROTATE_MO_Q; SOCC; TURN_ON_ACTV; WFN_SYM; BASIS; OMEGA_ERF; ADC; CCDENSITY; CCENERGY; CCEOM; CCHBAR; CCLAMBDA; CCRESPONSE; CCTRANSORT; CCTRIPLES; CFOUR; CPHF; DCT; DETCI; DFEP2; DFMP2; DFOCC; DMRG; EFP; FINDIF; FISAPT; FNOCC; GDMA; GLOBALS; MCSCF; MINTS; MRCC; OCC; OPTKING; PCM; PE; PSIMRCC; SAPT; SCF; THERMO; E_CONVERGENCE; INTS_TOLERANCE; MRCC_LEVEL; MRCC_METHOD; MRCC_NUM_DOUBLET_ROOTS; MRCC_NUM_SINGLET_ROOTS; MRCC_NUM_TRIPLET_ROOTS; MRCC_OMP_NUM_THREADS; MRCC_RESTART; CACHELEVEL; CC_DIIS_MAX_VECS; CC_DIIS_MIN_VECS; CC_MAXITER; CCL_ENERGY; CEPA_OS_SCALE; CEPA_SOS_SCALE; CEPA_SS_SCALE; CEPA_TYPE; CUTOFF; DIIS_MAX_VECS; DIIS_MIN_VECS; DO_DIIS; DO_LEVEL_SHIFT; DO_SCS; DO_SOS; E_CONVERGENCE; E3_SCALE; EA_POLES; EKT_EA; EKT_IP; EP_EA_POLES; EP_IP_POLES; EP_MAXITER; IP_POLES; LEVEL_SHIFT; LINEQ_SOLVER; MAX_MOGRAD_CONVERGENCE; MO_DIIS_NUM_VECS; MO_MAXITER; MO_READ; MO_STEP_MAX; MO_WRITE; MOGRAD_DAMPING; MP2_OS_SCALE; MP2_SOS_SCALE; MP2_SOS_SCALE2; MP2_SS_SCALE; NAT_ORBS; OCC_ORBS_PRINT; OEPROP; OPT_METHOD; ORB_OPT; ORB_RESP_SOLVER; ORTH_TYPE; OS_SCALE; PCG_BETA_TYPE; PCG_CONVERGENCE; PCG_MAXITER; R_CONVERGENCE; RELAXED; RMS_MOGRAD_CONVERGENCE; SCS_TYPE; SOS_TYPE; SPIN_SCALE_TYPE; SS_SCALE; SYMMETRIZE; TPDM_ABCD_TYPE; WFN_TYPE; ADD_AUXILIARY_BONDS; AUXILIARY_BOND_FACTOR; CART_HESS_READ; CONSECUTIVE_BACKSTEPS; COVALENT_CONNECT; DYNAMIC_LEVEL; ENSURE_BT_CONVERGENCE; FINAL_GEOM_WRITE; FIXED_BEND; FIXED_COORD_FORCE_CONSTANT; FIXED_DIHEDRAL; FIXED_DISTANCE; FLEXIBLE_G_,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:565235,CACHE,CACHELEVEL,565235,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,"ECONDITION_STEPS (CPHF); CPHF — Solver precondition step type. Type: string; Possible Values: CONSTANT, TRIANGULAR; Default: TRIANGULAR. SOLVER_QUANTITY (CPHF); CPHF — Solver residue or eigenvector delta. Type: string; Possible Values: EIGENVECTOR, RESIDUAL; Default: RESIDUAL. SOLVER_TYPE (CPHF); CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC); DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF); SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF); SCF — Second order convergence threshold. Cease microiterating at this value. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF); SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF); SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF); SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF); SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSA",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:211524,perform,perform,211524,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,2,['perform'],['perform']
Performance,"ECTION ENERGY. OMP2.5 SAME-SPIN CORRELATION ENERGY. OMP2.5 TOTAL ENERGY. OMP3. ; setting keywords. theory. OMP3 CORRELATION ENERGY. OMP3 DOUBLES ENERGY. OMP3 OPPOSITE-SPIN CORRELATION ENERGY. OMP3 REFERENCE CORRECTION ENERGY. OMP3 SAME-SPIN CORRELATION ENERGY. OMP3 TOTAL ENERGY. OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8]. ONE-ELECTRON ENERGY. one_electron_integrals() psi4.core.MintsHelper method. OneBodyAOInt class in psi4.core. OneBodySOInt class in psi4.core. onel_Hx() psi4.core.HF method. ONEPDM (DFMP2). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DCT). (DETCI). opdm() psi4.core.CIWavefunction method. OPDM_ONLY (CCDENSITY). OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method. open_check() psi4.core.IO method. operate() psi4.core.SymmetryOperation method. opt(). . see optimize(). opt() in module psi4.driver. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_RESTART (OPTKING). OPT_TYPE (OPTKING). OPTIMIZATION ITERATIONS. OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4.driver. optimize_geometric() in module psi4.driver. option_exists_in_module() in module psi4.core. Options class in psi4.core. options() psi4.core.Wavefunction method. options_to_python() in module psi4.core. OptionsState class in psi4.driver.p4util. OptionsStateCM() in module psi4.driver.p4util. OptionState class in psi4.driver.p4util. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCT). orbital_values() psi4.core.PointFunctions method. ORBITALS_WRITE (SCF). OrbitalSpace class in psi4.core. order() psi4.core.CharacterTable method. psi4.core.PointGroup method. ordered_params psi4.driver.EmpiricalDispersion attribute. psi4.driver.procrouting.empirical_dispersion.EmpiricalDispersion attribute. OREMP. ; setting keywor",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/genindex.html:83640,Optimiz,OptimizationConvergenceError,83640,psi4manual/1.7.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/genindex.html,2,['Optimiz'],['OptimizationConvergenceError']
Performance,"ECTOR, RESIDUAL; Default: RESIDUAL. SOLVER_TYPE (CPHF); CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SORTED_TEI_FILE (TRANSQT); TRANSQT —. Type: integer; Default: PSIF_MO_TEI. SOS_SCALE (OMP2); OMP2 —. Type: double; Default: 1.3. SOS_SCALE2 (OMP2); OMP2 —. Type: double; Default: 1.2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do ?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM —. Type: integer; Default: 5. STEP_TYPE (OPTKING); OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD; Default: RFO. T2_COUPLED (CCENERGY); CCENERGY — Do ?. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do ?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do ?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TAU_SQUARED (DCFT); DCFT — Controls whether to compute the DCFT energy with the Tau^2 correction to Tau. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDM_PRINT (DET",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html:95130,optimiz,optimization,95130,psi4manual/4.0b2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html,4,"['Optimiz', 'optimiz']","['Optimization', 'optimization']"
Performance,"EFERENCE (TRANSQT2); TRANSQT2 — Reference wavefunction type. Type: string; Default: RHF. REFERENCE_SYM (DETCI); DETCI (Expert) — Irrep for CI vectors; -1 = find automatically. This option allows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC); DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC); DFOCC — Do use regularized denominators?. Type: boolean; Default: false. REL_BASIS (GLOBALS); GLOBALS — Whether to uncontract the basis set in a dual basis calculation. Type: string; Default: No Default. RELATIVISTIC (GLOBALS); GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do res",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:194043,perform,performing,194043,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['perform'],['performing']
Performance,"EFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. FCI¶. Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. CI_MAXITER¶. Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. NUM_ROOTS¶. number of CI roots to find. Type: integer; Default: 1. ICORE¶. Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. DIAG_METHOD¶. This specifies which method is to be used in dia",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/detci.html:7976,optimiz,optimized,7976,psi4manual/master/detci.html,https://psicode.org,https://psicode.org/psi4manual/master/detci.html,17,['optimiz'],['optimized']
Performance,"EGA_ERF (MINTS). OMP2; . setting keywords. theory. OMP2_ORBS_PRINT (OMP2). OMP3; . setting keywords. theory. OMP3_ORBS_PRINT (OMP3). OMP_N_THREAD (CPHF). OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4]. ONE-ELECTRONENERGY. ONEPDM (CCDENSITY). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OPDM (DETCI). (MP2). OPDM_AVG (DETCI). OPDM_IN_FILE (TRANSQT). OPDM_KE (DETCI). OPDM_OUT_FILE (TRANSQT). OPDM_PRINT (DETCI). OPDM_RELAX (CCDENSITY). (MP2). opt(); . see optimize(); . OPT_METHOD (OMP2). (OMP3). OPT_TYPE (OPTKING). optimization; . see geometry optimization; . optimize(); . setting keywords. optimize() in module driver. OptionsState class in optproc. OptionState class in optproc. optproc module. Orbital-Optimized Methods; . theory. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP3. orientation_fixed() LibmintsMolecule method. ORTH_TYPE (OMP2). (OMP3). output; . SAPT. cbs(). database(). geometry optimization. P. P (THERMO). PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parse_arbitrary_order() in module driver. parse_cotton_irreps() in module driver. parse_multiline_array() in module input. PATH, [1], [2], [3]. PEP1. perp_unit() in module qcdb.vecutil. PERTURB_CBS (PSIMRCC). PERTURB_CBS_COUPLING (PSIMRCC). PERTURB_H (SCF). PERTURB_MAGNITUDE (DETCI). (SCF). PERTURB_WITH (SCF). PHI_POINTS (SCF). physconst module. physical constants. PITZER (TRANSQT). point_group() LibmintsMolecule method. POINTS (FINDIF). POLE_MAXITER (ADC). populateExtern() Diffuse method. QMMM method. PR (ADC). PRECONDITIONER (DETCI). prerequisites. PRESORT_FILE (TRANSQT). PRINT (CPHF). (GLOBALS). (SAPT). PRINT_BASIS (SCF). print_basis_families() in module basislist. print_bond_angles() LibmintsMolecule method. print_dihedrals() LibmintsMolecule method. print_distances() LibmintsMolecule method. print_full() LibmintsMolecule method. print_in_input_format() CartesianEntry method. LibmintsMole",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/genindex.html:30403,optimiz,optimization,30403,psi4manual/4.0b3/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html,1,['optimiz'],['optimization']
Performance,"EI_FILE (TRANSQT). OEProp. theory. oeprop() in module util. OFFDIAGONAL_CCSD_T (PSIMRCC). OMEGA (CCRESPONSE). (CCSORT). (RESPONSE). OMEGA_ERF (MINTS). OMP2; . setting keywords. theory. OMP2_ORBS_PRINT (OMP2). OMP3; . setting keywords. theory. OMP3_ORBS_PRINT (OMP3). OMP_N_THREAD (CPHF). OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4]. ONE-ELECTRONENERGY. ONEPDM (CCDENSITY). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OPDM (DETCI). (MP2). OPDM_AVG (DETCI). OPDM_IN_FILE (TRANSQT). OPDM_KE (DETCI). OPDM_OUT_FILE (TRANSQT). OPDM_PRINT (DETCI). OPDM_RELAX (CCDENSITY). (MP2). opt(); . see optimize(); . OPT_METHOD (OMP2). (OMP3). OPT_TYPE (OPTKING). optimization; . see geometry optimization; . optimize(); . setting keywords. optimize() in module driver. OptionsState class in optproc. OptionState class in optproc. optproc module. Orbital-Optimized Methods; . theory. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP3. orientation_fixed() LibmintsMolecule method. ORTH_TYPE (OMP2). (OMP3). output; . SAPT. cbs(). database(). geometry optimization. P. P (THERMO). PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parse_arbitrary_order() in module driver. parse_cotton_irreps() in module driver. parse_multiline_array() in module input. PATH, [1], [2], [3]. PEP1. perp_unit() in module qcdb.vecutil. PERTURB_CBS (PSIMRCC). PERTURB_CBS_COUPLING (PSIMRCC). PERTURB_H (SCF). PERTURB_MAGNITUDE (DETCI). (SCF). PERTURB_WITH (SCF). PHI_POINTS (SCF). physconst module. physical constants. PITZER (TRANSQT). point_group() LibmintsMolecule method. POINTS (FINDIF). POLE_MAXITER (ADC). populateExtern() Diffuse method. QMMM method. PR (ADC). PRECONDITIONER (DETCI). prerequisites. PRESORT_FILE (TRANSQT). PRINT (CPHF). (GLOBALS). (SAPT). PRINT_BASIS (SCF). print_basis_families() in module basislist. print_bond_angles() LibmintsMolecule method. print_dihedrals() LibmintsMolecule method. print_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/genindex.html:30263,Optimiz,Optimized,30263,psi4manual/4.0b3/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html,1,['Optimiz'],['Optimized']
Performance,EKINO — Psi4 [1.0.0 6a9a71b] Docs; WFN — Psi4 [1.0.0 6a9a71b] Docs; ZETA — Psi4 [1.0.0 6a9a71b] Docs; ABCD — Psi4 [1.0.0 6a9a71b] Docs; ANALYZE — Psi4 [1.0.0 6a9a71b] Docs; CACHELEVEL — Psi4 [1.0.0 6a9a71b] Docs; DIIS — Psi4 [1.0.0 6a9a71b] Docs; GAUGE — Psi4 [1.0.0 6a9a71b] Docs; LINEAR — Psi4 [1.0.0 6a9a71b] Docs; LOCAL — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_CPHF_CUTOFF — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_CUTOFF — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_FILTER_SINGLES — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_METHOD — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_PAIRDEF — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_WEAKP — Psi4 [1.0.0 6a9a71b] Docs; MAXITER — Psi4 [1.0.0 6a9a71b] Docs; NUM_AMPS_PRINT — Psi4 [1.0.0 6a9a71b] Docs; OMEGA — Psi4 [1.0.0 6a9a71b] Docs; PROPERTY — Psi4 [1.0.0 6a9a71b] Docs; R_CONVERGENCE — Psi4 [1.0.0 6a9a71b] Docs; REFERENCE — Psi4 [1.0.0 6a9a71b] Docs; RESTART — Psi4 [1.0.0 6a9a71b] Docs; SEKINO — Psi4 [1.0.0 6a9a71b] Docs; WFN — Psi4 [1.0.0 6a9a71b] Docs; AO_BASIS — Psi4 [1.0.0 6a9a71b] Docs; CACHELEVEL — Psi4 [1.0.0 6a9a71b] Docs; EOM_REFERENCE — Psi4 [1.0.0 6a9a71b] Docs; INTS_TOLERANCE — Psi4 [1.0.0 6a9a71b] Docs; KEEP_OEIFILE — Psi4 [1.0.0 6a9a71b] Docs; KEEP_TEIFILE — Psi4 [1.0.0 6a9a71b] Docs; LOCAL — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_CORE_CUTOFF — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_CPHF_CUTOFF — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_CUTOFF — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_DOMAIN_MAG — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_DOMAIN_POLAR — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_DOMAIN_SEP — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_FILTER_SINGLES — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_METHOD — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_PAIRDEF — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_WEAKP — Psi4 [1.0.0 6a9a71b] Docs; OMEGA — Psi4 [1.0.0 6a9a71b] Docs; PROPERTY — Psi4 [1.0.0 6a9a71b] Docs; REFERENCE — Psi4 [1.0.0 6a9a71b] Docs; SEMICANONICAL — Psi4 [1.0.0 6a9a71b] Docs; WFN — Psi4 [1.0.0 6a9a71b] Docs; AO_BASIS — Psi4 [1.0.0 6a9a71b] Docs; CACHELEVEL — Psi4 [1.0.0 6a9a71b] Docs; DELETE_TEI — Psi4 [1.0.0 6a9a71b] Docs,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:44805,CACHE,CACHELEVEL,44805,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,"ENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Property method %s not available.' % (lowername)). optstash.restore(); return returnvalue. ## Aliases ##; prop = property. [docs]def optimize(name, **kwargs):; r""""""Function to perform a geometry optimization. :aliases: opt(). :returns: (*float*) Total electronic energy of optimized structure in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`. .. note:: Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. .. _`table:grad_gen`:. +-------------------------+---------------------------------------------------------------------------------------+; | name | calls method |; +=========================+=======================================================================================+; | scf | Hartree--Fock (HF) or density functional theory (DFT) :ref:`[manual] <sec:scf>` |; +-------------------------+---------------------------------------------------------------------------------------+; | dcft | density cumulant functional theory :ref:`[manual] <sec:dcft>` |; +-------------------------+---------------------------------------------------------------------------------------+; | mp2 | 2nd-order Moller-P",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/driver.html:45128,optimiz,optimized,45128,psi4manual/4.0b4/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html,1,['optimiz'],['optimized']
Performance,"ENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DETCI). opdm() psi4.core.CIWavefunction method, [1], [2]. OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method, [1], [2]. open_check() psi4.core.IO method, [1], [2]. operate() psi4.core.SymmetryOperation method, [1], [2]. opt(). . see optimize(). opt() in module psi4.driver. opt_clean() in module psi4.core, [1]. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_TYPE (OPTKING). OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4. in module psi4.driver. option_exists_in_module() in module psi4.core, [1]. Options class in psi4.core, [1]. optking() in module psi4.core, [1]. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCFT). orbital_values() psi4.core.PointFunctions method, [1], [2]. psi4.core.RKSFunctions method, [1]. psi4.core.UKSFunctions method, [1]. OrbitalSpace class in psi4.core, [1]. order() psi4.core.CharacterTable method, [1], [2]. psi4.core.PointGroup method, [1], [2]. ordered_params psi4.driver.EmpiricalDispersion attribute. orientation() psi4.core.DFTGrid method, [1]. psi4.core.MolecularGrid method, [1], [2]. orientation_fixed() psi4.core.Molecule method, [1], [2]. origin psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute, [1]. psi4.core.ElectrostaticInt attribute, [1]. psi4.core.KineticInt attribute, [1]. psi4.core.MultipoleInt attribute, [1]. psi4.core.NablaInt attribute, [1]. psi4.core.OneBodyAOInt attribute, [1], [2]. psi4.core.OverlapInt attribute, [1]. psi4.core.PotentialInt attribute, [1]. psi4.core.PseudospectralInt attribute, [1]. psi4.core.QuadrupoleInt attribute, [1]. psi4",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/genindex-1.html:102675,Optimiz,Optimized,102675,psi4manual/1.3.2/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html,2,['Optimiz'],['Optimized']
Performance,"ENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DETCI). opdm() psi4.core.CIWavefunction method, [1], [2]. OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method, [1], [2]. open_check() psi4.core.IO method, [1], [2]. operate() psi4.core.SymmetryOperation method, [1], [2]. opt(). . see optimize(). opt() in module psi4.driver. opt_clean() in module psi4.core, [1]. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_TYPE (OPTKING). OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4. in module psi4.driver. option_exists_in_module() in module psi4.core, [1]. Options class in psi4.core, [1]. optking() in module psi4.core, [1]. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCFT). orbital_values() psi4.core.PointFunctions method, [1], [2]. psi4.core.RKSFunctions method, [1]. psi4.core.UKSFunctions method, [1]. OrbitalSpace class in psi4.core, [1]. orientation() psi4.core.DFTGrid method, [1]. psi4.core.MolecularGrid method, [1], [2]. orientation_fixed() psi4.core.Molecule method, [1], [2]. origin psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute, [1]. psi4.core.ElectrostaticInt attribute, [1]. psi4.core.KineticInt attribute, [1]. psi4.core.MultipoleInt attribute, [1]. psi4.core.NablaInt attribute, [1]. psi4.core.OneBodyAOInt attribute, [1], [2]. psi4.core.OverlapInt attribute, [1]. psi4.core.PotentialInt attribute, [1]. psi4.core.PseudospectralInt attribute, [1]. psi4.core.QuadrupoleInt attribute, [1]. psi4.core.TracelessQuadrupoleInt attribute, [1]. original_coef() psi4.core.GaussianShell method, [1], [2]. ORTH_TYPE (DFOCC). (OCC). outfile_name() in m",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/genindex-1.html:88255,Optimiz,Optimized,88255,psi4manual/1.2.1/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/genindex-1.html,2,['Optimiz'],['Optimized']
Performance,"ENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DCT). (DETCI). opdm() psi4.core.CIWavefunction method. OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method. open_check() psi4.core.IO method. operate() psi4.core.SymmetryOperation method. opt(). . see optimize(). opt() in module psi4.driver. opt_clean() in module psi4.core. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_TYPE (OPTKING). OPTIMIZATION ITERATIONS. OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4.driver. optimize_geometric() in module psi4.driver. option_exists_in_module() in module psi4.core. Options class in psi4.core. options_to_python() in module psi4.core. optking() in module psi4.core. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCT). orbital_values() psi4.core.PointFunctions method. psi4.core.RKSFunctions method. psi4.core.UKSFunctions method. ORBITALS_WRITE (SCF). OrbitalSpace class in psi4.core. order() psi4.core.CharacterTable method. psi4.core.PointGroup method. ordered_params psi4.driver.EmpiricalDispersion attribute. psi4.driver.procrouting.empirical_dispersion.EmpiricalDispersion attribute. orientation() psi4.core.DFTGrid method. psi4.core.MolecularGrid method. orientation_fixed() psi4.core.Molecule method. origin psi4.core.AngularMomentumInt attribute. psi4.core.DipoleInt attribute. psi4.core.ElectricFieldInt attribute. psi4.core.ElectrostaticInt attribute. psi4.core.KineticInt attribute. psi4.core.MultipoleInt attribute. psi4.core.NablaInt attribute. psi4.core.OneBodyAOInt attribute. psi4.core.OverlapInt attribute. psi4.core.PotentialInt attribute. psi4.core.PseudospectralInt attribute. psi4.core.QuadrupoleInt attribute. psi4.core.TracelessQuadrupoleInt attribute",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/genindex-1.html:100488,Optimiz,Optimized,100488,psi4manual/1.4.0/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/genindex-1.html,2,['Optimiz'],['Optimized']
Performance,"ENSITY). OPDM_GRID_STEPSIZE (CCDENSITY). OPDM_ONLY (CCDENSITY). OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method. open_check() psi4.core.IO method. operate() psi4.core.SymmetryOperation method. opt(). . see optimize(). opt() in module psi4.driver. opt_clean() in module psi4.core. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_TYPE (OPTKING). OPTIMIZATION ITERATIONS. OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4.driver. optimize_geometric() in module psi4.driver. option_exists_in_module() in module psi4.core. Options class in psi4.core. options() psi4.core.CCWavefunction method. psi4.core.CIWavefunction method. psi4.core.CUHF method. psi4.core.DFEP2Wavefunction method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. psi4.core.Wavefunction method. options_to_python() in module psi4.core. optking() in module psi4.core. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCT). orbital_values() psi4.core.PointFunctions method. psi4.core.RKSFunctions method. psi4.core.UKSFunctions method. ORBITALS_WRITE (SCF). OrbitalSpace class in psi4.core. order() psi4.core.CharacterTable method. psi4.core.PointGroup method. ordered_params psi4.driver.EmpiricalDispersion attribute. psi4.driver.procrouting.empirical_dispersion.EmpiricalDispersion attribute. orientation() psi4.core.DFTGrid method. psi4.core.MolecularGrid method. orientation_fixed() psi4.core.Molecule method. origin psi4.core.AngularMomentumInt attribute. psi4.core.DipoleInt attribute. psi4.core.ElectricFieldInt attribute. psi4.core.ElectrostaticInt attribute. psi4.core.KineticInt attribute. psi4.core.MultipoleInt attribute. psi4.core.NablaInt attribute. psi4.core.OneBodyAOInt attribute. psi4.core.OverlapInt attribute. psi4.cor",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/genindex.html:104713,Optimiz,Optimized,104713,psi4manual/1.6.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/genindex.html,1,['Optimiz'],['Optimized']
Performance,"EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc52; CCSD Response for H2O2. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. dft-reference; MP2 with a PBE0 reference computation. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. linK-1; RHF Linear Exchange Algorithm test for water. omp3-5; SOS-OMP3 cc-pV",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:27000,perform,performed,27000,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['perform'],['performed']
Performance,"EP2 method, overrides EP2_NUM_IP and EP2_NUM_EA options. Input array should be [[orb1, orb2], [], …] for each irrep. Type: array; Default: No Default. EP_EA_POLES (OCC); OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC); OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC); OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI); DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST. Type: array; Default: No Default. EX_LEVEL (DETCI); DETCI — The CI excitation level. Type: integer; Default: 2. EXCH_SCALE_ALPHA (SAPT); SAPT — Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. EXCITATION_RANGE (CCEOM); CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF); CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF); SCF — An ExternalPotential (built by Python or nullptr/None). Type: boolean; Default: false. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS); GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code does NOT help you out in any way!. Type: boolean; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:122405,perform,performs,122405,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,4,['perform'],['performs']
Performance,"ERAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to the third lowest virtual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR)¶CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calculation; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR)¶CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR)¶CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR)¶CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:69027,perform,performed,69027,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,9,['perform'],['performed']
Performance,"ERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. INTCOS_GENERATE_EXIT¶. Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. Optimizing Minima¶; First, define the molecule and basis in the input.; 1; 2; 3; 4; 5; 6; 7molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; 1optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; 1; 2set step_type nr; optimize('scf'). Optimize using energy points instead of gradients:; 1optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; 1; 2set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:; 1; 2; 3; 4; 5; 6; 7set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:; 1; 2set full_hess_every 1; optimize('scf'). Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be se",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/optking-1.html:4189,Optimiz,Optimize,4189,psi4manual/1.1.0/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/optking-1.html,2,['Optimiz'],['Optimize']
Performance,"ERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. If this keyword is not set by the user, DFOCC will estimate and use a value required to achieve the desired E_CONVERGENCE The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, DFOCC will estimate and use a value required to achieve the desired E_CONVERGENCE The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. Advanced DFOCC Keywords¶. OPT_METHOD¶. The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. HESS_TYPE¶. Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. MO_DIIS_NUM_VECS¶. Number of vectors used in orbital DIIS. Type: integer; Default: 6. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. DO_DIIS¶. Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT¶. Do apply level shifting?. Type: boolean; Default: true. Conventional (Non-OO) Coupled-Cluster and Møller–Plesset Perturbation Theories¶; Non-orbital-optimized counterparts to higher order MPn methods are also; available. The following methods are available and can be controlled; through OCC (conventional integrals CONV) and DF",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/occ-1.html:15750,optimiz,optimize,15750,psi4manual/1.4.0/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/occ-1.html,5,['optimiz'],['optimize']
Performance,"ERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Ca",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:7553,CACHE,CACHELEVEL,7553,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,12,"['CACHE', 'Cache']","['CACHELEVEL', 'Cacheing']"
Performance,"ERICAL is set appropriately. Type: string; Possible Values: STO-3G, 3-21G, 4-31G, 6-31G, 6-31G*, 6-31G**, 6-311G, 6-311G*, 6-311G**, DZ, DZP, TZ, TZP, TZ2P, PVDZ, PVTZ, PVQZ, PV5Z, PV6Z, PCVDZ, PCVTZ, PCVQZ, PCV5Z, PCV6Z, AUG-PVDZ, AUG-PVTZ, AUG-PVTZ, AUG-PVQZ, AUG-PV5Z, AUG-PV6Z, D-AUG-PVDZ, D-AUG-PVTZ, D-AUG-PVQZ, D-AUG-PV5Z, D-AUG-PV6Z, cc-pVDZ, cc-pVTZ, cc-pVQZ, cc-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR); CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR); CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than , where is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion ve",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:25154,cache,cache,25154,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['cache'],['cache']
Performance,"ERICAL is set appropriately. Type: string; Possible Values: STO-3G, 3-21G, 4-31G, 6-31G, 6-31G*, 6-31G**, 6-311G, 6-311G*, 6-311G**, DZ, DZP, TZ, TZP, TZ2P, PVDZ, PVTZ, PVQZ, PV5Z, PV6Z, PCVDZ, PCVTZ, PCVQZ, PCV5Z, PCV6Z, AUG-PVDZ, AUG-PVTZ, AUG-PVTZ, AUG-PVQZ, AUG-PV5Z, AUG-PV6Z, D-AUG-PVDZ, D-AUG-PVTZ, D-AUG-PVQZ, D-AUG-PV5Z, D-AUG-PV6Z, cc-pVDZ, cc-pVTZ, cc-pVQZ, cc-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR); CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR); CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:24902,cache,cache,24902,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,4,['cache'],['cache']
Performance,ERTURB_WITH; PHI_POINTS; PK_ALGO; PK_ALL_NONSYM; PK_MAX_BUCKETS; PK_NO_INCORE; PRINT_BASIS; PRINT_MOS; PROCESS_GRID; QCHF; R_POINTS; RADIUS; REFERENCE; S_CHOLESKY_TOLERANCE; S_ORTHOGONALIZATION; S_TOLERANCE; SAD_CHOL_TOLERANCE; SAD_D_CONVERGENCE; SAD_E_CONVERGENCE; SAD_FRAC_OCC; SAD_MAXITER; SAD_PRINT; SAD_SCF_TYPE; SAD_SPIN_AVERAGE; SAPT; SAVE_JK; SAVE_UHF_NOS; SCF_MEM_SAFETY_FACTOR; SCF_PROPERTIES; SOSCF; SOSCF_CONV; SOSCF_MAX_ITER; SOSCF_MIN_ITER; SOSCF_PRINT; SOSCF_START_CONVERGENCE; STABILITY_ANALYSIS; TDSCF_COEFF_CUTOFF; TDSCF_GUESS; TDSCF_MAXITER; TDSCF_PRINT; TDSCF_R_CONVERGENCE; TDSCF_STATES; TDSCF_TDA; TDSCF_TDM_PRINT; TDSCF_TRIPLETS; THETA_POINTS; THICKNESS; TILE_SZ; UHF_NOONS; WCOMBINE; WFN; P; ROTATIONAL_SYMMETRY_NUMBER; T; CACHELEVEL; CUTOFF_AMPS_PRINT; GAUGE; KIND; MAX_NUM_VECS; MAXITER; MEMORY; NEWTON_CONVERGENCE; NORM_TOLERANCE; NUM_AMPS_PRINT; NUM_CORE_ORBITALS; NUM_GUESSES; POLE_MAXITER; PR; R_CONVERGENCE; REFERENCE; ROOTS_PER_IRREP; SEM_MAXITER; AEL; AO_BASIS; CACHELEVEL; DEBUG; GAUGE; INTS_TOLERANCE; ONEPDM; ONEPDM_GRID_CUTOFF; ONEPDM_GRID_DUMP; ONEPDM_GRID_STEPSIZE; OPDM_RELAX; PROP_ALL; PROP_ROOT; PROP_SYM; REFERENCE; ROOTS_PER_IRREP; WFN; WRITE_NOS; XI; XI_CONNECT; ZETA; ABCD; ANALYZE; AO_BASIS; BCCD_MAXITER; BRUECKNER_ORBS_R_CONVERGENCE; CACHELEVEL; CACHETYPE; CC_NUM_THREADS; CC_OS_SCALE; CC_SS_SCALE; DIIS; E_CONVERGENCE; FORCE_RESTART; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; MP2_AMPS_PRINT; MP2_OS_SCALE; MP2_SS_SCALE; NEW_TRIPLES; NUM_AMPS_PRINT; PAIR_ENERGIES_PRINT; PROPERTY; R_CONVERGENCE; REFERENCE; RESTART; SCS_CCSD; SCS_MP2; SCSN_MP2; SEMICANONICAL; SPINADAPT_ENERGIES; T2_COUPLED; T3_WS_INCORE; WFN; ABCD; CACHELEVEL; CACHETYPE; CC_NUM_THREADS; CC3_FOLLOW_ROOT; COLLAPSE_WITH_LAST; COLLAPSE_WITH_LAST_CC3; COMPLEX_TOLERANCE; E_CONVERGENCE; EOM_GUESS; EOM_REFERENCE; EXCITATION_RANGE; FULL_MATRIX; LOCAL; LOCAL_CUTOFF; LOCAL_DO_SINGLES; LOCAL_FILTER_SINGLES; LOCAL_GHOST; LOCAL_METHOD; LOCAL_P,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:571407,CACHE,CACHELEVEL,571407,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,"ESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT)¶CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY)¶CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM)¶CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI)¶DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING)¶OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default:",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:11216,cache,cache,11216,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,9,['cache'],['cache']
Performance,"EVEL_SHIFT¶. Level shift to aid convergence. Type: double; Default: 0.02. LINEQ_SOLVER¶. The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, DFOCC will estimate and use a value required to achieve the desired E_CONVERGENCE The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. MOLDEN_WRITE¶. Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MO_DIIS_NUM_VECS¶. Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_STEP_MAX¶. Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MP2_AMP_TYPE¶. The algorithm that used to handle mp2 amplitudes. The DIRECT option means compute amplitudes on the fly * whenever they are necessary. Type: string; Possible Values: DIRECT, CONV; Default: DIRECT. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0. MP2_SOS_SCALE¶. MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2¶. Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OCC_ORBS_PRINT¶. Do print OCC orbital energies?. Type: boolean; Default: false. OEPROP¶. Do compute one electron properties?. Type: boolean; Default: false. OO_SCALE¶. OO scaling factor used in MSD. Type: double; Default: 0.01. OPT_METHOD¶. The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm avail",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__dfocc-1.html:3296,optimiz,optimization,3296,psi4manual/1.4.0/autodir_options_c/module__dfocc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__dfocc-1.html,5,['optimiz'],['optimization']
Performance,"EXIT¶. Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. INTERFRAG_DIST_INV¶. Do use for the stretching coordinate between fragments? Otherwise, use . Type: boolean; Default: false. INTERFRAG_HESS¶. Model Hessian to guess interfragment force constants. Type: string; Possible Values: DEFAULT, FISCHER_LIKE; Default: DEFAULT. INTERFRAG_MODE¶. When interfragment coordinates are present, use as reference points either principal axes or fixed linear combinations of atoms. Type: string; Possible Values: FIXED, INTERFRAGMENT; Default: FIXED. Misc.¶. FINAL_GEOM_WRITE¶. Do save and print the geometry from the last projected step at the end of a geometry optimization? Otherwise (and by default), save and print the previous geometry at which was computed the gradient that satisfied the convergence criteria. Type: boolean; Default: false. INTCO_FIXED_EQ_FORCE_CONSTANT¶. In constrained optimizations, for internal coordinates with user-specified equilibrium values, this is the force constant (in au) used to apply an additional force to each coordinate. If the user is only concerned to satify the desired constraint, then the user need only ensure that this value is sufficiently large. Alternatively, the user may specify this value to apply a force of a particular magnitude, in which case the given equilibrium value may or may not be reached by the optimization. Type: double; Default: 2.0. KEEP_INTCOS¶. Keep internal coordinate definition file. Type: boolean; Default: false. TEST_B¶. Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B¶. Do test derivative B matrix?. Type: boolean; Default: false. Table Of Contents. OPTKING; Optimization Algorithm; CONSECUTIVE_BACKSTEPS; GEOM_MAXITER; INTERFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT_MAX; INTRAFRAG_STEP_LIMIT_MIN; IRC_DIRECTION; IRC_STEP_SIZE; IRC_STOP; OPT_TYPE; RFO_FOLLOW_ROOT; RFO_ROOT; STEP_TYPE. Convergence Control; FLEXIBLE_G_CONVERGENCE; G_CONVERGENCE; MAX_D",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__optking-1.html:6246,optimiz,optimizations,6246,psi4manual/4.0b2/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__optking-1.html,4,['optimiz'],['optimizations']
Performance,"E_BT_CONVERGENCE¶. Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. FIXED_BEND¶. Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DIHEDRAL¶. Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE¶. Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FROZEN_BEND¶. Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN¶. Specify atom and X, XY, XYZ, … to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL¶. Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE¶. Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. GEOM_MAXITER¶. Maximum number of geometry optimization steps. Type: integer; Default: 50. H_UPDATE_DEN_TOL¶. Denominator check for hessian update. Type: conv double; Default: 1e-7. INTERFRAG_STEP_LIMIT¶. Maximum step size in bohr or radian along an interfragment coordinate. Type: double; Default: 0.5. INTRAFRAG_STEP_LIMIT¶. Initial maximum step size in bohr or radian along an internal coordinate. Type: double; Default: 0.5. INTRAFRAG_STEP_LIMIT_MAX¶. Upper bound for dynamic trust radius [au]. Type: double; Default: 1.0. INTRAFRAG_STEP_LIMIT_MIN¶. Lower bound for dynamic trust radius [au]. Type: double; Default: 0.001. IRC_DIRECTION¶. IRC mapping direction. Type: string; Possible Values: FORWARD, BACKWARD; Default: FORWARD. IRC_STEP_SIZE¶. IRC step size in bohr(amu)\(^{1/2}\). Type: double; Default: 0.2. IRC_STOP¶. Decide when to stop IRC calculations. Type: string; Possible Values: ASK, STOP, GO; Default: STOP. OPT_COORDINATES¶. Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodir_options_c/module__optking-1.html:1470,optimiz,optimization,1470,psi4manual/1.2.1/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodir_options_c/module__optking-1.html,9,['optimiz'],['optimization']
Performance,"E_SIZE (DCFT). STABILITY_N_EIGENVALUES (DCFT). STABILITY_N_GUESS_VECTORS (DCFT). status() Section method. STEP_TYPE (OPTKING). store_data() GetkwParser method. store_key() GetkwParser method. store_vector() GetkwParser method. sub() in module qcdb.vecutil. success() in module p4util.util. superfunctional_list() in module functional. sym_label() LibmintsMolecule method. symbol() CoordEntry method. LibmintsMolecule method. symmetrize() LibmintsMolecule method. symmetry. molecule. symmetry_frame() LibmintsMolecule method. symmetry_from_input() LibmintsMolecule method. T. T (THERMO). T2_COUPLED (CCENERGY). T3_WS_INCORE (CCENERGY). (CCEOM). T_AMPS (CCHBAR). Table class in p4util.text. tblhead() in module wrappers. TDHF_MEM_SAFETY_FACTOR (CPHF). TDM (DETCI). TDM_PRINT (DETCI). TDM_WRITE (DETCI). test() in module pcmgetkw. TEST_B (OPTKING). test_ccl_functional() in module functional. TEST_DERIVATIVE_B (OPTKING). theory; . ADC. CC. CI. DCFT. DF-MP2. DFT. OCEPA. OEProp. OMP2. OMP3. Orbital-Optimized Methods. SAPT. SCF. cbs(), [1]. THETA_POINTS (SCF). THICKNESS (SCF). threading. TIKHONOW_MAX (PSIMRCC). TIKHONOW_OMEGA (DCFT). (PSIMRCC). TIKHONOW_TRIPLES (PSIMRCC). TILE_SZ (SCF). TPDM (DCFT). (DETCI). TPDM_ABCD_TYPE (OCC). TPDM_ADD_REF (TRANSQT). TPDM_FILE (TRANSQT). TPDM_PRINT (DETCI). transition state; . geometry optimization. translate() LibmintsMolecule method. transpose() in module qcdb.vecutil. TRIPLES_ALGORITHM (PSIMRCC). TRIPLES_DIIS (PSIMRCC). TRIPLES_LOW_MEMORY (FNOCC). TURN_ON_ACTV (MCSCF). TWO-ELECTRONENERGY. type() CartesianEntry method. NumberValue method. VariableValue method. ZMatrixEntry method. typecheck() Keyword method. U. UNCP-CORRECTED2-BODYINTERACTIONENERGY. unique() LibmintsMolecule method. units; . molecule. UNITS (GLOBALS). units() LibmintsMolecule method. UPDATE (DETCI). update_geometry() LibmintsMolecule method. USE_DF_INTS (FNOCC). USE_SPIN_SYM (PSIMRCC). USE_SPIN_SYMMETRY (PSIMRCC). useful() in module qcdb.dbproc. V. VAL_EX_LEVEL (DETCI). valid_atom",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/genindex.html:47721,Optimiz,Optimized,47721,psi4manual/4.0b5/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/genindex.html,1,['Optimiz'],['Optimized']
Performance,"E_{exch}^{(1)}\),; \(E_{\rm exch-ind}^{(2)}(S^2)/E_{\rm exch-ind}^{(2)}\), and; \(E_{\rm exch-disp}^{(2)}(S^2)/E_{\rm exch-disp}^{(2)}\) are not very similar to; each other. Hence, in 2016 universal scaling of all \(S^{2}\) approximated terms; was turned off by default.; Finally, in 2014 Parker et al. [Parker:2014:094106] empirically discovered that; SAPT0 energies for van der Waals dimers with close contacts benefit from a slightly modified; recipe that involves an empirically adjusted exponent \(\alpha = 3.0\).; To distinguish it from its unscaled counterpart, this energy is denoted sSAPT0 (see [Parker:2014:094106]). (9)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods,; not all of them).; molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the no_reorient and symmetry; c1 molecule keywords, as in the exampl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/sapt.html:11875,perform,performed,11875,psi4manual/master/sapt.html,https://psicode.org,https://psicode.org/psi4manual/master/sapt.html,2,['perform'],['performed']
Performance,"Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_EVERY keyword. Transition States, Reaction Paths, and Constrained Optimizations¶. Calculate a starting Hessian and optimize the “transition state” of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails):; molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum:; molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Generate the internal coordinates and then stop:; set intcos_generate_exit true; optimize('scf'). The coordinates may then be found in the file “intco.dat”. In this case, the file contains:; F 1 3; R 1 2; R 1 3; B 2 1 3. The first line indicates a fragment containing atoms 1-3. The following lines define; two distance coordinates (bonds) and one bend coordinate. This file can be modified, and if present,; is used in subsequent optimizations. Since the multiple-fragment coordinates are still under; development, they are not documented here. However, if desired, one can change the value; of FRAG_MODE, generate the internal coordinates, and see how multiple; fragment systems are defined.; Coordinates may be frozen or fixed by adding an asterisk after the letter of the coordinate.; To optimize with the bond lengths fixed at their initial values, it is currently necessary to; generate and then modify the internal coordinate definitions as follows:; F 1 3; R* 1 2; R* 1 3; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/optking-1.html:6448,optimiz,optimize,6448,psi4manual/4.0b3/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optking-1.html,4,['optimiz'],['optimize']
Performance,"Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_EVERY keyword. Transition States, Reaction Paths, and Constrained Optimizations¶. Calculate a starting Hessian and optimize the “transition state” of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails):; molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum:; molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Generate the internal coordinates and then stop:; set intcos_generate_exit true; optimize('scf'). The coordinates may then be found in the “intco” file. In this case, the file contains:; F 1 3; R 1 2; R 1 3; B 2 1 3. The first line indicates a fragment containing atoms 1-3. The following lines define; two distance coordinates (bonds) and one bend coordinate. This file can be modified, and if present,; is used in subsequent optimizations. Since the multiple-fragment coordinates are still under; development, they are not documented here. However, if desired, one can change the value; of FRAG_MODE, generate the internal coordinates, and see how multiple; fragment systems are defined.; Coordinates may be frozen or fixed by adding an asterisk after the letter of the coordinate.; To optimize with the bond lengths fixed at their initial values, it is currently necessary to; generate and then modify the internal coordinate definitions as follows:; F 1 3; R* 1 2; R* 1 3; B 2 ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/optking-1.html:6122,optimiz,optimize,6122,psi4manual/4.0b4/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optking-1.html,4,['optimiz'],['optimize']
Performance,"Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_EVERY keyword. Transition States, Reaction Paths, and Constrained Optimizations¶. Calculate a starting Hessian and optimize the “transition state” of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails):; molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum:; molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Optimize a geometry (HOOH) at a frozen dihedral angle of 90 degrees.; molecule {; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 90.0; }. set optking {; frozen_dihedral = (""; 1 2 3 4; ""); }; optimize('scf'). To instead freeze the two O-H bond distances; set optking {; frozen_distance = (""; 1 2; 3 4; ""); }. For bends, the corresponding keyword is “frozen_bend”. To freeze the cartesian coordinates of atom 2. freeze_list = """"""; 2 xyz; """"""; set optking frozen_cartesian $freeze_list. To freeze only the y coordinates of atoms 2 and 3. freeze_list = """"""; 2 y; 3 y; """"""; set optking frozen_cartesian $freeze_list. To optimize toward a value of 0.95 Angstroms for the distance between; atoms 1 and 3, as well as that between 2 and 4. set optking {; fixed_distance = (""; 1 3 0.95; 2 4 0.95; ""); }. Note that the effect of the frozen and fixed keywords is independent of; how the geometry of the molecule was input (whether Z-matrix or cartesian, etc.).. To scan the potential energy",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/optking-1.html:6162,optimiz,optimize,6162,psi4manual/1.4.0/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/optking-1.html,5,['optimiz'],['optimize']
Performance,"Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_EVERY keyword. Transition States, Reaction Paths, and Constrained Optimizations¶. Calculate a starting Hessian and optimize the “transition state” of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails):; molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum:; molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Optimize a geometry (HOOH) at a frozen dihedral angle of 90 degrees.; molecule {; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 90.0; }. set optking {; frozen_dihedral = (""; 1 2 3 4; ""); }; optimize('scf'). To instead freeze the two O-H bond distances; set optking {; frozen_distance = (""; 1 2; 3 4; ""); }. For bends, the corresponding keyword is “frozen_bend”. To freeze the cartesian coordinates of atom 2; freeze_list = """"""; 2 xyz; """"""; set optking frozen_cartesian $freeze_list. To freeze only the y coordinates of atoms 2 and 3; freeze_list = """"""; 2 y; 3 y; """"""; set optking frozen_cartesian $freeze_list. To optimize toward a value of 0.95 Angstroms for the distance between; atoms 1 and 3, as well as that between 2 and 4; set optking {; fixed_distance = (""; 1 3 0.95; 2 4 0.95; ""); }. Note that the effect of the frozen and fixed keywords is independent of; how the geometry of the molecule was input (whether Z-matrix or cartesian, etc.).. To scan the potential energy",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/optking-1.html:6174,optimiz,optimize,6174,psi4manual/1.0.0/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/optking-1.html,2,['optimiz'],['optimize']
Performance,EmpericalDispersion; energy; energy; fchk; fchk; fcidump; fcidump; fcidump_from_file; fcidump_from_file; filter_comments; filter_comments; find_approximate_string_matches; find_approximate_string_matches; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; getFromDict; gradient; gradient; hessian; hessian; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; molden; molden; driver.molecule_from_arrays; driver.molecule_from_arrays; driver.molecule_from_schema; driver.molecule_from_schema; driver.molecule_from_string; driver.molecule_from_string; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; process_pubchem_command; process_pubchem_command; prop; prop; properties; properties; PsiException; PsiImportError; QMMM; sanitize_name; sanitize_name; scf_helper; scf_helper; scf_wavefunction_factory; scf_wavefunction_factory; set_memory; set_memory; set_module_options; set_module_options; set_options; set_options; success; success; Table; TestComparisonError; ValidationError; vibanal_wfn; vibanal_wfn; write_eigenvalues; write_eigenvalues; xml2dict; xml2dict. Appendices; Appendices. /autodir_options_c; ; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:423319,Optimiz,OptimizationConvergenceError,423319,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,3,"['Optimiz', 'optimiz']","['OptimizationConvergenceError', 'optimize']"
Performance,EmpericalDispersion; energy; energy; fchk; fchk; fcidump; fcidump; fcidump_from_file; fcidump_from_file; filter_comments; filter_comments; find_approximate_string_matches; find_approximate_string_matches; freq; freq; frequencies; frequencies; frequency; frequency; gdma; gdma; geometry; geometry; get_memory; get_memory; getFromDict; gradient; gradient; hessian; hessian; join_path; join_path; levenshtein; levenshtein; ManagedMethodError; molden; molden; driver.molecule_from_arrays; driver.molecule_from_arrays; driver.molecule_from_schema; driver.molecule_from_schema; driver.molecule_from_string; driver.molecule_from_string; molecule_get_attr; molecule_get_attr; molecule_set_attr; molecule_set_attr; oeprop; oeprop; opt; opt; OptimizationConvergenceError; optimize; optimize; ParsingError; PastureRequiredError; pcm_helper; pcm_helper; print_stderr; print_stderr; print_stdout; print_stdout; process_input; process_input; process_pubchem_command; process_pubchem_command; prop; prop; properties; properties; PsiException; PsiImportError; QMMM; sanitize_name; sanitize_name; scf_helper; scf_helper; scf_wavefunction_factory; scf_wavefunction_factory; set_memory; set_memory; set_module_options; set_module_options; set_options; set_options; success; success; Table; TestComparisonError; ValidationError; vibanal_wfn; vibanal_wfn; write_eigenvalues; write_eigenvalues; xml2dict; xml2dict. Appendices; Appendices. autodir_options_c; ; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>; <no title>,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:380824,Optimiz,OptimizationConvergenceError,380824,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,3,"['Optimiz', 'optimiz']","['OptimizationConvergenceError', 'optimize']"
Performance,"Energy Point. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. mp2-h; check that methods can act on single atom. linK-2; RKS Linear Exchange Algorithm test for benzene. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. fsapt-ext-abc2; FSAPT with external charge on dimer. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. dft-jk; DFT JK on-disk test. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. cc13b; Tests RHF CCSD(T)gradients. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. omp2-3; OMP2 cc-pVDZ energy for ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:29092,optimiz,optimization,29092,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimization']
Performance,"Error(""Python module missing function %s for loading data "" % (str(funcname))). print(""""""WrappedDatabase %s: %s %s results loaded"""""" % (self.dbse, modname, funcname)). [docs] def load_qcdata_byproject(self, project, pythonpath=None):; """"""Loads qcdb.ReactionDatums from standard location for *project*; :module dbse_project and function load_project. Module search path; can be prepended with *pythonpath*. """"""; mod = self.dbse + '_' + project; func = 'load_' + project; self.load_qcdata(modname=mod, funcname=func, pythonpath=pythonpath). [docs] def load_qcdata_hrxn_byproject(self, project, path=None):; """"""""""""; if path is None:; path = os.path.dirname(__file__) + '/../data'; pklfile = os.path.abspath(path) + os.sep + self.dbse + '_hrxn_' + project + '.pickle'; if not os.path.isfile(pklfile):; raise ValidationError(; ""Reactions pickle file for loading database data from file %s does not exist"" % (pklfile)). with open(pklfile, 'rb') as handle:; hrxns = pickle.load(handle); # no error checking for speed; for rxn, data in hrxns.iteritems():; self.hrxn[rxn].data.update(data). [docs] def load_qcdata_hdf5_trusted(self, project, path=None):; """"""Loads qcdb.ReactionDatums from HDF5 file at path/dbse_project.h5 .; If path not given, looks in qcdb/data. This file is written by; reap-DB and so has been largely validated. """"""; if path is None:; path = os.path.dirname(__file__) + '/../data'; hdf5file = os.path.abspath(path) + os.sep + self.dbse + '_' + project + '.h5'; if not os.path.isfile(hdf5file):; raise ValidationError(""HDF5 file for loading database data from file %s does not exist"" % (hdf5file)); try:; import pandas as pd; except ImportError:; raise ValidationError(""Pandas data managment module must be available for import""). try:; next(self.hrxn.iterkeys()) + 1; except TypeError:; intrxn = False; else:; intrxn = True. with pd.get_store(hdf5file) as handle:; for mc in handle['pdie'].keys():; lmc = mc.split('-') # TODO could be done better; method = lmc[0]; bsse = '_'.join(lmc[1:-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:39371,load,load,39371,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['load'],['load']
Performance,"Error(['select_omp2', name, 'MP2_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). [docs]def select_omp2_gradient(name, **kwargs):; """"""Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. """"""; reference = psi4.get_option('SCF', 'REFERENCE'); mtd_type = psi4.get_global_option('MP2_TYPE'); module = psi4.get_global_option('QC_MODULE'); # Considering only [df]occ. func = None; if reference in ['RHF', 'UHF', 'ROHF', 'RKS', 'UKS']:; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient. if func is None:; raise ManagedMethodError(['select_omp2_gradient', name, 'MP2_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). [docs]def select_omp2_property(name, **kwargs):; """"""Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. """"""; reference = psi4.get_option('SCF', 'REFERENCE'); mtd_type = psi4.get_global_option('MP2_TYPE'); module = psi4.get_global_option('QC_MODULE'); # Considering only [df]occ. func = None; if reference in ['RHF', 'UHF', 'ROHF', 'RKS', 'UKS']:; if mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_property. if func is None:; raise ManagedMethodError(['select_omp2_property', name, 'MP2_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). [docs]def select_mp3(name, **kwargs):; """"""Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. """"""; reference = psi4.get_option('SCF', 'REFERENCE'); mtd_type = psi4.get_global_option('MP_TYPE'); module = psi4.get_global_option('QC_MODULE'); # Considering only [df]occ/fnocc/detci. func = None; if reference == 'RHF':; if mtd_type ==",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/procedures/proc.html:7209,perform,performance,7209,psi4manual/1.0.0/_modules/procedures/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/procedures/proc.html,1,['perform'],['performance']
Performance,"Error([__name__, name, type_var, mtd_type, reference, module, all_electron]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_omp3(name, **kwargs):; """"""Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); type_var, _, mtd_type = method_algorithm_type(name); module = core.get_global_option('QC_MODULE'). func = None; if reference in ['RHF', 'UHF', 'ROHF', 'RKS', 'UKS']:; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc. if func is None:; raise ManagedMethodError([__name__, name, type_var, mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_omp3_gradient(name, **kwargs):; """"""Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); type_var, _, mtd_type = method_algorithm_type(name); module = core.get_global_option('QC_MODULE'). func = None; if reference in ['RHF', 'UHF', 'ROHF', 'RKS', 'UKS']:; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient. if func is None:; raise ManagedMethodError([__name__, name, type_var, mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_mp2p5(name, **kwargs):; """"""Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); type_var, _, mtd_type = method_algorithm_type(name); module = core.get_global_option('QC_MODULE'). func = None; if reference in ['RHF', 'UHF']:; if ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html:14396,perform,performance,14396,psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html,4,['perform'],['performance']
Performance,Exchange-Correlation Functional. sogga; SOGGA Exchange + PBE Correlation Functional. sogga11; SOGGA11 Exchange-Correlation Functional. sogga11-x; SOGGA11-X Hybrid Exchange-Correlation Functional. sogga11-x-d3bj;  . svwn; SVWN3 (RPA) LSDA Functional. teter93; TETER93 Exchange-Correlation Functional. th-fc; TH-FC GGA Exchange-Correlation Functional. th-fcfo; TH-FCFO GGA Exchange-Correlation Functional. th-fco; TH-FCO GGA Exchange-Correlation Functional. th-fl; TH-FL GGA Exchange-Correlation Functional. th1; TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. tpss-d3bj;  . tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj;  . tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. wb97m-d3bj;  . wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d;  . wb97x-d3bj;  . wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). wpbe-d3bj;  . wpbe-d3mbj;  . wpbe0; PBE0 SR-XC Functional (HJS Model). x1b95; X1B95 Hyb-GGA Exchange-Correlation Functional. x3lyp; X3LYP Hyb-GGA Exchange-Correlation Functional. x3lyp-d3bj;  . xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj;  . zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Kallay’s MRCC program [manual]. mrccsd; CC through doubles. mrccsdt; CC through triples. mrccsdtq; CC through quadruples. mrccsdtqp; CC through quintuples. mrccsdtqph; CC through sextuples. mrccsd(t); CC,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html:16958,tune,tuned-cam-,16958,psi4manual/1.3.2/api/psi4.driver.energy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.energy-1.html,4,"['TUNE', 'tune']","['TUNED-CAM-', 'tuned-cam-']"
Performance,"Exchange-Correlation Functional. sogga; SOGGA Exchange + PBE Correlation Functional. sogga11; SOGGA11 Exchange-Correlation Functional. sogga11-x; SOGGA11-X Hybrid Exchange-Correlation Functional. sogga11-x-d3bj;  . svwn; SVWN3 (RPA) LSDA Functional. teter93; TETER93 Exchange-Correlation Functional. th-fc; TH-FC GGA Exchange-Correlation Functional. th-fcfo; TH-FCFO GGA Exchange-Correlation Functional. th-fco; TH-FCO GGA Exchange-Correlation Functional. th-fl; TH-FL GGA Exchange-Correlation Functional. th1; TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. tpss-d3bj;  . tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj;  . tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. wb97m-d3bj;  . wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d;  . wb97x-d3bj;  . wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). wpbe-d3bj;  . wpbe-d3mbj;  . wpbe0; PBE0 SR-XC Functional (HJS Model). x1b95; X1B95 Hyb-GGA Exchange-Correlation Functional. x3lyp; X3LYP Hyb-GGA Exchange-Correlation Functional. x3lyp-d3bj;  . xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj;  . zlp; ZLP GGA Exchange-Correlation Functional. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices; DFT Functionals. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Create",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_dft_energy-1.html:10058,tune,tuned-cam-,10058,psi4manual/1.3.2/autodoc_dft_energy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_dft_energy-1.html,4,"['TUNE', 'tune']","['TUNED-CAM-', 'tuned-cam-']"
Performance,Exchange-Correlation Functional. sogga; SOGGA Exchange + PBE Correlation Functional. sogga11; SOGGA11 Exchange-Correlation Functional. sogga11-x; SOGGA11-X Hybrid Exchange-Correlation Functional. sogga11-x-d3bj;  . svwn; SVWN3 (RPA) LSDA Functional. teter93; TETER93 Exchange-Correlation Functional. th-fc; TH-FC GGA Exchange-Correlation Functional. th-fcfo; TH-FCFO GGA Exchange-Correlation Functional. th-fco; TH-FCO GGA Exchange-Correlation Functional. th-fl; TH-FL GGA Exchange-Correlation Functional. th1; TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. tpss-d3bj;  . tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj;  . tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d;  . wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). wpbe-d3bj;  . wpbe-d3mbj;  . wpbe0; PBE0 SR-XC Functional (HJS Model). x1b95; X1B95 Hyb-GGA Exchange-Correlation Functional. x3lyp; X3LYP Hyb-GGA Exchange-Correlation Functional. x3lyp-d3bj;  . xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj;  . zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Kallay’s MRCC program [manual]. mrccsd; CC through doubles. mrccsdt; CC through triples. mrccsdtq; CC through quadruples. mrccsdtqp; CC through quintuples. mrccsdtqph; CC through sextuples. mrccsd(t); CC through doubles with perturba,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.driver.energy-1.html:17150,tune,tuned-cam-,17150,psi4manual/1.2.1/api/psi4.driver.energy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.driver.energy-1.html,4,"['TUNE', 'tune']","['TUNED-CAM-', 'tuned-cam-']"
Performance,Exchange-Correlation Functional; Y; —; 0.470000; —; —; —; —; —; —. LC-VV10; LC-VV10 GGA Exchange-Correlation Functional; Y; —; 0.450000; —; —; —; —; —; —. LRC-WPBE; LRC-WPBE GGA Exchange-Correlation Functional; Y; —; 0.300000; —; —; —; —; —; —. LRC-WPBEH; LRC-wPBEh Hyb-GGA Exchange-Correlation Functional; Y; —; 0.200000; 0.200000; —; —; —; —; —. M11; M11 Meta-GGA XC Functional; Y; Y; 0.250000; 0.428000; —; —; —; —; —. M11-D3BJ; M11 Meta-GGA XC Functional; Y; Y; 0.250000; 0.428000; —; —; —; Y. MN12-SX; MN12-SX Meta-GGA Hybrid Screened Exchange-Correlation Functional; Y; Y; 0.110000; 0.250000; —; —; —; —; —. MN12-SX-D3BJ; MN12-SX Meta-GGA Hybrid Screened Exchange-Correlation Functional; Y; Y; 0.110000; 0.250000; —; —; —; Y. N12-SX; N12-SX Hybrid nonseparable GGA Exchange-Correlation Functional; Y; —; 0.110000; 0.250000; —; —; —; —; —. N12-SX-D3BJ; N12-SX Hybrid nonseparable GGA Exchange-Correlation Functional; Y; —; 0.110000; 0.250000; —; —; —; Y. TUNED-CAM-B3LYP; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional; Y; —; 0.150000; 0.079900; —; —; —; —; —. WB97; wB97 GGA Exchange-Correlation Functional; Y; —; 0.400000; —; —; —; —; —; —. WB97M-D3BJ; wB97M-V with D3(BJ) instead of VV10 dispersion; Y; Y; 0.300000; 0.150000; —; —; —; Y. WB97M-V; wB97M-V Hyb-GGA Exchange-Correlation Functional; Y; Y; 0.300000; 0.150000; —; —; —; —; —. WB97X; wB97X Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.157706; —; —; —; —; —. WB97X-D; wB97X-D Hyb-GGA Exchange-Correlation Functional; Y; —; 0.200000; 0.222036; —; —; —; Y. WB97X-D3; wB97X-D3 Hyb-GGA Exchange-Correlation Functional; Y; —; 0.250000; 0.195728; —; —; —; Y. WB97X-D3BJ; wB97X-V with D3(BJ) instead of VV10 dispersion; Y; —; 0.300000; 0.167000; —; —; —; Y. WB97X-V; wB97X-V Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.167000; —; —; —; —; —. WPBE; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; —; —. WPBE-D3BJ; PBE SR-XC Functional (HJS Model); Y; —; 0.400000; —; —; —; —; Y. WPBE-D3MBJ;,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_dft_lrc-1.html:2383,TUNE,TUNED-CAM-,2383,psi4manual/1.4.0/autodoc_dft_lrc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_lrc-1.html,20,['TUNE'],['TUNED-CAM-']
Performance,"F and UHF reference functions?. Type: boolean; Default: false. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. NEW_TRIPLES¶. Do use new triples?. Type: boolean; Default: true. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. PAIR_ENERGIES_PRINT¶. Do print MP2 and CCSD pair energies for RHF references?. Type: boolean; Default: false. PROPERTY¶. The response property desired. Acceptable values are POLARIZABILITY (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity, and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, MAGNETIZABILITY, ROA, ALL; Default: POLARIZABILITY. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. RESTART¶. Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. SCSN_MP2¶. Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SCS_CCSD¶. Do spin-component-scaled CCSD. Type: boolean; Default: false. SCS_MP2¶. Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SEMICANONICAL¶. Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SPINADAPT_ENERGIES¶. Do print spin-adapted pair energies?. Type: boolean; Default: false. T2_COUPLED¶. Type: boolean; Default: false. T3_WS_INCORE¶. Do build W inte",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__ccenergy-1.html:4674,optimiz,optimizations,4674,psi4manual/1.1.0/autodir_options_c/module__ccenergy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__ccenergy-1.html,4,['optimiz'],['optimizations']
Performance,"F conv crit since default overwritten by; SCF module keyword; 1; 2set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4‘s more flexible float input has been rounded down to; the integer required by Cfour; 1; 2set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; 1; 2; 3set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/cfour-1.html:33313,optimiz,optimizations,33313,psi4manual/1.1.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/cfour-1.html,2,['optimiz'],['optimizations']
Performance,"F conv crit since default overwritten by; SCF module keyword; 1; 2set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4’s more flexible float input has been rounded down to; the integer required by Cfour; 1; 2set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; 1; 2; 3set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; 1; 2; 3clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/cfour-1.html:33315,optimiz,optimizations,33315,psi4manual/1.2.1/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html,4,['optimiz'],['optimizations']
Performance,F). FRAG_MODE (OPTKING). FREEZE_CORE (GLOBALS). (SAPT). FREEZE_INTERFRAG (OPTKING). FREEZE_INTRAFRAG (OPTKING). frequency() in module driver. Frozen natural orbital coupled cluster. Frozen Natural Orbitals. FROZEN_BEND (OPTKING). FROZEN_DIHEDRAL (OPTKING). FROZEN_DISTANCE (OPTKING). FROZEN_DOCC (GLOBALS). (PSIMRCC). FROZEN_UOCC (GLOBALS). (PSIMRCC). fsymbol() LibmintsMolecule method. full_geometry() LibmintsMolecule method. FULL_HESS_EVERY (OPTKING). FULL_MATRIX (CCEOM). full_pg_n() LibmintsMolecule method. full_point_group_with_n() LibmintsMolecule method. FullPointGroupList LibmintsMolecule attribute. functional module. functional_list() in module functional. fx() LibmintsMolecule method. fxyz() LibmintsMolecule method. fy() LibmintsMolecule method. fz() LibmintsMolecule method. fZ() LibmintsMolecule method. FZC_A_FILE (TRANSQT). FZC_B_FILE (TRANSQT). FZC_FILE (TRANSQT). G. G_CONVERGENCE (OPTKING). GAUGE (CCDENSITY). (CCRESPONSE). gaussian_n module. GEOM_MAXITER (OPTKING). geometry optimization. IRC. constrained. convergence criteria. minima. output. transition state. geometry() in module molutil. LibmintsMolecule method. get() Keyword method. Section method. get_active_section() Getkw method. get_anchor_atom() LibmintsMolecule method. get_coord_value() LibmintsMolecule method. get_full_point_group() LibmintsMolecule method. get_keys() Section method. get_keyword() Getkw method. Section method. get_memory() in module p4util.util. get_num_threads() in module p4util.util. get_psifile() in module p4util.procutil. get_sects() Section method. get_topsect() Getkw method. get_variable() LibmintsMolecule method. getattr_ignorecase() in module p4util.procutil. getCartesian() PubChemObj method. Getkw class in pcmgetkw. getkw() Getkw method. Section method. getkw_bnf() GetkwParser method. GetkwParser class in pcmgetkw. getMoleculeString() PubChemObj method. getPubChemResults() in module pubchem. getSDF() PubChemObj method. getXYZFile() PubChemObj method. Ghost Atoms. gradient,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/genindex.html:23414,optimiz,optimization,23414,psi4manual/4.0b5/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/genindex.html,1,['optimiz'],['optimization']
Performance,"F). FRAG_MODE (OPTKING). FREEZE_CORE (GLOBALS). (SAPT). FREEZE_INTERFRAG (OPTKING). FREEZE_INTRAFRAG (OPTKING). frequency() in module driver. Frozen natural orbital coupled cluster. Frozen Natural Orbitals. FROZEN_BEND (OPTKING). FROZEN_DIHEDRAL (OPTKING). FROZEN_DISTANCE (OPTKING). FROZEN_DOCC (GLOBALS). (PSIMRCC). FROZEN_UOCC (GLOBALS). (PSIMRCC). fsymbol() LibmintsMolecule method. full_geometry() LibmintsMolecule method. FULL_HESS_EVERY (OPTKING). FULL_MATRIX (CCEOM). full_pg_n() LibmintsMolecule method. full_point_group_with_n() LibmintsMolecule method. FullPointGroupList LibmintsMolecule attribute. functional module. functional_list() in module functional. fx() LibmintsMolecule method. fxyz() LibmintsMolecule method. fy() LibmintsMolecule method. fz() LibmintsMolecule method. fZ() LibmintsMolecule method. FZC_A_FILE (TRANSQT). FZC_B_FILE (TRANSQT). FZC_FILE (TRANSQT). G. G_CONVERGENCE (OPTKING). GAUGE (CCDENSITY). (CCRESPONSE). gaussian_n module. GEOM_MAXITER (OPTKING). geometry optimization. IRC. constrained. convergence criteria. minima. output. transition state. geometry() in module molutil. LibmintsMolecule method. get_anchor_atom() LibmintsMolecule method. get_coord_value() LibmintsMolecule method. get_full_point_group() LibmintsMolecule method. get_memory() in module util. get_num_threads() in module util. get_psifile() in module procutil. get_variable() LibmintsMolecule method. getattr_ignorecase() in module procutil. getCartesian() PubChemObj method. getMoleculeString() PubChemObj method. getPubChemResults() in module pubchem. getSDF() PubChemObj method. getXYZFile() PubChemObj method. Ghost Atoms. gradient() in module driver. GRADIENT_WRITE (FINDIF). GUESS (SCF). GUESS_VECTOR (DETCI). H. H0_BLOCK_COUPLING (DETCI). H0_BLOCK_COUPLING_SIZE (DETCI). H0_BLOCKSIZE (DETCI). H0_GUESS_SIZE (DETCI). H_BOND_CONNECT (OPTKING). Hartree-Fock. has_inversion() LibmintsMolecule method. has_symmetry_element() LibmintsMolecule method. HBC6 module, [1]. HD_AVG (DETCI). HD_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/genindex.html:22011,optimiz,optimization,22011,psi4manual/4.0b4/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html,1,['optimiz'],['optimization']
Performance,"F, and CD. These are all global keywords, as their values are; shared among modules rather than (or in addition to) being used internally; by the module). We’re sticking with SCF_TYPE and; MP2_TYPE defaulting to DF, while most everything higher defaults; to CONV. (Exceptions are MP2.5 and MP3 that default to DF.); In psi4/psi4/driver/procrouting/proc_table.py, a managed method calls a; “select” function rather than a “run” function.; procedures = {; 'energy': {; 'scf' : run_scf,; 'mp3' : select_mp3,; 'dct' : run_dct,. Then in psi4/psi4/driver/procrouting/proc.py, the select function runs through; reference, type, and possibly freeze_core to specify the proc; function to call for any able, non-default module (e.g., mtd_type ==; 'DETCI' ) or able, default module (e.g., mtd_typd == ['', 'FNOCC'] ).; Don’t worry about ‘else’ statements as anything that falls through will be; caught and a readable error generated.; def select_mp3(name, **kwargs):; """"""Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. """"""; reference = psi4.get_option('SCF', 'REFERENCE'); mtd_type = psi4.get_global_option('MP_TYPE'); module = psi4.get_global_option('QC_MODULE'); # Considering only [df]occ/fnocc/detci. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module == 'FNOCC':; func = run_fnocc; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module in ['DETCI']:; func = run_detci. if func is None:; raise ManagedMethodError(['select_mp3', name, 'MP_TYPE', mtd_typ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/proc_py.html:6213,perform,performance,6213,psi4manual/master/proc_py.html,https://psicode.org,https://psicode.org/psi4manual/master/proc_py.html,4,['perform'],['performance']
Performance,"F. REFERENCE (RESPONSE); RESPONSE — Reference wavefunction type. Type: string; Default: RHF. REFERENCE (SCF); SCF — Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF, CUHF, RKS, UKS; Default: RHF. REFERENCE (STABILITY); STABILITY — Reference wavefunction type. Type: string; Possible Values: RHF, UHF, ROHF; Default: RHF. REFERENCE (TRANSQT); TRANSQT — Reference wavefunction type. Type: string; Default: RHF. REFERENCE (TRANSQT2); TRANSQT2 — Reference wavefunction type. Type: string; Default: RHF. REFERENCE_SYM (DETCI); DETCI (Expert) — Irrep for CI vectors; -1 = find automatically. This option allows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. REORDER (TRANSQT); TRANSQT — Do reorder MOs?. Type: boolean; Default: false. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — The algorithm to use for the solution of the response equations for the analytic gradients and properties. Two-step algorithm is generally more efficient than simultaneous and is used by default. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: T",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:102840,perform,performing,102840,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['perform'],['performing']
Performance,"F. REFERENCE (RESPONSE); RESPONSE — Reference wavefunction type. Type: string; Default: RHF. REFERENCE (SCF); SCF — Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF, CUHF, RKS, UKS; Default: RHF. REFERENCE (STABILITY); STABILITY — Reference wavefunction type. Type: string; Possible Values: RHF, UHF, ROHF; Default: RHF. REFERENCE (TRANSQT); TRANSQT — Reference wavefunction type. Type: string; Default: RHF. REFERENCE (TRANSQT2); TRANSQT2 — Reference wavefunction type. Type: string; Default: RHF. REFERENCE_SYM (DETCI); DETCI (Expert) — Irrep for CI vectors; -1 = find automatically. This option allows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. REORDER (TRANSQT); TRANSQT — Do reorder MOs?. Type: boolean; Default: false. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — The algorithm to use for the solution of the response equations for the analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do restart the coupled-cluster iterations from old",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:108414,perform,performing,108414,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,2,['perform'],['performing']
Performance,"F. omp2_5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. pywrap-db3; Test that Python Molecule class processes geometry like PsiMod Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html:1922,perform,performs,1922,psi4manual/4.0b4/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html,4,['perform'],['performs']
Performance,"F. omp2_5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_testsuite-1.html:1922,perform,performs,1922,psi4manual/4.0b5/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_testsuite-1.html,4,['perform'],['performs']
Performance,"F/UHF/ROHF/RKS/UKS; —. sos-pi-omp2; A special version of SOS-OMP2 for \(\pi\)-systems; RHF/UHF/ROHF/RKS/UKS; —. Basic OCC Keywords¶. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. Advanced OCC Keywords¶. OPT_METHOD¶. The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. MO_DIIS_NUM_VECS¶. Number of vectors used in orbital DIIS. Type: integer; Default: 6. LINEQ_SOLVER¶. The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SOS_SCALE¶. MP2 Spin-opposite scaling (SOS) value. Type: double; Defau",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/occ-1.html:12525,optimiz,optimization,12525,psi4manual/1.3.2/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/occ-1.html,2,['optimiz'],['optimization']
Performance,"F/UHF/ROHF/RKS/UKS; —. sos-pi-omp2; A special version of SOS-OMP2 for \(\pi\)-systems; RHF/UHF/ROHF/RKS/UKS; —. Basic OCC Keywords¶. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. Advanced OCC Keywords¶. OPT_METHOD¶. The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. MO_DIIS_NUM_VECS¶. Number of vectors used in orbital DIIS. Type: integer; Default: 6. LINEQ_SOLVER¶. The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SOS_SCALE¶. MP2 Spin-opposite scaling (SOS) value. Type: doubl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/occ-1.html:12523,optimiz,optimization,12523,psi4manual/1.1.0/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/occ-1.html,4,['optimiz'],['optimization']
Performance,"F/UHF; MP_TYPE DF. Cholesky-Decomposed MP3; RHF/UHF; —; MP_TYPE CD. mp2.5; MP2.5; RHF/UHF; RHF/UHF; MP_TYPE CONV. Density-Fitted MP2.5; RHF/UHF; RHF/UHF; MP_TYPE DF. Cholesky-Decomposed MP2.5; RHF/UHF; —; MP_TYPE CD. lccd; Linearized CCD; RHF/UHF; RHF/UHF; CC_TYPE CONV. Density-Fitted LCCD; RHF/UHF; RHF/UHF; CC_TYPE DF. Cholesky-Decomposed LCCD; RHF/UHF; —; CC_TYPE CD. ccd; CCD; —; —; CC_TYPE CONV. Density-Fitted CCD; RHF; RHF; CC_TYPE DF. Cholesky-Decomposed CCD; RHF; —; CC_TYPE CD. ccsd; CCSD; —; —; CC_TYPE CONV. Density-Fitted CCSD; RHF; RHF; CC_TYPE DF. Cholesky-Decomposed CCSD; RHF; —; CC_TYPE CD. ccsd(t); CCSD(T); —; —; CC_TYPE CONV. Density-Fitted CCSD(T); RHF; RHF; CC_TYPE DF. Cholesky-Decomposed CCSD(T); RHF; —; CC_TYPE CD. a-ccsd(t); Lambda-CCSD(T); —; —; CC_TYPE CONV. Density-Fitted Lambda-CCSD(T); RHF; —; CC_TYPE DF. Cholesky-Decomposed Lambda-CCSD(T); RHF; —; CC_TYPE CD. table of contents. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Convergence Problems; Methods; Basic OCC Keywords; E_CONVERGENCE; R_CONVERGENCE; RMS_MOGRAD_CONVERGENCE; MAX_MOGRAD_CONVERGENCE; MO_MAXITER; WFN_TYPE; ORB_OPT. Advanced OCC Keywords; OPT_METHOD; LINEQ_SOLVER; ORTH_TYPE; MP2_OS_SCALE; MP2_SS_SCALE; MP2_SOS_SCALE; MP2_SOS_SCALE2; NAT_ORBS; OCC_ORBS_PRINT; TPDM_ABCD_TYPE; DO_DIIS; DO_LEVEL_SHIFT. Basic DFOCC Keywords; E_CONVERGENCE; R_CONVERGENCE; RMS_MOGRAD_CONVERGENCE; MAX_MOGRAD_CONVERGENCE; MO_MAXITER; ORB_OPT. Advanced DFOCC Keywords; OPT_METHOD; HESS_TYPE; MO_DIIS_NUM_VECS; ORTH_TYPE; DO_DIIS; DO_LEVEL_SHIFT. Conventional (Non-OO) Coupled-Cluster and Møller–Plesset Perturbation Theories. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Theoretical Methods: SCF to FCI; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/occ.html:18579,Optimiz,Optimized,18579,psi4manual/1.6.x/occ.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/occ.html,2,['Optimiz'],['Optimized']
Performance,"F/UHF; RHF/UHF; MP_TYPE CONV. Density-Fitted MP3; RHF/UHF; RHF/UHF; MP_TYPE DF. Cholesky-Decomposed MP3; RHF/UHF; —; MP_TYPE CD. mp2.5; MP2.5; RHF/UHF; RHF/UHF; MP_TYPE CONV. Density-Fitted MP2.5; RHF/UHF; RHF/UHF; MP_TYPE DF. Cholesky-Decomposed MP2.5; RHF/UHF; —; MP_TYPE CD. lccd; Linearized CCD; RHF/UHF; RHF/UHF; CC_TYPE CONV. Density-Fitted LCCD; RHF/UHF; RHF/UHF; CC_TYPE DF. Cholesky-Decomposed LCCD; RHF/UHF; —; CC_TYPE CD. ccd; CCD; —; —; CC_TYPE CONV. Density-Fitted CCD; RHF; RHF; CC_TYPE DF. Cholesky-Decomposed CCD; RHF; —; CC_TYPE CD. ccsd; CCSD; —; —; CC_TYPE CONV. Density-Fitted CCSD; RHF; RHF; CC_TYPE DF. Cholesky-Decomposed CCSD; RHF; —; CC_TYPE CD. ccsd(t); CCSD(T); —; —; CC_TYPE CONV. Density-Fitted CCSD(T); RHF; RHF; CC_TYPE DF. Cholesky-Decomposed CCSD(T); RHF; —; CC_TYPE CD. ccsd(at); Lambda-CCSD(T); —; —; CC_TYPE CONV. Density-Fitted Lambda-CCSD(T); RHF; —; CC_TYPE DF. Cholesky-Decomposed Lambda-CCSD(T); RHF; —; CC_TYPE CD. table of contents. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Convergence Problems; Methods; Basic OCC Keywords; E_CONVERGENCE; R_CONVERGENCE; RMS_MOGRAD_CONVERGENCE; MAX_MOGRAD_CONVERGENCE; MO_MAXITER; WFN_TYPE; ORB_OPT. Advanced OCC Keywords; OPT_METHOD; MO_DIIS_NUM_VECS; LINEQ_SOLVER; ORTH_TYPE; MP2_OS_SCALE; MP2_SS_SCALE; MP2_SOS_SCALE; MP2_SOS_SCALE2; NAT_ORBS; OCC_ORBS_PRINT; TPDM_ABCD_TYPE; DO_DIIS; DO_LEVEL_SHIFT. Basic DFOCC Keywords; E_CONVERGENCE; R_CONVERGENCE; RMS_MOGRAD_CONVERGENCE; MAX_MOGRAD_CONVERGENCE; MO_MAXITER; ORB_OPT. Advanced DFOCC Keywords; OPT_METHOD; HESS_TYPE; MO_DIIS_NUM_VECS; ORTH_TYPE; DO_DIIS; DO_LEVEL_SHIFT. Conventional (Non-OO) Coupled-Cluster and Møller–Plesset Perturbation Theories. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/occ-1.html:17761,Optimiz,Optimized,17761,psi4manual/1.3.2/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/occ-1.html,2,['Optimiz'],['Optimized']
Performance,"FERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. RESTART¶. Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/cc.html:7503,CACHE,CACHELEVEL,7503,psi4manual/master/cc.html,https://psicode.org,https://psicode.org/psi4manual/master/cc.html,15,['CACHE'],['CACHELEVEL']
Performance,"FF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the S",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:27378,optimiz,optimization,27378,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimization']
Performance,"FF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculati",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:27616,optimiz,optimization,27616,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimization']
Performance,"FF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR); CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR); CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:27378,optimiz,optimization,27378,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,4,['optimiz'],['optimization']
Performance,"FFDIAGONAL_CCSD_T (PSIMRCC). OMEGA (CCRESPONSE). (CCSORT). (RESPONSE). OMEGA_ERF (MINTS). OMP2; . setting keywords. theory. OMP2.5; . setting keywords. OMP2CORRELATIONENERGY. OMP2TOTALENERGY. OMP3; . setting keywords. theory. OMP3CORRELATIONENERGY. OMP3TOTALENERGY. OMP_N_THREAD (CPHF). OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4]. ONE-ELECTRONENERGY. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OPDM (DETCI). OPDM_AVG (DETCI). OPDM_IN_FILE (TRANSQT). OPDM_KE (DETCI). OPDM_OUT_FILE (TRANSQT). OPDM_PRINT (DETCI). OPDM_RELAX (CCDENSITY). (DFMP2). opt(); . see optimize(); . OPT_METHOD (OCC). OPT_TYPE (OPTKING). optimization; . see geometry optimization; . optimize(); . setting keywords. optimize() in module driver. OptionsState class in optproc. OptionState class in optproc. optproc module. ORB_OPT (OCC). ORB_RESP_SOLVER (OCC). Orbital-Optimized Methods; . theory. Orbital-Optimized Methods, OCEPA. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. orientation_fixed() LibmintsMolecule method. ORTH_TYPE (OCC). output; . SAPT. cbs(). database(). geometry optimization. P. P (THERMO). PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parse_arbitrary_order() in module driver. parse_cotton_irreps() in module driver. parse_multiline_array() in module input. PATH, [1], [2], [3], [4]. PB_LAMBDA (DFTSAPT). PCG_BETA_TYPE (OCC). PCG_CONVERGENCE (OCC). PCG_MAXITER (OCC). PEP1. perp_unit() in module qcdb.vecutil. PERTURB_CBS (PSIMRCC). PERTURB_CBS_COUPLING (PSIMRCC). PERTURB_H (SCF). PERTURB_MAGNITUDE (DETCI). (SCF). PERTURB_WITH (SCF). PHI_POINTS (SCF). physconst module. physical constants. PITZER (TRANSQT). point_group() LibmintsMolecule method. POINTS (FINDIF). POLE_MAXITER (ADC). populateExtern() Diffuse method. QMMM method. PR (ADC). PRECONDITIONER (DETCI). prerequisites. PRESORT_FILE (TRANSQT). PRINT (C",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/genindex.html:31557,Optimiz,Optimized,31557,psi4manual/4.0b4/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html,1,['Optimiz'],['Optimized']
Performance,"FMP2']:; func = run_dfmp2; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'DFMP2']:; func = run_dfmp2; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference in ['RKS', 'UKS']:; if mtd_type == 'DF':; if module in ['', 'DFMP2']:; func = run_dfmp2. if module == 'DETCI':; core.print_out(""""""\nDETCI is ill-advised for method MP2 as it is available inefficiently as a """"""; """"""byproduct of a CISD computation.\n DETCI ROHF MP2 will produce non-standard results.\n""""""). if func is None:; raise ManagedMethodError(['select_mp2', name, 'MP2_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_mp2_gradient(name, **kwargs):; """"""Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP2_TYPE'); module = core.get_global_option('QC_MODULE'); all_electron = (core.get_global_option('FREEZE_CORE') == ""FALSE""); # Considering only [df]occ/dfmp2. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if all_electron:; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc_gradient; elif module in ['', 'DFMP2']:; func = run_dfmp2_gradient; elif reference == 'UHF':; if mtd_type == 'CONV':; if all_electron:; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient. if func is None:; raise ManagedMethodError(['select_mp2_gradient', name, 'MP2_TYPE', mtd_type, reference, module, all_electron]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html:4216,perform,performance,4216,psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,3,['perform'],['performance']
Performance,"FOUR_CC_EXTRAPOLATION (CFOUR)¶CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR)¶CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from act",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:27018,perform,performance,27018,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,9,['perform'],['performance']
Performance,"FOUR_UIJ_THRESHOLD¶. Specifies the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version). Type: integer; Default: 25. CFOUR_UNITS¶. Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN¶. Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION¶. Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF, EXACT; Default: NO. CFOUR_VTRAN¶. This keyw",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodir_options_c/module__cfour-1.html:63839,optimiz,optimization,63839,psi4manual/1.2.1/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodir_options_c/module__cfour-1.html,13,['optimiz'],['optimization']
Performance,"FOUR_UIJ_THRESHOLD¶. Specifies the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version). Type: integer; Default: 25. CFOUR_UNITS¶. Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN¶. Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION¶. Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN¶. This keyword def",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:62942,optimiz,optimization,62942,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,4,['optimiz'],['optimization']
Performance,"FRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. Optimizing Minima¶; First, define the molecule and basis in the input.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; set step_type nr; optimize('scf'). Optimize using finite differences of energies instead of gradients:; optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:. set full_hess_every 1; optimize('scf'). import optking. Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_EVERY keyword. Transition States and Reaction Paths¶. Calculate a starting Hessian and optimize the “transition state",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/optking.html:3977,Optimiz,Optimize,3977,psi4manual/1.7.x/optking.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/optking.html,3,['Optimiz'],['Optimize']
Performance,"FRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. Optimizing Minima¶; First, define the molecule and basis in the input.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; set step_type nr; optimize('scf'). Optimize using finite differences of energies instead of gradients:; optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:. set full_hess_every 1; optimize('scf'). import optking. Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_EVERY keyword. Transition States and Reaction Paths¶; Optking currently has two transition state algorithms. The curr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/optking.html:3996,Optimiz,Optimize,3996,psi4manual/master/optking.html,https://psicode.org,https://psicode.org/psi4manual/master/optking.html,1,['Optimiz'],['Optimize']
Performance,"FT TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. td-th2; TDDFT TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. td-th3; TDDFT TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. td-th4; TDDFT TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. td-tpss; TDDFT TPSS Meta-GGA XC Functional. tpss-d3bj2b. tpss-d3bjatm. tpss-d3zero2b. tpss-d3zeroatm. tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. td-tpssh; TDDFT TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj2b. tpssh-d3bjatm. tpssh-d3zero2b. tpssh-d3zeroatm. tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. td-tpsslyp1w; TDDFT TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. td-tuned-cam-b3lyp; TDDFT TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. td-vsxc; TDDFT VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. td-vv10; TDDFT VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. td-wb97; TDDFT wB97 GGA Exchange-Correlation Functional. wb97m-d3bj. wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. td-wb97m-v; TDDFT wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. td-wb97x; TDDFT wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d. wb97x-d3. wb97x-d3bj. wb97x-d3zero2b. wb97x-d3zeroatm. wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. td-wb97x-v; TDDFT wB97X-V Hyb-GGA Exchange-Correlation Functional. wb97x3c; wB97X basied 3C composite method with a small basis set, gCP and D4 (10.1063/5.0133026). wpbe; PBE SR-XC Functional (HJS Model). td-wpbe; TDDFT PBE SR-XC Functional (HJS Model). wpbe-d3bj2b. wpbe-d3bjatm. wpbe-d3mbj2b",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_dft_energy.html:24403,tune,tuned-cam-,24403,psi4manual/master/autodoc_dft_energy.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_dft_energy.html,12,"['TUNE', 'tune']","['TUNED-CAM-', 'tuned-cam-']"
Performance,FT TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. td-th2; TDDFT TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. td-th3; TDDFT TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. td-th4; TDDFT TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. td-tpss; TDDFT TPSS Meta-GGA XC Functional. tpss-d3bj2b. tpss-d3bjatm. tpss-d3zero2b. tpss-d3zeroatm. tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. td-tpssh; TDDFT TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj2b. tpssh-d3bjatm. tpssh-d3zero2b. tpssh-d3zeroatm. tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. td-tpsslyp1w; TDDFT TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. td-tuned-cam-b3lyp; TDDFT TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. td-vsxc; TDDFT VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. td-vv10; TDDFT VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. td-wb97; TDDFT wB97 GGA Exchange-Correlation Functional. wb97m-d3bj. wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. td-wb97m-v; TDDFT wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. td-wb97x; TDDFT wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d. wb97x-d3. wb97x-d3bj. wb97x-d3zero2b. wb97x-d3zeroatm. wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. td-wb97x-v; TDDFT wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). td-wpbe; TDDFT PBE SR-XC Functional (HJS Model). wpbe-d3bj2b. wpbe-d3bjatm. wpbe-d3mbj2b. wpbe-d3mbjatm. wpbe-d3mzero2b. wpbe-d3mzeroatm. wpbe-d3zero2b. wpbe-d3zeroatm. wpbe0; PBE0 SR-XC,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:31682,tune,tuned-cam-,31682,psi4manual/1.7.x/api/psi4.driver.energy.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html,6,"['TUNE', 'tune']","['TUNED-CAM-', 'tuned-cam-']"
Performance,"FT orbitals as an initial guess for orbital-optimized methods. Both ROHF and; DFT orbitals may provide better initial guesses than UHF orbitals, hence convergence may be significantly speeded up with ROHF or DFT orbitals.; In order to use ROHF orbitals, simply set reference rohf. For DFT orbitals, set reference uks and set dft_functional b3lyp. Of; course users can use any DFT functional available in PSI4. Methods¶; The orbital-optimized MPn and OLCCD methods currently supported in; PSI4 are outlined in Table Orbital-Optimzed OCC/DFOCC; Methods. The following methods are available; and can be controlled through OCC (conventional integrals CONV); and DFOCC (density-fitted DF and Cholesky-decomposed CD); keywords. Switching between the integrals treatments is controlled; through “type select” values in the rightmost Table column. Orbital-Optimized MP and LCCD capabilities of OCC/DFOCC modules¶. name; calls method; Energy; Gradient; type select. omp2; Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP2_TYPE CONV. Density-Fitted Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP2_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —; MP2_TYPE CD. omp3; Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE CONV. Density-Fitted Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —; MP_TYPE CD. omp2.5; Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE CONV. Density-Fitted Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; —; MP_TYPE CD. olccd; Orbital-Optimized Linear CCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE CONV. Density-Fitted Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE DF. Cholesky-Decomposed Orbital-Optimized LCCD; RHF/UHF/ROHF/RK",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/occ-1.html:9604,Optimiz,Optimized,9604,psi4manual/1.1.0/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/occ-1.html,11,['Optimiz'],['Optimized']
Performance,"FTD3 executable.; Function to call Grimme’s dftd3 program to compute the -D correction; of level dashlvl using parameters for the functional func.; dashparam can supply a full set of dispersion parameters in the; absence of func or individual overrides in the presence of func.; The DFTD3 executable must be independently compiled and found in; PATH or PSIPATH. Parameters:; mol (qcdb.Molecule or psi4.core.Molecule or str) – Molecule on which to run dispersion calculation. Both qcdb and; psi4.core Molecule classes have been extended by this method, so; either allowed. Alternately, a string that can be instantiated; into a qcdb.Molecule.; func (str or None) – Density functional (Psi4, not Turbomole, names) for which to; load parameters from dashcoeff[dashlvl][func]. This is not; passed to DFTD3 and thus may be a dummy or None. Any or all; parameters initialized can be overwritten via dashparam.; dashlvl ({'d2p4', 'd2gr', 'd3zero', 'd3bj', 'd3mzero', d3mbj', 'd', 'd2', 'd3', 'd3m'}) – Flavor of a posteriori dispersion correction for which to load; parameters and call procedure in DFTD3. Must be a keys in; dashcoeff dict (or a key in dashalias that resolves to one).; dashparam (dict, optional) – Dictionary of the same keys as dashcoeff[dashlvl] used to; override any or all values initialized by; dashcoeff[dashlvl][func].; dertype ({None, 0, 'none', 'energy', 1, 'first', 'gradient'}, optional) – Maximum derivative level at which to run DFTD3. For large; mol, energy-only calculations can be significantly more; efficient. Also controls return values, see below.; verbose (bool, optional) – When True, additionally include DFTD3 output in output. Returns:; energy (float, optional) – When dertype is 0, energy [Eh].; gradient (list of lists of floats or psi4.core.Matrix, optional) – When dertype is 1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (float and list of lists of floats or psi4.core.Matrix, optional) – When dertype is unspecified, both energy [Eh] and (nat, 3) gradient",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.molecule.html:24732,load,load,24732,psi4manual/1.2.1/api/psi4.core.molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.molecule.html,6,['load'],['load']
Performance,"Finite difference of energies frequency, run in sow/reap mode. pywrap-db2; Database calculation, run in sow/reap mode. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dft-custom; DFT custom functional test. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cubeprop-esp; RHF orbitals and density for water. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/testsuite-1.html:45177,optimiz,optimization,45177,psi4manual/1.4.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/testsuite-1.html,2,['optimiz'],['optimization']
Performance,Frozen Natural Orbitals. FROZEN_BEND (OPTKING). FROZEN_CARTESIAN (OPTKING). FROZEN_DIHEDRAL (OPTKING). FROZEN_DISTANCE (OPTKING). FROZEN_DOCC (GLOBALS). FROZEN_UOCC (GLOBALS). frzcpi() psi4.core.CCWavefunction method. psi4.core.CIWavefunction method. psi4.core.CUHF method. psi4.core.DFEP2Wavefunction method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. psi4.core.Wavefunction method. frzvpi() psi4.core.CCWavefunction method. psi4.core.CIWavefunction method. psi4.core.CUHF method. psi4.core.DFEP2Wavefunction method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. psi4.core.Wavefunction method. fsymbol() psi4.core.Molecule method. ftrue_atomic_number() psi4.core.Molecule method. Full psi4.core.SaveType attribute. full_geometry() psi4.core.Molecule method. FULL_HESS_EVERY (OPTKING). FULL_MATRIX (CCEOM). full_name() psi4.core.PointGroup method. full_pg_n() psi4.core.Molecule method. function call. ; geometry optimization. gradient. hessian. vibrational analysis. function_index psi4.core.GaussianShell attribute. function_to_center() psi4.core.BasisSet method. function_to_shell() psi4.core.BasisSet method. Functional class in psi4.core. functional() psi4.core.CUHF method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. psi4.core.VBase method. functionals. functions_local_to_global() psi4.core.BlockOPoints method. fx() psi4.core.Molecule method. fy() psi4.core.Molecule method. fZ() psi4.core.Molecule method. fz() psi4.core.Molecule method. fzc() psi4.core.MOSpace static method. fzv() psi4.core.MOSpace static method. G. G_CONVERGENCE (OPTKING). gamma() psi4.core.CharacterTable method. gau2grid. GAUGE (ADC). (CCDENSITY). (CCRESPONSE). Gaussian Formatted Checkpoint. GaussianShell class in psi4.core. GaussianType class in psi4.core. gCP. GDMA. gdma() in module psi4.driver. GDMA_LIMIT (GDMA). GDMA_MULTIPOLE_UNITS (GDMA). GDMA_ORIGIN (GDMA). GDMA_RADIUS (GDMA),MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/genindex-1.html:65013,optimiz,optimization,65013,psi4manual/1.4.0/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/genindex-1.html,5,['optimiz'],['optimization']
Performance,"Frozen-Core Operator'; moH = core.Matrix(PSIF_MO_FZC, wfn.nmopi(), wfn.nmopi()); moH.load(core.IO.shared_object(), psif.PSIF_OEI); mo_slice = core.Slice(frzcpi, active_mopi); MO_FZC = moH.get_block(mo_slice, mo_slice); offset = 0; for h, block in enumerate(MO_FZC.nph):; il = np.tril_indices(block.shape[0]); for index, x in np.ndenumerate(block[il]):; row = mo_idx(il[0][index] + offset); col = mo_idx(il[1][index] + offset); if (abs(x) > ints_tolerance):; intdump.write('{:29.20E} {:4d} {:4d} {:4d} {:4d}\n'.format(x, row, col, 0, 0)); offset += block.shape[0]; # Additional one-electron integrals as requested in oe_ints; # Orbital energies; core.print_out('Writing orbital energies in FCIDUMP format to ' + fname + '\n'); if 'EIGENVALUES' in oe_ints:; eigs_dump = write_eigenvalues(wfn.epsilon_a().get_block(mo_slice).to_array(), mo_idx); intdump.write(eigs_dump); else:; PSIF_MO_A_FZC = 'MO-basis Alpha Frozen-Core Oper'; moH_A = core.Matrix(PSIF_MO_A_FZC, wfn.nmopi(), wfn.nmopi()); moH_A.load(core.IO.shared_object(), psif.PSIF_OEI); mo_slice = core.Slice(frzcpi, active_mopi); MO_FZC_A = moH_A.get_block(mo_slice, mo_slice); offset = 0; for h, block in enumerate(MO_FZC_A.nph):; il = np.tril_indices(block.shape[0]); for index, x in np.ndenumerate(block[il]):; row = alpha_mo_idx(il[0][index] + offset); col = alpha_mo_idx(il[1][index] + offset); if (abs(x) > ints_tolerance):; intdump.write('{:29.20E} {:4d} {:4d} {:4d} {:4d}\n'.format(x, row, col, 0, 0)); offset += block.shape[0]; PSIF_MO_B_FZC = 'MO-basis Beta Frozen-Core Oper'; moH_B = core.Matrix(PSIF_MO_B_FZC, wfn.nmopi(), wfn.nmopi()); moH_B.load(core.IO.shared_object(), psif.PSIF_OEI); mo_slice = core.Slice(frzcpi, active_mopi); MO_FZC_B = moH_B.get_block(mo_slice, mo_slice); offset = 0; for h, block in enumerate(MO_FZC_B.nph):; il = np.tril_indices(block.shape[0]); for index, x in np.ndenumerate(block[il]):; row = beta_mo_idx(il[0][index] + offset); col = beta_mo_idx(il[1][index] + offset); if (abs(x) > ints_tolerance):; i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/fcidump.html:6213,load,load,6213,psi4manual/1.3.2/_modules/psi4/driver/p4util/fcidump.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/fcidump.html,2,['load'],['load']
Performance,"Function selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP2_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/dfmp2. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc_gradient; elif module in ['', 'DFMP2']:; func = run_dfmp2_gradient; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient. if func is None:; raise ManagedMethodError(['select_mp2_gradient', name, 'MP2_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_mp2_property(name, **kwargs):; """"""Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP2_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only dfmp2 for now. func = None; if reference == 'RHF':; if mtd_type == 'DF':; #if module == 'OCC':; # func = run_dfocc_property; if module in ['', 'DFMP2']:; func = run_dfmp2_property; #elif reference == 'UHF':; # if mtd_type == 'DF':; # if module in ['', 'OCC']:; # func = run_dfocc_property. if func is None:; raise ManagedMethodError(['select_mp2_property', name, 'MP2_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_omp2(name, **kwargs):; """"""Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP2_TYPE'); module =",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html:4734,perform,performance,4734,psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html,3,['perform'],['performance']
Performance,"Function to compare two values. Prints :py:func:`util.success`; when value *computed* matches value *expected* to number of *digits*; (or to *digits* itself when *digits* > 1 e.g. digits=0.04). Performs; a system exit on failure unless *exitonfail* False, in which case; returns error message. Used in input files in the test suite. """"""; thresh = 10 ** -digits if digits > 1 else digits; if abs(expected - computed) > thresh:; print(""\t%s: computed value (%f) does not match (%f) to %f digits."" % (label, computed, expected, digits)); if exitonfail:; sys.exit(1); else:; return; if math.isnan(computed):; print(""\t%s: computed value (%f) does not match (%f)\n"" % (label, computed, expected)); print(""\tprobably because the computed value is nan.""); if exitonfail:; sys.exit(1); else:; return; _success(label). [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; print(""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); sys.exit(1); _success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if(expected != computed):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); sys.exit(1); _success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; rows = len(expected)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/psiutil.html:2533,Perform,Performs,2533,psi4manual/1.0.0/_modules/qcdb/psiutil.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/psiutil.html,1,['Perform'],['Performs']
Performance,"Function to process match of print and transform; it to psi4.print_out(). process_pubchem_command(matchobj)[source]¶; Function to process match of pubchem in molecule block. process_set_command(matchobj)[source]¶; Function to process match of all individual set (module_list); key {[value_list] or $value or value}. process_set_commands(matchobj)[source]¶; Function to process match of set name? { ... }. process_word_quotes(matchobj)[source]¶; Function to determine if argument needs wrapping in quotes as string. quotify(string, isbasis=False)[source]¶; Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When basis; is True, allows commas, since basis sets may have commas and are assured to; not involve arrays. driver_nbody¶. nCr(n, r)[source]¶. driver_cbs¶. return_energy_components()[source]¶. driver¶; Module with a procedures dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. wrapper_autofrag¶. auto_fragments(**kwargs)[source]¶; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. Returns:Molecule) – fragmented molecule. Parameters:molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> molecule mol {\nH 0.0 0.0 0.0\nH 2.0 0.0 0.0\nF 0.0 1.0 0.0\nF 2.0 1.0 0.0\n}; >>> print mol.nfragments() # 1; >>> fragmol = auto_fragments(); >>> print fragmol.nfragments() # 2. qmmm¶; Module with classes to integrate MM charges into; a QM calculation. class Diffuse(molecule, basisname, ribasisname)[source]¶. fitGeneral()[source]¶; Function to perform a general fit of diffuse charges; to wavefunction density. fitScf()[source]¶; Function",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:8111,optimiz,optimizations,8111,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['optimiz'],['optimizations']
Performance,"Functional method, [1], [2]. is_poisson() psi4.core.FittingMetric method, [1], [2]. is_pure() psi4.core.GaussianShell method, [1], [2]. is_variable() psi4.core.Molecule method, [1], [2]. is_x_hybrid() psi4.core.SuperFunctional method, [1], [2]. is_x_lrc() psi4.core.SuperFunctional method, [1], [2]. Isotopes. ISTOP (DETCI). iterations() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. J. J() psi4.core.JK method, [1], [2]. JK class in psi4.core, [1]. jk() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. JOBTYPE (CCLAMBDA). join_path() in module psi4.driver. JSCH module, [1]. K. K() psi4.core.JK method, [1], [2]. KEEP_INTCOS (OPTKING). keywords. ; anharmonicity(), setting. cbs(), setting. cp, setting. database(), setting. energy(), setting. frequency(), setting. general, setting. molecule, setting. optimize(), setting. property(), setting. vmfc, setting. KineticInt class in psi4.core, [1]. L. L psi4.core.BoysLocalizer attribute, [1]. psi4.core.Localizer attribute, [1], [2]. psi4.core.PMLocalizer attribute, [1]. label() psi4.core.Molecule method, [1], [2]. LaplaceDenominator class in psi4.core, [1]. LCC2(+LMP2)TOTALENERGY. LCCSD. LCCSD(+LMP2)TOTALENERGY. legacy_wavefunction() in module psi4.core, [1]. LEVEL_SHIFT (DFOCC). (MCSCF). (OCC). levenshtein() in module psi4.driver. LIBEFP. libfock() in module psi4.core, [1]. Libint. license. LINEAR (CCRESPONSE). LINEQ_SOLVER (DFOCC). (OCC). LINESEARCH_STATIC_MAX (OPTKING). LINESEARCH_STATIC_MIN (OPTKING). LINESEARCH_STATIC_N (OPTKING). LITERAL_CFOUR (GLOBALS). load() psi4.core.Matrix method, [1], [2]. load_mpqc() psi4.core.Matrix method, [1], [2]. LOCAL (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). LOCAL_CONVERGENCE (FISAPT). (SCF). LOCAL_CPHF_CUTOFF (CCENERGY). (CCLAMBDA). (CCRESPONSE). LOCAL_CUTOFF (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/genindex-1.html:57764,optimiz,optimize,57764,psi4manual/1.1.0/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/genindex-1.html,2,['optimiz'],['optimize']
Performance,"G** for 6-311ppgss.; """"""; return self.ornate. [docs] def add_jkfit(self, fit):; """"""Function to add basis *fit* as associated fitting basis; member *jkfit* to a BasisFamily object.; """"""; self.jkfit = sanitize_basisname(fit). [docs] def add_rifit(self, fit):; """"""Function to add basis *fit* as associated fitting basis; member *rifit* to a BasisFamily object.; """"""; self.rifit = sanitize_basisname(fit). [docs] def add_dualfit(self, fit):; """"""Function to add basis *fit* as associated helper basis; member *dualfit* to a BasisFamily object.; """"""; self.dualfit = sanitize_basisname(fit). [docs]def sanitize_basisname(name):; """"""Function to return *name* in coded form, stripped of ; characters that confuse filenames, characters into lowercase, ; ``+`` into ``p``, ``*`` into ``s``, and ``(``, ``)``, & ``,`` ; into ``_``.; """"""; temp = PsiMod.BasisSet.make_filename(name); return os.path.splitext(os.path.splitext(temp)[0])[0]. [docs]def load_basis_families():; """"""Function to load into the array ``basisfamily_list``; BasisFamily objects for all Psi4's standard installed bases.; """"""; from basislistdunning import load_basfam_dunning; from basislistother import load_basfam_other. if len(basisfamily_list) == 0:; load_basfam_dunning(); load_basfam_other(); return basisfamily_list. [docs]def print_basis_families():; """"""Function to print to the output file a formatted summary; of all the BasisFamily objects in ``basisfamily_list``, by; default all Psi4's standard installed bases.; """"""; basisfamily_list = load_basis_families(). for fam in basisfamily_list:; PsiMod.print_out('%s' % fam). [docs]def corresponding_jkfit(name):; """"""Function to return an appropriate JK fitting basis for; the orbital basis *name* in coded or ornate form. ``None``; is returned if no fitting basis is defined or if the; orbital basis is not found.; """"""; basisfamily_list = load_basis_families(). for fam in basisfamily_list:; if sanitize_basisname(fam.ornate) == sanitize_basisname(name):; return fam.jkfit; return None.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/basislist.html:2383,load,load,2383,psi4manual/4.0b3/_modules/basislist.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/basislist.html,2,['load'],['load']
Performance,"GA Exchange (HJS Model). wsvwn; LSDA SR-XC Functional. ws_x; Slater Short-Range LSDA Exchange. Warning; For the present, file intco.dat is lodged in the submission; directory and defines the internal coordinates for an optimization.; Thus, it is unsafe to run multiple optimizations from a single; directory. Also, intco.dat can linger, so, unless you’ve; deliberately constructed it, be sure to clear it out before starting a; new optimization. Warning; Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; driver.energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``’gradient’`` or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp3 optimization; >>> opt('mp3'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccs",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/opt-1.html:7432,perform,performs,7432,psi4manual/4.0b3/opt-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/opt-1.html,2,['perform'],['performs']
Performance,"GENCE. Type: conv double; Default: 1e-4. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, OCC will estimate and use a value required to achieve the desired E_CONVERGENCE The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5, REMP, OREMP; Default: OMP2. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. Advanced OCC Keywords¶. OPT_METHOD¶. The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. MP2_OS_SCALE¶. Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 6.0. MP2_SS_SCALE¶. Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_SOS_SCALE¶. Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. MP2_SOS_SCALE2¶. Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.2. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OCC_ORBS_PRINT¶. Do print OCC orbital energies?. Type: boolean; Default: false. TPDM_ABCD_TYPE¶. How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algorithm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. T",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/occ.html:14864,perform,performed,14864,psi4manual/master/occ.html,https://psicode.org,https://psicode.org/psi4manual/master/occ.html,4,['perform'],['performed']
Performance,"GENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. Advanced OCC Keywords¶. OPT_METHOD¶. The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. MO_DIIS_NUM_VECS¶. Number of vectors used in orbital DIIS. Type: integer; Default: 6. LINEQ_SOLVER¶. The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SOS_SCALE¶. MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2¶. Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OCC_ORBS_PRINT¶. Do print OCC orbital energies?. Type: boolean; Default: false. TPDM_ABCD_TYPE¶. How to take care of the TPDM VVVV-blo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/occ-1.html:12866,perform,performed,12866,psi4manual/1.3.2/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/occ-1.html,2,['perform'],['performed']
Performance,"GENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. Advanced OCC Keywords¶. OPT_METHOD¶. The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. MO_DIIS_NUM_VECS¶. Number of vectors used in orbital DIIS. Type: integer; Default: 6. LINEQ_SOLVER¶. The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SOS_SCALE¶. MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2¶. Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OCC_ORBS_PRINT¶. Do print OCC orbital energies?. Type: boolean; Default: false. TPDM_ABCD_TYPE¶. How to take care of the TPDM ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/occ-1.html:12864,perform,performed,12864,psi4manual/1.1.0/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/occ-1.html,6,['perform'],['performed']
Performance,"GENCE¶. Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG¶. Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT¶. SS vectors stored per root. Type: integer; Default: 5. T3_WS_INCORE¶. Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. VECS_CC3¶. Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT¶. Vectors stored per root. Type: integer; Default: 12. Expert¶. EXCITATION_RANGE¶. The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. WFN¶. Wavefunction type. Type: string; Possible Values: EOM_CCSD, EOM_CC2, EOM_CC3; Default: EOM_CCSD. table of contents. CCEOM; General; ABCD; CACHELEVEL; CACHETYPE; CC3_FOLLOW_ROOT; CC_NUM_THREADS; COLLAPSE_WITH_LAST; COLLAPSE_WITH_LAST_CC3; COMPLEX_TOLERANCE; EOM_GUESS; EOM_REFERENCE; E_CONVERGENCE; FULL_MATRIX; LOCAL; LOCAL_CUTOFF; LOCAL_DO_SINGLES; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PRECONDITIONER; LOCAL_WEAKP; MAXITER; NEW_TRIPLES; NUM_AMPS_PRINT; OVERLAP_CHECK; PROP_ROOT; PROP_SYM; REFERENCE; RESTART_EOM_CC3; RHF_TRIPLETS; ROOTS_PER_IRREP; R_CONVERGENCE; SCHMIDT_ADD_RESIDUAL_TOLERANCE; SEMICANONICAL; SINGLES_PRINT; SS_E_CONVERGENCE; SS_R_CONVERGENCE; SS_SKIP_DIAG; SS_VECS_PER_ROOT; T3_WS_INCORE; VECS_CC3; VECS_PER_ROOT. Expert; EXCITATION_RANGE; WFN. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Appendices; Keywords by Module; CCEOM. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__cceom.html:7029,CACHE,CACHELEVEL,7029,psi4manual/1.6.x/autodir_options_c/module__cceom.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__cceom.html,2,['CACHE'],"['CACHELEVEL', 'CACHETYPE']"
Performance,"GESV. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MOGRAD_DAMPING¶. Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MO_DIIS_NUM_VECS¶. Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ¶. Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_STEP_MAX¶. Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE¶. Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0. MP2_SOS_SCALE¶. MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2¶. Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OCC_ORBS_PRINT¶. Do print OCC orbital energies?. Type: boolean; Default: false. OEPROP¶. Do compute one electron properties?. Type: boolean; Default: false. OPT_METHOD¶. The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER¶. The algorithm will be used for solving the orbital-response equations. The LINEQ option c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__occ-1.html:4675,optimiz,optimized-,4675,psi4manual/1.3.2/autodir_options_c/module__occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__occ-1.html,2,['optimiz'],['optimized-']
Performance,"GFM?. Type: boolean; Default: true. REMP_A (DFOCC)¶DFOCC — mixing parameter for the REMP hybrid perturbation theory, A specifies the Moller-Plesset fraction. Type: double; Default: 0.15e0. REMP_A (OCC)¶OCC — mixing parameter for the REMP hybrid perturbation theory, A specifies the Moller-Plesset fraction. Type: double; Default: 0.15e0. REPL_OTF (DETCI)¶DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCT)¶DCT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY)¶CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA)¶CCLAMBDA — Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE)¶CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI)¶DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM)¶CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS)¶GLOBALS — An array giving the number of restricted doubly-occupied orbita",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:210475,optimiz,optimizations,210475,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,4,['optimiz'],['optimizations']
Performance,"GGA Exchange-Correlation Functional. sogga; SOGGA Exchange + PBE Correlation Functional. sogga11; SOGGA11 Exchange-Correlation Functional. sogga11-x; SOGGA11-X Hybrid Exchange-Correlation Functional. sogga11-x-d3bj;  . svwn; SVWN3 (RPA) LSDA Functional. teter93; TETER93 Exchange-Correlation Functional. th-fc; TH-FC GGA Exchange-Correlation Functional. th-fcfo; TH-FCFO GGA Exchange-Correlation Functional. th-fco; TH-FCO GGA Exchange-Correlation Functional. th-fl; TH-FL GGA Exchange-Correlation Functional. th1; TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. tpss-d3bj;  . tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj;  . tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d;  . wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). wpbe-d3bj;  . wpbe-d3mbj;  . wpbe0; PBE0 SR-XC Functional (HJS Model). x1b95; X1B95 Hyb-GGA Exchange-Correlation Functional. x3lyp; X3LYP Hyb-GGA Exchange-Correlation Functional. x3lyp-d3bj;  . xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj;  . zlp; ZLP GGA Exchange-Correlation Functional. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Appendices; DFT Functionals. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_dft_energy-1.html:10250,tune,tuned-cam-,10250,psi4manual/1.2.1/autodoc_dft_energy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_dft_energy-1.html,4,"['TUNE', 'tune']","['TUNED-CAM-', 'tuned-cam-']"
Performance,"GORITHM = SIMULTANEOUS, currently the default).; In this algorithm the DCFT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique.; 2) Two-step algorithm (can be invoked by setting the ALGORITHM option to; TWOSTEP). In the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods.; 3) Quadratically-convergent algorithm (set ALGORITHM to QC). The; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/dcft-1.html:8531,perform,performing,8531,psi4manual/1.0.0/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/dcft-1.html,2,['perform'],['performing']
Performance,"GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DCT). (DETCI). opdm() (psi4.core.CIWavefunction method). OPDM_ONLY (CCDENSITY). OPDM_RELAX (CCDENSITY). (DFMP2). open() (psi4.core.IO method). open_check() (psi4.core.IO method). operate() (psi4.core.SymmetryOperation method). opt(). . see optimize(). opt() (in module psi4.driver). OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_RESTART (OPTKING). OPT_TYPE (OPTKING). OPTIMIZATION ITERATIONS. OptimizationConvergenceError. optimize(). ; setting keywords. optimize() (in module psi4.driver). optimize_geometric() (in module psi4.driver). option_exists_in_module() (in module psi4.core). Options (class in psi4.core). options() (psi4.core.Wavefunction method). options_to_python() (in module psi4.core). OptionsState (class in psi4.driver.p4util). OptionsStateCM() (in module psi4.driver.p4util). OptionState (class in psi4.driver.p4util). ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCT). orbital_values() (psi4.core.PointFunctions method). ORBITALS_WRITE (SCF). OrbitalSpace (class in psi4.core). order() (psi4.core.CharacterTable method). (psi4.core.PointGroup method). ordered_params (psi4.driver.EmpiricalDispersion attribute). (psi4.driver.procrouting.empirical_dispersion.EmpiricalDispersion attribute). OREMP. ; setting keywords. OREMP2 CORRELATION ENERGY. OREMP2 DOUBLES ENERGY. OREMP2 OPPOSITE-SPIN CORRELATION ENERGY. OREMP2 REFERENCE CORRECTION ENERGY. OREMP2 SAME-SPIN CORRELATION ENERGY. OREMP2 SINGLES ENERGY. OREMP2 TOTAL ENERGY. orientation() (psi4.core.MolecularGrid method). orientation_fixed() (psi4.core.Molecule method). origin (psi4.core.OneBodyAOInt attribute). original_coef() (psi4.core.GaussianShell method). ORTH_TYPE (DFOCC). (OCC). OS_SCALE (OCC). outfile_name() (in module psi4.core). output. ; cbs(). database().",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/genindex.html:88081,Optimiz,Optimized,88081,psi4manual/master/genindex.html,https://psicode.org,https://psicode.org/psi4manual/master/genindex.html,2,['Optimiz'],['Optimized']
Performance,"GUESS (PSIMRCC); PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY); CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2); DFMP2 — OS Scale. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (DFOCC); DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (OCC); OCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SCALE_OS (FNOCC); FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0/3.0. MP2_SOS_SCALE (DFOCC); DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC); OCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC); DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC); OCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY); CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (DFMP2); DFMP2 — SS Scale. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (DFOCC); DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUES",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:164709,optimiz,optimized-,164709,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimized-']
Performance,"GUESS (PSIMRCC); PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY); CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2); DFMP2 — OS Scale. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (DFOCC); DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (OCC); OCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SCALE_OS (FNOCC); FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0/3.0. MP2_SOS_SCALE (DFOCC); DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC); OCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC); DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC); OCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY); CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (DFMP2); DFMP2 — SS Scale. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (DFOCC); DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SS_SCALE (OCC); OCC — MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_TYPE (GLOBALS); GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS); GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI); DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn seri",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:164381,optimiz,optimized-,164381,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,4,['optimiz'],['optimized-']
Performance,"G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. INTCOS_GENERATE_EXIT¶. Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. Optimizing Minima¶; First, define the molecule and basis in the input.; 1; 2; 3; 4; 5; 6; 7molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; 1optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; 1; 2set step_type nr; optimize('scf'). Optimize using energy points instead of gradients:; 1optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; 1; 2set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:; 1; 2; 3; 4; 5; 6; 7set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:; 1; 2set full_hess_every 1; optimize('scf'). Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be se",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/optking-1.html:4208,Optimiz,Optimize,4208,psi4manual/1.2.1/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/optking-1.html,4,['Optimiz'],['Optimize']
Performance,"Gn theory; Supported methods; Basic FNOCC Keywords; Advanced FNOCC Keywords. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Convergence Problems; Methods; Basic OCC Keywords; Advanced OCC Keywords; Basic DFOCC Keywords; Advanced DFOCC Keywords; Conventional (Non-OO) Coupled-Cluster and Møller–Plesset Perturbation Theories. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. CI: Configuration Interaction; Basic DETCI Keywords; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. SAPT: Symmetry-Adapted Perturbation Theory; The S2 approximation and scaling; A First Example; Advanced example; SAPT0; Higher-Order SAPT; MP2 Natural Orbitals; Charge-Transfer in SAPT; Monomer-Centered Basis Computations; Computations with Mid-bonds; Interpreting SAPT Results; Spin-Flip SAPT. F/I-SAPT: Functional Group and/or Intramolecular SAPT; F-SAPT: A Representative Example; Order-1 Visualization with PyMol; Difference F-SAPT Analysis; I-SAPT: A Representative Example; Cube File Visualization with PyMol; F/I-SAPT Keywords; Additional Notes. ADC: Ab Initio Polarization Propagator; Partial Renormalization Scheme; Using the ADC(2) code; Theory. Scalar relativistic Hamiltonians; A First Example; Basis sets options; Theory. Geometry Optimization; Basic Keywords; Optimizing Minima; Hessian; Transition States, Reaction Paths, and Constrained Optimizations; Dealing with problematic optimizations; Direct manipulation of the optmization coordinates; Convergence Criteria; Output. Evaluation of One-Electron Properties — oeprop(); Basic Keywords; Properties evaluated on a grid. Vibrational and Thermochemical Analysis; Keywords; Examples; Output. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/methods-1.html:3204,Optimiz,Optimization,3204,psi4manual/1.3.2/methods-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/methods-1.html,8,"['Optimiz', 'optimiz']","['Optimization', 'Optimizations', 'Optimizing', 'optimizations']"
Performance,"H 2.36243 0.42333 -1.57636; H 3.36962 1.51414 0.43813; H 1.81251 1.38060 1.28140; H 2.14344 2.92967 -1.33843; H 3.47320 4.02400 0.48819; H 2.03535 3.99216 1.53635; H 2.02481 4.96785 0.07455; symmetry c1; no_reorient; no_com; }. # => Standard Options <= #. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; fisapt_do_plot true # For extra analysis; }. energy('fisapt0'). This is essentially the same input as for F-SAPT, except that the molecular; system is now divided into three moieties – subsystems A and B whose; intramolecular interaction we wish to compute, and a linking unit C. This file; runs a DF-HF computation on the full system using PSI4‘s existing SCF code.; At the start of the FISAPT code, the occupied orbitals are localized and divided; by charge considerations into A, B, C, and link sets. By default, linking sigma; bonds are assigned to C (this can be changed by the FISAPT_LINK_ASSIGNMENT; options). Then, non-interacting Hartree–Fock solutions for A and B are optimized; in the embedding field of the linking moiety C. At this point, A and B are not; interacting with each other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SAPT is performed – F and I are; completely direct-product-separable considerations. Cube File Visualization with PyMol¶; Setting FISAPT_DO_PLOT true above generates a set of .cube files; containing the densities and ESPs of the various subsystems in the I-SAPT; embedding procedure. These can be used to gain a detailed understanding of the; intermolecular partition and the polarization between non-interacting and; Hartree–Fock-interacting moieties. We have developed a set of template; .pymol scripts to help with this process. These can be obtained by running:; 1>>> copy_pymol2.py. and then in PyMol:; 1>>> @run.pymol.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/fisapt-1.html:10535,optimiz,optimized,10535,psi4manual/1.1.0/fisapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/fisapt-1.html,2,['optimiz'],['optimized']
Performance,"H 2.36243 0.42333 -1.57636; H 3.36962 1.51414 0.43813; H 1.81251 1.38060 1.28140; H 2.14344 2.92967 -1.33843; H 3.47320 4.02400 0.48819; H 2.03535 3.99216 1.53635; H 2.02481 4.96785 0.07455; symmetry c1; no_reorient; no_com; }. # => Standard Options <= #. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; fisapt_do_plot true # For extra analysis; }. energy('fisapt0'). This is essentially the same input as for F-SAPT, except that the molecular; system is now divided into three moieties – subsystems A and B whose; intramolecular interaction we wish to compute, and a linking unit C. This file; runs a DF-HF computation on the full system using PSI4‘s existing SCF code.; At the start of the FISAPT code, the occupied orbitals are localized and divided; by charge considerations into A, B, C, and link sets. By default, linking sigma; bonds are assigned to C (this can be changed by the FISAPT_LINK_ASSIGNMENT; options). Then, non-interacting Hartree–Fock solutions for A and B are optimized; in the embedding field of the linking moiety C. At this point, A and B are not; interacting with each other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SAPT is performed – F and I are; completely direct-product-separable considerations. Cube File Visualization with PyMol¶; Setting FISAPT_DO_PLOT true above generates a set of .cube files; containing the densities and ESPs of the various subsystems in the I-SAPT; embedding procedure. These can be used to gain a detailed understanding of the; intermolecular partition and the polarization between non-interacting and; Hartree–Fock-interacting moieties. We have developed a set of template; .pymol scripts to help with this process. These can be obtained by running:; >>> copy_pymol2.py. and then in PyMol:; >>> @run.pymol. T",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/fisapt.html:10761,optimiz,optimized,10761,psi4manual/master/fisapt.html,https://psicode.org,https://psicode.org/psi4manual/master/fisapt.html,9,['optimiz'],['optimized']
Performance,"H 2.36243 0.42333 -1.57636; H 3.36962 1.51414 0.43813; H 1.81251 1.38060 1.28140; H 2.14344 2.92967 -1.33843; H 3.47320 4.02400 0.48819; H 2.03535 3.99216 1.53635; H 2.02481 4.96785 0.07455; symmetry c1; no_reorient; no_com; }. # => Standard Options <= #. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; fisapt_do_plot true # For extra analysis; }. energy('fisapt0'). This is essentially the same input as for F-SAPT, except that the molecular; system is now divided into three moieties – subsystems A and B whose; intramolecular interaction we wish to compute, and a linking unit C. This file; runs a DF-HF computation on the full system using PSI4’s existing SCF code.; At the start of the FISAPT code, the occupied orbitals are localized and divided; by charge considerations into A, B, C, and link sets. By default, linking sigma; bonds are assigned to C (this can be changed by the FISAPT_LINK_ASSIGNMENT; options). Then, non-interacting Hartree–Fock solutions for A and B are optimized; in the embedding field of the linking moiety C. At this point, A and B are not; interacting with each other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SAPT is performed – F and I are; completely direct-product-separable considerations. Cube File Visualization with PyMol¶; Setting FISAPT_DO_PLOT true above generates a set of .cube files; containing the densities and ESPs of the various subsystems in the I-SAPT; embedding procedure. These can be used to gain a detailed understanding of the; intermolecular partition and the polarization between non-interacting and; Hartree–Fock-interacting moieties. We have developed a set of template; .pymol scripts to help with this process. These can be obtained by running:; 1>>> copy_pymol2.py. and then in PyMol:; 1>>> @run.pymol.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/fisapt-1.html:10904,optimiz,optimized,10904,psi4manual/1.2.1/fisapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/fisapt-1.html,4,['optimiz'],['optimized']
Performance,"H module, [1]. I. ICORE (DETCI). IGNORE_TAU (DCFT). import_ignorecase() in module procutil. IncompleteAtomError. inertia_tensor() LibmintsMolecule method. init_with_checkpoint() LibmintsMolecule method. init_with_io() LibmintsMolecule method. init_with_xyz() qcdb.libmintsmolecule.LibmintsMolecule class method. qcdb.molecule.Molecule class method. input module. installing. INTCO_FIXED_EQ_FORCE_CONSTANT (OPTKING). INTCOS_GENERATE_EXIT (OPTKING). INTERFRAG_DIST_INV (OPTKING). INTERFRAG_HESS (OPTKING). INTERFRAG_MODE (OPTKING). INTERFRAG_STEP_LIMIT (OPTKING). INTERFRAGMENT_CONNECT (OPTKING). INTERNAL_ROTATIONS (MCSCF). INTRAFRAG_HESS (OPTKING). INTRAFRAG_STEP_LIMIT (OPTKING). INTRAFRAG_STEP_LIMIT_MAX (OPTKING). INTRAFRAG_STEP_LIMIT_MIN (OPTKING). INTS_TOLERANCE (CCDENSITY). (CCSORT). (DCFT). (DFMP2). (LMP2). (MRCC). (SAPT). (SCF). (TRANSQT). (TRANSQT2). invalidate() CartesianEntry method. CoordValue method. ZMatrixEntry method. ip_fitting() in module frac. IP_POLES (OCC). IRC; . geometry optimization. IRC_DIRECTION (OPTKING). IRC_STEP_SIZE (OPTKING). IRC_STOP (OPTKING). irrep_labels() LibmintsMolecule method. is_axis() LibmintsMolecule method. is_computed() CoordEntry method. is_equivalent_to() CoordEntry method. is_ghosted() CoordEntry method. is_linear_planar() LibmintsMolecule method. is_plane() LibmintsMolecule method. is_variable() LibmintsMolecule method. ISTOP (DETCI). IVO (TRANSQT). J. J_FILE (TRANSQT). JOBTYPE (CCLAMBDA). JSCH module, [1]. K. KEEP_INTCOS (OPTKING). KEEP_J (TRANSQT). KEEP_OEIFILE (CCSORT). KEEP_PRESORT (TRANSQT). KEEP_TEIFILE (CCSORT). keywords; . C-side, setting. cbs(), setting. cp(), setting. database(), setting. diatomic_anharmonicity(), setting. energy(), setting. molecule, setting. optimize(), setting. property(), setting. kwargs_lower() in module procutil. L. label() CoordEntry method. LibmintsMolecule method. LAG_IN_FILE (TRANSQT). LAGRAN_DOUBLE (TRANSQT). LAGRAN_HALVE (TRANSQT). LAMBDA_MAXITER (DCFT). LCC2(+LMP2)TOTALENERGY. LCCSD(+LMP2)T",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/genindex.html:24339,optimiz,optimization,24339,psi4manual/4.0b4/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html,1,['optimiz'],['optimization']
Performance,"H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. scf-upcast-custom-basis; test scf castup with custom basis sets. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. mbis-4; MBIS calculation on NaCl. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cisd-sp; 6-31G** H2O Test CISD Energy Point. cbs-xtpl-dict; Extrapolated water energies. scf-level-shift-cuhf; SCF level shift on a CUHF computation. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints6; Patch of a glycine with a methyl group, to make al",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:41509,optimiz,optimization,41509,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimization']
Performance,"H2O B3LYP/6-31G* at optimized geometry. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. scf3; are specified explicitly. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dftd3-energy; Exercises the various DFT-D corrections, both through python directly and through c++. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cc52; CCSD Response for H2O2. pywrap-db2; Database calculation, run in sow/reap mode. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc12; Single point energies of multiple excited states with EOM-CCSD. cisd-sp; 6-31G** H2O Test CISD Energy Point. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. mrcc4; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). omp2_5-1; OMP2 cc-pVDZ energy for the H2O molecule. fci-dipole; 6-31G H2O Test FCI Energy Point. fnocc3; Test FNO-QCISD(T) computation. tu4-h2o-freq; Frequencies for H2O HF/cc-pVDZ at optimized geometry. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zm",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html:12921,optimiz,optimization,12921,psi4manual/4.0b4/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html,4,['optimiz'],['optimization']
Performance,"H2O B3LYP/6-31G* at optimized geometry. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. scf3; are specified explicitly. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dftd3-energy; Exercises the various DFT-D corrections, both through python directly and through c++. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cc52; CCSD Response for H2O2. pywrap-db2; Database calculation, run in sow/reap mode. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc12; Single point energies of multiple excited states with EOM-CCSD. cisd-sp; 6-31G** H2O Test CISD Energy Point. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. mrcc4; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). omp2_5-1; OMP2 cc-pVDZ energy for the H2O molecule. fci-dipole; 6-31G H2O Test FCI Energy Point. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fnocc3; Test FNO-QCISD(T) computation. tu4-h2o-freq; Frequencies for H2O HF/cc-pVDZ at optimized geometry. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. cisd-h2o+-1; 6-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_testsuite-1.html:12919,optimiz,optimization,12919,psi4manual/4.0b5/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_testsuite-1.html,4,['optimiz'],['optimization']
Performance,"H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-1; All-electron MP2 6-31G** geometry optimization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to ca",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/testsuite-1.html:27940,optimiz,optimizations,27940,psi4manual/1.0.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/testsuite-1.html,4,['optimiz'],['optimizations']
Performance,"H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. fnocc3; Test FNO-QCISD(T) computation. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. aediis-2; EDIIS test case from 10.1063/1.1470195. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft1-alt; DFT Functional Test. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). scf-level-shift-rks; SCF level shift on an RKS computation. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density function",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:25291,perform,performed,25291,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['perform'],['performed']
Performance,"H4. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf-level-shift-rohf; SCF level shift on an ROHF computation. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. cdoremp-energy1; Cholesky decomposed OO-REMP/cc-pVDZ energy for the H2O molecule. dfcasscf-sp; CASSCF/6-31G** energy point. dforemp-grad1; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O molecule. cc56; EOM-CCSD/6-31g excited state transition data for water cation. fsapt-ext-abc2; FSAPT with external charge on dimer. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt9; usapt example with empty beta. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. ao-dfcasscf-sp; CASSCF/6-31G** energ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:17370,optimiz,optimization,17370,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimization']
Performance,"HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. RGC10¶. Database (Sherrill) of interaction energies for dissociation curves of rare-gas biatomic complexes.; Geometries and reference interaction energies from Tang et al. JCP 118 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HeHe' 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton dimer. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction ener",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_available_databases.html:5893,optimiz,optimize,5893,psi4manual/1.9.x/autodoc_available_databases.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_available_databases.html,2,['optimiz'],['optimize']
Performance,"HF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/dct.html:13718,optimiz,optimize,13718,psi4manual/master/dct.html,https://psicode.org,https://psicode.org/psi4manual/master/dct.html,9,['optimiz'],['optimize']
Performance,"HF/RKS/UKS. sos-omp3; Spin-Opposite Scaled Orbital-Optimized MP3; Y; N; RHF/UHF/RKS/UKS. scsn-omp3; A special version of SCS-OMP3 for nucleobase interactions; Y; N; RHF/UHF/RKS/UKS. scs-mi-omp3; A special version of SCS-OMP3 (from S22 database); Y; N; RHF/UHF/RKS/UKS. scs-omp3-vdw; A special version of SCS-OMP3 (from ethene dimers); Y; N; RHF/UHF/RKS/UKS. sos-pi-omp3; A special version of SOS-OMP3 for -systems; Y; N; RHF/UHF/RKS/UKS. Basic Keywords¶. E_CONVERGENCE¶. Convergence criterion for energy. Type: conv double; Default: 1e-8. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Type: conv double; Default: 1e-5. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-4. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. Advanced Keywords¶. OPT_METHOD¶. The optimization algorithm. Type: string; Possible Values: MSD, DIIS; Default: MSD. DIIS_MAX_VECS¶. Number of vectors used in DIIS. Type: integer; Default: 4. LINEQ_SOLVER¶. The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. SOS_SCALE¶. Spin-opposite scaling (SOS) value for SCF orbitals. Type: double; Default: 1.3. SOS_SCALE2¶. Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OMP2_ORBS_PRINT¶. Do print OMP2 orbital energies?. Type: boolean; Default: false. OMP3_ORBS_PRINT¶. Do print OMP3 orbital energies?. Type: boolean; Default: false. TPDM_ABCD_TYPE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/ompn-1.html:6204,optimiz,optimization,6204,psi4manual/4.0b3/ompn-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/ompn-1.html,2,['optimiz'],['optimization']
Performance,HF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; —; MP_TYPE CD. olccd; Orbital-Optimized Linear CCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE CONV. Density-Fitted Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE DF. Cholesky-Decomposed Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; —; CC_TYPE CD. Spin-Component-Scaled Orbital-Optimized MP capabilities of OCC/DFOCC modules¶. name; calls method; Energy; Gradient. scs-omp3; Spin-Component Scaled Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —. sos-omp3; Spin-Opposite Scaled Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —. scs(n)-omp3; A special version of SCS-OMP3 for nucleobase interactions; RHF/UHF/ROHF/RKS/UKS; —. scs-omp3-vdw; A special version of SCS-OMP3 (from ethene dimers); RHF/UHF/ROHF/RKS/UKS; —. sos-pi-omp3; A special version of SOS-OMP3 for \(\pi\)-systems; RHF/UHF/ROHF/RKS/UKS; —. scs-omp2; Spin-Component Scaled Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —. sos-omp2; Spin-Opposite Scaled Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —. scs(n)-omp2; A special version of SCS-OMP2 for nucleobase interactions; RHF/UHF/ROHF/RKS/UKS; —. scs-omp2-vdw; A special version of SCS-OMP2 (from ethene dimers); RHF/UHF/ROHF/RKS/UKS; —. sos-pi-omp2; A special version of SOS-OMP2 for \(\pi\)-systems; RHF/UHF/ROHF/RKS/UKS; —. Basic OCC Keywords¶. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MO_MAXITER¶. Maximum number of iteratio,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/occ-1.html:11248,Optimiz,Optimized,11248,psi4manual/1.1.0/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/occ-1.html,6,['Optimiz'],['Optimized']
Performance,"HF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; —; MP_TYPE CD. olccd; Orbital-Optimized Linear CCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE CONV. Density-Fitted Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE DF. Cholesky-Decomposed Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; —; CC_TYPE CD. Spin-Component-Scaled Orbital-Optimized MP capabilities of OCC/DFOCC modules¶. name; calls method; Energy; Gradient. scs-omp3; Spin-Component Scaled Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —. sos-omp3; Spin-Opposite Scaled Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —. scs(n)-omp3; A special version of SCS-OMP3 for nucleobase interactions; RHF/UHF/ROHF/RKS/UKS; —. scs-omp3-vdw; A special version of SCS-OMP3 (from ethene dimers); RHF/UHF/ROHF/RKS/UKS; —. sos-pi-omp3; A special version of SOS-OMP3 for \(\pi\)-systems; RHF/UHF/ROHF/RKS/UKS; —. scs-omp2; Spin-Component Scaled Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —. sos-omp2; Spin-Opposite Scaled Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —. scs(n)-omp2; A special version of SCS-OMP2 for nucleobase interactions; RHF/UHF/ROHF/RKS/UKS; —. scs-omp2-vdw; A special version of SCS-OMP2 (from ethene dimers); RHF/UHF/ROHF/RKS/UKS; —. sos-pi-omp2; A special version of SOS-OMP2 for \(\pi\)-systems; RHF/UHF/ROHF/RKS/UKS; —. Basic OCC Keywords¶. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. If this keyword is not set by the user, OCC will estimate and use a value required to achieve the desired E_CONVERGENCE The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. MA",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/occ-1.html:11329,Optimiz,Optimized,11329,psi4manual/1.4.0/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/occ-1.html,5,['Optimiz'],['Optimized']
Performance,"HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'HSG0' Faver et al. JCTC 7 790 (2011).; 'HSGA' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html:7540,optimiz,optimize,7540,psi4manual/1.0.0/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html,4,['optimiz'],['optimize']
Performance,"HT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. INTCOS_GENERATE_EXIT¶. Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. Optimizing Minima¶; First, define the molecule and basis in the input.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; set step_type nr; optimize('scf'). Optimize using energy points instead of gradients:; optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:. set full_hess_every 1; optimize('scf'). Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_EVERY keyword. Transition St",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/optking-1.html:4463,Optimiz,Optimize,4463,psi4manual/1.4.0/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/optking-1.html,5,['Optimiz'],['Optimize']
Performance,"H_SINF (SAPT)¶SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-induction term. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DOI_BASIS_TOLERANCE (DLPNO)¶DLPNO (Expert) — Screening criteria for basis function values on DOI grids. Type: conv double; Default: 1.0e-10. DOI_PRUNING_SCHEME (DLPNO)¶DLPNO (Expert) — Pruning scheme for DOI grids. Type: string; Possible Values: ROBUST, TREUTLER, ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:121157,perform,perform,121157,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,1,['perform'],['perform']
Performance,"H_SINF (SAPT)¶SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-induction term. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html:119647,perform,perform,119647,psi4manual/1.7.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html,3,['perform'],['perform']
Performance,"Hamiltonians¶; Code author: Prakash Verma and Francesco A. Evangelista; Section author: Prakash Verma, Wallace D. Derricotte, and Francesco A. Evangelista; The exact-two-component (X2C) approch is a convenient way to introduce scalar; relativistic effects in DFT and wave function-based methods.; Psi4 implements the spin-free one-electron version of X2C, which produces; a modified one-electron Hamiltonian :. that is a sum of a kinetic energy () and potential energy; () operator.; Our implementation is equivalent to the one reported by Cheng and Gauss [Cheng:084114].; X2C calculations require the use of special (alternatively fully uncontracted) basis sets designed for relativistic; calculations. Common choices include the Dunning Douglass–Kroll basis sets; (cc-pVXZ-DK, cc-pCVXZ-DK, cc-pwCVXZ-DK) and Roos’ ANO basis sets. Note; See also Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess for another relativistic Hamiltonian. A First Example¶; The following is a simple input that will perform a Hartree–Fock calculation; using the X2C Hamiltonian.; molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz-decontract; relativistic x2c; }. energy('hf'). This computation yields the following result:; @RHF Final Energy: -100.10545426415609. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.7826788086396448; Two-Electron Energy = 45.5004909821901009; Total Energy = -100.1054542641560516. while a non-relativistic calculation yields the following energy:; @RHF Final Energy: -100.01041683847258. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.6714586298456027; Two-Electron Energy = 45.4843082290795309; Total Energy = -100.0104168384725796. Basis sets options¶; The X2C module in Psi4 supports different combinations of basis set.; By default, if the input file specifies only the basis keyword, then the X2C; module will solve the modified Dirac equation in an uncontracted basis and then; re",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/relativistic-1.html:1210,perform,perform,1210,psi4manual/1.0.0/relativistic-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/relativistic-1.html,2,['perform'],['perform']
Performance,"Helper method. Synch( (LibParallelHelper)arg1, (list)arg2, (int)arg3) -> list :. C++ signature :. N5boost6python4listE Synch(N3psi11LibParallel17LibParallelHelperE {lvalue},N5boost6python4listE {lvalue},i). Localizer¶. psi4.Localizer.L()¶; Python Library Documentation: property. Localized orbital coefficients. psi4.Localizer.U()¶; Python Library Documentation: property. Orbital rotation matrix. psi4.Localizer.build()¶; Python Library Documentation: built-in function build; build(...). build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :. docstring; C++ signature :. N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE). psi4.Localizer.converged()¶; Python Library Documentation: property. Did the localization procedure converge?. psi4.Localizer.localize()¶; Python Library Documentation: method localize; localize(...) unbound psi4.Localizer method. localize( (Localizer)arg1) -> None :. Perform the localization procedure; C++ signature :. void localize(N3psi9LocalizerE {lvalue}). Matrix¶. psi4.Matrix.accumulate_product()¶; Python Library Documentation: method accumulate_product; accumulate_product(...) unbound psi4.Matrix method. accumulate_product( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :. docstring; C++ signature :. void accumulate_product(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE,N5boost10shared_ptrIN3psi6MatrixEEE). psi4.Matrix.add()¶; Python Library Documentation: method add; add(...) unbound psi4.Matrix method. add( (Matrix)arg1, (Matrix)arg2) -> None :. docstring; C++ signature :. void add(N3psi6MatrixE {lvalue},N5boost10shared_ptrIN3psi6MatrixEEE). psi4.Matrix.add_and_orthogonalize_row()¶; Python Library Documentation: method add_and_orthogonalize_row; add_and_orthogonalize_row(...) unbound psi4.Matrix method. add_and_orthogonalize_row( (Matrix)arg1, (Vector)arg2) -> bool :. docstring; C++ signature :. b add_and_orthogonalize_row(N3psi6MatrixE {lvalue},N5boo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:202283,Perform,Perform,202283,psi4manual/1.0.0/autodoc_psimod-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html,2,['Perform'],['Perform']
Performance,"I4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (https://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC.; Perturbative methods (ccsd(t), ccsdtqp(h)_l, etc.); are available with REFERENCE ROHF in versions of MRCC published; at least after July 1, 2014.; When using ROHF-CCSDT(Q), MRCC will compute and report two variants:; CCSDT(Q)/A and CCSDT(Q)/B. [Kallay:2008:144101] PSI4 will save both energies but will use; the CCSDT(Q)/B as the CCSDT(Q) energy. CCSDT(Q)/B has been found to be; more robust by Martin. [Martin:2014:785]. name; calls method in Kallay’s MRCC program [manual]. mrccsd; CC through doubles. mrccsdt; CC through triples. mrccsdtq; CC through quadruples. mrccsdtqp; CC through quintuples. mrccsdtqph; CC through sextup",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/mrcc-1.html:1313,perform,perform,1313,psi4manual/1.4.0/mrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/mrcc-1.html,10,"['optimiz', 'perform']","['optimization', 'perform']"
Performance,"I4. Psithon Functions: Invoking a Calculation; Geometry Optimization — optimize() and gradient(). Geometry Optimization — optimize() and gradient()¶. Psi4 Native Gradient Methods; Psi4 Native DFT Gradient Methods (excepting double-hybrids); CFOUR Interfaced Gradient Methods. For further discussion of geometry optimization, see; Sec. Geometry Optimization.; optimize() is the only command most users will ever; need to access directly to perform geometry optimizations. Behind; the scenes, optimize() is a wrapper that repeatedly; calls gradient() that computes the gradient then adds a; call to the geometry optimization module. psi4.optimize(name[, molecule, return_wfn, func, mode, dertype, hessian_with])[source]; Function to perform a geometry optimization. Aliases; opt(). Returns; float – Total electronic energy of optimized structure in Hartrees. Returns; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises; psi4.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables. CURRENT ENERGY. Parameters. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Options passed",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/opt-1.html:1072,Optimiz,OptimizationConvergenceError,1072,psi4manual/1.4.0/opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/opt-1.html,5,['Optimiz'],['OptimizationConvergenceError']
Performance,"IAL_POINTS_FINAL and; COSX_SPHERICAL_POINTS_FINAL. Currently, the default grids are very crude,; allowing for high performance at the cost of accuracy. If high-accuracy calculations; are desired with COSX, the grid sizes should be increased.; Screening thresholds over integrals, densities, and basis extents are set; with the COSX_INTS_TOLERANCE, COSX_DENSITY_TOLERANCE, and; COSX_BASIS_TOLERANCE keywords, respectively. COSX_INTS_TOLERANCE; is the most consequential of the three thresholds in both cost and accuracy.; This keyword determines screening of negligible one-electron integrals.; COSX_DENSITY_TOLERANCE controls the threshold for significant; shell pairs in the density matrix. Lastly, COSX_BASIS_TOLERANCE is; a cutoff for the value of basis functions at grid points. This keyword is; used to determine the radial extent of the each basis shell, and it is the; COSX analogue to DFT_BASIS_TOLERANCE.; The INCFOCK keyword (defaults to false) increases performance; by constructing the Fock matrix from differences in the density matrix, which; are more amenable to screening. This option is disabled by default because of; potential SCF convergence issues, particularly when using diffuse basis functions.; The COSX_OVERLAP_FITTING keyword (defaults to true) reduces numerical; integration errors using the method described in [Izsak:2011:144105] and is; always recommended. Linear Exchange¶; Large SCF calculations can benefit from specialized screening procedures that further reduce the scaling of the ERI contribution to the Fock matrix.; LinK, the linear-scaling exchange method described in [Ochsenfeld:1998:1663], is available in Psi4 in conjunction with composite algorithms that build J (SCF_TYPE set to J_alg+LINK).; LinK achieves linear-scaling by exploiting shell pair sparsity in the density matrix and overlap sparsity between shell pairs. Specifically, LinK exploits the fact that the Exchange term; requires only a linear-scaling number of significant elements through ref",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/scf.html:38836,perform,performance,38836,psi4manual/master/scf.html,https://psicode.org,https://psicode.org/psi4manual/master/scf.html,2,['perform'],['performance']
Performance,"IGHT EIGENVECTOR ALPHA - h TRANSITION. TD-fctl ROOT 0 -> ROOT n RIGHT EIGENVECTOR BETA. TD-fctl ROOT 0 -> ROOT n RIGHT EIGENVECTOR BETA - h TRANSITION. TD-fctl ROOT 0 -> ROOT n ROTATORY STRENGTH (LEN). (LEN). (VEL), [1]. TD-fctl ROOT n (h) TOTAL ENERGY. (IN h). TD-fctl ROOT n TOTAL ENERGY. TD-fctl ROOT n TOTAL ENERGY - h TRANSITION. TDA. TDDFT. TDM (DETCI). TDSCF. theory. tdscf() (in module psi4.driver). TDSCF_COEFF_CUTOFF (SCF). TDSCF_GUESS (SCF). TDSCF_MAXITER (SCF). TDSCF_PRINT (SCF). TDSCF_R_CONVERGENCE (SCF). TDSCF_STATES (SCF). TDSCF_TDA (SCF). TDSCF_TDM_PRINT (SCF). TDSCF_TRIPLETS (SCF). TDSCFConvergenceError. TEST_B (OPTKING). TEST_DERIVATIVE_B (OPTKING). test_functional() (psi4.core.SuperFunctional method). test_matrix_dpd_interface() (in module psi4.core). TestComparisonError. The total electronic gradient [E_h/a0] of the MP2 level of theory, ({nat}, 3). theory. ; ADC. cbs(), [1], [2]. CC. CI. DCT. DF-MP2. DFT. DLPNO-MP2. FISAPT. MCSCF. OEProp. OLCCD. OMP2. OMP3. Orbital-Optimized Methods. SAPT. SCF. TDSCF. THERMAL ENERGY. THERMAL ENERGY CORRECTION. thermo() (in module psi4.driver.qcdb.vib). THETA_POINTS (SCF). THICKNESS (SCF). threading, [1]. THREE_PARTICLE (DCT). ThreeCenterOverlapInt (class in psi4.core). TIKHONOW_MAX (PSIMRCC). TIKHONOW_OMEGA (DCT). (PSIMRCC). TIKHONOW_TRIPLES (PSIMRCC). TILE_SZ (SCF). timer_off() (in module psi4.core). timer_on() (in module psi4.core). TLaplaceDenominator (class in psi4.core). to_array() (psi4.core.Matrix method). (psi4.core.Vector method). to_arrays() (psi4.core.Molecule method). to_dict() (psi4.core.Molecule method). to_file() (psi4.core.Wavefunction method). to_schema() (psi4.core.Molecule method). to_serial() (psi4.core.Matrix method). (psi4.core.Vector method). to_string() (psi4.core.Molecule method). to_tuple() (psi4.core.Dimension method). tocclean() (psi4.core.IO method). tocentry_exists() (psi4.core.IO method). tocprint() (psi4.core.IO method). tocscan() (psi4.core.IO method). tocwrite() (psi4.core.IO method).",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/genindex.html:127123,Optimiz,Optimized,127123,psi4manual/master/genindex.html,https://psicode.org,https://psicode.org/psi4manual/master/genindex.html,2,['Optimiz'],['Optimized']
Performance,"IIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. GUESS_R_CONVERGENCE¶. Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. MAXITER¶. Maximum number of macro- or micro-iterations for both energy and response equations. Type: integer; Default: 40. MOLDEN_WRITE¶. Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ODC_GUESS¶. Whether to perform a guess DC-06 or DC-12 computation for ODC-06 or ODC-12 methods, respectively. Currently only available for ALGORITHM = SIMULTANEOUS. Type: boolean; Default: false. QC_COUPLING¶. Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_TYPE¶. Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: UHF, RHF, ROHF; Default: RHF. RESPONSE_ALGORITHM¶. Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties. Type: string; Possible ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__dcft-1.html:2623,perform,perform,2623,psi4manual/1.3.2/autodir_options_c/module__dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__dcft-1.html,2,['perform'],['perform']
Performance,"IIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. GUESS_R_CONVERGENCE¶. Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. MAXITER¶. Maximum number of macro- or micro-iterations for both energy and response equations. Type: integer; Default: 40. MOLDEN_WRITE¶. Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ODC_GUESS¶. Whether to perform a guess DC-06 or DC-12 computation for ODC-06 or ODC-12 methods, respectively. Currently only available for ALGORITHM = SIMULTANEOUS. Type: boolean; Default: false. QC_COUPLING¶. Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_TYPE¶. Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: UHF, RHF, ROHF; Default: RHF. RESPONSE_ALGORITHM¶. Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Va",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__dcft-1.html:2656,perform,perform,2656,psi4manual/1.0.0/autodir_options_c/module__dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__dcft-1.html,6,['perform'],['perform']
Performance,"INF (SAPT)¶SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-dispersion term. Type: boolean; Default: false. DO_IND30_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT2+3, compute the non-approximated third-order exchange-induction term. Type: boolean; Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-induction term. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbital",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:120843,perform,perform,120843,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,8,"['optimiz', 'perform']","['optimizations', 'perform']"
Performance,"IOManager.shared_object().set_specific_path(1, './'); if 'opt_datafile' in kwargs:; restartfile = kwargs.pop('opt_datafile'); if(PsiMod.me() == 0):; shutil.copy(restartfile, get_psifile(1)). # print 'full_hess_every', full_hess_every; # print 'steps_since_last_hessian', steps_since_last_hessian; # compute Hessian as requested; frequency wipes out gradient so stash it; if ((full_hess_every > -1) and (n == 1)) or (steps_since_last_hessian + 1 == full_hess_every):; G = PsiMod.get_gradient(); PsiMod.IOManager.shared_object().set_specific_retention(1, True); PsiMod.IOManager.shared_object().set_specific_path(1, './'); frequencies(name, **kwargs); steps_since_last_hessian = 0; PsiMod.set_gradient(G); PsiMod.set_global_option('CART_HESS_READ', True); else:; PsiMod.set_global_option('CART_HESS_READ', False); steps_since_last_hessian += 1. # print 'cart_hess_read', PsiMod.get_global_option('CART_HESS_READ'); # Take step; if PsiMod.optking() == PsiMod.PsiReturnType.EndLoop:; print 'Optimizer: Optimization complete!'; PsiMod.get_active_molecule().print_in_input_format(); # Check if user wants to see the intcos; if so, don't delete them.; if (PsiMod.get_option('INTCOS_GENERATE_EXIT') == False):; PsiMod.opt_clean(); PsiMod.clean(). # S/R: Clean up opt input file; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; fmaster = open('OPT-master.in', 'w'); fmaster.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); fmaster.write('# Optimization complete!\n\n'); fmaster.close(); return thisenergy. # S/R: Preserve opt data file for next pass and switch modes to get new displacements; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; kwargs['opt_datafile'] = get_psifile(1); kwargs['mode'] = 'sow'. n += 1. PsiMod.print_out('\tOptimizer: Did not converge!'); return 0.0. ## Aliases ##; opt = optimize. [docs]def parse_arbitrary_order(name):; r""""""Function to parse name string into a method family like CI or MRCC and specific; level in",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/driver.html:38009,Optimiz,Optimizer,38009,psi4manual/4.0b2/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/driver.html,2,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,ION — PSI4 [beta2] documentation; MODULE — PSI4 [beta2] documentation; OMP_N_THREAD — PSI4 [beta2] documentation; PRINT — PSI4 [beta2] documentation; SCF_TYPE — PSI4 [beta2] documentation; SCHWARZ_CUTOFF — PSI4 [beta2] documentation; SOLVER_CONVERGENCE — PSI4 [beta2] documentation; SOLVER_EXACT_DIAGONAL — PSI4 [beta2] documentation; SOLVER_MAX_SUBSPACE — PSI4 [beta2] documentation; SOLVER_MAXITER — PSI4 [beta2] documentation; SOLVER_MIN_SUBSPACE — PSI4 [beta2] documentation; SOLVER_N_GUESS — PSI4 [beta2] documentation; SOLVER_N_ROOT — PSI4 [beta2] documentation; SOLVER_NORM — PSI4 [beta2] documentation; SOLVER_PRECONDITION — PSI4 [beta2] documentation; SOLVER_PRECONDITION_MAXITER — PSI4 [beta2] documentation; SOLVER_PRECONDITION_STEPS — PSI4 [beta2] documentation; SOLVER_QUANTITY — PSI4 [beta2] documentation; SOLVER_TYPE — PSI4 [beta2] documentation; TDHF_MEM_SAFETY_FACTOR — PSI4 [beta2] documentation; ALGORITHM — PSI4 [beta2] documentation; AO_BASIS — PSI4 [beta2] documentation; CACHELEVEL — PSI4 [beta2] documentation; DAMPING_PERCENTAGE — PSI4 [beta2] documentation; DIIS_MAX_VECS — PSI4 [beta2] documentation; DIIS_MIN_VECS — PSI4 [beta2] documentation; DIIS_START_CONVERGENCE — PSI4 [beta2] documentation; IGNORE_TAU — PSI4 [beta2] documentation; INTS_TOLERANCE — PSI4 [beta2] documentation; LAMBDA_MAXITER — PSI4 [beta2] documentation; LOCK_OCC — PSI4 [beta2] documentation; MAXITER — PSI4 [beta2] documentation; MO_RELAX — PSI4 [beta2] documentation; R_CONVERGENCE — PSI4 [beta2] documentation; RESPONSE_ALGORITHM — PSI4 [beta2] documentation; SCF_MAXITER — PSI4 [beta2] documentation; TAU_SQUARED — PSI4 [beta2] documentation; TIKHONOW_OMEGA — PSI4 [beta2] documentation; TPDM — PSI4 [beta2] documentation; A_RAS3_MAX — PSI4 [beta2] documentation; ACTIVE — PSI4 [beta2] documentation; AVG_STATES — PSI4 [beta2] documentation; AVG_WEIGHTS — PSI4 [beta2] documentation; B_RAS3_MAX — PSI4 [beta2] documentation; BENDAZZOLI — PSI4 [beta2] documentation; CC — PSI4 [beta2] documentat,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:912975,CACHE,CACHELEVEL,912975,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,ION — PSI4 [beta3] documentation; MODULE — PSI4 [beta3] documentation; OMP_N_THREAD — PSI4 [beta3] documentation; PRINT — PSI4 [beta3] documentation; SCF_TYPE — PSI4 [beta3] documentation; SCHWARZ_CUTOFF — PSI4 [beta3] documentation; SOLVER_CONVERGENCE — PSI4 [beta3] documentation; SOLVER_EXACT_DIAGONAL — PSI4 [beta3] documentation; SOLVER_MAX_SUBSPACE — PSI4 [beta3] documentation; SOLVER_MAXITER — PSI4 [beta3] documentation; SOLVER_MIN_SUBSPACE — PSI4 [beta3] documentation; SOLVER_N_GUESS — PSI4 [beta3] documentation; SOLVER_N_ROOT — PSI4 [beta3] documentation; SOLVER_NORM — PSI4 [beta3] documentation; SOLVER_PRECONDITION — PSI4 [beta3] documentation; SOLVER_PRECONDITION_MAXITER — PSI4 [beta3] documentation; SOLVER_PRECONDITION_STEPS — PSI4 [beta3] documentation; SOLVER_QUANTITY — PSI4 [beta3] documentation; SOLVER_TYPE — PSI4 [beta3] documentation; TDHF_MEM_SAFETY_FACTOR — PSI4 [beta3] documentation; ALGORITHM — PSI4 [beta3] documentation; AO_BASIS — PSI4 [beta3] documentation; CACHELEVEL — PSI4 [beta3] documentation; DAMPING_PERCENTAGE — PSI4 [beta3] documentation; DCFT_GUESS — PSI4 [beta3] documentation; DIIS_MAX_VECS — PSI4 [beta3] documentation; DIIS_MIN_VECS — PSI4 [beta3] documentation; DIIS_START_CONVERGENCE — PSI4 [beta3] documentation; IGNORE_TAU — PSI4 [beta3] documentation; INTS_TOLERANCE — PSI4 [beta3] documentation; LAMBDA_MAXITER — PSI4 [beta3] documentation; LOCK_OCC — PSI4 [beta3] documentation; MAXITER — PSI4 [beta3] documentation; MO_RELAX — PSI4 [beta3] documentation; QC_COUPLING — PSI4 [beta3] documentation; R_CONVERGENCE — PSI4 [beta3] documentation; RELAX_GUESS_ORBITALS — PSI4 [beta3] documentation; RELAX_TAU — PSI4 [beta3] documentation; RESPONSE_ALGORITHM — PSI4 [beta3] documentation; SCF_MAXITER — PSI4 [beta3] documentation; STABILITY_ADD_VECTORS — PSI4 [beta3] documentation; STABILITY_AUGMENT_SPACE_TOL — PSI4 [beta3] documentation; STABILITY_CHECK — PSI4 [beta3] documentation; STABILITY_CONVERGENCE — PSI4 [beta3] documentation; STABILITY_M,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1122933,CACHE,CACHELEVEL,1122933,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,ION — PSI4 [beta4] documentation; MODULE — PSI4 [beta4] documentation; OMP_N_THREAD — PSI4 [beta4] documentation; PRINT — PSI4 [beta4] documentation; SCF_TYPE — PSI4 [beta4] documentation; SCHWARZ_CUTOFF — PSI4 [beta4] documentation; SOLVER_CONVERGENCE — PSI4 [beta4] documentation; SOLVER_EXACT_DIAGONAL — PSI4 [beta4] documentation; SOLVER_MAX_SUBSPACE — PSI4 [beta4] documentation; SOLVER_MAXITER — PSI4 [beta4] documentation; SOLVER_MIN_SUBSPACE — PSI4 [beta4] documentation; SOLVER_N_GUESS — PSI4 [beta4] documentation; SOLVER_N_ROOT — PSI4 [beta4] documentation; SOLVER_NORM — PSI4 [beta4] documentation; SOLVER_PRECONDITION — PSI4 [beta4] documentation; SOLVER_PRECONDITION_MAXITER — PSI4 [beta4] documentation; SOLVER_PRECONDITION_STEPS — PSI4 [beta4] documentation; SOLVER_QUANTITY — PSI4 [beta4] documentation; SOLVER_TYPE — PSI4 [beta4] documentation; TDHF_MEM_SAFETY_FACTOR — PSI4 [beta4] documentation; ALGORITHM — PSI4 [beta4] documentation; AO_BASIS — PSI4 [beta4] documentation; CACHELEVEL — PSI4 [beta4] documentation; DAMPING_PERCENTAGE — PSI4 [beta4] documentation; DCFT_FUNCTIONAL — PSI4 [beta4] documentation; DCFT_GUESS — PSI4 [beta4] documentation; DIIS_MAX_VECS — PSI4 [beta4] documentation; DIIS_MIN_VECS — PSI4 [beta4] documentation; DIIS_START_CONVERGENCE — PSI4 [beta4] documentation; IGNORE_TAU — PSI4 [beta4] documentation; INTS_TOLERANCE — PSI4 [beta4] documentation; LAMBDA_MAXITER — PSI4 [beta4] documentation; LOCK_OCC — PSI4 [beta4] documentation; MAXITER — PSI4 [beta4] documentation; MO_RELAX — PSI4 [beta4] documentation; QC_COUPLING — PSI4 [beta4] documentation; R_CONVERGENCE — PSI4 [beta4] documentation; REFERENCE — PSI4 [beta4] documentation; RELAX_GUESS_ORBITALS — PSI4 [beta4] documentation; RELAX_TAU — PSI4 [beta4] documentation; RESPONSE_ALGORITHM — PSI4 [beta4] documentation; SCF_MAXITER — PSI4 [beta4] documentation; STABILITY_ADD_VECTORS — PSI4 [beta4] documentation; STABILITY_AUGMENT_SPACE_TOL — PSI4 [beta4] documentation; STABILITY_CHECK — PSI4 ,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1333525,CACHE,CACHELEVEL,1333525,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,"IONENERGY. OMP3TOTALENERGY. OMP_N_THREAD (CPHF). OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8]. ONE-ELECTRONENERGY. one_electron_integrals() psi4.core.MintsHelper method, [1], [2]. OneBodyAOInt class in psi4.core, [1]. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DETCI). opdm() psi4.core.CIWavefunction method, [1], [2]. OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method, [1], [2]. open_check() psi4.core.IO method, [1], [2]. operate() psi4.core.SymmetryOperation method, [1], [2]. opt(). . see optimize(). opt() in module psi4.driver. opt_clean() in module psi4.core, [1]. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_TYPE (OPTKING). optimize(). ; setting keywords. optimize() in module psi4. in module psi4.driver. optking() in module psi4.core, [1]. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCFT). OrbitalSpace class in psi4.core, [1]. origin psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute, [1]. psi4.core.ElectrostaticInt attribute, [1]. psi4.core.KineticInt attribute, [1]. psi4.core.MultipoleInt attribute, [1]. psi4.core.NablaInt attribute, [1]. psi4.core.OneBodyAOInt attribute, [1], [2]. psi4.core.OverlapInt attribute, [1]. psi4.core.PotentialInt attribute, [1]. psi4.core.PseudospectralInt attribute, [1]. psi4.core.QuadrupoleInt attribute, [1]. psi4.core.TracelessQuadrupoleInt attribute, [1]. original_coef() psi4.core.GaussianShell method, [1], [2]. ORTH_TYPE (DFOCC). (OCC). outfile_name() in module psi4.core, [1]. output. ; SAPT. cbs(). database(). geometry optimization. vibrational analysis. overlap_3c() psi4.core.IntegralF",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/genindex-1.html:71906,Optimiz,Optimized,71906,psi4manual/1.1.0/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/genindex-1.html,2,['Optimiz'],['Optimized']
Performance,"IONENERGY. OMP3TOTALENERGY. OMP_N_THREAD (CPHF). OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8]. ONE-ELECTRONENERGY. one_electron_integrals() psi4.core.MintsHelper method, [1], [2]. OneBodyAOInt class in psi4.core, [1]. onel_Hx() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DETCI). opdm() psi4.core.CIWavefunction method, [1], [2]. OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method, [1], [2]. open_check() psi4.core.IO method, [1], [2]. operate() psi4.core.SymmetryOperation method, [1], [2]. opt(). . see optimize(). opt() in module psi4.driver. opt_clean() in module psi4.core, [1]. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_TYPE (OPTKING). OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4. in module psi4.driver. option_exists_in_module() in module psi4.core, [1]. Options class in psi4.core, [1]. optking() in module psi4.core, [1]. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCFT). orbital_values() psi4.core.PointFunctions method, [1], [2]. psi4.core.RKSFunctions method, [1]. psi4.core.UKSFunctions method, [1]. OrbitalSpace class in psi4.core, [1]. orientation() psi4.core.DFTGrid method, [1]. psi4.core.MolecularGrid method, [1], [2]. orientation_fixed() psi4.core.Molecule method, [1], [2]. origin psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute, [1]. psi4.core.ElectrostaticInt attribute, [1]. psi4.core.KineticInt attribute, [1]. psi4.core.MultipoleIn",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/genindex-1.html:87849,optimiz,optimize,87849,psi4manual/1.2.1/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/genindex-1.html,2,['optimiz'],['optimize']
Performance,"IS (SCF). STABILITY_AUGMENT_SPACE_TOL (DCFT). STABILITY_CHECK (DCFT). STABILITY_CONVERGENCE (DCFT). STABILITY_MAX_SPACE_SIZE (DCFT). STABILITY_N_EIGENVALUES (DCFT). STABILITY_N_GUESS_VECTORS (DCFT). STEP_TYPE (OPTKING). sub() in module qcdb.vecutil. success() in module util. superfunctional_list() in module functional. sym_label() LibmintsMolecule method. symbol() CoordEntry method. LibmintsMolecule method. symmetrize() LibmintsMolecule method. symmetry. molecule. symmetry_frame() LibmintsMolecule method. symmetry_from_input() LibmintsMolecule method. T. T (THERMO). T2_COUPLED (CCENERGY). T3_WS_INCORE (CCENERGY). (CCEOM). T_AMPS (CCHBAR). Table class in text. TAU_SQUARED (DCFT). tblhead() in module wrappers. TDHF_MEM_SAFETY_FACTOR (CPHF). TDM (DETCI). TDM_PRINT (DETCI). TDM_WRITE (DETCI). TEST_B (OPTKING). test_ccl_functional() in module functional. TEST_DERIVATIVE_B (OPTKING). text module. theory; . ADC. CC. CEPA. CI. Coupled-Pair Methods. DF-MP2. DFT. OEProp. OMP2. OMP3. Orbital-Optimized Methods. SAPT. SCF. cbs(), [1]. THETA_POINTS (SCF). THICKNESS (SCF). threading. TIKHONOW_MAX (PSIMRCC). TIKHONOW_OMEGA (DCFT). (PSIMRCC). TIKHONOW_TRIPLES (PSIMRCC). TILE_SZ (SCF). TPDM (DCFT). (DETCI). TPDM_ABCD_TYPE (OMP3). TPDM_ADD_REF (TRANSQT). TPDM_FILE (TRANSQT). TPDM_PRINT (DETCI). transition state; . geometry optimization. translate() LibmintsMolecule method. transpose() in module qcdb.vecutil. TRIPLES_ALGORITHM (PSIMRCC). TRIPLES_DIIS (PSIMRCC). TURN_ON_ACTV (MCSCF). TWO-ELECTRONENERGY. type() CartesianEntry method. NumberValue method. VariableValue method. ZMatrixEntry method. U. UNCP-CORRECTED2-BODYINTERACTIONENERGY. unique() LibmintsMolecule method. units; . molecule. UNITS (GLOBALS). units() LibmintsMolecule method. UPDATE (DETCI). update_geometry() LibmintsMolecule method. USE_SPIN_SYM (PSIMRCC). USE_SPIN_SYMMETRY (PSIMRCC). useful() in module qcdb.dbproc. util module. V. VAL_EX_LEVEL (DETCI). valid_atom_map() LibmintsMolecule method. validate_bracketed_basis() in m",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/genindex.html:42094,Optimiz,Optimized,42094,psi4manual/4.0b3/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html,1,['Optimiz'],['Optimized']
Performance,"IS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2¶. This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3¶. This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4¶. This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV¶. Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC¶. Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP¶. Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD¶. Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:29696,optimiz,optimizations,29696,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,4,['optimiz'],"['optimizations', 'optimizer']"
Performance,"ITE (FINDIF); FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to SAD for RHF, GWH for ROHF and UHF, and READ for geometry optimizations after the first step. Type: string; Possible Values: AUTO, CORE, GWH, SAD, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI); DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:135391,optimiz,optimized,135391,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,6,['optimiz'],['optimized']
Performance,"ITE (SCF). OrbitalSpace class in psi4.core. order() psi4.core.CharacterTable method. psi4.core.PointGroup method. ordered_params psi4.driver.EmpiricalDispersion attribute. psi4.driver.procrouting.empirical_dispersion.EmpiricalDispersion attribute. orientation() psi4.core.DFTGrid method. psi4.core.MolecularGrid method. orientation_fixed() psi4.core.Molecule method. origin psi4.core.AngularMomentumInt attribute. psi4.core.DipoleInt attribute. psi4.core.ElectricFieldInt attribute. psi4.core.ElectrostaticInt attribute. psi4.core.KineticInt attribute. psi4.core.MultipoleInt attribute. psi4.core.NablaInt attribute. psi4.core.OneBodyAOInt attribute. psi4.core.OverlapInt attribute. psi4.core.PotentialInt attribute. psi4.core.PseudospectralInt attribute. psi4.core.QuadrupoleInt attribute. psi4.core.TracelessQuadrupoleInt attribute. original_coef() psi4.core.GaussianShell method. ORTH_TYPE (DFOCC). (OCC). OS_SCALE (OCC). outfile_name() in module psi4.core. output. ; cbs(). database(). geometry optimization. SAPT. vibrational analysis. overlap() psi4.core.FISAPT method. overlap_3c() psi4.core.IntegralFactory method. OVERLAP_CHECK (CCEOM). overlap_grad() psi4.core.MintsHelper method. OverlapInt class in psi4.core. P. p psi4.core.AOShellCombinationsIterator attribute. P (THERMO). PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. PARENT_SYMMETRY (GLOBALS). ParsingError. partial_cholesky_factorize() psi4.core.Matrix method. partition() psi4.core.FISAPT method. PastureRequiredError. PATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32]. PBS queueing system. PCG_BETA_TYPE (DFOCC). (OCC). PCG_CONVERGENCE (DFOCC). (OCC). PCG_MAXITER (DFOCC). (OCC). PCM. Using PCM. PCM (GLOBALS). PCM POLARIZATION ENERGY. PCM_CC_TYPE (PCM). PCM_enabled() psi4.core.CCWavefunction method. psi4.core.CIWavefunction method. psi4.core.CUHF method. psi4.core.DFE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/genindex-1.html:101662,optimiz,optimization,101662,psi4manual/1.4.0/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/genindex-1.html,4,['optimiz'],['optimization']
Performance,"ITER_FILE_LABEL'],; ['SCF', 'REFERENCE']). # Wrapper wholly defines molecule. discard any passed-in; kwargs.pop('molecule', None). # Paths to search for database files: here + PSIPATH + library + PYTHONPATH; psidatadir = os.environ.get('PSIDATADIR', None); psidatadir = __file__ + '/../..' if psidatadir is None else psidatadir; libraryPath = ':' + os.path.abspath(psidatadir) + '/databases'; dbPath = os.path.abspath('.') + \; ':' + ':'.join([os.path.abspath(x) for x in os.environ.get('PSIPATH', '').split(':')]) + \; libraryPath; sys.path = [sys.path[0]] + dbPath.split(':') + sys.path[1:]; # TODO this should be modernized a la interface_cfour. # Define path and load module for requested database; database = p4util.import_ignorecase(db_name); if database is None:; psi4.print_out('\nPython module for database %s failed to load\n\n' % (db_name)); psi4.print_out('\nSearch path that was tried:\n'); psi4.print_out("", "".join(map(str, sys.path))); raise ValidationError(""Python module loading problem for database "" + str(db_name)); else:; dbse = database.dbse; HRXN = database.HRXN; ACTV = database.ACTV; RXNM = database.RXNM; BIND = database.BIND; TAGL = database.TAGL; GEOS = database.GEOS; try:; DATA = database.DATA; except AttributeError:; DATA = {}. user_writer_file_label = psi4.get_global_option('WRITER_FILE_LABEL'); user_reference = psi4.get_global_option('REFERENCE'). # Configuration based upon e_name & db_name options; # Force non-supramolecular if needed; if not hasattr(lowername, '__call__') and re.match(r'^.*sapt', lowername):; try:; database.ACTV_SA; except AttributeError:; raise ValidationError('Database %s not suitable for non-supramolecular calculation.' % (db_name)); else:; ACTV = database.ACTV_SA; # Force open-shell if needed; openshell_override = 0; if user_reference in ['RHF', 'RKS']:; try:; database.isOS; except AttributeError:; pass; else:; if yes.match(str(database.isOS)):; openshell_override = 1; psi4.print_out('\nSome reagents in database %s require an open",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html:9872,load,loading,9872,psi4manual/1.0.0/_modules/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html,1,['load'],['loading']
Performance,"ITER¶. Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CC_NUM_THREADS¶. Number of threads. Type: integer; Default: 1. CC_OS_SCALE¶. Coupled-cluster opposite-spin scaling value. Type: double; Default: 1.27. CC_SS_SCALE¶. Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. DIIS¶. Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. LOCAL¶. Do simulate the effects of local correlation techniques?. Type: boolean; Default: false. LOCAL_CPHF_CUTOFF¶. Cutoff value for local-coupled-perturbed-Hartree-Fock. Type: double; Default: 0.10. LOCAL_CUTOFF¶. Value (always between one and ze",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__ccenergy-1.html:1416,cache,cache,1416,psi4manual/1.1.0/autodir_options_c/module__ccenergy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__ccenergy-1.html,6,['cache'],['cache']
Performance,"IT_VECS (DETCI). NUM_ROOTS (DETCI). NUM_VECS_PRINT (STABILITY). NUM_VECS_WRITE (DETCI). NumberValue class in qcdb.libmintscoordentry. nunique() LibmintsMolecule method. O. OCC_TOLERANCE (SAPT). OEI_A_FILE (TRANSQT). OEI_B_FILE (TRANSQT). OEI_FILE (TRANSQT). OEProp. theory. oeprop() in module util. OFFDIAGONAL_CCSD_T (PSIMRCC). OMEGA (CCRESPONSE). (CCSORT). (RESPONSE). OMEGA_ERF (MINTS). OMP2; . setting keywords. theory. OMP2_ORBS_PRINT (OMP2). OMP3; . setting keywords. theory. OMP3_ORBS_PRINT (OMP3). OMP_N_THREAD (CPHF). OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4]. ONE-ELECTRONENERGY. ONEPDM (CCDENSITY). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OPDM (DETCI). (MP2). OPDM_AVG (DETCI). OPDM_IN_FILE (TRANSQT). OPDM_KE (DETCI). OPDM_OUT_FILE (TRANSQT). OPDM_PRINT (DETCI). OPDM_RELAX (CCDENSITY). (MP2). opt(); . see optimize(); . OPT_METHOD (OMP2). (OMP3). OPT_TYPE (OPTKING). optimization; . see geometry optimization; . optimize(); . setting keywords. optimize() in module driver. OptionsState class in optproc. OptionState class in optproc. optproc module. Orbital-Optimized Methods; . theory. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP3. orientation_fixed() LibmintsMolecule method. ORTH_TYPE (OMP2). (OMP3). output; . SAPT. cbs(). database(). geometry optimization. P. P (THERMO). PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parse_arbitrary_order() in module driver. parse_cotton_irreps() in module driver. parse_multiline_array() in module input. PATH, [1], [2], [3]. PEP1. perp_unit() in module qcdb.vecutil. PERTURB_CBS (PSIMRCC). PERTURB_CBS_COUPLING (PSIMRCC). PERTURB_H (SCF). PERTURB_MAGNITUDE (DETCI). (SCF). PERTURB_WITH (SCF). PHI_POINTS (SCF). physconst module. physical constants. PITZER (TRANSQT). point_group() LibmintsMolecule method. POINTS (FINDIF). POLE_MAXITER (ADC). populateExtern() Diffuse method. QMMM method. PR (ADC). PRECONDITIONER",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/genindex.html:30031,optimiz,optimization,30031,psi4manual/4.0b3/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html,1,['optimiz'],['optimization']
Performance,"IUS (GDMA); GDMA — The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, ... ] where n1,n2,n3... are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH (GDMA); GDMA — The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING); OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF); FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to SAD for RHF, GWH for ROHF and UHF, and READ for geometry optimizations after the first step. Type: string; Possible Values: AUTO, CORE, GWH, SAD, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BL",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:134717,optimiz,optimizations,134717,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,4,['optimiz'],['optimizations']
Performance,"If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOM_OCC (SCF); SCF — The absolute indices of orbitals to excite from in MOM (+/- for alpha/beta). Type: array; Default: No Default. MOM_START (SCF); SCF — The iteration to start MOM on (or 0 for no MOM). Type: integer; Default: 0. MOM_VIR (SCF); SCF — The absolute indices of orbitals to excite to in MOM (+/- for alpha/beta). Type: array; Default: No Default. MP2_AMP_TYPE (DFOCC); DFOCC — The algorithm that used to handle mp2 amplitudes. The DIRECT option means compute amplitudes on the fly * whenever they are necessary. Type: string; Possible Values: DIRECT, CONV; Default: DIRECT. MP2_AMPS_PRINT (CCENERGY); CCENERGY — Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. MP2_CCSD_METHOD (PSIMRCC); PSIMRCC — How to perform MP2_CCSD computations. Type: string; Possible Values: I, IA, II; Default: II. MP2_GUESS (PSIMRCC); PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY); CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2); DFMP2 — OS Scale. Type: double; Default: 6.0. MP2_OS_SCALE (DFOCC); DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0. MP2_OS_SCALE (OCC); OCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0. MP2_SCALE_OS (FNOCC); FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. MP2_SOS_SCALE (DFOCC); DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC); OCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC); DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:165349,perform,perform,165349,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,2,['perform'],['perform']
Performance,"In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations.; If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm.; When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the QC_COUPLING option to FALSE for efficiency; reasons (set by default).; For the ODC computations, the user has a choice of performing the computation of the guess orbitals and cumulants; using the corresponding DC method (set ODC_GUESS to TRUE). This can often lead to; significant computational savings, since the orbital update step in the DC methods is cheap.; Convergence of the guess orbitals and cumulants can be controlled using the; GUESS_R_CONVERGENCE option. table of contents. DCFT: Density Cumulant Functional Theory; Theory; Methods; Iterative Algorithms; Analytic Gradients; Methods Summary; Minimal Input; Recommendations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/dcft-1.html:15938,perform,performing,15938,psi4manual/1.3.2/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/dcft-1.html,2,['perform'],['performing']
Performance,"Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. Geometry Optimization — optimize() and gradient()¶. Psi4 Native Gradient Methods; Psi4 Native DFT Gradient Methods (excepting double-hybrids); CFOUR Interfaced Gradient Methods. For further discussion of geometry optimization, see; Sec. Geometry Optimization.; optimize() is the only command most users will ever; need to access directly to perform geometry optimizations. Behind; the scenes, optimize() is a wrapper that repeatedly; calls gradient() that computes the gradient then adds a; call to the geometry optimization module. psi4.optimize(name[, molecule, return_wfn, func, mode, dertype, hessian_with])[source]¶; Function to perform a geometry optimization. Aliases:opt(). Returns:float – Total electronic energy of optimized structure in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:psi4.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage fin",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/opt-1.html:1020,Optimiz,OptimizationConvergenceError,1020,psi4manual/1.2.1/opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/opt-1.html,2,['Optimiz'],['OptimizationConvergenceError']
Performance,"Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Geometry Optimization — optimize() and gradient()¶. Psi4 Native Gradient Methods; Psi4 Native DFT Gradient Methods (excepting double-hybrids); CFOUR Interfaced Gradient Methods. For further discussion of geometry optimization, see; Sec. Geometry Optimization.; optimize() is the only command most users will ever; need to access directly to perform geometry optimizations. Behind; the scenes, optimize() is a wrapper that repeatedly; calls gradient() that computes the gradient then adds a; call to the geometry optimization module. psi4.optimize(name[, molecule, return_wfn, func, mode, dertype, hessian_with])[source]¶; Function to perform a geometry optimization. Aliases:opt(). Returns:float – Total electronic energy of optimized structure in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:psi4.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage fin",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/opt-1.html:1020,Optimiz,OptimizationConvergenceError,1020,psi4manual/1.3.2/opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/opt-1.html,2,['Optimiz'],['OptimizationConvergenceError']
Performance,"Installing from Binary; Scratch Files; Elementary Restart; Saving the Wavefunction; ~/.psi4rc File; Threading; PBS job file; Command Line Options; Environment Variables. A PSI4 Tutorial; Psithon Tutorial: Using PSI4 as an Executable; PsiAPI Tutorial: Using Psi4 as a Python Module. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. Theoretical Methods: SCF to FCI; Capabilities and Alternate Implementations; Notes on Options; Notes on PSI Variables; HF: Hartree–Fock Theory; DFT: Density Functional Theory; DFT-NL; DCT: Density Cumulant Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; CC: Coupled Cluster Theory; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; PSIMRCC Implementation of Mk-MRCC Theory; CI: Configuration Interaction; MCSCF: Multi-Configurational Self-Consistent-Field; SAPT: Symmetry-Adapted Perturbation Theory; F/I-SAPT: Functional Group and/or Intramolecular SAPT; ADC: Ab Initio Polarization Propagator; Scalar relativistic Hamiltonians; Geometry Optimization; Evaluation of One-Electron Properties — oeprop(); Vibrational and Thermochemical Analysis; TDSCF: Time-dependent Hartree–Fock and density-functional theory. Interfaces: Enhancing PSI4 Capabilities; Interface to NumPy; Interface to adcc by M. F. Herbst and M. Scheurer; Interface to the BrianQC GPU module by the BrianQC team; Interface to CFOUR by J. Stanton & J. Gauss; Interface to CheMPS2 by S. Wouters; Interface to CPPE by M. Scheurer; Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst; Interface to DFTD3 by S. Grimme; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to LibECPInt by R. Shaw; Interface to LIBEFP by I",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x.html:1340,Optimiz,Optimized,1340,psi4manual/1.9.x.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x.html,10,['Optimiz'],"['Optimization', 'Optimized']"
Performance,"Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:26988,Optimiz,Optimize,26988,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,4,['Optimiz'],['Optimize']
Performance,"J. Werner and co-workers. Type: string; Default: WERNER. LOCAL_PAIRDEF¶. Definition of local pair domains. Type: string; Default: No Default. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_AMPS_PRINT¶. Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. PROP_ALL¶. Compute unrelaxed properties for all excited states. Type: boolean; Default: true. PROP_ROOT¶. Root number (within its irrep) for computing properties. Type: integer; Default: 1. PROP_SYM¶. The symmetry of states. Type: integer; Default: 1. RESTART¶. Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. SEKINO¶. Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. ZETA¶. Do use zeta?. Type: boolean; Default: false. Expert¶. JOBTYPE¶. Type of job being performed. Type: string; Default: No Default. WFN¶. Wavefunction type. Type: string; Default: SCF. table of contents. CCLAMBDA; General; ABCD; AO_BASIS; CACHELEVEL; DIIS; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; NUM_AMPS_PRINT; PROP_ALL; PROP_ROOT; PROP_SYM; RESTART; ROOTS_PER_IRREP; R_CONVERGENCE; SEKINO; ZETA. Expert; JOBTYPE; WFN. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Keywords by Module. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cclambda-1.html:3256,perform,performed,3256,psi4manual/1.1.0/autodir_options_c/module__cclambda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cclambda-1.html,4,"['CACHE', 'perform']","['CACHELEVEL', 'performed']"
Performance,"K(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DSYSV(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DTBMV(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DTBSV(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DTRMM(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DTRMV(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DTRSM(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DTRSV(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. IDAMAX(arg0, arg1, arg2, arg3); docstring. adc(ref_wfn); Runs the ADC propagator code, for excited states. array_variable(key); Returns copy of the Matrix QCVariable key (case-insensitive); prefer variable(). array_variables(); Returns dictionary of all Matrix QCVariables; prefer variables(). be_quiet(); Redirects output to /dev/null. benchmark_blas1(max_dim, min_time); Perform benchmark traverse of BLAS 1 routines. benchmark_blas2(max_dim, min_time); Perform benchmark traverse of BLAS 2 routines. benchmark_blas3(max_dim, min_time, nthread); Perform benchmark traverse of BLAS 3 routines. benchmark_disk(max_dim, min_time); Perform benchmark of PSIO disk performance. benchmark_integrals(max_am, min_time); Perform benchmark of psi integrals (of libmints type). benchmark_math(min_time); Perform benchmark of common double floating point operations including most of cmath. ccdensity(ref_wfn); Runs the code to compute coupled cluster density matrices. ccenergy(ref_wfn); Runs the coupled cluster energy code. cceom(ref_wfn); Runs the equation of motion coupled cluster code for excited states. cchbar(ref_wfn); Runs the code to generate the similarity transformed Hamiltonian. cclambda(ref_wfn); Runs the coupled cluster lambda equations code. ccresponse(ref_wfn); Runs the coupled cluster response theory code. cctransort(ref_wfn); Runs cctransort that transforms and reorders integrals for use in the coupled cluster codes. cctriples(ref_wfn); Runs the coupled cluster (T) energy code. clean(); Remove scratch files. clean_options(); Reset",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/psi4api-1.html:2683,Perform,Perform,2683,psi4manual/1.4.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/psi4api-1.html,2,['Perform'],['Perform']
Performance,"KING). INTS_TOLERANCE (CCDENSITY). (CCSORT). (DCFT). (DFMP2). (LMP2). (MRCC). (SAPT). (SCF). (TRANSQT). (TRANSQT2). invalidate() CartesianEntry method. CoordValue method. ZMatrixEntry method. ip_fitting() in module frac. IP_POLES (OCC). IRC; . geometry optimization. IRC_DIRECTION (OPTKING). IRC_STEP_SIZE (OPTKING). IRC_STOP (OPTKING). irrep_labels() LibmintsMolecule method. is_axis() LibmintsMolecule method. is_computed() CoordEntry method. is_equivalent_to() CoordEntry method. is_ghosted() CoordEntry method. is_linear_planar() LibmintsMolecule method. is_plane() LibmintsMolecule method. is_variable() LibmintsMolecule method. ISTOP (DETCI). IVO (TRANSQT). J. J_FILE (TRANSQT). JOBTYPE (CCLAMBDA). JSCH module, [1]. K. KEEP_INTCOS (OPTKING). KEEP_J (TRANSQT). KEEP_OEIFILE (CCSORT). KEEP_PRESORT (TRANSQT). KEEP_TEIFILE (CCSORT). keywords; . C-side, setting. cbs(), setting. cp(), setting. database(), setting. diatomic_anharmonicity(), setting. energy(), setting. molecule, setting. optimize(), setting. property(), setting. kwargs_lower() in module procutil. L. label() CoordEntry method. LibmintsMolecule method. LAG_IN_FILE (TRANSQT). LAGRAN_DOUBLE (TRANSQT). LAGRAN_HALVE (TRANSQT). LAMBDA_MAXITER (DCFT). LCC2(+LMP2)TOTALENERGY. LCCSD(+LMP2)TOTALENERGY. LEVEL_SHIFT (MCSCF). (OCC). LibmintsMolecule class in qcdb.libmintsmolecule. like_world_axis() LibmintsMolecule static method. LINEAR (CCRESPONSE). LINEQ_SOLVER (OCC). LINESEARCH_STATIC_MAX (OPTKING). LINESEARCH_STATIC_MIN (OPTKING). LINESEARCH_STATIC_N (OPTKING). load_basfam_dunning() in module basislistdunning. load_basfam_other() in module basislistother. load_basis_families() in module basislist. LOCAL (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). (CCSORT). (CIS). LOCAL_AMPS_PRINT_CUTOFF (CIS). LOCAL_CORE_CUTOFF (CCSORT). LOCAL_CPHF_CUTOFF (CCENERGY). (CCLAMBDA). (CCRESPONSE). (CCSORT). LOCAL_CUTOFF (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). (CCSORT). (CIS). (LMP2). LOCAL_DO_SINGLES (CCEOM). LOCAL_DOMAIN_MAG (CCSORT",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/genindex.html:25077,optimiz,optimize,25077,psi4manual/4.0b4/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html,1,['optimiz'],['optimize']
Performance,"KING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_RESTART (OPTKING)¶OPTKING — Restart the optimization from optking’s written history. Type: double; Default: 0. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC)¶OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simul",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html:187225,optimiz,optimization,187225,psi4manual/1.7.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html,3,['optimiz'],['optimization']
Performance,"KY_TOLERANCE¶. Tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1e-4. DF_BASIS_SCF¶. Auxiliary basis set for SCF density fitting computations. Defaults to a JKFIT basis. Type: string; Possible Values: basis string; Default: No Default. DF_SCF_GUESS¶. Do a density fitting SCF calculation to converge the orbitals before switching to the use of exact integrals in a SCF_TYPE DIRECT calculation. Type: boolean; Default: true. GUESS¶. The type of guess orbitals. See Initial Guess for what the options mean and what the defaults are. Type: string; Possible Values: AUTO, CORE, GWH, SAD, SADNO, SAP, SAPGAU, HUCKEL, MODHUCKEL, READ; Default: AUTO. GUESS_MIX¶. Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST¶. If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. INTS_TOLERANCE¶. Screening threshold for the chosen screening method (SCHWARZ, CSAM, DENSITY) Absolute value below which TEI are neglected. Type: conv double; Default: 1e-12. MAX_MEM_BUF¶. Max memory per buf for PK algo REORDER, for debug and tuning. Type: integer; Default: 0. MOLDEN_WRITE¶. Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ORBITALS_WRITE¶. File name (case sensitive) to which to serialize Wavefunction orbital data. Type: string; Default: No Default. PRINT_BASIS¶. Do print the basis set?. Type: boolean; Default: false. PRINT_MOS¶. Do print the molecular orbitals?. Type: boolean; Default: false. QCHF¶. Do perform a QCHF computation?. Type: boolean; Default: false. REFERENCE¶. Reference wavefunc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodir_options_c/module__scf.html:1475,optimiz,optimization,1475,psi4manual/1.9.x/autodir_options_c/module__scf.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodir_options_c/module__scf.html,2,['optimiz'],['optimization']
Performance,"L (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM —. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR —. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA —. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT —. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (MP2); MP2 — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (OMP2); OMP2 —. Type: integer; Default: 2. CACHELEVEL (STABILITY); STABILITY —. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 —. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM —. Type: string; Possible Values: LOW, LRU; Default: LRU. CACHETYPE (MP2); MP2 — The criterion used to retain/",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html:6571,CACHE,CACHELEVEL,6571,psi4manual/4.0b2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html,2,['CACHE'],['CACHELEVEL']
Performance,"L ENERGY.; The entire dictionary of PSI variables can be obtained through; get_variables(). Return Values¶; Most of the usual user computation functions (i.e.,; energy(), optimize(), and; frequency()) return simply the current total energy.; Consult the descriptions of other functions in Psithon Functions: Invoking a Calculation for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions. PSIthonPsiAPI# E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = energy(...); E = optimize(...); E = frequency(...); G = gradient(...) # used by optimize(); H = hessian(...) # used by frequency(). # E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = psi4.energy(...); E = psi4.optimize(...); E = psi4.frequency(...); G = psi4.gradient(...) # used by optimize(); H = psi4.hessian(...) # used by frequency(). For more elaborate post-processing of computations, adding; return_wfn=True keyword argument additionally returns; Wavefunction. PSIthonPsiAPI# power user returns; E, wfn = energy(..., return_wfn=True); E, wfn = optimize(..., return_wfn=True); E, wfn = frequency(..., return_wfn=True); G, wfn = gradient(..., return_wfn=True) # used by optimize(); H, wfn = hessian(..., return_wfn=True) # used by frequency(). # print gradient array and its rms; wfn.gradient.print_out(); print wfn.gradient().rms(). # format output for other programs; molden(wfn, 'mycalc.molden'). # access array in another format; np.array(wfn.hessian()). # power user returns; E, wfn = psi4.energy(..., return_wfn=True); E, wfn = psi4.optimize(..., return_wfn=True); E, wfn = psi4.frequency(..., return_wfn=True); G, wfn = psi4.gradient(..., return_wfn=True) # used by optimize(); H, wfn = psi4.hessian(..",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/psithoninput.html:10789,optimiz,optimize,10789,psi4manual/master/psithoninput.html,https://psicode.org,https://psicode.org/psi4manual/master/psithoninput.html,1,['optimiz'],['optimize']
Performance,L MOMENTS <R^3>. MBIS VALENCE WIDTHS. MBIS VOLUME RATIOS. MBIS_D_CONVERGENCE (GLOBALS). MBIS_MAXITER (GLOBALS). MBIS_PRUNING_SCHEME (GLOBALS). MBIS_RADIAL_POINTS (GLOBALS). MBIS_SPHERICAL_POINTS (GLOBALS). MCSCF. theory. MCSCF TOTAL ENERGY. mcscf() in module psi4.core. MCSCF_ALGORITHM (DETCI). MCSCF_CI_CLEANUP (DETCI). MCSCF_DIIS_ERROR_TYPE (DETCI). MCSCF_DIIS_FREQ (DETCI). MCSCF_DIIS_MAX_VECS (DETCI). MCSCF_DIIS_START (DETCI). MCSCF_DPD_CLEANUP (DETCI). MCSCF_E_CONVERGENCE (DETCI). MCSCF_GUESS (DETCI). MCSCF_MAX_ROT (DETCI). MCSCF_MAXITER (DETCI). mcscf_object() psi4.core.CIWavefunction method. MCSCF_R_CONVERGENCE (DETCI). MCSCF_ROTATE (DETCI). MCSCF_SO_START_E (DETCI). MCSCF_SO_START_GRAD (DETCI). MCSCF_TYPE (DETCI). mdi_run() in module psi4.driver. MemDFJK class in psi4.core. memory. memory_estimate() psi4.core.JK method. message psi4.driver.ConvergenceError attribute. psi4.driver.ManagedMethodError attribute. psi4.driver.MissingMethodError attribute. psi4.driver.OptimizationConvergenceError attribute. psi4.driver.SCFConvergenceError attribute. psi4.driver.TDSCFConvergenceError attribute. psi4.driver.TestComparisonError attribute. psi4.driver.ValidationError attribute. message_box() in module psi4.driver. in module psi4.driver.p4util. meta_cutoff() psi4.core.Functional method. metadata psi4.driver.driver_cbs.CompositeComputer attribute. metameta psi4.driver.driver_cbs.CompositeComputer attribute. psi4.driver.driver_findif.FiniteDifferenceComputer attribute. method psi4.driver.AtomicComputer attribute. psi4.driver.driver_cbs.CompositeComputer attribute. psi4.driver.driver_findif.FiniteDifferenceComputer attribute. psi4.driver.driver_nbody.ManyBodyComputer attribute. method alias. ; adding new. metric() psi4.core.FDDS_Dispersion method. metric_inv() psi4.core.FDDS_Dispersion method. MIN_CCD_DIISVECS (SAPT). MINAO_BASIS (FISAPT). MintsHelper class in psi4.core. mintshelper() psi4.core.CUHF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. psi,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/genindex.html:72041,Optimiz,OptimizationConvergenceError,72041,psi4manual/1.7.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/genindex.html,2,['Optimiz'],['OptimizationConvergenceError']
Performance,"LATION ENERGY. OMP2 TOTAL ENERGY. OMP2.5. ; setting keywords. OMP2.5 CORRELATION ENERGY. OMP2.5 DOUBLES ENERGY. OMP2.5 OPPOSITE-SPIN CORRELATION ENERGY. OMP2.5 REFERENCE CORRECTION ENERGY. OMP2.5 SAME-SPIN CORRELATION ENERGY. OMP2.5 TOTAL ENERGY. OMP3. ; setting keywords. theory. OMP3 CORRELATION ENERGY. OMP3 DOUBLES ENERGY. OMP3 OPPOSITE-SPIN CORRELATION ENERGY. OMP3 REFERENCE CORRECTION ENERGY. OMP3 SAME-SPIN CORRELATION ENERGY. OMP3 TOTAL ENERGY. OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8]. ONE-ELECTRON ENERGY. one_electron_integrals() psi4.core.MintsHelper method. OneBodyAOInt class in psi4.core. OneBodySOInt class in psi4.core. onel_Hx() psi4.core.HF method. ONEPDM (DFMP2). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DCT). (DETCI). opdm() psi4.core.CIWavefunction method. OPDM_ONLY (CCDENSITY). OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method. open_check() psi4.core.IO method. operate() psi4.core.SymmetryOperation method. opt(). . see optimize(). opt() in module psi4.driver. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_RESTART (OPTKING). OPT_TYPE (OPTKING). OPTIMIZATION ITERATIONS. OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4.driver. optimize_geometric() in module psi4.driver. option_exists_in_module() in module psi4.core. Options class in psi4.core. options() psi4.core.Wavefunction method. options_to_python() in module psi4.core. OptionsState class in psi4.driver.p4util. OptionsStateCM() in module psi4.driver.p4util. OptionState class in psi4.driver.p4util. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCT). orbital_values() psi4.core.PointFunctions method. ORBITALS_WRITE (SCF). OrbitalSpace class in psi4.core. order() psi4.core.CharacterTable method. psi4.core.Po",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/genindex.html:83477,optimiz,optimize,83477,psi4manual/1.7.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/genindex.html,2,['optimiz'],['optimize']
Performance,LCCSD SINGLES ENERGY. LCCSD TOTAL ENERGY. LEFT-RIGHT CC2 EIGENVECTOR OVERLAP. LEFT-RIGHT CC3 EIGENVECTOR OVERLAP. LEFT-RIGHT CCSD EIGENVECTOR OVERLAP. LEFT-RIGHT CCSD(T) EIGENVECTOR OVERLAP. LEVEL_SHIFT (DFOCC). (MCSCF). (OCC). (SCF). LEVEL_SHIFT_CUTOFF (SCF). levenshtein() (in module psi4.driver). (in module psi4.driver.p4util). LibECPInt. LIBEFP. Libint. libint2_configuration() (in module psi4.driver). (in module psi4.driver.p4util). libint2_print_out() (in module psi4.driver). (in module psi4.driver.p4util). libint2_solid_harmonics_ordering() (in module psi4.core). Libxc. LibXCFunctional (class in psi4.core). license. light (psi4.driver.p4util.InPsight attribute). light_color (psi4.driver.p4util.InPsight attribute). LINEAR (CCRESPONSE). LINEQ_SOLVER (DFOCC). Lineshape (class in psi4.driver.p4util). lineshape() (psi4.driver.p4util.Gaussian method). (psi4.driver.p4util.Lineshape method). (psi4.driver.p4util.Lorentzian method). LINK_INTS_TOLERANCE (SCF). LITERAL_CFOUR (GLOBALS). load() (psi4.core.Matrix method). (psi4.core.Vector method). load_mpqc() (psi4.core.Matrix method). LOCAL (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). LOCAL_CONVERGENCE (DLPNO). (FISAPT). (SCF). LOCAL_CPHF_CUTOFF (CCENERGY). (CCLAMBDA). (CCRESPONSE). LOCAL_CUTOFF (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). LOCAL_DO_SINGLES (CCEOM). LOCAL_FILTER_SINGLES (CCEOM). (CCLAMBDA). (CCRESPONSE). LOCAL_IBO_CONDITION (FISAPT). LOCAL_IBO_POWER (FISAPT). LOCAL_IBO_STARS (FISAPT). LOCAL_IBO_STARS_COMPLETENESS (FISAPT). LOCAL_IBO_USE_STARS (FISAPT). LOCAL_MAXITER (DLPNO). (FISAPT). (SCF). LOCAL_METHOD (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). LOCAL_PAIRDEF (CCENERGY). (CCLAMBDA). (CCRESPONSE). LOCAL_PRECONDITIONER (CCEOM). LOCAL_USE_GHOSTS (FISAPT). LOCAL_WEAKP (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). localize() (psi4.core.FISAPT method). (psi4.core.Localizer method). Localizer (class in psi4.core). location (psi4.driver.p4util.InPsight attribute). LOCK_SINGLET (PSIMRCC). look_at (psi4.driv,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/genindex.html:71439,load,load,71439,psi4manual/master/genindex.html,https://psicode.org,https://psicode.org/psi4manual/master/genindex.html,2,['load'],['load']
Performance,"LE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC)¶DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY)¶CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (DFMP2)¶DFMP2 — SS Scale. Type: double; Default: 1.0. MP2_SS_SCALE (DFOCC)¶DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:179818,optimiz,optimized,179818,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,9,['optimiz'],['optimized']
Performance,"LECTRON ENERGY. one_electron_integrals() psi4.core.MintsHelper method. OneBodyAOInt class in psi4.core. OneBodySOInt class in psi4.core. onel_Hx() psi4.core.CUHF method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DCT). (DETCI). opdm() psi4.core.CIWavefunction method. OPDM_GRID_CUTOFF (CCDENSITY). OPDM_GRID_DUMP (CCDENSITY). OPDM_GRID_STEPSIZE (CCDENSITY). OPDM_ONLY (CCDENSITY). OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method. open_check() psi4.core.IO method. operate() psi4.core.SymmetryOperation method. opt(). . see optimize(). opt() in module psi4.driver. opt_clean() in module psi4.core. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_TYPE (OPTKING). OPTIMIZATION ITERATIONS. OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4.driver. optimize_geometric() in module psi4.driver. option_exists_in_module() in module psi4.core. Options class in psi4.core. options() psi4.core.CCWavefunction method. psi4.core.CIWavefunction method. psi4.core.CUHF method. psi4.core.DFEP2Wavefunction method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. psi4.core.Wavefunction method. options_to_python() in module psi4.core. optking() in module psi4.core. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCT). orbital_values() psi4.core.PointFunctions method. psi4.core.RKSFunctions method. psi4.core.UKSFunctions method. ORBITALS_WRITE (SCF). OrbitalSpace class in psi4.core. order() psi4.core.CharacterTable method. psi4.core.PointGroup method. ordered_params psi4.driver.EmpiricalDisper",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/genindex.html:104170,optimiz,optimize,104170,psi4manual/1.6.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/genindex.html,1,['optimiz'],['optimize']
Performance,"LEVEL¶. Maximum excitation level. This is used ONLY if it is explicity set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_NUM_DOUBLET_ROOTS¶. Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS¶. Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS¶. Number of triplet roots. (Strictly speaking number of of roots with and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. Expert¶. MRCC_METHOD¶. If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56 .. table:: MRCC methods +——-+————–+————————————————————-+ + Value + Method + Description + +=======+==============+=============================================================+ + 1 + CC + + +——-+————–+————————————————————-+ + 2 + CC(n-1)[n] + + +——-+————–+————————————————————-+ + 3 + CC(n-1)(n) + (CC(n-1)[n] energy is also calculated) + +——-+————–+————————————————————-+ + 4 + CC(n-1)(n)_L + (CC(n-1)[n] and CC(n-1)(n) energies are also calculated) + +——-+————–+————————————————————-+ + 5 + CC(n)-1a + + +——-+————–+————————————————————-+ + 6 + CC(n)-1b + + +——-+————–+————————————————————-+ + 7 + CCn + + +——-+————–+————————————————————-+ + 8 + CC(n)-3 + + +——-+————–+————————————————————-+. Type: integer; Default: 1. MRCC_OMP_NUM_THREADS¶. Sets the OMP_NUM_THREADS environment variable before calling MR",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__mrcc-1.html:1583,perform,performed,1583,psi4manual/4.0b5/autodir_options_c/module__mrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__mrcc-1.html,2,['perform'],['performed']
Performance,"LEVEL¶. Maximum excitation level. This is used ONLY if it is explicity set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_NUM_DOUBLET_ROOTS¶. Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS¶. Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS¶. Number of triplet roots. (Strictly speaking number of of roots with and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. Expert¶. MRCC_METHOD¶. If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_OMP_NUM_THREADS¶. Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART¶. The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__mrcc-1.html:1590,perform,performed,1590,psi4manual/1.0.0/autodir_options_c/module__mrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__mrcc-1.html,2,['perform'],['performed']
Performance,"LE_SS¶. Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0/3.0. DIPMOM¶. Compute the dipole moment? Note that quadrupole moments will also be computed if PRINT >= 2. Type: boolean; Default: false. CEPA_VABCD_DIRECT¶. Use integral-direct implementation of the (ac|bd) t(ij,cd) contraction? AO integrals will be generated on the fly. The CEPA iterations will be slower, but the AO->MO integral transform will be faster, and the out-of-core sort of the (AC|BD) integrals will be avoided. Type: boolean; Default: false. Advanced Coupled Pair Keywords¶. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). SCS_CEPA¶. Perform SCS-CEPA? If true, note that the default values for the spin component scaling factors are optimized for the CCSD method. Type: boolean; Default: false. CEPA_SCALE_OS¶. Oppposite-spin scaling factor for SCS-CEPA. Type: double; Default: 1.27. CEPA_SCALE_SS¶. Same-spin scaling factor for SCS-CEPA. Type: double; Default: 1.13. CEPA_NO_SINGLES¶. Flag to exclude singly excited configurations from the computation. Note that this algorithm is not optimized for doubles-only computations. Type: boolean; Default: false. Table Of Contents. CEPA: Coupled-Pair Methods; Basic Coupled Pair Keywords; BASIS; FREEZE_CORE; R_CONVERGENCE; MAXITER; DIIS_MAX_VECS; MP2_SCALE_OS; MP2_SCALE_SS; DIPMOM; CEPA_VABCD_DIRECT. Advanced Coupled Pair Keywords; CEPA_LEVEL; SCS_CEPA; CEPA_SCALE_OS; CEPA_SCALE_SS; CEPA_NO_SINGLES. Previous topic; SAPT: Symmetry-Adapted Perturbation Theory; Next topic; CC: Coupled Cluster Methods; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/cepa-1.html:5591,optimiz,optimized,5591,psi4manual/4.0b3/cepa-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/cepa-1.html,2,['optimiz'],['optimized']
Performance,"LICITY¶. Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING¶. Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL¶. Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM¶. All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF¶. Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP¶. Specifies ho",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:39450,optimiz,optimization,39450,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,17,['optimiz'],['optimization']
Performance,LOCAL_CUTOFF; LOCAL_DO_SINGLES; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PRECONDITIONER; LOCAL_WEAKP; MAXITER; NEW_TRIPLES; NUM_AMPS_PRINT; OVERLAP_CHECK; PROP_ROOT; PROP_SYM; R_CONVERGENCE; REFERENCE; RESTART_EOM_CC3; RHF_TRIPLETS; ROOTS_PER_IRREP; SCHMIDT_ADD_RESIDUAL_TOLERANCE; SEMICANONICAL; SINGLES_PRINT; SS_E_CONVERGENCE; SS_R_CONVERGENCE; SS_SKIP_DIAG; SS_VECS_PER_ROOT; T3_WS_INCORE; VECS_CC3; VECS_PER_ROOT; WFN; CACHELEVEL; EOM_REFERENCE; T_AMPS; WABEI_LOWDISK; WFN; ABCD; AO_BASIS; CACHELEVEL; DIIS; JOBTYPE; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; NUM_AMPS_PRINT; PROP_ALL; PROP_ROOT; PROP_SYM; R_CONVERGENCE; RESTART; ROOTS_PER_IRREP; SEKINO; WFN; ZETA; ABCD; ANALYZE; CACHELEVEL; DIIS; GAUGE; LINEAR; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; NUM_AMPS_PRINT; OMEGA; PROPERTY; R_CONVERGENCE; REFERENCE; RESTART; SEKINO; WFN; AO_BASIS; CACHELEVEL; DELETE_TEI; REFERENCE; RUN_CCTRANSORT; SEMICANONICAL; WFN; CC_NUM_THREADS; REFERENCE; SEMICANONICAL; WFN; CFOUR_ABCDTYPE; CFOUR_ACTIVE_ORBI; CFOUR_ANH_ALGORITHM; CFOUR_ANH_DERIVATIVES; CFOUR_ANH_STEPSIZE; CFOUR_ANH_SYMMETRY; CFOUR_ANHARMONIC; CFOUR_AO_LADDERS; CFOUR_AV_SCF; CFOUR_BASIS; CFOUR_BRUCK_CONV; CFOUR_BRUECKNER; CFOUR_CACHE_RECS; CFOUR_CALC_LEVEL; CFOUR_CC_CONV; CFOUR_CC_EXPORDER; CFOUR_CC_EXTRAPOLATION; CFOUR_CC_MAXCYC; CFOUR_CC_PROGRAM; CFOUR_CHARGE; CFOUR_CIS_CONV; CFOUR_CONTINUUM; CFOUR_CONTRACTION; CFOUR_CONVERGENCE; CFOUR_COORDINATES; CFOUR_CORE_ORBITALS; CFOUR_CPHF_CONVER; CFOUR_CPHF_MAXCYC; CFOUR_CURVILINEAR; CFOUR_DBOC; CFOUR_DCT; CFOUR_DERIV_LEVEL; CFOUR_DIFF_TYPE; CFOUR_DROPMO; CFOUR_ECP; CFOUR_EIGENVECTOR; CFOUR_EL_ANHARM; CFOUR_EOM_NONIT; CFOUR_ESTATE_CONV; CFOUR_ESTATE_MAXCYC; CFOUR_ESTATE_PROP; CFOUR_ESTATE_SYM; CFOUR_ESTATE_TRANS; CFOUR_EVAL_HESS; CFOUR_EXCITATION; CFOUR_EXCITE; CFOUR_FC_FIELD; CFOUR_FD_CALCTYPE; CFOUR_FD_IRREPS; CFOUR_FD_PROJECT; CFOUR_F,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:766874,CACHE,CACHELEVEL,766874,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,7,['CACHE'],['CACHELEVEL']
Performance,"LS). NUM_INIT_VECS (DETCI). NUM_ROOTS (DETCI). NUM_VECS_PRINT (STABILITY). NUM_VECS_WRITE (DETCI). O. OCC_TOLERANCE (SAPT). OEI_A_FILE (TRANSQT). OEI_B_FILE (TRANSQT). OEI_FILE (TRANSQT). OFFDIAGONAL_CCSD_T (PSIMRCC). OMEGA (CCRESPONSE). (CCSORT). (RESPONSE). OMEGA_BRACKET_ALPHA (PLUGIN_OMEGA), [1]. OMEGA_CONVERGE (PLUGIN_OMEGA), [1]. OMEGA_GUESS (PLUGIN_OMEGA), [1]. OMEGA_GUESS_A (PLUGIN_OMEGA), [1]. OMEGA_GUESS_B (PLUGIN_OMEGA), [1]. OMEGA_GUESS_INTERPOLATE (PLUGIN_OMEGA), [1]. OMEGA_MAXITER (PLUGIN_OMEGA), [1]. OMEGA_PROCEDURE (PLUGIN_OMEGA), [1]. OMEGA_ROOT_ALGORITHM (PLUGIN_OMEGA), [1]. OMP2_ORBS_PRINT (OMP2). OMP_N_THREAD (CPHF). (JK), [1]. OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4]. ONE-ELECTRONENERGY. ONEPDM (CCDENSITY). OPDM (DETCI). (MP2). OPDM_AVG (DETCI). OPDM_IN_FILE (TRANSQT). OPDM_KE (DETCI). OPDM_OUT_FILE (TRANSQT). OPDM_PRINT (DETCI). OPDM_RELAX (CCDENSITY). (MP2). opt(); . see optimize(); . OPT_METHOD (OMP2). OPT_TYPE (OPTKING). optimization; . see geometry optimization; . optimize(); . setting keywords. optimize() (in module driver). ORTH_TYPE (OMP2). output; . SAPT. cbs(). database(). geometry optimization. P. PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parse_arbitrary_order() (in module driver). parse_cotton_irreps() (in module driver). PATH, [1]. PERTURB_CBS (PSIMRCC). PERTURB_CBS_COUPLING (PSIMRCC). PERTURB_H (SCF). PERTURB_MAGNITUDE (DETCI). (SCF). PERTURB_WITH (SCF). physconst (module). physical constants. PITZER (TRANSQT). plugin; . plugin_aointegrals. plugin_backtrans. plugin_ccsd_serial. plugin_ccsort. plugin_cepa. plugin_dfadc. plugin_libfock. plugin_mointegrals. plugin_mp2. plugin_omega. plugin_rqchf. plugin_sointegrals. plugin_test_matrix. plugin_testparse. plugin_testparse.__init__ (module). plugins; . available. POINTS (FINDIF). POLE_MAX (PLUGIN_DFADC), [1]. POLE_MAXITER (ADC). populateExtern() (Diffuse method). (QMMM method). PR (ADC). PRECONDITIONER (DETCI). PRESORT_FILE (TRANSQT). PRINT (CPHF). (GL",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/genindex.html:20198,optimiz,optimization,20198,psi4manual/4.0b2/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/genindex.html,1,['optimiz'],['optimization']
Performance,L_METHOD — PSI4 [beta2] documentation; LOCAL_PAIRDEF — PSI4 [beta2] documentation; LOCAL_WEAKP — PSI4 [beta2] documentation; MAXITER — PSI4 [beta2] documentation; MP2_AMPS_PRINT — PSI4 [beta2] documentation; MP2_OS_SCALE — PSI4 [beta2] documentation; MP2_SS_SCALE — PSI4 [beta2] documentation; NEW_TRIPLES — PSI4 [beta2] documentation; NUM_AMPS_PRINT — PSI4 [beta2] documentation; PAIR_ENERGIES_PRINT — PSI4 [beta2] documentation; PROPERTY — PSI4 [beta2] documentation; R_CONVERGENCE — PSI4 [beta2] documentation; REFERENCE — PSI4 [beta2] documentation; RESTART — PSI4 [beta2] documentation; SCS_CCSD — PSI4 [beta2] documentation; SCS_MP2 — PSI4 [beta2] documentation; SCSN_MP2 — PSI4 [beta2] documentation; SEMICANONICAL — PSI4 [beta2] documentation; SPINADAPT_ENERGIES — PSI4 [beta2] documentation; T2_COUPLED — PSI4 [beta2] documentation; T3_WS_INCORE — PSI4 [beta2] documentation; WFN — PSI4 [beta2] documentation; ABCD — PSI4 [beta2] documentation; CACHELEVEL — PSI4 [beta2] documentation; CACHETYPE — PSI4 [beta2] documentation; CC_NUM_THREADS — PSI4 [beta2] documentation; CC3_FOLLOW_ROOT — PSI4 [beta2] documentation; COLLAPSE_WITH_LAST — PSI4 [beta2] documentation; COMPLEX_TOLERANCE — PSI4 [beta2] documentation; E_CONVERGENCE — PSI4 [beta2] documentation; EOM_GUESS — PSI4 [beta2] documentation; EOM_REFERENCE — PSI4 [beta2] documentation; EXCITATION_RANGE — PSI4 [beta2] documentation; FULL_MATRIX — PSI4 [beta2] documentation; LOCAL — PSI4 [beta2] documentation; LOCAL_CUTOFF — PSI4 [beta2] documentation; LOCAL_DO_SINGLES — PSI4 [beta2] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta2] documentation; LOCAL_GHOST — PSI4 [beta2] documentation; LOCAL_METHOD — PSI4 [beta2] documentation; LOCAL_PRECONDITIONER — PSI4 [beta2] documentation; LOCAL_WEAKP — PSI4 [beta2] documentation; MAXITER — PSI4 [beta2] documentation; NEW_TRIPLES — PSI4 [beta2] documentation; NUM_AMPS_PRINT — PSI4 [beta2] documentation; PROP_ROOT — PSI4 [beta2] documentation; PROP_SYM — PSI4 [beta2] documentation; R,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:905737,CACHE,CACHETYPE,905737,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHETYPE']
Performance,L_METHOD — PSI4 [beta3] documentation; LOCAL_PAIRDEF — PSI4 [beta3] documentation; LOCAL_WEAKP — PSI4 [beta3] documentation; MAXITER — PSI4 [beta3] documentation; MP2_AMPS_PRINT — PSI4 [beta3] documentation; MP2_OS_SCALE — PSI4 [beta3] documentation; MP2_SS_SCALE — PSI4 [beta3] documentation; NEW_TRIPLES — PSI4 [beta3] documentation; NUM_AMPS_PRINT — PSI4 [beta3] documentation; PAIR_ENERGIES_PRINT — PSI4 [beta3] documentation; PROPERTY — PSI4 [beta3] documentation; R_CONVERGENCE — PSI4 [beta3] documentation; REFERENCE — PSI4 [beta3] documentation; RESTART — PSI4 [beta3] documentation; SCS_CCSD — PSI4 [beta3] documentation; SCS_MP2 — PSI4 [beta3] documentation; SCSN_MP2 — PSI4 [beta3] documentation; SEMICANONICAL — PSI4 [beta3] documentation; SPINADAPT_ENERGIES — PSI4 [beta3] documentation; T2_COUPLED — PSI4 [beta3] documentation; T3_WS_INCORE — PSI4 [beta3] documentation; WFN — PSI4 [beta3] documentation; ABCD — PSI4 [beta3] documentation; CACHELEVEL — PSI4 [beta3] documentation; CACHETYPE — PSI4 [beta3] documentation; CC_NUM_THREADS — PSI4 [beta3] documentation; CC3_FOLLOW_ROOT — PSI4 [beta3] documentation; COLLAPSE_WITH_LAST — PSI4 [beta3] documentation; COMPLEX_TOLERANCE — PSI4 [beta3] documentation; E_CONVERGENCE — PSI4 [beta3] documentation; EOM_GUESS — PSI4 [beta3] documentation; EOM_REFERENCE — PSI4 [beta3] documentation; EXCITATION_RANGE — PSI4 [beta3] documentation; FULL_MATRIX — PSI4 [beta3] documentation; LOCAL — PSI4 [beta3] documentation; LOCAL_CUTOFF — PSI4 [beta3] documentation; LOCAL_DO_SINGLES — PSI4 [beta3] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta3] documentation; LOCAL_GHOST — PSI4 [beta3] documentation; LOCAL_METHOD — PSI4 [beta3] documentation; LOCAL_PRECONDITIONER — PSI4 [beta3] documentation; LOCAL_WEAKP — PSI4 [beta3] documentation; MAXITER — PSI4 [beta3] documentation; NEW_TRIPLES — PSI4 [beta3] documentation; NUM_AMPS_PRINT — PSI4 [beta3] documentation; PROP_ROOT — PSI4 [beta3] documentation; PROP_SYM — PSI4 [beta3] documentation; R,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1115184,CACHE,CACHETYPE,1115184,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHETYPE']
Performance,L_METHOD — PSI4 [beta4] documentation; LOCAL_PAIRDEF — PSI4 [beta4] documentation; LOCAL_WEAKP — PSI4 [beta4] documentation; MAXITER — PSI4 [beta4] documentation; MP2_AMPS_PRINT — PSI4 [beta4] documentation; MP2_OS_SCALE — PSI4 [beta4] documentation; MP2_SS_SCALE — PSI4 [beta4] documentation; NEW_TRIPLES — PSI4 [beta4] documentation; NUM_AMPS_PRINT — PSI4 [beta4] documentation; PAIR_ENERGIES_PRINT — PSI4 [beta4] documentation; PROPERTY — PSI4 [beta4] documentation; R_CONVERGENCE — PSI4 [beta4] documentation; REFERENCE — PSI4 [beta4] documentation; RESTART — PSI4 [beta4] documentation; SCS_CCSD — PSI4 [beta4] documentation; SCS_MP2 — PSI4 [beta4] documentation; SCSN_MP2 — PSI4 [beta4] documentation; SEMICANONICAL — PSI4 [beta4] documentation; SPINADAPT_ENERGIES — PSI4 [beta4] documentation; T2_COUPLED — PSI4 [beta4] documentation; T3_WS_INCORE — PSI4 [beta4] documentation; WFN — PSI4 [beta4] documentation; ABCD — PSI4 [beta4] documentation; CACHELEVEL — PSI4 [beta4] documentation; CACHETYPE — PSI4 [beta4] documentation; CC_NUM_THREADS — PSI4 [beta4] documentation; CC3_FOLLOW_ROOT — PSI4 [beta4] documentation; COLLAPSE_WITH_LAST — PSI4 [beta4] documentation; COMPLEX_TOLERANCE — PSI4 [beta4] documentation; E_CONVERGENCE — PSI4 [beta4] documentation; EOM_GUESS — PSI4 [beta4] documentation; EOM_REFERENCE — PSI4 [beta4] documentation; EXCITATION_RANGE — PSI4 [beta4] documentation; FULL_MATRIX — PSI4 [beta4] documentation; LOCAL — PSI4 [beta4] documentation; LOCAL_CUTOFF — PSI4 [beta4] documentation; LOCAL_DO_SINGLES — PSI4 [beta4] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta4] documentation; LOCAL_GHOST — PSI4 [beta4] documentation; LOCAL_METHOD — PSI4 [beta4] documentation; LOCAL_PRECONDITIONER — PSI4 [beta4] documentation; LOCAL_WEAKP — PSI4 [beta4] documentation; MAXITER — PSI4 [beta4] documentation; NEW_TRIPLES — PSI4 [beta4] documentation; NUM_AMPS_PRINT — PSI4 [beta4] documentation; PROP_ROOT — PSI4 [beta4] documentation; PROP_SYM — PSI4 [beta4] documentation; R,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1326287,CACHE,CACHETYPE,1326287,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHETYPE']
Performance,"Linux machines; in; principle, it should work on any Unix system. The latest version of the; PSI4 program package may be obtained at psicode.org.; The package is available as a binary (Installing from Binary) for Linux, macOS, or Windows (via Windows Subsystem for; Linux aka Bash on Ubuntu on Windows); or as source code (zipped archive or git repository from; https://github.com/psi4/psi4).; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. Compiler requirements are primarily; C++11 compliance (i.e., GCC version 4.9 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Energy (CFOUR), Gradient,; Gradient (CFOUR), and Frequency. Summary of theoretical methods available in PSI4¶. Method; Energy; Gradient; Parallelism; Variants. Reference; Type; Reference; Type; OO [9]; FNO [1]. HF, HF-3c; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF/ROHF; CONV/DF; threaded;  ;  . DFT, PBEh-3c; RKS/UKS; CONV/DF/CD [7]; RKS/UKS; DF [4]; threaded;  ;  . EFP [5]; RHF;  ; —; —;  ;  ;  . DCFT; RHF/UHF; CONV/DF; RHF/UHF; CONV; partially threaded;  ;  . MP2 [10]; RHF/UHF/ROHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G;  . MP3 [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3]; E/G; E. MP2.5 [10]; RHF/UHF; CONV/DF/CD; RHF/UHF; CONV/DF; threaded [3];",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/introduction-1.html:19438,perform,perform,19438,psi4manual/1.1.0/introduction-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/introduction-1.html,2,['perform'],['perform']
Performance,"M (DCT). (DETCI). opdm() psi4.core.CIWavefunction method. OPDM_ONLY (CCDENSITY). OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method. open_check() psi4.core.IO method. operate() psi4.core.SymmetryOperation method. opt(). . see optimize(). opt() in module psi4.driver. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_RESTART (OPTKING). OPT_TYPE (OPTKING). OPTIMIZATION ITERATIONS. OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4.driver. optimize_geometric() in module psi4.driver. option_exists_in_module() in module psi4.core. Options class in psi4.core. options() psi4.core.Wavefunction method. options_to_python() in module psi4.core. OptionsState class in psi4.driver.p4util. OptionsStateCM() in module psi4.driver.p4util. OptionState class in psi4.driver.p4util. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCT). orbital_values() psi4.core.PointFunctions method. ORBITALS_WRITE (SCF). OrbitalSpace class in psi4.core. order() psi4.core.CharacterTable method. psi4.core.PointGroup method. ordered_params psi4.driver.EmpiricalDispersion attribute. psi4.driver.procrouting.empirical_dispersion.EmpiricalDispersion attribute. OREMP. ; setting keywords. OREMP2 CORRELATION ENERGY. OREMP2 DOUBLES ENERGY. OREMP2 OPPOSITE-SPIN CORRELATION ENERGY. OREMP2 REFERENCE CORRECTION ENERGY. OREMP2 SAME-SPIN CORRELATION ENERGY. OREMP2 SINGLES ENERGY. OREMP2 TOTAL ENERGY. orientation() psi4.core.MolecularGrid method. orientation_fixed() psi4.core.Molecule method. origin psi4.core.OneBodyAOInt attribute. original_coef() psi4.core.GaussianShell method. ORTH_TYPE (DFOCC). (OCC). OS_SCALE (OCC). outfile_name() in module psi4.core. output. ; cbs(). database(). geometry optimization. SAPT. vibrational analysis. overlap() psi4.core.FISAPT method. ov",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/genindex.html:84235,Optimiz,Optimized,84235,psi4manual/1.7.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/genindex.html,2,['Optimiz'],['Optimized']
Performance,"M (DFMP2)¶DFMP2 — Do compute one-particle density matrix?. Type: boolean; Default: false. ONEPOT_GRID_READ (SCF)¶SCF — Read an external potential from the .dx file?. Type: boolean; Default: false. OO_SCALE (DFOCC)¶DFOCC — OO scaling factor used in MSD. Type: double; Default: 0.01. OPDM (DCT)¶DCT — Compute a (relaxed) one-particle density matrix? Can be set manually. Set internally for property and gradient computations. Type: boolean; Default: false. OPDM (DETCI)¶DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_ONLY (CCDENSITY)¶CCDENSITY (Expert) — For internal use only! Compute the one-particle density matrix, but not the two-particle density matrix. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY)¶CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2)¶DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. CUSTOM is not fully implemented yet - expected optking 0.3.1. Type: string; Possible Values: REDUNDANT, INTERNAL, CARTESIAN, BOTH, CUSTOM; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Defau",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:189922,optimiz,optimization,189922,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,1,['optimiz'],['optimization']
Performance,"M (DFMP2)¶DFMP2 — Do compute one-particle density matrix?. Type: boolean; Default: false. ONEPOT_GRID_READ (SCF)¶SCF — Read an external potential from the .dx file?. Type: boolean; Default: false. OO_SCALE (DFOCC)¶DFOCC — OO scaling factor used in MSD. Type: double; Default: 0.01. OPDM (DCT)¶DCT — Compute a (relaxed) one-particle density matrix? Can be set manually. Set internally for property and gradient computations. Type: boolean; Default: false. OPDM (DETCI)¶DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_ONLY (CCDENSITY)¶CCDENSITY (Expert) — For internal use only! Compute the one-particle density matrix, but not the two-particle density matrix. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY)¶CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2)¶DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_RESTART (OPTKING)¶OPTKING — Restart the optimization from",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html:186249,optimiz,optimization,186249,psi4manual/1.7.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html,3,['optimiz'],['optimization']
Performance,"M, constraints_string); ; # Set up the internal coordinate system; coordsys = optimizer_keywords.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }; ; # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None); ; # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() / qcel.constants.bohr2angstroms. # Setup an optimizer object; params = geometric.optimize.OptParams(**optimizer_keywords); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); ; # TODO: print constraints; # IC.printConstraints(coords, thre=-1); optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); grms, gmax = optimizer.calcGradNorm(); conv_gmax = '*' if gmax < params.Convergence_gmax else ' '; conv_grms = '*' if grms < params.Convergence_grms else ' '; core.print_out(""\n Measures of convergence in internal coordinates in au. ~""); core.print_out(""\n Criteria marked as inactive (o), active & met (*), and active & unmet ( ). ~""); core.print_out(""\n --------------------------------------------------------------------------------------------- ~""); core.print_out(""\n Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~""); core.print_out(""\n --------------------------------------------------------------------------------------------- ~""); core.print_out((f""\n Convergence Criteria {params.Convergence_energy:10.2e} ""; f""{params.Convergence_gmax:10.2e} {params.Convergence_grms:10.2e} ""; f""{params.Convergence_dmax:10.2e} {params.Convergence_dr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html:55857,Optimiz,Optimizer,55857,psi4manual/1.4.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html,5,['Optimiz'],['Optimizer']
Performance,M; SOGGA11-X Hybrid Exchange-Correlation Functional; Y; —; —; 0.401500; —; —; —; Y. SOGGA11-X-D3ZERO2B; SOGGA11-X Hybrid Exchange-Correlation Functional; Y; —; —; 0.401500; —; —; —; Y. SOGGA11-X-D3ZEROATM; SOGGA11-X Hybrid Exchange-Correlation Functional; Y; —; —; 0.401500; —; —; —; Y. T-HCTHH; Hybrid Tau HCTH Meta-GGA XC Functional; Y; Y; —; 0.150000; —; —; —; —; —. TPSSH; TPSSh Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; —; —. TPSSH-D3BJ2B; TPSSh-d3bj2b Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. TPSSH-D3BJATM; TPSSh-d3bjatm Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. TPSSH-D3ZERO2B; TPSSh-d3zero2b Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. TPSSH-D3ZEROATM; TPSSh-d3zeroatm Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. TPSSH-NL; TPSSh-nl Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; —; —. TUNED-CAM-B3LYP; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional; Y; —; 0.150000; 0.079900; —; —; —; —; —. WB97M-D3BJ; wB97M-V with D3(BJ) instead of VV10 dispersion; Y; Y; 0.300000; 0.150000; —; —; —; Y. WB97M-V; wB97M-V Hyb-GGA Exchange-Correlation Functional; Y; Y; 0.300000; 0.150000; —; —; —; —; —. WB97X; wB97X Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.157706; —; —; —; —; —. WB97X-D; wB97X-D Hyb-GGA Exchange-Correlation Functional; Y; —; 0.200000; 0.222036; —; —; —; Y. WB97X-D3; wB97X-D3 Hyb-GGA Exchange-Correlation Functional; Y; —; 0.250000; 0.195728; —; —; —; Y. WB97X-D3BJ; wB97X-V with D3(BJ) instead of VV10 dispersion; Y; —; 0.300000; 0.167000; —; —; —; Y. WB97X-D3ZERO2B; wB97X-d3zero2b Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.157706; —; —; —; Y. WB97X-D3ZEROATM; wB97X-d3zeroatm Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.157706; —; —; —; Y. WB97X-V; wB97X-V Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.167000; —; —; —; —; —. WB97X3C; wB97X basied,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_dft_hybrid.html:28966,TUNE,TUNED-CAM-,28966,psi4manual/master/autodoc_dft_hybrid.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_dft_hybrid.html,8,['TUNE'],['TUNED-CAM-']
Performance,M; SOGGA11-X Hybrid Exchange-Correlation Functional; Y; —; —; 0.401500; —; —; —; Y. SOGGA11-X-D3ZERO2B; SOGGA11-X Hybrid Exchange-Correlation Functional; Y; —; —; 0.401500; —; —; —; Y. SOGGA11-X-D3ZEROATM; SOGGA11-X Hybrid Exchange-Correlation Functional; Y; —; —; 0.401500; —; —; —; Y. T-HCTHH; Hybrid Tau HCTH Meta-GGA XC Functional; Y; Y; —; 0.150000; —; —; —; —; —. TPSSH; TPSSh Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; —; —. TPSSH-D3BJ2B; TPSSh-d3bj2b Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. TPSSH-D3BJATM; TPSSh-d3bjatm Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. TPSSH-D3ZERO2B; TPSSh-d3zero2b Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. TPSSH-D3ZEROATM; TPSSh-d3zeroatm Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. TPSSH-NL; TPSSh-nl Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; —; —. TUNED-CAM-B3LYP; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional; Y; —; 0.150000; 0.079900; —; —; —; —; —. WB97M-D3BJ; wB97M-V with D3(BJ) instead of VV10 dispersion; Y; Y; 0.300000; 0.150000; —; —; —; Y. WB97M-V; wB97M-V Hyb-GGA Exchange-Correlation Functional; Y; Y; 0.300000; 0.150000; —; —; —; —; —. WB97X; wB97X Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.157706; —; —; —; —; —. WB97X-D; wB97X-D Hyb-GGA Exchange-Correlation Functional; Y; —; 0.200000; 0.222036; —; —; —; Y. WB97X-D3; wB97X-D3 Hyb-GGA Exchange-Correlation Functional; Y; —; 0.250000; 0.195728; —; —; —; Y. WB97X-D3BJ; wB97X-V with D3(BJ) instead of VV10 dispersion; Y; —; 0.300000; 0.167000; —; —; —; Y. WB97X-D3ZERO2B; wB97X-d3zero2b Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.157706; —; —; —; Y. WB97X-D3ZEROATM; wB97X-d3zeroatm Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.157706; —; —; —; Y. WB97X-V; wB97X-V Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.167000; —; —; —; —; —. WPBE0; PBE0 SR-XC Fun,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_dft_hybrid.html:28164,TUNE,TUNED-CAM-,28164,psi4manual/1.7.x/autodoc_dft_hybrid.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_dft_hybrid.html,4,['TUNE'],['TUNED-CAM-']
Performance,"MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (CCDENSITY); CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE); CCRESPONSE — Specifies the choice of representation of the electric dipole operator. Acceptable values are LENGTH for the usual length-gauge representation, VELOCITY for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or BOTH. Note that, for optical rotation calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: LENGTH. GEOM_MAXITER (OPTKING); OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 20. GUESS (SCF); SCF — The type of guess orbitals. Type: string; Possible Values: CORE, GWH, SAD, READ; Default: CORE. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file; IMPORT to import a guess previously exported from a CI computation (possibly using a different CI space). Type: string; Possible Values: UNIT, H0_BLOCK, DFILE, IMPORT; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI); DETCI (Expert) — Thi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html:39600,optimiz,optimization,39600,psi4manual/4.0b2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimization']
Performance,"MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (CCDENSITY); CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE); CCRESPONSE — Specifies the choice of representation of the electric dipole operator. Acceptable values are LENGTH for the usual length-gauge representation, VELOCITY for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or BOTH. Note that, for optical rotation calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: LENGTH. GEOM_MAXITER (OPTKING); OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF); FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to CORE except for geometry optimizations, in which case READ becomes the default after the first geometry step. Type: string; Possible Values: CORE, GWH, SAD, READ; Default: CORE. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file; IMPORT to import a guess previously exported from a CI computation (possibly using a different CI space). Type: string; Possible Va",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:51802,optimiz,optimization,51802,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,4,['optimiz'],['optimization']
Performance,"MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (CCDENSITY); CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE); CCRESPONSE — Specifies the choice of representation of the electric dipole operator. Acceptable values are LENGTH for the usual length-gauge representation, VELOCITY for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or BOTH. Note that, for optical rotation calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: LENGTH. GEOM_MAXITER (OPTKING); OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GUESS (SCF); SCF — The type of guess orbitals. Type: string; Possible Values: CORE, GWH, SAD, READ; Default: CORE. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file; IMPORT to import a guess previously exported from a CI computation (possibly using a different CI space). Type: string; Possible Values: UNIT, H0_BLOCK, DFILE, IMPORT; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI); DETCI (Expert) — Thi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:48574,optimiz,optimization,48574,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimization']
Performance,"MMMbohr, is operable, but it is discouraged; from being used directly. To run a computation in a constant dipole field, the PERTURB_H,; PERTURB_WITH and PERTURB_DIPOLE keywords can be used. As an; example, to add a dipole field of magnitude 0.05 a.u. in the y direction and; 0.1 a.u. in the z direction, we can use the following keywords:; set perturb_h true; set perturb_with dipole; set perturb_dipole [ 0, 0.05, 0.1 ]. Note that if any specified fields do not fall along a symmetry axis, the; symmetry of the calculation should be reduced accordingly; if in doubt run the; calculation in C1 symmetry. For examples of SCF and MP2 calculations in an; external field, see scf7 and dfmp2-grad5. Convergence and Algorithm Defaults¶. SCF algorithm and convergence criteria defaults by calculation type 1¶. Ab Initio Method; Calculation Type; E_CONVERGENCE; D_CONVERGENCE; SCF_TYPE. SCF of HF or DFT; energy; 6; 6; DF. optimization; 8; 8. frequency 7; 8; 8. SCF of post-HF; energy; 8; 8; PK 3. optimization; 10; 10. frequency 7; 10; 10. CC property 2; 10; 10. Post-SCF convergence criteria defaults by calculation type 4¶. Ab Initio Method; Calculation Type; E_CONVERGENCE 5; R_CONVERGENCE 6. post-HF of post-HF; energy; 6. optimization; 8. frequency 7; 8. CC property 2; 8. Footnotes. 1; Note that this table applies only the SCF module,; not to the final convergence criteria for post-HF methods or to methods; that use an alternate starting point, like MCSCF. SAPT computations, too,; set tighter values. 2(1,2); This applies to properties computed through the properties() function. 3; Post-HF methods that do not rely upon the usual 4-index AO integrals use a; density-fitted SCF reference. That is, for DF-MP2 and SAPT, the default SCF_TYPE is DF. 4; Note that this table applies to the final convergence criteria for; all the post-SCF modules that define a E_CONVERGENCE keyword. 5; The E_CONVERGENCE keyword is implemented for most post-SCF modules.; See a list beginning at E_CONVERGENCE. 6; The",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/scf.html:46805,optimiz,optimization,46805,psi4manual/1.6.x/scf.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/scf.html,1,['optimiz'],['optimization']
Performance,"MO basis to build beta NO's from, assumes restricted if not supplied (optional). :examples:. >>> # [1] Molden file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). >>> # [2] Molden file for CI/MCSCF computation using NO roots; >>> E, wfn = energy('ci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.opdm(0, 0, ""A"", True)). """"""; if density_a:; nmopi = wfn.nmopi(); nsopi = wfn.nsopi(). NO_Ra = psi4.Matrix(""NO Alpha Rotation Matrix"", nmopi, nmopi); NO_occa = psi4.Vector(nmopi); density_a.diagonalize(NO_Ra, NO_occa, psi4.DiagonalizeOrder.Descending); NO_Ca = psi4.Matrix(""Ca Natural Orbitals"", nsopi, nmopi); NO_Ca.gemm(False, False, 1.0, wfn.Ca(), NO_Ra, 0). if density_b:; NO_Rb = psi4.Matrix(""NO Beta Rotation Matrix"", nmopi, nmopi); NO_occa = psi4.Vector(nmopi); density_b.diagonalize(NO_Ra, NO_occa, psi4.DiagonalizeOrder.Descending); NO_Cb = psi4.Matrix(""Cb Natural Orbitals"", nsopi, nmopi); NO_Cb.gemm(False, False, 1.0, wfn.Cb(), NO_Rb, 0). else:; NO_occb = NO_occa; NO_Cb = NO_Ca; ; mw = psi4.MoldenWriter(wfn); mw.writeNO(filename, NO_Ca, NO_Cb, NO_occa, NO_occb). else:; try:; occa = wfn.occupation_a(); occb = wfn.occupation_a(); except AttributeError:; psi4.print_out(""\n!Molden warning: This wavefunction does not have occupation numbers.\n""; ""Writing zero's for occupation numbers\n\n""); occa = psi4.Vector(wfn.nmopi()); occb = psi4.Vector(wfn.nmopi()). # At this point occupation number will be difficult to build, lets set them to zero; mw = psi4.MoldenWriter(wfn); mw.write(filename, wfn.Ca(), wfn.Cb(), wfn.epsilon_a(), wfn.epsilon_b(), occa, occb). # Aliases; opt = optimize; freq = frequency; frequencies = frequency; prop = property. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; Psi4 [1.0.0 6a9a71b] » ; Module code ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver.html:88681,optimiz,optimize,88681,psi4manual/1.0.0/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver.html,1,['optimiz'],['optimize']
Performance,"MOM_OCC¶. The absolute indices of orbitals to excite from in MOM (+/- for alpha/beta). Type: array; Default: No Default. MOM_START¶. The iteration to start MOM on (or 0 for no MOM). Type: integer; Default: 0. MOM_VIR¶. The absolute indices of orbitals to excite to in MOM (+/- for alpha/beta). Type: array; Default: No Default. SOSCF¶. Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV¶. Second order convergence threshold. Cease microiterating at this value. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER¶. Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER¶. Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT¶. Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE¶. When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. STABILITY_ANALYSIS¶. Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. Fractional Occupation UHF/UKS¶. FRAC_DIIS¶. Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD¶. Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC¶. The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE¶. Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START¶. The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__scf-1.html:6587,perform,perform,6587,psi4manual/1.3.2/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__scf-1.html,6,['perform'],['perform']
Performance,"MOs. Type: boolean; Default: true. SPINADAPT_ENERGIES¶. Do print spin-adapted pair energies?. Type: boolean; Default: false. T2_COUPLED¶. Type: boolean; Default: false. T3_WS_INCORE¶. Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. Expert¶. AO_BASIS¶. The algorithm to use for the \(\left\langle VV||VV\right\rangle\) terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. FORCE_RESTART¶. Do restart the coupled-cluster iterations even if MO phases are screwed up?. Type: boolean; Default: false. WFN¶. Wavefunction type. Type: string; Default: NONE. table of contents. CCENERGY; General; ABCD; ANALYZE; BCCD_MAXITER; BRUECKNER_ORBS_R_CONVERGENCE; CACHELEVEL; CACHETYPE; CC_NUM_THREADS; CC_OS_SCALE; CC_SS_SCALE; DIIS; E_CONVERGENCE; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; MP2_AMPS_PRINT; MP2_OS_SCALE; MP2_SS_SCALE; NEW_TRIPLES; NUM_AMPS_PRINT; PAIR_ENERGIES_PRINT; PROPERTY; REFERENCE; RESTART; R_CONVERGENCE; SCSN_MP2; SCS_CCSD; SCS_MP2; SEMICANONICAL; SPINADAPT_ENERGIES; T2_COUPLED; T3_WS_INCORE. Expert; AO_BASIS; FORCE_RESTART; WFN. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices; Keywords by Module. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__ccenergy-1.html:6749,CACHE,CACHELEVEL,6749,psi4manual/1.3.2/autodir_options_c/module__ccenergy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__ccenergy-1.html,4,['CACHE'],"['CACHELEVEL', 'CACHETYPE']"
Performance,"MP2 TOTAL ENERGY. OMP2.5. ; setting keywords. OMP2.5 CORRELATION ENERGY. OMP2.5 DOUBLES ENERGY. OMP2.5 OPPOSITE-SPIN CORRELATION ENERGY. OMP2.5 REFERENCE CORRECTION ENERGY. OMP2.5 SAME-SPIN CORRELATION ENERGY. OMP2.5 TOTAL ENERGY. OMP3. ; setting keywords. theory. OMP3 CORRELATION ENERGY. OMP3 DOUBLES ENERGY. OMP3 OPPOSITE-SPIN CORRELATION ENERGY. OMP3 REFERENCE CORRECTION ENERGY. OMP3 SAME-SPIN CORRELATION ENERGY. OMP3 TOTAL ENERGY. OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8]. ONE-ELECTRON ENERGY. one_electron_integrals() (psi4.core.MintsHelper method). OneBodyAOInt (class in psi4.core). OneBodySOInt (class in psi4.core). onel_Hx() (psi4.core.HF method). ONEPDM (DFMP2). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DCT). (DETCI). opdm() (psi4.core.CIWavefunction method). OPDM_ONLY (CCDENSITY). OPDM_RELAX (CCDENSITY). (DFMP2). open() (psi4.core.IO method). open_check() (psi4.core.IO method). operate() (psi4.core.SymmetryOperation method). opt(). . see optimize(). opt() (in module psi4.driver). OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_RESTART (OPTKING). OPT_TYPE (OPTKING). OPTIMIZATION ITERATIONS. OptimizationConvergenceError. optimize(). ; setting keywords. optimize() (in module psi4.driver). optimize_geometric() (in module psi4.driver). option_exists_in_module() (in module psi4.core). Options (class in psi4.core). options() (psi4.core.Wavefunction method). options_to_python() (in module psi4.core). OptionsState (class in psi4.driver.p4util). OptionsStateCM() (in module psi4.driver.p4util). OptionState (class in psi4.driver.p4util). ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCT). orbital_values() (psi4.core.PointFunctions method). ORBITALS_WRITE (SCF). OrbitalSpace (class in psi4.core). order() (psi4.core.CharacterT",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/genindex.html:87370,optimiz,optimize,87370,psi4manual/master/genindex.html,https://psicode.org,https://psicode.org/psi4manual/master/genindex.html,2,['optimiz'],['optimize']
Performance,"MP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/testsuite-1.html:26036,perform,performed,26036,psi4manual/1.0.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/testsuite-1.html,4,['perform'],['performed']
Performance,"MP2 cc-pVDZ energy for the NO radical. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/testsuite-1.html:24391,Optimiz,Optimize,24391,psi4manual/1.0.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/testsuite-1.html,4,['Optimiz'],['Optimize']
Performance,"MP2 cc-pVDZ gradient for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. pywrap-db2; Database calculation, run in sow/reap mode. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dft-custom; DFT custom functional test. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cubeprop-esp; RHF orbitals and density for water. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:43751,perform,performed,43751,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['perform'],['performed']
Performance,"MP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC); DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCFT); DCFT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:113550,optimiz,optimization,113550,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,8,['optimiz'],['optimization']
Performance,"MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/kw-2; testing best practices options, part ii. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd_t_; sing",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:2176,optimiz,optimization,2176,psi4manual/master/autodoc_testsuite_cfour.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html,1,['optimiz'],['optimization']
Performance,MP2; RHF/UHF/ROHF/RKS/UKS; —; MP2_TYPE CD. omp3; Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE CONV. Density-Fitted Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —; MP_TYPE CD. omp2.5; Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE CONV. Density-Fitted Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; —; MP_TYPE CD. olccd; Orbital-Optimized Linear CCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE CONV. Density-Fitted Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE DF. Cholesky-Decomposed Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; —; CC_TYPE CD. Spin-Component-Scaled Orbital-Optimized MP capabilities of OCC/DFOCC modules¶. name; calls method; Energy; Gradient. scs-omp3; Spin-Component Scaled Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —. sos-omp3; Spin-Opposite Scaled Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —. scs(n)-omp3; A special version of SCS-OMP3 for nucleobase interactions; RHF/UHF/ROHF/RKS/UKS; —. scs-omp3-vdw; A special version of SCS-OMP3 (from ethene dimers); RHF/UHF/ROHF/RKS/UKS; —. sos-pi-omp3; A special version of SOS-OMP3 for -systems; RHF/UHF/ROHF/RKS/UKS; —. scs-omp2; Spin-Component Scaled Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —. sos-omp2; Spin-Opposite Scaled Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —. scs(n)-omp2; A special version of SCS-OMP2 for nucleobase interactions; RHF/UHF/ROHF/RKS/UKS; —. scs-omp2-vdw; A special version of SCS-OMP2 (from ethene dimers); RHF/UHF/ROHF/RKS/UKS; —. sos-pi-omp2; A special version of SOS-OMP2 for -systems; RHF/UHF/ROHF/RKS/UKS; —. Basic OCC Keywords¶. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv do,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/occ-1.html:7969,Optimiz,Optimized,7969,psi4manual/1.0.0/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/occ-1.html,2,['Optimiz'],['Optimized']
Performance,MP2; RHF/UHF/ROHF/RKS/UKS; —; MP2_TYPE CD. omp3; Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE CONV. Density-Fitted Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —; MP_TYPE CD. omp2.5; Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE CONV. Density-Fitted Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; —; MP_TYPE CD. olccd; Orbital-Optimized Linear CCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE CONV. Density-Fitted Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE DF. Cholesky-Decomposed Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; —; CC_TYPE CD. Spin-Component-Scaled Orbital-Optimized MP capabilities of OCC/DFOCC modules¶. name; calls method; Energy; Gradient. scs-omp3; Spin-Component Scaled Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —. sos-omp3; Spin-Opposite Scaled Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —. scs(n)-omp3; A special version of SCS-OMP3 for nucleobase interactions; RHF/UHF/ROHF/RKS/UKS; —. scs-omp3-vdw; A special version of SCS-OMP3 (from ethene dimers); RHF/UHF/ROHF/RKS/UKS; —. sos-pi-omp3; A special version of SOS-OMP3 for \(\pi\)-systems; RHF/UHF/ROHF/RKS/UKS; —. scs-omp2; Spin-Component Scaled Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —. sos-omp2; Spin-Opposite Scaled Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —. scs(n)-omp2; A special version of SCS-OMP2 for nucleobase interactions; RHF/UHF/ROHF/RKS/UKS; —. scs-omp2-vdw; A special version of SCS-OMP2 (from ethene dimers); RHF/UHF/ROHF/RKS/UKS; —. sos-pi-omp2; A special version of SOS-OMP2 for \(\pi\)-systems; RHF/UHF/ROHF/RKS/UKS; —. Basic OCC Keywords¶. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types.,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/occ-1.html:10812,Optimiz,Optimized,10812,psi4manual/1.1.0/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/occ-1.html,11,['Optimiz'],['Optimized']
Performance,"MP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. mbis-2; MBIS calculation on OH- (Expanded Arrays). dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. pywrap-cbs1; Various basis set extrapolation tests. cc52; CCSD Response for H2O2. mints-benchmark; run some BLAS benchmarks. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. freq-masses; check nonphysical masses possible. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-gue",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:30250,optimiz,optimization,30250,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimization']
Performance,MPS_PRINT — PSI4 [beta5] documentation; MP2_OS_SCALE — PSI4 [beta5] documentation; MP2_SS_SCALE — PSI4 [beta5] documentation; NEGLECT_DISTANT_PAIR — PSI4 [beta5] documentation; NEW_TRIPLES — PSI4 [beta5] documentation; NUM_AMPS_PRINT — PSI4 [beta5] documentation; PAIR_ENERGIES_PRINT — PSI4 [beta5] documentation; PROPERTY — PSI4 [beta5] documentation; R_CONVERGENCE — PSI4 [beta5] documentation; REFERENCE — PSI4 [beta5] documentation; RESTART — PSI4 [beta5] documentation; ROOTS_PER_IRREP — PSI4 [beta5] documentation; SCREEN_INTS — PSI4 [beta5] documentation; SCS — PSI4 [beta5] documentation; SCS_CCSD — PSI4 [beta5] documentation; SCS_MP2 — PSI4 [beta5] documentation; SCS_N — PSI4 [beta5] documentation; SCSN_MP2 — PSI4 [beta5] documentation; SEMICANONICAL — PSI4 [beta5] documentation; SPINADAPT_ENERGIES — PSI4 [beta5] documentation; T2_COUPLED — PSI4 [beta5] documentation; T3_WS_INCORE — PSI4 [beta5] documentation; WFN — PSI4 [beta5] documentation; ABCD — PSI4 [beta5] documentation; CACHELEVEL — PSI4 [beta5] documentation; CACHETYPE — PSI4 [beta5] documentation; CC_NUM_THREADS — PSI4 [beta5] documentation; CC3_FOLLOW_ROOT — PSI4 [beta5] documentation; COLLAPSE_WITH_LAST — PSI4 [beta5] documentation; COMPLEX_TOLERANCE — PSI4 [beta5] documentation; E_CONVERGENCE — PSI4 [beta5] documentation; EOM_GUESS — PSI4 [beta5] documentation; EOM_REFERENCE — PSI4 [beta5] documentation; EXCITATION_RANGE — PSI4 [beta5] documentation; FULL_MATRIX — PSI4 [beta5] documentation; LOCAL — PSI4 [beta5] documentation; LOCAL_CUTOFF — PSI4 [beta5] documentation; LOCAL_DO_SINGLES — PSI4 [beta5] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta5] documentation; LOCAL_GHOST — PSI4 [beta5] documentation; LOCAL_METHOD — PSI4 [beta5] documentation; LOCAL_PRECONDITIONER — PSI4 [beta5] documentation; LOCAL_WEAKP — PSI4 [beta5] documentation; MAXITER — PSI4 [beta5] documentation; NEW_TRIPLES — PSI4 [beta5] documentation; NUM_AMPS_PRINT — PSI4 [beta5] documentation; PROP_ROOT — PSI4 [beta5] documentation; ,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1545087,CACHE,CACHELEVEL,1545087,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,"MQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_EVERY keyword. Transition States and Reaction Paths¶. Calculate a starting Hessian and optimize the “transition state” of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails):; molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum:; molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Constrained Optimizations¶. Optimize a geometry (HOOH) at a frozen dihedral angle of 90 degrees.; molecule {; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 90.0; }. set optking {; frozen_dihedral = (""; 1 2 3 4; ""); }; optimize('scf'). To instead freeze the two O-H bond distances; set optking {; frozen_distance = (""; 1 2; 3 4; ""); }. For bends, the corresponding keyword is “frozen_bend”. To freeze the cartesian coordinates of atom 2. freeze_list = """"""; 2 xyz; """"""; set optking frozen_cartesian $freeze_list. To freeze only the y coordinates of atoms 2 and 3. freeze_list = """"""; 2 y; 3 y; """"""; set optking frozen_cartesian $freeze_list. To optimize toward a value of 0.95 Angstroms for the distance between; atoms 1 and 3, as well as that between 2 and 4. set optking {; ranged_distance = (""; 1 3 0.949 0.95; 2 4 0.949 0.95; ""); }. Note; The effect of the frozen and ranged keywords is generally independent of; how the geometry of the molecule was input (whether Z-matrix or Cartesian, etc.)..; At this time; however, enforcing Cartesian constraints when using a zmatrix for; molecular input is not supported. Freezing or constraining Cartesian coordinates; requires Cartesian molecule input. If ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/optking.html:5798,optimiz,optimize,5798,psi4manual/1.7.x/optking.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/optking.html,3,['optimiz'],['optimize']
Performance,"MQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_EVERY keyword. Transition States, Reaction Paths, and Constrained Optimizations¶. Calculate a starting Hessian and optimize the “transition state” of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails):; molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum:; molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Optimize a geometry (HOOH) at a frozen dihedral angle of 90 degrees.; molecule {; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 90.0; }. set optking {; frozen_dihedral = (""; 1 2 3 4; ""); }; optimize('scf'). To instead freeze the two O-H bond distances; set optking {; frozen_distance = (""; 1 2; 3 4; ""); }. For bends, the corresponding keyword is “frozen_bend”. To freeze the cartesian coordinates of atom 2. freeze_list = """"""; 2 xyz; """"""; set optking frozen_cartesian $freeze_list. To freeze only the y coordinates of atoms 2 and 3. freeze_list = """"""; 2 y; 3 y; """"""; set optking frozen_cartesian $freeze_list. To optimize toward a value of 0.95 Angstroms for the distance between; atoms 1 and 3, as well as that between 2 and 4. set optking {; fixed_distance = (""; 1 3 0.95; 2 4 0.95; ""); }. Note that the effect of the frozen and fixed keywords is independent of; how the geometry of the molecule was input (whether Z-matrix or cartesian, etc.).. To scan the potential energy surface by optimizing at several fixed values; of the dihedral angle of HOOH. molecule hooh {; 0 1; H 0.850718 0.772960 0.563468; O 0.120432 0.684669 -0.035503; O -0.120432 -0.684669 -0.035503;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/optking-1.html:6373,optimiz,optimize,6373,psi4manual/1.4.0/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/optking-1.html,5,['optimiz'],['optimize']
Performance,"MQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_EVERY keyword. Transition States, Reaction Paths, and Constrained Optimizations¶. Calculate a starting Hessian and optimize the “transition state” of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails):; molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum:; molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Optimize a geometry (HOOH) at a frozen dihedral angle of 90 degrees.; molecule {; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 90.0; }. set optking {; frozen_dihedral = (""; 1 2 3 4; ""); }; optimize('scf'). To instead freeze the two O-H bond distances; set optking {; frozen_distance = (""; 1 2; 3 4; ""); }. For bends, the corresponding keyword is “frozen_bend”. To freeze the cartesian coordinates of atom 2; freeze_list = """"""; 2 xyz; """"""; set optking frozen_cartesian $freeze_list. To freeze only the y coordinates of atoms 2 and 3; freeze_list = """"""; 2 y; 3 y; """"""; set optking frozen_cartesian $freeze_list. To optimize toward a value of 0.95 Angstroms for the distance between; atoms 1 and 3, as well as that between 2 and 4; set optking {; fixed_distance = (""; 1 3 0.95; 2 4 0.95; ""); }. Note that the effect of the frozen and fixed keywords is independent of; how the geometry of the molecule was input (whether Z-matrix or cartesian, etc.).. To scan the potential energy surface by optimizing at several fixed values; of the dihedral angle of HOOH.; molecule hooh {; 0 1; H 0.850718 0.772960 0.563468; O 0.120432 0.684669 -0.035503; O -0.120432 -0.684669 -0.035503",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/optking-1.html:6385,optimiz,optimize,6385,psi4manual/1.0.0/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/optking-1.html,2,['optimiz'],['optimize']
Performance,"MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. df",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:15544,optimiz,optimization,15544,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,4,['optimiz'],['optimization']
Performance,"MULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital upda",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/dct.html:13615,perform,perform,13615,psi4manual/master/dct.html,https://psicode.org,https://psicode.org/psi4manual/master/dct.html,18,"['optimiz', 'perform']","['optimization', 'perform']"
Performance,"MYSCRATCH) to set the scratch directory;; the following code will do that:; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be send to specific locations. For example, file 32 is; the checkpoint file that the user might want to retain in the working directory; (i.e., where PSI4 was launched from) for restart purposes. This is; accomplished by the commands below:; psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the PSI4 instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously.; To override any of these defaults for selected jobs, simply place the; appropriate commands from the snippets above in the input file itself. During; excecution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed. Executing PSI4 with the psi4 -m (for; messy) flag will prevent files being deleted at the end of the run:; psi4 -m. Alternately, the scratch directory can be set through the environment; variable PSI_SCRATCH (overrides ~/.psi4rc settings).; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and Boost; Threads for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/external-1.html:3427,load,loaded,3427,psi4manual/4.0b2/external-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/external-1.html,2,['load'],['loaded']
Performance,"M_ONLY (CCDENSITY). OPDM_RELAX (CCDENSITY). (DFMP2). open() (psi4.core.IO method). open_check() (psi4.core.IO method). operate() (psi4.core.SymmetryOperation method). opt(). . see optimize(). opt() (in module psi4.driver). OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_RESTART (OPTKING). OPT_TYPE (OPTKING). OPTIMIZATION ITERATIONS. OptimizationConvergenceError. optimize(). ; setting keywords. optimize() (in module psi4.driver). optimize_geometric() (in module psi4.driver). option_exists_in_module() (in module psi4.core). Options (class in psi4.core). options() (psi4.core.Wavefunction method). options_to_python() (in module psi4.core). OptionsState (class in psi4.driver.p4util). OptionsStateCM() (in module psi4.driver.p4util). OptionState (class in psi4.driver.p4util). ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCT). orbital_values() (psi4.core.PointFunctions method). ORBITALS_WRITE (SCF). OrbitalSpace (class in psi4.core). order() (psi4.core.CharacterTable method). (psi4.core.PointGroup method). ordered_params (psi4.driver.EmpiricalDispersion attribute). (psi4.driver.procrouting.empirical_dispersion.EmpiricalDispersion attribute). OREMP. ; setting keywords. OREMP2 CORRELATION ENERGY. OREMP2 DOUBLES ENERGY. OREMP2 OPPOSITE-SPIN CORRELATION ENERGY. OREMP2 REFERENCE CORRECTION ENERGY. OREMP2 SAME-SPIN CORRELATION ENERGY. OREMP2 SINGLES ENERGY. OREMP2 TOTAL ENERGY. orientation() (psi4.core.MolecularGrid method). orientation_fixed() (psi4.core.Molecule method). origin (psi4.core.OneBodyAOInt attribute). original_coef() (psi4.core.GaussianShell method). ORTH_TYPE (DFOCC). (OCC). OS_SCALE (OCC). outfile_name() (in module psi4.core). output. ; cbs(). database(). geometry optimization. SAPT. vibrational analysis. overlap() (psi4.core.FISAPT method). overlap_3c() ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/genindex.html:88183,Optimiz,Optimized,88183,psi4manual/master/genindex.html,https://psicode.org,https://psicode.org/psi4manual/master/genindex.html,2,['Optimiz'],['Optimized']
Performance,"Matrix)arg3]) -> Matrix; | ; | cholesky_factorize(...); | cholesky_factorize( (Matrix)arg1) -> None :; | docstring; | ; | clone(...); | clone( (Matrix)arg1) -> Matrix :; | docstring; | ; | coldim(...); | coldim( (Matrix)arg1) -> Dimension :; | docstring; | ; | cols(...); | cols( (Matrix)arg1, (int)arg2) -> int :; | docstring; | ; | copy_lower_to_upper(...); | copy_lower_to_upper( (Matrix)arg1) -> None :; | docstring; | ; | copy_upper_to_lower(...); | copy_upper_to_lower( (Matrix)arg1) -> None :; | docstring; | ; | diagonalize(...); | diagonalize( (Matrix)arg1, (Matrix)arg2, (Vector)arg3, (DiagonalizeOrder)arg4) -> None :; | docstring; | ; | gemm(...); | gemm( (Matrix)arg1, (bool)arg2, (bool)arg3, (float)arg4, (Matrix)arg5, (Matrix)arg6, (float)arg7) -> None :; | docstring; | ; | get(...); | get( (Matrix)arg1, (int)arg2, (int)arg3 [, (int)arg4]) -> float :; | docstring; | ; | identity(...); | identity( (Matrix)arg1) -> None :; | docstring; | ; | invert(...); | invert( (Matrix)arg1) -> None :; | docstring; | ; | load(...); | load( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | load_mpqc(...); | load_mpqc( (Matrix)arg1, (str)arg2) -> None :; | docstring; | ; | name(...); | name( (Matrix)arg1) -> str :; | docstring; | ; | nirrep(...); | nirrep( (Matrix)arg1) -> int :; | docstring; | ; | partial_cholesky_factorize(...); | partial_cholesky_factorize( (Matrix)arg1, (float)arg2, (bool)arg3) -> Matrix :; | docstring; | ; | power(...); | power( (Matrix)arg1, (float)arg2, (float)arg3) -> Dimension :; | docstring; | ; | print_out(...); | print_out( (Matrix)arg1) -> None :; | docstring; | ; | project_out(...); | project_out( (Matrix)arg1, (Matrix)arg2) -> None :; | docstring; | ; | remove_symmetry(...); | remove_symmetry( (Matrix)arg1, (Matrix)arg2, (Matrix)arg3) -> None :; | docstring; | ; | rms(...); | rms( (Matrix)arg1) -> float :; | docstring; | ; | rowdim(...); | rowdim( (Matrix)arg1) -> Dimension :; | docstring; | ; | rows(...); | rows( (Matrix)arg1, (int)arg2) -> i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/psimod-1.html:41217,load,load,41217,psi4manual/4.0b3/psimod-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimod-1.html,8,['load'],['load']
Performance,"Matrix¶; docstring. so_nabla(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]¶; docstring. so_overlap(self: psi4.core.MintsHelper) → psi4.core.Matrix¶; docstring. so_potential(self: psi4.core.MintsHelper, arg0: bool) → psi4.core.Matrix¶; docstring. so_quadrupole(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]¶; docstring. so_traceless_quadrupole(self: psi4.core.MintsHelper) → List[psi4.core.Matrix]¶; docstring. sobasisset(self: psi4.core.MintsHelper) → psi::SOBasisSet¶; docstring. class psi4.core.MoldenWriter¶; Bases: object; docstring. write(self: psi4.core.MoldenWriter, arg0: str, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix, arg3: psi4.core.Vector, arg4: psi4.core.Vector, arg5: psi4.core.Vector, arg6: psi4.core.Vector, arg7: bool) → None¶; docstring. class psi4.core.Molecule¶; Bases: object; Class to store the elements, coordinates, fragmentation pattern, basis sets, charge, multiplicity, etc. of a molecule. BFS()¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. Z(self: psi4.core.Molecule, arg0: int) → float¶; Nuclear charge of atom arg1 (0-indexed). activate_all_fragments(self: psi4.core.Molecule) → None¶; Sets all fragments in the molecule to be active. add_atom(self: psi4.core.Molecule, arg0: int, arg1: float, arg2: float, arg3: float, arg4: str, arg5: float, arg6: float, arg7: int) → None¶; Adds to Molecule arg0 an atom with atomic number arg1, Cartesian coordinates in Bohr (arg2, arg3, arg4), atomic symbol arg5, mass arg6, charge arg7 (optional), and lineno arg8 (optional). atom_at_position(self: psi4.core.Molecule, arg0: float, arg1: float) → int¶; Tests to see if an atom is at the position arg2 with a given tolerance arg3. center_of_mass(self: psi4.core.Molecule) → psi4.core.Vector3¶; Computes center of mass of molecule (does not translate mol",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/psi4api-1.html:77906,Perform,Perform,77906,psi4manual/1.1.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/psi4api-1.html,2,['Perform'],['Perform']
Performance,"MethodError(['select_ccsd_at_', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_cisd(name, **kwargs):; """"""Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CI_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only detci/fnocc. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'FNOCC']:; func = run_cepa; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module in ['', 'DETCI']:; func = run_detci. if func is None:; raise ManagedMethodError(['select_cisd', name, 'CI_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_mp4(name, **kwargs):; """"""Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only detci/fnocc. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'FNOCC']:; func = run_fnocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI': # no default for this case; func = run_detci; elif module in ['']:; core.print_out(""""""\nThis method is available inefficiently as a """"""; """"""byproduct of a CISDT computation.\n Add ""set """"""; """"""qc_module detci"" to input to access this route.\n""""""). if func is None:; raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). [docs]def scf_wavefunction_factory(name, ref_wfn, reference):; """"""Builds the correct wave",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/procrouting/proc.html:25172,perform,performance,25172,psi4manual/1.2.1/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/procrouting/proc.html,1,['perform'],['performance']
Performance,"MethodError(['select_ccsd_at_', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_cisd(name, **kwargs):; """"""Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CI_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only detci/fnocc. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'FNOCC']:; func = run_cepa; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module in ['', 'DETCI']:; func = run_detci. if func is None:; raise ManagedMethodError(['select_cisd', name, 'CI_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_mp4(name, **kwargs):; """"""Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only detci/fnocc. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'FNOCC']:; func = run_fnocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI': # no default for this case; func = run_detci; elif module in ['']:; core.print_out(""""""\nThis method is available inefficiently as a """"""; """"""byproduct of a CISDT computation.\n Add ""set """"""; """"""qc_module detci"" to input to access this route.\n""""""). if func is None:; raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). [docs]def scf_wavefunction_factory(name, ref_wfn, reference, **kwargs):; """"""Builds the co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/procrouting/proc.html:25094,perform,performance,25094,psi4manual/1.3.2/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/procrouting/proc.html,1,['perform'],['performance']
Performance,"MethodError(['select_ccsd_at_', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_cisd(name, **kwargs):; """"""Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CI_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only detci/fnocc. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'FNOCC']:; func = run_cepa; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module in ['', 'DETCI']:; func = run_detci. if func is None:; raise ManagedMethodError(['select_cisd', name, 'CI_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_mp4(name, **kwargs):; """"""Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only detci/fnocc. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'FNOCC']:; func = run_fnocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI': # no default for this case; func = run_detci; elif module in ['']:; core.print_out(""""""\nThis method is available inefficiently as a """"""; """"""byproduct of a CISDT computation.\n Add ""set """"""; """"""qc_module detci"" to input to access this route.\n""""""). if func is None:; raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). [docs]def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html:25030,perform,performance,25030,psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html,1,['perform'],['performance']
Performance,"Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728].; The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CASCI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the code will still run, but some relevant; determinants will be missing, and the answer obtained will be an approximation; to the true Mk-MRCC procedure.; The PSIMRCC code itself does not perform orbital optimization. Hence, the; references used might be considered CASCI references, but not CASSCF; references (CASSCF implies that the orbitals have been optimized specifically; to minimize the energy of the CASCI reference). However, if one wishes to; use two-configuration self-consistent-field (TCSCF) orbitals, those can; be obtained using the multi-configuration self-consistent-field (MCSCF); component of PSIMRCC (specifying REFERENCE to be twocon).; This is suitable for describing diradicals. Otherwise, one may use RHF or; ROHF orbitals as input to PSIMRCC. Due to a current limitation in the code,; one must obtain orbitals using PSIMRCC’s MCSCF module regardless of what; orbital type is chosen, twocon, rhf, or rohf. An example of the; MCSCF input is given below.; PSIMRCC is most commonly used for low-spin cases (singlets or open-shell; singlets). It is capable of performing computations on higher spin states; (e.g., triplets), but in general, not all the required ma",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/psimrcc.html:3136,perform,perform,3136,psi4manual/master/psimrcc.html,https://psicode.org,https://psicode.org/psi4manual/master/psimrcc.html,8,"['optimiz', 'perform']","['optimization', 'perform']"
Performance,"Mod.IOManager.shared_object().set_specific_retention(1, True); PsiMod.IOManager.shared_object().set_specific_path(1, './'); frequencies(name, **kwargs); steps_since_last_hessian = 0; PsiMod.set_gradient(G); PsiMod.set_global_option('CART_HESS_READ', True); else:; PsiMod.set_global_option('CART_HESS_READ', False); steps_since_last_hessian += 1. # print 'cart_hess_read', PsiMod.get_global_option('CART_HESS_READ'); # Take step; if PsiMod.optking() == PsiMod.PsiReturnType.EndLoop:; print 'Optimizer: Optimization complete!'; PsiMod.get_active_molecule().print_in_input_format(); # Check if user wants to see the intcos; if so, don't delete them.; if (PsiMod.get_option('INTCOS_GENERATE_EXIT') == False):; PsiMod.opt_clean(); PsiMod.clean(). # S/R: Clean up opt input file; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; fmaster = open('OPT-master.in', 'w'); fmaster.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); fmaster.write('# Optimization complete!\n\n'); fmaster.close(); return thisenergy. # S/R: Preserve opt data file for next pass and switch modes to get new displacements; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; kwargs['opt_datafile'] = get_psifile(1); kwargs['mode'] = 'sow'. n += 1. PsiMod.print_out('\tOptimizer: Did not converge!'); return 0.0. ## Aliases ##; opt = optimize. [docs]def parse_arbitrary_order(name):; r""""""Function to parse name string into a method family like CI or MRCC and specific; level information like 4 for CISDTQ or MRCCSDTQ. """"""; namelower = name.lower(). # matches 'mrccsdt(q)'; if namelower.startswith('mrcc'):; # grabs 'sdt(q)'; ccfullname = namelower[4:]. # A negative order indicates perturbative method; methods = {; 'sd' : { 'method' : 1, 'order' : 2, 'fullname' : 'CCSD' },; 'sdt' : { 'method' : 1, 'order' : 3, 'fullname' : 'CCSDT' },; 'sdtq' : { 'method' : 1, 'order' : 4, 'fullname' : 'CCSDTQ' },; 'sdtqp' : { 'method' : 1, 'order' : 5, 'fullname' : 'CCSDTQP' },; 'sdtqph",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/driver.html:38505,Optimiz,Optimization,38505,psi4manual/4.0b2/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/driver.html,1,['Optimiz'],['Optimization']
Performance,"Most common PSI4 options can be; set in a globals section like this. If an option needs to be visible; only to one part of the program (e.g., we only want to increase the; energy convergence in the SCF code, but not the rest of the; code), it can be placed in a section of input visible to that part of the; program (e.g., set scf e_convergence 1.0E-8).; Back to our SAPT example, we have found that for basic-level SAPT; computations (i.e., SAPT0), a good error cancellation is found; [Hohenstein:2012:WIREs] with the jun-cc-pVDZ basis (this is the; usual aug-cc-pVDZ basis, but without diffuse functions on hydrogen and; without diffuse functions on heavy atoms) [Papajak:2011:10]. So,; we’ll use that as our standard basis set. The SAPT code is designed to; use density fitting techniques, because they introduce minimal errors; while providing much faster computations [Hohenstein:2010:184111]; [Hohenstein:2010:014101]. Since we’re using density fitting for the SAPT,; we might as well also use it for the Hartree–Fock computations that are; performed as part of the SAPT. We can specify that with; scf_type DF.; Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, PSI4 is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that PSI4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/tutorial-1.html:11419,perform,performed,11419,psi4manual/4.0b4/tutorial-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/tutorial-1.html,4,['perform'],['performed']
Performance,"Most common Psi4 options can be; set in a globals section like this. If an option needs to be visible; only to one part of the program (e.g., we only want to increase the; energy convergence in the SCF code, but not the rest of the; code), it can be placed in a section of input visible to that part of the; program (e.g., set scf e_convergence 1.0E-8).; Back to our SAPT example, we have found that for basic-level SAPT; computations (i.e., SAPT0), a good error cancellation is found; [Hohenstein:2012:WIREs] with the jun-cc-pVDZ basis (this is the; usual aug-cc-pVDZ basis, but without diffuse functions on hydrogen and; without diffuse functions on heavy atoms) [Papajak:2011:10]. So,; we’ll use that as our standard basis set. The SAPT code is designed to; use density fitting techniques, because they introduce minimal errors; while providing much faster computations [Hohenstein:2010:184111]; [Hohenstein:2010:014101]. Since we’re using density fitting for the SAPT,; we might as well also use it for the Hartree–Fock computations that are; performed as part of the SAPT. We can specify that with; scf_type DF.; Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, Psi4 is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that Psi4 correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree–Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure.; To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with freeze_core True. The SAPT; procedure is invoked with the simple call, energy('sapt0'). This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/tutorial-1.html:12102,perform,performed,12102,psi4manual/1.0.0/tutorial-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/tutorial-1.html,2,['perform'],['performed']
Performance,"N for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. OMEGA¶. Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. GAUGE¶. Specifies the choice of representation of the electric dipole operator. For polarizability, this keyword is ignored and LENGTH gauge is computed. For optical rotation and raman optical activity, this keyword is active, and acceptable values are LENGTH for the usual length-gauge representation, VELOCITY``(default) for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or ``BOTH. Note that, for optical rotation and raman optical activity calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: VELOCITY. table of contents. CC: Coupled Cluster Theory; Basic Keywords; REFERENCE; R_CONVERGENCE; MAXITER; BRUECKNER_ORBS_R_CONVERGENCE; RESTART; CACHELEVEL; CACHETYPE; NUM_AMPS_PRINT; MP2_AMPS_PRINT. Larger Calculations; Excited State Coupled Cluster Calculations; ROOTS_PER_IRREP; E_CONVERGENCE; SINGLES_PRINT; SCHMIDT_ADD_RESIDUAL_TOLERANCE; EOM_GUESS. Linear Response (CCLR) Calculations; PROPERTY; OMEGA; GAUGE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Theoretical Methods: SCF to FCI; CC: Coupled Cluster Theory. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/cc.html:13068,CACHE,CACHELEVEL,13068,psi4manual/master/cc.html,https://psicode.org,https://psicode.org/psi4manual/master/cc.html,2,['CACHE'],"['CACHELEVEL', 'CACHETYPE']"
Performance,"N frequencies, compared to finite difference values. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. dft-reference; MP2 with a PBE0 reference computation. dft-custom; DFT custom functional test. dct10; The multiple guesses for DCT amplitudes for ODC-12. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mbis-4; MBIS calculation on NaCl. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. fsapt-ext-abc; FSAPT with external charge on trimer. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. stability3; Test LDA stability analysis against QChem. scf-level-shift-cuhf; SCF level shift on a CUHF computation. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:41001,perform,performed,41001,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['perform'],['performed']
Performance,"N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. INTCOS_GENERATE_EXIT¶. Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. Optimizing Minima¶; First, define the molecule and basis in the input.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; set step_type nr; optimize('scf'). Optimize using energy points instead of gradients:; optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:; set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:; set full_hess_every 1; optimize('scf'). Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_EVERY keyword. Transition States, Reaction Paths, and Constrained Optimizations¶. Calculate a starting Hessian and optimize the “transition state” of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails):; molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/optking-1.html:5024,Optimiz,Optimize,5024,psi4manual/4.0b3/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optking-1.html,20,"['Optimiz', 'optimiz']","['Optimize', 'optimize']"
Performance,"N, MCSCF, GENERAL; Default: RHF. REFERENCE (SCF); SCF — Reference wavefunction type. Cfour Interface: Keyword translates into CFOUR_REFERENCE. Type: string; Possible Values: RHF, ROHF, UHF, CUHF, RKS, UKS; Default: RHF. REFERENCE_SYM (DETCI); DETCI (Expert) — Irrep for CI vectors; -1 = find automatically. This option allows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC); DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC); DFOCC — Do use regularized denominators?. Type: boolean; Default: false. RELATIVISTIC (GLOBALS); GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do r",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:195100,perform,performing,195100,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,2,['perform'],['performing']
Performance,"N, MCSCF, GENERAL; Default: RHF. REFERENCE (SCF); SCF — Reference wavefunction type. Cfour Interface: Keyword translates into CFOUR_REFERENCE. Type: string; Possible Values: RHF, ROHF, UHF, CUHF, RKS, UKS; Default: RHF. REFERENCE_SYM (DETCI); DETCI (Expert) — Irrep for CI vectors; -1 = find automatically. This option allows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC); DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC); DFOCC — Do use regularized denominators?. Type: boolean; Default: false. RELATIVISTIC (GLOBALS); GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do res",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:193417,perform,performing,193417,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,4,['perform'],['performing']
Performance,"NAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_RESTART (OPTKING)¶OPTKING — Restart the optimization from optking’s written history. Type: double; Default: 0. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC)¶OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html:187480,optimiz,optimize,187480,psi4manual/1.7.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html,3,['optimiz'],['optimize']
Performance,"NATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the and evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. SAPT_OS_SCALE¶. The scale factor used for opposite-spin pairs in SCS computations. SS/OS decomposition performed for and terms. Type: double; Default: 6.0/5.0. SAPT_SS_SCALE¶. The scale factor used for same-spin pairs in SCS computations. SS/OS decomposition performed for and terms. Type: double; Default: 1.0/3.0. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies. Publications resulting; from the use of the higher-order SAPT code should cite the following:; [Hohenstein:2010:014101].; A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold arrays in core. With this requirement; computations on the adenine-thymine complex can be performed with an; aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the higly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAPT¶. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to BASIS-RI. Type: string; Possible Values: basis st",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/sapt-1.html:8016,perform,perform,8016,psi4manual/4.0b2/sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sapt-1.html,2,['perform'],['perform']
Performance,"NATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the and evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. SAPT_OS_SCALE¶. The scale factor used for opposite-spin pairs in SCS computations. SS/OS decomposition performed for and terms. Type: double; Default: 6.0/5.0. SAPT_SS_SCALE¶. The scale factor used for same-spin pairs in SCS computations. SS/OS decomposition performed for and terms. Type: double; Default: 1.0/3.0. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies. Publications resulting; from the use of the higher-order SAPT code should cite the following:; [Hohenstein:2010:014101].; A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold arrays in core. With this requirement; computations on the adenine-thymine complex can be performed with an; aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the higly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAPT¶. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/sapt-1.html:8050,perform,perform,8050,psi4manual/4.0b3/sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/sapt-1.html,6,['perform'],['perform']
Performance,NDIF — PSI4 [beta4] documentation; FNOCC — PSI4 [beta4] documentation; GLOBALS — PSI4 [beta4] documentation; LMP2 — PSI4 [beta4] documentation; MCSCF — PSI4 [beta4] documentation; MINTS — PSI4 [beta4] documentation; MRCC — PSI4 [beta4] documentation; OCC — PSI4 [beta4] documentation; OPTKING — PSI4 [beta4] documentation; PSIMRCC — PSI4 [beta4] documentation; RESPONSE — PSI4 [beta4] documentation; SAPT — PSI4 [beta4] documentation; SCF — PSI4 [beta4] documentation; STABILITY — PSI4 [beta4] documentation; THERMO — PSI4 [beta4] documentation; TRANSQT — PSI4 [beta4] documentation; TRANSQT2 — PSI4 [beta4] documentation; E_CONVERGENCE — PSI4 [beta4] documentation; INTS_TOLERANCE — PSI4 [beta4] documentation; MRCC_LEVEL — PSI4 [beta4] documentation; MRCC_METHOD — PSI4 [beta4] documentation; MRCC_NUM_SINGLET_ROOTS — PSI4 [beta4] documentation; MRCC_NUM_TRIPLET_ROOTS — PSI4 [beta4] documentation; MRCC_OMP_NUM_THREADS — PSI4 [beta4] documentation; MRCC_RESTART — PSI4 [beta4] documentation; CACHELEVEL — PSI4 [beta4] documentation; CC_DIIS_MAX_VECS — PSI4 [beta4] documentation; CC_DIIS_MIN_VECS — PSI4 [beta4] documentation; CC_MAXITER — PSI4 [beta4] documentation; CCL_ENERGY — PSI4 [beta4] documentation; CEPA_OS_SCALE — PSI4 [beta4] documentation; CEPA_SOS_SCALE — PSI4 [beta4] documentation; CEPA_SS_SCALE — PSI4 [beta4] documentation; CEPA_TYPE — PSI4 [beta4] documentation; CUTOFF — PSI4 [beta4] documentation; DO_DIIS — PSI4 [beta4] documentation; DO_LEVEL_SHIFT — PSI4 [beta4] documentation; DO_SCS — PSI4 [beta4] documentation; DO_SOS — PSI4 [beta4] documentation; E_CONVERGENCE — PSI4 [beta4] documentation; E3_SCALE — PSI4 [beta4] documentation; EA_POLES — PSI4 [beta4] documentation; EKT_EA — PSI4 [beta4] documentation; EKT_IP — PSI4 [beta4] documentation; EP_EA_POLES — PSI4 [beta4] documentation; EP_IP_POLES — PSI4 [beta4] documentation; EP_MAXITER — PSI4 [beta4] documentation; IP_POLES — PSI4 [beta4] documentation; LEVEL_SHIFT — PSI4 [beta4] documentation; LINEQ_SOLVER — PSI4 ,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1346070,CACHE,CACHELEVEL,1346070,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,"NE': 1.243 / 1.5,; 'NA': 1.144 / 1.5,; 'MG': 1.364 / 1.5,; 'AL': 1.639 / 1.5,; 'SI': 1.716 / 1.5,; 'P': 1.705 / 1.5,; 'S': 1.683 / 1.5,; 'CL': 1.639 / 1.5,; 'AR': 1.595 / 1.5}. Queue = []; White = range(self.natom()) # untouched; Black = [] # touched and all edges discovered; Fragment = [] # stores fragments. start = 0 # starts with the first atom in the list; Queue.append(start); White.remove(start). # Simply start with the first atom, do a BFS when done, go to any; # untouched atom and start again iterate until all atoms belong; # to a fragment group; while len(White) > 0 or len(Queue) > 0: # Iterates to the next fragment; Fragment.append([]). while len(Queue) > 0: # BFS within a fragment; for u in Queue: # find all (still white) nearest neighbors to vertex u; for i in White:; dist = p4const.psi_bohr2angstroms * math.sqrt((self.x(i) - self.x(u)) ** 2 + \; (self.y(i) - self.y(u)) ** 2 + (self.z(i) - self.z(u)) ** 2); if dist < vdW_diameter[self.symbol(u)] + vdW_diameter[self.symbol(i)]:; Queue.append(i) # if you find you, put in the queue; White.remove(i) # and remove it from the untouched list; Queue.remove(u) # remove focus from Queue; Black.append(u); Fragment[-1].append(int(u)) # add to group (0-indexed); Fragment[-1].sort() # preserve original atom ordering. if len(White) != 0: # can't move White -> Queue if no more exist; Queue.append(White[0]); White.remove(White[0]). return Fragment. [docs]def run_dftd3(self, func=None, dashlvl=None, dashparam=None, dertype=None):; """"""Function to call Grimme's dftd3 program (http://toc.uni-muenster.de/DFTD3/); to compute the -D correction of level *dashlvl* using parameters for; the functional *func*. The dictionary *dashparam* can be used to supply; a full set of dispersion parameters in the absense of *func* or to supply; individual overrides in the presence of *func*. Returns energy if *dertype* is 0,; gradient if *dertype* is 1, else tuple of energy and gradient if *dertype*; unspecified. The dftd3 executable must be ind",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/molutil.html:6690,Queue,Queue,6690,psi4manual/4.0b5/_modules/molutil.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/molutil.html,1,['Queue'],['Queue']
Performance,"NENERGY. OMP3TOTALENERGY. OMP_N_THREAD (CPHF). OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4]. ONE-ELECTRONENERGY. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OPDM (CPHF). (DETCI). OPDM_AVG (DETCI). OPDM_IN_FILE (TRANSQT). OPDM_KE (DETCI). OPDM_OUT_FILE (TRANSQT). OPDM_PRINT (DETCI). OPDM_RELAX (CCDENSITY). (CPHF). (DFMP2). opt(); . see optimize(); . OPT_METHOD (OCC). OPT_TYPE (OPTKING). optimization; . see geometry optimization; . optimize(); . setting keywords. optimize() in module driver. OptionsState class in p4util.optproc. OptionState class in p4util.optproc. ORB_OPT (OCC). ORB_RESP_SOLVER (OCC). Orbital-Optimized Methods; . theory. Orbital-Optimized Methods, OCEPA. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. orientation_fixed() LibmintsMolecule method. ORTH_TYPE (OCC). output; . SAPT. cbs(). database(). geometry optimization. P. P (THERMO). p4const module. p4const.__init__ module. p4const.physconst module. p4const.psifiles module. p4regex module. p4util module. p4util.__init__ module. p4util.basislist module. p4util.basislistdunning module. p4util.basislistother module. p4util.optproc module. p4util.procutil module. p4util.text module. p4util.util module. PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parse_arbitrary_order() in module driver. parse_cotton_irreps() in module driver. parse_error() in module pcmgetkw. parse_multiline_array() in module inputparser. parseFile() GetkwParser method. parseString() GetkwParser method. PATH, [1], [2], [3], [4]. PCG_BETA_TYPE (OCC). PCG_CONVERGENCE (OCC). PCG_MAXITER (OCC). pcmgetkw module. pcmpreprocess module. PEP1. perp_unit() in module qcdb.vecutil. PERTURB_CBS (PSIMRCC). PERTURB_CBS_COUPLING (PSIMRCC). PERTURB_H (SCF). PERTURB_MAGNITUDE (DETCI). (SCF). PERTURB_WITH (SCF). PHI_POINTS (SCF). physical constants. PITZER (TRANSQT). poi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/genindex.html:33999,optimiz,optimization,33999,psi4manual/4.0b5/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/genindex.html,1,['optimiz'],['optimization']
Performance,"NER. LOCAL_PAIRDEF¶. Definition of local pair domains. Type: string; Default: No Default. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_AMPS_PRINT¶. Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. PROP_ALL¶. Compute unrelaxed properties for all excited states. Type: boolean; Default: true. PROP_ROOT¶. Root number (within its irrep) for computing properties. Type: integer; Default: 1. PROP_SYM¶. The symmetry of states. Type: integer; Default: 1. RESTART¶. Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. SEKINO¶. Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. ZETA¶. Do use zeta?. Type: boolean; Default: false. Expert¶. JOBTYPE¶. Type of job being performed. Type: string; Default: No Default. WFN¶. Wavefunction type. Type: string; Default: SCF. table of contents. CCLAMBDA; General; ABCD; AO_BASIS; CACHELEVEL; DIIS; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; NUM_AMPS_PRINT; PROP_ALL; PROP_ROOT; PROP_SYM; RESTART; ROOTS_PER_IRREP; R_CONVERGENCE; SEKINO; ZETA. Expert; JOBTYPE; WFN. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__cclambda.html:3266,perform,performed,3266,psi4manual/1.7.x/autodir_options_c/module__cclambda.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__cclambda.html,2,"['CACHE', 'perform']","['CACHELEVEL', 'performed']"
Performance,"NERGY. OMP2.5 REFERENCE CORRECTION ENERGY. OMP2.5 SAME-SPIN CORRELATION ENERGY. OMP2.5 TOTAL ENERGY. OMP3. ; setting keywords. theory. OMP3 CORRELATION ENERGY. OMP3 DOUBLES ENERGY. OMP3 OPPOSITE-SPIN CORRELATION ENERGY. OMP3 REFERENCE CORRECTION ENERGY. OMP3 SAME-SPIN CORRELATION ENERGY. OMP3 TOTAL ENERGY. OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8]. ONE-ELECTRON ENERGY. one_electron_integrals() psi4.core.MintsHelper method. OneBodyAOInt class in psi4.core. OneBodySOInt class in psi4.core. onel_Hx() psi4.core.HF method. ONEPDM (DFMP2). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DCT). (DETCI). opdm() psi4.core.CIWavefunction method. OPDM_ONLY (CCDENSITY). OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method. open_check() psi4.core.IO method. operate() psi4.core.SymmetryOperation method. opt(). . see optimize(). opt() in module psi4.driver. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_RESTART (OPTKING). OPT_TYPE (OPTKING). OPTIMIZATION ITERATIONS. OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4.driver. optimize_geometric() in module psi4.driver. option_exists_in_module() in module psi4.core. Options class in psi4.core. options() psi4.core.Wavefunction method. options_to_python() in module psi4.core. OptionsState class in psi4.driver.p4util. OptionsStateCM() in module psi4.driver.p4util. OptionState class in psi4.driver.p4util. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCT). orbital_values() psi4.core.PointFunctions method. ORBITALS_WRITE (SCF). OrbitalSpace class in psi4.core. order() psi4.core.CharacterTable method. psi4.core.PointGroup method. ordered_params psi4.driver.EmpiricalDispersion attribute. psi4.driver.procrouting.empirical_dispersion.EmpiricalDispersion attribu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/genindex.html:83615,OPTIMIZ,OPTIMIZATION,83615,psi4manual/1.7.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/genindex.html,2,['OPTIMIZ'],['OPTIMIZATION']
Performance,"NERGY`. :type name: str; :param name: ``'scf'`` || ``'mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`psi4.energy`. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :type return_wfn: :ref:`boolean <op_py_boolean>`; :param return_wfn: ``'on'`` || |dl| ``'off'`` |dr|. Indicate to additionally return the :py:class:`~psi4.core.Wavefunction`; calculation result as the second element (after *float* energy) of a tuple. :type return_history: :ref:`boolean <op_py_boolean>`; :param return_history: ``'on'`` || |dl| ``'off'`` |dr|. Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. :type engine: str; :param engine: |dl| ``'optking'`` |dr| || ``'geometric'``. Indicates the optimization engine to use, which can be either Psi4's; native Optking optimizer or the GeomeTRIC program. :type optimizer_keywords: dict; :param optimizer_keywords: Options passed to the GeomeTRIC optimizer. Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type hessian_with: str; :param hessian_with: ``'scf'`` || ``'mp2'`` || etc. Indicates the computation",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html:60596,optimiz,optimization,60596,psi4manual/1.4.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html,6,['optimiz'],"['optimization', 'optimizer']"
Performance,"NF true # calculate Exch-Ind30 (S^inf); energy('sapt2+3'). These calculations are performed with the atomic orbital and; density-fitting scheme described in the Supplementary Material to; [Smith:2020:184108] for the second-order terms and in [Waldrop:2021:024103]; for the third-order exchange induction. The coupled (response) version of the; exchange-induction corrections are also calculated, exactly for; \(E_{exch-ind,resp}^{(20)}\) and by scaling the uncoupled term for; \(E_{exch-ind,resp}^{(30)}\). S^inf Keywords¶. DO_IND_EXCH_SINF¶. For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-induction term. Type: boolean; Default: false. DO_DISP_EXCH_SINF¶. For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-dispersion term. Type: boolean; Default: false. DO_IND30_EXCH_SINF¶. For SAPT2+3, compute the non-approximated third-order exchange-induction term. Type: boolean; Default: false. SAPT0-D¶; In SAPT0, the computation of \(E_{disp}^{(20)} + E_{exch-disp}^{(20)}\) represents; the computational bottleneck. One can avoid this bottleneck by replacing these; dispersion terms with the empirical D3 corrections developed by Grimme.; Grimme’s dispersion corrections are discussed here.; The corresponding method, termed SAPT0-D, thus relies on empirically fit parameters; specific to SAPT0/jun-cc-pVDZ. While SAPT0-D can be used with any of the -D; variants using default parameters optimized for Hartee–Fock interaction energies,; we recommend using the refit parameters with Becke-Johnson damping, as described in; [Schriber:2021:234107]. Again, use of SAPT0-D with a basis set other than; jun-cc-pVDZ is not tested and not guaranteed to give meaningful results without; refitting the dispersion parameters.; A simple water dimer computation using SAPT0-D may look like:; molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/sapt.html:48966,bottleneck,bottleneck,48966,psi4manual/master/sapt.html,https://psicode.org,https://psicode.org/psi4manual/master/sapt.html,5,['bottleneck'],['bottleneck']
Performance,"NG)¶OPTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING)¶OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING)¶OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING)¶OPTKING — Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FLEXIBLE_G_CONVERGENCE (OPTKING)¶OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. FOLLOW_ROOT (DETCI)¶DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 0. FOLLOW_ROOT (MCSCF)¶MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FOLLOW_ROOT (PSIMRCC)¶PSIMRCC — Which root of the effective hamiltonian is the target state?. Type: integer; Default: 1. FOLLOW_STEP_INCREMENT (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, the increment to modify FOLLOW_STEP_SCALE value if we end up in the same SCF solution. Type: double; Default: 0.2. FOLLOW_STEP_SCALE (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, how much to scale the step along the eigenvector by. A full step of \(pi/2\) corresponds to a value of 1.0. Type: double; Default: 0.5. FOLLOW_VECTOR (DETCI)¶DETCI (Expert) — In following a particular root (see FOLLOW_ROOT), sometimes the root number changes. To follow a root of a particular character, one can specify a list of determinants and their coefficients, and the code will follow the root with ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:130361,optimiz,optimization,130361,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,5,['optimiz'],['optimization']
Performance,"NGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR)¶CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR)¶CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF, EXACT; Default: NO. CFOUR_VTRAN (CFOUR)¶CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the \((ab \vert cd)\) integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR)¶CFOUR — Specifies the X-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_XFOR",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:83410,perform,performed,83410,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,9,['perform'],['performed']
Performance,"NH2 with aobasis. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/kw-2; testing best practices options, part ii. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:2499,perform,performed,2499,psi4manual/master/autodoc_testsuite_cfour.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html,1,['perform'],['performed']
Performance,"NK is more efficient,; owing to more highly-optimized integral contraction kernels; and supports execution; on Graphics Processing Units (GPUs). See Seminumerical Linear Exchange for more information. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DFA DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used. DISK_DFA DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4‘s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation. Additionally, expert users; can manually switch between the in-memory and on-disk options within MEM_DF or DISK_DF using; the SCF_SUBTYPE option. Using SCF_SUBTYPE = AUTO, where PSI4; automatically selects the in-memory or on-disk option for MEM_DF/DISK_DF based on memory and molecule, is the default; and recommended option. However, the in-memory or on-disk algorithms for MEM_DF and DISK_DF can be forced by using; SCF_SUBTYPE = INCORE or SCF_SUBTYPE = OUT_OF_CORE, respectively.; Note that an exception will be thrown if; SCF_SUBTYPE ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/scf.html:31732,perform,performance,31732,psi4manual/master/scf.html,https://psicode.org,https://psicode.org/psi4manual/master/scf.html,1,['perform'],['performance']
Performance,NT; SAD_SCF_TYPE; SAD_SPIN_AVERAGE; SAPT; SAVE_JK; SAVE_UHF_NOS; SCF_MEM_SAFETY_FACTOR; SCF_PROPERTIES; SOSCF; SOSCF_CONV; SOSCF_MAX_ITER; SOSCF_MIN_ITER; SOSCF_PRINT; SOSCF_START_CONVERGENCE; STABILITY_ANALYSIS; TDSCF_COEFF_CUTOFF; TDSCF_GUESS; TDSCF_MAXITER; TDSCF_PRINT; TDSCF_R_CONVERGENCE; TDSCF_STATES; TDSCF_TDA; TDSCF_TDM_PRINT; TDSCF_TRIPLETS; THETA_POINTS; THICKNESS; TILE_SZ; UHF_NOONS; WCOMBINE; WFN; P; ROTATIONAL_SYMMETRY_NUMBER; T; CACHELEVEL; CUTOFF_AMPS_PRINT; GAUGE; KIND; MAX_NUM_VECS; MAXITER; MEMORY; NEWTON_CONVERGENCE; NORM_TOLERANCE; NUM_AMPS_PRINT; NUM_CORE_ORBITALS; NUM_GUESSES; POLE_MAXITER; PR; R_CONVERGENCE; REFERENCE; ROOTS_PER_IRREP; SEM_MAXITER; AEL; AO_BASIS; CACHELEVEL; DEBUG; GAUGE; INTS_TOLERANCE; ONEPDM; ONEPDM_GRID_CUTOFF; ONEPDM_GRID_DUMP; ONEPDM_GRID_STEPSIZE; OPDM_RELAX; PROP_ALL; PROP_ROOT; PROP_SYM; REFERENCE; ROOTS_PER_IRREP; WFN; WRITE_NOS; XI; XI_CONNECT; ZETA; ABCD; ANALYZE; AO_BASIS; BCCD_MAXITER; BRUECKNER_ORBS_R_CONVERGENCE; CACHELEVEL; CACHETYPE; CC_NUM_THREADS; CC_OS_SCALE; CC_SS_SCALE; DIIS; E_CONVERGENCE; FORCE_RESTART; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; MP2_AMPS_PRINT; MP2_OS_SCALE; MP2_SS_SCALE; NEW_TRIPLES; NUM_AMPS_PRINT; PAIR_ENERGIES_PRINT; PROPERTY; R_CONVERGENCE; REFERENCE; RESTART; SCS_CCSD; SCS_MP2; SCSN_MP2; SEMICANONICAL; SPINADAPT_ENERGIES; T2_COUPLED; T3_WS_INCORE; WFN; ABCD; CACHELEVEL; CACHETYPE; CC_NUM_THREADS; CC3_FOLLOW_ROOT; COLLAPSE_WITH_LAST; COLLAPSE_WITH_LAST_CC3; COMPLEX_TOLERANCE; E_CONVERGENCE; EOM_GUESS; EOM_REFERENCE; EXCITATION_RANGE; FULL_MATRIX; LOCAL; LOCAL_CUTOFF; LOCAL_DO_SINGLES; LOCAL_FILTER_SINGLES; LOCAL_GHOST; LOCAL_METHOD; LOCAL_PRECONDITIONER; LOCAL_WEAKP; MAXITER; NEW_TRIPLES; NUM_AMPS_PRINT; OVERLAP_CHECK; PROP_ROOT; PROP_SYM; R_CONVERGENCE; REFERENCE; RESTART_EOM_CC3; RHF_TRIPLETS; ROOTS_PER_IRREP; SCHMIDT_ADD_RESIDUAL_TOLERANCE; SEMICANONICAL; SINGLES_PRINT; SS_E_CONVERGENCE; SS_R_CONVERGENCE; SS_SKIP_DIAG; SS_VECS_PER,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:571707,CACHE,CACHETYPE,571707,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHETYPE']
Performance,"NUM_AMPS_PRINT¶. Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 5. OMEGA¶. Array that specifies the desired frequencies of the incident// radiation field in CCLR calculations. If only one element is// given, the units will be assumed to be atomic units. If more// than one element is given, then the units must be specified as the final// element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. PROPERTY¶. Array that specifies the desired frequencies of the incident// radiation field in CCLR calculations. If only one element is// given, the units will be assumed to be atomic units. If more// than one element is given, then the units must be specified as the final// element of the array. Acceptable units are HZ, NM, EV, and AU. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ALL; Default: POLARIZABILITY. REFERENCE¶. Reference wavefunction type. Type: string; Default: RHF. RESTART¶. Do restart from on-disk amplitudes?. Type: boolean; Default: true. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. SEKINO¶. Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. Expert¶. WFN¶. Wavefunction type. Type: string; Default: SCF. Table Of Contents. CCRESPONSE; General; ABCD; ANALYZE; CACHELEVEL; DIIS; GAUGE; LINEAR; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; NUM_AMPS_PRINT; OMEGA; PROPERTY; REFERENCE; RESTART; R_CONVERGENCE; SEKINO. Expert; WFN. Previous topic; ZETA; Next topic; ABCD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__ccresponse-1.html:3710,CACHE,CACHELEVEL,3710,psi4manual/4.0b5/autodir_options_c/module__ccresponse-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__ccresponse-1.html,2,['CACHE'],['CACHELEVEL']
Performance,"NUM_FROZEN_UOCC (GLOBALS). NUM_INIT_VECS (DETCI). NUM_ROOTS (DETCI). NUM_VECS_PRINT (STABILITY). NUM_VECS_WRITE (DETCI). O. OCC_TOLERANCE (SAPT). OEI_A_FILE (TRANSQT). OEI_B_FILE (TRANSQT). OEI_FILE (TRANSQT). OFFDIAGONAL_CCSD_T (PSIMRCC). OMEGA (CCRESPONSE). (CCSORT). (RESPONSE). OMEGA_BRACKET_ALPHA (PLUGIN_OMEGA), [1]. OMEGA_CONVERGE (PLUGIN_OMEGA), [1]. OMEGA_GUESS (PLUGIN_OMEGA), [1]. OMEGA_GUESS_A (PLUGIN_OMEGA), [1]. OMEGA_GUESS_B (PLUGIN_OMEGA), [1]. OMEGA_GUESS_INTERPOLATE (PLUGIN_OMEGA), [1]. OMEGA_MAXITER (PLUGIN_OMEGA), [1]. OMEGA_PROCEDURE (PLUGIN_OMEGA), [1]. OMEGA_ROOT_ALGORITHM (PLUGIN_OMEGA), [1]. OMP2_ORBS_PRINT (OMP2). OMP_N_THREAD (CPHF). (JK), [1]. OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4]. ONE-ELECTRONENERGY. ONEPDM (CCDENSITY). OPDM (DETCI). (MP2). OPDM_AVG (DETCI). OPDM_IN_FILE (TRANSQT). OPDM_KE (DETCI). OPDM_OUT_FILE (TRANSQT). OPDM_PRINT (DETCI). OPDM_RELAX (CCDENSITY). (MP2). opt(); . see optimize(); . OPT_METHOD (OMP2). OPT_TYPE (OPTKING). optimization; . see geometry optimization; . optimize(); . setting keywords. optimize() (in module driver). ORTH_TYPE (OMP2). output; . SAPT. cbs(). database(). geometry optimization. P. PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parse_arbitrary_order() (in module driver). parse_cotton_irreps() (in module driver). PATH, [1]. PERTURB_CBS (PSIMRCC). PERTURB_CBS_COUPLING (PSIMRCC). PERTURB_H (SCF). PERTURB_MAGNITUDE (DETCI). (SCF). PERTURB_WITH (SCF). physconst (module). physical constants. PITZER (TRANSQT). plugin; . plugin_aointegrals. plugin_backtrans. plugin_ccsd_serial. plugin_ccsort. plugin_cepa. plugin_dfadc. plugin_libfock. plugin_mointegrals. plugin_mp2. plugin_omega. plugin_rqchf. plugin_sointegrals. plugin_test_matrix. plugin_testparse. plugin_testparse.__init__ (module). plugins; . available. POINTS (FINDIF). POLE_MAX (PLUGIN_DFADC), [1]. POLE_MAXITER (ADC). populateExtern() (Diffuse method). (QMMM method). PR (ADC). PRECONDITIONER (DETCI). PRESORT_FILE (TRAN",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/genindex.html:20169,optimiz,optimization,20169,psi4manual/4.0b2/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/genindex.html,1,['optimiz'],['optimization']
Performance,"NVERGED:; core.print_out(""\n\n Optimization converged! ~\n""); break; elif optimizer.state == geometric.optimize.OPT_STATE.FAILED:; core.print_out(""\n\n Optimization failed to converge! ~\n""); break; optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); grms, gmax = optimizer.calcGradNorm(); drms, dmax = geometric.optimize.calc_drms_dmax(optimizer.X, optimizer.Xprev); conv_energy = '*' if np.abs(optimizer.E - optimizer.Eprev) < params.Convergence_energy else ' '; conv_gmax = '*' if gmax < params.Convergence_gmax else ' '; conv_grms = '*' if grms < params.Convergence_grms else ' '; conv_dmax = '*' if dmax < params.Convergence_dmax else ' '; conv_drms = '*' if drms < params.Convergence_drms else ' '; core.print_out((f'\n {optimizer.Iteration:4d} {optimizer.E:16.8e} '; f'{optimizer.E-optimizer.Eprev:10.2e} {conv_energy} {gmax:10.2e} {conv_gmax} '; f'{grms:10.2e} {conv_grms} {dmax:10.2e} {conv_dmax} {drms:10.2e} {conv_drms} ~')). if return_history:; step_energies.append(optimizer.E); step_coordinates.append(core.Matrix.from_array(optimizer.X.reshape(-1,3))); step_gradients.append(core.Matrix.from_array(optimizer.gradx.reshape(-1,3))). return_energy = optimizer.E; opt_geometry = core.Matrix.from_array(optimizer.X.reshape(-1,3)); molecule.set_geometry(opt_geometry); molecule.update_geometry(); core.print_out(f'\n Final Energy : {return_energy} \n'); core.print_out('\n Final Geometry : \n'); molecule.print_in_input_format(). if return_history:; history = {; 'energy': step_energies,; 'gradient': step_gradients,; 'coordinates': step_coordinates,; }. if return_wfn:; wfn = engine.p4_wfn. if return_wfn and return_history:; return (return_energy, wfn, history); elif return_wfn and not return_history:; return (return_energy, wfn); elif return_history and not return_wfn:; return (return_energy, history); else:; return return_energy. [docs]; def optimize(name, **kwargs):; r""""""Function to perform a geometry optimization. :aliases: opt(). :returns: *float* |w--w| Tot",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver.html:60025,optimiz,optimizer,60025,psi4manual/1.8.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver.html,3,['optimiz'],['optimizer']
Performance,"NVERGED:; core.print_out(""\n\n Optimization converged! ~\n""); break; elif optimizer.state == geometric.optimize.OPT_STATE.FAILED:; core.print_out(""\n\n Optimization failed to converge! ~\n""); break; optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); grms, gmax = optimizer.calcGradNorm(); drms, dmax = geometric.optimize.calc_drms_dmax(optimizer.X, optimizer.Xprev); conv_energy = '*' if np.abs(optimizer.E - optimizer.Eprev) < params.Convergence_energy else ' '; conv_gmax = '*' if gmax < params.Convergence_gmax else ' '; conv_grms = '*' if grms < params.Convergence_grms else ' '; conv_dmax = '*' if dmax < params.Convergence_dmax else ' '; conv_drms = '*' if drms < params.Convergence_drms else ' '; core.print_out((f'\n {optimizer.Iteration:4d} {optimizer.E:16.8e} '; f'{optimizer.E-optimizer.Eprev:10.2e} {conv_energy} {gmax:10.2e} {conv_gmax} '; f'{grms:10.2e} {conv_grms} {dmax:10.2e} {conv_dmax} {drms:10.2e} {conv_drms} ~')). if return_history:; step_energies.append(optimizer.E); step_coordinates.append(core.Matrix.from_array(optimizer.X.reshape(-1,3))); step_gradients.append(core.Matrix.from_array(optimizer.gradx.reshape(-1,3))). return_energy = optimizer.E; opt_geometry = core.Matrix.from_array(optimizer.X.reshape(-1,3)); molecule.set_geometry(opt_geometry); molecule.update_geometry(); core.print_out(f'\n Final Energy : {return_energy} \n'); core.print_out('\n Final Geometry : \n'); molecule.print_in_input_format(). if return_history:; history = {; 'energy': step_energies,; 'gradient': step_gradients,; 'coordinates': step_coordinates,; }. if return_wfn:; wfn = engine.p4_wfn. if return_wfn and return_history:; return (return_energy, wfn, history); elif return_wfn and not return_history:; return (return_energy, wfn); elif return_history and not return_wfn:; return (return_energy, history); else:; return return_energy. [docs]def optimize(name, **kwargs):; r""""""Function to perform a geometry optimization. :aliases: opt(). :returns: *float* |w--w| Total",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html:58251,optimiz,optimizer,58251,psi4manual/1.4.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html,4,['optimiz'],['optimizer']
Performance,"NVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. INTCOS_GENERATE_EXIT¶. Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. Optimizing Minima¶; First, define the molecule and basis in the input.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; set step_type nr; optimize('scf'). Optimize using energy points instead of gradients:; optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:. set full_hess_every 1; optimize('scf'). Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/optking-1.html:4210,Optimiz,Optimize,4210,psi4manual/1.4.0/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/optking-1.html,10,"['Optimiz', 'optimiz']","['Optimize', 'optimize']"
Performance,"NVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. Advanced Keywords¶. OPT_METHOD¶. The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. MO_DIIS_NUM_VECS¶. Number of vectors used in orbital DIIS. Type: integer; Default: 6. LINEQ_SOLVER¶. The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SOS_SCALE¶. MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2¶. Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OCC_ORBS_PRINT¶. Do print OCC orbital energies?. Type: boolean; Default: false. TPDM_ABCD_TYPE¶. How to take care of the TPDM ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/occ-1.html:8489,perform,performed,8489,psi4manual/4.0b4/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/occ-1.html,4,['perform'],['performed']
Performance,"N_RANGE (CCEOM); CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF); CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF); SCF — An ExternalPotential (built by Python or nullptr/None). Type: boolean; Default: false. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS); GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code does NOT help you out in any way!. Type: boolean; Default: false. FAIL_ON_MAXITER (SCF); SCF — Fail if we reach maxiter without converging?. Type: boolean; Default: true. FAVG (MCSCF); MCSCF — Do use the average Fock matrix during the SCF optimization?. Type: boolean; Default: false. FAVG_CCSD_T (PSIMRCC); PSIMRCC — Do use the averaged Fock matrix over all references in (T) computations?. Type: boolean; Default: false. FAVG_START (MCSCF); MCSCF — Iteration at which to begin using the averaged Fock matrix. Type: integer; Default: 5. FCI (DETCI); DETCI — Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FCI_STRINGS (DETCI); DETCI (Expert) — Do store strings specifically for FCI? (Defaults to TRUE for FCI.). Type: boolean; Default: false. FD_PROJECT (FINDIF); FINDIF — Do discount rotational degrees of freedom in a finite difference frequency calculation. Turned off at non-stationary geometries and in the presence of external perturbations. Type: boolean; Default: true. FILTER_GUESS (DETCI); DETCI (Expert) — Do invoke the FILTER_GUESS options that are used to filter out some trial vectors which may not have the appropriate phase convention between two det",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:123609,optimiz,optimization,123609,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,4,['optimiz'],['optimization']
Performance,"Natural Orbital; Truncations,’’ R. M. Parrish, E. G. Hohenstein, and C. D. Sherrill,; J. Chem. Phys. 139, 174102 (2013).; (doi: 10.1063/1.4826520).; “Wavefunction Methods for Noncovalent Interactions,” E. G.; Hohenstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012).; (doi: 10.1002/wcms.84).; “Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 133,; 014101 (2010).; (doi: 10.1063/1.3451077). Orbital-Optimized Post-Hartree–Fock Methods¶; Orbital-optimized second-order perturbation theory (OMP2). “Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order Møller–Plesset perturbation theory,”; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; J. Chem. Phys. 135, 104103 (2011).; (doi: 10.1063/1.3631129).; “Analytic energy gradients for the orbital-optimized second-order; Møller–Plesset perturbation theory,” U. Bozkaya and; C. D. Sherrill, J. Chem. Phys. 138, 184103 (2013).; (doi: 10.1063/1.4803662).; “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized Third-Order Møller–Plesset; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/introduction-1.html:11012,optimiz,optimized,11012,psi4manual/1.0.0/introduction-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/introduction-1.html,2,['optimiz'],['optimized']
Performance,"Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. PSI4 API: Linking C++ and Python; frequencies. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences acc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.driver.frequencies.html:1062,perform,performed,1062,psi4manual/master/api/psi4.driver.frequencies.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.driver.frequencies.html,1,['perform'],['performed']
Performance,"Ne 0.0 0.0 1.0; Ne 0.0 1.0 1.0; }; ne.update_geometry(); energy = m.run_dftd3('d3-atmgr', dertype=0); print(energy). Since v1.7, it is preferred to use s-dftd3 for ATM since the 3-body can be run concurrent; with the 2-body contribution.; Footnotes. [1]; Note that there are functionals with these extensions (e.g., wB97X-D) that,; not being Grimme corrections, won’t follow this table exactly. [2]; [Grimme:2004:1463]. [3]; [Grimme:2006:1787]. [4]; (1,2); [Grimme:2010:154104]. [5]; (1,2); [Grimme:2011:1456]. [6]; (1,2,3,4); [Smith:2016:2197]. [7]; [Hujo:2011:3866]. [8]; [Chai:2010:6615]. [9]; [Pernal:2009:263201]. [10]; [Podeszwa:2010:550]. [11]; Keyword not used for user-defined functionals where the dft_dict[""dispersion""][""params""]; is easily editable for this purpose. See Advanced Functional Use and Manipulation. [12]; [Caldeweyher:2019:154122]. A few practical examples:. DFT-D2 single point with default parameters (dftd3 not called); energy('bp86-d'). DFT-D3BJ optimization with default parameters; optimize('pbe-d3bj'). DFT-D2 optimization with custom s6 parameter; set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values); set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). DFT-D2 single point with dftd3 instead of PSI4‘s libdisp; energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dispersion programs can be run independently of the scf; through the python function run_dftd3() or run_dftd4(). (These functions; call QCEngine, which is the same PSI4 + dftd3/dftd4 interface that is called during an scf job.); This “D-only” route is much faster than running a DFT-D energy.; This route is NOT available for s-dftd3. File an issue if a definite need arises.; Note that in a DFT+D energy or gradient calculation, user-specified; dispersion parameters override any information provided about the; functional. The",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/dftd3.html:11974,optimiz,optimization,11974,psi4manual/master/dftd3.html,https://psicode.org,https://psicode.org/psi4manual/master/dftd3.html,8,['optimiz'],"['optimization', 'optimize']"
Performance,"No Default. FROZEN_CARTESIAN (OPTKING)¶OPTKING — Specify atom and X, XY, XYZ, … to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING)¶OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING)¶OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING)¶OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM)¶CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING)¶OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (ADC)¶ADC — Specifies the choice of representation of the electric dipole operator. * Acceptable values are LENGTH (default) and VELOCITY. Type: string; Possible Values: LENGTH, VELOCITY; Default: LENGTH. GAUGE ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:135760,optimiz,optimization,135760,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,5,['optimiz'],['optimization']
Performance,"No Default. FROZEN_DOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING)¶OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM)¶CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING)¶OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (ADC)¶ADC — Specifies the choice of representation of the electric dipole operator. * Acceptable values are LENGTH (default) and VELOCITY. Type: string; Possible Values: LENGTH, VELOCITY; Default: LENGTH. GAUGE (CCDENSITY)¶CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE)¶CCRESPONSE — Specifies the choice of representation of the electric dipole operator. For polarizability, this keyword is ignored and LENGTH gauge is computed. For optical rotation and raman optical activity, this keyword is active, and acceptable values are LENGTH for the usua",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:136112,optimiz,optimization,136112,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,5,['optimiz'],['optimization']
Performance,"Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( )",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/cfour-1.html:7174,optimiz,optimize,7174,psi4manual/1.1.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/cfour-1.html,6,['optimiz'],['optimize']
Performance,"NumPy; Interface to CFOUR by J. Stanton & J. Gauss; Interface to CheMPS2 by S. Wouters; Interface to DFTD3 by S. Grimme; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to LIBEFP by I. Kaliman; Interface to ERD by N. Flocke and V. Lotrich; Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Interface to Libint by E. Valeev; Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to PCMSolver by R. Di Remigio; Interface to SIMINT by B. Pritchard; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Interface to Libxc by M. A. L. Marques. Psithon Functions: Invoking a Calculation; Notes on Options; Single-Point Energy — energy(); Property; Basis Set Superposition Corrections; Geometry Optimization — optimize() and gradient(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Database — database(); Complete Basis Set; Spectroscopic Constants for Diatomics; Function Intercalls; Embarrassing Parallelism; Generation of Cube Files — cubeprop(); Orbital Visualization with VMD. Customization: Adding Simple Extensions; Defining a Method Alias; Creating a Database. Appendices; Keywords; Keywords by Alpha; Keywords by Module. Basis Sets; Basis Sets by Family; Basis Sets by Element; Auxiliary Basis Sets. PSI Variables; PSI Variables by Alpha; PSI Variables by Module. Miscellaneous; Test Suite and Sample Inputs; DFT Functionals; PSIOH Intermediate Files; Physical Constants; Bibliography. Programmers’ Manual¶. Contributions: Intro to Programming in PSI4; FAQ; Plugins: Adding New Functionality to PSI4; Documentation; PsiPEP: Plans and Practices to Organize PSI4; C++ Style. Programming: Using the Core Libraries; LibOptions: globals, locals, has_changed and all that; Adding Methods to Driver; Linear Algebra in PSI4; Adding Test C",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/index.html:2568,Optimiz,Optimization,2568,psi4manual/1.2.1/index.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/index.html,2,"['Optimiz', 'optimiz']","['Optimization', 'optimize']"
Performance,"NumPy; Interface to CFOUR by J. Stanton & J. Gauss; Interface to CheMPS2 by S. Wouters; Interface to DFTD3 by S. Grimme; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to LIBEFP by I. Kaliman; Interface to ERD by N. Flocke and V. Lotrich; Interface to programs through FCHK files — fchk(); Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Interface to Libint by E. Valeev; Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to PCMSolver by R. Di Remigio; Interface to SIMINT by B. Pritchard; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Interface to Libxc by M. A. L. Marques. Psithon Functions: Invoking a Calculation; Notes on Options; Single-Point Energy — energy(); Property; Basis Set Superposition Corrections; Geometry Optimization — optimize() and gradient(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Database — database(); Complete Basis Set; Spectroscopic Constants for Diatomics; Function Intercalls; Embarrassing Parallelism; Generation of Cube Files — cubeprop(); Orbital Visualization with VMD. Customization: Adding Simple Extensions; Defining a Method Alias; Creating a Database. Appendices; Keywords; Keywords by Alpha; Keywords by Module. Basis Sets; Basis Sets by Family; Basis Sets by Element; Auxiliary Basis Sets. PSI Variables; PSI Variables by Alpha; PSI Variables by Module. Miscellaneous; Test Suite and Sample Inputs; DFT Functionals; PSIOH Intermediate Files; Physical Constants; Bibliography. Programmers’ Manual¶. Introduction to Programming in PSI4; Welcome to New Programmers; Community Code of Conduct; Setting Up Your Development Environment; Where to Get Help. Adding New Code to PSI4; Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Creating New Plugins; Integrating New Features into PSI4; Adding Methods to Driver; Pytho",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/index.html:2568,Optimiz,Optimization,2568,psi4manual/1.3.2/index.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/index.html,2,"['Optimiz', 'optimiz']","['Optimization', 'optimize']"
Performance,"O -c dftd3.f -o dftd3.o; making copyc6.o from copyc6.f; gfortran -O -c copyc6.f -o copyc6.o; gfortran dftd3.o copyc6.o -o ./dftd3; >>> ls; Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3; copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory¶; The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515] and assiduously developed by Grimme, [Grimme:2004:1463]; [Grimme:2006:1787] [Grimme:2010:154104] the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, . The DFT-D2 [Grimme:2006:1787] variant; takes the explicit form below. Here, dispersion coefficients,; , obtained from the geometric mean of tabulated elemental; values, are summed over interatomic distances, , modulated; by a damping function, , that gradually activates; the dispersion correction (at a rate characterized by ); over a distance characterized by the sum of the two atomic vdW radii,; , while an overall scaling term, , is optimized; to be unique to each functional. ( is; sometimes allowed to vary as well.). (1). Grimme recently presented a refined method, DFT-D3, [Grimme:2010:154104]; which incorporates an additional term in the dispersion; series and adjusts the combination formula and damping; function. The individual atomic are interpolated from; several reference values based upon coordination numbers extracted from; the molecular structure, rather than assigned solely by atomic identity as; in DFT-D2, and thereby incorporate some awareness of the chemical; environment into an otherwise largely heuristic correction. The -D3; dispersion has the following form, where and ; are the customary nonunity parameters fitted for individual functionals. (2). A modified damping scheme for DFT-D3 using the rational damping form of; Becke and Johnson wa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/dftd3.html:2226,optimiz,optimized,2226,psi4manual/4.0b3/dftd3.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dftd3.html,5,['optimiz'],['optimized']
Performance,"O -c dftd3.f -o dftd3.o; making copyc6.o from copyc6.f; ifort -O -c copyc6.f -o copyc6.o; ifort dftd3.o copyc6.o -o ./dftd3; >>> ls; Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3.3.0.2; copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory¶; The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515] and assiduously developed by Grimme, [Grimme:2004:1463]; [Grimme:2006:1787] [Grimme:2010:154104] the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, . The DFT-D2 [Grimme:2006:1787] variant; takes the explicit form below. Here, dispersion coefficients,; , obtained from the geometric mean of tabulated elemental; values, are summed over interatomic distances, , modulated; by a damping function, , that gradually activates; the dispersion correction (at a rate characterized by ); over a distance characterized by the sum of the two atomic vdW radii,; , while an overall scaling term, , is optimized; to be unique to each functional. ( is; sometimes allowed to vary as well.). (1). Grimme recently presented a refined method, DFT-D3, [Grimme:2010:154104]; which incorporates an additional term in the dispersion; series and adjusts the combination formula and damping; function. The individual atomic are interpolated from; several reference values based upon coordination numbers extracted from; the molecular structure, rather than assigned solely by atomic identity as; in DFT-D2, and thereby incorporate some awareness of the chemical; environment into an otherwise largely heuristic correction. The -D3; dispersion has the following form, where and ; are the customary nonunity parameters fitted for individual functionals. (2). A modified damping scheme for DFT-D3 using the rational damping form of; Becke and Johnson wa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/dftd3-1.html:2940,optimiz,optimized,2940,psi4manual/1.0.0/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/dftd3-1.html,2,['optimiz'],['optimized']
Performance,"O basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Default: SPECIAL. CFOUR_BRUCK_CONV¶. experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER¶. Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS¶. The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL¶. Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Default: SCF. CFOUR_CC_CONV¶. Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER¶. Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION¶. Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In gene",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__cfour-1.html:7806,perform,performed,7806,psi4manual/1.3.2/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__cfour-1.html,11,['perform'],['performed']
Performance,"O molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. fcidump; test FCIDUMP functionality for rhf/uhf. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:46752,optimiz,optimized,46752,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,3,"['optimiz', 'perform']","['optimization', 'optimized', 'performed']"
Performance,"O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** ener",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:41186,perform,performed,41186,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['perform'],['performed']
Performance,"O, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. Optimizing Minima¶; First, define the molecule and basis in the input.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; set step_type nr; optimize('scf'). Optimize using finite differences of energies instead of gradients:; optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:. set full_hess_every 1; optimize('scf'). import optking. Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_EVERY keyword. Transition States and Reaction Paths¶. Calculate a starting Hessian",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/optking.html:3960,optimiz,optimize,3960,psi4manual/1.7.x/optking.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/optking.html,3,['optimiz'],['optimize']
Performance,"O, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. Optimizing Minima¶; First, define the molecule and basis in the input.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; set step_type nr; optimize('scf'). Optimize using finite differences of energies instead of gradients:; optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:. set full_hess_every 1; optimize('scf'). import optking. Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_EVERY keyword. Transition States and Reaction Paths¶; Optking currently has two tr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/optking.html:3979,optimiz,optimize,3979,psi4manual/master/optking.html,https://psicode.org,https://psicode.org/psi4manual/master/optking.html,1,['optimiz'],['optimize']
Performance,"O, zHI, valueHI, verbose=True)[source]¶; Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by complete_basis_set(). Aliases¶; When a particular composite method or its functional form is going to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/share/python/aliases.py; (source location) or psi4/share/psi/python/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). >>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). >>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. >>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). >>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). Table Of Contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. Previous topic; RS",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cbs-1.html:16969,optimiz,optimization,16969,psi4manual/1.0.0/cbs-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html,4,['optimiz'],"['optimization', 'optimize']"
Performance,"O. OCC_ORBS_PRINT (OCC). OCC_TOLERANCE (FNOCC). (SAPT). OCEPA; . setting keywords. theory. OCEPA(0)CORRELATIONENERGY. OCEPA(0)TOTALENERGY. OEI_A_FILE (TRANSQT). OEI_B_FILE (TRANSQT). OEI_FILE (TRANSQT). OEProp. theory. oeprop() in module util. OFFDIAGONAL_CCSD_T (PSIMRCC). OMEGA (CCRESPONSE). (CCSORT). (RESPONSE). OMEGA_ERF (MINTS). OMP2; . setting keywords. theory. OMP2.5; . setting keywords. OMP2CORRELATIONENERGY. OMP2TOTALENERGY. OMP3; . setting keywords. theory. OMP3CORRELATIONENERGY. OMP3TOTALENERGY. OMP_N_THREAD (CPHF). OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4]. ONE-ELECTRONENERGY. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OPDM (DETCI). OPDM_AVG (DETCI). OPDM_IN_FILE (TRANSQT). OPDM_KE (DETCI). OPDM_OUT_FILE (TRANSQT). OPDM_PRINT (DETCI). OPDM_RELAX (CCDENSITY). (DFMP2). opt(); . see optimize(); . OPT_METHOD (OCC). OPT_TYPE (OPTKING). optimization; . see geometry optimization; . optimize(); . setting keywords. optimize() in module driver. OptionsState class in optproc. OptionState class in optproc. optproc module. ORB_OPT (OCC). ORB_RESP_SOLVER (OCC). Orbital-Optimized Methods; . theory. Orbital-Optimized Methods, OCEPA. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. orientation_fixed() LibmintsMolecule method. ORTH_TYPE (OCC). output; . SAPT. cbs(). database(). geometry optimization. P. P (THERMO). PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parse_arbitrary_order() in module driver. parse_cotton_irreps() in module driver. parse_multiline_array() in module input. PATH, [1], [2], [3], [4]. PB_LAMBDA (DFTSAPT). PCG_BETA_TYPE (OCC). PCG_CONVERGENCE (OCC). PCG_MAXITER (OCC). PEP1. perp_unit() in module qcdb.vecutil. PERTURB_CBS (PSIMRCC). PERTURB_CBS_COUPLING (PSIMRCC). PERTURB_H (SCF). PERTURB_MAGNITUDE (DETCI). (SCF). PERTURB_WITH (SCF). PHI_POINTS (SCF). physconst modul",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/genindex.html:31320,optimiz,optimization,31320,psi4manual/4.0b4/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html,1,['optimiz'],['optimization']
Performance,"O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega= (589 355 nm). nbo; Generation of NBO file. cc54; CCSD dipole with user-specified basis set. scf-guess-read3; Test if the the guess read in the same basis converges. scf-upcast-custom-basis; test scf castup with custom basis sets. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. fci-dipole; 6-31G H2O Test FCI Energy Point. mints6; Patch of a glycine with a methyl ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:22064,perform,performed,22064,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['perform'],['performed']
Performance,OCC modules¶. name; calls method; Energy; Gradient; type select. omp2; Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP2_TYPE CONV. Density-Fitted Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP2_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —; MP2_TYPE CD. omp3; Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE CONV. Density-Fitted Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —; MP_TYPE CD. omp2.5; Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE CONV. Density-Fitted Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; —; MP_TYPE CD. olccd; Orbital-Optimized Linear CCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE CONV. Density-Fitted Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE DF. Cholesky-Decomposed Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; —; CC_TYPE CD. Spin-Component-Scaled Orbital-Optimized MP capabilities of OCC/DFOCC modules¶. name; calls method; Energy; Gradient. scs-omp3; Spin-Component Scaled Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —. sos-omp3; Spin-Opposite Scaled Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —. scs(n)-omp3; A special version of SCS-OMP3 for nucleobase interactions; RHF/UHF/ROHF/RKS/UKS; —. scs-omp3-vdw; A special version of SCS-OMP3 (from ethene dimers); RHF/UHF/ROHF/RKS/UKS; —. sos-pi-omp3; A special version of SOS-OMP3 for -systems; RHF/UHF/ROHF/RKS/UKS; —. scs-omp2; Spin-Component Scaled Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —. sos-omp2; Spin-Opposite Scaled Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —. scs(n)-omp2; A special version of SCS-OMP2 for nucleobase interactions; RHF/UHF/ROHF/RKS/UKS; —. scs-omp2-vdw; A special version of SCS-OMP2 (from ethene dimers); RHF,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/occ-1.html:7659,Optimiz,Optimized,7659,psi4manual/1.0.0/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/occ-1.html,2,['Optimiz'],['Optimized']
Performance,OCC modules¶. name; calls method; Energy; Gradient; type select. omp2; Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP2_TYPE CONV. Density-Fitted Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP2_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —; MP2_TYPE CD. omp3; Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE CONV. Density-Fitted Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —; MP_TYPE CD. omp2.5; Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE CONV. Density-Fitted Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; —; MP_TYPE CD. olccd; Orbital-Optimized Linear CCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE CONV. Density-Fitted Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE DF. Cholesky-Decomposed Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; —; CC_TYPE CD. Spin-Component-Scaled Orbital-Optimized MP capabilities of OCC/DFOCC modules¶. name; calls method; Energy; Gradient. scs-omp3; Spin-Component Scaled Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —. sos-omp3; Spin-Opposite Scaled Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —. scs(n)-omp3; A special version of SCS-OMP3 for nucleobase interactions; RHF/UHF/ROHF/RKS/UKS; —. scs-omp3-vdw; A special version of SCS-OMP3 (from ethene dimers); RHF/UHF/ROHF/RKS/UKS; —. sos-pi-omp3; A special version of SOS-OMP3 for \(\pi\)-systems; RHF/UHF/ROHF/RKS/UKS; —. scs-omp2; Spin-Component Scaled Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —. sos-omp2; Spin-Opposite Scaled Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —. scs(n)-omp2; A special version of SCS-OMP2 for nucleobase interactions; RHF/UHF/ROHF/RKS/UKS; —. scs-omp2-vdw; A special version of SCS-OMP2 (from ethene dimer,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/occ-1.html:10502,Optimiz,Optimized,10502,psi4manual/1.1.0/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/occ-1.html,11,['Optimiz'],['Optimized']
Performance,OCC — Psi4 [1.0.0 6a9a71b] Docs; SAD_MAXITER — Psi4 [1.0.0 6a9a71b] Docs; SAD_PRINT — Psi4 [1.0.0 6a9a71b] Docs; SAD_SCF_TYPE — Psi4 [1.0.0 6a9a71b] Docs; SAPT — Psi4 [1.0.0 6a9a71b] Docs; SAVE_JK — Psi4 [1.0.0 6a9a71b] Docs; SAVE_UHF_NOS — Psi4 [1.0.0 6a9a71b] Docs; SCF_MEM_SAFETY_FACTOR — Psi4 [1.0.0 6a9a71b] Docs; SCF_TYPE — Psi4 [1.0.0 6a9a71b] Docs; SOSCF — Psi4 [1.0.0 6a9a71b] Docs; SOSCF_CONV — Psi4 [1.0.0 6a9a71b] Docs; SOSCF_MAX_ITER — Psi4 [1.0.0 6a9a71b] Docs; SOSCF_MIN_ITER — Psi4 [1.0.0 6a9a71b] Docs; SOSCF_PRINT — Psi4 [1.0.0 6a9a71b] Docs; SOSCF_R_START — Psi4 [1.0.0 6a9a71b] Docs; STABILITY_ANALYSIS — Psi4 [1.0.0 6a9a71b] Docs; THETA_POINTS — Psi4 [1.0.0 6a9a71b] Docs; THICKNESS — Psi4 [1.0.0 6a9a71b] Docs; TILE_SZ — Psi4 [1.0.0 6a9a71b] Docs; UHF_NOONS — Psi4 [1.0.0 6a9a71b] Docs; WFN — Psi4 [1.0.0 6a9a71b] Docs; P — Psi4 [1.0.0 6a9a71b] Docs; ROTATIONAL_SYMMETRY_NUMBER — Psi4 [1.0.0 6a9a71b] Docs; T — Psi4 [1.0.0 6a9a71b] Docs; AO_BASIS — Psi4 [1.0.0 6a9a71b] Docs; CACHELEVEL — Psi4 [1.0.0 6a9a71b] Docs; DELETE_TEI — Psi4 [1.0.0 6a9a71b] Docs; INTS_TOLERANCE — Psi4 [1.0.0 6a9a71b] Docs; NO_TEI — Psi4 [1.0.0 6a9a71b] Docs; PRINT_TEI — Psi4 [1.0.0 6a9a71b] Docs; REFERENCE — Psi4 [1.0.0 6a9a71b] Docs; SEMICANONICAL — Psi4 [1.0.0 6a9a71b] Docs; WFN — Psi4 [1.0.0 6a9a71b] Docs. /autodir_psivariables; ; ADC — Psi4 [1.0.0 6a9a71b] Docs; CCDENSITY — Psi4 [1.0.0 6a9a71b] Docs; CCENERGY — Psi4 [1.0.0 6a9a71b] Docs; CCEOM — Psi4 [1.0.0 6a9a71b] Docs; CCLAMBDA — Psi4 [1.0.0 6a9a71b] Docs; CCRESPONSE — Psi4 [1.0.0 6a9a71b] Docs; CCTRIPLES — Psi4 [1.0.0 6a9a71b] Docs; CFOUR — Psi4 [1.0.0 6a9a71b] Docs; DCFT — Psi4 [1.0.0 6a9a71b] Docs; DETCI — Psi4 [1.0.0 6a9a71b] Docs; DFMP2 — Psi4 [1.0.0 6a9a71b] Docs; DFOCC — Psi4 [1.0.0 6a9a71b] Docs; DMRG — Psi4 [1.0.0 6a9a71b] Docs; EFP — Psi4 [1.0.0 6a9a71b] Docs; FISAPT — Psi4 [1.0.0 6a9a71b] Docs; FNOCC — Psi4 [1.0.0 6a9a71b] Docs; GDMA — Psi4 [1.0.0 6a9a71b] Docs; MCSCF — Psi4 [1.0.0 6a9a71b] Docs; MRCC — Psi4 [1.0.0 6,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:276906,CACHE,CACHELEVEL,276906,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,1,['CACHE'],['CACHELEVEL']
Performance,OCC — Psi4 [1.0.0 6a9a71b] Docs; SAD_MAXITER — Psi4 [1.0.0 6a9a71b] Docs; SAD_PRINT — Psi4 [1.0.0 6a9a71b] Docs; SAD_SCF_TYPE — Psi4 [1.0.0 6a9a71b] Docs; SAPT — Psi4 [1.0.0 6a9a71b] Docs; SAVE_JK — Psi4 [1.0.0 6a9a71b] Docs; SAVE_UHF_NOS — Psi4 [1.0.0 6a9a71b] Docs; SCF_MEM_SAFETY_FACTOR — Psi4 [1.0.0 6a9a71b] Docs; SCF_TYPE — Psi4 [1.0.0 6a9a71b] Docs; SOSCF — Psi4 [1.0.0 6a9a71b] Docs; SOSCF_CONV — Psi4 [1.0.0 6a9a71b] Docs; SOSCF_MAX_ITER — Psi4 [1.0.0 6a9a71b] Docs; SOSCF_MIN_ITER — Psi4 [1.0.0 6a9a71b] Docs; SOSCF_PRINT — Psi4 [1.0.0 6a9a71b] Docs; SOSCF_R_START — Psi4 [1.0.0 6a9a71b] Docs; STABILITY_ANALYSIS — Psi4 [1.0.0 6a9a71b] Docs; THETA_POINTS — Psi4 [1.0.0 6a9a71b] Docs; THICKNESS — Psi4 [1.0.0 6a9a71b] Docs; TILE_SZ — Psi4 [1.0.0 6a9a71b] Docs; UHF_NOONS — Psi4 [1.0.0 6a9a71b] Docs; WFN — Psi4 [1.0.0 6a9a71b] Docs; P — Psi4 [1.0.0 6a9a71b] Docs; ROTATIONAL_SYMMETRY_NUMBER — Psi4 [1.0.0 6a9a71b] Docs; T — Psi4 [1.0.0 6a9a71b] Docs; AO_BASIS — Psi4 [1.0.0 6a9a71b] Docs; CACHELEVEL — Psi4 [1.0.0 6a9a71b] Docs; DELETE_TEI — Psi4 [1.0.0 6a9a71b] Docs; INTS_TOLERANCE — Psi4 [1.0.0 6a9a71b] Docs; NO_TEI — Psi4 [1.0.0 6a9a71b] Docs; PRINT_TEI — Psi4 [1.0.0 6a9a71b] Docs; REFERENCE — Psi4 [1.0.0 6a9a71b] Docs; SEMICANONICAL — Psi4 [1.0.0 6a9a71b] Docs; WFN — Psi4 [1.0.0 6a9a71b] Docs. autodir_psivariables; ; ADC — Psi4 [1.0.0 6a9a71b] Docs; CCDENSITY — Psi4 [1.0.0 6a9a71b] Docs; CCENERGY — Psi4 [1.0.0 6a9a71b] Docs; CCEOM — Psi4 [1.0.0 6a9a71b] Docs; CCLAMBDA — Psi4 [1.0.0 6a9a71b] Docs; CCRESPONSE — Psi4 [1.0.0 6a9a71b] Docs; CCTRIPLES — Psi4 [1.0.0 6a9a71b] Docs; CFOUR — Psi4 [1.0.0 6a9a71b] Docs; DCFT — Psi4 [1.0.0 6a9a71b] Docs; DETCI — Psi4 [1.0.0 6a9a71b] Docs; DFMP2 — Psi4 [1.0.0 6a9a71b] Docs; DFOCC — Psi4 [1.0.0 6a9a71b] Docs; DMRG — Psi4 [1.0.0 6a9a71b] Docs; EFP — Psi4 [1.0.0 6a9a71b] Docs; FISAPT — Psi4 [1.0.0 6a9a71b] Docs; FNOCC — Psi4 [1.0.0 6a9a71b] Docs; GDMA — Psi4 [1.0.0 6a9a71b] Docs; MCSCF — Psi4 [1.0.0 6a9a71b] Docs; MRCC — Psi4 [1.0.0 6a,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:133505,CACHE,CACHELEVEL,133505,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,1,['CACHE'],['CACHELEVEL']
Performance,OCC — Psi4 [1.0.0 6a9a71b] Docs; SAD_MAXITER — Psi4 [1.0.0 6a9a71b] Docs; SAD_PRINT — Psi4 [1.0.0 6a9a71b] Docs; SAD_SCF_TYPE — Psi4 [1.0.0 6a9a71b] Docs; SAPT — Psi4 [1.0.0 6a9a71b] Docs; SAVE_JK — Psi4 [1.0.0 6a9a71b] Docs; SAVE_UHF_NOS — Psi4 [1.0.0 6a9a71b] Docs; SCF_MEM_SAFETY_FACTOR — Psi4 [1.0.0 6a9a71b] Docs; SCF_TYPE — Psi4 [1.0.0 6a9a71b] Docs; SOSCF — Psi4 [1.0.0 6a9a71b] Docs; SOSCF_CONV — Psi4 [1.0.0 6a9a71b] Docs; SOSCF_MAX_ITER — Psi4 [1.0.0 6a9a71b] Docs; SOSCF_MIN_ITER — Psi4 [1.0.0 6a9a71b] Docs; SOSCF_PRINT — Psi4 [1.0.0 6a9a71b] Docs; SOSCF_R_START — Psi4 [1.0.0 6a9a71b] Docs; STABILITY_ANALYSIS — Psi4 [1.0.0 6a9a71b] Docs; THETA_POINTS — Psi4 [1.0.0 6a9a71b] Docs; THICKNESS — Psi4 [1.0.0 6a9a71b] Docs; TILE_SZ — Psi4 [1.0.0 6a9a71b] Docs; UHF_NOONS — Psi4 [1.0.0 6a9a71b] Docs; WFN — Psi4 [1.0.0 6a9a71b] Docs; P — Psi4 [1.0.0 6a9a71b] Docs; ROTATIONAL_SYMMETRY_NUMBER — Psi4 [1.0.0 6a9a71b] Docs; T — Psi4 [1.0.0 6a9a71b] Docs; AO_BASIS — Psi4 [1.0.0 6a9a71b] Docs; CACHELEVEL — Psi4 [1.0.0 6a9a71b] Docs; DELETE_TEI — Psi4 [1.0.0 6a9a71b] Docs; INTS_TOLERANCE — Psi4 [1.0.0 6a9a71b] Docs; NO_TEI — Psi4 [1.0.0 6a9a71b] Docs; PRINT_TEI — Psi4 [1.0.0 6a9a71b] Docs; REFERENCE — Psi4 [1.0.0 6a9a71b] Docs; SEMICANONICAL — Psi4 [1.0.0 6a9a71b] Docs; WFN — Psi4 [1.0.0 6a9a71b] Docs; CACHELEVEL — Psi4 [1.0.0 6a9a71b] Docs; MEMORY — Psi4 [1.0.0 6a9a71b] Docs; NEWTON_CONVERGENCE — Psi4 [1.0.0 6a9a71b] Docs; NORM_TOLERANCE — Psi4 [1.0.0 6a9a71b] Docs; NUM_AMPS_PRINT — Psi4 [1.0.0 6a9a71b] Docs; POLE_MAXITER — Psi4 [1.0.0 6a9a71b] Docs; PR — Psi4 [1.0.0 6a9a71b] Docs; REFERENCE — Psi4 [1.0.0 6a9a71b] Docs; ROOTS_PER_IRREP — Psi4 [1.0.0 6a9a71b] Docs; SEM_MAXITER — Psi4 [1.0.0 6a9a71b] Docs; AEL — Psi4 [1.0.0 6a9a71b] Docs; AO_BASIS — Psi4 [1.0.0 6a9a71b] Docs; CACHELEVEL — Psi4 [1.0.0 6a9a71b] Docs; GAUGE — Psi4 [1.0.0 6a9a71b] Docs; INTS_TOLERANCE — Psi4 [1.0.0 6a9a71b] Docs; ONEPDM — Psi4 [1.0.0 6a9a71b] Docs; ONEPDM_GRID_CUTOFF — Psi4 [1.0.0 6a9a71b] Docs; ONE,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:85743,CACHE,CACHELEVEL,85743,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,2,['CACHE'],['CACHELEVEL']
Performance,"OFF (CPHF); CPHF — The schwarz cutoff value. Type: double; Default: 1.0e-12. SCREEN_INTS (CCENERGY); CCENERGY — Do screen integrals?. Type: boolean; Default: false. SCS (CCENERGY); CCENERGY — Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SCS (CPHF); CPHF — Do perform a spin component scaled MP2 computation?. Type: boolean; Default: false. SCS_CCSD (CCENERGY); CCENERGY — Do spin-component-scaled CCSD. Type: boolean; Default: false. SCS_CCSD (FNOCC); FNOCC — Do SCS-CCSD?. Type: boolean; Default: false. SCS_CEPA (FNOCC); FNOCC — Do SCS-CEPA? Note that the scaling factors will be identical to those for SCS-CCSD. Type: boolean; Default: false. SCS_MP2 (CCENERGY); CCENERGY — Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SCS_MP2 (FNOCC); FNOCC — Do SCS-MP2?. Type: boolean; Default: false. SCS_N (CCENERGY); CCENERGY — Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SCS_N (CPHF); CPHF — Do perform a spin component scaled (N) MP2 computation?. Type: boolean; Default: false. SCS_TYPE (OCC); OCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCSN_MP2 (CCENERGY); CCENERGY — Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SEKINO (CCLAMBDA); CCLAMBDA — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEKINO (CCRESPONSE); CCRESPONSE — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEM_MAXITER (ADC); ADC — Maximum iteration number in simultaneous expansion method. Type: integer; Default: 30. SEMICANONICAL (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCEOM); CCEOM — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCSORT); CCSORT — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCTRIPLES); CCTRIPLES — Convert ROHF MO",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html:116867,perform,perform,116867,psi4manual/4.0b5/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html,2,['perform'],['perform']
Performance,"OGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. REORDER (TRANSQT); TRANSQT — Do reorder MOs?. Type: boolean; Default: false. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — The algorithm to use for the solution of the response equations for the analytic gradients and properties. Two-step algorithm is generally more efficient than simultaneous and is used by default. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coupled-cluster iterations from old and amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE); CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI); DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk; the number of vectors specified by RESTART_VECS (obsolete) is collapsed down to one vector per root. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM); CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (DETCI); DETCI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:103936,optimiz,optimizations,103936,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimizations']
Performance,"OHF) on CH radical with user-specified basis and properties for particular root. cc12; Single point energies of multiple excited states with EOM-CCSD. cisd-sp; 6-31G** H2O Test CISD Energy Point. mrcc4; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). fci-dipole; 6-31G H2O Test FCI Energy Point. docs_psimod; This test is used to construct the documentation; it is not suitable for emulation by users. tu4-h2o-freq; Frequencies for H2O HF/cc-pVDZ at optimized geometry. dfmp2_1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. dcft3; DCFT-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. mints3; Test individual integral objects for correctness. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html:9698,perform,performs,9698,psi4manual/4.0b2/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html,4,['perform'],['performs']
Performance,"OINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR)¶CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR)¶CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR)¶CFOUR — Specifies whether the reference function used in the correlation energy calculat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:57658,optimiz,optimization,57658,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,9,['optimiz'],['optimization']
Performance,"OLCCD cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. mbis-6; MBIS calculation on H2O. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cbs-parser; mtd/basis syntax examples. scf-occ; force occupations in scf. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. mints9",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:28692,perform,performed,28692,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['perform'],['performed']
Performance,"OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCT). orbital_values() (psi4.core.PointFunctions method). ORBITALS_WRITE (SCF). OrbitalSpace (class in psi4.core). order() (psi4.core.CharacterTable method). (psi4.core.PointGroup method). ordered_params (psi4.driver.EmpiricalDispersion attribute). (psi4.driver.procrouting.empirical_dispersion.EmpiricalDispersion attribute). OREMP. ; setting keywords. OREMP2 CORRELATION ENERGY. OREMP2 DOUBLES ENERGY. OREMP2 OPPOSITE-SPIN CORRELATION ENERGY. OREMP2 REFERENCE CORRECTION ENERGY. OREMP2 SAME-SPIN CORRELATION ENERGY. OREMP2 SINGLES ENERGY. OREMP2 TOTAL ENERGY. orientation() (psi4.core.MolecularGrid method). orientation_fixed() (psi4.core.Molecule method). origin (psi4.core.OneBodyAOInt attribute). original_coef() (psi4.core.GaussianShell method). ORTH_TYPE (DFOCC). (OCC). OS_SCALE (OCC). outfile_name() (in module psi4.core). output. ; cbs(). database(). geometry optimization. SAPT. vibrational analysis. overlap() (psi4.core.FISAPT method). overlap_3c() (psi4.core.IntegralFactory method). OVERLAP_CHECK (CCEOM). overlap_grad() (psi4.core.MintsHelper method). OverlapInt (class in psi4.core). owner_group (psi4.driver.AtomicComputer attribute). P. p (psi4.core.AOShellCombinationsIterator attribute). P (THERMO). PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parent_atom() (psi4.core.BlockOPoints method). PARENT_SYMMETRY (GLOBALS). ParsingError. partial_cholesky_factorize() (psi4.core.Matrix method). partition() (psi4.core.FISAPT method). PastureRequiredError. PATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32]. PBS queueing system. PCG_BETA_TYPE (DFOCC). (OCC). PCG_CONVERGENCE (DFOCC). (OCC). PCG_MAXITER (DFOCC). (OCC). PCM, [1]. Using PCM. PCM (GLOBALS). PCM POLARIZATION ENERGY. PCM_CC_TYPE (PCM)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/genindex.html:89099,optimiz,optimization,89099,psi4manual/master/genindex.html,https://psicode.org,https://psicode.org/psi4manual/master/genindex.html,2,['optimiz'],['optimization']
Performance,"OLICY¶. NOTE: This is an experimental feature and subject to change! Specifies a custom frozen-core policy on a per-element basis. Input should be a list of integers representing the number of orbitals to freeze for each atomic number MINUS one (so H is 0, He is 1, etc). For example, to specify that elements H-Be should have 0 frozen orbitals, B-Mg should have 1, and Al should have 2, you would provide the input [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2]. Please make sure to fill in the list up to the highest atomic number included in any calculations. This option is only used if FREEZE_CORE is set to POLICY. Type: array; Default: No Default. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. INTEGRAL_PACKAGE¶. Integral package to use. If compiled with ERD or Simint support, change this option to use them; LibInt is used otherwise. Type: string; Possible Values: ERD, LIBINT1, SIMINT, LIBINT2; Default: LIBINT2. LITERAL_CFOUR¶. Text to be passed directly into CFOUR input files. May contain molecule, options, percent blocks, etc. Access through cfour {...} block. Type: string; Default: No Default. MAX_RADIAL_MOMENT¶. Maximum Radial Moment to Calculate. Type: integer; Default: 4. MBIS_D_CONVERGENCE¶. MBIS Convergence Criteria. Type: conv double; Default: 1.0e-8. MBIS_MAXITER¶. Maximum Number of MBIS Iterations. Type: integer; Default: 500. MBIS_PRUNING_SCHEME¶. Pruning scheme for MBIS Grid. Type: string; Default: ROBUST. MBIS_RADIAL_POINTS¶. MBIS Number of Radial Points. Type: integer; Default: 75. MBIS_SPHERICAL_POINTS¶. MBIS Number o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__globals.html:4819,optimiz,optimized,4819,psi4manual/1.7.x/autodir_options_c/module__globals.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__globals.html,3,['optimiz'],['optimized']
Performance,"OLICY¶. NOTE: This is an experimental feature and subject to change! Specifies a custom frozen-core policy on a per-element basis. Input should be a list of integers representing the number of orbitals to freeze for each atomic number MINUS one (so H is 0, He is 1, etc). For example, to specify that elements H-Be should have 0 frozen orbitals, B-Mg should have 1, and Al should have 2, you would provide the input [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2]. Please make sure to fill in the list up to the highest atomic number included in any calculations. This option is only used if FREEZE_CORE is set to POLICY. Type: array; Default: No Default. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. INTEGRAL_PACKAGE¶. Integral package to use. If compiled with Simint support, change this option to use them; LibInt2 is used otherwise. Type: string; Possible Values: LIBINT2, SIMINT; Default: LIBINT2. LITERAL_CFOUR¶. Text to be passed directly into CFOUR input files. May contain molecule, options, percent blocks, etc. Access through cfour {...} block. Type: string; Default: No Default. LS_THC_DF¶. Use DF approximation when computing LS-THC factorization?. Type: boolean; Default: true. LS_THC_RADIAL_POINTS¶. Number of radial points in LS-THC grid. Type: integer; Default: 10. LS_THC_SPHERICAL_POINTS¶. Number of spherical points in LS-THC grid. Type: integer; Default: 50. MAX_RADIAL_MOMENT¶. Maximum Radial Moment to Calculate. Type: integer; Default: 4. MBIS_D_CONVERGENCE¶. MBIS Convergence Criteria. Type: conv double; Default: 1.0e-8. MBIS_MAXI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodir_options_c/module__globals.html:4828,optimiz,optimized,4828,psi4manual/master/autodir_options_c/module__globals.html,https://psicode.org,https://psicode.org/psi4manual/master/autodir_options_c/module__globals.html,1,['optimiz'],['optimized']
Performance,"OLVER_PRECONDITION_STEPS (CPHF)¶CPHF — Solver precondition step type. Type: string; Possible Values: CONSTANT, TRIANGULAR; Default: TRIANGULAR. SOLVER_QUANTITY (CPHF)¶CPHF — Solver residue or eigenvector delta. Type: string; Possible Values: EIGENVECTOR, RESIDUAL; Default: RESIDUAL. SOLVER_TYPE (CPHF)¶CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC)¶DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC)¶OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF)¶SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF)¶SCF — Second order convergence threshold. Cease microiterating at this value. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF)¶SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF)¶SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF)¶SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF)¶SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPIN_SCALE_TYPE (OCC)¶OCC (Expert) — Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. SPINADAPT_ENERGIES (CCENERGY)¶CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:218487,perform,perform,218487,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,4,['perform'],['perform']
Performance,"OLVER_PRECONDITION_STEPS (CPHF)¶CPHF — Solver precondition step type. Type: string; Possible Values: CONSTANT, TRIANGULAR; Default: TRIANGULAR. SOLVER_QUANTITY (CPHF)¶CPHF — Solver residue or eigenvector delta. Type: string; Possible Values: EIGENVECTOR, RESIDUAL; Default: RESIDUAL. SOLVER_TYPE (CPHF)¶CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC)¶DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC)¶OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF)¶SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF)¶SCF — Second order convergence threshold. Cease microiterating at this value. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF)¶SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF)¶SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF)¶SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF)¶SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPIN_SCALE_TYPE (OCC)¶OCC (Expert) — Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. SS_E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-de",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html:222959,perform,perform,222959,psi4manual/1.6.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html,1,['perform'],['perform']
Performance,"OMP3CORRELATIONENERGY. OMP3TOTALENERGY. OMP_N_THREAD (CPHF). OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4]. ONE-ELECTRONENERGY. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OPDM (DETCI). OPDM_AVG (DETCI). OPDM_IN_FILE (TRANSQT). OPDM_KE (DETCI). OPDM_OUT_FILE (TRANSQT). OPDM_PRINT (DETCI). OPDM_RELAX (CCDENSITY). (DFMP2). opt(); . see optimize(); . OPT_METHOD (OCC). OPT_TYPE (OPTKING). optimization; . see geometry optimization; . optimize(); . setting keywords. optimize() in module driver. OptionsState class in optproc. OptionState class in optproc. optproc module. ORB_OPT (OCC). ORB_RESP_SOLVER (OCC). Orbital-Optimized Methods; . theory. Orbital-Optimized Methods, OCEPA. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. orientation_fixed() LibmintsMolecule method. ORTH_TYPE (OCC). output; . SAPT. cbs(). database(). geometry optimization. P. P (THERMO). PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parse_arbitrary_order() in module driver. parse_cotton_irreps() in module driver. parse_multiline_array() in module input. PATH, [1], [2], [3], [4]. PB_LAMBDA (DFTSAPT). PCG_BETA_TYPE (OCC). PCG_CONVERGENCE (OCC). PCG_MAXITER (OCC). PEP1. perp_unit() in module qcdb.vecutil. PERTURB_CBS (PSIMRCC). PERTURB_CBS_COUPLING (PSIMRCC). PERTURB_H (SCF). PERTURB_MAGNITUDE (DETCI). (SCF). PERTURB_WITH (SCF). PHI_POINTS (SCF). physconst module. physical constants. PITZER (TRANSQT). point_group() LibmintsMolecule method. POINTS (FINDIF). POLE_MAXITER (ADC). populateExtern() Diffuse method. QMMM method. PR (ADC). PRECONDITIONER (DETCI). prerequisites. PRESORT_FILE (TRANSQT). PRINT (CPHF). (DFTSAPT). (GLOBALS). (SAPT). PRINT_BASIS (SCF). print_basis_families() in module basislist. print_bond_angles() LibmintsMolecule method. print_dihedrals() LibmintsMolecule method. print_distances() LibmintsMolecule metho",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/genindex.html:31790,optimiz,optimization,31790,psi4manual/4.0b4/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html,1,['optimiz'],['optimization']
Performance,"ON, MAGNETIZABILITY, ROA, ALL; Default: POLARIZABILITY. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF; Default: RHF. RESTART¶. Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible// representation. Type: array; Default: No Default. R_CONVERGENCE¶. Convergence criterion for T2 amplitudes (RMS change). Type: conv double; Default: 1e-5. SCREEN_INTS¶. Do screen integrals?. Type: boolean; Default: false. SCS¶. Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SCSN_MP2¶. Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SCS_CCSD¶. Do spin-component-scaled CCSD. Type: boolean; Default: false. SCS_MP2¶. Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SCS_N¶. Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SEMICANONICAL¶. Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SPINADAPT_ENERGIES¶. Do print spin-adapted pair energies?. Type: boolean; Default: false. T2_COUPLED¶. Type: boolean; Default: false. T3_WS_INCORE¶. Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. Expert¶. AO_BASIS¶. The algorithm to use for the terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__ccenergy-1.html:6463,optimiz,optimized,6463,psi4manual/4.0b5/autodir_options_c/module__ccenergy-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__ccenergy-1.html,2,['optimiz'],['optimized']
Performance,"ONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. MAXITER¶. Maximum number of iterations to converge perturbed amplitude equations. Type: integer; Default: 50. NUM_AMPS_PRINT¶. Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 5. OMEGA¶. Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. PROPERTY¶. The response property desired. Acceptable values are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. REFERENCE¶. Reference wavefunction type. Type: string; Default: RHF. RESTART¶. Do restart from on-disk amplitudes?. Type: boolean; Default: true. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. SEKINO¶. Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. Expert¶. WFN¶. Wavefunction type. Type: string; Default: SCF. table of contents. CCRESPONSE; General; ABCD; ANALYZE; CACHELEVEL; DIIS; GAUGE; LINEAR; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; NUM_AMPS_PRINT; OMEGA; PROPERTY; REFERENCE; RESTART; R_CONVERGENCE; SEKINO. Expert; WFN. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Keywords by Module. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__ccresponse-1.html:3576,CACHE,CACHELEVEL,3576,psi4manual/1.1.0/autodir_options_c/module__ccresponse-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__ccresponse-1.html,2,['CACHE'],['CACHELEVEL']
Performance,"ON¶. Dielectric constant of the solvent to use. Type: double; Default: 0. DDX_SOLVENT¶. Solvent to use. Not case sensitive. Ignored if SOLVENT_EPSILON is set. Type: string; Default: No Default. Numerical integration and discretisation parameters¶; These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation.; DDX_SOLUTE_RADIAL_POINTS and DDX_SOLUTE_SPHERICAL_POINTS influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed.; DDX_LMAX and DDX_N_LEBEDEV determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. DDX_LMAX; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and DDX_N_LEBEDEV determines the; number of points of the Lebedev angular grid used for integration on the spheres.; DDX_N_LEBEDEV should be chosen higher than DDX_SOLUTE_SPHERICAL_POINTS; and the defaults are usually good. DDX_SOLUTE_RADIAL_POINTS¶. Number of radial points used to compute the integrals for DDX calculations. Type: integer; Default: 35. DDX_SOLUTE_SPHERICAL_POINTS¶. Number of spherical points used to compute the solute electric potential/field integrals for DDX calculations (A Lebedev Points number). Type: integer; Default: 110. DDX_LMAX¶. Maximal degree of modelling spherical harmonics. Type: integer; Default: 9. DDX_N_LEBEDEV¶. Number of Lebedev grid points to use. (A Lebedev Points number). Type: integer; Default: 302. Iterative solver parameters¶; These parameters",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/ddx.html:6289,perform,performed,6289,psi4manual/1.7.x/ddx.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/ddx.html,1,['perform'],['performed']
Performance,"OO-REMP/cc-pVDZ energy for the H2O molecule. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. dft1-alt; DFT Functional Test. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. mbis-6; MBIS calculation on H2O. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc13c; Tests RHF CCSD(T)gradients. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. sad-scf-type; Test SAD SCF guesses on noble gas atom. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. casscf-fzc-sp; CASSCF/6-31G** energy point. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:2606,optimiz,optimization,2606,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimization']
Performance,"OOTS (DETCI). NUM_VECS_PRINT (STABILITY). NUM_VECS_WRITE (DETCI). NumberValue class in qcdb.libmintscoordentry. nunique() LibmintsMolecule method. O. OCC_TOLERANCE (SAPT). OEI_A_FILE (TRANSQT). OEI_B_FILE (TRANSQT). OEI_FILE (TRANSQT). OEProp. theory. oeprop() in module util. OFFDIAGONAL_CCSD_T (PSIMRCC). OMEGA (CCRESPONSE). (CCSORT). (RESPONSE). OMEGA_ERF (MINTS). OMP2; . setting keywords. theory. OMP2_ORBS_PRINT (OMP2). OMP3; . setting keywords. theory. OMP3_ORBS_PRINT (OMP3). OMP_N_THREAD (CPHF). OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4]. ONE-ELECTRONENERGY. ONEPDM (CCDENSITY). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OPDM (DETCI). (MP2). OPDM_AVG (DETCI). OPDM_IN_FILE (TRANSQT). OPDM_KE (DETCI). OPDM_OUT_FILE (TRANSQT). OPDM_PRINT (DETCI). OPDM_RELAX (CCDENSITY). (MP2). opt(); . see optimize(); . OPT_METHOD (OMP2). (OMP3). OPT_TYPE (OPTKING). optimization; . see geometry optimization; . optimize(); . setting keywords. optimize() in module driver. OptionsState class in optproc. OptionState class in optproc. optproc module. Orbital-Optimized Methods; . theory. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP3. orientation_fixed() LibmintsMolecule method. ORTH_TYPE (OMP2). (OMP3). output; . SAPT. cbs(). database(). geometry optimization. P. P (THERMO). PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parse_arbitrary_order() in module driver. parse_cotton_irreps() in module driver. parse_multiline_array() in module input. PATH, [1], [2], [3]. PEP1. perp_unit() in module qcdb.vecutil. PERTURB_CBS (PSIMRCC). PERTURB_CBS_COUPLING (PSIMRCC). PERTURB_H (SCF). PERTURB_MAGNITUDE (DETCI). (SCF). PERTURB_WITH (SCF). PHI_POINTS (SCF). physconst module. physical constants. PITZER (TRANSQT). point_group() LibmintsMolecule method. POINTS (FINDIF). POLE_MAXITER (ADC). populateExtern() Diffuse method. QMMM method. PR (ADC). PRECONDITIONER (DETCI). prerequisit",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/genindex.html:30047,optimiz,optimize,30047,psi4manual/4.0b3/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html,1,['optimiz'],['optimize']
Performance,"OPDM_ONLY (CCDENSITY). OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method. open_check() psi4.core.IO method. operate() psi4.core.SymmetryOperation method. opt(). . see optimize(). opt() in module psi4.driver. opt_clean() in module psi4.core. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_TYPE (OPTKING). OPTIMIZATION ITERATIONS. OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4.driver. optimize_geometric() in module psi4.driver. option_exists_in_module() in module psi4.core. Options class in psi4.core. options() psi4.core.CCWavefunction method. psi4.core.CIWavefunction method. psi4.core.CUHF method. psi4.core.DFEP2Wavefunction method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. psi4.core.Wavefunction method. options_to_python() in module psi4.core. optking() in module psi4.core. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCT). orbital_values() psi4.core.PointFunctions method. psi4.core.RKSFunctions method. psi4.core.UKSFunctions method. ORBITALS_WRITE (SCF). OrbitalSpace class in psi4.core. order() psi4.core.CharacterTable method. psi4.core.PointGroup method. ordered_params psi4.driver.EmpiricalDispersion attribute. psi4.driver.procrouting.empirical_dispersion.EmpiricalDispersion attribute. orientation() psi4.core.DFTGrid method. psi4.core.MolecularGrid method. orientation_fixed() psi4.core.Molecule method. origin psi4.core.AngularMomentumInt attribute. psi4.core.DipoleInt attribute. psi4.core.ElectricFieldInt attribute. psi4.core.ElectrostaticInt attribute. psi4.core.KineticInt attribute. psi4.core.MultipoleInt attribute. psi4.core.NablaInt attribute. psi4.core.OneBodyAOInt attribute. psi4.core.OverlapInt attribute. psi4.core.PotentialInt attribute. psi4.core.Quad",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/genindex.html:104750,Optimiz,Optimized,104750,psi4manual/1.6.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/genindex.html,1,['Optimiz'],['Optimized']
Performance,"OPTKING — Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN (OPTKING)¶OPTKING — Specify atom and X, XY, XYZ, … to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING)¶OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING)¶OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_OOFP (OPTKING)¶OPTKING — Specify out-of-plane angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_UOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING)¶OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM)¶CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING)¶OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:143798,optimiz,optimized,143798,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,4,['optimiz'],['optimized']
Performance,"OREAD means to read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR¶. This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY¶. Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC , after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE¶. This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code x",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html:33524,perform,performs,33524,psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,15,['perform'],['performs']
Performance,"OREAD means to read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR¶. This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY¶. Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC , after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE¶. This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the and integrals are held in core; (=5) and and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC¶. Specifies whether an input for mrcc i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:33247,perform,performs,33247,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,2,['perform'],['performs']
Performance,"ORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCFT single-point computation looks like this:; 1; 2; 3; 4; 5; 6; 7; 8molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dcft'). The energy('dcft') call to energy() executes the DCFT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCFT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; 1; 2; 3; 4; 5; 6; 7; 8molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dcft'). The optimize('dcft') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCFT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly usef",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/dcft-1.html:14476,optimiz,optimization,14476,psi4manual/1.1.0/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/dcft-1.html,12,"['optimiz', 'perform']","['optimization', 'performed']"
Performance,"OS, SOSPI; Default: SOS. SS_SCALE¶. A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SYMMETRIZE¶. Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. TPDM_ABCD_TYPE¶. How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algorithm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. Expert¶. SPIN_SCALE_TYPE¶. Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. table of contents. OCC; General; CACHELEVEL; CCL_ENERGY; CC_DIIS_MAX_VECS; CC_DIIS_MIN_VECS; CC_MAXITER; CEPA_OS_SCALE; CEPA_SOS_SCALE; CEPA_SS_SCALE; CEPA_TYPE; CUTOFF; DIIS_MAX_VECS; DIIS_MIN_VECS; DO_DIIS; DO_LEVEL_SHIFT; DO_SCS; DO_SOS; E3_SCALE; EA_POLES; EKT_EA; EKT_IP; EP_EA_POLES; EP_IP_POLES; EP_MAXITER; E_CONVERGENCE; IP_POLES; LEVEL_SHIFT; LINEQ_SOLVER; MAX_MOGRAD_CONVERGENCE; MOGRAD_DAMPING; MO_DIIS_NUM_VECS; MO_MAXITER; MO_READ; MO_STEP_MAX; MO_WRITE; MP2_OS_SCALE; MP2_SOS_SCALE; MP2_SOS_SCALE2; MP2_SS_SCALE; NAT_ORBS; OCC_ORBS_PRINT; OEPROP; OPT_METHOD; ORB_OPT; ORB_RESP_SOLVER; ORTH_TYPE; OS_SCALE; PCG_BETA_TYPE; PCG_CONVERGENCE; PCG_MAXITER; RELAXED; RMS_MOGRAD_CONVERGENCE; R_CONVERGENCE; SCS_TYPE; SOS_TYPE; SS_SCALE; SYMMETRIZE; TPDM_ABCD_TYPE; WFN_TYPE. Expert; SPIN_SCALE_TYPE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; Keywords by Module; OCC. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__occ-1.html:8482,CACHE,CACHELEVEL,8482,psi4manual/1.4.0/autodir_options_c/module__occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__occ-1.html,2,['CACHE'],['CACHELEVEL']
Performance,"OS, SOSPI; Default: SOS. SS_SCALE¶. A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SYMMETRIZE¶. Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. TPDM_ABCD_TYPE¶. How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algorithm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. Expert¶. SPIN_SCALE_TYPE¶. Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. table of contents. OCC; General; CACHELEVEL; CCL_ENERGY; CC_DIIS_MAX_VECS; CC_DIIS_MIN_VECS; CC_MAXITER; CEPA_OS_SCALE; CEPA_SOS_SCALE; CEPA_SS_SCALE; CEPA_TYPE; CUTOFF; DIIS_MAX_VECS; DIIS_MIN_VECS; DO_DIIS; DO_LEVEL_SHIFT; DO_SCS; DO_SOS; E3_SCALE; EA_POLES; EKT_EA; EKT_IP; EP_EA_POLES; EP_IP_POLES; EP_MAXITER; E_CONVERGENCE; IP_POLES; LEVEL_SHIFT; LINEQ_SOLVER; MAX_MOGRAD_CONVERGENCE; MOGRAD_DAMPING; MO_DIIS_NUM_VECS; MO_MAXITER; MO_READ; MO_STEP_MAX; MO_WRITE; MP2_OS_SCALE; MP2_SOS_SCALE; MP2_SOS_SCALE2; MP2_SS_SCALE; NAT_ORBS; OCC_ORBS_PRINT; OEPROP; OPT_METHOD; ORB_OPT; ORB_RESP_SOLVER; ORTH_TYPE; OS_SCALE; PCG_BETA_TYPE; PCG_CONVERGENCE; PCG_MAXITER; RELAXED; RMS_MOGRAD_CONVERGENCE; R_CONVERGENCE; SCS_TYPE; SOS_TYPE; SS_SCALE; SYMMETRIZE; TPDM_ABCD_TYPE; WFN_TYPE. Expert; SPIN_SCALE_TYPE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Keywords by Module; OCC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__occ-1.html:8482,CACHE,CACHELEVEL,8482,psi4manual/1.5.0/autodir_options_c/module__occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__occ-1.html,2,['CACHE'],['CACHELEVEL']
Performance,"OS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attemp to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCFT); DCFT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum siz",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:123926,perform,perform,123926,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,4,['perform'],['perform']
Performance,"OTAL ENERGY. OMP3. ; setting keywords. theory. OMP3 CORRELATION ENERGY. OMP3 DOUBLES ENERGY. OMP3 OPPOSITE-SPIN CORRELATION ENERGY. OMP3 REFERENCE CORRECTION ENERGY. OMP3 SAME-SPIN CORRELATION ENERGY. OMP3 TOTAL ENERGY. OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8]. ONE-ELECTRON ENERGY. one_electron_integrals() psi4.core.MintsHelper method. OneBodyAOInt class in psi4.core. OneBodySOInt class in psi4.core. onel_Hx() psi4.core.HF method. ONEPDM (DFMP2). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DCT). (DETCI). opdm() psi4.core.CIWavefunction method. OPDM_ONLY (CCDENSITY). OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method. open_check() psi4.core.IO method. operate() psi4.core.SymmetryOperation method. opt(). . see optimize(). opt() in module psi4.driver. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_RESTART (OPTKING). OPT_TYPE (OPTKING). OPTIMIZATION ITERATIONS. OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4.driver. optimize_geometric() in module psi4.driver. option_exists_in_module() in module psi4.core. Options class in psi4.core. options() psi4.core.Wavefunction method. options_to_python() in module psi4.core. OptionsState class in psi4.driver.p4util. OptionsStateCM() in module psi4.driver.p4util. OptionState class in psi4.driver.p4util. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCT). orbital_values() psi4.core.PointFunctions method. ORBITALS_WRITE (SCF). OrbitalSpace class in psi4.core. order() psi4.core.CharacterTable method. psi4.core.PointGroup method. ordered_params psi4.driver.EmpiricalDispersion attribute. psi4.driver.procrouting.empirical_dispersion.EmpiricalDispersion attribute. OREMP. ; setting keywords. OREMP2 CORRELATION ENERGY. OREMP2 DOUBLES ENERGY. OREMP2 ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/genindex.html:83702,optimiz,optimize,83702,psi4manual/1.7.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/genindex.html,2,['optimiz'],['optimize']
Performance,"OUBLES ENERGY. OMP3 TOTAL ENERGY. OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8]. ONE-ELECTRON ENERGY. one_electron_integrals() psi4.core.MintsHelper method. OneBodyAOInt class in psi4.core. OneBodySOInt class in psi4.core. onel_Hx() psi4.core.CUHF method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DCT). (DETCI). opdm() psi4.core.CIWavefunction method. OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method. open_check() psi4.core.IO method. operate() psi4.core.SymmetryOperation method. opt(). . see optimize(). opt() in module psi4.driver. opt_clean() in module psi4.core. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_TYPE (OPTKING). OPTIMIZATION ITERATIONS. OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4.driver. optimize_geometric() in module psi4.driver. option_exists_in_module() in module psi4.core. Options class in psi4.core. options() psi4.core.CCWavefunction method. psi4.core.CIWavefunction method. psi4.core.CUHF method. psi4.core.DFEP2Wavefunction method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. psi4.core.Wavefunction method. options_to_python() in module psi4.core. optking() in module psi4.core. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCT). orbital_values() psi4.core.PointFunctions method. psi4.core.RKSFunctions method. psi4.core.UKSFunctions method. ORBITALS_WRITE (SCF). OrbitalSpace class in psi4.core. order() psi4.core.CharacterTable method. psi4.core.PointGroup method. ordered_params psi4.driver.EmpiricalDisper",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/genindex-1.html:101095,optimiz,optimize,101095,psi4manual/1.5.0/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/genindex-1.html,2,['optimiz'],['optimize']
Performance,"OUBLES ENERGY. OMP3 TOTAL ENERGY. OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8]. ONE-ELECTRON ENERGY. one_electron_integrals() psi4.core.MintsHelper method. OneBodyAOInt class in psi4.core. OneBodySOInt class in psi4.core. onel_Hx() psi4.core.CUHF method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DCT). (DETCI). opdm() psi4.core.CIWavefunction method. OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method. open_check() psi4.core.IO method. operate() psi4.core.SymmetryOperation method. opt(). . see optimize(). opt() in module psi4.driver. opt_clean() in module psi4.core. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_TYPE (OPTKING). OPTIMIZATION ITERATIONS. OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4.driver. optimize_geometric() in module psi4.driver. option_exists_in_module() in module psi4.core. Options class in psi4.core. options_to_python() in module psi4.core. optking() in module psi4.core. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCT). orbital_values() psi4.core.PointFunctions method. psi4.core.RKSFunctions method. psi4.core.UKSFunctions method. ORBITALS_WRITE (SCF). OrbitalSpace class in psi4.core. order() psi4.core.CharacterTable method. psi4.core.PointGroup method. ordered_params psi4.driver.EmpiricalDispersion attribute. psi4.driver.procrouting.empirical_dispersion.EmpiricalDispersion attribute. orientation() psi4.core.DFTGrid method. psi4.core.MolecularGrid method. orientation_fixed() psi4.core.Molecule method. origin psi4.core.AngularMomentumInt attribu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/genindex-1.html:100060,optimiz,optimize,100060,psi4manual/1.4.0/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/genindex-1.html,2,['optimiz'],['optimize']
Performance,"OUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). table of contents. opt; opt(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.driver.opt.html:16734,perform,perform,16734,psi4manual/master/api/psi4.driver.opt.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.driver.opt.html,7,"['Optimiz', 'optimiz', 'perform']","['OptimizationConvergenceError', 'optimization', 'optimize', 'perform']"
Performance,"O_DIIS (DFOCC); DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (DFOCC); DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_QQR_SIEVE (CPHF); CPHF — Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Defa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:112088,perform,perform,112088,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,4,['perform'],['perform']
Performance,Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP2_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —; MP2_TYPE CD. omp3; Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE CONV. Density-Fitted Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —; MP_TYPE CD. omp2.5; Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE CONV. Density-Fitted Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; —; MP_TYPE CD. olccd; Orbital-Optimized Linear CCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE CONV. Density-Fitted Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE DF. Cholesky-Decomposed Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; —; CC_TYPE CD. Spin-Component-Scaled Orbital-Optimized MP capabilities of OCC/DFOCC modules¶. name; calls method; Energy; Gradient. scs-omp3; Spin-Component Scaled Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —. sos-omp3; Spin-Opposite Scaled Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —. scs(n)-omp3; A special version of SCS-OMP3 for nucleobase interactions; RHF/UHF/ROHF/RKS/UKS; —. scs-omp3-vdw; A special version of SCS-OMP3 (from ethene dimers); RHF/UHF/ROHF/RKS/UKS; —. sos-pi-omp3; A special version of SOS-OMP3 for -systems; RHF/UHF/ROHF/RKS/UKS; —. scs-omp2; Spin-Component Scaled Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —. sos-omp2; Spin-Opposite Scaled Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —. scs(n)-omp2; A special version of SCS-OMP2 for nucleobase interactions; RHF/UHF/ROHF/RKS/UKS; —. scs-omp2-vdw; A special version of SCS-OMP2 (from ethene dimers); RHF/UHF/ROHF/RKS/UKS; —. sos-pi-omp2; A special version of SOS-OMP2 for -systems; RHF/UHF/ROHF/RKS/UKS; —. Basic OCC Keywords¶. E_CONVERGENCE¶. Convergence criterion for e,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/occ-1.html:7842,Optimiz,Optimized,7842,psi4manual/1.0.0/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/occ-1.html,2,['Optimiz'],['Optimized']
Performance,Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP2_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —; MP2_TYPE CD. omp3; Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE CONV. Density-Fitted Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —; MP_TYPE CD. omp2.5; Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE CONV. Density-Fitted Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; —; MP_TYPE CD. olccd; Orbital-Optimized Linear CCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE CONV. Density-Fitted Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE DF. Cholesky-Decomposed Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; —; CC_TYPE CD. Spin-Component-Scaled Orbital-Optimized MP capabilities of OCC/DFOCC modules¶. name; calls method; Energy; Gradient. scs-omp3; Spin-Component Scaled Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —. sos-omp3; Spin-Opposite Scaled Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —. scs(n)-omp3; A special version of SCS-OMP3 for nucleobase interactions; RHF/UHF/ROHF/RKS/UKS; —. scs-omp3-vdw; A special version of SCS-OMP3 (from ethene dimers); RHF/UHF/ROHF/RKS/UKS; —. sos-pi-omp3; A special version of SOS-OMP3 for \(\pi\)-systems; RHF/UHF/ROHF/RKS/UKS; —. scs-omp2; Spin-Component Scaled Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —. sos-omp2; Spin-Opposite Scaled Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —. scs(n)-omp2; A special version of SCS-OMP2 for nucleobase interactions; RHF/UHF/ROHF/RKS/UKS; —. scs-omp2-vdw; A special version of SCS-OMP2 (from ethene dimers); RHF/UHF/ROHF/RKS/UKS; —. sos-pi-omp2; A special version of SOS-OMP2 for \(\pi\)-systems; RHF/UHF/ROHF/RKS/UKS; —. Basic OCC Keywords¶. E_CONVERGENCE¶. Convergence c,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/occ-1.html:10685,Optimiz,Optimized,10685,psi4manual/1.1.0/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/occ-1.html,11,['Optimiz'],['Optimized']
Performance,"Otherwise, the; output filename defaults to the the input filename with; “.out” extension. --psiapi-path¶; Generates a bash command to source correct Python interpreter and path for python -c ""import psi4"". --qcschema, --schema¶; Runs input files as QCSchema. Can either be JSON or MessagePack input. -s <name>, --scratch <name>¶; This overrides the value of PSI_SCRATCH and provides; a path to the location of scratch files. -t <subset>, --test <subset>¶; Runs pytest tests. If pytest-xdist installed, parallel with -n. -v, --verbose¶; Print the Psithon to Python translation of the input file. -V, --version¶; Print version information.; # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. Environment Variables¶; These environment variables will influence PSI4‘s behavior. CONDA_PREFIX¶; Set when a conda environment is activated. Note that if PSI4 has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. HOST¶; Set when a conda environment with conda compilers is activated. Used; when compatibly building PSI4 from source against conda; dependencies. MKL_NUM_THREADS¶; Number of threads to use by operations with Intel threaded BLAS libraries. OMP_NESTED¶; Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to False. OMP_NUM_THREADS¶; Number of threads to use by modules with OpenMP threading. PATH¶; Path for interfaced executables. Note; While once configuring PSI4 through PSIPATH was preferred; to modifying this environment variable, now PATH is preferred for; executables to accommodate QCEngine. To run Kállay’s MRCC program; (see MRCC), the dmrcc executable must be in PATH.; Likewise to run Grimme’s dftd3 program (see dftd3), the; dftd3 ex",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/external.html:20593,load,loaded,20593,psi4manual/master/external.html,https://psicode.org,https://psicode.org/psi4manual/master/external.html,5,['load'],['loaded']
Performance,"OverlapInt method). (psi4.core.TwoBodyAOInt method). (psi4.core.TwoElectronInt method). compute_spin_contamination() (psi4.core.HF method). compute_state_transfer() (psi4.core.CIWavefunction method). compute_thc_factorization() (psi4.core.LS_THC_Computer method). COMPUTE_TRIPLES (FNOCC). compute_V() (psi4.core.VBase method). compute_Vx() (psi4.core.VBase method). computed (psi4.driver.AtomicComputer attribute). computed_shells_per_iter() (psi4.core.JK method). computeExternExternInteraction() (psi4.core.ExternalPotential method). computeNuclearEnergy() (psi4.core.ExternalPotential method). computePotentialMatrix() (psi4.core.ExternalPotential method). computer (psi4.driver.driver_findif.FiniteDifferenceComputer attribute). CONDA_PREFIX, [1]. connectivity() (psi4.core.Molecule method). CONSECUTIVE_BACKSTEPS (OPTKING). construct_from_pydict() (psi4.core.BasisSet static method). contact. continuum solvation, [1]. converged (psi4.core.Localizer attribute). convergence criteria. ; geometry optimization. ConvergenceError. coord() (psi4.core.GaussianShell method). copy() (psi4.core.CIVector method). (psi4.core.IntVector method). (psi4.core.Matrix method). (psi4.core.Vector method). copy_file_from_scratch() (in module psi4.driver). (in module psi4.driver.p4util). copy_file_to_scratch() (in module psi4.driver). (in module psi4.driver.p4util). copy_lower_to_upper() (psi4.core.Matrix method). copy_upper_to_lower() (psi4.core.Matrix method). core_hamiltonian_grad() (psi4.core.MintsHelper method). corl_xtpl_helgaker_2() (in module psi4.driver.driver_cbs_helper). CORR_ANSATZ (PSIMRCC). CORR_CCSD_T (PSIMRCC). CORR_CHARGE (PSIMRCC). CORR_MULTP (PSIMRCC). CORR_WFN (PSIMRCC). Correlated (psi4.core.DerivCalcType attribute). CorrelationFactor (class in psi4.core). CorrelationTable (class in psi4.core). COSMO. COSX_BASIS_TOLERANCE (SCF). COSX_DENSITY_TOLERANCE (SCF). COSX_INTS_TOLERANCE (SCF). COSX_MAXITER_FINAL (SCF). COSX_OVERLAP_FITTING (SCF). COSX_PRUNING_SCHEME (SCF). COSX_RADIAL_PO",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/genindex.html:31143,optimiz,optimization,31143,psi4manual/master/genindex.html,https://psicode.org,https://psicode.org/psi4manual/master/genindex.html,1,['optimiz'],['optimization']
Performance,"Oxygen energy SOSCF, also tests non-symmetric density matrices. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-smoke; DFT Functional Smoke Test. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. fci-coverage; 6-31G H2O Test for coverage. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. mbis-5; MBIS calculation on ZnO. mbis-2; MBIS calculation on OH- (Expanded Arrays). nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. casscf-sp; CASSCF/6-31G** energy point. extern3; External potential calculation with one Ghost atom and one point charge at the same position. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-db3; T",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:6803,optimiz,optimization,6803,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['optimiz'],['optimization']
Performance,"P': 1.705 / 1.5,; 'S': 1.683 / 1.5,; 'CL': 1.639 / 1.5,; 'AR': 1.595 / 1.5}. Queue = []; White = range(self.natom()) # untouched; Black = [] # touched and all edges discovered; Fragment = [] # stores fragments. start = 0 # starts with the first atom in the list; Queue.append(start); White.remove(start). # Simply start with the first atom, do a BFS when done, go to any; # untouched atom and start again iterate until all atoms belong; # to a fragment group; while White or Queue: # Iterates to the next fragment; Fragment.append([]). while Queue: # BFS within a fragment; for u in Queue: # find all white neighbors to vertex u; for i in White:; dist = p4const.psi_bohr2angstroms * math.sqrt(; (self.x(i) - self.x(u)) ** 2 +; (self.y(i) - self.y(u)) ** 2 +; (self.z(i) - self.z(u)) ** 2); if dist < vdW_diameter[self.symbol(u)] + \; vdW_diameter[self.symbol(i)]:; Queue.append(i) # if you find you, put in the queue; White.remove(i) # & remove it from the untouched list; Queue.remove(u) # remove focus from Queue; Black.append(u); Fragment[-1].append(int(u)) # add to group (0-indexed); Fragment[-1].sort() # preserve original atom ordering. if White: # can't move White -> Queue if empty; Queue.append(White[0]); White.remove(White[0]). return Fragment. [docs]def dynamic_variable_bind(cls):; """"""Function to dynamically add extra members to; the psi4.Molecule class. """"""; cls.__setattr__ = new_set_attr; cls.__getattr__ = new_get_attr; cls.BFS = BFS. dynamic_variable_bind(psi4.Molecule) # pass class type, not class instance. #; # Define geometry to be used by PSI4.; # The molecule created by this will be set in options.; #; # geometry(""; # O 1.0 0.0 0.0; # H 0.0 1.0 0.0; # H 0.0 0.0 0.0; #; [docs]def geometry(geom, name=""default""):; """"""Function to create a molecule object of name *name*; from the geometry in string *geom*. Permitted for user use but deprecated in; driver in favor of explicit molecule-passing. """"""; molecule = psi4.Molecule.create_molecule_from_string(geom); molecule.set_n",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/molutil.html:6712,Queue,Queue,6712,psi4manual/1.0.0/_modules/molutil.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/molutil.html,1,['Queue'],['Queue']
Performance,"P-corrected CCSD(T) energies, converted from; atomic units (Hartree) to kcal mol-1 by multiplying by the; automatically-defined conversion factor psi_hartree2kcalmol. PSI4; provides several built-in physical constants and conversion factors, as; described in section Physical Constants.; Notice the loop over \(R\) to create; the table looks just like the loop over R to run the different; computations, and the CP-corrected energies ecp[R] are accessed the same; way they were stored. The print line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section).; Our table is printed at the very end of the output file, and looks like; this; CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies. R (Ang) E_int (kcal/mol); -----------------------------------------------------; 2.5 0.757718; 3.0 0.015687; 4.0 -0.016264. The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easily in PSI4. table of contents. Psithon Tutorial: Using PSI4 as an Executable; Basic Input File Structure; Sample Input Files; Running a Basic Hartree–Fock Calculation; Geometry Optimization and Vibrational Frequency Analysis; Analysis of Intermolecular Interactions; Potential Surface Scans and Counterpoise Correction Made Easy with Psithon. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. A PSI4 Tutorial; Psithon Tutorial: Using PSI4 as an Executable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/tutorial.html:23316,Optimiz,Optimization,23316,psi4manual/1.7.x/tutorial.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/tutorial.html,1,['Optimiz'],['Optimization']
Performance,"P2 computations. General¶. CACHELEVEL¶. Type: integer; Default: 2. CC_MAXITER¶. Type: integer; Default: 50. CUTOFF¶. Type: integer; Default: 14. DIIS_MAX_VECS¶. Number of vectors used in DIIS. Type: integer; Default: 4. DO_SCS¶. Do ?. Type: boolean; Default: false. DO_SOS¶. Do ?. Type: boolean; Default: false. E_CONVERGENCE¶. Type: conv double; Default: 1e-8. HESS_TYPE¶. Type: string; Possible Values: NONE; Default: NONE. LEVEL_SHIFT¶. Type: double; Default: 0.02. MAX_MOGRAD_CONVERGENCE¶. Type: conv double; Default: 1e-4. MO_MAXITER¶. Type: integer; Default: 50. MO_READ¶. Do read coefficient matrices from psi files?. Type: boolean; Default: false. MO_STEP_MAX¶. Type: double; Default: 0.5. MO_WRITE¶. Do write coefficient matrices to psi files?. Type: boolean; Default: false. MP2_OS_SCALE¶. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. Type: double; Default: 1.0/3.0. NAT_ORBS¶. Do ?. Type: boolean; Default: false. OMP2_ORBS_PRINT¶. Do ?. Type: boolean; Default: false. OPT_METHOD¶. Type: string; Possible Values: SD, DIIS; Default: DIIS. ORTH_TYPE¶. Type: string; Possible Values: GS, MGS; Default: MGS. RMS_MOGRAD_CONVERGENCE¶. Type: conv double; Default: 1e-5. R_CONVERGENCE¶. Type: conv double; Default: 1e-5. SOS_SCALE¶. Type: double; Default: 1.3. SOS_SCALE2¶. Type: double; Default: 1.2. Table Of Contents. OMP2; General; CACHELEVEL; CC_MAXITER; CUTOFF; DIIS_MAX_VECS; DO_SCS; DO_SOS; E_CONVERGENCE; HESS_TYPE; LEVEL_SHIFT; MAX_MOGRAD_CONVERGENCE; MO_MAXITER; MO_READ; MO_STEP_MAX; MO_WRITE; MP2_OS_SCALE; MP2_SS_SCALE; NAT_ORBS; OMP2_ORBS_PRINT; OPT_METHOD; ORTH_TYPE; RMS_MOGRAD_CONVERGENCE; R_CONVERGENCE; SOS_SCALE; SOS_SCALE2. Previous topic; MRCC_RESTART; Next topic; CACHELEVEL; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices »; Keywords by Module ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__omp2-1.html:1543,CACHE,CACHELEVEL,1543,psi4manual/4.0b2/autodir_options_c/module__omp2-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__omp2-1.html,4,['CACHE'],['CACHELEVEL']
Performance,"P2) |; +-------------------------+---------------------------------------------------------------------------------------+; | ccsd | coupled cluster singles and doubles (CCSD) |; +-------------------------+---------------------------------------------------------------------------------------+; | ccsd(t) | CCSD with perturbative triples |; +-------------------------+---------------------------------------------------------------------------------------+; | eom-ccsd | equation of motion (EOM) CCSD |; +-------------------------+---------------------------------------------------------------------------------------+. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`driver.energy`. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o``",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/driver.html:34921,perform,performed,34921,psi4manual/4.0b2/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/driver.html,2,['perform'],['performed']
Performance,P2.5; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; —; MP_TYPE CD. olccd; Orbital-Optimized Linear CCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE CONV. Density-Fitted Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE DF. Cholesky-Decomposed Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; —; CC_TYPE CD. Spin-Component-Scaled Orbital-Optimized MP capabilities of OCC/DFOCC modules¶. name; calls method; Energy; Gradient. scs-omp3; Spin-Component Scaled Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —. sos-omp3; Spin-Opposite Scaled Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —. scs(n)-omp3; A special version of SCS-OMP3 for nucleobase interactions; RHF/UHF/ROHF/RKS/UKS; —. scs-omp3-vdw; A special version of SCS-OMP3 (from ethene dimers); RHF/UHF/ROHF/RKS/UKS; —. sos-pi-omp3; A special version of SOS-OMP3 for -systems; RHF/UHF/ROHF/RKS/UKS; —. scs-omp2; Spin-Component Scaled Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —. sos-omp2; Spin-Opposite Scaled Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —. scs(n)-omp2; A special version of SCS-OMP2 for nucleobase interactions; RHF/UHF/ROHF/RKS/UKS; —. scs-omp2-vdw; A special version of SCS-OMP2 (from ethene dimers); RHF/UHF/ROHF/RKS/UKS; —. sos-pi-omp2; A special version of SOS-OMP2 for -systems; RHF/UHF/ROHF/RKS/UKS; —. Basic OCC Keywords¶. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MO_MAXITER¶. Maximum number of iterations to d,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/occ-1.html:8398,Optimiz,Optimized,8398,psi4manual/1.0.0/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/occ-1.html,2,['Optimiz'],['Optimized']
Performance,P2_OS_SCALE — PSI4 [beta5] documentation; MP2_SS_SCALE — PSI4 [beta5] documentation; NEGLECT_DISTANT_PAIR — PSI4 [beta5] documentation; NEW_TRIPLES — PSI4 [beta5] documentation; NUM_AMPS_PRINT — PSI4 [beta5] documentation; PAIR_ENERGIES_PRINT — PSI4 [beta5] documentation; PROPERTY — PSI4 [beta5] documentation; R_CONVERGENCE — PSI4 [beta5] documentation; REFERENCE — PSI4 [beta5] documentation; RESTART — PSI4 [beta5] documentation; ROOTS_PER_IRREP — PSI4 [beta5] documentation; SCREEN_INTS — PSI4 [beta5] documentation; SCS — PSI4 [beta5] documentation; SCS_CCSD — PSI4 [beta5] documentation; SCS_MP2 — PSI4 [beta5] documentation; SCS_N — PSI4 [beta5] documentation; SCSN_MP2 — PSI4 [beta5] documentation; SEMICANONICAL — PSI4 [beta5] documentation; SPINADAPT_ENERGIES — PSI4 [beta5] documentation; T2_COUPLED — PSI4 [beta5] documentation; T3_WS_INCORE — PSI4 [beta5] documentation; WFN — PSI4 [beta5] documentation; ABCD — PSI4 [beta5] documentation; CACHELEVEL — PSI4 [beta5] documentation; CACHETYPE — PSI4 [beta5] documentation; CC_NUM_THREADS — PSI4 [beta5] documentation; CC3_FOLLOW_ROOT — PSI4 [beta5] documentation; COLLAPSE_WITH_LAST — PSI4 [beta5] documentation; COMPLEX_TOLERANCE — PSI4 [beta5] documentation; E_CONVERGENCE — PSI4 [beta5] documentation; EOM_GUESS — PSI4 [beta5] documentation; EOM_REFERENCE — PSI4 [beta5] documentation; EXCITATION_RANGE — PSI4 [beta5] documentation; FULL_MATRIX — PSI4 [beta5] documentation; LOCAL — PSI4 [beta5] documentation; LOCAL_CUTOFF — PSI4 [beta5] documentation; LOCAL_DO_SINGLES — PSI4 [beta5] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta5] documentation; LOCAL_GHOST — PSI4 [beta5] documentation; LOCAL_METHOD — PSI4 [beta5] documentation; LOCAL_PRECONDITIONER — PSI4 [beta5] documentation; LOCAL_WEAKP — PSI4 [beta5] documentation; MAXITER — PSI4 [beta5] documentation; NEW_TRIPLES — PSI4 [beta5] documentation; NUM_AMPS_PRINT — PSI4 [beta5] documentation; PROP_ROOT — PSI4 [beta5] documentation; PROP_SYM — PSI4 [beta5] documentation; R,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1545128,CACHE,CACHETYPE,1545128,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHETYPE']
Performance,"P3; Y; N; RHF/ROHF/UHF/RKS/UKS. sos-omp3; Spin-Opposite Scaled Orbital-Optimized MP3; Y; N; RHF/ROHF/UHF/RKS/UKS. scsn-omp3; A special version of SCS-OMP3 for nucleobase interactions; Y; N; RHF/ROHF/UHF/RKS/UKS. scs-omp3-vdw; A special version of SCS-OMP3 (from ethene dimers); Y; N; RHF/ROHF/UHF/RKS/UKS. sos-pi-omp3; A special version of SOS-OMP3 for -systems; Y; N; RHF/ROHF/UHF/RKS/UKS. The conventional and orbital-optimized MP2.5 methods currently supported in PSI4 are outlined in Table OMP2.5 Methods. Name; Calls Method; Energy; Gradient; Reference. mp2.5; MP2.5; Y; Y; RHF/UHF. omp2.5; Orbital-Optimized MP2.5; Y; Y; RHF/ROHF/UHF/RKS/UKS. The conventional and orbital-optimized CEPA methods currently supported in PSI4 are outlined in Table OCEPA Methods. Name; Calls Method; Energy; Gradient; Reference. ocepa; Orbital-Optimized CEPA; Y; Y; RHF/ROHF/UHF/RKS/UKS. scs-ocepa; Spin-Component Scaled Orbital-Optimized CEPA; Y; N; RHF/ROHF/UHF/RKS/UKS. sos-ocepa; Spin-Opposite Scaled Orbital-Optimized CEPA; Y; N; RHF/ROHF/UHF/RKS/UKS. cepa0; CEPA(0) (identical to Linearized CCD); Y; Y; RHF/UHF. Basic Keywords¶. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. Advanced Keywords¶. OPT_METHOD¶. The optimization algorithm. M",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/occ-1.html:7769,Optimiz,Optimized,7769,psi4manual/4.0b5/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/occ-1.html,2,['Optimiz'],['Optimized']
Performance,"P3; Y; N; RHF/ROHF/UHF/RKS/UKS. sos-omp3; Spin-Opposite Scaled Orbital-Optimized MP3; Y; N; RHF/ROHF/UHF/RKS/UKS. scsn-omp3; A special version of SCS-OMP3 for nucleobase interactions; Y; N; RHF/ROHF/UHF/RKS/UKS. scs-omp3-vdw; A special version of SCS-OMP3 (from ethene dimers); Y; N; RHF/ROHF/UHF/RKS/UKS. sos-pi-omp3; A special version of SOS-OMP3 for -systems; Y; N; RHF/ROHF/UHF/RKS/UKS. The conventional and orbital-optimized MP2.5 methods currently supported in PSI4 are outlined in Table OMP2.5 Methods. Name; Calls Method; Energy; Gradient; Reference. mp2.5; MP2.5; Y; Y; RHF/UHF. omp2.5; Orbital-Optimized MP2.5; Y; Y; RHF/ROHF/UHF/RKS/UKS. The conventional and orbital-optimized CEPA methods currently supported in PSI4 are outlined in Table OCEPA Methods. Name; Calls Method; Energy; Gradient; Reference. ocepa; Orbital-Optimized CEPA; Y; Y; RHF/ROHF/UHF/RKS/UKS. scs-ocepa; Spin-Component Scaled Orbital-Optimized CEPA; Y; N; RHF/ROHF/UHF/RKS/UKS. sos-ocepa; Spin-Opposite Scaled Orbital-Optimized CEPA; Y; N; RHF/ROHF/UHF/RKS/UKS. cepa0; CEPA(0) (identical to Linearized CCD); Y; Y; RHF/UHF. Basic Keywords¶. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-8. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. Advanced Keywords¶. OPT_METHOD¶. The optimization algorithm. M",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/occ-1.html:7172,Optimiz,Optimized,7172,psi4manual/4.0b4/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/occ-1.html,2,['Optimiz'],['Optimized']
Performance,"P4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Moller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-averaged perturbation theory (ZAPT) [manual]. omp2; orbital-optimized second-order MP perturbation theory [manual]. scs-omp2; spin-component scaled OMP2 [manual]. scs(n)-omp2; a special version of SCS-OMP2 for nucleobase interactions [manual]. scs-omp2-vdw; a special version of SCS-OMP2 (from ethene dimers) [manual]. sos-omp2; spin-opposite scaled OMP2 [manual]. sos-pi-omp2; A special version of SOS-OMP2 for pi systems [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. scs-omp3; spin-component scaled OMP3 [manual]. scs(n)-omp3; a special version of SCS-OMP3 for nucleobase interactions [manual]. scs-omp3-vdw; a special version of SCS-OMP3 (from ethene dimers) [manual]. sos-omp3; spin-opposite scaled OMP3 [manual]. sos-pi-omp3; A special version of SOS-OMP3 for pi systems [manual]. omp2.5; orbital-optimized MP2.5 [manual]. lccsd, cepa(0); coupled electron pair approximation variant 0 [manual] [details]. fno-lccsd, fno-cepa(0); CEPA(0) with frozen natural orbitals [manual]. cepa(1); coupled electron pair approximation variant 1 [manual]. fno-cepa(1); CEPA(1) with frozen natural orbitals [manual]. cepa(3); coupled electron pair approximation variant 3 [manual]. fno-cepa(3); CEPA(3) with frozen natural orbitals [manual]. acpf; averaged coupled-pair functional [manual]. fno-acpf; ACPF with frozen natural orbitals [manual]. aqcc; averaged quadratic coupled cluster [manual]. fno-aqcc; AQCC with frozen natural orbitals [manual]. qcisd; quadratic CI singles doubles (QCISD) [manual]. fno-qcisd; QCISD with frozen natural orbitals [manual]. lccd; Linear CCD [manual] [details]. fno-lccd; LCCD with frozen natural orbitals [manual]. olccd; orbital optimized LCCD [manual]. cc2; approximate coupled cluster singles and doubles (CC2) [manual]. ccd; coupled cluster doubles (CCD) [manual]. ccsd; coup",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/energy-1.html:2907,optimiz,optimized,2907,psi4manual/1.0.0/energy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/energy-1.html,2,['optimiz'],['optimized']
Performance,"P4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual]. zaptn; nth-order z-averaged perturbation theory (ZAPT) [manual]. omp2; orbital-optimized second-order MP perturbation theory [manual]. scs-omp2; spin-component scaled OMP2 [manual]. scs(n)-omp2; a special version of SCS-OMP2 for nucleobase interactions [manual]. scs-omp2-vdw; a special version of SCS-OMP2 (from ethene dimers) [manual]. sos-omp2; spin-opposite scaled OMP2 [manual]. sos-pi-omp2; A special version of SOS-OMP2 for pi systems [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. scs-omp3; spin-component scaled OMP3 [manual]. scs(n)-omp3; a special version of SCS-OMP3 for nucleobase interactions [manual]. scs-omp3-vdw; a special version of SCS-OMP3 (from ethene dimers) [manual]. sos-omp3; spin-opposite scaled OMP3 [manual]. sos-pi-omp3; A special version of SOS-OMP3 for pi systems [manual]. omp2.5; orbital-optimized MP2.5 [manual]. lccsd, cepa(0); coupled electron pair approximation variant 0 [manual] [details]. fno-lccsd, fno-cepa(0); CEPA(0) with frozen natural orbitals [manual]. cepa(1); coupled electron pair approximation variant 1 [manual]. fno-cepa(1); CEPA(1) with frozen natural orbitals [manual]. cepa(3); coupled electron pair approximation variant 3 [manual]. fno-cepa(3); CEPA(3) with frozen natural orbitals [manual]. acpf; averaged coupled-pair functional [manual]. fno-acpf; ACPF with frozen natural orbitals [manual]. aqcc; averaged quadratic coupled cluster [manual]. fno-aqcc; AQCC with frozen natural orbitals [manual]. qcisd; quadratic CI singles doubles (QCISD) [manual]. fno-qcisd; QCISD with frozen natural orbitals [manual]. lccd; Linear CCD [manual] [details]. fno-lccd; LCCD with frozen natural orbitals [manual]. olccd; orbital optimized LCCD [manual]. cc2; approximate coupled cluster singles and doubles (CC2) [manual]. ccd; coupled cluster doubles (CCD) [manual]. ccsd; coup",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/api/psi4.driver.energy.html:2809,optimiz,optimized,2809,psi4manual/1.1.0/api/psi4.driver.energy.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/api/psi4.driver.energy.html,21,['optimiz'],['optimized']
Performance,"PACKAGE (GLOBALS). IntegralFactory class in psi4.core. integrals, [1]. integrals() psi4.core.MintsHelper method. integrals_erf() psi4.core.MintsHelper method. integrals_erfc() psi4.core.MintsHelper method. IntegralTransform class in psi4.core. INTERFRAG_COLLINEAR_TOL (OPTKING). INTERFRAG_COORDS (OPTKING). INTERFRAG_DIST_INV (OPTKING). INTERFRAG_HESS (OPTKING). INTERFRAG_MODE (OPTKING). INTERFRAG_STEP_LIMIT (OPTKING). INTERFRAGMENT_CONNECT (OPTKING). INTERNAL_ROTATIONS (MCSCF). INTRAFRAG_HESS (OPTKING). INTRAFRAG_STEP_LIMIT (OPTKING). INTRAFRAG_STEP_LIMIT_MAX (OPTKING). INTRAFRAG_STEP_LIMIT_MIN (OPTKING). INTS_TOLERANCE (CCDENSITY). (DCT). (DFMP2). (FISAPT). (MRCC). (SAPT). (SCF). IntVector class in psi4.core. invert() psi4.core.Matrix method. IO class in psi4.core. IOManager class in psi4.core. iota() psi4.core.IntVector static method. ip_fitting() in module psi4.driver.frac. IP_POLES (OCC). ipi_broker() in module psi4.driver. IPIBroker class in psi4.driver.ipi_broker. IRC. ; geometry optimization. IRC_DIRECTION (OPTKING). IRC_POINTS (OPTKING). IRC_STEP_SIZE (OPTKING). IrreducibleRepresentation class in psi4.core. irrep() psi4.core.CdSalc method. irrep_index() psi4.core.CdSalc method. irrep_labels() psi4.core.Molecule method. is_c_hybrid() psi4.core.SuperFunctional method. is_c_lrc() psi4.core.SuperFunctional method. is_c_scs_hybrid() psi4.core.SuperFunctional method. is_cartesian() psi4.core.GaussianShell method. is_done() psi4.core.AOShellCombinationsIterator method. is_gga() psi4.core.Functional method. psi4.core.SuperFunctional method. is_inverted() psi4.core.FittingMetric method. is_libxc_func() psi4.core.SuperFunctional method. is_lrc() psi4.core.Functional method. is_meta() psi4.core.Functional method. psi4.core.SuperFunctional method. is_poisson() psi4.core.FittingMetric method. is_pure() psi4.core.GaussianShell method. is_variable() psi4.core.Molecule method. is_x_hybrid() psi4.core.SuperFunctional method. is_x_lrc() psi4.core.SuperFunctional method. ISA. ; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/genindex.html:64991,optimiz,optimization,64991,psi4manual/1.7.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/genindex.html,2,['optimiz'],['optimization']
Performance,"PATH and PATH environment variables; lenv = {; 'PATH': ':'.join([os.path.abspath(x) for x in os.environ.get('PSIPATH', '').split(':') if x != '']) +; ':' + os.environ.get('PATH'),; 'LD_LIBRARY_PATH': os.environ.get('LD_LIBRARY_PATH'); }; # Filter out None values as subprocess will fault on them; lenv = {k: v for k, v in lenv.items() if v is not None}. # Need to move to the scratch directory, perferrably into a separate directory in that location; psi_io = core.IOManager.shared_object(); os.chdir(psi_io.get_default_path()). # Make new directory specifically for mrcc; mrcc_tmpdir = 'mrcc_' + str(os.getpid()); if 'path' in kwargs:; mrcc_tmpdir = kwargs['path']. # Check to see if directory already exists, if not, create.; if os.path.exists(mrcc_tmpdir) is False:; os.mkdir(mrcc_tmpdir). # Move into the new directory; os.chdir(mrcc_tmpdir). # Generate integrals and input file (dumps files to the current directory); core.mrcc_generate_input(ref_wfn, level); ref_wfn.set_module(""mrcc""). # Load the fort.56 file; # and dump a copy into the outfile; core.print_out('\n===== Begin fort.56 input for MRCC ======\n'); core.print_out(open('fort.56', 'r').read()); core.print_out('===== End fort.56 input for MRCC ======\n'). # Modify the environment:; # PGI Fortan prints warning to screen if STOP is used; lenv['NO_STOP_MESSAGE'] = '1'. # Obtain the number of threads MRCC should use; lenv['OMP_NUM_THREADS'] = str(core.get_num_threads()). # If the user provided MRCC_OMP_NUM_THREADS set the environ to it; if core.has_option_changed('MRCC', 'MRCC_OMP_NUM_THREADS'):; lenv['OMP_NUM_THREADS'] = str(core.get_option('MRCC', 'MRCC_OMP_NUM_THREADS')). # Call dmrcc, directing all screen output to the output file; external_exe = 'dmrcc'; try:; retcode = subprocess.Popen([external_exe], bufsize=0, stdout=subprocess.PIPE, env=lenv); except OSError as e:; sys.stderr.write('Program %s not found in path or execution failed: %s\n' % (external_exe, e.strerror)); core.print_out('Program %s not found in path",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html:162833,Load,Load,162833,psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html,2,['Load'],['Load']
Performance,"PINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attemp to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCFT); DCFT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum siz",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:209845,perform,perform,209845,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['perform'],['perform']
Performance,"PINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCFT); DCFT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum si",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:209521,perform,perform,209521,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,6,['perform'],['perform']
Performance,POLE_MAXITER — PSI4 [beta2] documentation; PR — PSI4 [beta2] documentation; REFERENCE — PSI4 [beta2] documentation; ROOTS_PER_IRREP — PSI4 [beta2] documentation; SEM_MAXITER — PSI4 [beta2] documentation; AEL — PSI4 [beta2] documentation; AO_BASIS — PSI4 [beta2] documentation; CACHELEVEL — PSI4 [beta2] documentation; GAUGE — PSI4 [beta2] documentation; INTS_TOLERANCE — PSI4 [beta2] documentation; ONEPDM — PSI4 [beta2] documentation; OPDM_RELAX — PSI4 [beta2] documentation; PROP_ALL — PSI4 [beta2] documentation; PROP_ROOT — PSI4 [beta2] documentation; PROP_SYM — PSI4 [beta2] documentation; REFERENCE — PSI4 [beta2] documentation; ROOTS_PER_IRREP — PSI4 [beta2] documentation; WFN — PSI4 [beta2] documentation; XI — PSI4 [beta2] documentation; XI_CONNECT — PSI4 [beta2] documentation; ZETA — PSI4 [beta2] documentation; ABCD — PSI4 [beta2] documentation; ANALYZE — PSI4 [beta2] documentation; AO_BASIS — PSI4 [beta2] documentation; BRUECKNER_ORBS_R_CONVERGENCE — PSI4 [beta2] documentation; CACHELEVEL — PSI4 [beta2] documentation; CACHETYPE — PSI4 [beta2] documentation; CC_NUM_THREADS — PSI4 [beta2] documentation; CC_OS_SCALE — PSI4 [beta2] documentation; CC_SS_SCALE — PSI4 [beta2] documentation; DIIS — PSI4 [beta2] documentation; FORCE_RESTART — PSI4 [beta2] documentation; LOCAL — PSI4 [beta2] documentation; LOCAL_CUTOFF — PSI4 [beta2] documentation; LOCAL_METHOD — PSI4 [beta2] documentation; LOCAL_PAIRDEF — PSI4 [beta2] documentation; LOCAL_WEAKP — PSI4 [beta2] documentation; MAXITER — PSI4 [beta2] documentation; MP2_AMPS_PRINT — PSI4 [beta2] documentation; MP2_OS_SCALE — PSI4 [beta2] documentation; MP2_SS_SCALE — PSI4 [beta2] documentation; NEW_TRIPLES — PSI4 [beta2] documentation; NUM_AMPS_PRINT — PSI4 [beta2] documentation; PAIR_ENERGIES_PRINT — PSI4 [beta2] documentation; PROPERTY — PSI4 [beta2] documentation; R_CONVERGENCE — PSI4 [beta2] documentation; REFERENCE — PSI4 [beta2] documentation; RESTART — PSI4 [beta2] documentation; SCS_CCSD — PSI4 [beta2] documentation; SCS,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:904370,CACHE,CACHELEVEL,904370,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,"PS2; COOKBOOK; DFTD3; DFTD4; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. fd-gradient; SCF STO-3G finite-difference tests. cc36; CC2(RHF)/cc-pVDZ energy of H2O. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc32; CC3/cc-pVDZ H2O \(R_e",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/testsuite.html:1661,perform,performed,1661,psi4manual/1.9.x/testsuite.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/testsuite.html,1,['perform'],['performed']
Performance,"PSI module calls for; a MP3 gradient calculation. run_mrcc(name, **kwargs)[source]¶; Function that prepares environment and input files; for a calculation calling Kallay’s MRCC code. run_ocepa(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an orbital-optimized CEPA computation. run_ocepa_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; OCEPA gradient calculation. run_omp2(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an orbital-optimized MP2 computation. run_omp2_5(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an orbital-optimized MP2.5 computation. run_omp2_5_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; OMP2.5 gradient calculation. run_omp2_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; OMP2 gradient calculation. run_omp3(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an orbital-optimized MP3 computation. run_omp3_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; OMP3 gradient calculation. run_psimrcc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the MCSCF module. run_psimrcc_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the SCF module. run_sapt(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SAPT calculation of any level. run_sapt_ct(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a charge-transfer SAPT calcuation of any level. run_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a self-consistent-field theory (HF & DFT) calculation. run_scf_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SCF gradie",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_driver-1.html:13095,optimiz,optimized,13095,psi4manual/4.0b4/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver-1.html,2,['optimiz'],['optimized']
Performance,"PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendices include a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶. Overall PSI4 Package¶; The following citation should be used in any publication utilizing the; PSI4 program package:. “Psi4 1.1: An Open-Source Electronic Structure Program Emphasizing; Automation, Advanced Libraries, and Interoperability”, R. M. Parrish, L.; A. Burns, D. G. A. Smith, A. C. Simmonett, A. E. DePrince III, E. G.; Hohenstein, U. Bozkaya, A. Yu. Sokolov, R. Di Remigio, R. M. Richard, J.; F. Gonthier, A. M. James, H. R. McAlexander, A. Kumar, M. Saitow, X. Wang,; B. P. Pritchard, P. Verma, H. F. Schaefer III, K.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/introduction-1.html:2523,optimiz,optimization,2523,psi4manual/1.1.0/introduction-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/introduction-1.html,6,['optimiz'],['optimization']
Performance,"PSI4 gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory.; In this section, we provide an overview of some of the features of; PSI4 along with the prerequisite steps for running calculations.; Sec. Tutorial provides a brief tutorial to help new users; get started. Section Psithon offers further details into the; structure of PSI4 input files and how Python can be mixed with; quantum chemistry directives in PSI4. Section Psithon Functions; provides more detail on the Python functions provided by PSI4; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using PSI4; (e.g., Hartree–Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The Appendices include a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under psi4/samples.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest PSI4 documentation, check; www.psicode.org. Citing PSI4¶. Overall PSI4 Package¶; The following citation should be used in any publication utilizing the; PSI4 program package:. “Psi4 1.4: Open-Source Software for High-Throughput Quantum Chemistry”,; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C.; Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A.; M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B.; Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O’Brien, J. M.; Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/introduction.html:2546,optimiz,optimization,2546,psi4manual/master/introduction.html,https://psicode.org,https://psicode.org/psi4manual/master/introduction.html,9,['optimiz'],['optimization']
Performance,"PSI4, which are automatically; made available within all PSI4 input files are in Physical Constants.; In Psithon input files, prepend physical constants with psi_ to; prevent clashes with user-defined variables (e.g., psi_h). In; PsiAPI mode, access as, e.g., psi4.constants.h. Memory Specification¶; By default, PSI4 assumes that 500 MiB of memory are available. While this is; enough for many computations, many of the algorithms will perform better if; more is available. To specify memory, the memory keyword should be used. The following; lines are all equivalent methods for specifying that 2 GB of RAM is available; to PSI4:; # all equivalent. memory 2 GB. memory 2000 MB. memory 2000000 kB. Please note that memory can be specified both in IEC binary units (1 KiB = 1024 bytes) and SI units (1 kB = 1000 bytes). PSI4 recognizes and obeys both of them correctly. The units are not case sensitive (Kb and KB are equivalent to kB).; By default, PSI4 performs a “sanity check” when parsing Psithon input files, enforcing a minimum memory requirement of 250 MiB. While it is generally not recomennded to do so, expert users can bypass this check by directly setting the number of bytes availble to PSI4:; # setting available memory to 2 MB; set_memory_bytes(2000000). Please note that this memory setting only governs the maximal memory; usage of the major data structures, and actual total memory usage; is slightly higher. This is usually a negligible amount, except when; setting tiny memory allowances.; One convenient way to override the PSI4 default memory is to place a; memory command in the ~/.psi4rc file (Sec. ~/.psi4rc File). For example,; the following makes the default memory 2 GB.; set_memory(2000000000). However, unless you’re assured of having only one job running on a node at; a time (and all nodes on the filesystem with ~/.psi4rc have similar memory; capacities), it is advised to set memory in the input file on a; per-calculation basis.; That same command can be used for P",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/psithoninput.html:2914,perform,performs,2914,psi4manual/master/psithoninput.html,https://psicode.org,https://psicode.org/psi4manual/master/psithoninput.html,9,['perform'],['performs']
Performance,"PT MODELCHEM']. dbix = self.dbdict.keys().index(db); for rxn, orxn in odb.hrxn.iteritems():; lss = self.sset[sset][dbix]; if lss is not None:; if rxn in odb.sset[lss]:; dbrxn = orxn.dbrxn; try:; elst = saptdata['SAPT ELST ENERGY'][dbrxn]; exch = saptdata['SAPT EXCH ENERGY'][dbrxn]; ind = saptdata['SAPT IND ENERGY'][dbrxn]; disp = saptdata['SAPT DISP ENERGY'][dbrxn]; except (KeyError, AttributeError):; print(""""""Warning: DATA['SAPT * ENERGY'] missing for reaction %s"""""" % (dbrxn)); if failoninc:; break; else:; if not all([elst, ind, disp]): # exch sometimes physically zero; print(""""""Warning: DATA['SAPT * ENERGY'] missing piece for reaction %s: %s"""""" % (dbrxn, [elst, exch, ind, disp])); if failoninc:; break; saptpackage[dbrxn] = {'mc': saptmc,; 'elst': elst,; 'exch': exch,; 'ind': ind,; 'disp': disp}; return saptpackage. [docs] def plot_ternary(self, sset='default', labeled=True,; pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True, # pythonpath=None; view=True,; saveas=None, relpath=False, graphicsformat=['pdf']):; """"""This is a stopgap function that loads sapt component data from; sapt_punt in bfdb repo, then formats it to plot a ternary diagram. """"""; saptdata = self.load_saptdata_frombfdb(sset=sset, pythonpath=pythonpath,; failoninc=failoninc). dbdat = []; mcs = []; for dat in saptdata.values():; dbdat.append([dat['elst'], dat['ind'], dat['disp']]); if dat['mc'] not in mcs:; mcs.append(dat['mc']). title = ' '.join([self.dbse, sset, ' '.join(mcs)]). # generate matplotlib instructions and call or print; try:; from . import mpl; import matplotlib.pyplot as plt; except ImportError:; pass; # if not running from Canopy, print line to execute from Canopy; else:; # if running from Canopy, call mpl directly; filedict = mpl.ternary(dbdat, title=title, labeled=labeled,; view=view,; saveas=saveas, relpath=relpath, graphicsformat=graphicsformat); return filedict. [docs] def plot_flat(self, modelchem, benchmark='default', sset='default',; failoninc=True, verbose=False, c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:66626,load,loads,66626,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['load'],['loads']
Performance,"PT)¶SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC)¶DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC)¶OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DISP_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-dispersion term. Type: boolean; Default: false. DO_IND30_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT2+3, compute the non-approximated third-order exchange-induction term. Type: boolean; Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-induction term. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_LINK (SCF)¶SCF — Perform the linear scaling exchange (LinK) algorithm, as described in [Ochsenfeld:1998:1663]. Only applies to Direct SCF. Type: boolean; Default: false. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html:116438,Perform,Perform,116438,psi4manual/1.6.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html,1,['Perform'],['Perform']
Performance,"PT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF)¶SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCT)¶DCT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCT)¶DCT (Expert) — Performs stability analysis of the DCT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCT)¶DCT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCT)¶DCT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCT)¶DCT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCT)¶DCT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING)¶OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SUMMATION_FIELDS (P",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:220821,Perform,Performs,220821,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,5,['Perform'],['Performs']
Performance,"PT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF)¶SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCT)¶DCT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCT)¶DCT (Expert) — Performs stability analysis of the DCT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCT)¶DCT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCT)¶DCT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCT)¶DCT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCT)¶DCT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING)¶OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, P_RFO, NR, SD, LINESEARCH; Default: RFO. SUMMATION_FIELDS (P",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html:226853,Perform,Performs,226853,psi4manual/1.7.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html,3,['Perform'],['Performs']
Performance,"PT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF)¶SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCT)¶DCT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCT)¶DCT (Expert) — Performs stability analysis of the DCT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCT)¶DCT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCT)¶DCT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCT)¶DCT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCT)¶DCT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING)¶OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, RS_I_RFO, P_RFO, NR, SD, LINESEARCH; Default: RFO. SUMMATION",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:233855,Perform,Performs,233855,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,1,['Perform'],['Performs']
Performance,"PT2+(3)(CCD) plus CT [manual]. sapt2+3(ccd)-ct; SAPT2+3(CCD) plus CT [manual]. adc; 2nd-order algebraic diagrammatic construction (ADC) [manual]. eom-cc2; EOM-CC2 [manual]. eom-ccsd; equation of motion (EOM) CCSD [manual]. eom-cc3; EOM-CC3 [manual]. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/energy-1.html:8329,perform,perform,8329,psi4manual/1.3.2/energy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/energy-1.html,4,['perform'],['perform']
Performance,"PTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING); OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FLEXIBLE_G_CONVERGENCE (OPTKING); OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. FOLLOW_ROOT (DETCI); DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 0. FOLLOW_ROOT (MCSCF); MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FOLLOW_ROOT (PSIMRCC); PSIMRCC — Which root of the effective hamiltonian is the target state?. Type: integer; Default: 1. FOLLOW_STEP_INCREMENT (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, the increment to modify FOLLOW_STEP_SCALE value if we end up in the same SCF solution. Type: double; Default: 0.2. FOLLOW_STEP_SCALE (SCF); SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, how much to scale the step along the eigenvector by. A full step of \(pi/2\) corresponds to a value of 1.0. Type: double; Default: 0.5. FOLLOW_VECTOR (DETCI); DETCI (Expert) — In following a particular root (see FOLLOW_ROOT), sometimes the root number changes. To follow a root of a particular character, one can specify a list of determinants and their coefficients, and the code will follow the root ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:126638,optimiz,optimization,126638,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,6,['optimiz'],['optimization']
Performance,"PTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING); OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FLEXIBLE_G_CONVERGENCE (OPTKING); OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. FOLLOW_ROOT (DETCI); DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 1. FOLLOW_ROOT (MCSCF); MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FOLLOW_ROOT (PSIMRCC); PSIMRCC — Which root of the effective hamiltonian is the target state?. Type: integer; Default: 1. FOLLOW_STEP_INCREMENT (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, the increment to modify FOLLOW_STEP_SCALE value if we end up in the same SCF solution. Type: double; Default: 0.2. FOLLOW_STEP_SCALE (SCF); SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, how much to scale the step along the eigenvector by. A full step of pi/2 corresponds to a value of 1.0. Type: double; Default: 0.5. FOLLOW_VECTOR (DETCI); DETCI (Expert) — In following a particular root (see FOLLOW_ROOT), sometimes the root number changes. To follow a root of a particular character, one can specify a list of determinants and their coefficients, and the code will follow the root wi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:125701,optimiz,optimization,125701,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimization']
Performance,"PTKING', 'INTCOS_GENERATE_EXIT') == False:; if core.get_option('OPTKING', 'KEEP_INTCOS') == False:; core.opt_clean(); # Changing environment to optimized geometry as expected by user; molecule.set_geometry(moleculeclone.geometry()); for postcallback in hooks['optimize']['post']:; postcallback(lowername, wfn=wfn, **kwargs); core.clean(). # Cleanup binary file 1; if custom_gradient or ('/' in lowername) or kwargs.get('bsse_type', None) is not None:; core.IOManager.shared_object().set_specific_retention(1, False). optstash.restore(). if return_history:; history = {; 'energy': step_energies,; 'gradient': step_gradients,; 'coordinates': step_coordinates,; }. if return_wfn and return_history:; return (thisenergy, wfn, history); elif return_wfn and not return_history:; return (thisenergy, wfn); elif return_history and not return_wfn:; return (thisenergy, history); else:; return thisenergy. elif optking_rval == core.PsiReturnType.Failure:; print('Optimizer: Optimization failed!'); # Mark the optimization data as disposable now that the optimization is done.; core.IOManager.shared_object().set_specific_retention(1, False); if (core.get_option('OPTKING', 'KEEP_INTCOS') == False):; core.opt_clean(); molecule.set_geometry(moleculeclone.geometry()); core.clean(); optstash.restore(); raise OptimizationConvergenceError(""""""geometry optimization"""""", n - 1, wfn); return thisenergy. core.print_out('\n Structure for next step:\n'); moleculeclone.print_in_input_format(). n += 1. if core.get_option('OPTKING', 'INTCOS_GENERATE_EXIT') == False:; if core.get_option('OPTKING', 'KEEP_INTCOS') == False:; core.opt_clean(). optstash.restore(); raise OptimizationConvergenceError(""""""geometry optimization"""""", n - 1, wfn). [docs]def hessian(name, **kwargs):; r""""""Function complementary to :py:func:`~frequency`. Computes force; constants, deciding analytic, finite difference of gradients, or; finite difference of energies. :returns: :py:class:`~psi4.core.Matrix` |w--w| Total non-mass-weighted electroni",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html:60791,Optimiz,Optimizer,60791,psi4manual/1.3.2/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html,12,"['Optimiz', 'optimiz']","['Optimization', 'Optimizer', 'optimization']"
Performance,"PV6Z, PCVDZ, PCVTZ, PCVQZ, PCV5Z, PCV6Z, AUG-PVDZ, AUG-PVTZ, AUG-PVTZ, AUG-PVQZ, AUG-PV5Z, AUG-PV6Z, D-AUG-PVDZ, D-AUG-PVTZ, D-AUG-PVQZ, D-AUG-PV5Z, D-AUG-PV6Z, cc-pVDZ, cc-pVTZ, cc-pVQZ, cc-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR); CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR); CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than , where is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the ty",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:25348,perform,performed,25348,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['perform'],['performed']
Performance,"PV6Z, PCVDZ, PCVTZ, PCVQZ, PCV5Z, PCV6Z, AUG-PVDZ, AUG-PVTZ, AUG-PVTZ, AUG-PVQZ, AUG-PV5Z, AUG-PV6Z, D-AUG-PVDZ, D-AUG-PVTZ, D-AUG-PVQZ, D-AUG-PV5Z, D-AUG-PV6Z, cc-pVDZ, cc-pVTZ, cc-pVQZ, cc-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR); CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR); CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR); CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR); CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV (CFOUR); CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR); CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR); CFOUR — Sp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:25096,perform,performed,25096,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,4,['perform'],['performed']
Performance,"P_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8]. ONE-ELECTRON ENERGY. one_electron_integrals() psi4.core.MintsHelper method. OneBodyAOInt class in psi4.core. OneBodySOInt class in psi4.core. onel_Hx() psi4.core.CUHF method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DCT). (DETCI). opdm() psi4.core.CIWavefunction method. OPDM_GRID_CUTOFF (CCDENSITY). OPDM_GRID_DUMP (CCDENSITY). OPDM_GRID_STEPSIZE (CCDENSITY). OPDM_ONLY (CCDENSITY). OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method. open_check() psi4.core.IO method. operate() psi4.core.SymmetryOperation method. opt(). . see optimize(). opt() in module psi4.driver. opt_clean() in module psi4.core. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_TYPE (OPTKING). OPTIMIZATION ITERATIONS. OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4.driver. optimize_geometric() in module psi4.driver. option_exists_in_module() in module psi4.core. Options class in psi4.core. options() psi4.core.CCWavefunction method. psi4.core.CIWavefunction method. psi4.core.CUHF method. psi4.core.DFEP2Wavefunction method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. psi4.core.Wavefunction method. options_to_python() in module psi4.core. optking() in module psi4.core. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCT). orbital_values() psi4.core.PointFunctions method. psi4.core.RKSFunctions method. psi4.core.UKSFunctions method. ORBITALS_WRITE (SCF). OrbitalSpace class in psi4.core. order() psi4.core.CharacterTable method. psi4.core.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/genindex.html:104108,Optimiz,OptimizationConvergenceError,104108,psi4manual/1.6.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/genindex.html,1,['Optimiz'],['OptimizationConvergenceError']
Performance,P_SYM — Psi4 [1.0.0 6a9a71b] Docs; R_CONVERGENCE — Psi4 [1.0.0 6a9a71b] Docs; REFERENCE — Psi4 [1.0.0 6a9a71b] Docs; RESTART_EOM_CC3 — Psi4 [1.0.0 6a9a71b] Docs; RHF_TRIPLETS — Psi4 [1.0.0 6a9a71b] Docs; ROOTS_PER_IRREP — Psi4 [1.0.0 6a9a71b] Docs; SCHMIDT_ADD_RESIDUAL_TOLERANCE — Psi4 [1.0.0 6a9a71b] Docs; SEMICANONICAL — Psi4 [1.0.0 6a9a71b] Docs; SINGLES_PRINT — Psi4 [1.0.0 6a9a71b] Docs; SS_E_CONVERGENCE — Psi4 [1.0.0 6a9a71b] Docs; SS_R_CONVERGENCE — Psi4 [1.0.0 6a9a71b] Docs; SS_SKIP_DIAG — Psi4 [1.0.0 6a9a71b] Docs; SS_VECS_PER_ROOT — Psi4 [1.0.0 6a9a71b] Docs; T3_WS_INCORE — Psi4 [1.0.0 6a9a71b] Docs; VECS_CC3 — Psi4 [1.0.0 6a9a71b] Docs; VECS_PER_ROOT — Psi4 [1.0.0 6a9a71b] Docs; WFN — Psi4 [1.0.0 6a9a71b] Docs; CACHELEVEL — Psi4 [1.0.0 6a9a71b] Docs; EOM_REFERENCE — Psi4 [1.0.0 6a9a71b] Docs; T_AMPS — Psi4 [1.0.0 6a9a71b] Docs; WABEI_LOWDISK — Psi4 [1.0.0 6a9a71b] Docs; WFN — Psi4 [1.0.0 6a9a71b] Docs; ABCD — Psi4 [1.0.0 6a9a71b] Docs; AO_BASIS — Psi4 [1.0.0 6a9a71b] Docs; CACHELEVEL — Psi4 [1.0.0 6a9a71b] Docs; DIIS — Psi4 [1.0.0 6a9a71b] Docs; JOBTYPE — Psi4 [1.0.0 6a9a71b] Docs; LOCAL — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_CPHF_CUTOFF — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_CUTOFF — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_FILTER_SINGLES — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_METHOD — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_PAIRDEF — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_WEAKP — Psi4 [1.0.0 6a9a71b] Docs; MAXITER — Psi4 [1.0.0 6a9a71b] Docs; NUM_AMPS_PRINT — Psi4 [1.0.0 6a9a71b] Docs; PROP_ALL — Psi4 [1.0.0 6a9a71b] Docs; PROP_ROOT — Psi4 [1.0.0 6a9a71b] Docs; PROP_SYM — Psi4 [1.0.0 6a9a71b] Docs; R_CONVERGENCE — Psi4 [1.0.0 6a9a71b] Docs; RESTART — Psi4 [1.0.0 6a9a71b] Docs; ROOTS_PER_IRREP — Psi4 [1.0.0 6a9a71b] Docs; SEKINO — Psi4 [1.0.0 6a9a71b] Docs; WFN — Psi4 [1.0.0 6a9a71b] Docs; ZETA — Psi4 [1.0.0 6a9a71b] Docs; ABCD — Psi4 [1.0.0 6a9a71b] Docs; ANALYZE — Psi4 [1.0.0 6a9a71b] Docs; CACHELEVEL — Psi4 [1.0.0 6a9a71b] Docs; DIIS — Psi4 [1.0.0 6a9a71b] Docs; GAUGE — Psi4 [1.0.0 6a,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:43074,CACHE,CACHELEVEL,43074,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,"Parameters. orbital_basis (BasisSet) – Orbital basis to use in the JK object.; aux (Optional[BasisSet]) – Optional auxiliary basis set for density-fitted tensors. Defaults; to the DF_BASIS_SCF if set, otherwise the correspond JKFIT basis; to the passed in orbital_basis.; jk_type (Optional[str]) – Type of JK object to build (DF, Direct, PK, etc). Defaults to the; current global SCF_TYPE option.; do_wK (Optional[bool]) – ; memory (Optional[int]) – . Returns; Uninitialized JK object. Return type; JK. Example; jk = psi4.core.JK.build(bas); jk.set_memory(int(5e8)) # 4GB of memory; jk.initialize(); …; jk.C_left_add(matirx); jk.compute(); jk.C_clear(); …. static build_JK(*args, **kwargs)¶; Overloaded function. build_JK(arg0: psi4.core.BasisSet, arg1: psi4.core.BasisSet) -> psi4.core.JK; build_JK(arg0: psi4.core.BasisSet, arg1: psi4.core.BasisSet, arg2: bool, arg3: int) -> psi4.core.JK. compute(self: psi4.core.JK) → None¶. do_incfock_iter(self: psi4.core.DirectJK) → bool¶; Return whether an incremental Fock iteration was performed. finalize(self: psi4.core.JK) → None¶. get_omega(self: psi4.core.JK) → float¶; Dampening term for range separated DFT. get_omega_alpha(self: psi4.core.JK) → float¶; Weight for HF exchange term in range-separated DFT. get_omega_beta(self: psi4.core.JK) → float¶; Weight for dampened exchange term in range-separated DFT. get_wcombine(self: psi4.core.JK) → bool¶; wcombine. initialize(self: psi4.core.JK) → None¶. memory_estimate(self: psi4.core.JK) → int¶. name(self: psi4.core.JK) → str¶. print_header(self: psi4.core.JK) → None¶; docstring. set_cutoff(self: psi4.core.JK, arg0: float) → None¶. set_do_J(self: psi4.core.JK, arg0: bool) → None¶. set_do_K(self: psi4.core.JK, arg0: bool) → None¶. set_do_wK(self: psi4.core.JK, arg0: bool) → None¶. set_memory(self: psi4.core.JK, arg0: int) → None¶. set_omega(self: psi4.core.JK, omega: float) → None¶; Dampening term for range separated DFT. set_omega_alpha(self: psi4.core.JK, alpha: float) → None¶; Weight for H",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.directjk.html:3002,perform,performed,3002,psi4manual/1.5.0/api/psi4.core.directjk.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.directjk.html,1,['perform'],['performed']
Performance,"PastureRequiredError attribute. installing. INTCOS_GENERATE_EXIT (OPTKING). integral() psi4.core.MintsHelper method, [1], [2]. psi4.core.OrbitalSpace method, [1], [2]. INTEGRAL_CUTOFF (DFOCC). INTEGRAL_PACKAGE (GLOBALS). IntegralFactory class in psi4.core, [1]. integrals, [1]. integrals() psi4.core.MintsHelper method, [1], [2]. integrals_erf() psi4.core.MintsHelper method, [1], [2]. integrals_erfc() psi4.core.MintsHelper method, [1], [2]. INTERFRAG_DIST_INV (OPTKING). INTERFRAG_HESS (OPTKING). INTERFRAG_MODE (OPTKING). INTERFRAG_STEP_LIMIT (OPTKING). INTERFRAGMENT_CONNECT (OPTKING). INTERNAL_ROTATIONS (MCSCF). INTRAFRAG_HESS (OPTKING). INTRAFRAG_STEP_LIMIT (OPTKING). INTRAFRAG_STEP_LIMIT_MAX (OPTKING). INTRAFRAG_STEP_LIMIT_MIN (OPTKING). INTS_TOLERANCE (CCDENSITY). (DCFT). (DFMP2). (FISAPT). (MRCC). (SAPT). (SCF). IntVector class in psi4.core, [1]. invert() psi4.core.Matrix method, [1], [2]. IO class in psi4.core, [1]. IOManager class in psi4.core, [1]. IP_POLES (OCC). IRC. ; geometry optimization. IRC_DIRECTION (OPTKING). IRC_STEP_SIZE (OPTKING). IRC_STOP (OPTKING). irrep_labels() psi4.core.Molecule method, [1], [2]. is_c_hybrid() psi4.core.SuperFunctional method, [1], [2]. is_c_lrc() psi4.core.SuperFunctional method, [1], [2]. is_c_scs_hybrid() psi4.core.SuperFunctional method, [1], [2]. is_cartesian() psi4.core.GaussianShell method, [1], [2]. is_done() psi4.core.AOShellCombinationsIterator method, [1], [2]. is_gga() psi4.core.Functional method, [1], [2]. psi4.core.SuperFunctional method, [1], [2]. is_inverted() psi4.core.FittingMetric method, [1], [2]. is_lrc() psi4.core.Functional method, [1], [2]. is_meta() psi4.core.Functional method, [1], [2]. psi4.core.SuperFunctional method, [1], [2]. is_poisson() psi4.core.FittingMetric method, [1], [2]. is_pure() psi4.core.GaussianShell method, [1], [2]. is_variable() psi4.core.Molecule method, [1], [2]. is_x_hybrid() psi4.core.SuperFunctional method, [1], [2]. is_x_lrc() psi4.core.SuperFunctional method, [1], [2]. Isotope",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/genindex-1.html:56079,optimiz,optimization,56079,psi4manual/1.1.0/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/genindex-1.html,2,['optimiz'],['optimization']
Performance,"Phys. 133,; 014101 (2010).; (doi: 10.1063/1.3451077).; “Efficient Evaluation of Triple Excitations in Symmetry-Adapted; Perturbation Theory via MP2 Natural Orbitals,” E. G. Hohenstein; and C. D. Sherrill, J. Chem. Phys. 133, 104107 (2010).; (doi: 10.1063/1.3479400). SAPT2+(CCD), SAPT2+(3)(CCD), and SAPT2+3(CCD). “Tractability Gains in Symmetry-Adapted Perturbation Theory Including; Coupled Double Excitations: CCD+ST(CCD) Dispersion with Natural Orbital; Truncations,’’ R. M. Parrish, E. G. Hohenstein, and C. D. Sherrill,; J. Chem. Phys. 139, 174102 (2013).; (doi: 10.1063/1.4826520).; “Wavefunction Methods for Noncovalent Interactions,” E. G.; Hohenstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012).; (doi: 10.1002/wcms.84).; “Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,”; E. G. Hohenstein and C. D. Sherrill, J. Chem. Phys. 133,; 014101 (2010).; (doi: 10.1063/1.3451077). Orbital-Optimized Post-Hartree–Fock Methods¶; Orbital-optimized second-order perturbation theory (OMP2). “Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order Møller–Plesset perturbation theory,”; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; J. Chem. Phys. 135, 104103 (2011).; (doi: 10.1063/1.3631129).; “Analytic energy gradients for the orbital-optimized second-order; Møller–Plesset perturbation theory,” U. Bozkaya and; C. D. Sherrill, J. Chem. Phys. 138, 184103 (2013).; (doi: 10.1063/1.4803662).; “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Ap",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/introduction-1.html:10537,Optimiz,Optimized,10537,psi4manual/1.0.0/introduction-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/introduction-1.html,4,"['Optimiz', 'optimiz']","['Optimized', 'optimized']"
Performance,"Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). ddd-deriv; Sample HF/cc-pVDZ H2O computation all derivatives. cc51; EOM-CC3/cc-pVTZ on H2O. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. opt11; Transition-state optimizations of HOOH to both torsional transition states. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. scf-occ; force occupations in scf. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfccsdt2; DF-CCSD(T) cc-pVDZ energy for the NH molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. scf6; Tests RHF/ROHF/UHF SCF gradients. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate opti",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:38953,optimiz,optimizations,38953,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimizations']
Performance,"Prop. theory. oeprop() in module util. OFFDIAGONAL_CCSD_T (PSIMRCC). OMEGA (CCRESPONSE). (CCSORT). (RESPONSE). OMEGA_ERF (MINTS). OMP2; . setting keywords. theory. OMP2.5; . setting keywords. OMP2CORRELATIONENERGY. OMP2TOTALENERGY. OMP3; . setting keywords. theory. OMP3CORRELATIONENERGY. OMP3TOTALENERGY. OMP_N_THREAD (CPHF). OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4]. ONE-ELECTRONENERGY. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OPDM (DETCI). OPDM_AVG (DETCI). OPDM_IN_FILE (TRANSQT). OPDM_KE (DETCI). OPDM_OUT_FILE (TRANSQT). OPDM_PRINT (DETCI). OPDM_RELAX (CCDENSITY). (DFMP2). opt(); . see optimize(); . OPT_METHOD (OCC). OPT_TYPE (OPTKING). optimization; . see geometry optimization; . optimize(); . setting keywords. optimize() in module driver. OptionsState class in optproc. OptionState class in optproc. optproc module. ORB_OPT (OCC). ORB_RESP_SOLVER (OCC). Orbital-Optimized Methods; . theory. Orbital-Optimized Methods, OCEPA. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. orientation_fixed() LibmintsMolecule method. ORTH_TYPE (OCC). output; . SAPT. cbs(). database(). geometry optimization. P. P (THERMO). PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parse_arbitrary_order() in module driver. parse_cotton_irreps() in module driver. parse_multiline_array() in module input. PATH, [1], [2], [3], [4]. PB_LAMBDA (DFTSAPT). PCG_BETA_TYPE (OCC). PCG_CONVERGENCE (OCC). PCG_MAXITER (OCC). PEP1. perp_unit() in module qcdb.vecutil. PERTURB_CBS (PSIMRCC). PERTURB_CBS_COUPLING (PSIMRCC). PERTURB_H (SCF). PERTURB_MAGNITUDE (DETCI). (SCF). PERTURB_WITH (SCF). PHI_POINTS (SCF). physconst module. physical constants. PITZER (TRANSQT). point_group() LibmintsMolecule method. POINTS (FINDIF). POLE_MAXITER (ADC). populateExtern() Diffuse method. QMMM method. PR (ADC). PRECONDITIONER (DETCI). prerequi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/genindex.html:31520,Optimiz,Optimized,31520,psi4manual/4.0b4/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html,1,['Optimiz'],['Optimized']
Performance,"Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:63338,queue,queue,63338,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,1,['queue'],['queue']
Performance,"Psi4-GeomeTRIC interface""); Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string); ; # Set up the internal coordinate system; coordsys = optimizer_keywords.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }; ; # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None); ; # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() / qcel.constants.bohr2angstroms. # Setup an optimizer object; params = geometric.optimize.OptParams(**optimizer_keywords); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); ; # TODO: print constraints; # IC.printConstraints(coords, thre=-1); optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); grms, gmax = optimizer.calcGradNorm(); conv_gmax = '*' if gmax < params.Convergence_gmax else ' '; conv_grms = '*' if grms < params.Convergence_grms else ' '; core.print_out(""\n Measures of convergence in internal coordinates in au. ~""); core.print_out(""\n Criteria marked as inactive (o), active & met (*), and active & unmet ( ). ~""); core.print_out(""\n --------------------------------------------------------------------------------------------- ~""); core.print_out(""\n Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~""); core.print_out(""\n --------------------------------------------------------------------------------------------- ~""); core.print_out((f""\n Convergence Criteria {params.Convergence_energy:10.2e} ""; f""{params.Convergence_gmax:10.2e} {params.Conver",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html:55826,optimiz,optimizer,55826,psi4manual/1.4.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html,3,['optimiz'],['optimizer']
Performance,"Psi4-GeomeTRIC interface""); Cons, CVals = geometric.prepare.parse_constraints(M, constraints_string); ; # Set up the internal coordinate system; coordsys = optimizer_keywords.get('coordsys', 'tric'); CoordSysDict = {; 'cart': (geometric.internal.CartesianCoordinates, False, False),; 'prim': (geometric.internal.PrimitiveInternalCoordinates, True, False),; 'dlc': (geometric.internal.DelocalizedInternalCoordinates, True, False),; 'hdlc': (geometric.internal.DelocalizedInternalCoordinates, False, True),; 'tric': (geometric.internal.DelocalizedInternalCoordinates, False, False); }; ; # Build internal coordinates; CoordClass, connect, addcart = CoordSysDict[coordsys.lower()]; IC = CoordClass(; M,; build=True,; connect=connect,; addcart=addcart,; constraints=Cons,; cvals=CVals[0] if CVals is not None else None); ; # Get initial coordinates in bohr; coords = M.xyzs[0].flatten() / qcel.constants.bohr2angstroms. # Setup an optimizer object; params = geometric.optimize.OptParams(**optimizer_keywords); optimizer = geometric.optimize.Optimizer(coords, M, IC, engine, None, params); ; # TODO: print constraints; # IC.printConstraints(coords, thre=-1); optimizer.calcEnergyForce(); optimizer.prepareFirstStep(); grms, gmax = optimizer.calcGradNorm(); conv_gmax = '*' if gmax < params.Convergence_gmax else ' '; conv_grms = '*' if grms < params.Convergence_grms else ' '; core.print_out(""\n Measures of convergence in internal coordinates in au. ~""); core.print_out(""\n Criteria marked as inactive (o), active & met (*), and active & unmet ( ). ~""); core.print_out(""\n --------------------------------------------------------------------------------------------- ~""); core.print_out(""\n Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~""); core.print_out(""\n --------------------------------------------------------------------------------------------- ~""); core.print_out((f""\n Convergence Criteria {params.Convergence_energy:10.2e} ""; f""{params.Convergence_gmax:10.2e} {params.Conver",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver.html:57577,optimiz,optimizer,57577,psi4manual/1.7.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver.html,2,['optimiz'],['optimizer']
Performance,Psi4. Methods¶; The conventional and orbital-optimized MP2 methods currently supported in PSI4 are outlined in Table OMP2 Methods. Name; Calls Method; Energy; Gradient; Reference. conv-mp2; MP2; Y; Y; RHF/ROHF/UHF. omp2; Orbital-Optimized MP2; Y; Y; RHF/ROHF/UHF/RKS/UKS. scs-omp2; Spin-Component Scaled Orbital-Optimized MP2; Y; N; RHF/ROHF/UHF/RKS/UKS. sos-omp2; Spin-Opposite Scaled Orbital-Optimized MP2; Y; N; RHF/ROHF/UHF/RKS/UKS. scsn-omp2; A special version of SCS-OMP2 for nucleobase interactions; Y; N; RHF/ROHF/UHF/RKS/UKS. scs-omp2-vdw; A special version of SCS-OMP2 (from ethene dimers); Y; N; RHF/ROHF/UHF/RKS/UKS. sos-pi-omp2; A special version of SOS-OMP2 for -systems; Y; N; RHF/ROHF/UHF/RKS/UKS. The conventional and orbital-optimized MP3 methods currently supported in PSI4 are outlined in Table OMP3 Methods. Name; Calls Method; Energy; Gradient; Reference. mp3; MP3; Y; Y; RHF/UHF. omp3; Orbital-Optimized MP3; Y; Y; RHF/ROHF/UHF/RKS/UKS. scs-omp3; Spin-Component Scaled Orbital-Optimized MP3; Y; N; RHF/ROHF/UHF/RKS/UKS. sos-omp3; Spin-Opposite Scaled Orbital-Optimized MP3; Y; N; RHF/ROHF/UHF/RKS/UKS. scsn-omp3; A special version of SCS-OMP3 for nucleobase interactions; Y; N; RHF/ROHF/UHF/RKS/UKS. scs-omp3-vdw; A special version of SCS-OMP3 (from ethene dimers); Y; N; RHF/ROHF/UHF/RKS/UKS. sos-pi-omp3; A special version of SOS-OMP3 for -systems; Y; N; RHF/ROHF/UHF/RKS/UKS. The conventional and orbital-optimized MP2.5 methods currently supported in PSI4 are outlined in Table OMP2.5 Methods. Name; Calls Method; Energy; Gradient; Reference. mp2.5; MP2.5; Y; Y; RHF/UHF. omp2.5; Orbital-Optimized MP2.5; Y; Y; RHF/ROHF/UHF/RKS/UKS. The conventional and orbital-optimized CEPA methods currently supported in PSI4 are outlined in Table OCEPA Methods. Name; Calls Method; Energy; Gradient; Reference. ocepa; Orbital-Optimized CEPA; Y; Y; RHF/ROHF/UHF/RKS/UKS. scs-ocepa; Spin-Component Scaled Orbital-Optimized CEPA; Y; N; RHF/ROHF/UHF/RKS/UKS. sos-ocepa; Spin-Opposite Scaled,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/occ-1.html:6759,Optimiz,Optimized,6759,psi4manual/4.0b5/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/occ-1.html,2,['Optimiz'],['Optimized']
Performance,"Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""Module with functions that encode the sequence of PSI module; calls for each of the *name* values of the energy(), optimize(),; response(), and frequency() function. *name* can be assumed lowercase by here. """"""; import os; import shutil; import subprocess. import numpy as np. from psi4 import extras; from psi4.driver import p4util; from psi4.driver import qcdb; from psi4.driver import psifiles as psif; from psi4.driver.p4util.exceptions import *; from psi4.driver.molutil import *; # never import driver, wrappers, or aliases into this file. from .roa import *; from . import proc_util; from . import empirical_dispersion; from . import dft; from . import mcscf; from . import response. # ATTN NEW ADDITIONS!; # consult http://psicode.org/psi4manual/master/proc_py.html. def select_mp2(name, **kwargs):; """"""Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP2_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/dfmp2/detci/fnocc. # MP2_TYPE exists largely for py-side reasoning, so must manage it; # here rather than passing to c-side unprepared for validation. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module == 'FNOCC':; func = run_fnocc; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'DFMP2']:; func = run_dfmp2; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'DFMP2']:; func = run_dfmp2; elif mtd_type == 'CD",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/procrouting/proc.html:1996,perform,performance,1996,psi4manual/1.3.2/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/procrouting/proc.html,1,['perform'],['performance']
Performance,"Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Options passed to the GeomeTRIC optimizer; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual]. ccd; coupled cluster doubles (CCD) [manual]. ccsd; coupled cluster singles and d",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.opt-1.html:2262,Optimiz,Optimizations,2262,psi4manual/1.4.0/api/psi4.driver.opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.opt-1.html,15,['Optimiz'],['Optimizations']
Performance,"Python. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:opt(). Returns:float – Total electronic energy of optimized structure in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:psi4.OptimizationConvergenceError if |optking__geom_maxiter| exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (string) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all me",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html:1191,optimiz,optimization,1191,psi4manual/1.3.2/api/psi4.driver.opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html,2,['optimiz'],['optimization']
Performance,"Python. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:opt(). Returns:float – Total electronic energy of optimized structure in Hartrees. Returns:(float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:psi4.OptimizationConvergenceError if |optking__geom_maxiter| exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:; name (string) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. For maximum; flexibility, return_wfn is always on in 'reap' mode. dertype (dertype) – 'gradient' || 'e",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.driver.opt-1.html:1191,optimiz,optimization,1191,psi4manual/1.2.1/api/psi4.driver.opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.driver.opt-1.html,2,['optimiz'],['optimization']
Performance,"Python; fchk. fchk¶. psi4.driver.fchk(wfn, filename, *, debug=False, strict_label=True)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file; filename (str) – destination file name for FCHK file; debug (bool) – returns a dictionary to aid with debugging; strict_label (bool) – If true set a density label compliant with what Gaussian would write. A warning will be printed if this is not possible.; Otherwise set the density label according to the method name. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; PSI4 will try to find the right one for the current calculation. If strict_label=False the PSI4 method name will be used as label.; Not all theory modules in PSI4 are compatible with the FCHK writer.; A warning will be printed if a theory module is not supported.; Caution! For orbital-optimized correlated methods (e.g. DCT, OMP2) the ‘Orbital Energy’ field contains ambiguous data. Examples:. Parameters:. wfn (Wavefunction) – ; filename (str) – ; debug (bool) – ; strict_label (bool) – . >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] FCHK file for correlated densities; >>> E, wfn = gradient('ccsd', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] Write FCHK file with non-standard label.; >>> E, wfn = gradient('mp2.5', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk', strict_label=False). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fchk. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.fchk.html:1238,optimiz,optimized,1238,psi4manual/1.7.x/api/psi4.driver.fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.fchk.html,1,['optimiz'],['optimized']
Performance,"Python; fchk. fchk¶. psi4.driver.fchk(wfn, filename, *, debug=False, strict_label=True)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns; None. Parameters. wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file; filename (str) – destination file name for FCHK file; debug (bool) – returns a dictionary to aid with debugging; strict_label (bool) – If true set a density label compliant with what Gaussian would write. A warning will be printed if this is not possible.; Otherwise set the density label according to the method name. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; PSI4 will try to find the right one for the current calculation. If strict_label=False the PSI4 method name will be used as label.; Not all theory modules in PSI4 are compatible with the FCHK writer.; A warning will be printed if a theory module is not supported.; Caution! For orbital-optimized correlated methods (e.g. DCT, OMP2) the ‘Orbital Energy’ field contains ambiguous data. Examples. Parameters. wfn (psi4.core.Wavefunction) – ; filename (str) – ; debug (bool) – ; strict_label (bool) – . >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] FCHK file for correlated densities; >>> E, wfn = gradient('ccsd', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] Write FCHK file with non-standard label.; >>> E, wfn = gradient('mp2.5', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk', strict_label=False). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; fchk. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.fchk-1.html:1236,optimiz,optimized,1236,psi4manual/1.4.0/api/psi4.driver.fchk-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.fchk-1.html,2,['optimiz'],['optimized']
Performance,"Python; fchk. fchk¶. psi4.driver.fchk(wfn, filename, *, debug=False, strict_label=True)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns; None. Parameters. wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file; filename (str) – destination file name for FCHK file; debug (bool) – returns a dictionary to aid with debugging; strict_label (bool) – If true set a density label compliant with what Gaussian would write. A warning will be printed if this is not possible.; Otherwise set the density label according to the method name. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; PSI4 will try to find the right one for the current calculation. If strict_label=False the PSI4 method name will be used as label.; Not all theory modules in PSI4 are compatible with the FCHK writer.; A warning will be printed if a theory module is not supported.; Caution! For orbital-optimized correlated methods (e.g. DCT, OMP2) the ‘Orbital Energy’ field contains ambiguous data. Examples. Parameters. wfn (psi4.core.Wavefunction) – ; filename (str) – ; debug (bool) – ; strict_label (bool) – . >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] FCHK file for correlated densities; >>> E, wfn = gradient('ccsd', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] Write FCHK file with non-standard label.; >>> E, wfn = gradient('mp2.5', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk', strict_label=False). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; fchk. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.driver.fchk-1.html:1236,optimiz,optimized,1236,psi4manual/1.5.0/api/psi4.driver.fchk-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.driver.fchk-1.html,2,['optimiz'],['optimized']
Performance,"QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCFT single-point computation looks like this:; 1; 2; 3; 4; 5; 6; 7; 8molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dcft'). The energy('dcft') call to energy() executes the DCFT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCFT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; 1; 2; 3; 4; 5; 6; 7; 8molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dcft'). The optimize('dcft') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCFT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by sett",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/dcft-1.html:14267,optimiz,optimize,14267,psi4manual/1.1.0/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/dcft-1.html,6,['optimiz'],['optimize']
Performance,"QCVariable key to val on cls. shallow_copy(self, arg0); Copies the pointers to the internal data. sobasisset(self); Returns the symmetry orbitals basis. soccpi(self); Returns the number of singly occupied orbitals per irrep. soscf_update(self, arg0, arg1, arg2, arg3); Computes a second-order SCF update. stability_analysis(self); Assess wfn stability and correct if requested. to_file([filename]); Converts a Wavefunction object to a base class. twoel_Hx(self, arg0, arg1, arg2); Two-electron Hessian-vector products. validate_diis(); Sanity-checks DIIS control options. variable(key); Return copy of scalar or array QCVariable key from self psi4.core.Wavefunction. variables([include_deprecated_keys]); Return all scalar or array QCVariables from cls. write_molden([filename, do_virtual, use_natural]); Function to write wavefunction information in wfn to filename in molden format. write_nbo(name). Attributes Documentation. MOM_excited_¶; Are we to do excited-state MOM?. MOM_performed_¶; MOM performed current iteration?. attempt_number_¶; Current macroiteration (1-indexed) for stability analysis. diis_enabled_¶; docstring. diis_manager_¶; The DIIS object. diis_start_¶; docstring. frac_performed_¶; Frac performed current iteration?. initialized_diis_manager_¶; Has the DIIS object been initialized?. iteration_¶; Internal iterator for SCF cycles. After completion, this equals the number of iterations taken to converge the SCF equations. reset_occ_¶; Do reset the occupation after the guess to the inital occupation. sad_¶; Do assume a non-idempotent density matrix and no orbitals after the guess. Methods Documentation. Ca(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Orbitals. Ca_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix¶; Returns the requested Alpha orbital subset. Parameters. basis (str) – {‘SO’, AO’}; Should the subset be of symmetry orbitals or atomic orbitals?; subset (str) – {‘ALL’, ‘ACTIVE’, ‘FROZEN’, ‘OCC’, ‘VIR’, ‘",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.core.CUHF.html:12457,perform,performed,12457,psi4manual/1.6.x/api/psi4.core.CUHF.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.core.CUHF.html,4,['perform'],['performed']
Performance,"R; for A in Avals:; h2o.A = A; energy('mp2'); escf = get_variable('SCF TOTAL ENERGY'); edfmp2 = get_variable('MP2 TOTAL ENERGY'); escsmp2 = get_variable('SCS-MP2 TOTAL ENERGY'); table[R][A] = [escf, escsmp2, edfmp2]. print table; relative=table.copy(); relative.absolute_to_relative(); print relative. we first define a table (on line 10) with two row indices and three column; indices. As the potential energy scan is performed, the results are stored; (line 22) and the final table is printed to the output file (line 24). The; table is converted from absolute energies to relative energies (in kcal mol-1); on line 26, before being printed again. The relative energies are reported with; respect to the lowest value in each column. More examples of how to control the; formatting of the tables can be found in the sample input files provided; see; Appendix Test Suite and Sample Inputs for a complete listing. Python Wrappers¶; The Python foundations of the PSI4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the PSI4 suite.; As seen in the neon dimer example from the tutorial section,; the nbody() wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example,; energy('mp2', bsse_type='cp'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules.; PSI4 also provides the cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; # all equivalent. energy('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVT",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/psithoninput.html:13289,perform,performed,13289,psi4manual/1.6.x/psithoninput.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/psithoninput.html,1,['perform'],['performed']
Performance,"R; for A in Avals:; h2o.A = A; energy('mp2'); escf = get_variable('SCF TOTAL ENERGY'); edfmp2 = get_variable('MP2 TOTAL ENERGY'); escsmp2 = get_variable('SCS-MP2 TOTAL ENERGY'); table[R][A] = [escf, escsmp2, edfmp2]. print table; relative=table.copy(); relative.absolute_to_relative(); print relative. we first define a table (on line 10) with two row indices and three column; indices. As the potential energy scan is performed, the results are stored; (line 22) and the final table is printed to the output file (line 24). The; table is converted from absolute energies to relative energies (in kcal mol-1); on line 26, before being printed again. The relative energies are reported with; respect to the lowest value in each column. More examples of how to control the; formatting of the tables can be found in the sample input files provided; see; Appendix Test Suite and Sample Inputs for a complete listing. Python Wrappers¶; The Python foundations of the PSI4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the PSI4 suite.; As seen in the neon dimer example from the tutorial section,; the nbody_gufunc() wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example,; 1energy('mp2', bsse_type='cp'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules.; PSI4 also provides the cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; 1; 2; 3; 4; 5# all equivalent. cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; lar",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/psithoninput-1.html:14820,perform,performed,14820,psi4manual/1.1.0/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/psithoninput-1.html,6,['perform'],['performed']
Performance,"R; for A in Avals:; h2o.A = A; energy('mp2'); escf = get_variable('SCF TOTAL ENERGY'); edfmp2 = get_variable('MP2 TOTAL ENERGY'); escsmp2 = get_variable('SCS-MP2 TOTAL ENERGY'); table[R][A] = [escf, escsmp2, edfmp2]. print table; relative=table.copy(); relative.absolute_to_relative(); print relative. we first define a table (on line 10) with two row indices and three column; indices. As the potential energy scan is performed, the results are stored; (line 22) and the final table is printed to the output file (line 24). The; table is converted from absolute energies to relative energies (in kcal mol-1); on line 26, before being printed again. The relative energies are reported with; respect to the lowest value in each column. More examples of how to control the; formatting of the tables can be found in the sample input files provided; see; Appendix Test Suite and Sample Inputs for a complete listing. Python Wrappers¶; The Python foundations of the PSI4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the PSI4 suite.; As seen in the neon dimer example from the tutorial section,; the nbody_gufunc() wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example,; energy('mp2', bsse_type='cp'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules.; PSI4 also provides the cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; # all equivalent. cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/psithoninput-1.html:13289,perform,performed,13289,psi4manual/1.4.0/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/psithoninput-1.html,4,['perform'],['performed']
Performance,"R; for A in Avals:; h2o.A = A; energy('mp2'); escf = get_variable('SCF TOTAL ENERGY'); edfmp2 = get_variable('MP2 TOTAL ENERGY'); escsmp2 = get_variable('SCS-MP2 TOTAL ENERGY'); table[R][A] = [escf, escsmp2, edfmp2]. print table; relative=table.copy(); relative.absolute_to_relative(); print relative. we first define a table (on line 10) with two row indices and three column; indices. As the potential energy scan is performed, the results are stored; (line 22) and the final table is printed to the output file (line 24). The; table is converted from absolute energies to relative energies (in kcal mol-1); on line 26, before being printed again. The relative energies are reported with; respect to the lowest value in each column. More examples of how to control the; formatting of the tables can be found in the sample input files provided; see; Appendix Test Suite and Sample Inputs for a complete listing. Python Wrappers¶; The Python foundations of the Psi4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the Psi4 suite.; As seen in the neon dimer example from the A Psi4 Tutorial section,; the _nbody_gufunc() wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example,:; cp('mp2'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules.; Psi4 also provides the complete_basis_set() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2), and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ).; Another very useful and powerf",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/psithoninput-1.html:13857,perform,performed,13857,psi4manual/1.0.0/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/psithoninput-1.html,2,['perform'],['performed']
Performance,"RAC_START"", 0); PsiMod.set_global_option(""REFERENCE"",""UHF""); energy('scf'); PsiMod.set_global_option(""REFERENCE"",""UKS""); PsiMod.set_global_option(""GUESS"", ""READ""); PsiMod.set_global_option(""FRAC_LOAD"", False). PsiMod.set_global_option(""FRAC_START"", frac_start); PsiMod.set_global_option(""FRAC_RENORMALIZE"", True). for occ in HOMO_occs:; ; PsiMod.set_global_option(""FRAC_OCC"", [HOMO]); PsiMod.set_global_option(""FRAC_VAL"", [occ]) . E = energy('scf'); C = 1; if (E == 0.0):; E = PsiMod.get_variable('SCF ITERATION ENERGY'); C = 0. if (LUMO > 0):; ref = PsiMod.wavefunction(); eps = ref.epsilon_a(); potentials.append(eps[int(HOMO)-1]); else:; ref = PsiMod.wavefunction(); eps = ref.epsilon_b(); potentials.append(eps[-int(HOMO)-1]). occs.append(occ - 1.0); energies.append(E); convs.append(C). PsiMod.set_global_option(""FRAC_START"", 2); PsiMod.set_global_option(""FRAC_LOAD"", True); PsiMod.set_global_option(""GUESS"", ""READ""); PsiMod.set_global_option(""FRAC_DIIS"", frac_diis); PsiMod.set_global_option(""DF_INTS_IO"", ""LOAD""). PsiMod.set_global_option(""DF_INTS_IO"", old_df_ints_io). # => Print the results out <= #; E = {}; PsiMod.print_out('\n ==> Fractional Occupation Traverse Results <==\n\n'); PsiMod.print_out('\t%-11s %-24s %-24s %11s\n' %('N', 'Energy', 'HOMO Energy', 'Converged')); for k in range(len(occs)):; PsiMod.print_out('\t%11.3E %24.16E %24.16E %11d\n' % (occs[k], energies[k], potentials[k], convs[k])); E[occs[k]] = energies[k]. PsiMod.print_out('\n\t""You trying to be a hero Watkins?""\n'); PsiMod.print_out('\t""Just trying to kill some bugs sir!""\n'); PsiMod.print_out('\t\t\t-Starship Troopers\n'). # Drop the files out; fh = open(traverse_filename, 'w'); fh.write('\t%-11s %-24s %-24s %11s\n' %('N', 'Energy', 'HOMO Energy', 'Converged')); for k in range(len(occs)):; fh.write('\t%11.3E %24.16E %24.16E %11d\n' % (occs[k], energies[k], potentials[k], convs[k])); fh.close(). return E . # Pull all the electrons out, one at a time ; [docs]def frac_nuke(mol, **kwargs):; kwargs = kwarg",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/frac.html:5466,LOAD,LOAD,5466,psi4manual/4.0b4/_modules/frac.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html,1,['LOAD'],['LOAD']
Performance,"RAG_STEP_LIMIT¶. Initial maximum step size in bohr or radian along an internal coordinate. Type: double; Default: 0.4. INTRAFRAG_STEP_LIMIT_MAX¶. Upper bound for dynamic trust radius [au]. Type: double; Default: 1.0. INTRAFRAG_STEP_LIMIT_MIN¶. Lower bound for dynamic trust radius [au]. Type: double; Default: 0.001. IRC_DIRECTION¶. IRC mapping direction. Type: string; Possible Values: FORWARD, BACKWARD; Default: FORWARD. IRC_STEP_SIZE¶. IRC step size in bohr(amu). Type: double; Default: 0.2. IRC_STOP¶. Decide when to stop IRC calculations. Type: string; Possible Values: ASK, STOP, GO; Default: STOP. OPT_TYPE¶. Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. RFO_FOLLOW_ROOT¶. Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_ROOT¶. Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. STEP_TYPE¶. Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. Convergence Control¶. FLEXIBLE_G_CONVERGENCE¶. Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. G_CONVERGENCE¶. Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. MAX_DISP_G_CONVERGENCE¶. Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE¶. Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__optking-1.html:1858,optimiz,optimization,1858,psi4manual/4.0b4/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__optking-1.html,8,"['Optimiz', 'optimiz']","['Optimization', 'optimization']"
Performance,"RAG_STEP_LIMIT¶. Initial maximum step size in bohr or radian along an internal coordinate. Type: double; Default: 0.4. INTRAFRAG_STEP_LIMIT_MAX¶. Upper bound for dynamic trust radius [au]. Type: double; Default: 1.0. INTRAFRAG_STEP_LIMIT_MIN¶. Lower bound for dynamic trust radius [au]. Type: double; Default: 0.001. IRC_DIRECTION¶. IRC mapping direction. Type: string; Possible Values: FORWARD, BACKWARD; Default: FORWARD. IRC_STEP_SIZE¶. IRC step size in bohr(amu). Type: double; Default: 0.2. IRC_STOP¶. Decide when to stop IRC calculations. Type: string; Possible Values: ASK, STOP, GO; Default: STOP. OPT_TYPE¶. Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. RFO_FOLLOW_ROOT¶. Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_ROOT¶. Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. STEP_TYPE¶. Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD; Default: RFO. Convergence Control¶. FLEXIBLE_G_CONVERGENCE¶. Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. G_CONVERGENCE¶. Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. MAX_DISP_G_CONVERGENCE¶. Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE¶. Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE¶. Convergence c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__optking-1.html:1547,optimiz,optimization,1547,psi4manual/4.0b2/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__optking-1.html,8,"['Optimiz', 'optimiz']","['Optimization', 'optimization']"
Performance,"RAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to the third lowest virtual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR); CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calcualtion; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR); CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meani",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:68682,perform,performed,68682,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['perform'],['performed']
Performance,"RAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to the third lowest virtual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR); CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calculation; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR); CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meani",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:68884,perform,performed,68884,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,6,['perform'],['performed']
Performance,"RANCE (FNOCC). (SAPT). OCEPA; . setting keywords. theory. OCEPA(0)CORRELATIONENERGY. OCEPA(0)TOTALENERGY. OEI_A_FILE (TRANSQT). OEI_B_FILE (TRANSQT). OEI_FILE (TRANSQT). OEProp. theory. oeprop() in module p4util.util. OFFDIAGONAL_CCSD_T (PSIMRCC). OMEGA (CCRESPONSE). (CCSORT). OMEGA_ERF (MINTS). OMP2; . setting keywords. theory. OMP2.5; . setting keywords. OMP2CORRELATIONENERGY. OMP2TOTALENERGY. OMP3; . setting keywords. theory. OMP3CORRELATIONENERGY. OMP3TOTALENERGY. OMP_N_THREAD (CPHF). OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4]. ONE-ELECTRONENERGY. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OPDM (CPHF). (DETCI). OPDM_AVG (DETCI). OPDM_IN_FILE (TRANSQT). OPDM_KE (DETCI). OPDM_OUT_FILE (TRANSQT). OPDM_PRINT (DETCI). OPDM_RELAX (CCDENSITY). (CPHF). (DFMP2). opt(); . see optimize(); . OPT_METHOD (OCC). OPT_TYPE (OPTKING). optimization; . see geometry optimization; . optimize(); . setting keywords. optimize() in module driver. OptionsState class in p4util.optproc. OptionState class in p4util.optproc. ORB_OPT (OCC). ORB_RESP_SOLVER (OCC). Orbital-Optimized Methods; . theory. Orbital-Optimized Methods, OCEPA. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. orientation_fixed() LibmintsMolecule method. ORTH_TYPE (OCC). output; . SAPT. cbs(). database(). geometry optimization. P. P (THERMO). p4const module. p4const.__init__ module. p4const.physconst module. p4const.psifiles module. p4regex module. p4util module. p4util.__init__ module. p4util.basislist module. p4util.basislistdunning module. p4util.basislistother module. p4util.optproc module. p4util.procutil module. p4util.text module. p4util.util module. PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parse_arbitrary_order() in module driver. parse_cotton_irreps() in module driver. parse_error() in module pcmgetkw. parse_multiline_arra",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/genindex.html:33547,optimiz,optimize,33547,psi4manual/4.0b5/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/genindex.html,1,['optimiz'],['optimize']
Performance,"RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. Specifying the CI Space¶. ACTIVE¶. An array giving the number of active orbitals (occupied plus unoccupied) per irrep (shorthand to make MCSCF easier to specify than using RAS keywords). Type: array; Default: No Default. A_RAS3_MAX¶. maximum number of alpha electrons in RAS III. Type: integer; Default: -1. B_RAS3_MAX¶. maximum number of beta electrons in RAS III. Type: integer; Default: -1. MS0¶. Do use the component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. RAS34_MAX¶. maximum number of electrons in RAS III + IV. Type: integer; Default: -1. RAS3_MAX¶. maximum number of electrons in RAS III. Type: integer; Default: -1. RAS4_MAX¶. maximum number of electrons in RAS IV. Type: integer; Default: -1. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. S¶. The value of the spin quantum number is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of (if S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. Diagonalization Methods¶. DIAG_METHOD¶. This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__detci-1.html:3645,optimiz,optimized,3645,psi4manual/4.0b2/autodir_options_c/module__detci-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__detci-1.html,8,['optimiz'],['optimized']
Performance,"RE, CD, GTFOCK; Default: PK. SCHMIDT_ADD_RESIDUAL_TOLERANCE (CCEOM); CCEOM — Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. SCS_CCSD (CCENERGY); CCENERGY — Do spin-component-scaled CCSD. Type: boolean; Default: false. SCS_CCSD (FNOCC); FNOCC — Do SCS-CCSD?. Type: boolean; Default: false. SCS_CEPA (FNOCC); FNOCC — Do SCS-CEPA? Note that the scaling factors will be identical to those for SCS-CCSD. Type: boolean; Default: false. SCS_MP2 (CCENERGY); CCENERGY — Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SCS_MP2 (FNOCC); FNOCC — Do SCS-MP2?. Type: boolean; Default: false. SCS_TYPE (DFOCC); DFOCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCS_TYPE (OCC); OCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCSN_MP2 (CCENERGY); CCENERGY — Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SEKINO (CCLAMBDA); CCLAMBDA — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEKINO (CCRESPONSE); CCRESPONSE — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEM_MAXITER (ADC); ADC — Maximum iteration number in simultaneous expansion method. Type: integer; Default: 30. SEMICANONICAL (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCEOM); CCEOM — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCTRANSORT); CCTRANSORT — Force conversion of ROHF MOs to semicanonical MOs to run UHF-based energies. Type: boolean; Default: false. SEMICANONICAL (CCTRIPLES); CCTRIPLES — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SF_RESTRICT (DETCI); DETCI (Expert) — Do eliminate determinants not valid for spin-complete spin-flip CI’s? [see J. S. Sears et al,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:207705,optimiz,optimized,207705,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimized']
Performance,"READ (SCF). OO_SCALE (DFOCC). OPDM (DCT). (DETCI). opdm() psi4.core.CIWavefunction method. OPDM_ONLY (CCDENSITY). OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method. open_check() psi4.core.IO method. operate() psi4.core.SymmetryOperation method. opt(). . see optimize(). opt() in module psi4.driver. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_RESTART (OPTKING). OPT_TYPE (OPTKING). OPTIMIZATION ITERATIONS. OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4.driver. optimize_geometric() in module psi4.driver. option_exists_in_module() in module psi4.core. Options class in psi4.core. options() psi4.core.Wavefunction method. options_to_python() in module psi4.core. OptionsState class in psi4.driver.p4util. OptionsStateCM() in module psi4.driver.p4util. OptionState class in psi4.driver.p4util. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCT). orbital_values() psi4.core.PointFunctions method. ORBITALS_WRITE (SCF). OrbitalSpace class in psi4.core. order() psi4.core.CharacterTable method. psi4.core.PointGroup method. ordered_params psi4.driver.EmpiricalDispersion attribute. psi4.driver.procrouting.empirical_dispersion.EmpiricalDispersion attribute. OREMP. ; setting keywords. OREMP2 CORRELATION ENERGY. OREMP2 DOUBLES ENERGY. OREMP2 OPPOSITE-SPIN CORRELATION ENERGY. OREMP2 REFERENCE CORRECTION ENERGY. OREMP2 SAME-SPIN CORRELATION ENERGY. OREMP2 SINGLES ENERGY. OREMP2 TOTAL ENERGY. orientation() psi4.core.MolecularGrid method. orientation_fixed() psi4.core.Molecule method. origin psi4.core.OneBodyAOInt attribute. original_coef() psi4.core.GaussianShell method. ORTH_TYPE (DFOCC). (OCC). OS_SCALE (OCC). outfile_name() in module psi4.core. output. ; cbs(). database(). geometry optimization. SAPT. vibrational analysis. over",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/genindex.html:84202,Optimiz,Optimized,84202,psi4manual/1.7.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/genindex.html,2,['Optimiz'],['Optimized']
Performance,"REFERENCE"",""UHF""); energy('scf'); PsiMod.set_global_option(""REFERENCE"",""UKS""); PsiMod.set_global_option(""GUESS"", ""READ""); PsiMod.set_global_option(""DF_INTS_IO"", ""SAVE""). PsiMod.set_global_option(""FRAC_START"", frac_start); PsiMod.set_global_option(""FRAC_RENORMALIZE"", True); PsiMod.set_global_option(""FRAC_LOAD"", False). for occ in LUMO_occs:; ; PsiMod.set_global_option(""FRAC_OCC"", [LUMO]); PsiMod.set_global_option(""FRAC_VAL"", [occ]) . E = energy('scf'); C = 1; if (E == 0.0):; E = PsiMod.get_variable('SCF ITERATION ENERGY'); C = 0. if (LUMO > 0):; ref = PsiMod.wavefunction(); eps = ref.epsilon_a(); potentials.append(eps[int(LUMO)-1]); else:; ref = PsiMod.wavefunction(); eps = ref.epsilon_b(); potentials.append(eps[-int(LUMO)-1]). occs.append(occ); energies.append(E); convs.append(C). PsiMod.set_global_option(""FRAC_START"", 2); PsiMod.set_global_option(""FRAC_LOAD"", True); PsiMod.set_global_option(""GUESS"", ""READ""); PsiMod.set_global_option(""FRAC_DIIS"", frac_diis); PsiMod.set_global_option(""DF_INTS_IO"", ""LOAD""). # => Run the neutral next <= #. mol.set_molecular_charge(charge0); mol.set_multiplicity(mult0). # Burn the neutral in with hf, if requested <= #. if (not continuous_guess):; PsiMod.set_global_option(""GUESS"", old_guess); if (hf_guess):; PsiMod.set_global_option(""FRAC_START"", 0); PsiMod.set_global_option(""REFERENCE"",""UHF""); energy('scf'); PsiMod.set_global_option(""REFERENCE"",""UKS""); PsiMod.set_global_option(""GUESS"", ""READ""); PsiMod.set_global_option(""FRAC_LOAD"", False). PsiMod.set_global_option(""FRAC_START"", frac_start); PsiMod.set_global_option(""FRAC_RENORMALIZE"", True). for occ in HOMO_occs:; ; PsiMod.set_global_option(""FRAC_OCC"", [HOMO]); PsiMod.set_global_option(""FRAC_VAL"", [occ]) . E = energy('scf'); C = 1; if (E == 0.0):; E = PsiMod.get_variable('SCF ITERATION ENERGY'); C = 0. if (LUMO > 0):; ref = PsiMod.wavefunction(); eps = ref.epsilon_a(); potentials.append(eps[int(HOMO)-1]); else:; ref = PsiMod.wavefunction(); eps = ref.epsilon_b(); potentials.append(eps[-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/frac.html:4182,LOAD,LOAD,4182,psi4manual/4.0b4/_modules/frac.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/frac.html,1,['LOAD'],['LOAD']
Performance,"REFERENCE'),; # molecule.molecular_charge(), molecule.multiplicity(), molecule.schoenflies_symbol()); if allowoptexceeded:; try:; ERGT[rgt] = func(molecule=molecule, **kwargs); except ConvergenceError:; core.print_out(""Optimization exceeded cycles for %s"" % (rgt)); ERGT[rgt] = 0.0; else:; ERGT[rgt] = func(molecule=molecule, **kwargs); core.print_variables(); exec(actives); for envv in db_tabulate:; VRGT[rgt][envv.upper()] = core.variable(envv); core.set_global_option(""REFERENCE"", user_reference); core.clean(); #core.opt_clean(); core.clean_variables(). elif db_mode == 'sow':; with open('%s.in' % (rgt), 'w') as freagent:; freagent.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); freagent.write(banners); freagent.write(p4util.format_molecule_for_input(GEOS[rgt], 'dbmol')). freagent.write(commands); freagent.write('''\npickle_kw = (""""""'''); pickle.dump(kwargs, freagent); freagent.write('''"""""")\n'''); freagent.write(""""""\nkwargs = pickle.loads(pickle_kw)\n""""""); freagent.write(""""""electronic_energy = %s(**kwargs)\n\n"""""" % (func.__name__)); freagent.write(""""""core.print_variables()\n""""""); freagent.write(""""""core.print_out('\\nDATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""); freagent.write(""""""core.set_variable('NATOM', dbmol.natom())\n""""""); for envv in db_tabulate:; freagent.write(""""""core.print_out('DATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields variable value %20.12f for variable %s\\n' % (core.variable(""""""); freagent.write(""""""'%s'), '%s'))\n"""""" % (envv.upper(), envv.upper())). elif db_mode == 'reap':; ERGT[rgt] = 0.0; for envv in db_tabulate:; VRGT[rgt][envv.upper()] = 0.0; exec(banners); exec(actives); try:; freagent = open('%s.out' % (rgt), 'r'); except IOError:; core.print_out('Warning: Output file \'%s.out\' not found.\n' % (rgt)); core.print_out(' Database summary will ha",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html:22043,load,loads,22043,psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html,1,['load'],['loads']
Performance,"REMP2; are thus straightforward to implement in a (O)LCCD program by appropriate scaling of residual vector contributions and density matrices. OMP2 [Bozkaya:2011:omp2] and [Bozkaya:2013:omp2grad]; OMP3 [Bozkaya:2011:omp3] , [Bozkaya:2013:omp3], and [Bozkaya:2013:omp3grad]; OMP2.5 [Bozkaya:2011:omp3]; OLCCD [Bozkaya:2013:ocepa]; LCCD [Bozkaya:2013:ocepa]; OREMP2 [Behnle:2021:OREMP], and [Behnle:2022:OREMP]. Convergence Problems¶; For problematic open-shell systems, we recommend to use the ROHF or DFT orbitals as an initial guess for orbital-optimized methods. Both ROHF and; DFT orbitals may provide better initial guesses than UHF orbitals, hence convergence may be significantly speeded up with ROHF or DFT orbitals.; In order to use ROHF orbitals, simply set reference rohf. For DFT orbitals, set reference uks and set dft_functional b3lyp. Of; course users can use any DFT functional available in PSI4. Methods¶; The various orbital-optimized methods supported by the OCC/DFOCC; modules in PSI4 are summarized in Table OCC OO; Methods and detailed in Table OCC; OO Capabilities. Note that while two; separate libraries OCC (conventional integrals CONV) and DFOCC; (density-fitted DF and Cholesky-decomposed CD) together provide; the methods described on this page, they are controlled through one; QC_MODULE value OCC. Without set qc_module occ,; these methods may default to implementations in other modules based on efficiency considerations. Orbital-optimized theoretical methods accessible through OCC/DFOCC¶. name; calls method; OO. omp2; orbital-optimized second-order MP perturbation theory; E/G. omp2.5; orbital-optimized average of MP2 and MP3; E/G. omp3; orbital-optimized third-order MP perturbation theory; E/G. oremp2; orbital-optimized second-order REMP hybrid PT; E/G. olccd; orbital-optimized linear coupled cluster doubles; E/G. Detailed orbital-optimized capabilities of the OCC module. “✓” runs analytically. Single underline “✓̲” is default module when QC_MODULE unspeci",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/occ.html:9746,optimiz,optimized,9746,psi4manual/master/occ.html,https://psicode.org,https://psicode.org/psi4manual/master/occ.html,4,['optimiz'],['optimized']
Performance,"RENCE CORRECTION ENERGY. OMP2.5 SAME-SPIN CORRELATION ENERGY. OMP2.5 TOTAL ENERGY. OMP3. ; setting keywords. theory. OMP3 CORRELATION ENERGY. OMP3 DOUBLES ENERGY. OMP3 OPPOSITE-SPIN CORRELATION ENERGY. OMP3 REFERENCE CORRECTION ENERGY. OMP3 SAME-SPIN CORRELATION ENERGY. OMP3 TOTAL ENERGY. OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8]. ONE-ELECTRON ENERGY. one_electron_integrals() (psi4.core.MintsHelper method). OneBodyAOInt (class in psi4.core). OneBodySOInt (class in psi4.core). onel_Hx() (psi4.core.HF method). ONEPDM (DFMP2). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DCT). (DETCI). opdm() (psi4.core.CIWavefunction method). OPDM_ONLY (CCDENSITY). OPDM_RELAX (CCDENSITY). (DFMP2). open() (psi4.core.IO method). open_check() (psi4.core.IO method). operate() (psi4.core.SymmetryOperation method). opt(). . see optimize(). opt() (in module psi4.driver). OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_RESTART (OPTKING). OPT_TYPE (OPTKING). OPTIMIZATION ITERATIONS. OptimizationConvergenceError. optimize(). ; setting keywords. optimize() (in module psi4.driver). optimize_geometric() (in module psi4.driver). option_exists_in_module() (in module psi4.core). Options (class in psi4.core). options() (psi4.core.Wavefunction method). options_to_python() (in module psi4.core). OptionsState (class in psi4.driver.p4util). OptionsStateCM() (in module psi4.driver.p4util). OptionState (class in psi4.driver.p4util). ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCT). orbital_values() (psi4.core.PointFunctions method). ORBITALS_WRITE (SCF). OrbitalSpace (class in psi4.core). order() (psi4.core.CharacterTable method). (psi4.core.PointGroup method). ordered_params (psi4.driver.EmpiricalDispersion attribute). (psi4.driver.procrouting.empirical_dispersio",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/genindex.html:87510,OPTIMIZ,OPTIMIZATION,87510,psi4manual/master/genindex.html,https://psicode.org,https://psicode.org/psi4manual/master/genindex.html,2,['OPTIMIZ'],['OPTIMIZATION']
Performance,"RENCE'),; # molecule.molecular_charge(), molecule.multiplicity(), molecule.schoenflies_symbol()); if allowoptexceeded:; try:; ERGT[rgt] = func(molecule=molecule, **kwargs); except ConvergenceError:; core.print_out(""Optimization exceeded cycles for %s"" % (rgt)); ERGT[rgt] = 0.0; else:; ERGT[rgt] = func(molecule=molecule, **kwargs); core.print_variables(); exec(actives); for envv in db_tabulate:; VRGT[rgt][envv.upper()] = core.get_variable(envv); core.set_global_option(""REFERENCE"", user_reference); core.clean(); #core.opt_clean(); core.clean_variables(). elif db_mode == 'sow':; with open('%s.in' % (rgt), 'w') as freagent:; freagent.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); freagent.write(banners); freagent.write(p4util.format_molecule_for_input(GEOS[rgt], 'dbmol')). freagent.write(commands); freagent.write('''\npickle_kw = (""""""'''); pickle.dump(kwargs, freagent); freagent.write('''"""""")\n'''); freagent.write(""""""\nkwargs = pickle.loads(pickle_kw)\n""""""); freagent.write(""""""electronic_energy = %s(**kwargs)\n\n"""""" % (func.__name__)); freagent.write(""""""core.print_variables()\n""""""); freagent.write(""""""core.print_out('\\nDATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""); freagent.write(""""""core.set_variable('NATOM', dbmol.natom())\n""""""); for envv in db_tabulate:; freagent.write(""""""core.print_out('DATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields variable value %20.12f for variable %s\\n' % (core.get_variable(""""""); freagent.write(""""""'%s'), '%s'))\n"""""" % (envv.upper(), envv.upper())). elif db_mode == 'reap':; ERGT[rgt] = 0.0; for envv in db_tabulate:; VRGT[rgt][envv.upper()] = 0.0; exec(banners); exec(actives); try:; freagent = open('%s.out' % (rgt), 'r'); except IOError:; core.print_out('Warning: Output file \'%s.out\' not found.\n' % (rgt)); core.print_out(' Database summary wil",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/wrapper_database.html:22330,load,loads,22330,psi4manual/1.2.1/_modules/psi4/driver/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/wrapper_database.html,1,['load'],['loads']
Performance,"RESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CPHF); CPHF — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (STABILITY); STABILITY —. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html:9914,cache,cache,9914,psi4manual/4.0b5/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html,4,['cache'],['cache']
Performance,"RESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (MP2); MP2 — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (OMP2); OMP2 — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (OMP3); OMP3 — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (STABILITY); STABILITY —. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:9468,cache,cache,9468,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,4,['cache'],['cache']
Performance,"RGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; psi4.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; psi4.set_local_option('SCF', 'E_CONVERGENCE', 8); if not psi4.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; psi4.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; psi4.set_local_option('SCF', 'D_CONVERGENCE', 8). # Set post-scf convergence criteria (global will cover all correlated modules); if not psi4.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; psi4.set_global_option('E_CONVERGENCE', 6). procedures['energy'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Energy method %s not available.' % (lowername)). optstash.restore(); return psi4.get_variable('CURRENT ENERGY'). [docs]def gradient(name, **kwargs):; r""""""Function complementary to optimize(). Carries out one gradient pass,; deciding analytic or finite difference. """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs); dertype = 1. optstash = p4util.OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Order of precedence:; # 1. Default for wavefunction; # 2. Value obtained from kwargs, if user changed it; # 3. If user provides a custom 'func' use that. # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # 1. set the default to that of the provided name; if lowername in procedures['gradient']:; dertype = 1; elif lowername in procedures['energy']:; dertype = 0; func = energy. # 2. Check if the user passes dertype into this function; if 'dertype' in kwargs:; opt_dertype = kwargs['dertype']. if der0th.match(str(opt_dertype)):; dertype = 0; func = energy; elif der1st.match(str(opt_dertype)):; dertype =",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/driver.html:31287,optimiz,optimize,31287,psi4manual/4.0b5/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/driver.html,1,['optimiz'],['optimize']
Performance,"RGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. If this keyword is not set by the user, DFOCC will estimate and use a value required to achieve the desired E_CONVERGENCE The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, DFOCC will estimate and use a value required to achieve the desired E_CONVERGENCE The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 100. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. Advanced DFOCC Keywords¶. OPT_METHOD¶. The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. HESS_TYPE¶. Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. MO_DIIS_NUM_VECS¶. Number of vectors used in orbital DIIS. Type: integer; Default: 6. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. DO_DIIS¶. Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT¶. Do apply level shifting?. Type: boolean; Default: true. Conventional (Non-OO) Coupled-Cluster and Møller–Plesset Perturbation Theories¶; The various non-orbital-optimized methods supported by the OCC/DFOCC; modules in PSI4 are summarized in Table OCC non-OO; Methods and detailed in Table OCC; non-OO Capabilities. Note that whi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/occ.html:17100,optimiz,optimize,17100,psi4manual/master/occ.html,https://psicode.org,https://psicode.org/psi4manual/master/occ.html,4,['optimiz'],['optimize']
Performance,"RGY¶; Computes coupled cluster energies. Called as part of any coupled cluster computation. General¶. ABCD¶. Type of ABCD algorithm will be used. Type: string; Possible Values: NEW, OLD; Default: NEW. ANALYZE¶. Do analyze T2 amplitudes. Type: boolean; Default: false. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Type: conv double; Default: 1e-5. CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CC_NUM_THREADS¶. Number of threads. Type: integer; Default: 1. CC_OS_SCALE¶. Coupled-cluster opposite-spin scaling value. Type: double; Default: 1.27. CC_SS_SCALE¶. Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. DIIS¶. Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. LOCAL¶. Do simulate the effects of local correlation techniques?. Type: boolean; Default: false. LOCAL_CPHF_CUTOFF¶. Cutoff value for local-coupled-perturbed-Hartree-Fock. Type: double; Default: 0.10. LOCAL_CUTOFF¶. Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__ccenergy-1.html:1182,cache,cache,1182,psi4manual/4.0b3/autodir_options_c/module__ccenergy-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__ccenergy-1.html,2,['cache'],['cache']
Performance,"RID_DUMP (CCDENSITY)¶CCDENSITY — Write one-particle density matrix on a grid to file opdm.dx. Type: boolean; Default: false. ONEPDM_GRID_STEPSIZE (CCDENSITY)¶CCDENSITY — Step size (Angstrom) for one-particle density matrix values on a grid. Type: double; Default: 0.1. ONEPOT_GRID_READ (SCF)¶SCF — Read an external potential from the .dx file?. Type: boolean; Default: false. OO_SCALE (DFOCC)¶DFOCC — OO scaling factor used in MSD. Type: double; Default: 0.01. OPDM (DCT)¶DCT — Compute a (relaxed) one-particle density matrix? Can be set manually. Set internally for property and gradient computations. Type: boolean; Default: false. OPDM (DETCI)¶DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY)¶CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2)¶DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:181906,optimiz,optimization,181906,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,4,['optimiz'],['optimization']
Performance,"RIGHT EIGENVECTOR ALPHA - h TRANSITION. TD-fctl ROOT 0 -> ROOT n RIGHT EIGENVECTOR BETA. TD-fctl ROOT 0 -> ROOT n RIGHT EIGENVECTOR BETA - h TRANSITION. TD-fctl ROOT 0 -> ROOT n ROTATORY STRENGTH (LEN). (LEN). (VEL), [1]. TD-fctl ROOT n (h) TOTAL ENERGY. (IN h). TD-fctl ROOT n TOTAL ENERGY. TD-fctl ROOT n TOTAL ENERGY - h TRANSITION. TDA. TDDFT. TDM (DETCI). TDSCF. theory. tdscf() in module psi4.driver. TDSCF_COEFF_CUTOFF (SCF). TDSCF_GUESS (SCF). TDSCF_MAXITER (SCF). TDSCF_PRINT (SCF). TDSCF_R_CONVERGENCE (SCF). TDSCF_STATES (SCF). TDSCF_TDA (SCF). TDSCF_TDM_PRINT (SCF). TDSCF_TRIPLETS (SCF). TDSCFConvergenceError. temp_circular_import_blocker() in module psi4.driver. TEST_B (OPTKING). TEST_DERIVATIVE_B (OPTKING). test_functional() psi4.core.SuperFunctional method. TestComparisonError. The total electronic gradient [E_h/a0] of the MP2 level of theory, ({nat}, 3). theory. ; ADC. cbs(), [1], [2]. CC. CI. DCT. DF-MP2. DFT. DLPNO-MP2. FISAPT. MCSCF. OEProp. OLCCD. OMP2. OMP3. Orbital-Optimized Methods. SAPT. SCF. TDSCF. THERMAL ENERGY. THERMAL ENERGY CORRECTION. thermo() in module psi4.driver.qcdb.vib. THETA_POINTS (SCF). THICKNESS (SCF). threading, [1]. THREE_PARTICLE (DCT). ThreeCenterOverlapInt class in psi4.core. TIKHONOW_MAX (PSIMRCC). TIKHONOW_OMEGA (DCT). (PSIMRCC). TIKHONOW_TRIPLES (PSIMRCC). TILE_SZ (SCF). timer_off() in module psi4.core. timer_on() in module psi4.core. to_array() psi4.core.Matrix method. psi4.core.Vector method. to_arrays() psi4.core.Molecule method. to_dict() psi4.core.Molecule method. to_file() psi4.core.CCWavefunction method. psi4.core.CIWavefunction method. psi4.core.CUHF method. psi4.core.DFEP2Wavefunction method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. psi4.core.Wavefunction method. to_schema() psi4.core.Molecule method. to_serial() psi4.core.Matrix method. psi4.core.Vector method. to_string() psi4.core.Molecule method. to_tuple() psi4.core.Dimension method. tocclean() psi4.core.IO method. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/genindex.html:149453,Optimiz,Optimized,149453,psi4manual/1.6.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/genindex.html,1,['Optimiz'],['Optimized']
Performance,"RITE (FINDIF)¶FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF)¶SCF — The type of guess orbitals. See Initial Guess for what the options mean and what the defaults are. Type: string; Possible Values: AUTO, CORE, GWH, SAD, SADNO, SAP, SAPGAU, HUCKEL, MODHUCKEL, READ; Default: AUTO. GUESS_MIX (SCF)¶SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF)¶SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI)¶DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI)¶DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI)¶DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI)¶DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:148073,optimiz,optimized,148073,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,2,['optimiz'],['optimized']
Performance,"RITE_OPT_HISTORY'):; with open(f""{core.get_writer_file_prefix(molecule.name())}.opt.json"", 'w+') as f:; json.dump(opt_data, f, indent=2). if return_wfn and return_history:; return (thisenergy, wfn, history); elif return_wfn and not return_history:; return (thisenergy, wfn); elif return_history and not return_wfn:; return (thisenergy, history); else:; return thisenergy. elif opt_status == 'FAILED':. print('Optimizer: Optimization failed!'); molecule.set_geometry(core.Matrix.from_array(opt_object.molsys.geom)); molecule.update_geometry(); core.clean(); optstash.restore(). opt_data = opt_object.to_dict(); if core.get_option('OPTKING', 'WRITE_OPT_HISTORY'):; with open(f""{core.get_writer_file_prefix(molecule.name())}.opt.json"", 'w+') as f:; json.dump(opt_data, f, indent=2). raise OptimizationConvergenceError(""""""geometry optimization"""""", n - 1, wfn). core.print_out('\n Structure for next step:\n'); molecule.print_in_input_format(). n += 1. optstash.restore(); raise OptimizationConvergenceError(""""""geometry optimization"""""", n - 1, wfn). [docs]; def hessian(name, **kwargs):; r""""""Function complementary to :py:func:`~psi4.driver.frequency`. Computes force; constants, deciding analytic, finite difference of gradients, or; finite difference of energies. :returns: :py:class:`~psi4.core.Matrix` |w--w| Total non-mass-weighted electronic Hessian in Hartrees/Bohr/Bohr. :returns: (:py:class:`~psi4.core.Matrix`, :py:class:`~psi4.core.Wavefunction`) |w--w| Hessian and wavefunction when **return_wfn** specified. :examples:. >>> # [1] Frequency calculation without thermochemical analysis; >>> hessian('mp3'). >>> # [2] Frequency calc w/o thermo analysis getting the Hessian; >>> # in file, core.Matrix, and np.array forms; >>> set hessian_write on; >>> H, wfn = hessian('ccsd', return_wfn=True); >>> wfn.hessian().print_out(); >>> np.array(H). """"""; ## First half of this fn -- entry means user wants a 2nd derivative by any means. kwargs = p4util.kwargs_lower(kwargs); basisstash = p4util.OptionsS",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver.html:77489,Optimiz,OptimizationConvergenceError,77489,psi4manual/1.8.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver.html,6,"['Optimiz', 'optimiz']","['OptimizationConvergenceError', 'optimization']"
Performance,"RITE_OPT_HISTORY'):; with open(f""{core.get_writer_file_prefix(molecule.name())}.opt.json"", 'w+') as f:; json.dump(opt_data, f, indent=2). if return_wfn and return_history:; return (thisenergy, wfn, history); elif return_wfn and not return_history:; return (thisenergy, wfn); elif return_history and not return_wfn:; return (thisenergy, history); else:; return thisenergy. elif opt_status == 'FAILED':. print('Optimizer: Optimization failed!'); molecule.set_geometry(core.Matrix.from_array(opt_object.molsys.geom)); molecule.update_geometry(); core.clean(); optstash.restore(). opt_data = opt_object.to_dict(); if core.get_option('OPTKING', 'WRITE_OPT_HISTORY'):; with open(f""{core.get_writer_file_prefix(molecule.name())}.opt.json"", 'w+') as f:; json.dump(opt_data, f, indent=2). raise OptimizationConvergenceError(""""""geometry optimization"""""", n - 1, wfn). core.print_out('\n Structure for next step:\n'); molecule.print_in_input_format(). n += 1. optstash.restore(); raise OptimizationConvergenceError(""""""geometry optimization"""""", n - 1, wfn). [docs]def hessian(name, **kwargs):; r""""""Function complementary to :py:func:`~psi4.driver.frequency`. Computes force; constants, deciding analytic, finite difference of gradients, or; finite difference of energies. :returns: :py:class:`~psi4.core.Matrix` |w--w| Total non-mass-weighted electronic Hessian in Hartrees/Bohr/Bohr. :returns: (:py:class:`~psi4.core.Matrix`, :py:class:`~psi4.core.Wavefunction`) |w--w| Hessian and wavefunction when **return_wfn** specified. :examples:. >>> # [1] Frequency calculation without thermochemical analysis; >>> hessian('mp3'). >>> # [2] Frequency calc w/o thermo analysis getting the Hessian; >>> # in file, core.Matrix, and np.array forms; >>> set hessian_write on; >>> H, wfn = hessian('ccsd', return_wfn=True); >>> wfn.hessian().print_out(); >>> np.array(H). """"""; ## First half of this fn -- entry means user wants a 2nd derivative by any means. kwargs = p4util.kwargs_lower(kwargs); basisstash = p4util.OptionsSta",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver.html:77464,Optimiz,OptimizationConvergenceError,77464,psi4manual/1.7.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver.html,2,"['Optimiz', 'optimiz']","['OptimizationConvergenceError', 'optimization']"
Performance,"RKS', 'UKS']:; if mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_property. if func is None:; raise ManagedMethodError([__name__, name, type_var, mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_omp2p5_property(name, **kwargs):; """"""Function selecting the algorithm for an OMP2.5 property call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); type_var, _, mtd_type = method_algorithm_type(name); module = core.get_global_option('QC_MODULE'). func = None; if reference in ['RHF', 'UHF', 'ROHF', 'RKS', 'UKS']:; if mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_property. if func is None:; raise ManagedMethodError([__name__, name, type_var, mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_omp3_property(name, **kwargs):; """"""Function selecting the algorithm for an OMP3 property call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); type_var, _, mtd_type = method_algorithm_type(name); module = core.get_global_option('QC_MODULE'). func = None; if reference in ['RHF', 'UHF', 'ROHF', 'RKS', 'UKS']:; if mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_property. if func is None:; raise ManagedMethodError([__name__, name, type_var, mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_olccd_property(name, **kwargs):; """"""Function selecting the algorithm for an OLCCD property call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); type_var, _, mtd_type = method_algorithm_type(name); module = core.get_global_option('QC_MODULE'). func = None; if reference in ['RHF', 'UHF', 'ROHF', 'RKS', 'UKS']:; if mtd_type == 'DF':; if module in ['', 'OCC']:",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html:9887,perform,performance,9887,psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html,4,['perform'],['performance']
Performance,"RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START¶. The minimum iteration to start storing DIIS vectors and performing ADIIS/EDIIS. Type: integer; Default: 1. DO_LINK¶. Perform the linear scaling exchange (LinK) algorithm, as described in [Ochsenfeld:1998:1663]. Only applies to Direct SCF. Type: boolean; Default: false. D_CONVERGENCE¶. Convergence criterion for SCF density, defined as the RMS or maximum absolute value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. E_CONVERGENCE¶. Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. FAIL_ON_MAXITER¶. Fail if we reach maxiter without converging?. Type: boolean; Default: true. INCFOCK¶. Do perform incremental Fock build?. Type: boolean; Default: false. INCFOCK_CONVERGENCE¶. The density threshold at which to stop building the Fock matrix incrementally. Type: conv double; Default: 1.0e-5. INCFOCK_FULL_FOCK_EVERY¶. Frequency with which to compute the full Fock matrix if using INCFOCK . N means rebuild every N SCF iterations to avoid accumulating error from the incremental procedure. Type: integer; Default: 5. LEVEL_SHIFT¶. Do use a level shift?. Type: double; Default: 0.0. LEVEL_SHIFT_CUTOFF¶. DIIS error at which to stop applying the level shift. Type: double; Default: 1e-2. LINK_INTS_TOLERANCE¶. The screening tolerance used for ERI/Density sparsity in the LinK algorithm. Type: conv double; Default: 1.0e-12. MAXITER¶. Maximum number of iterations. Cfour Interface: Keyword translates into CFOUR_SCF_MAXCYC. Type: integer; Default: 100. MOM_OCC¶. The absolute indices of orbitals to excite from in MOM (+/- for alpha/beta). Type: array; Default: No Default. MOM_START¶. The iteration to start ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__scf.html:6107,perform,perform,6107,psi4manual/1.6.x/autodir_options_c/module__scf.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__scf.html,1,['perform'],['perform']
Performance,"RMS orbital gradient. Type: conv double; Default: 1e-5. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-4. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. Advanced Keywords¶. OPT_METHOD¶. The optimization algorithm. Type: string; Possible Values: MSD, DIIS; Default: MSD. DIIS_MAX_VECS¶. Number of vectors used in DIIS. Type: integer; Default: 4. LINEQ_SOLVER¶. The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. SOS_SCALE¶. Spin-opposite scaling (SOS) value for SCF orbitals. Type: double; Default: 1.3. SOS_SCALE2¶. Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OMP2_ORBS_PRINT¶. Do print OMP2 orbital energies?. Type: boolean; Default: false. OMP3_ORBS_PRINT¶. Do print OMP3 orbital energies?. Type: boolean; Default: false. TPDM_ABCD_TYPE¶. How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algoritm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. Table Of Contents. OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory; Introduction; Theory; Methods; Basic Keywords; E_CONVERGENCE; R_CONVERGENCE; RMS_MOGRAD_CONVERGENCE; MAX_MOGRAD_CONVERGENCE; MO_MAXITER. Advanced Keywords; OPT_METHOD; DIIS_MAX_VECS; LINEQ_SOLVER; ORTH_TYPE; MP2_OS_SCALE; MP2_SS_SCALE; SOS_SCALE; SOS_SCALE2; NAT_ORBS; OMP2_ORBS_PRINT; O",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/ompn-1.html:6911,optimiz,optimized-,6911,psi4manual/4.0b3/ompn-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/ompn-1.html,2,['optimiz'],['optimized-']
Performance,"RMV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRSM(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRSV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. IDAMAX(arg0, arg1, arg2, arg3); docstring. adc(ref_wfn); Runs the ADC propagator code, for excited states. array_variable(key); Returns copy of the Matrix QCVariable key (case-insensitive); prefer variable(). array_variables(); Returns dictionary of all Matrix QCVariables; prefer variables(). be_quiet(); Redirects output to /dev/null. benchmark_blas1(max_dim, min_time); Perform benchmark traverse of BLAS 1 routines. benchmark_blas2(max_dim, min_time); Perform benchmark traverse of BLAS 2 routines. benchmark_blas3(max_dim, min_time[, nthread]); Perform benchmark traverse of BLAS 3 routines. benchmark_disk(max_dim, min_time); Perform benchmark of PSIO disk performance. benchmark_integrals(max_am, min_time); Perform benchmark of psi integrals (of libmints type). benchmark_math(min_time); Perform benchmark of common double floating point operations including most of cmath. ccdensity(ref_wfn); Runs the code to compute coupled cluster density matrices. ccenergy(ref_wfn); Runs the coupled cluster energy code. cceom(ref_wfn); Runs the equation of motion coupled cluster code for excited states. cchbar(ref_wfn); Runs the code to generate the similarity transformed Hamiltonian. cclambda(ref_wfn); Runs the coupled cluster lambda equations code. ccresponse(ref_wfn); Runs the coupled cluster response theory code. cctransort(ref_wfn); Runs cctransort that transforms and reorders integrals for use in the coupled cluster codes. cctriples(ref_wfn); Runs the coupled cluster (T) energy code. clean(); Remove scratch files. clean_options(); Reset options to clean state. clean_timers(); Reinitialize timers for independent timer.dat entries. clean_variables(); Empties all double and Matrix QCVariables that have been set in global memory. close_outfile(); Closes the output file. dct(ref_wfn); Runs the density cumulant ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/psi4api-1.html:2977,Perform,Perform,2977,psi4manual/1.5.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/psi4api-1.html,3,['Perform'],['Perform']
Performance,"RNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC); OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCFT); DCFT ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:178734,optimiz,optimize,178734,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimize']
Performance,"ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. OMEGA¶. Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. GAUGE¶. Specifies the choice of representation of the electric dipole operator. For polarizability, this keyword is ignored and LENGTH gauge is computed. For optical rotation and raman optical activity, this keyword is active, and acceptable values are LENGTH for the usual length-gauge representation, VELOCITY``(default) for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or ``BOTH. Note that, for optical rotation and raman optical activity calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: VELOCITY. table of contents. CC: Coupled Cluster Theory; Basic Keywords; REFERENCE; R_CONVERGENCE; MAXITER; BRUECKNER_ORBS_R_CONVERGENCE; RESTART; CACHELEVEL; CACHETYPE; NUM_AMPS_PRINT; MP2_AMPS_PRINT. Larger Calculations; Excited State Coupled Cluster Calculations; ROOTS_PER_IRREP; E_CONVERGENCE; SINGLES_PRINT; SCHMIDT_ADD_RESIDUAL_TOLERANCE; EOM_GUESS. Linear Response (CCLR) Calculations; PROPERTY; OMEGA; GAUGE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Theoretical Methods: SCF to FCI; CC: Coupled Cluster Theory. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/cc.html:13061,CACHE,CACHELEVEL,13061,psi4manual/1.8.x/cc.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/cc.html,2,['CACHE'],"['CACHELEVEL', 'CACHETYPE']"
Performance,"ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. OMEGA¶. Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. GAUGE¶. Specifies the choice of representation of the electric dipole operator. For polarizability, this keyword is ignored and LENGTH gauge is computed. For optical rotation and raman optical activity, this keyword is active, and acceptable values are LENGTH for the usual length-gauge representation, VELOCITY``(default) for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or ``BOTH. Note that, for optical rotation and raman optical activity calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: VELOCITY. table of contents. CC: Coupled Cluster Theory; Basic Keywords; REFERENCE; R_CONVERGENCE; MAXITER; BRUECKNER_ORBS_R_CONVERGENCE; RESTART; CACHELEVEL; CACHETYPE; NUM_AMPS_PRINT; MP2_AMPS_PRINT. Larger Calculations; Excited State Coupled Cluster Calculations; ROOTS_PER_IRREP; E_CONVERGENCE; SINGLES_PRINT; SCHMIDT_ADD_RESIDUAL_TOLERANCE; EOM_GUESS. Linear Response (CCLR) Calculations; PROPERTY; OMEGA; GAUGE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Theoretical Methods: SCF to FCI; CC: Coupled Cluster Theory. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/cc.html:13061,CACHE,CACHELEVEL,13061,psi4manual/1.9.x/cc.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/cc.html,2,['CACHE'],"['CACHELEVEL', 'CACHETYPE']"
Performance,"ROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. CI_MAXITER¶. Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. NUM_ROOTS¶. number of CI roots to find. Type: integer; Default: 1. ICORE¶. Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. DIAG_METHOD¶. This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, S",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/detci.html:8527,perform,perform,8527,psi4manual/master/detci.html,https://psicode.org,https://psicode.org/psi4manual/master/detci.html,4,['perform'],['perform']
Performance,"ROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. CI_MAXITER¶. Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. NUM_ROOTS¶. number of CI roots to find. Type: integer; Default: 1. ICORE¶. Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. DIAG_METHOD¶. This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires CI vectors on disk, where is the maximum number of iterations and is the number of roots. Type: string; Possib",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/detci-1.html:6776,perform,perform,6776,psi4manual/1.0.0/detci-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/detci-1.html,2,['perform'],['perform']
Performance,"ROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. CI_MAXITER¶. Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. NUM_ROOTS¶. number of CI roots to find. Type: integer; Default: 1. ICORE¶. Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. DIAG_METHOD¶. This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of roots",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/detci-1.html:7990,perform,perform,7990,psi4manual/1.1.0/detci-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/detci-1.html,11,['perform'],['perform']
Performance,"RREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below . Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR); CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR); CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR); CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR); CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:31395,perform,performed,31395,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['perform'],['performed']
Performance,"R_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:27004,perform,performance,27004,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,4,['perform'],['performance']
Performance,"R_CC_EXTRAPOLATION (CFOUR); CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR); CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR); CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from ac",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:27004,perform,performance,27004,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,4,['perform'],['performance']
Performance,"Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Functional Test. mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy betw",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:35464,perform,performs,35464,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['perform'],['performs']
Performance,"Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1, 5):; set_num_threads(nthread); energy(""scf/cc-pvdz""). In PsiAPI mode of operation, this syntax, psi4.set_num_threads(nthread), is; the primary way to control threading.; (4) Method-Specific Control; Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may specify:; set MODULE_NAME df_ints_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; set_num_threads() Psithon method or the default environmental variables. PBS job file¶; To run a PSI4 job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section.; #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the; specific characteristics of your PBS queuing system but they may include:",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/external.html:14485,queue,queueing,14485,psi4manual/master/external.html,https://psicode.org,https://psicode.org/psi4manual/master/external.html,9,['queue'],['queueing']
Performance,"Runs the coupled cluster response theory code.; ; ccsort(...); ccsort() -> float :; Runs CCSORT, which reorders integrals for use in the coupled cluster codes.; ; cctriples(...); cctriples() -> float :; Runs the coupled cluster (T) energy code.; ; cepa(...); cepa() -> float :; Runs the coupled electron pair approximation code; ; clean(...); clean() -> None :; Function to remove scratch files. Call between independent jobs.; ; close_outfile(...); close_outfile() -> None :; Closes the output file.; ; dcft(...); dcft() -> float :; Runs the density cumulant functional theory code.; ; deriv(...); deriv() -> int :; Runs deriv, which contracts density matrices with derivative integrals, to compute gradients.; ; detci(...); detci() -> float :; Runs the determinant-based configuration interaction code.; ; dfmp2(...); dfmp2() -> float :; Runs the DF-MP2 code.; ; dfmp2grad(...); dfmp2grad() -> float :; Runs the DF-MP2 gradient.; ; fd_1_0(...); fd_1_0( (list)arg1) -> PsiReturnType :; Performs a finite difference gradient computation, from energy points.; ; fd_freq_0(...); fd_freq_0( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from energy points, for a given irrep.; ; fd_freq_1(...); fd_freq_1( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from gradients, for a given irrep.; ; fd_geoms_1_0(...); fd_geoms_1_0() -> matrix_vector :; Gets the list of displacements needed for a finite difference gradient computation, from energy points.; ; fd_geoms_freq_0(...); fd_geoms_freq_0( (int)arg1) -> matrix_vector :; Gets the list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep.; ; fd_geoms_freq_1(...); fd_geoms_freq_1( (int)arg1) -> matrix_vector :; Gets the list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep; ; fd_geoms_hessian_0(...); fd_geoms_hessian_0() -> matrix_vector :; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/psimod-1.html:105715,Perform,Performs,105715,psi4manual/4.0b3/psimod-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimod-1.html,2,['Perform'],['Performs']
Performance,"R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENERGY¶. SAPT EXCH ENERGY¶. SAPT IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/glossary_psivariables-1.html:17229,optimiz,optimized,17229,psi4manual/1.2.1/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/glossary_psivariables-1.html,4,['optimiz'],['optimized']
Performance,"S (DCT)¶DCT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAXED (OCC)¶OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI)¶DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCT)¶DCT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY)¶CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA)¶CCLAMBDA — Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE)¶CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI)¶DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM)¶CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS)¶GLOBALS — An array giving the number of restricted doubly-occupied orbita",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:201634,optimiz,optimizations,201634,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,5,['optimiz'],['optimizations']
Performance,S Meta-GGA XC Functional; Y; Y; —; —; —; —; —; Y. TPSS-D3ZEROATM; TPSS Meta-GGA XC Functional; Y; Y; —; —; —; —; —; Y. TPSS-NL; TPSS Meta-GGA XC Functional; Y; Y; —; —; —; —; —; —; —. TPSSH; TPSSh Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; —; —. TPSSH-D3BJ2B; TPSSh-d3bj2b Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. TPSSH-D3BJATM; TPSSh-d3bjatm Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. TPSSH-D3OPATM; TPSSh-d3opatm Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. TPSSH-D3ZERO2B; TPSSh-d3zero2b Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. TPSSH-D3ZEROATM; TPSSh-d3zeroatm Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; Y. TPSSH-NL; TPSSh-nl Hyb-GGA Exchange-Correlation Functional; Y; Y; —; 0.100000; —; —; —; —; —. TPSSLYP1W; TPSSLYP1W GGA Exchange-Correlation Functional; Y; Y; —; —; —; —; —; —; —. TUNED-CAM-B3LYP; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional; Y; —; 0.150000; 0.079900; —; —; —; —; —. VSXC; VSXC Meta-GGA XC Functional; Y; Y; —; —; —; —; —; —; —. VV10; VV10 GGA Exchange-Correlation Functional; Y; —; —; —; —; —; —; —; —. WB97; wB97 GGA Exchange-Correlation Functional; Y; —; 0.400000; —; —; —; —; —; —. WB97M-D3BJ; wB97M-V with D3(BJ) instead of VV10 dispersion; Y; Y; 0.300000; 0.150000; —; —; —; Y. WB97M-V; wB97M-V Hyb-GGA Exchange-Correlation Functional; Y; Y; 0.300000; 0.150000; —; —; —; —; —. WB97X; wB97X Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.157706; —; —; —; —; —. WB97X-D; wB97X-D Hyb-GGA Exchange-Correlation Functional; Y; —; 0.200000; 0.222036; —; —; —; Y. WB97X-D3; wB97X-D3 Hyb-GGA Exchange-Correlation Functional; Y; —; 0.250000; 0.195728; —; —; —; Y. WB97X-D3BJ; wB97X-V with D3(BJ) instead of VV10 dispersion; Y; —; 0.300000; 0.167000; —; —; —; Y. WB97X-D3BJATM; wB97X-d3bjatm Hyb-GGA Exchange-Correlation Functional; Y; —; 0.300000; 0.157706; —; —; —; Y. WB97X-D3ZERO2B;,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_dft_all.html:41999,TUNE,TUNED-CAM-,41999,psi4manual/1.8.x/autodoc_dft_all.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_dft_all.html,4,['TUNE'],['TUNED-CAM-']
Performance,"SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:11365,perform,performs,11365,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['perform'],['performs']
Performance,"SAPT computation with DF-HF and a; superposition-of-atomic-densities guess. This is the preferred method of; running the SAPT module. SAPT0¶; Generally speaking, SAPT0 should be applied to large systems or large data; sets. The performance of SAPT0 relies entirely on error cancellation, which; seems to be optimal with a truncated aug-cc-pVDZ basis, namely,; jun-cc-pVDZ (which we have referred to in previous work as; aug-cc-pVDZ’). We do not recommend using SAPT0 with large basis sets; like aug-cc-pVTZ. A systematic study of the accuracy of SAPT0 and other SAPT; truncations, using different basis sets, is reported in; [Parker:2014:094106]. In particular, an empirical recipe for scaled SAPT0; can yield improved performance and has been included in the output file as; the sSAPT0 interaction energy. sSAPT0 is a free by-product and is automatically; computed when SAPT0 is requested (see above for more details).; The SAPT module has been used to perform SAPT0 computations with over; 200 atoms and 2800 basis functions; this code should be scalable to 4000; basis functions. Publications resulting from the use of the SAPT0 code; should cite the following publications: [Hohenstein:2010:184111] and; [Hohenstein:2011:174107]. Basic SAPT0 Keywords¶. SAPT_LEVEL¶. The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST¶. Auxiliary basis set for SAPT Elst10 and Exch10 density fitting computations, may be important if heavier elements are involved. Defaults to DF_BASIS_SAPT. Type: string; Possible Values: basis string; Default: No Default. FREEZE_CORE¶. The scope of core orbitals to freeze in evaluation of SAPT and terms. Re",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/sapt-1.html:8089,perform,perform,8089,psi4manual/1.0.0/sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/sapt-1.html,4,"['perform', 'scalab']","['perform', 'scalable']"
Performance,"SCALE2¶. Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OCC_ORBS_PRINT¶. Do print OCC orbital energies?. Type: boolean; Default: false. TPDM_ABCD_TYPE¶. How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algoritm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. DO_DIIS¶. Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT¶. Do apply level shifting?. Type: boolean; Default: true. OCC: Conventional Møller–Plesset Perturbation Theories¶; Module: Keywords, PSI Variables, OCC; PSI4 also has a non-density-fitted MP2 algorithm for RHF and UHF; energies and gradients. The; density-fitted module DFMP2 is always the default, so to access the; conventional MP2 code, set MP2_TYPE to conv and call as usual; energy('mp2')/optimize('mp2'). Basic Keywords¶. MP2_TYPE¶. Algorithm to use for non-OO MP2 computation. Type: string; Possible Values: DF, CONV; Default: DF. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. Non-orbital-optimized counterparts to higher order MPn methods are also; available. Summarizing from tables above, the following methods are; available and can be controlled through OCC keywards. Name; Calls Method; Energy; Gradient; Reference. conv-mp2; MP2; Y; Y; RHF/ROHF/UHF. mp3; MP3; Y; Y; RHF/UHF. mp2.5; MP2.5; Y; Y; RHF/UHF. cepa0; CEPA(0) (identical to Linearized CCD); Y; Y; RHF/UHF. Table Of Contents. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Convergence Problems; Methods; Basic Keywords; E_CONVERGENCE; R_CONVERGENCE; RMS_MOGRAD_CONVERGENCE; MAX_MOGRAD_CON",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/occ-1.html:10847,optimiz,optimize,10847,psi4manual/4.0b5/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/occ-1.html,2,['optimiz'],['optimize']
Performance,"SCALE2¶. Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OCC_ORBS_PRINT¶. Do print OCC orbital energies?. Type: boolean; Default: false. TPDM_ABCD_TYPE¶. How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algoritm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. DO_DIIS¶. Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT¶. Do apply level shifting?. Type: boolean; Default: true. OCC: Conventional Møller–Plesset Perturbation Theories¶; Module: Keywords, PSI Variables, OCC; PSI4 also has a non-density-fitted MP2 algorithm for RHF and UHF; energies and gradients. The; density-fitted module DFMP2 is always the default, so to access the; conventional MP2 code, set MP2_TYPE to conv and call as usual; energy('mp2')/optimize('mp2'). Basic Keywords¶. MP2_TYPE¶. Algorithm to use for non-OO MP2 computation. Type: string; Possible Values: DF, CONV; Default: DF. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. Non-orbital-optimized counterparts to higher order MPn methods are also; available. Summarizing from tables above, the following methods are; available and can be controlled through OCC keywards. Name; Calls Method; Energy; Gradient; Reference. conv-mp2; MP2; Y; Y; RHF/ROHF/UHF. mp3; MP3; Y; Y; RHF/UHF. mp2.5; MP2.5; Y; Y; RHF/UHF. cepa0; CEPA(0) (identical to Linearized CCD); Y; Y; RHF/UHF. Table Of Contents. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Methods; Basic Keywords; E_CONVERGENCE; R_CONVERGENCE; RMS_MOGRAD_CONVERGENCE; MAX_MOGRAD_CONVERGENCE; MO_MAXITER; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/occ-1.html:10250,optimiz,optimize,10250,psi4manual/4.0b4/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/occ-1.html,2,['optimiz'],['optimize']
Performance,"SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluate",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:20929,optimiz,optimized,20929,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,8,['optimiz'],['optimized']
Performance,"SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. soscf-large; Second-order SCF convergnece: Benzene. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft1-alt; DFT Functional Test. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. nbody-vmfc-hessian; Computation of VMFC-corrected water trimer Hessian (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. fci-h2o; 6-31G H2O Test FCI Energy Point. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:32812,optimiz,optimizations,32812,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimizations']
Performance,"SCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet catio",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:23331,optimiz,optimized,23331,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,8,['optimiz'],['optimized']
Performance,"SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except KeyError:; raise ValidationError('Property method %s not available.' % (lowername)). optstash.restore(); return returnvalue. ## Aliases ##; prop = property. [docs]def optimize(name, **kwargs):; r""""""Function to perform a geometry optimization. :aliases: opt(). :returns: (*float*) Total electronic energy of optimized structure in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`. .. note:: Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. .. _`table:grad_gen`:. +-------------------------+---------------------------------------------------------------------------------------+; | name | calls method |; +=========================+=======================================================================================+; | scf | Hartree--Fock (HF) or density functional theory (DFT) :ref:`[manual] <sec:scf>` |; +-------------------------+---------------------------------------------------------------------------------------+; | dcft | density cumulant functional theory :ref:`[manual] <sec:dcft>` |; +-------------------------+---------------------------------------------------------------------------------------+; | mp2 | 2nd-order Moller-Plesset perturbation theory (MP2) :ref:`[manual] <sec:dfmp2>` |; +-------------------------+---------------------------------------------------------------------------------------+; | df-mp2 | MP2 with density fitting :ref:`[manual] <sec:dfmp2>` |; +-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/driver.html:45328,Optimiz,Optimizations,45328,psi4manual/4.0b4/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html,1,['Optimiz'],['Optimizations']
Performance,"SCF','REFERENCE') != 'RHF' ):; raise ValidationError(""""""g2 computations require ""reference rhf"".""""""). # stash user options:; optstash = p4util.OptionsState(; ['FNOCC','COMPUTE_TRIPLES'],; ['FNOCC','COMPUTE_MP4_TRIPLES'],; ['FREEZE_CORE'],; ['MP2_TYPE'],; ['SCF','SCF_TYPE']). # override default scf_type; psi4.set_local_option('SCF','SCF_TYPE','OUT_OF_CORE'). # optimize geometry at scf level; psi4.clean(); psi4.set_global_option('BASIS',""6-31G(D)""); driver.optimize('scf'); psi4.clean(). # scf frequencies for zpe; scf_e, ref = driver.frequency('scf', return_wfn=True). # thermodynamic properties; du = psi4.get_variable('INTERNAL ENERGY CORRECTION'); dh = psi4.get_variable('ENTHALPY CORRECTION'); dg = psi4.get_variable('GIBBS FREE ENERGY CORRECTION'). freqs = ref.frequencies(); nfreq = freqs.dim(0); freqsum = 0.0; for i in range(0, nfreq):; freqsum += freqs.get(i); zpe = freqsum / p4const.psi_hartree2wavenumbers * 0.8929 * 0.5; psi4.clean(). # optimize geometry at mp2 (no frozen core) level; # note: freeze_core isn't an option in MP2; psi4.set_global_option('FREEZE_CORE',""FALSE""); psi4.set_global_option('MP2_TYPE', 'CONV'); driver.optimize('mp2'); psi4.clean(). # qcisd(t); psi4.set_local_option('FNOCC','COMPUTE_MP4_TRIPLES',""TRUE""); psi4.set_global_option('FREEZE_CORE',""TRUE""); psi4.set_global_option('BASIS',""6-311G(D_P)""); ref = driver.proc.run_fnocc('qcisd(t)', return_wfn=True, **kwargs). # HLC: high-level correction based on number of valence electrons; nirrep = ref.nirrep(); frzcpi = ref.frzcpi(); nfzc = 0; for i in range (0,nirrep):; nfzc += frzcpi[i]; nalpha = ref.nalpha() - nfzc; nbeta = ref.nbeta() - nfzc; # hlc of gaussian-2; hlc = -0.00481 * nalpha -0.00019 * nbeta; # hlc of gaussian-1; hlc1 = -0.00614 * nalpha. eqci_6311gdp = psi4.get_variable(""QCISD(T) TOTAL ENERGY""); emp4_6311gd = psi4.get_variable(""MP4 TOTAL ENERGY""); emp2_6311gd = psi4.get_variable(""MP2 TOTAL ENERGY""); psi4.clean(). # correction for diffuse functions; psi4.set_global_option('BASIS',""6-311+G",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/gaussian_n.html:2406,optimiz,optimize,2406,psi4manual/1.0.0/_modules/gaussian_n.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/gaussian_n.html,1,['optimiz'],['optimize']
Performance,"SCF_TYPE; keyword, which may be one of the following. PK [Default]; An out-of-core, presorted algorithm using exact ERIs. Quite fast for a; zero-error algorithm if enough memory is available. Integrals are; generated only once, and symmetry is utilized to reduce number of; integrals.; OUT_OF_CORE; An out-of-core, unsorted algorithm using exact ERIs. Overcomes the; memory bottleneck of the current PK algorithm. Integrals are generated; only once, and symmetry is utilized to reduce number of integrals.; DIRECT; A threaded, sieved, integral-direct algorithm, with full permutational; symmetry. This algorithm is brand new, but seems to be reasonably fast; up to 1500 basis functions, uses zero disk (if DF pre-iterations are; turned off), and can obtain significant; speedups with negligible error loss if INTS_TOLERANCE; is set to 1.0E-8 or so.; DF [Default]; A density-fitted algorithm designed for computations with thousands of; basis functions. This algorithm is highly optimized, and is threaded; with a mixture of parallel BLAS and OpenMP. Note that this algorithm; should use the -JKFIT series of auxiliary bases, not the -RI or; -MP2FIT bases. The default guess for auxiliary basis set should work; for most bases, otherwise the DF_BASIS_SCF keyword can; be used to manually specify the auxiliary basis. This algorithm is; preferred unless either absolute accuracy is required; [\(\gtrsim\)CCSD(T)] or a -JKFIT auxiliary basis is unavailable; for the orbital basis/atoms involved.; CD; A threaded algorithm using approximate ERIs obtained by Cholesky; decomposition of the ERI tensor. The accuracy of the Cholesky; decomposition is controlled by the keyword CHOLESKY_TOLERANCE.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. For some of these algorithms, Schwarz and/or density sieving can be used to; identify negligible ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/scf-1.html:21573,optimiz,optimized,21573,psi4manual/1.1.0/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/scf-1.html,2,['optimiz'],['optimized']
Performance,"SCF_TYPE; keyword, which may be one of the following. PK [Default]; An out-of-core, presorted algorithm using exact ERIs. Quite fast for a; zero-error algorithm if enough memory is available. Integrals are; generated only once, and symmetry is utilized to reduce number of; integrals.; OUT_OF_CORE; An out-of-core, unsorted algorithm using exact ERIs. Overcomes the; memory bottleneck of the current PK algorithm. Integrals are generated; only once, and symmetry is utilized to reduce number of integrals.; DIRECT; A threaded, sieved, integral-direct algorithm, with full permutational; symmetry. This algorithm is brand new, but seems to be reasonably fast; up to 1500 basis functions, uses zero disk (if DF pre-iterations are; turned off), and can obtain significant; speedups with negligible error loss if INTS_TOLERANCE; is set to 1.0E-8 or so.; DF [Default]; A density-fitted algorithm designed for computations with thousands of; basis functions. This algorithm is highly optimized, and is threaded; with a mixture of parallel BLAS and OpenMP. Note that this algorithm; should use the -JKFIT series of auxiliary bases, not the -RI or; -MP2FIT bases. The default guess for auxiliary basis set should work; for most bases, otherwise the DF_BASIS_SCF keyword can; be used to manually specify the auxiliary basis. This algorithm is; preferred unless either absolute accuracy is required; [\(\gtrsim\)CCSD(T)] or a -JKFIT auxiliary basis is unavailable; for the orbital basis/atoms involved.; CD; A threaded algorithm using approximate ERIs obtained by Cholesky; decomposition of the ERI tensor. The accuracy of the Cholesky; decomposition is controlled by the keyword CHOLESKY_TOLERANCE.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. In some cases the above algorithms have multiple implementations that return; the same result, bu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/scf-1.html:21575,optimiz,optimized,21575,psi4manual/1.2.1/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/scf-1.html,4,['optimiz'],['optimized']
Performance,"SCREENING (SAPT)¶SAPT — Do use Combined Schwarz Approximation Maximum (CSAM) screening on two-electron integrals. This is a slightly tighter bound than that of default Schwarz screening. Type: string; Possible Values: SCHWARZ, CSAM; Default: CSAM. SCS_CCSD (CCENERGY)¶CCENERGY — Do spin-component-scaled CCSD. Type: boolean; Default: false. SCS_CCSD (FNOCC)¶FNOCC — Do SCS-CCSD?. Type: boolean; Default: false. SCS_CEPA (FNOCC)¶FNOCC — Do SCS-CEPA? Note that the scaling factors will be identical to those for SCS-CCSD. Type: boolean; Default: false. SCS_MP2 (CCENERGY)¶CCENERGY — Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SCS_MP2 (FNOCC)¶FNOCC — Do SCS-MP2?. Type: boolean; Default: false. SCS_TYPE (DFOCC)¶DFOCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCS_TYPE (OCC)¶OCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCSN_MP2 (CCENERGY)¶CCENERGY — Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SEKINO (CCLAMBDA)¶CCLAMBDA — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEKINO (CCRESPONSE)¶CCRESPONSE — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEM_MAXITER (ADC)¶ADC — Maximum iteration number in simultaneous expansion method. This option is only available for the built-in ADC backend. Type: integer; Default: 30. SEMICANONICAL (CCENERGY)¶CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCEOM)¶CCEOM — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCTRANSORT)¶CCTRANSORT — Force conversion of ROHF MOs to semicanonical MOs to run UHF-based energies. Type: boolean; Default: false. SEMICANONICAL (CCTRIPLES)¶CCTRIPLES — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SF_RESTRICT (DETCI)¶DETCI (Expert) — Do eliminate determinants not valid for s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:214640,optimiz,optimized,214640,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimized']
Performance,"SD gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); type_var, _, mtd_type = method_algorithm_type(name); module = core.get_global_option('QC_MODULE'). func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module in ['', 'CCENERGY']:; func = run_ccenergy_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'CCENERGY']:; func = run_ccenergy_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module in ['', 'CCENERGY']:; func = run_ccenergy_gradient. if func is None:; raise ManagedMethodError([__name__, name, type_var, mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_fnoccsd_t_(name, **kwargs):; """"""Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); type_var, _, mtd_type = method_algorithm_type(name); module = core.get_global_option('QC_MODULE'). func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module in ['', 'FNOCC']:; func = run_fnocc; elif mtd_type == 'DF':; if module in ['', 'FNOCC']:; func = run_fnodfcc; elif mtd_type == 'CD':; if module in ['', 'FNOCC']:; func = run_fnodfcc. if func is None:; raise ManagedMethodError([__name__, name, type_var, mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_ccsd_t_(name, **kwargs):; """"""Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); type_var, _, mtd_type = method_algorithm_type(name); module = core.get_global_option('QC_MODULE'). func = None; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html:24878,perform,performance,24878,psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html,4,['perform'],['performance']
Performance,"SD(AT) energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CC_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/ccenergy. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module in ['', 'CCENERGY']:; func = run_ccenergy; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc. if func is None:; raise ManagedMethodError(['select_ccsd_at_', name, 'CC_TYPE', mtd_type, reference, module]). if name.lower() == ""a-ccsd(t)"":; pass; elif name.lower() in [""ccsd(at)"", ""lambda-ccsd(t)""]:; core.print_out(f""""""\nMethod ""{name.lower()}"" has been regularized to ""a-ccsd(t)"" for QCVariables.""""""); name = ""a-ccsd(t)"". if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_cisd(name, **kwargs):; """"""Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CI_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only detci/fnocc. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'FNOCC']:; func = run_cepa; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module in ['', 'DETCI']:; func = run_detci. if func is None:; raise ManagedMethodError(['select_cisd', name, 'CI_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_mp4(name, **kwargs):; """"""Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Conside",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html:27894,perform,performance,27894,psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,3,['perform'],['performance']
Performance,"SD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, at the UHF an ROHF levels of theory. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfmp2_2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. cc36; CC2(RHF)/cc-pVDZ energy of",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html:14605,perform,performed,14605,psi4manual/4.0b2/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html,4,['perform'],['performed']
Performance,"SD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mints3; Test individual integral objects for correctness. phi-ao; Test computing values of basis functions (puream and non-puream) at points. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:37645,perform,performs,37645,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['perform'],['performs']
Performance,"SE). OMEGA_ERF (MINTS). OMP2; . setting keywords. theory. OMP2.5; . setting keywords. OMP2CORRELATIONENERGY. OMP2TOTALENERGY. OMP3; . setting keywords. theory. OMP3CORRELATIONENERGY. OMP3TOTALENERGY. OMP_N_THREAD (CPHF). OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4]. ONE-ELECTRONENERGY. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OPDM (DETCI). OPDM_AVG (DETCI). OPDM_IN_FILE (TRANSQT). OPDM_KE (DETCI). OPDM_OUT_FILE (TRANSQT). OPDM_PRINT (DETCI). OPDM_RELAX (CCDENSITY). (DFMP2). opt(); . see optimize(); . OPT_METHOD (OCC). OPT_TYPE (OPTKING). optimization; . see geometry optimization; . optimize(); . setting keywords. optimize() in module driver. OptionsState class in optproc. OptionState class in optproc. optproc module. ORB_OPT (OCC). ORB_RESP_SOLVER (OCC). Orbital-Optimized Methods; . theory. Orbital-Optimized Methods, OCEPA. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. orientation_fixed() LibmintsMolecule method. ORTH_TYPE (OCC). output; . SAPT. cbs(). database(). geometry optimization. P. P (THERMO). PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parse_arbitrary_order() in module driver. parse_cotton_irreps() in module driver. parse_multiline_array() in module input. PATH, [1], [2], [3], [4]. PB_LAMBDA (DFTSAPT). PCG_BETA_TYPE (OCC). PCG_CONVERGENCE (OCC). PCG_MAXITER (OCC). PEP1. perp_unit() in module qcdb.vecutil. PERTURB_CBS (PSIMRCC). PERTURB_CBS_COUPLING (PSIMRCC). PERTURB_H (SCF). PERTURB_MAGNITUDE (DETCI). (SCF). PERTURB_WITH (SCF). PHI_POINTS (SCF). physconst module. physical constants. PITZER (TRANSQT). point_group() LibmintsMolecule method. POINTS (FINDIF). POLE_MAXITER (ADC). populateExtern() Diffuse method. QMMM method. PR (ADC). PRECONDITIONER (DETCI). prerequisites. PRESORT_FILE (TRANSQT). PRINT (CPHF). (DFTSAPT). (GLOBALS). (SAPT). PRINT_BASIS (SCF). print_basis_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/genindex.html:31624,Optimiz,Optimized,31624,psi4manual/4.0b4/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html,1,['Optimiz'],['Optimized']
Performance,"SE); CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCSORT); CCSORT — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_OCC (DCFT); DCFT (Expert) — Controls whether to force the occupation to be that of the SCF guess. For practical applications only the default must be used. Type: boolean; Default: true. LOCK_SINGLET (PSIMRCC); PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI); DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI); DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI); DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. M_FILE (TRANSQT); TRANSQT — Output integrals file. Type: integer; Default: 0. MADMP2_SLEEP (DFMP2); DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS); GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_BUCKETS (TRANSQT); TRANSQT — Maximum buckets. Type: integer; Default: 499. MAX_CCD_DIISVECS (SAPT); SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OPTKING); OPTKING — Conver",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html:72218,perform,performed,72218,psi4manual/4.0b5/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html,2,['perform'],['performed']
Performance,SEM_MAXITER — Psi4 [1.0.0 6a9a71b] Docs; AEL — Psi4 [1.0.0 6a9a71b] Docs; AO_BASIS — Psi4 [1.0.0 6a9a71b] Docs; CACHELEVEL — Psi4 [1.0.0 6a9a71b] Docs; GAUGE — Psi4 [1.0.0 6a9a71b] Docs; INTS_TOLERANCE — Psi4 [1.0.0 6a9a71b] Docs; ONEPDM — Psi4 [1.0.0 6a9a71b] Docs; ONEPDM_GRID_CUTOFF — Psi4 [1.0.0 6a9a71b] Docs; ONEPDM_GRID_DUMP — Psi4 [1.0.0 6a9a71b] Docs; ONEPDM_GRID_STEPSIZE — Psi4 [1.0.0 6a9a71b] Docs; OPDM_RELAX — Psi4 [1.0.0 6a9a71b] Docs; PROP_ALL — Psi4 [1.0.0 6a9a71b] Docs; PROP_ROOT — Psi4 [1.0.0 6a9a71b] Docs; PROP_SYM — Psi4 [1.0.0 6a9a71b] Docs; REFERENCE — Psi4 [1.0.0 6a9a71b] Docs; ROOTS_PER_IRREP — Psi4 [1.0.0 6a9a71b] Docs; WFN — Psi4 [1.0.0 6a9a71b] Docs; XI — Psi4 [1.0.0 6a9a71b] Docs; XI_CONNECT — Psi4 [1.0.0 6a9a71b] Docs; ZETA — Psi4 [1.0.0 6a9a71b] Docs; ABCD — Psi4 [1.0.0 6a9a71b] Docs; ANALYZE — Psi4 [1.0.0 6a9a71b] Docs; AO_BASIS — Psi4 [1.0.0 6a9a71b] Docs; BCCD_MAXITER — Psi4 [1.0.0 6a9a71b] Docs; BRUECKNER_ORBS_R_CONVERGENCE — Psi4 [1.0.0 6a9a71b] Docs; CACHELEVEL — Psi4 [1.0.0 6a9a71b] Docs; CACHETYPE — Psi4 [1.0.0 6a9a71b] Docs; CC_NUM_THREADS — Psi4 [1.0.0 6a9a71b] Docs; CC_OS_SCALE — Psi4 [1.0.0 6a9a71b] Docs; CC_SS_SCALE — Psi4 [1.0.0 6a9a71b] Docs; DIIS — Psi4 [1.0.0 6a9a71b] Docs; E_CONVERGENCE — Psi4 [1.0.0 6a9a71b] Docs; FORCE_RESTART — Psi4 [1.0.0 6a9a71b] Docs; LOCAL — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_CPHF_CUTOFF — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_CUTOFF — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_METHOD — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_PAIRDEF — Psi4 [1.0.0 6a9a71b] Docs; LOCAL_WEAKP — Psi4 [1.0.0 6a9a71b] Docs; MAXITER — Psi4 [1.0.0 6a9a71b] Docs; MP2_AMPS_PRINT — Psi4 [1.0.0 6a9a71b] Docs; MP2_OS_SCALE — Psi4 [1.0.0 6a9a71b] Docs; MP2_SS_SCALE — Psi4 [1.0.0 6a9a71b] Docs; NEW_TRIPLES — Psi4 [1.0.0 6a9a71b] Docs; NUM_AMPS_PRINT — Psi4 [1.0.0 6a9a71b] Docs; PAIR_ENERGIES_PRINT — Psi4 [1.0.0 6a9a71b] Docs; PROPERTY — Psi4 [1.0.0 6a9a71b] Docs; R_CONVERGENCE — Psi4 [1.0.0 6a9a71b] Docs; REFERENCE — Psi4 [1.0.0 6a9a71b] Docs; RESTART ,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:39663,CACHE,CACHELEVEL,39663,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,"SF-DPT6, SFREE, X2C1E, DPT; Default: OFF. CFOUR_RELAX_DENS (CFOUR); CFOUR — Specifies whether the relaxed density matrix is computed for correlated wave functions. OFF (= 0) The relaxed density will not be computed, ON (= 1) it will be computed. Type: boolean; Default: false. CFOUR_RES_RAMAN (CFOUR); CFOUR — This option can be used to convert an analytically calculated gradient vector to a particular normal coordinate representation. A useful application is to calculate the gradient of an electronically excited state in the normal coordinate representation of the ground electronic state, as this provides a first approximation to resonance Raman intensities (hence the name of the keyword). Calculations that use the this option require the externally supplied force constant matrix FCMFINAL, which is written to disk during the course of both analytic and finite-difference vibrational frequency calculations. No such transformation is performed if OFF (=0); while ON (=1) directs the program to evaluate the gradient and transform it to the chosen set of normal coordinates. A warning message is printed if the force constant matrix is unavailable. Type: boolean; Default: false. CFOUR_RESTART_CC (CFOUR); CFOUR — Offers the possibility to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR); CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:72292,perform,performed,72292,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,6,['perform'],['performed']
Performance,"SF-DPT6, SFREE, X2C1E, DPT; Default: OFF. CFOUR_RELAX_DENS (CFOUR); CFOUR — Specifies whether the relaxed density matrix is computed for correlated wave functions. OFF (= 0) The relaxed density will not be computed, ON (= 1) it will be computed. Type: boolean; Default: false. CFOUR_RES_RAMAN (CFOUR); CFOUR — This option can be used to convert an analytically calculated gradient vector to a particular normal coordinate representation. A useful application is to calculate the gradient of an electronically excited state in the normal coordinate representation of the ground electronic state, as this provides a first approximation to resonance Raman intensities (hence the name of the keyword). Calculations that use the this option require the externally supplied force constant matrix FCMFINAL, which is written to disk during the course of both analytic and finite-difference vibrational frequency calculations. No such transformation is performed if OFF (=0); while ON (=1) directs the program to evaluate the gradient and transform it to the chosen set of normal coordinates. A warning message is printed if the force constant matrix is unavailable. Type: boolean; Default: false. CFOUR_RESTART_CC (CFOUR); CFOUR — Offers the possibilty to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR); CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:72089,perform,performed,72089,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['perform'],['performed']
Performance,"SF-SAPT code. dft-jk; DFT JK on-disk test. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega= (589 355 nm). fnocc2; Test G2 method for H2O. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. remp-energy2; integral conventional unrestricted REMP/cc-pVDZ energies for the H2O+ molecule. results were independently verified against the initial wavels implementation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. fcidump; test FCIDUMP functionality for rhf/uhf. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. dfc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:47589,optimiz,optimizations,47589,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimizations']
Performance,"SI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD¶. Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO¶. Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID¶. Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS¶. Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:31471,optimiz,optimized,31471,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,17,['optimiz'],['optimized']
Performance,SI4 [beta2] documentation; AO_BASIS — PSI4 [beta2] documentation; CACHELEVEL — PSI4 [beta2] documentation; DIIS — PSI4 [beta2] documentation; JOBTYPE — PSI4 [beta2] documentation; LOCAL — PSI4 [beta2] documentation; LOCAL_CPHF_CUTOFF — PSI4 [beta2] documentation; LOCAL_CUTOFF — PSI4 [beta2] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta2] documentation; LOCAL_METHOD — PSI4 [beta2] documentation; LOCAL_PAIRDEF — PSI4 [beta2] documentation; LOCAL_WEAKP — PSI4 [beta2] documentation; MAXITER — PSI4 [beta2] documentation; NUM_AMPS_PRINT — PSI4 [beta2] documentation; PROP_ALL — PSI4 [beta2] documentation; PROP_ROOT — PSI4 [beta2] documentation; PROP_SYM — PSI4 [beta2] documentation; R_CONVERGENCE — PSI4 [beta2] documentation; RESTART — PSI4 [beta2] documentation; ROOTS_PER_IRREP — PSI4 [beta2] documentation; SEKINO — PSI4 [beta2] documentation; WFN — PSI4 [beta2] documentation; ZETA — PSI4 [beta2] documentation; ABCD — PSI4 [beta2] documentation; ANALYZE — PSI4 [beta2] documentation; CACHELEVEL — PSI4 [beta2] documentation; DIIS — PSI4 [beta2] documentation; GAUGE — PSI4 [beta2] documentation; LINEAR — PSI4 [beta2] documentation; LOCAL — PSI4 [beta2] documentation; LOCAL_CPHF_CUTOFF — PSI4 [beta2] documentation; LOCAL_CUTOFF — PSI4 [beta2] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta2] documentation; LOCAL_METHOD — PSI4 [beta2] documentation; LOCAL_PAIRDEF — PSI4 [beta2] documentation; LOCAL_WEAKP — PSI4 [beta2] documentation; MAXITER — PSI4 [beta2] documentation; NUM_AMPS_PRINT — PSI4 [beta2] documentation; OMEGA — PSI4 [beta2] documentation; PROPERTY — PSI4 [beta2] documentation; R_CONVERGENCE — PSI4 [beta2] documentation; REFERENCE — PSI4 [beta2] documentation; RESTART — PSI4 [beta2] documentation; SEKINO — PSI4 [beta2] documentation; WFN — PSI4 [beta2] documentation; AO_BASIS — PSI4 [beta2] documentation; CACHELEVEL — PSI4 [beta2] documentation; EOM_REFERENCE — PSI4 [beta2] documentation; INTS_TOLERANCE — PSI4 [beta2] documentation; KEEP_OEIFILE — PSI4 [beta2] do,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:908656,CACHE,CACHELEVEL,908656,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,"SI4 [beta2] » ; Appendices »; Keywords by Module ». CCENERGY¶; Computes coupled cluster energies. Called as part of any coupled cluster computation. General¶. ABCD¶. Type: string; Possible Values: NEW, OLD; Default: NEW. ANALYZE¶. Do ?. Type: boolean; Default: false. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Type: conv double; Default: 1e-5. CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CC_NUM_THREADS¶. Number of threads. Type: integer; Default: 1. CC_OS_SCALE¶. Type: double; Default: 1.27. CC_SS_SCALE¶. Type: double; Default: 1.13. DIIS¶. Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. LOCAL¶. Do simulate the effects of local correlation techniques?. Type: boolean; Default: false. LOCAL_CUTOFF¶. Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996). Type: double; De",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__ccenergy-1.html:1110,cache,cache,1110,psi4manual/4.0b2/autodir_options_c/module__ccenergy-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__ccenergy-1.html,2,['cache'],['cache']
Performance,SI4 [beta3] documentation; AO_BASIS — PSI4 [beta3] documentation; CACHELEVEL — PSI4 [beta3] documentation; DIIS — PSI4 [beta3] documentation; JOBTYPE — PSI4 [beta3] documentation; LOCAL — PSI4 [beta3] documentation; LOCAL_CPHF_CUTOFF — PSI4 [beta3] documentation; LOCAL_CUTOFF — PSI4 [beta3] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta3] documentation; LOCAL_METHOD — PSI4 [beta3] documentation; LOCAL_PAIRDEF — PSI4 [beta3] documentation; LOCAL_WEAKP — PSI4 [beta3] documentation; MAXITER — PSI4 [beta3] documentation; NUM_AMPS_PRINT — PSI4 [beta3] documentation; PROP_ALL — PSI4 [beta3] documentation; PROP_ROOT — PSI4 [beta3] documentation; PROP_SYM — PSI4 [beta3] documentation; R_CONVERGENCE — PSI4 [beta3] documentation; RESTART — PSI4 [beta3] documentation; ROOTS_PER_IRREP — PSI4 [beta3] documentation; SEKINO — PSI4 [beta3] documentation; WFN — PSI4 [beta3] documentation; ZETA — PSI4 [beta3] documentation; ABCD — PSI4 [beta3] documentation; ANALYZE — PSI4 [beta3] documentation; CACHELEVEL — PSI4 [beta3] documentation; DIIS — PSI4 [beta3] documentation; GAUGE — PSI4 [beta3] documentation; LINEAR — PSI4 [beta3] documentation; LOCAL — PSI4 [beta3] documentation; LOCAL_CPHF_CUTOFF — PSI4 [beta3] documentation; LOCAL_CUTOFF — PSI4 [beta3] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta3] documentation; LOCAL_METHOD — PSI4 [beta3] documentation; LOCAL_PAIRDEF — PSI4 [beta3] documentation; LOCAL_WEAKP — PSI4 [beta3] documentation; MAXITER — PSI4 [beta3] documentation; NUM_AMPS_PRINT — PSI4 [beta3] documentation; OMEGA — PSI4 [beta3] documentation; PROPERTY — PSI4 [beta3] documentation; R_CONVERGENCE — PSI4 [beta3] documentation; REFERENCE — PSI4 [beta3] documentation; RESTART — PSI4 [beta3] documentation; SEKINO — PSI4 [beta3] documentation; WFN — PSI4 [beta3] documentation; AO_BASIS — PSI4 [beta3] documentation; CACHELEVEL — PSI4 [beta3] documentation; EOM_REFERENCE — PSI4 [beta3] documentation; INTS_TOLERANCE — PSI4 [beta3] documentation; KEEP_OEIFILE — PSI4 [beta3] do,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1118103,CACHE,CACHELEVEL,1118103,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,SI4 [beta4] documentation; AO_BASIS — PSI4 [beta4] documentation; CACHELEVEL — PSI4 [beta4] documentation; DIIS — PSI4 [beta4] documentation; JOBTYPE — PSI4 [beta4] documentation; LOCAL — PSI4 [beta4] documentation; LOCAL_CPHF_CUTOFF — PSI4 [beta4] documentation; LOCAL_CUTOFF — PSI4 [beta4] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta4] documentation; LOCAL_METHOD — PSI4 [beta4] documentation; LOCAL_PAIRDEF — PSI4 [beta4] documentation; LOCAL_WEAKP — PSI4 [beta4] documentation; MAXITER — PSI4 [beta4] documentation; NUM_AMPS_PRINT — PSI4 [beta4] documentation; PROP_ALL — PSI4 [beta4] documentation; PROP_ROOT — PSI4 [beta4] documentation; PROP_SYM — PSI4 [beta4] documentation; R_CONVERGENCE — PSI4 [beta4] documentation; RESTART — PSI4 [beta4] documentation; ROOTS_PER_IRREP — PSI4 [beta4] documentation; SEKINO — PSI4 [beta4] documentation; WFN — PSI4 [beta4] documentation; ZETA — PSI4 [beta4] documentation; ABCD — PSI4 [beta4] documentation; ANALYZE — PSI4 [beta4] documentation; CACHELEVEL — PSI4 [beta4] documentation; DIIS — PSI4 [beta4] documentation; GAUGE — PSI4 [beta4] documentation; LINEAR — PSI4 [beta4] documentation; LOCAL — PSI4 [beta4] documentation; LOCAL_CPHF_CUTOFF — PSI4 [beta4] documentation; LOCAL_CUTOFF — PSI4 [beta4] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta4] documentation; LOCAL_METHOD — PSI4 [beta4] documentation; LOCAL_PAIRDEF — PSI4 [beta4] documentation; LOCAL_WEAKP — PSI4 [beta4] documentation; MAXITER — PSI4 [beta4] documentation; NUM_AMPS_PRINT — PSI4 [beta4] documentation; OMEGA — PSI4 [beta4] documentation; PROPERTY — PSI4 [beta4] documentation; R_CONVERGENCE — PSI4 [beta4] documentation; REFERENCE — PSI4 [beta4] documentation; RESTART — PSI4 [beta4] documentation; SEKINO — PSI4 [beta4] documentation; WFN — PSI4 [beta4] documentation; AO_BASIS — PSI4 [beta4] documentation; CACHELEVEL — PSI4 [beta4] documentation; EOM_REFERENCE — PSI4 [beta4] documentation; INTS_TOLERANCE — PSI4 [beta4] documentation; KEEP_OEIFILE — PSI4 [beta4] do,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1329206,CACHE,CACHELEVEL,1329206,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,"SI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP-1b; CCSDTQP-3. CCSDTQPH-1a; CCSDTQPH-1b; CCSDTQPH-3. CC2;  ;  . CC3;  ;  . CC4;  ;  . CC5;  ;  . CC6;  ;  . [1](1, 2, 3, 4, 5, 6, 7, 8) Pertubative methods not available with ROHF reference. Frozen-core approximation is also supported in the MRCC interface.; To optimize CH4 with CCSDT freezing the 1s on carbon, run:; molecule",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/mrcc-1.html:1308,perform,perform,1308,psi4manual/4.0b3/mrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/mrcc-1.html,16,"['optimiz', 'perform']","['optimization', 'perform']"
Performance,"SI4. Appendices; Keywords by Module; DFMP2. DFMP2¶; Performs density-fitted MP2 computations for RHF/UHF/ROHF reference wavefunctions. General¶. BASIS¶. Primary basis set. Type: string; Possible Values: basis string; Default: NONE. DFMP2_MEM_FACTOR¶. % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFMP2_P2_TOLERANCE¶. Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P. Type: conv double; Default: 0.0. DFMP2_P_TOLERANCE¶. Minimum error in the 2-norm of the P matrix for skeleton-core Fock matrix derivatives. Type: conv double; Default: 0.0. DF_BASIS_MP2¶. Auxiliary basis set for MP2 density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_INTS_NUM_THREADS¶. Number of threads to compute integrals with. 0 is wild card. Type: integer; Default: 0. INTS_TOLERANCE¶. Schwarz screening threshold. Mininum absolute value below which TEI are neglected. Type: conv double; Default: 0.0. MP2_OS_SCALE¶. OS Scale. Type: double; Default: 6.0. MP2_SS_SCALE¶. SS Scale. Type: double; Default: 1.0. ONEPDM¶. Do compute one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX¶. Do relax the one-particle density matrix?. Type: boolean; Default: true. Expert¶. DF_INTS_IO¶. IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. MADMP2_SLEEP¶. A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. table of contents. DFMP2; General; BASIS; DFMP2_MEM_FACTOR; DFMP2_P2_TOLERANCE; DFMP2_P_TOLERANCE; DF_BASIS_MP2; DF_INTS_NUM_THREADS; INTS_TOLERANCE; MP2_OS_SCALE; MP2_SS_SCALE; ONEPDM; OPDM_RELAX. Expert; DF_INTS_IO; MADMP2_SLEEP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Keywords by Module; DFMP2. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodir_options_c/module__dfmp2.html:1449,LOAD,LOAD,1449,psi4manual/1.8.x/autodir_options_c/module__dfmp2.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/module__dfmp2.html,1,['LOAD'],['LOAD']
Performance,"SI4. Appendices; Keywords by Module; DFMP2. DFMP2¶; Performs density-fitted MP2 computations for RHF/UHF/ROHF reference wavefunctions. General¶. BASIS¶. Primary basis set. Type: string; Possible Values: basis string; Default: NONE. DFMP2_MEM_FACTOR¶. % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFMP2_P2_TOLERANCE¶. Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P. Type: conv double; Default: 0.0. DFMP2_P_TOLERANCE¶. Minimum error in the 2-norm of the P matrix for skeleton-core Fock matrix derivatives. Type: conv double; Default: 0.0. DF_BASIS_MP2¶. Auxiliary basis set for MP2 density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_INTS_NUM_THREADS¶. Number of threads to compute integrals with. 0 is wild card. Type: integer; Default: 0. INTS_TOLERANCE¶. Schwarz screening threshold. Mininum absolute value below which TEI are neglected. Type: conv double; Default: 0.0. MP2_OS_SCALE¶. OS Scale. Type: double; Default: 6.0. MP2_SS_SCALE¶. SS Scale. Type: double; Default: 1.0. ONEPDM¶. Do compute one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX¶. Do relax the one-particle density matrix?. Type: boolean; Default: true. Expert¶. DF_INTS_IO¶. IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. MADMP2_SLEEP¶. A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. table of contents. DFMP2; General; BASIS; DFMP2_MEM_FACTOR; DFMP2_P2_TOLERANCE; DFMP2_P_TOLERANCE; DF_BASIS_MP2; DF_INTS_NUM_THREADS; INTS_TOLERANCE; MP2_OS_SCALE; MP2_SS_SCALE; ONEPDM; OPDM_RELAX. Expert; DF_INTS_IO; MADMP2_SLEEP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Appendices; Keywords by Module; DFMP2. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodir_options_c/module__dfmp2.html:1449,LOAD,LOAD,1449,psi4manual/1.9.x/autodir_options_c/module__dfmp2.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodir_options_c/module__dfmp2.html,1,['LOAD'],['LOAD']
Performance,"SI4. Psithon Functions: Invoking a Calculation. Function Intercalls¶; This topic is in transition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/intercalls-1.html:1064,Optimiz,Optimization,1064,psi4manual/1.1.0/intercalls-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/intercalls-1.html,4,"['Optimiz', 'optimiz']","['Optimization', 'optimize']"
Performance,"SI4. Psithon Functions: Invoking a Calculation. Function Intercalls¶; This topic is in transition. As of 1.0, the functionality provided by; cp() and cbs() should not be accessed directly. Instead, use the; cp kwarg and/or the extended method syntax like; 'mp3/aug-cc-pv[dt]z' to energy(), opt(), etc., respectively.; For many of the PSI4 Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). Permitted nesting of Psithon functions¶. Caller; Callee.  ; cp; db; opt; cbs; energy. Basis Set Superposition Corrections;  ; —; Y; Y; Y. Database — database(); —;  ; Y; Y; Y. Geometry Optimization — optimize() and gradient(); —; —;  ; Y; Y. Complete Basis Set; —; —; —;  ; Y. Single-Point Energy — energy(); —; —; —; —;  . The command db(opt(cbs(energy()))) is actually expressed as db(...,; db_func=opt, opt_func=cbs). The perhaps expected final argument of; cbs_func=energy is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (db_func; above can be called as just func. Several examples of intercalls; between Python functions can be found in sample input pywrap-all.; All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, e.g., db_mode and opt_mode.; Function intercalls should not be used in sow/reap mode. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .  ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/intercalls-1.html:1066,Optimiz,Optimization,1066,psi4manual/1.2.1/intercalls-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/intercalls-1.html,8,"['Optimiz', 'optimiz']","['Optimization', 'optimize']"
Performance,"SI4. Psithon Functions: Invoking a Calculation; Property. Property¶. psi4.properties(name[, properties, molecule])[source]; Function to compute various properties. Aliases; prop(). Returns; none. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present has a limited functionality.; Consult the keywords sections of other modules for further property capabilities. Name; Calls Method; Reference; Supported Properties. scf; Self-consistent field method(s); RHF/ROHF/UHF; Listed here. hf; HF Self-consistent field method(s); RHF/ROHF/UHF; Listed here. mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters. name (str) – 'ccsd' || etc.; F",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/prop-1.html:1034,optimiz,optimized,1034,psi4manual/1.4.0/prop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/prop-1.html,5,['optimiz'],['optimized']
Performance,"SI4CONDA/bin/g++; $PSI4CONDA/bin/gfortran; /usr/bin/clang++. >>> which cmake; $PSI4CONDA/bin/cmake; # if above empty, ``conda install cmake``. Create and compile plugin; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36>>> psi4 --plugin-name testplugin; -- Creating ""testplugin"" with ""basic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testplugin.so; [100%] Built target testplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in $PATH or the; conda enviroment must be activated before compilation and execution of; plugins created using this procedure. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directory contains the following files. CMakeLists.txt — CMake fil",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/plugins-1.html:4154,load,loading,4154,psi4manual/1.1.0/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/plugins-1.html,12,"['cache', 'load']","['cache', 'loading']"
Performance,"SIAN""):; molecule.fix_orientation(True); molecule.fix_com(True); molecule.update_geometry(). # Shifting the geometry so need to copy the active molecule; moleculeclone = molecule.clone(). initial_sym = moleculeclone.schoenflies_symbol(); while n <= core.get_option('OPTKING', 'GEOM_MAXITER'):; current_sym = moleculeclone.schoenflies_symbol(); if initial_sym != current_sym:; raise ValidationError(""""""Point group changed! (%s <-- %s) You should restart """"""; """"""using the last geometry in the output, after """"""; """"""carefully making sure all symmetry-dependent """"""; """"""input, such as DOCC, is correct."""""" % (current_sym, initial_sym)); kwargs['opt_iter'] = n; core.set_variable('GEOMETRY ITERATIONS', n). # Use orbitals from previous iteration as a guess; # set within loop so that can be influenced by fns to optimize (e.g., cbs); if (n > 1) and (not core.get_option('SCF', 'GUESS_PERSIST')):; core.set_local_option('SCF', 'GUESS', 'READ'). # Before computing gradient, save previous molecule and wavefunction if this is an IRC optimization; if (n > 1) and (core.get_option('OPTKING', 'OPT_TYPE') == 'IRC'):; old_thisenergy = core.variable('CURRENT ENERGY'). # Compute the gradient - preserve opt data despite core.clean calls in gradient; core.IOManager.shared_object().set_specific_retention(1, True); G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); thisenergy = core.variable('CURRENT ENERGY'). # above, used to be getting energy as last of energy list from gradient(); # thisenergy below should ultimately be testing on wfn.energy(). # Record optimization steps; # Add wavefunctions later; if return_history:; step_energies.append(thisenergy); step_coordinates.append(moleculeclone.geometry()); step_gradients.append(G.clone()). core.set_legacy_gradient(G). # opt_func = kwargs.get('opt_func', kwargs.get('func', energy)); # if opt_func.__name__ == 'complete_basis_set':; # core.IOManager.shared_object().set_specific_retention(1, True). if full_hess_every > -1:; c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html:65130,optimiz,optimization,65130,psi4manual/1.6.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html,1,['optimiz'],['optimization']
Performance,"SIZE (DETCI). H0_GUESS_SIZE (DETCI). H_BOND_CONNECT (OPTKING). Hartree-Fock. HBC6 (module), [1]. HD_AVG (DETCI). HD_OTF (DETCI). HEFF4 (PSIMRCC). HEFF_PRINT (PSIMRCC). HESS_TYPE (OMP2). HESS_UPDATE (OPTKING). HESS_UPDATE_LIMIT (OPTKING). HESS_UPDATE_LIMIT_MAX (OPTKING). HESS_UPDATE_LIMIT_SCALE (OPTKING). HESS_UPDATE_USE_LAST (OPTKING). hessian() (in module driver). HF. highest_1() (in module wrappers). HSG (module), [1]. HTBH (module), [1]. I. ICORE (DETCI). IGNORE_TAU (DCFT). input (module). INTCO_FIXED_EQ_FORCE_CONSTANT (OPTKING). INTCOS_GENERATE_EXIT (OPTKING). INTERFRAG_DIST_INV (OPTKING). INTERFRAG_HESS (OPTKING). INTERFRAG_MODE (OPTKING). INTERFRAG_STEP_LIMIT (OPTKING). INTERNAL_ROTATIONS (MCSCF). INTRAFRAG_HESS (OPTKING). INTRAFRAG_STEP_LIMIT (OPTKING). INTRAFRAG_STEP_LIMIT_MAX (OPTKING). INTRAFRAG_STEP_LIMIT_MIN (OPTKING). INTS_TOLERANCE (CCDENSITY). (CCSORT). (DCFT). (DFMP2). (LMP2). (MRCC). (SAPT). (SCF). (TRANSQT). (TRANSQT2). ip_fitting() (in module frac). IRC; . geometry optimization. IRC_DIRECTION (OPTKING). IRC_STEP_SIZE (OPTKING). IRC_STOP (OPTKING). ISTOP (DETCI). IVO (TRANSQT). J. J_FILE (TRANSQT). JOBTYPE (CCLAMBDA). (MP2). JSCH (module), [1]. K. KEEP_INTCOS (OPTKING). KEEP_J (TRANSQT). KEEP_OEIFILE (CCSORT). KEEP_PRESORT (TRANSQT). KEEP_TEIFILE (CCSORT). keywords; . C-side, setting. cbs(), setting. cp(), setting. database(), setting. energy(), setting. molecule, setting. optimize(), setting. property(), setting. kwargs_lower() (in module procutil). L. LAG_IN_FILE (TRANSQT). LAGRAN_DOUBLE (TRANSQT). LAGRAN_HALVE (TRANSQT). LAMBDA_MAXITER (DCFT). LCC2(+LMP2)TOTALENERGY. LCCSD(+LMP2)TOTALENERGY. LEVEL_SHIFT (MCSCF). (OMP2). LINEAR (CCRESPONSE). LOCAL (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). (CCSORT). (CIS). LOCAL_AMPS_PRINT_CUTOFF (CIS). LOCAL_CORE_CUTOFF (CCSORT). LOCAL_CPHF_CUTOFF (CCLAMBDA). (CCRESPONSE). (CCSORT). LOCAL_CUTOFF (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). (CCSORT). (CIS). (LMP2). LOCAL_DO_SINGLES (CCEOM). LOCAL_DOMAIN_MAG ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/genindex.html:15296,optimiz,optimization,15296,psi4manual/4.0b2/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/genindex.html,1,['optimiz'],['optimization']
Performance,SOGGA11 Exchange-Correlation Functional. sogga11-x; SOGGA11-X Hybrid Exchange-Correlation Functional. sogga11-x-d3bj. svwn; SVWN3 (RPA) LSDA Functional. t-hcth; Tau HCTH Meta-GGA XC Functional. t-hcth-d3bj. t-hcthh; Hybrid Tau HCTH Meta-GGA XC Functional. teter93; TETER93 Exchange-Correlation Functional. th-fc; TH-FC GGA Exchange-Correlation Functional. th-fcfo; TH-FCFO GGA Exchange-Correlation Functional. th-fco; TH-FCO GGA Exchange-Correlation Functional. th-fl; TH-FL GGA Exchange-Correlation Functional. th1; TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. tpss-d3bj. tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj. tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. wb97m-d3bj. wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d. wb97x-d3. wb97x-d3bj. wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). wpbe-d3bj. wpbe-d3mbj. wpbe0; PBE0 SR-XC Functional (HJS Model). x1b95; X1B95 Hyb-GGA Exchange-Correlation Functional. x3lyp; X3LYP Hyb-GGA Exchange-Correlation Functional. x3lyp-d3bj. xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj. zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Kallay’s MRCC program [manual]. mrccsd; CC through doubles. mrccsdt; CC through triples. mrccsdtq; CC through quadruples. mrccsdtqp; CC through quintuples. mrccsdtqph; CC through sextuples. mrccsd(t); CC through do,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.energy-1.html:17965,tune,tuned-cam-,17965,psi4manual/1.4.0/api/psi4.driver.energy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.energy-1.html,20,"['TUNE', 'tune']","['TUNED-CAM-', 'tuned-cam-']"
Performance,"SOGGA11 Exchange-Correlation Functional. sogga11-x; SOGGA11-X Hybrid Exchange-Correlation Functional. sogga11-x-d3bj. svwn; SVWN3 (RPA) LSDA Functional. t-hcth; Tau HCTH Meta-GGA XC Functional. t-hcth-d3bj. t-hcthh; Hybrid Tau HCTH Meta-GGA XC Functional. teter93; TETER93 Exchange-Correlation Functional. th-fc; TH-FC GGA Exchange-Correlation Functional. th-fcfo; TH-FCFO GGA Exchange-Correlation Functional. th-fco; TH-FCO GGA Exchange-Correlation Functional. th-fl; TH-FL GGA Exchange-Correlation Functional. th1; TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. tpss-d3bj. tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj. tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. wb97m-d3bj. wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d. wb97x-d3. wb97x-d3bj. wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). wpbe-d3bj. wpbe-d3mbj. wpbe0; PBE0 SR-XC Functional (HJS Model). x1b95; X1B95 Hyb-GGA Exchange-Correlation Functional. x3lyp; X3LYP Hyb-GGA Exchange-Correlation Functional. x3lyp-d3bj. xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj. zlp; ZLP GGA Exchange-Correlation Functional. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Creat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_dft_energy-1.html:10660,tune,tuned-cam-,10660,psi4manual/1.4.0/autodoc_dft_energy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_dft_energy-1.html,4,"['TUNE', 'tune']","['TUNED-CAM-', 'tuned-cam-']"
Performance,"SOGGA11 Exchange-Correlation Functional. sogga11-x; SOGGA11-X Hybrid Exchange-Correlation Functional. sogga11-x-d3bj. svwn; SVWN3 (RPA) LSDA Functional. t-hcth; Tau HCTH Meta-GGA XC Functional. t-hcth-d3bj. t-hcthh; Hybrid Tau HCTH Meta-GGA XC Functional. teter93; TETER93 Exchange-Correlation Functional. th-fc; TH-FC GGA Exchange-Correlation Functional. th-fcfo; TH-FCFO GGA Exchange-Correlation Functional. th-fco; TH-FCO GGA Exchange-Correlation Functional. th-fl; TH-FL GGA Exchange-Correlation Functional. th1; TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. tpss-d3bj. tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj. tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. wb97m-d3bj. wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d. wb97x-d3. wb97x-d3bj. wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). wpbe-d3bj. wpbe-d3mbj. wpbe0; PBE0 SR-XC Functional (HJS Model). x1b95; X1B95 Hyb-GGA Exchange-Correlation Functional. x3lyp; X3LYP Hyb-GGA Exchange-Correlation Functional. x3lyp-d3bj. xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj. zlp; ZLP GGA Exchange-Correlation Functional. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Creat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_dft_energy-1.html:10660,tune,tuned-cam-,10660,psi4manual/1.5.0/autodoc_dft_energy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_dft_energy-1.html,4,"['TUNE', 'tune']","['TUNED-CAM-', 'tuned-cam-']"
Performance,"SOGGA11 Exchange-Correlation Functional. sogga11-x; SOGGA11-X Hybrid Exchange-Correlation Functional. sogga11-x-d3bj. svwn; SVWN3 (RPA) LSDA Functional. t-hcth; Tau HCTH Meta-GGA XC Functional. t-hcth-d3bj. t-hcthh; Hybrid Tau HCTH Meta-GGA XC Functional. teter93; TETER93 Exchange-Correlation Functional. th-fc; TH-FC GGA Exchange-Correlation Functional. th-fcfo; TH-FCFO GGA Exchange-Correlation Functional. th-fco; TH-FCO GGA Exchange-Correlation Functional. th-fl; TH-FL GGA Exchange-Correlation Functional. th1; TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. tpss-d3bj. tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj. tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. wb97m-d3bj. wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d. wb97x-d3. wb97x-d3bj. wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). wpbe-d3bj. wpbe-d3mbj. wpbe0; PBE0 SR-XC Functional (HJS Model). x1b95; X1B95 Hyb-GGA Exchange-Correlation Functional. x3lyp; X3LYP Hyb-GGA Exchange-Correlation Functional. x3lyp-d3bj. xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj. zlp; ZLP GGA Exchange-Correlation Functional. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Appendices; DFT Functionals; <no title>. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_dft_energy.html:10660,tune,tuned-cam-,10660,psi4manual/1.6.x/autodoc_dft_energy.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_dft_energy.html,2,"['TUNE', 'tune']","['TUNED-CAM-', 'tuned-cam-']"
Performance,"SPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC)¶PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI)¶DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI)¶DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI)¶DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2)¶DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS)¶GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT)¶SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. MAX_MEM_BUF (SCF)¶SCF — Max memory per buf for PK algo REORDER, for debug and tuning. Type: integer; Default: 0. MAX_MOGRAD_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, DFOCC will estimate and use a v",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:158917,optimiz,optimization,158917,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,8,['optimiz'],['optimization']
Performance,"SQUARESIGNEDDEVIATION>`. .. note:: It is very easy to make a database from a collection of xyz files; using the script :source:`lib/scripts/ixyz2database.pl`.; See :ref:`sec:createDatabase` for details. .. caution:: Some features are not yet implemented. Buy a developer some coffee. - In sow/reap mode, use only global options (e.g., the local option set by ``set scf scf_type df`` will not be respected). :type name: string; :param name: ``'scf'`` || ``'sapt0'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type db_name: string; :param db_name: ``'BASIC'`` || ``'S22'`` || ``'HTBH'`` || etc. Second argument, usually unlabeled. Indicates the requested database; name, matching the name of a python file in ``psi4/lib/databases``.; Consult that directory for available databases and literature citations. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on each database; member. The default performs a single-point ``energy('name')``, while; ``optimize`` perfoms a geometry optimization on each reagent, and; ``cbs`` performs a compound single-point energy. If a nested series; of python functions is intended (see :ref:`sec:intercalls`), use; keyword ``db_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. Indicates whether the calculations required to complete the; database are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type cp: :ref:`boolean <op_py_boolean>`; :param cp: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether counterpoise correction is employed in computing; interaction energies. U",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html:24054,optimiz,optimize,24054,psi4manual/4.0b2/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html,1,['optimiz'],['optimize']
Performance,"SSCF/6-31G** energy point. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. tdscf-6; td-camb3lyp with DiskDF and method/basis specification. cubeprop; RHF orbitals and density for water. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-level-shift-uhf; SCF level shift on a UHF computation. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. cbs-parser; mtd/basis syntax examples. options1; check all variety of options parsing. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to on",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:14380,perform,performed,14380,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['perform'],['performed']
Performance,"SS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 1. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. IGNORE_TAU (DCFT); DCFT (Expert) — Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: false. INTCOS_GENERATE_EXIT (OPTKING); OPTKING — Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. INTERFRAG_DIST_INV (OPTKING); OPTKING — Do use for the stretching coordinate between fragments? Otherwise, use . Type: boolean; Default: false. INTERFRAG_HESS (OPTKING); OPTKING — Model Hessian to guess interfragment force constants. Type: string; Possible Values: DEFAULT, FISCHER_LIKE; Default: DEFAULT. INTERFRAG_MODE (OPTKING); OPTKIN",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html:57488,perform,perform,57488,psi4manual/4.0b5/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html,2,['perform'],['perform']
Performance,"SS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 1. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. IGNORE_TAU (DCFT); DCFT (Expert) — Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: false. INTCO_FIXED_EQ_FORCE_CONSTANT (OPTKING); OPTKING — In constrained optimizations, for internal coordinates with user-specified equilibrium values, this is the force constant (in au) used to apply an additional force to each coordinate. If the user is only concerned to satify the desired constraint, then the user need only ensure that this value is sufficiently large. Alternatively, the user may specify this value to apply a force of a particular magnitude, in which ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:56898,perform,perform,56898,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,2,['perform'],['perform']
Performance,"SS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. IGNORE_TAU (DCFT); DCFT (Expert) — Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: false. INDEPENDENT_J_TYPE (CPHF); CPHF — JK Independent options. Type: string; Possible Values: DIRECT_SCREENING; Default: DIRECT_SCREENING. INDEPENDENT_J_TYPE (SCF); SCF — JK Independent options. Type: string; Possible Values: DIRECT_SCREENING; Default: DIRECT_SCREENING. INTCOS_GENERATE_EXIT (OPTKING); OPTKING — Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. INTEGRAL_CUTOFF (DFOCC); DFOCC — Cutoff value for DF integrals. Type: in",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:140340,perform,perform,140340,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,4,['perform'],['perform']
Performance,"SS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. IGNORE_TAU (DCFT); DCFT (Expert) — Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: false. INDEPENDENT_J_TYPE (CPHF); CPHF — JK Independent options. Type: string; Possible Values: DIRECT_SCREENING; Default: DIRECT_SCREENING. INTCOS_GENERATE_EXIT (OPTKING); OPTKING — Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. INTEGRAL_CUTOFF (DFOCC); DFOCC — Cutoff value for DF integrals. Type: integer; Default: 9. INTEGRAL_PACKAGE (GLOBALS); GLOBALS — Integral package to use. If compiled with ERD or Simint support, change thi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:143225,perform,perform,143225,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,2,['perform'],['perform']
Performance,"SS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING); OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING); OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF); FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI); DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. IGNORE_TAU (DCFT); DCFT (Expert) — Controls whether to ignore terms containing non-idempotent contribution to OPDM or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: false. INTCOS_GENERATE_EXIT (OPTKING); OPTKING — Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. INTEGRAL_CUTOFF (DFOCC); DFOCC — Cutoff value for DF integrals. Type: integer; Default: 9. INTEGRAL_PACKAGE (GLOBALS); GLOBALS — Integral package to use. If compiled with ERD or Simint support, change this option to use them; LibInt is used otherwise. Type: string; Possible Values: ERD, LIBINT, SIMINT; Default: LIBINT. INTERFRAG_DIST_IN",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:142289,perform,perform,142289,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,2,['perform'],['perform']
Performance,"STATES¶. Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 1. Type: array; Default: No Default. AVG_WEIGHTS¶. Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. CIBLKS_PRINT¶. Do print a summary of the CI blocks?. Type: boolean; Default: false. CI_NUM_THREADS¶. Number of threads for DETCI. Type: integer; Default: 1. DETCI_FREEZE_CORE¶. Do freeze core orbitals?. Type: boolean; Default: true. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. FCI¶. Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. ICORE¶. Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. ISTOP¶. Do stop DETCI after string information is formed and before integrals are read?. Type: boolean; Default: false. MAXITER¶. Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 12. NUM_DETS_PRINT¶. Number of important determinants to print. Type: integer; Default: 20. NUM_ROOTS¶. number of CI roots to find. Type: integer; Default: 1. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. S_SQUARED¶. Do calculate the value of for eac",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__detci-1.html:1522,perform,perform,1522,psi4manual/4.0b5/autodir_options_c/module__detci-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__detci-1.html,2,['perform'],['perform']
Performance,"STATES¶. Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 1. Type: array; Default: No Default. AVG_WEIGHTS¶. Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. CIBLKS_PRINT¶. Do print a summary of the CI blocks?. Type: boolean; Default: false. CI_NUM_THREADS¶. Number of threads for DETCI. Type: integer; Default: 1. DETCI_FREEZE_CORE¶. Do freeze core orbitals?. Type: boolean; Default: true. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-8. FCI¶. Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. ICORE¶. Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. ISTOP¶. Do stop DETCI after string information is formed and before integrals are read?. Type: boolean; Default: false. MAXITER¶. Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 12. NUM_DETS_PRINT¶. Number of important determinants to print. Type: integer; Default: 20. NUM_ROOTS¶. number of CI roots to find. Type: integer; Default: 1. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. S_SQUARED¶. Do calculate the value of for eac",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__detci-1.html:1522,perform,perform,1522,psi4manual/4.0b4/autodir_options_c/module__detci-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__detci-1.html,2,['perform'],['perform']
Performance,"STROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF, EXACT; Default: NO. CFOUR_VTRAN (CFOUR); CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the \((ab \vert cd)\) integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR); CFOUR — Specifies the X-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_XF",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:83521,perform,performed,83521,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,4,['perform'],['performed']
Performance,"STROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CFOUR); CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the \((ab \vert cd)\) integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR); CFOUR — Specifies the X-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_XFORM_TOL",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:83302,perform,performed,83302,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,2,['perform'],['performed']
Performance,"STROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR); CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR); CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF; Default: NO. CFOUR_VTRAN (CFOUR); CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR); CFOUR — Specifies the X-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword . This allows field strengths to be used. Type: integer; Default: 0. CFOUR_XFORM_TOL (CFOUR); CFOUR — The tolerance for storing transformed integral",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:82976,perform,performed,82976,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['perform'],['performed']
Performance,"ST_CC3 (CCEOM)¶CCEOM — Has the same effect as “COLLAPSE_WITH_LAST” but only in CC3 computations and after the initial solution of EOM CCSD. May help efficiency, but hazardous when solving for higher roots. Type: boolean; Default: false. COMPLEX_TOLERANCE (CCEOM)¶CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC)¶DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING)¶OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC)¶PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC)¶PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC)¶PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC)¶PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC)¶PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COSX_BASIS_TOLERANCE (SCF)¶SCF (Expert) — Screening criteria for basis function values on COSX grids. Type: conv double; Default: 1.0e-10. COSX_DENSITY_TOLERANCE (SCF)¶SCF (Expert) — Screening criteria for shell-pair densities in COSX. Type: conv double; Default: 1.0e-10. COSX_INCFOCK (SCF)¶SCF (Expert) — Do allow for improved COSX screening performance by constructing the Fock matrix incrementally?. Type: boolean; Default: true. COSX_INTS_TOLERANCE (SCF)¶SCF — Screening cr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html:88270,perform,perform,88270,psi4manual/1.6.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html,1,['perform'],['perform']
Performance,"ST_CC3 (CCEOM)¶CCEOM — Has the same effect as “COLLAPSE_WITH_LAST” but only in CC3 computations and after the initial solution of EOM CCSD. May help efficiency, but hazardous when solving for higher roots. Type: boolean; Default: false. COMPLEX_TOLERANCE (CCEOM)¶CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC)¶DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING)¶OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC)¶PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC)¶PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC)¶PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC)¶PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC)¶PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COSX_BASIS_TOLERANCE (SCF)¶SCF (Expert) — Screening criteria for basis function values on COSX grids. Type: conv double; Default: 1.0e-10. COSX_DENSITY_TOLERANCE (SCF)¶SCF (Expert) — Screening criteria for shell-pair densities in COSX. Type: conv double; Default: 1.0e-10. COSX_INTS_TOLERANCE (SCF)¶SCF — Screening criteria for integrals and intermediates in COSX. Type: conv double; Default: 1.0e-11. COSX_MAXITER_FINAL (SCF)¶SCF — Controls SCF iteration behavior for the large",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:88106,perform,perform,88106,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,2,['perform'],['perform']
Performance,"ST_CC3 (CCEOM)¶CCEOM — Has the same effect as “COLLAPSE_WITH_LAST” but only in CC3 computations and after the initial solution of EOM CCSD. May help efficiency, but hazardous when solving for higher roots. Type: boolean; Default: false. COMPLEX_TOLERANCE (CCEOM)¶CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC)¶DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING)¶OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC)¶PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC)¶PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC)¶PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC)¶PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC)¶PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COSX_BASIS_TOLERANCE (SCF)¶SCF (Expert) — Screening criteria for basis function values on COSX grids. Type: conv double; Default: 1.0e-10. COSX_DENSITY_TOLERANCE (SCF)¶SCF (Expert) — Screening criteria for shell-pair densities in COSX. Type: conv double; Default: 1.0e-10. COSX_INTS_TOLERANCE (SCF)¶SCF — Screening criteria for integrals and intermediates in COSX. Type: conv double; Default: 1.0e-11. COSX_OVERLAP_FITTING (SCF)¶SCF (Expert) — Do reduce numerical COSX errors wi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html:88097,perform,perform,88097,psi4manual/1.7.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html,2,['perform'],['perform']
Performance,"ST_CC3 (CCEOM)¶CCEOM — Has the same effect as “COLLAPSE_WITH_LAST” but only in CC3 computations and after the initial solution of EOM CCSD. May help efficiency, but hazardous when solving for higher roots. Type: boolean; Default: false. COMPLEX_TOLERANCE (CCEOM)¶CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC)¶DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING)¶OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC)¶PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC)¶PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC)¶PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC)¶PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC)¶PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT)¶SAPT (Expert) — Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. COUPLING (PSIMRCC)¶PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possibl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:88586,perform,perform,88586,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,4,['perform'],['perform']
Performance,"SUBSPACE, JACOBI, NONE; Default: JACOBI. SOLVER_PRECONDITION_MAXITER (CPHF); CPHF — Solver precondtion max steps. Type: integer; Default: 1. SOLVER_PRECONDITION_STEPS (CPHF); CPHF — Solver precondition step type. Type: string; Possible Values: CONSTANT, TRIANGULAR; Default: TRIANGULAR. SOLVER_QUANTITY (CPHF); CPHF — Solver residue or eigenvector delta. Type: string; Possible Values: EIGENVECTOR, RESIDUAL; Default: RESIDUAL. SOLVER_TYPE (CPHF); CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC); DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF); SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF); SCF — Secord order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF); SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF); SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF); SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_R_START (SCF); SCF — When to start second-order SCF iterations based on gradient RMS. Type: double; Default: 1.0e-2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:208475,perform,perform,208475,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['perform'],['perform']
Performance,"S_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. EN",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:48357,optimiz,optimizations,48357,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,9,['optimiz'],['optimizations']
Performance,"Scaled Orbital-Optimized CEPA; Y; N; RHF/ROHF/UHF/RKS/UKS. cepa0; CEPA(0) (identical to Linearized CCD); Y; Y; RHF/UHF. Basic Keywords¶. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. Advanced Keywords¶. OPT_METHOD¶. The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. MO_DIIS_NUM_VECS¶. Number of vectors used in orbital DIIS. Type: integer; Default: 6. LINEQ_SOLVER¶. The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SOS_SCALE¶. MP2 Spin-opposite scaling (SOS) value. Type: doubl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/occ-1.html:8745,optimiz,optimization,8745,psi4manual/4.0b5/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/occ-1.html,2,['optimiz'],['optimization']
Performance,"Scaled Orbital-Optimized CEPA; Y; N; RHF/ROHF/UHF/RKS/UKS. cepa0; CEPA(0) (identical to Linearized CCD); Y; Y; RHF/UHF. Basic Keywords¶. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-8. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. Advanced Keywords¶. OPT_METHOD¶. The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. MO_DIIS_NUM_VECS¶. Number of vectors used in orbital DIIS. Type: integer; Default: 6. LINEQ_SOLVER¶. The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. MP2_SOS_SCALE¶. MP2 Spin-opposite scaling (SOS) value. Type: doubl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/occ-1.html:8148,optimiz,optimization,8148,psi4manual/4.0b4/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/occ-1.html,2,['optimiz'],['optimization']
Performance,"Second Order GGA Exchange-Correlation Functional. sogga_x; Second Order GGA Exchange Hole (Parameter Free). svwn; SVWN3 (RPA) LSDA Functional. s_x; Slater LSDA Exchange. vwn3rpa_c; VWN3 (RPA) LSDA Correlation. vwn3_c; VWN3 LSDA Correlation. vwn5rpa_c; VWN5 (RPA) LSDA Correlation. vwn5_c; VWN5 LSDA Correlation. dldf; Dispersionless Hybrid Meta-GGA XC Functional. dldf+d; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. dldf+d09; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. Warning; Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite d",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/opt-1.html:6715,perform,performed,6715,psi4manual/4.0b4/opt-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/opt-1.html,2,['perform'],['performed']
Performance,"Set equal to an inversion. matrix(self: psi4.core.SymmetryOperation) → List[List[float[3]][3]]¶; Return the matrix for the operation on Cartesians. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None¶; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryOperation, arg0: float) → None¶; Set equal to a clockwise rotation by theta. sigma_xy(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xy plane. sigma_xz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xz plane. sigma_yz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in yz plane. trace(self: psi4.core.SymmetryOperation) → float¶; Returns trace of transformation matrix. transform(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the transform arg2 * arg1 * arg2~. transpose(self: psi4.core.SymmetryOperation) → None¶; Performs transposition of matrix operation. unit(self: psi4.core.SymmetryOperation) → None¶; Set equal to a unit matrix. zero(self: psi4.core.SymmetryOperation) → None¶; Zero out the symmetry operation. E(self: psi4.core.SymmetryOperation) → None; Set equal to E. c2_x(self: psi4.core.SymmetryOperation) → None; Set equal to C2 about the x axis. c2_y(self: psi4.core.SymmetryOperation) → None; Set equal to C2 about the y axis. c2_z(self: psi4.core.SymmetryOperation) → None; Set equal to C2 about the z axis. i(self: psi4.core.SymmetryOperation) → None; Set equal to an inversion. matrix(self: psi4.core.SymmetryOperation) → List[List[float[3]][3]]; Return the matrix for the operation on Cartesians. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None; Set ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.symmetryoperation.html:2600,Perform,Performs,2600,psi4manual/1.3.2/api/psi4.core.symmetryoperation.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.symmetryoperation.html,1,['Perform'],['Performs']
Performance,"Set equal to an inversion. matrix(self: psi4.core.SymmetryOperation) → List[List[float[3]][3]]¶; Return the matrix for the operation on Cartesians. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None¶; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryOperation, arg0: float) → None¶; Set equal to a clockwise rotation by theta. sigma_xy(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xy plane. sigma_xz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xz plane. sigma_yz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in yz plane. trace(self: psi4.core.SymmetryOperation) → float¶; Returns trace of transformation matrix. transform(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the transform arg2 * arg1 * arg2~. transpose(self: psi4.core.SymmetryOperation) → None¶; Performs transposition of matrix operation. unit(self: psi4.core.SymmetryOperation) → None¶; Set equal to a unit matrix. zero(self: psi4.core.SymmetryOperation) → None¶; Zero out the symmetry operation. class psi4.core.TaskListComputer¶; Bases: pybind11_builtins.pybind11_object; docstring. set_title(self: psi4.core.TaskListComputer, arg0: str) → None¶; docstring. class psi4.core.ThreeCenterOverlapInt¶; Bases: pybind11_builtins.pybind11_object; Three center overlap integrals. compute_shell(self: psi4.core.ThreeCenterOverlapInt, arg0: int, arg1: int, arg2: int) → None¶; Compute the integrals of the form (a|b|c). class psi4.core.TracelessQuadrupoleInt¶; Bases: psi4.core.OneBodyAOInt; Computes traceless quadrupole integrals. basis¶; The basis set on center one. basis1¶; The basis set on center one. basis2¶; The basis set on center two. compute_shell(self: psi4.core.OneBodyAOInt, arg0: int, arg1: int) → No",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/psi4api-1.html:239296,Perform,Performs,239296,psi4manual/1.3.2/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psi4api-1.html,2,['Perform'],['Performs']
Performance,"Set equal to an inversion. matrix(self: psi4.core.SymmetryOperation) → List[List[float[3]][3]]¶; Return the matrix for the operation on Cartesians. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None¶; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryOperation, arg0: float) → None¶; Set equal to a clockwise rotation by theta. sigma_xy(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xy plane. sigma_xz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xz plane. sigma_yz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in yz plane. trace(self: psi4.core.SymmetryOperation) → float¶; Returns trace of transformation matrix. transform(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the transform arg2 * arg1 * arg2~. transpose(self: psi4.core.SymmetryOperation) → None¶; Performs transposition of matrix operation. unit(self: psi4.core.SymmetryOperation) → None¶; Set equal to a unit matrix. zero(self: psi4.core.SymmetryOperation) → None¶; Zero out the symmetry operation. table of contents. SymmetryOperation; SymmetryOperation; SymmetryOperation.E(); SymmetryOperation.c2_x(); SymmetryOperation.c2_y(); SymmetryOperation.c2_z(); SymmetryOperation.i(); SymmetryOperation.matrix(); SymmetryOperation.operate(); SymmetryOperation.rotate_n(); SymmetryOperation.rotate_theta(); SymmetryOperation.sigma_xy(); SymmetryOperation.sigma_xz(); SymmetryOperation.sigma_yz(); SymmetryOperation.trace(); SymmetryOperation.transform(); SymmetryOperation.transpose(); SymmetryOperation.unit(); SymmetryOperation.zero(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; SymmetryOperation. © Copyright 2007-2023",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html:2601,Perform,Performs,2601,psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SymmetryOperation.html,1,['Perform'],['Performs']
Performance,"Set equal to reflection in xy plane. sigma_xz(...); Set equal to reflection in xz plane. sigma_yz(...); Set equal to reflection in yz plane. trace(...); Returns trace of transformation matrix. transform(...); Performs the transform arg2 * arg1 * arg2~. transpose(...); Performs transposition of matrix operation. unit((self: psi4.core.SymmetryOperation) -> None); Set equal to a unit matrix. zero((self: psi4.core.SymmetryOperation) -> None); Zero out the symmetry operation. Methods Documentation. E(self: psi4.core.SymmetryOperation) → None¶; Set equal to E. c2_x(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the x axis. c2_y(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the y axis. c2_z(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the z axis. i(self: psi4.core.SymmetryOperation) → None¶; Set equal to an inversion. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None¶; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryOperation, arg0: float) → None¶; Set equal to a clockwise rotation by theta. sigma_xy(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xy plane. sigma_xz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xz plane. sigma_yz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in yz plane. trace(self: psi4.core.SymmetryOperation) → float¶; Returns trace of transformation matrix. transform(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the transform arg2 * arg1 * arg2~. transpose(self: psi4.core.SymmetryOperation) → None¶; Performs transposition of matrix operation. unit(self: psi4.core.SymmetryOperation) → None¶; Set equal to a unit matrix. zero(self: psi4.core.SymmetryOperation) → None¶; Zero out ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/api/psi4.core.symmetryoperation.html:1942,Perform,Performs,1942,psi4manual/1.1.0/api/psi4.core.symmetryoperation.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/api/psi4.core.symmetryoperation.html,1,['Perform'],['Performs']
Performance,Should an xyz trajectory file be kept (useful for visualization)?. Type: boolean; Default: false. SAVE_OPTIMIZATION¶. Save OptKing’s internal classes for possible restart upon error. Type: boolean; Default: false. TEST_B¶. Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B¶. Do test derivative B matrix?. Type: boolean; Default: false. WRITE_OPT_HISTORY¶. Write the full history to disk. Produces a non validated OptimizationResult. Type: boolean; Default: false. WRITE_OPT_RESULT¶. Write the optimization history / state to disc. Type: boolean; Default: false. WRITE_TRAJECTORY¶. Write Optimization Trajectory. Type: boolean; Default: false. table of contents. OPTKING; Optimization Algorithm; CARTESIAN_SYM_TOLERANCE; CONSECUTIVE_BACKSTEPS; DYNAMIC_LEVEL; ENSURE_BT_CONVERGENCE; EXT_FORCE_BEND; EXT_FORCE_CARTESIAN; EXT_FORCE_DIHEDRAL; EXT_FORCE_DISTANCE; EXT_FORCE_OOFP; FROZEN_BEND; FROZEN_CARTESIAN; FROZEN_DIHEDRAL; FROZEN_DISTANCE; FROZEN_OOFP; GEOM_MAXITER; H_UPDATE_DEN_TOL; INTERFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT_MAX; INTRAFRAG_STEP_LIMIT_MIN; IRC_DIRECTION; IRC_POINTS; IRC_STEP_SIZE; OPT_COORDINATES; OPT_TYPE; PRINT_OPT_PARAMS; RANGED_BEND; RANGED_DIHEDRAL; RANGED_DISTANCE; RANGED_OOFP; RFO_FOLLOW_ROOT; RFO_NORMALIZATION_MAX; RFO_ROOT; RSRFO_ALPHA_MAX; STEP_TYPE. Convergence Control; FLEXIBLE_G_CONVERGENCE; G_CONVERGENCE; MAX_DISP_G_CONVERGENCE; MAX_ENERGY_G_CONVERGENCE; MAX_FORCE_G_CONVERGENCE; RMS_DISP_G_CONVERGENCE; RMS_FORCE_G_CONVERGENCE. Hessian Update; CART_HESS_READ; FULL_HESS_EVERY; HESS_UPDATE; HESS_UPDATE_LIMIT; HESS_UPDATE_LIMIT_MAX; HESS_UPDATE_LIMIT_SCALE; HESS_UPDATE_USE_LAST; INTRAFRAG_HESS. Fragment/Internal Coordinate Control; ADD_AUXILIARY_BONDS; AUXILIARY_BOND_FACTOR; COVALENT_CONNECT; FRAG_MODE; FRAG_REF_ATOMS; FREEZE_INTERFRAG; FREEZE_INTRAFRAG; H_BOND_CONNECT; H_GUESS_EVERY; INTCOS_GENERATE_EXIT; INTERFRAGMENT_CONNECT; INTERFRAG_COLLINEAR_TOL; INTERFRAG_COORDS; INTERFRAG_DIST_INV; INTERFRAG_HESS; INTERFRAG,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__optking.html:10764,Optimiz,Optimization,10764,psi4manual/1.7.x/autodir_options_c/module__optking.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__optking.html,3,['Optimiz'],['Optimization']
Performance,"Source; Scratch Files and Elementary Restart; ~/.psi4rc File; Threading; PBS job file; Command Line Options; Environment Variables. A Psi4 Tutorial; Basic Input File Structure; Sample Input Files; Running a Basic Hartree–Fock Calculation; Geometry Optimization and Vibrational Frequency Analysis; Analysis of Intermolecular Interactions; Potential Surface Scans and Counterpoise Correction Made Easy with Psithon. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. Theoretical Methods: SCF to FCI; Notes on Options; Alternate Implementations; HF: Hartree–Fock Theory; DFT: Density Functional Theory; DCFT: Density Cumulant Functional Theory; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; CC: Coupled Cluster Methods; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; PSIMRCC Implementation of Mk-MRCC Theory; CI: Configuration Interaction; SAPT: Symmetry-Adapted Perturbation Theory; ADC: Ab Initio Polarization Propagator; Scalar relativistic Hamiltonians; Geometry Optimization; oeprop() Evaluation of One-Electron Properties; Vibrational and Thermochemical Analysis. Interfaces: Enhancing Psi4 Capabilities; Interface to CFOUR by J. Stanton and J. Gauss; Interface to CheMPS2 by S. Wouters; Interface to DFTD3 by S. Grimme; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to programs through FCHK files, fchk(); Interface to GDMA Distributed Multipole Analysis by A. J. Stone, gdma(); Interface to LIBEFP by I. Kaliman; Interface to PCMSolver; Interface to Molden, molden(); Interface to MRCC by M. Kállay. Psithon Functions: Invoking a Calculation; Notes on Options; Single-Point Energy, energy(); Property; Counterpoise Correct; Geometry Optimization, optimize() and gradient(); Ha",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/contents.html:1319,Optimiz,Optimized,1319,psi4manual/1.0.0/contents.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/contents.html,4,['Optimiz'],"['Optimization', 'Optimized']"
Performance,"Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as v",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:48397,optimiz,optimizations,48397,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,18,['optimiz'],"['optimizations', 'optimizer']"
Performance,"Summary. name; The name of the Vector. np; View with single irrep. nph; View with irreps. shape; Shape of the Psi4 data object. Methods Summary. add(*args, **kwargs); Overloaded function. array_interface(self). axpby(self, a, b, other); Adds to this vector scaled by b another vector scaled by a; self <- a * other + b * self. axpy(self, a, other); Adds to this vector (unscaled) another vector scaled by a; self <- a * other + self. clone(self); Clone the vector. copy(self, arg0); Copy another vector into this. dim(self[, h]); Returns the dimensions of the vector per irrep h. dimpi(self); Returns the Dimension object. from_array([name, dim1, dim2]); Converts a NumPy array or list of NumPy arrays into a PSI4 Matrix or Vector (irrepped if list). from_list(x). from_serial(); Converts serialized data to the correct Psi4 data type. get(*args, **kwargs); Overloaded function. get_block(self, slice); Get a vector block. init(self, arg0); Reallocate the data of the Vector. load(self, psio, file); Load the vector from disk. nirrep(self); Returns the number of irreps. np_read([prefix]); Reads the data from a NumPy compressed or uncompressed file using numpy.load(). np_write([filename, prefix]); Writes the irrepped matrix to a NumPy uncompressed file using numpy.savez(). print_out(self); Prints the vector to the output file. save(self, psio, file); Save the vector to disk. scale(self, sc); Scales the elements of a vector by sc. set(*args, **kwargs); Overloaded function. set_block(self, slice, block); Set a vector block. to_array([copy, dense]); Converts a PSI4 Matrix or Vector to a NumPy array. to_serial(); Converts an object with a .nph accessor to a serialized dictionary. vector_dot(self, other); Take the dot product of two vectors. zero(self); Zeros the vector. Attributes Documentation. name¶; The name of the Vector. Used in printing. np¶; View with single irrep. nph¶; View with irreps. shape¶; Shape of the Psi4 data object. Methods Documentation. add(*args, **kwargs)¶; Overload",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html:1209,load,load,1209,psi4manual/1.8.x/api/psi4.core.Vector.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html,4,"['Load', 'load']","['Load', 'load']"
Performance,"T (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DOMAIN_PRINT (CCENERGY); CCENERGY — Do print the domains?. Type: boolean; Default: false. DOMAIN_PRINT_EXIT (CCENERGY); CCENERGY — Do exit after printing the domains?. Type: boolean; Default: false. DOMAINS (CCENERGY); CCENERGY —. Type: array; Default: No Default. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Con",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html:36121,perform,perform,36121,psi4manual/4.0b5/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html,4,"['optimiz', 'perform']","['optimizations', 'perform']"
Performance,T orbitals.; In order to use ROHF orbitals we can simply use “reference rohf” option. For DFT orbitals one should use “reference uks” and “dft_functional b3lyp” options. Of; course users can use any DFT functional available in Psi4. Methods¶; The orbital-optimized MPn and OLCCD methods currently supported in; Psi4 are outlined in Table Orbital-Optimzed OCC/DFOCC; Methods. The following methods are available; and can be controlled through OCC (conventional integrals CONV); and DFOCC (density-fitted DF and Cholesky-decomposed CD); keywords. Switching between the integrals treatments is controlled; through ‘type select’ values; see rightmost Table column. Orbital-Optimized MP and LCCD capabilities of OCC/DFOCC modules¶. name; calls method; Energy; Gradient; type select. omp2; Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP2_TYPE CONV. Density-Fitted Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP2_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —; MP2_TYPE CD. omp3; Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE CONV. Density-Fitted Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —; MP_TYPE CD. omp2.5; Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE CONV. Density-Fitted Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; —; MP_TYPE CD. olccd; Orbital-Optimized Linear CCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE CONV. Density-Fitted Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE DF. Cholesky-Decomposed Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; —; CC_TYPE CD. Spin-Component-Scaled Orbital-Optimized MP capabilities of OCC/DFOCC modules¶. name; calls method; Energy; Gradient. scs-omp3; Spin-Component Scaled Orbital-O,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/occ-1.html:6958,Optimiz,Optimized,6958,psi4manual/1.0.0/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/occ-1.html,2,['Optimiz'],['Optimized']
Performance,"T). OEI_B_FILE (TRANSQT). OEI_FILE (TRANSQT). OFFDIAGONAL_CCSD_T (PSIMRCC). OMEGA (CCRESPONSE). (CCSORT). (RESPONSE). OMEGA_BRACKET_ALPHA (PLUGIN_OMEGA), [1]. OMEGA_CONVERGE (PLUGIN_OMEGA), [1]. OMEGA_GUESS (PLUGIN_OMEGA), [1]. OMEGA_GUESS_A (PLUGIN_OMEGA), [1]. OMEGA_GUESS_B (PLUGIN_OMEGA), [1]. OMEGA_GUESS_INTERPOLATE (PLUGIN_OMEGA), [1]. OMEGA_MAXITER (PLUGIN_OMEGA), [1]. OMEGA_PROCEDURE (PLUGIN_OMEGA), [1]. OMEGA_ROOT_ALGORITHM (PLUGIN_OMEGA), [1]. OMP2_ORBS_PRINT (OMP2). OMP_N_THREAD (CPHF). (JK), [1]. OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4]. ONE-ELECTRONENERGY. ONEPDM (CCDENSITY). OPDM (DETCI). (MP2). OPDM_AVG (DETCI). OPDM_IN_FILE (TRANSQT). OPDM_KE (DETCI). OPDM_OUT_FILE (TRANSQT). OPDM_PRINT (DETCI). OPDM_RELAX (CCDENSITY). (MP2). opt(); . see optimize(); . OPT_METHOD (OMP2). OPT_TYPE (OPTKING). optimization; . see geometry optimization; . optimize(); . setting keywords. optimize() (in module driver). ORTH_TYPE (OMP2). output; . SAPT. cbs(). database(). geometry optimization. P. PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parse_arbitrary_order() (in module driver). parse_cotton_irreps() (in module driver). PATH, [1]. PERTURB_CBS (PSIMRCC). PERTURB_CBS_COUPLING (PSIMRCC). PERTURB_H (SCF). PERTURB_MAGNITUDE (DETCI). (SCF). PERTURB_WITH (SCF). physconst (module). physical constants. PITZER (TRANSQT). plugin; . plugin_aointegrals. plugin_backtrans. plugin_ccsd_serial. plugin_ccsort. plugin_cepa. plugin_dfadc. plugin_libfock. plugin_mointegrals. plugin_mp2. plugin_omega. plugin_rqchf. plugin_sointegrals. plugin_test_matrix. plugin_testparse. plugin_testparse.__init__ (module). plugins; . available. POINTS (FINDIF). POLE_MAX (PLUGIN_DFADC), [1]. POLE_MAXITER (ADC). populateExtern() (Diffuse method). (QMMM method). PR (ADC). PRECONDITIONER (DETCI). PRESORT_FILE (TRANSQT). PRINT (CPHF). (GLOBALS). (JK), [1]. (PLUGIN_AOINTEGRALS), [1]. (PLUGIN_BACKTRANS), [1]. (PLUGIN_CCSORT), [1]. (PLUGIN_DFADC), [1]. (PLUGIN_FOCK), [1]. (PLUGIN_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/genindex.html:20339,optimiz,optimization,20339,psi4manual/4.0b2/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/genindex.html,1,['optimiz'],['optimization']
Performance,"T); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (STABILITY); STABILITY —. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CACHETYPE (CPHF); CPHF — The criterion used to retain/release cached data. Type: string; Possible Values: LRU, LOW; Default: LRU. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING); OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CAS_FILES_WRIT",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html:10657,cache,cache,10657,psi4manual/4.0b5/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html,2,['cache'],['cache']
Performance,"T); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (STABILITY); STABILITY —. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING); OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CAS_FILES_WRITE (CLAG); CLAG — Do write the OEI, TEI, OPDM, TPDM, and Lagrangian files in canonical form, Pitzer order?. Type: boolean; Default:",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:10756,cache,cache,10756,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,2,['cache'],['cache']
Performance,"T)¶. SAPT_DFT_FUNCTIONAL¶. Underlying funcitonal to use for SAPT(DFT). Type: string; Default: PBE0. SAPT_DFT_DO_HYBRID¶. Enables the hybrid xc kernel in dispersion?. Type: boolean; Default: true. SAPT_DFT_EXCH_DISP_FIXED_SCALE¶. Exch-disp scaling factor for FIXED scheme for SAPT_DFT_EXCH_DISP_SCALE_SCHEME Default value of 0.770 suggested in Y. Xie, D. G. A. Smith and C. D. Sherrill, 2022 (submitted). Previous to Nov 2022, default value was 0.686 suggested by Hesselmann and Korona, J. Chem. Phys. 141, 094107 (2014). Type: double; Default: 0.770. SAPT_DFT_MP2_DISP_ALG¶. Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_QUIET¶. Interior option to clean up printing. Type: boolean; Default: false. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies for closed-shell systems; only. Publications resulting from the use of the higher-order SAPT code; should cite the following:; [Hohenstein:2010:014101].; For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the m",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/sapt.html:27221,perform,perform,27221,psi4manual/master/sapt.html,https://psicode.org,https://psicode.org/psi4manual/master/sapt.html,4,['perform'],['perform']
Performance,"T)¶SAPT (Expert) — For SAPT2+3, compute the non-approximated third-order exchange-induction term. Type: boolean; Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-induction term. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_LINK (SCF)¶SCF — Perform the linear scaling exchange (LinK) algorithm, as described in [Ochsenfeld:1998:1663]. Only applies to Direct SCF. Type: boolean; Default: false. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbital",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html:116897,perform,perform,116897,psi4manual/1.6.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html,2,"['optimiz', 'perform']","['optimizations', 'perform']"
Performance,"T2+(CCD)DMP2 EXCH ENERGY¶. SAPT2+(CCD)DMP2 IND ENERGY¶. SAPT2+(3)(CCD)DMP2 DISP ENERGY¶. SAPT2+(3)(CCD)DMP2 ELST ENERGY¶. SAPT2+(3)(CCD)DMP2 EXCH ENERGY¶. SAPT2+(3)(CCD)DMP2 IND ENERGY¶. SAPT2+3(CCD)DMP2 DISP ENERGY¶. SAPT2+3(CCD)DMP2 ELST ENERGY¶. SAPT2+3(CCD)DMP2 EXCH ENERGY¶. SAPT2+3(CCD)DMP2 IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [Eh] for the; given SAPT level of theory that incorporates MP2 induction correction.; The sum of these four components yields the SAPT Level TOTAL ENERGY. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ENERGY¶. SAPT2+3DMP2 TOTAL ENERGY¶. SAPT2+(CCD)DMP2 TOTAL ENERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [Eh] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF ITERATIONS¶. ADC ITERATIONS¶. CCSD ITERATIONS¶. OPTIMIZATION ITERATIONS¶; Number of iterations [] in the named iterative method or optimization procedure. SCF DIPOLE¶; Dipole array [e a0] for the SCF stage, (3,). SCF DIPOLE X¶. SCF DIPOLE Y¶. SCF DIPOLE Z¶; The three components of the SCF dipole [Debye].; Deprecated in favor of SCF DIPOLE. SCF QUADRUPOLE¶; Redundant quadrupole array [e a0^2] for the SCF stage, (3, 3). SCF QUADRUPOLE XX¶. SCF QUADRUPOLE XY¶. SCF QUADRUPOLE XZ¶. SCF QUADRUPOLE YY¶. SCF QUADRUPOLE YZ¶. SCF QUADRUPOLE ZZ¶; The six components of the SCF quadrupole [Debye Ang].; Deprecated in favor of SCF QUADRUPOLE. SCF TOTAL ENERGY¶; The total electronic energy [Eh] of the SCF stage of the calculation.; The method CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding method TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html:42215,OPTIMIZ,OPTIMIZATION,42215,psi4manual/1.4.0/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html,8,"['OPTIMIZ', 'optimiz']","['OPTIMIZATION', 'optimization']"
Performance,"T2+(CCD)DMP2 EXCH ENERGY¶. SAPT2+(CCD)DMP2 IND ENERGY¶. SAPT2+(3)(CCD)DMP2 DISP ENERGY¶. SAPT2+(3)(CCD)DMP2 ELST ENERGY¶. SAPT2+(3)(CCD)DMP2 EXCH ENERGY¶. SAPT2+(3)(CCD)DMP2 IND ENERGY¶. SAPT2+3(CCD)DMP2 DISP ENERGY¶. SAPT2+3(CCD)DMP2 ELST ENERGY¶. SAPT2+3(CCD)DMP2 EXCH ENERGY¶. SAPT2+3(CCD)DMP2 IND ENERGY¶; Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [Eh] for the; given SAPT level of theory that incorporates MP2 induction correction.; The sum of these four components yields the SAPT Level TOTAL ENERGY. SAPT2+DMP2 TOTAL ENERGY¶. SAPT2+(3)DMP2 TOTAL ENERGY¶. SAPT2+3DMP2 TOTAL ENERGY¶. SAPT2+(CCD)DMP2 TOTAL ENERGY¶. SAPT2+(3)(CCD)DMP2 TOTAL ENERGY¶. SAPT2+3(CCD)DMP2 TOTAL ENERGY¶; The total electronic interaction energy [Eh] for the labeled SAPT level; of theory that incorporates MP2 induction correction. SCF ITERATIONS¶. ADC ITERATIONS¶. CCSD ITERATIONS¶. OPTIMIZATION ITERATIONS¶; Number of iterations [] in the named iterative method or optimization procedure. SCF DIPOLE¶; Dipole array [e a0] for the SCF stage, (3,). SCF QUADRUPOLE¶; Redundant quadrupole array [e a0^2] for the SCF stage, (3, 3). SCF TOTAL ENERGY¶; The total electronic energy [Eh] of the SCF stage of the calculation.; The method CORRELATION ENERGY variables from subsequent stages of a; calculation are often the corresponding method TOTAL ENERGY; variables less this quantity. Constructed from Eq. (4),; where this quantity is \(E_{\text{SCF}}\). \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}Unless the method includes a dispersion correction, this quantity is; equal to HF TOTAL ENERGY (for HF) or; DFT FUNCTIONAL TOTAL ENERGY (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to DFT TOTAL ENERGY. SCF TOTAL GRADIENT¶; The total electronic gradient [E_h/a0] of the SCF stage of the calculation, ({nat}, 3).",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/glossary_psivariables.html:49733,OPTIMIZ,OPTIMIZATION,49733,psi4manual/1.6.x/glossary_psivariables.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/glossary_psivariables.html,2,"['OPTIMIZ', 'optimiz']","['OPTIMIZATION', 'optimization']"
Performance,TAL ENERGY¶. OLCCD CORRELATION ENERGY¶; The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. OLCCD REFERENCE CORRECTION ENERGY¶; The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. OMP2 REFERENCE CORRECTION ENERGY¶; The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. OMP2.5 TOTAL ENERGY¶. OMP2.5 CORRELATION ENERGY¶; The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. OMP2.5 REFERENCE CORRECTION ENERGY¶; The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. OMP3 REFERENCE CORRECTION ENERGY¶; The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. OREMP2 TOTAL ENERGY¶. OREMP2 CORRELATION ENERGY¶; The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree Møller–Plesset; hybrid perturbation theory level. OREMP2 REFERENCE CORRECTION ENERGY¶; The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; Møller–Plesset hybrid perturbation theory level. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [E_h] to the total SCF energy.,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/glossary_psivariables.html:43229,optimiz,optimized,43229,psi4manual/master/glossary_psivariables.html,https://psicode.org,https://psicode.org/psi4manual/master/glossary_psivariables.html,4,['optimiz'],['optimized']
Performance,"TATION_RANGE (CCEOM)¶CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF)¶CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF)¶SCF — An ExternalPotential (built by Python or nullptr/None). Type: boolean; Default: false. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS)¶GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code does NOT help you out in any way!. Type: boolean; Default: false. FAIL_ON_MAXITER (SCF)¶SCF — Fail if we reach maxiter without converging?. Type: boolean; Default: true. FAVG (MCSCF)¶MCSCF — Do use the average Fock matrix during the SCF optimization?. Type: boolean; Default: false. FAVG_CCSD_T (PSIMRCC)¶PSIMRCC — Do use the averaged Fock matrix over all references in (T) computations?. Type: boolean; Default: false. FAVG_START (MCSCF)¶MCSCF — Iteration at which to begin using the averaged Fock matrix. Type: integer; Default: 5. FCI (DETCI)¶DETCI — Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FCI_STRINGS (DETCI)¶DETCI (Expert) — Do store strings specifically for FCI? (Defaults to TRUE for FCI.). Type: boolean; Default: false. FD_PROJECT (FINDIF)¶FINDIF — Do discount rotational degrees of freedom in a finite difference frequency calculation. Turned off at non-stationary geometries and in the presence of external perturbations. Type: boolean; Default: true. FILTER_GUESS (DETCI)¶DETCI (Expert) — Do invoke the FILTER_GUESS options that are used to filter out some trial vectors which may not have the appropriate phase convention between two determina",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:124734,optimiz,optimization,124734,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimization']
Performance,"TCI — Do average the OPDM over several roots in order to obtain a state-average one-particle density matrix? This density matrix can be diagonalized to obtain the CI natural orbitals. Type: boolean; Default: false. OPDM_IN_FILE (TRANSQT); TRANSQT — MO-basis one-particle density matrix file. Type: integer; Default: PSIF_MO_OPDM. OPDM_KE (DETCI); DETCI (Expert) — Do compute the kinetic energy contribution from the correlated part of the one-particle density matrix?. Type: boolean; Default: false. OPDM_OUT_FILE (TRANSQT); TRANSQT — AO-basis one-particle density matrix file. Type: integer; Default: PSIF_AO_OPDM. OPDM_PRINT (DETCI); DETCI — Do print the one-particle density matrix for each root?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (MP2); MP2 — Do add relaxation terms to the one particle density matrix, for properties?. Type: boolean; Default: false. OPT_METHOD (OMP2); OMP2 — The optimization algorithm. Type: string; Possible Values: MSD, DIIS; Default: MSD. OPT_METHOD (OMP3); OMP3 — The optimization algorithm. Type: string; Possible Values: MSD, DIIS; Default: MSD. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORTH_TYPE (OMP2); OMP2 — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. ORTH_TYPE (OMP3); OMP3 — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. P (THERMO); THERMO — Pressure in Pascal for thermodynamic analysis. Type: double; Default: 101325. PAIR_ENERGIES_PRINT (CCENERGY); CCENERGY — Do print MP2 and CCSD pair energies for RHF references?. Type: boolean; Default: false. PARALLEL (SCF); SCF (Expert) — Do run in parallel?. Type: boolean; Default: false. PERTURB_CBS (PSIMRCC); PSIMRCC (Expert) — Do compute the perturbative corrections for bas",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:88514,optimiz,optimization,88514,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimization']
Performance,"TCI). NUM_ROOTS (DETCI). NUM_VECS_PRINT (STABILITY). NUM_VECS_WRITE (DETCI). O. OCC_TOLERANCE (SAPT). OEI_A_FILE (TRANSQT). OEI_B_FILE (TRANSQT). OEI_FILE (TRANSQT). OFFDIAGONAL_CCSD_T (PSIMRCC). OMEGA (CCRESPONSE). (CCSORT). (RESPONSE). OMEGA_BRACKET_ALPHA (PLUGIN_OMEGA), [1]. OMEGA_CONVERGE (PLUGIN_OMEGA), [1]. OMEGA_GUESS (PLUGIN_OMEGA), [1]. OMEGA_GUESS_A (PLUGIN_OMEGA), [1]. OMEGA_GUESS_B (PLUGIN_OMEGA), [1]. OMEGA_GUESS_INTERPOLATE (PLUGIN_OMEGA), [1]. OMEGA_MAXITER (PLUGIN_OMEGA), [1]. OMEGA_PROCEDURE (PLUGIN_OMEGA), [1]. OMEGA_ROOT_ALGORITHM (PLUGIN_OMEGA), [1]. OMP2_ORBS_PRINT (OMP2). OMP_N_THREAD (CPHF). (JK), [1]. OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4]. ONE-ELECTRONENERGY. ONEPDM (CCDENSITY). OPDM (DETCI). (MP2). OPDM_AVG (DETCI). OPDM_IN_FILE (TRANSQT). OPDM_KE (DETCI). OPDM_OUT_FILE (TRANSQT). OPDM_PRINT (DETCI). OPDM_RELAX (CCDENSITY). (MP2). opt(); . see optimize(); . OPT_METHOD (OMP2). OPT_TYPE (OPTKING). optimization; . see geometry optimization; . optimize(); . setting keywords. optimize() (in module driver). ORTH_TYPE (OMP2). output; . SAPT. cbs(). database(). geometry optimization. P. PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parse_arbitrary_order() (in module driver). parse_cotton_irreps() (in module driver). PATH, [1]. PERTURB_CBS (PSIMRCC). PERTURB_CBS_COUPLING (PSIMRCC). PERTURB_H (SCF). PERTURB_MAGNITUDE (DETCI). (SCF). PERTURB_WITH (SCF). physconst (module). physical constants. PITZER (TRANSQT). plugin; . plugin_aointegrals. plugin_backtrans. plugin_ccsd_serial. plugin_ccsort. plugin_cepa. plugin_dfadc. plugin_libfock. plugin_mointegrals. plugin_mp2. plugin_omega. plugin_rqchf. plugin_sointegrals. plugin_test_matrix. plugin_testparse. plugin_testparse.__init__ (module). plugins; . available. POINTS (FINDIF). POLE_MAX (PLUGIN_DFADC), [1]. POLE_MAXITER (ADC). populateExtern() (Diffuse method). (QMMM method). PR (ADC). PRECONDITIONER (DETCI). PRESORT_FILE (TRANSQT). PRINT (CPHF). (GLOBALS). (JK), [1]. (P",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/genindex.html:20214,optimiz,optimize,20214,psi4manual/4.0b2/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/genindex.html,1,['optimiz'],['optimize']
Performance,"TD-fctl ROOT 0 -> ROOT m EXCITATION ENERGY - h SYMMETRY. TD-fctl ROOT 0 -> ROOT m OSCILLATOR STRENGTH (LEN) - h SYMMETRY. (VEL). TD-fctl ROOT 0 -> ROOT m ROTATORY STRENGTH (LEN) - h SYMMETRY. (VEL). TD-fctl ROOT n TOTAL ENERGY - h SYMMETRY. TDA. TDDFT. TDDFT ROOT 0 -> ROOT m EXCITATION ENERGY - h SYMMETRY. TDDFT ROOT n TOTAL ENERGY - h SYMMETRY. TDM (DETCI). TDSCF. theory. tdscf() in module psi4.driver. TDSCF_COEFF_CUTOFF (SCF). TDSCF_GUESS (SCF). TDSCF_MAXITER (SCF). TDSCF_PRINT (SCF). TDSCF_R_CONVERGENCE (SCF). TDSCF_STATES (SCF). TDSCF_TDA (SCF). TDSCF_TDM_PRINT (SCF). TDSCF_TRIPLETS (SCF). TDSCFConvergenceError. temp_circular_import_blocker() in module psi4.driver. TEST_B (OPTKING). TEST_DERIVATIVE_B (OPTKING). test_functional() psi4.core.SuperFunctional method. TestComparisonError. The total electronic gradient [E_h/a0] of the MP2 level of theory, ({nat}, 3). theory. ; ADC. cbs(), [1], [2]. CC. CI. DCT. DF-MP2. DFT. DLPNO-MP2. FISAPT. MCSCF. OEProp. OLCCD. OMP2. OMP3. Orbital-Optimized Methods. SAPT. SCF. TDSCF. THERMAL ENERGY. THERMAL ENERGY CORRECTION. thermo() in module psi4.driver.qcdb.vib. THETA_POINTS (SCF). THICKNESS (SCF). threading, [1]. THREE_PARTICLE (DCT). ThreeCenterOverlapInt class in psi4.core. TIKHONOW_MAX (PSIMRCC). TIKHONOW_OMEGA (DCT). (PSIMRCC). TIKHONOW_TRIPLES (PSIMRCC). TILE_SZ (SCF). timer_off() in module psi4.core. timer_on() in module psi4.core. to_array() psi4.core.Matrix method. psi4.core.Vector method. to_arrays() psi4.core.Molecule method. to_dict() psi4.core.Molecule method. to_file() psi4.core.CCWavefunction method. psi4.core.CIWavefunction method. psi4.core.CUHF method. psi4.core.DFEP2Wavefunction method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. psi4.core.Wavefunction method. to_schema() psi4.core.Molecule method. to_serial() psi4.core.Matrix method. psi4.core.Vector method. to_string() psi4.core.Molecule method. to_tuple() psi4.core.Dimension method. tocclean() psi4.core.IO method. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/genindex-1.html:144109,Optimiz,Optimized,144109,psi4manual/1.5.0/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/genindex-1.html,2,['Optimiz'],['Optimized']
Performance,TER; SAD_PRINT; SAD_SCF_TYPE; SAD_SPIN_AVERAGE; SAPT; SAVE_JK; SAVE_UHF_NOS; SCF_MEM_SAFETY_FACTOR; SCF_PROPERTIES; SOSCF; SOSCF_CONV; SOSCF_MAX_ITER; SOSCF_MIN_ITER; SOSCF_PRINT; SOSCF_START_CONVERGENCE; STABILITY_ANALYSIS; TDSCF_COEFF_CUTOFF; TDSCF_GUESS; TDSCF_MAXITER; TDSCF_PRINT; TDSCF_R_CONVERGENCE; TDSCF_STATES; TDSCF_TDA; TDSCF_TDM_PRINT; TDSCF_TRIPLETS; THETA_POINTS; THICKNESS; TILE_SZ; UHF_NOONS; WCOMBINE; WFN; P; ROTATIONAL_SYMMETRY_NUMBER; T; CACHELEVEL; CUTOFF_AMPS_PRINT; GAUGE; KIND; MAX_NUM_VECS; MAXITER; MEMORY; NEWTON_CONVERGENCE; NORM_TOLERANCE; NUM_AMPS_PRINT; NUM_CORE_ORBITALS; NUM_GUESSES; POLE_MAXITER; PR; R_CONVERGENCE; REFERENCE; ROOTS_PER_IRREP; SEM_MAXITER; AEL; AO_BASIS; CACHELEVEL; DEBUG; GAUGE; INTS_TOLERANCE; ONEPDM; ONEPDM_GRID_CUTOFF; ONEPDM_GRID_DUMP; ONEPDM_GRID_STEPSIZE; OPDM_RELAX; PROP_ALL; PROP_ROOT; PROP_SYM; REFERENCE; ROOTS_PER_IRREP; WFN; WRITE_NOS; XI; XI_CONNECT; ZETA; ABCD; ANALYZE; AO_BASIS; BCCD_MAXITER; BRUECKNER_ORBS_R_CONVERGENCE; CACHELEVEL; CACHETYPE; CC_NUM_THREADS; CC_OS_SCALE; CC_SS_SCALE; DIIS; E_CONVERGENCE; FORCE_RESTART; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; MP2_AMPS_PRINT; MP2_OS_SCALE; MP2_SS_SCALE; NEW_TRIPLES; NUM_AMPS_PRINT; PAIR_ENERGIES_PRINT; PROPERTY; R_CONVERGENCE; REFERENCE; RESTART; SCS_CCSD; SCS_MP2; SCSN_MP2; SEMICANONICAL; SPINADAPT_ENERGIES; T2_COUPLED; T3_WS_INCORE; WFN; ABCD; CACHELEVEL; CACHETYPE; CC_NUM_THREADS; CC3_FOLLOW_ROOT; COLLAPSE_WITH_LAST; COLLAPSE_WITH_LAST_CC3; COMPLEX_TOLERANCE; E_CONVERGENCE; EOM_GUESS; EOM_REFERENCE; EXCITATION_RANGE; FULL_MATRIX; LOCAL; LOCAL_CUTOFF; LOCAL_DO_SINGLES; LOCAL_FILTER_SINGLES; LOCAL_GHOST; LOCAL_METHOD; LOCAL_PRECONDITIONER; LOCAL_WEAKP; MAXITER; NEW_TRIPLES; NUM_AMPS_PRINT; OVERLAP_CHECK; PROP_ROOT; PROP_SYM; R_CONVERGENCE; REFERENCE; RESTART_EOM_CC3; RHF_TRIPLETS; ROOTS_PER_IRREP; SCHMIDT_ADD_RESIDUAL_TOLERANCE; SEMICANONICAL; SINGLES_PRINT; SS_E_CONVERGENCE; SS_R_CONVERGENCE; SS_SKIP_DIAG; ,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:571695,CACHE,CACHELEVEL,571695,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,"TERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently Quasy Newton-Raphson algorithm avaliable with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC); OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCFT); DCFT ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:177444,optimiz,optimize,177444,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimize']
Performance,"TERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC); OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCFT); DCFT ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:176951,optimiz,optimize,176951,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,4,['optimiz'],['optimize']
Performance,"TESIAN, BOTH, CUSTOM; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_RESTART (OPTKING)¶OPTKING — Restart the optimization from optking’s written history. Type: double; Default: 0. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC)¶OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:191223,optimiz,optimize,191223,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,1,['optimiz'],['optimize']
Performance,"THREADS, [1], [2], [3], [4], [5], [6], [7], [8]. ONE-ELECTRONENERGY. one_electron_integrals() psi4.core.MintsHelper method, [1], [2]. OneBodyAOInt class in psi4.core, [1]. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DETCI). opdm() psi4.core.CIWavefunction method, [1], [2]. OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method, [1], [2]. open_check() psi4.core.IO method, [1], [2]. operate() psi4.core.SymmetryOperation method, [1], [2]. opt(). . see optimize(). opt() in module psi4.driver. opt_clean() in module psi4.core, [1]. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_TYPE (OPTKING). optimize(). ; setting keywords. optimize() in module psi4. in module psi4.driver. optking() in module psi4.core, [1]. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCFT). OrbitalSpace class in psi4.core, [1]. origin psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute, [1]. psi4.core.ElectrostaticInt attribute, [1]. psi4.core.KineticInt attribute, [1]. psi4.core.MultipoleInt attribute, [1]. psi4.core.NablaInt attribute, [1]. psi4.core.OneBodyAOInt attribute, [1], [2]. psi4.core.OverlapInt attribute, [1]. psi4.core.PotentialInt attribute, [1]. psi4.core.PseudospectralInt attribute, [1]. psi4.core.QuadrupoleInt attribute, [1]. psi4.core.TracelessQuadrupoleInt attribute, [1]. original_coef() psi4.core.GaussianShell method, [1], [2]. ORTH_TYPE (DFOCC). (OCC). outfile_name() in module psi4.core, [1]. output. ; SAPT. cbs(). database(). geometry optimization. vibrational analysis. overlap_3c() psi4.core.IntegralFactory method, [1], [2]. OVERLAP_CHECK (CCEOM). OverlapInt class in psi4.c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/genindex-1.html:71977,Optimiz,Optimized,71977,psi4manual/1.1.0/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/genindex-1.html,2,['Optimiz'],['Optimized']
Performance,"TIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the and integrals are held in core; (=5) and and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR); CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR); CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR); CFOUR — Controls amount of debug printing performed by xjoda. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV (CFOUR); CFOUR — Convergence threshold for linear equations controlled by LINEQ_TYPE. Equations are iterated until smallest residual falls below , where is the value associated with this keyword. Type: integer; Default: 7. CFOUR_LINEQ_MAXCY (CFOUR); CFOUR — The maximum number of iterations in all linear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE (CFOUR); CFOUR — Determines the algorithm used to solve linear equations ( and derivative and ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not gua",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:52843,perform,performed,52843,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['perform'],['performed']
Performance,TION ENERGY. LCCSD DOUBLES ENERGY. LCCSD OPPOSITE-SPIN CORRELATION ENERGY. LCCSD SAME-SPIN CORRELATION ENERGY. LCCSD SINGLES ENERGY. LCCSD TOTAL ENERGY. LEFT-RIGHT CC2 EIGENVECTOR OVERLAP. LEFT-RIGHT CC3 EIGENVECTOR OVERLAP. LEFT-RIGHT CCSD EIGENVECTOR OVERLAP. LEFT-RIGHT CCSD(T) EIGENVECTOR OVERLAP. legacy_frequencies() psi4.core.CCWavefunction method. psi4.core.CIWavefunction method. psi4.core.CUHF method. psi4.core.DFEP2Wavefunction method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. psi4.core.Wavefunction method. legacy_wavefunction() in module psi4.core. LEVEL_SHIFT (DFOCC). (MCSCF). (OCC). (SCF). LEVEL_SHIFT_CUTOFF (SCF). levenshtein() in module psi4.driver. LibECPInt. LIBEFP. Libint. Libxc. LibXCFunctional class in psi4.core. license. LINEAR (CCRESPONSE). LINEQ_SOLVER (DFOCC). (OCC). LINESEARCH_STATIC_MAX (OPTKING). LINESEARCH_STATIC_MIN (OPTKING). LINESEARCH_STATIC_N (OPTKING). LINK_INTS_TOLERANCE (SCF). LITERAL_CFOUR (GLOBALS). load() psi4.core.Matrix method. psi4.core.Vector method. load_mpqc() psi4.core.Matrix method. LOCAL (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). LOCAL_CONVERGENCE (DLPNO). (FISAPT). (SCF). LOCAL_CPHF_CUTOFF (CCENERGY). (CCLAMBDA). (CCRESPONSE). LOCAL_CUTOFF (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). LOCAL_DO_SINGLES (CCEOM). LOCAL_FILTER_SINGLES (CCEOM). (CCLAMBDA). (CCRESPONSE). LOCAL_IBO_CONDITION (FISAPT). LOCAL_IBO_POWER (FISAPT). LOCAL_IBO_STARS (FISAPT). LOCAL_IBO_STARS_COMPLETENESS (FISAPT). LOCAL_IBO_USE_STARS (FISAPT). LOCAL_MAXITER (DLPNO). (FISAPT). (SCF). LOCAL_METHOD (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). LOCAL_PAIRDEF (CCENERGY). (CCLAMBDA). (CCRESPONSE). LOCAL_PRECONDITIONER (CCEOM). LOCAL_USE_GHOSTS (FISAPT). LOCAL_WEAKP (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). localize() psi4.core.BoysLocalizer method. psi4.core.FISAPT method. psi4.core.Localizer method. psi4.core.PMLocalizer method. Localizer class in psi4.core. LOCK_SINGLET (PSIMRCC). LOWDIN CHARGES. Lo,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/genindex.html:86001,load,load,86001,psi4manual/1.6.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/genindex.html,1,['load'],['load']
Performance,"TION ENERGY. OMP2.5 TOTAL ENERGY. OMP3. ; setting keywords. theory. OMP3 CORRELATION ENERGY. OMP3 DOUBLES ENERGY. OMP3 OPPOSITE-SPIN CORRELATION ENERGY. OMP3 REFERENCE CORRECTION ENERGY. OMP3 SAME-SPIN CORRELATION ENERGY. OMP3 TOTAL ENERGY. OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4], [5], [6], [7], [8]. ONE-ELECTRON ENERGY. one_electron_integrals() (psi4.core.MintsHelper method). OneBodyAOInt (class in psi4.core). OneBodySOInt (class in psi4.core). onel_Hx() (psi4.core.HF method). ONEPDM (DFMP2). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DCT). (DETCI). opdm() (psi4.core.CIWavefunction method). OPDM_ONLY (CCDENSITY). OPDM_RELAX (CCDENSITY). (DFMP2). open() (psi4.core.IO method). open_check() (psi4.core.IO method). operate() (psi4.core.SymmetryOperation method). opt(). . see optimize(). opt() (in module psi4.driver). OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_RESTART (OPTKING). OPT_TYPE (OPTKING). OPTIMIZATION ITERATIONS. OptimizationConvergenceError. optimize(). ; setting keywords. optimize() (in module psi4.driver). optimize_geometric() (in module psi4.driver). option_exists_in_module() (in module psi4.core). Options (class in psi4.core). options() (psi4.core.Wavefunction method). options_to_python() (in module psi4.core). OptionsState (class in psi4.driver.p4util). OptionsStateCM() (in module psi4.driver.p4util). OptionState (class in psi4.driver.p4util). ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCT). orbital_values() (psi4.core.PointFunctions method). ORBITALS_WRITE (SCF). OrbitalSpace (class in psi4.core). order() (psi4.core.CharacterTable method). (psi4.core.PointGroup method). ordered_params (psi4.driver.EmpiricalDispersion attribute). (psi4.driver.procrouting.empirical_dispersion.EmpiricalDispersion attribute). OREMP. ; setti",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/genindex.html:87565,optimiz,optimize,87565,psi4manual/master/genindex.html,https://psicode.org,https://psicode.org/psi4manual/master/genindex.html,2,['optimiz'],['optimize']
Performance,TIONAL_SYMMETRY_NUMBER; T; CACHELEVEL; CUTOFF_AMPS_PRINT; GAUGE; KIND; MAX_NUM_VECS; MAXITER; MEMORY; NEWTON_CONVERGENCE; NORM_TOLERANCE; NUM_AMPS_PRINT; NUM_CORE_ORBITALS; NUM_GUESSES; POLE_MAXITER; PR; R_CONVERGENCE; REFERENCE; ROOTS_PER_IRREP; SEM_MAXITER; AEL; AO_BASIS; CACHELEVEL; DEBUG; GAUGE; INTS_TOLERANCE; ONEPDM; ONEPDM_GRID_CUTOFF; ONEPDM_GRID_DUMP; ONEPDM_GRID_STEPSIZE; OPDM_RELAX; PROP_ALL; PROP_ROOT; PROP_SYM; REFERENCE; ROOTS_PER_IRREP; WFN; WRITE_NOS; XI; XI_CONNECT; ZETA; ABCD; ANALYZE; AO_BASIS; BCCD_MAXITER; BRUECKNER_ORBS_R_CONVERGENCE; CACHELEVEL; CACHETYPE; CC_NUM_THREADS; CC_OS_SCALE; CC_SS_SCALE; DIIS; E_CONVERGENCE; FORCE_RESTART; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; MP2_AMPS_PRINT; MP2_OS_SCALE; MP2_SS_SCALE; NEW_TRIPLES; NUM_AMPS_PRINT; PAIR_ENERGIES_PRINT; PROPERTY; R_CONVERGENCE; REFERENCE; RESTART; SCS_CCSD; SCS_MP2; SCSN_MP2; SEMICANONICAL; SPINADAPT_ENERGIES; T2_COUPLED; T3_WS_INCORE; WFN; ABCD; CACHELEVEL; CACHETYPE; CC_NUM_THREADS; CC3_FOLLOW_ROOT; COLLAPSE_WITH_LAST; COLLAPSE_WITH_LAST_CC3; COMPLEX_TOLERANCE; E_CONVERGENCE; EOM_GUESS; EOM_REFERENCE; EXCITATION_RANGE; FULL_MATRIX; LOCAL; LOCAL_CUTOFF; LOCAL_DO_SINGLES; LOCAL_FILTER_SINGLES; LOCAL_GHOST; LOCAL_METHOD; LOCAL_PRECONDITIONER; LOCAL_WEAKP; MAXITER; NEW_TRIPLES; NUM_AMPS_PRINT; OVERLAP_CHECK; PROP_ROOT; PROP_SYM; R_CONVERGENCE; REFERENCE; RESTART_EOM_CC3; RHF_TRIPLETS; ROOTS_PER_IRREP; SCHMIDT_ADD_RESIDUAL_TOLERANCE; SEMICANONICAL; SINGLES_PRINT; SS_E_CONVERGENCE; SS_R_CONVERGENCE; SS_SKIP_DIAG; SS_VECS_PER_ROOT; T3_WS_INCORE; VECS_CC3; VECS_PER_ROOT; WFN; CACHELEVEL; EOM_REFERENCE; T_AMPS; WABEI_LOWDISK; WFN; ABCD; AO_BASIS; CACHELEVEL; DIIS; JOBTYPE; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; NUM_AMPS_PRINT; PROP_ALL; PROP_ROOT; PROP_SYM; R_CONVERGENCE; RESTART; ROOTS_PER_IRREP; SEKINO; WFN; ZETA; ABCD; ANALYZE; CACHELEVEL; DIIS; GAUGE; LINEAR; LOCA,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:572127,CACHE,CACHELEVEL,572127,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,TIONER — PSI4 [beta2] documentation; LOCAL_WEAKP — PSI4 [beta2] documentation; MAXITER — PSI4 [beta2] documentation; NEW_TRIPLES — PSI4 [beta2] documentation; NUM_AMPS_PRINT — PSI4 [beta2] documentation; PROP_ROOT — PSI4 [beta2] documentation; PROP_SYM — PSI4 [beta2] documentation; R_CONVERGENCE — PSI4 [beta2] documentation; REFERENCE — PSI4 [beta2] documentation; RESTART_EOM_CC3 — PSI4 [beta2] documentation; RHF_TRIPLETS — PSI4 [beta2] documentation; ROOTS_PER_IRREP — PSI4 [beta2] documentation; SCHMIDT_ADD_RESIDUAL_TOLERANCE — PSI4 [beta2] documentation; SEMICANONICAL — PSI4 [beta2] documentation; SINGLES_PRINT — PSI4 [beta2] documentation; SS_E_CONVERGENCE — PSI4 [beta2] documentation; SS_R_CONVERGENCE — PSI4 [beta2] documentation; SS_SKIP_DIAG — PSI4 [beta2] documentation; SS_VECS_PER_ROOT — PSI4 [beta2] documentation; T3_WS_INCORE — PSI4 [beta2] documentation; VECS_CC3 — PSI4 [beta2] documentation; VECS_PER_ROOT — PSI4 [beta2] documentation; WFN — PSI4 [beta2] documentation; CACHELEVEL — PSI4 [beta2] documentation; EOM_REFERENCE — PSI4 [beta2] documentation; T_AMPS — PSI4 [beta2] documentation; WABEI_LOWDISK — PSI4 [beta2] documentation; WFN — PSI4 [beta2] documentation; ABCD — PSI4 [beta2] documentation; AO_BASIS — PSI4 [beta2] documentation; CACHELEVEL — PSI4 [beta2] documentation; DIIS — PSI4 [beta2] documentation; JOBTYPE — PSI4 [beta2] documentation; LOCAL — PSI4 [beta2] documentation; LOCAL_CPHF_CUTOFF — PSI4 [beta2] documentation; LOCAL_CUTOFF — PSI4 [beta2] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta2] documentation; LOCAL_METHOD — PSI4 [beta2] documentation; LOCAL_PAIRDEF — PSI4 [beta2] documentation; LOCAL_WEAKP — PSI4 [beta2] documentation; MAXITER — PSI4 [beta2] documentation; NUM_AMPS_PRINT — PSI4 [beta2] documentation; PROP_ALL — PSI4 [beta2] documentation; PROP_ROOT — PSI4 [beta2] documentation; PROP_SYM — PSI4 [beta2] documentation; R_CONVERGENCE — PSI4 [beta2] documentation; RESTART — PSI4 [beta2] documentation; ROOTS_PER_IRREP — PSI4 [beta,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:907453,CACHE,CACHELEVEL,907453,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,TIONER — PSI4 [beta3] documentation; LOCAL_WEAKP — PSI4 [beta3] documentation; MAXITER — PSI4 [beta3] documentation; NEW_TRIPLES — PSI4 [beta3] documentation; NUM_AMPS_PRINT — PSI4 [beta3] documentation; PROP_ROOT — PSI4 [beta3] documentation; PROP_SYM — PSI4 [beta3] documentation; R_CONVERGENCE — PSI4 [beta3] documentation; REFERENCE — PSI4 [beta3] documentation; RESTART_EOM_CC3 — PSI4 [beta3] documentation; RHF_TRIPLETS — PSI4 [beta3] documentation; ROOTS_PER_IRREP — PSI4 [beta3] documentation; SCHMIDT_ADD_RESIDUAL_TOLERANCE — PSI4 [beta3] documentation; SEMICANONICAL — PSI4 [beta3] documentation; SINGLES_PRINT — PSI4 [beta3] documentation; SS_E_CONVERGENCE — PSI4 [beta3] documentation; SS_R_CONVERGENCE — PSI4 [beta3] documentation; SS_SKIP_DIAG — PSI4 [beta3] documentation; SS_VECS_PER_ROOT — PSI4 [beta3] documentation; T3_WS_INCORE — PSI4 [beta3] documentation; VECS_CC3 — PSI4 [beta3] documentation; VECS_PER_ROOT — PSI4 [beta3] documentation; WFN — PSI4 [beta3] documentation; CACHELEVEL — PSI4 [beta3] documentation; EOM_REFERENCE — PSI4 [beta3] documentation; T_AMPS — PSI4 [beta3] documentation; WABEI_LOWDISK — PSI4 [beta3] documentation; WFN — PSI4 [beta3] documentation; ABCD — PSI4 [beta3] documentation; AO_BASIS — PSI4 [beta3] documentation; CACHELEVEL — PSI4 [beta3] documentation; DIIS — PSI4 [beta3] documentation; JOBTYPE — PSI4 [beta3] documentation; LOCAL — PSI4 [beta3] documentation; LOCAL_CPHF_CUTOFF — PSI4 [beta3] documentation; LOCAL_CUTOFF — PSI4 [beta3] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta3] documentation; LOCAL_METHOD — PSI4 [beta3] documentation; LOCAL_PAIRDEF — PSI4 [beta3] documentation; LOCAL_WEAKP — PSI4 [beta3] documentation; MAXITER — PSI4 [beta3] documentation; NUM_AMPS_PRINT — PSI4 [beta3] documentation; PROP_ALL — PSI4 [beta3] documentation; PROP_ROOT — PSI4 [beta3] documentation; PROP_SYM — PSI4 [beta3] documentation; R_CONVERGENCE — PSI4 [beta3] documentation; RESTART — PSI4 [beta3] documentation; ROOTS_PER_IRREP — PSI4 [beta,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1116900,CACHE,CACHELEVEL,1116900,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,TIONER — PSI4 [beta4] documentation; LOCAL_WEAKP — PSI4 [beta4] documentation; MAXITER — PSI4 [beta4] documentation; NEW_TRIPLES — PSI4 [beta4] documentation; NUM_AMPS_PRINT — PSI4 [beta4] documentation; PROP_ROOT — PSI4 [beta4] documentation; PROP_SYM — PSI4 [beta4] documentation; R_CONVERGENCE — PSI4 [beta4] documentation; REFERENCE — PSI4 [beta4] documentation; RESTART_EOM_CC3 — PSI4 [beta4] documentation; RHF_TRIPLETS — PSI4 [beta4] documentation; ROOTS_PER_IRREP — PSI4 [beta4] documentation; SCHMIDT_ADD_RESIDUAL_TOLERANCE — PSI4 [beta4] documentation; SEMICANONICAL — PSI4 [beta4] documentation; SINGLES_PRINT — PSI4 [beta4] documentation; SS_E_CONVERGENCE — PSI4 [beta4] documentation; SS_R_CONVERGENCE — PSI4 [beta4] documentation; SS_SKIP_DIAG — PSI4 [beta4] documentation; SS_VECS_PER_ROOT — PSI4 [beta4] documentation; T3_WS_INCORE — PSI4 [beta4] documentation; VECS_CC3 — PSI4 [beta4] documentation; VECS_PER_ROOT — PSI4 [beta4] documentation; WFN — PSI4 [beta4] documentation; CACHELEVEL — PSI4 [beta4] documentation; EOM_REFERENCE — PSI4 [beta4] documentation; T_AMPS — PSI4 [beta4] documentation; WABEI_LOWDISK — PSI4 [beta4] documentation; WFN — PSI4 [beta4] documentation; ABCD — PSI4 [beta4] documentation; AO_BASIS — PSI4 [beta4] documentation; CACHELEVEL — PSI4 [beta4] documentation; DIIS — PSI4 [beta4] documentation; JOBTYPE — PSI4 [beta4] documentation; LOCAL — PSI4 [beta4] documentation; LOCAL_CPHF_CUTOFF — PSI4 [beta4] documentation; LOCAL_CUTOFF — PSI4 [beta4] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta4] documentation; LOCAL_METHOD — PSI4 [beta4] documentation; LOCAL_PAIRDEF — PSI4 [beta4] documentation; LOCAL_WEAKP — PSI4 [beta4] documentation; MAXITER — PSI4 [beta4] documentation; NUM_AMPS_PRINT — PSI4 [beta4] documentation; PROP_ALL — PSI4 [beta4] documentation; PROP_ROOT — PSI4 [beta4] documentation; PROP_SYM — PSI4 [beta4] documentation; R_CONVERGENCE — PSI4 [beta4] documentation; RESTART — PSI4 [beta4] documentation; ROOTS_PER_IRREP — PSI4 [beta,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1328003,CACHE,CACHELEVEL,1328003,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,TIONER — PSI4 [beta5] documentation; LOCAL_WEAKP — PSI4 [beta5] documentation; MAXITER — PSI4 [beta5] documentation; NEW_TRIPLES — PSI4 [beta5] documentation; NUM_AMPS_PRINT — PSI4 [beta5] documentation; PROP_ROOT — PSI4 [beta5] documentation; PROP_SYM — PSI4 [beta5] documentation; R_CONVERGENCE — PSI4 [beta5] documentation; REFERENCE — PSI4 [beta5] documentation; RESTART_EOM_CC3 — PSI4 [beta5] documentation; RHF_TRIPLETS — PSI4 [beta5] documentation; ROOTS_PER_IRREP — PSI4 [beta5] documentation; SCHMIDT_ADD_RESIDUAL_TOLERANCE — PSI4 [beta5] documentation; SEMICANONICAL — PSI4 [beta5] documentation; SINGLES_PRINT — PSI4 [beta5] documentation; SS_E_CONVERGENCE — PSI4 [beta5] documentation; SS_R_CONVERGENCE — PSI4 [beta5] documentation; SS_SKIP_DIAG — PSI4 [beta5] documentation; SS_VECS_PER_ROOT — PSI4 [beta5] documentation; T3_WS_INCORE — PSI4 [beta5] documentation; VECS_CC3 — PSI4 [beta5] documentation; VECS_PER_ROOT — PSI4 [beta5] documentation; WFN — PSI4 [beta5] documentation; CACHELEVEL — PSI4 [beta5] documentation; EOM_REFERENCE — PSI4 [beta5] documentation; T_AMPS — PSI4 [beta5] documentation; WABEI_LOWDISK — PSI4 [beta5] documentation; WFN — PSI4 [beta5] documentation; ABCD — PSI4 [beta5] documentation; AO_BASIS — PSI4 [beta5] documentation; CACHELEVEL — PSI4 [beta5] documentation; CAS_FILES_WRITE — PSI4 [beta5] documentation; DIIS — PSI4 [beta5] documentation; FOLLOW_ROOT — PSI4 [beta5] documentation; JOBTYPE — PSI4 [beta5] documentation; LOCAL — PSI4 [beta5] documentation; LOCAL_CPHF_CUTOFF — PSI4 [beta5] documentation; LOCAL_CUTOFF — PSI4 [beta5] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta5] documentation; LOCAL_METHOD — PSI4 [beta5] documentation; LOCAL_PAIRDEF — PSI4 [beta5] documentation; LOCAL_WEAKP — PSI4 [beta5] documentation; MAXITER — PSI4 [beta5] documentation; NUM_AMPS_PRINT — PSI4 [beta5] documentation; PROP_ALL — PSI4 [beta5] documentation; PROP_ROOT — PSI4 [beta5] documentation; PROP_SYM — PSI4 [beta5] documentation; R_CONVERGENCE — PSI4 [,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1546844,CACHE,CACHELEVEL,1546844,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,"TODO: return hessian matrix. elif (dertype == 1):; # Ok, we're doing frequencies by gradients; print('Performing finite difference by gradient calculations'). func = procedures['gradient'][lowername]. if 'mode' in kwargs and kwargs['mode'].lower() == 'sow':; raise ValidationError('Frequency execution mode \'sow\' not yet implemented for finite difference of analytic gradient calculation.'). # Obtain list of displacements; displacements = psi4.fd_geoms_freq_1(irrep). molecule.reinterpret_coordentry(False); molecule.fix_orientation(True); # Make a note of the undisplaced molecule's symmetry; psi4.set_parent_symmetry(molecule.schoenflies_symbol()). ndisp = len(displacements); print(' %d displacements needed.' % ndisp). #print displacements to output.dat; #for n, displacement in enumerate(displacements):; # displacement.print_out();. gradients = []; for n, displacement in enumerate(displacements):; # Print information to output.dat; psi4.print_out('\n'); p4util.banner('Loading displacement %d of %d' % (n + 1, ndisp)). # Print information to the screen; print(' %d' % (n + 1), end=""""); if (n + 1) == ndisp:; print('\n', end=""""); sys.stdout.flush(). # Load in displacement into the active molecule (xyz coordinates only); molecule.set_geometry(displacement). # Perform the gradient calculation; func(lowername, **kwargs). # Save the gradient; G = psi4.get_gradient(); gradients.append(G). # clean may be necessary when changing irreps of displacements; psi4.clean(). psi4.fd_freq_1(gradients, irrep). print(' Computation complete.'). # Clear the ""parent"" symmetry now; psi4.set_parent_symmetry(""""). # TODO: These need to be restored to the user specified setting; psi4.get_active_molecule().fix_orientation(False); # But not this one, it always goes back to True; psi4.get_active_molecule().reinterpret_coordentry(True). optstash.restore(); # TODO: add return statement of hessian matrix; # TODO: set current energy to un-displaced energy. else:; # If not, perform finite difference of energ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/driver.html:63483,Load,Loading,63483,psi4manual/4.0b5/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/driver.html,1,['Load'],['Loading']
Performance,"TOFF (CPHF); CPHF — Minimum singles amplitude to print in CIS analysis. Type: double; Default: 0.15. COLLAPSE_SIZE (DETCI); DETCI — Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM); CCEOM — Do collapse with last vector?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC); DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC); FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC); FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING); OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC); PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT); SAPT (Expert) — Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:86915,optimiz,optimization,86915,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimization']
Performance,"TOR BETA. TD-fctl ROOT 0 -> ROOT n RIGHT EIGENVECTOR BETA - h TRANSITION. TD-fctl ROOT 0 -> ROOT n ROTATORY STRENGTH (LEN). (LEN). (VEL), [1]. TD-fctl ROOT n (h) TOTAL ENERGY. (IN h). TD-fctl ROOT n TOTAL ENERGY. TD-fctl ROOT n TOTAL ENERGY - h TRANSITION. TDA. TDDFT. TDM (DETCI). TDSCF. theory. tdscf() in module psi4.driver. TDSCF_COEFF_CUTOFF (SCF). TDSCF_GUESS (SCF). TDSCF_MAXITER (SCF). TDSCF_PRINT (SCF). TDSCF_R_CONVERGENCE (SCF). TDSCF_STATES (SCF). TDSCF_TDA (SCF). TDSCF_TDM_PRINT (SCF). TDSCF_TRIPLETS (SCF). TDSCFConvergenceError. temp_circular_import_blocker() in module psi4.driver. in module psi4.driver.p4util. TEST_B (OPTKING). TEST_DERIVATIVE_B (OPTKING). test_functional() psi4.core.SuperFunctional method. test_matrix_dpd_interface() in module psi4.core. TestComparisonError. The total electronic gradient [E_h/a0] of the MP2 level of theory, ({nat}, 3). theory. ; ADC. cbs(), [1], [2]. CC. CI. DCT. DF-MP2. DFT. DLPNO-MP2. FISAPT. MCSCF. OEProp. OLCCD. OMP2. OMP3. Orbital-Optimized Methods. SAPT. SCF. TDSCF. THERMAL ENERGY. THERMAL ENERGY CORRECTION. thermo() in module psi4.driver.qcdb.vib. THETA_POINTS (SCF). THICKNESS (SCF). threading, [1]. THREE_PARTICLE (DCT). ThreeCenterOverlapInt class in psi4.core. TIKHONOW_MAX (PSIMRCC). TIKHONOW_OMEGA (DCT). (PSIMRCC). TIKHONOW_TRIPLES (PSIMRCC). TILE_SZ (SCF). timer_off() in module psi4.core. timer_on() in module psi4.core. TLaplaceDenominator class in psi4.core. to_array() psi4.core.Matrix method. psi4.core.Vector method. to_arrays() psi4.core.Molecule method. to_dict() psi4.core.Molecule method. to_file() psi4.core.Wavefunction method. to_schema() psi4.core.Molecule method. to_serial() psi4.core.Matrix method. psi4.core.Vector method. to_string() psi4.core.Molecule method. to_tuple() psi4.core.Dimension method. tocclean() psi4.core.IO method. tocentry_exists() psi4.core.IO method. tocprint() psi4.core.IO method. tocscan() psi4.core.IO method. tocwrite() psi4.core.IO method. total_index() psi4.core.CCWavefunction ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/genindex.html:121529,Optimiz,Optimized,121529,psi4manual/1.7.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/genindex.html,2,['Optimiz'],['Optimized']
Performance,"TOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DF_BASIS_ELST¶. Auxiliary basis set for SAPT Elst10 and Exch10 density fitting computations, may be important if heavier elements are involved. Defaults to a JKFIT basis. Previous to v1.6, defaulted to DF_BASIS_SAPT See fitting notes . Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. D_CONVERGENCE¶. Convergence criterion for residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. EXCH_SCALE_ALPHA¶. Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. E_CONVERGENCE¶. Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. FREEZE_CORE¶. The scope of core orbitals to freeze in evaluation of SAPT \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. MAXITER¶. Maximum number of CPHF iterations. Type: integer; Default: 50. MAX_CCD_DIISVECS¶. Maximum number of vectors",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__sapt.html:2195,perform,performs,2195,psi4manual/1.6.x/autodir_options_c/module__sapt.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__sapt.html,4,['perform'],['performs']
Performance,"TRANSQT). OEI_B_FILE (TRANSQT). OEI_FILE (TRANSQT). OEProp. theory. oeprop() in module util. OFFDIAGONAL_CCSD_T (PSIMRCC). OMEGA (CCRESPONSE). (CCSORT). (RESPONSE). OMEGA_ERF (MINTS). OMP2; . setting keywords. theory. OMP2_ORBS_PRINT (OMP2). OMP3; . setting keywords. theory. OMP3_ORBS_PRINT (OMP3). OMP_N_THREAD (CPHF). OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4]. ONE-ELECTRONENERGY. ONEPDM (CCDENSITY). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OPDM (DETCI). (MP2). OPDM_AVG (DETCI). OPDM_IN_FILE (TRANSQT). OPDM_KE (DETCI). OPDM_OUT_FILE (TRANSQT). OPDM_PRINT (DETCI). OPDM_RELAX (CCDENSITY). (MP2). opt(); . see optimize(); . OPT_METHOD (OMP2). (OMP3). OPT_TYPE (OPTKING). optimization; . see geometry optimization; . optimize(); . setting keywords. optimize() in module driver. OptionsState class in optproc. OptionState class in optproc. optproc module. Orbital-Optimized Methods; . theory. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP3. orientation_fixed() LibmintsMolecule method. ORTH_TYPE (OMP2). (OMP3). output; . SAPT. cbs(). database(). geometry optimization. P. P (THERMO). PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parse_arbitrary_order() in module driver. parse_cotton_irreps() in module driver. parse_multiline_array() in module input. PATH, [1], [2], [3]. PEP1. perp_unit() in module qcdb.vecutil. PERTURB_CBS (PSIMRCC). PERTURB_CBS_COUPLING (PSIMRCC). PERTURB_H (SCF). PERTURB_MAGNITUDE (DETCI). (SCF). PERTURB_WITH (SCF). PHI_POINTS (SCF). physconst module. physical constants. PITZER (TRANSQT). point_group() LibmintsMolecule method. POINTS (FINDIF). POLE_MAXITER (ADC). populateExtern() Diffuse method. QMMM method. PR (ADC). PRECONDITIONER (DETCI). prerequisites. PRESORT_FILE (TRANSQT). PRINT (CPHF). (GLOBALS). (SAPT). PRINT_BASIS (SCF). print_basis_families() in module basislist. print_bond_angles() LibmintsMolecule method. print_dihedrals(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/genindex.html:30230,Optimiz,Optimized,30230,psi4manual/4.0b3/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html,1,['Optimiz'],['Optimized']
Performance,"TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:6284,CACHE,CACHELEVEL,6284,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,6,"['CACHE', 'cache', 'perform']","['CACHELEVEL', 'cacheing', 'perform']"
Performance,TRY_NUMBER; T; CACHELEVEL; CUTOFF_AMPS_PRINT; GAUGE; KIND; MAX_NUM_VECS; MAXITER; MEMORY; NEWTON_CONVERGENCE; NORM_TOLERANCE; NUM_AMPS_PRINT; NUM_CORE_ORBITALS; NUM_GUESSES; POLE_MAXITER; PR; R_CONVERGENCE; REFERENCE; ROOTS_PER_IRREP; SEM_MAXITER; AEL; AO_BASIS; CACHELEVEL; DEBUG; GAUGE; INTS_TOLERANCE; ONEPDM; ONEPDM_GRID_CUTOFF; ONEPDM_GRID_DUMP; ONEPDM_GRID_STEPSIZE; OPDM_RELAX; PROP_ALL; PROP_ROOT; PROP_SYM; REFERENCE; ROOTS_PER_IRREP; WFN; WRITE_NOS; XI; XI_CONNECT; ZETA; ABCD; ANALYZE; AO_BASIS; BCCD_MAXITER; BRUECKNER_ORBS_R_CONVERGENCE; CACHELEVEL; CACHETYPE; CC_NUM_THREADS; CC_OS_SCALE; CC_SS_SCALE; DIIS; E_CONVERGENCE; FORCE_RESTART; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; MP2_AMPS_PRINT; MP2_OS_SCALE; MP2_SS_SCALE; NEW_TRIPLES; NUM_AMPS_PRINT; PAIR_ENERGIES_PRINT; PROPERTY; R_CONVERGENCE; REFERENCE; RESTART; SCS_CCSD; SCS_MP2; SCSN_MP2; SEMICANONICAL; SPINADAPT_ENERGIES; T2_COUPLED; T3_WS_INCORE; WFN; ABCD; CACHELEVEL; CACHETYPE; CC_NUM_THREADS; CC3_FOLLOW_ROOT; COLLAPSE_WITH_LAST; COLLAPSE_WITH_LAST_CC3; COMPLEX_TOLERANCE; E_CONVERGENCE; EOM_GUESS; EOM_REFERENCE; EXCITATION_RANGE; FULL_MATRIX; LOCAL; LOCAL_CUTOFF; LOCAL_DO_SINGLES; LOCAL_FILTER_SINGLES; LOCAL_GHOST; LOCAL_METHOD; LOCAL_PRECONDITIONER; LOCAL_WEAKP; MAXITER; NEW_TRIPLES; NUM_AMPS_PRINT; OVERLAP_CHECK; PROP_ROOT; PROP_SYM; R_CONVERGENCE; REFERENCE; RESTART_EOM_CC3; RHF_TRIPLETS; ROOTS_PER_IRREP; SCHMIDT_ADD_RESIDUAL_TOLERANCE; SEMICANONICAL; SINGLES_PRINT; SS_E_CONVERGENCE; SS_R_CONVERGENCE; SS_SKIP_DIAG; SS_VECS_PER_ROOT; T3_WS_INCORE; VECS_CC3; VECS_PER_ROOT; WFN; CACHELEVEL; EOM_REFERENCE; T_AMPS; WABEI_LOWDISK; WFN; ABCD; AO_BASIS; CACHELEVEL; DIIS; JOBTYPE; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; NUM_AMPS_PRINT; PROP_ALL; PROP_ROOT; PROP_SYM; R_CONVERGENCE; RESTART; ROOTS_PER_IRREP; SEKINO; WFN; ZETA; ABCD; ANALYZE; CACHELEVEL; DIIS; GAUGE; LINEAR; LOCAL; LOCAL_CP,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:572139,CACHE,CACHETYPE,572139,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHETYPE']
Performance,"TS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_QRHFGUES¶. If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calcualtion; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_QRHF_GENERAL¶. The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL¶. By default, in QRHF calculations, electrons are removed from the highest occupied orbital in a symmetry block (symmetry block HOMO), while electrons are added to the lowest unoccupied orbital within a symmetry block (symmetry block LUMO). The purpose of the QRHF_ORBITAL keyword is to allow additional flexibility in choosing which orbitals will have their occupation numbers altered. The value of this keyword gives the offset with respect to the default orbital for the orbital which will be depopulated (or populated) in QRHF-CC calculations. For calculations involving more than one removal or addition of electrons, values are separated by commas and correspond to the CFOUR_QRHF_GENERAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to the third lowest virtual in symm",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:48941,perform,performed,48941,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,2,['perform'],['performed']
Performance,"TS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_QRHFGUES¶. If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calculation; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_QRHF_GENERAL¶. The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL¶. By default, in QRHF calculations, electrons are removed from the highest occupied orbital in a symmetry block (symmetry block HOMO), while electrons are added to the lowest unoccupied orbital within a symmetry block (symmetry block LUMO). The purpose of the QRHF_ORBITAL keyword is to allow additional flexibility in choosing which orbitals will have their occupation numbers altered. The value of this keyword gives the offset with respect to the default orbital for the orbital which will be depopulated (or populated) in QRHF-CC calculations. For calculations involving more than one removal or addition of electrons, values are separated by commas and correspond to the CFOUR_QRHF_GENERAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to the third lowest virtual in symm",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html:49493,perform,performed,49493,psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,15,['perform'],['performed']
Performance,"TY). FOLLOW_ROOT (CLAG). (DETCI). (MCSCF). (PSIMRCC). FOLLOW_VECTOR (DETCI). FORCE_RESTART (CCENERGY). FORCE_TWOCON (MCSCF). format_kwargs_for_input() (in module procutil). format_label() (Table method). format_molecule_for_input() (in module procutil). format_options_for_input() (in module procutil). format_values() (Table method). frac (module). FRAC_DIIS (SCF). FRAC_LOAD (SCF). frac_nuke() (in module frac). FRAC_OCC (SCF). FRAC_RENORMALIZE (SCF). FRAC_START (SCF). frac_traverse() (in module frac). FRAC_VAL (SCF). FRAG_MODE (OPTKING). FREEZE_CORE (GLOBALS). (SAPT). FREEZE_INTERFRAG (OPTKING). FREEZE_INTRAFRAG (OPTKING). frequency() (in module driver). FROZEN_DOCC (GLOBALS). (PSIMRCC). FROZEN_UOCC (GLOBALS). (PSIMRCC). FULL_HESS_EVERY (OPTKING). FULL_MATRIX (CCEOM). functional (module). functional_list() (in module functional). FZC_A_FILE (TRANSQT). FZC_B_FILE (TRANSQT). FZC_FILE (TRANSQT). G. G_CONVERGENCE (OPTKING). GAUGE (CCDENSITY). (CCRESPONSE). GEOM_MAXITER (OPTKING). geometry optimization. IRC. constrained. convergence criteria. minima. output. transition state. geometry() (in module molutil). get_memory() (in module util). get_num_threads() (in module util). get_psifile() (in module procutil). getCartesian() (PubChemObj method). getMoleculeString() (PubChemObj method). getPubChemResults() (in module pubchem). getSDF() (PubChemObj method). getXYZFile() (PubChemObj method). gradient() (in module driver). GUESS (SCF). GUESS_VECTOR (DETCI). H. H0_BLOCK_COUPLING (DETCI). H0_BLOCK_COUPLING_SIZE (DETCI). H0_BLOCKSIZE (DETCI). H0_GUESS_SIZE (DETCI). H_BOND_CONNECT (OPTKING). Hartree-Fock. HBC6 (module), [1]. HD_AVG (DETCI). HD_OTF (DETCI). HEFF4 (PSIMRCC). HEFF_PRINT (PSIMRCC). HESS_TYPE (OMP2). HESS_UPDATE (OPTKING). HESS_UPDATE_LIMIT (OPTKING). HESS_UPDATE_LIMIT_MAX (OPTKING). HESS_UPDATE_LIMIT_SCALE (OPTKING). HESS_UPDATE_USE_LAST (OPTKING). hessian() (in module driver). HF. highest_1() (in module wrappers). HSG (module), [1]. HTBH (module), [1]. I. ICORE (DETCI)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/genindex.html:13756,optimiz,optimization,13756,psi4manual/4.0b2/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/genindex.html,1,['optimiz'],['optimization']
Performance,"TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). [docs]def select_olccd(name, **kwargs):; """"""Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. """"""; reference = psi4.get_option('SCF', 'REFERENCE'); mtd_type = psi4.get_global_option('CC_TYPE'); module = psi4.get_global_option('QC_MODULE'); # Considering only [df]occ. func = None; if reference in ['RHF', 'UHF', 'ROHF', 'RKS', 'UKS']:; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc. if func is None:; raise ManagedMethodError(['select_olccd', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). [docs]def select_olccd_gradient(name, **kwargs):; """"""Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. """"""; reference = psi4.get_option('SCF', 'REFERENCE'); mtd_type = psi4.get_global_option('CC_TYPE'); module = psi4.get_global_option('QC_MODULE'); # Considering only [df]occ. func = None; if reference in ['RHF', 'UHF', 'ROHF', 'RKS', 'UKS']:; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient. if func is None:; raise ManagedMethodError(['select_olccd_gradient', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). [docs]def select_fnoccsd(name, **kwargs):; """"""Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. """"""; reference = psi4.get_option('SCF', 'REFERENCE'); mtd_type = psi4.get_global_option('CC_TYPE'); module = psi4.get_global_option('QC_MODULE'); # Co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/procedures/proc.html:17447,perform,performance,17447,psi4manual/1.0.0/_modules/procedures/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/procedures/proc.html,1,['perform'],['performance']
Performance,"Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++14 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.6+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; MPFR https://www.mpfr.org/. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:4343,Optimiz,Optimized,4343,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['Optimiz'],['Optimized']
Performance,"Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++17 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental bu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:4344,Optimiz,Optimized,4344,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,1,['Optimiz'],['Optimized']
Performance,"Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++17 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4); optking — [what is optking] (runtime dependency, required at build-time). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/build_planning.html:4344,Optimiz,Optimized,4344,psi4manual/1.7.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/build_planning.html,1,['Optimiz'],['Optimized']
Performance,"Tests RHF CCSD(T)gradients. sapt-sf1; Tests the Psi4 SF-SAPT code. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. mints-helper; A general test of the MintsHelper function. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. sapt9; usapt example with empty beta. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. fci-dipole; 6-31G H2O Test FCI Energy Point. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:43638,perform,performed,43638,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['perform'],['performed']
Performance,"The nuclear repulsion energy contribution [H] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY¶; The total energy [Eh] of a component of the requested N-Body energy.; The first parenthetical list over i, j, …, k enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over a, b,; …, c enumerates which fragments contribute basis functions to the; computation. For example, (1, 2)@(1, 2, 3, 4) indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized CEPA(0) level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP2 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [H] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [H] and correlation energy component [H]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. SAPT DISP ENERGY¶. SAPT ELST ENE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/glossary_psivariables-1.html:17062,optimiz,optimized,17062,psi4manual/1.2.1/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/glossary_psivariables-1.html,4,['optimiz'],['optimized']
Performance,"Theoretical Methods: SCF to FCI ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC. Methods available in automatic interface with MRCC. CCSD; CCSD(T) [1]; CCSD(T)_L [1]. CCSDT; CCSDT(Q) [1]; CCSDT(Q)_L [1]. CCSDTQ; CCSDTQ(P) [1]; CCSDTQ(P)_L [1]. CCSDTQP; CCSDTQP(H) [1]; CCSDTQP(H)_L [1]. CCSDTQPH;  ;  . CCSDT-1a; CCSDT-1b; CCSDT-3. CCSDTQ-1a; CCSDTQ-1b; CCSDTQ-3. CCSDTQP-1a; CCSDTQP-1b; CCSDTQP-3. CCSDTQPH-1a; CCSDTQPH-1b; CCSDTQPH-3. CC2;  ;  . CC3;  ;  . CC4;  ;  . CC5;  ;  . CC6;  ;  . [1](1, 2, 3, 4, 5, 6,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/mrcc-1.html:1139,perform,perform,1139,psi4manual/4.0b3/mrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/mrcc-1.html,4,['perform'],['perform']
Performance,"This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. nbody-multi-level-2; many-body different levels of theory on each body of helium tetramer. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. ddd-deriv; Sample HF/cc-pVDZ H2O computation all derivatives. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. dft-smoke; DFT Functional Smoke Test. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. mbis-4; MBIS calculation on NaCl. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dct10; The ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:38647,optimiz,optimizations,38647,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimizations']
Performance,"This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. from typing import Dict, List. import numpy as np. from psi4 import core; from psi4.driver import constants; from psi4.driver.p4util.exceptions import *. def least_squares_fit_polynomial(xvals, fvals, localization_point, no_factorials=True, weighted=True, polynomial_order=4):; """"""Performs and unweighted least squares fit of a polynomial, with specified order; to an array of input function values (fvals) evaluated at given locations (xvals).; See https://doi.org/10.1063/1.4862157, particularly eqn (7) for details. """"""; xpts = np.array(xvals) - localization_point; if weighted:; R = 1.0; p_nu = 1; epsilon = 1e-3; zvals = np.square(xpts/R); weights = np.exp(-zvals) / (zvals**p_nu + epsilon**p_nu); else:; weights = None; fit = np.polynomial.polynomial.polyfit(xpts, fvals, polynomial_order, w=weights); # Remove the 1/n! coefficients; if no_factorials:; scalefac = 1.0; for n in range(2,polynomial_order+1):; scalefac *= n; fit[n] *= scalefac; return fit. [docs]def anharmonicity(rvals: List, energies: List, plot_fit: str = '', mol = None) -> Dict:; """"""Generates spectroscopic constants for a diatomic molecules.; Fits a diatomic potential energy curve using a weighted least squares approach; (c.f. https://doi.org/10.1063/1.4862157, particularly eqn. 7), locates the minimum; energy point, a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/diatomic.html:1376,Perform,Performs,1376,psi4manual/1.4.0/_modules/psi4/driver/diatomic.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/diatomic.html,3,['Perform'],['Performs']
Performance,"To help with flat; potential surfaces, alternate convergence achieved when 100\(\times\)rms force is less; than RMS Force criterion. 7; Compensates for difficulties in converging geometry optmizations of supermolecular complexes; tightly, where large rms disp and max disp may result from flat potential surfaces even when; max force and/or rms force are small. For ultimate control, specifying a value for any of the five monitored options activates that; criterium and overwrites/appends it to the criteria set by G_CONVERGENCE.; Note that this revokes the special convergence arrangements detailed in notes 5 and 6; and instead requires all active criteria to be fulfilled to; achieve convergence. To avoid this revokation, turn on keyword FLEXIBLE_G_CONVERGENCE. Interface to GeomeTRIC¶; The GeomeTRIC optimizer developed by Wang and Song [Wang:2016:214108] may be used in place of; Psi4’s native Optking optimizer. GeomeTRIC uses a translation-rotation-internal coordinate (TRIC); system that works well for optimizing geometries of systems containing noncovalent interactions.; Use of the GeomeTRIC optimizer is specified with the engine argument to; optimize(). The optimization will respect the keywords G_CONVERGENCE; and GEOM_MAXITER. Any other GeomeTRIC-specific options (including constraints); may be specified with the optimizer_keywords argument to optimize().; Constraints may be placed on cartesian coordinates, bonds, angles, and dihedrals, and they can be; used to either freeze a coordinate or set it to a specific value. See the GeomeTRIC github; for more information on keywords and JSON specification of constraints. Optimize the water molecule using GeomeTRIC:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; maxiter 100; g_convergence gau; }. optimize('hf/cc-pvdz', engine='geometric'). Optimize the water molecule using GeomeTRIC, with one of the two OH bonds constrained to 2.0 au; and the HOH angle constrained to 104.5 degrees:; molecule h2o {; O; H 1 1.0; H 1 1.0",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/optking-1.html:14094,optimiz,optimizing,14094,psi4manual/1.4.0/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/optking-1.html,5,['optimiz'],['optimizing']
Performance,"Type of ABCD algorithm will be used. Type: string; Possible Values: NEW, OLD; Default: NEW. ANALYZE¶. Do analyze T2 amplitudes. Type: boolean; Default: false. BCCD_MAXITER¶. Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CC_NUM_THREADS¶. Number of threads. Type: integer; Default: 1. CC_OS_SCALE¶. Coupled-cluster opposite-spin scaling value. Type: double; Default: 1.27. CC_SS_SCALE¶. Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. DIIS¶. Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. LOCAL¶. Do simulate the effects of local correlation techniques?. Type: boolean; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__ccenergy-1.html:1222,CACHE,CACHETYPE,1222,psi4manual/1.1.0/autodir_options_c/module__ccenergy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__ccenergy-1.html,6,['CACHE'],['CACHETYPE']
Performance,"Type: boolean; Default: false. OCC_ORBS_PRINT (OCC)¶OCC — Do print OCC orbital energies?. Type: boolean; Default: false. OCC_PERCENTAGE (FNOCC)¶FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). The number of virtual NOs is chosen so the occupation of the truncated virtual space is OCC_PERCENTAGE percent of occupation of the original MP2 virtual space. This option is only used if NAT_ORBS = true. This keyword overrides OCC_TOLERANCE. Type: double; Default: 99.0. OCC_TOLERANCE (FNOCC)¶FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. OCC_TOLERANCE (SAPT)¶SAPT — Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. ODC_GUESS (DCT)¶DCT — Whether to perform a guess DC-06 or DC-12 computation for ODC-06 or ODC-12 methods, respectively. Currently only available for ALGORITHM = SIMULTANEOUS. Type: boolean; Default: false. OEPROP (DFOCC)¶DFOCC — Do compute one electron properties?. Type: boolean; Default: false. OEPROP (OCC)¶OCC — Do compute one electron properties?. Type: boolean; Default: false. OFFDIAGONAL_CCSD_T (PSIMRCC)¶PSIMRCC — Do include the off-diagonal corrections in (T) computations?. Type: boolean; Default: true. OMEGA (CCRESPONSE)¶CCRESPONSE — Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. OMEGA_ERF (MINTS)¶MINTS — Omega scaling for Erf and Erfc. Type: double; Default: 0.20. ONEPDM (CCDENSITY)¶CCDENSITY — Deprecated and will be removed in 1.7. Us",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html:182304,perform,perform,182304,psi4manual/1.6.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html,1,['perform'],['perform']
Performance,"Type: boolean; Default: false. OCC_ORBS_PRINT (OCC)¶OCC — Do print OCC orbital energies?. Type: boolean; Default: false. OCC_PERCENTAGE (FNOCC)¶FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). The number of virtual NOs is chosen so the occupation of the truncated virtual space is OCC_PERCENTAGE percent of occupation of the original MP2 virtual space. This option is only used if NAT_ORBS = true. This keyword overrides OCC_TOLERANCE. Type: double; Default: 99.0. OCC_TOLERANCE (FNOCC)¶FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. OCC_TOLERANCE (SAPT)¶SAPT — Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. ODC_GUESS (DCT)¶DCT — Whether to perform a guess DC-06 or DC-12 computation for ODC-06 or ODC-12 methods, respectively. Currently only available for ALGORITHM = SIMULTANEOUS. Type: boolean; Default: false. OEPROP (DFOCC)¶DFOCC — Do compute one electron properties?. Type: boolean; Default: false. OEPROP (OCC)¶OCC — Do compute one electron properties?. Type: boolean; Default: false. OFFDIAGONAL_CCSD_T (PSIMRCC)¶PSIMRCC — Do include the off-diagonal corrections in (T) computations?. Type: boolean; Default: true. OMEGA (CCRESPONSE)¶CCRESPONSE — Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. OMEGA_ERF (MINTS)¶MINTS — Omega scaling for Erf and Erfc. Type: double; Default: 0.20. ONEPDM (CCDENSITY)¶CCDENSITY — Do compute one-particle density matrix?. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:179590,perform,perform,179590,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,4,['perform'],['perform']
Performance,"Type: boolean; Default: false. OCC_ORBS_PRINT (OCC)¶OCC — Do print OCC orbital energies?. Type: boolean; Default: false. OCC_PERCENTAGE (FNOCC)¶FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). The number of virtual NOs is chosen so the occupation of the truncated virtual space is OCC_PERCENTAGE percent of occupation of the original MP2 virtual space. This option is only used if NAT_ORBS = true. This keyword overrides OCC_TOLERANCE. Type: double; Default: 99.0. OCC_TOLERANCE (FNOCC)¶FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. OCC_TOLERANCE (SAPT)¶SAPT — Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. ODC_GUESS (DCT)¶DCT — Whether to perform a guess DC-06 or DC-12 computation for ODC-06 or ODC-12 methods, respectively. Currently only available for ALGORITHM = SIMULTANEOUS. Type: boolean; Default: false. OEPROP (DFOCC)¶DFOCC — Do compute one electron properties?. Type: boolean; Default: false. OEPROP (OCC)¶OCC — Do compute one electron properties?. Type: boolean; Default: false. OFFDIAGONAL_CCSD_T (PSIMRCC)¶PSIMRCC — Do include the off-diagonal corrections in (T) computations?. Type: boolean; Default: true. OMEGA (CCRESPONSE)¶CCRESPONSE — Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. OMEGA_ERF (MINTS)¶MINTS — Omega scaling for Erf and Erfc. Type: double; Default: 0.20. ONEPDM (DFMP2)¶DFMP2 — Do compute one-particle density matrix?. Type: bo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:187956,perform,perform,187956,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,4,['perform'],['perform']
Performance,"Type: double; Default: 6.0. MP2_SOS_SCALE¶. Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. MP2_SOS_SCALE2¶. Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.2. MP2_SS_SCALE¶. Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OCC_ORBS_PRINT¶. Do print OCC orbital energies?. Type: boolean; Default: false. OEPROP¶. Do compute one electron properties?. Type: boolean; Default: false. OPT_METHOD¶. The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER¶. The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. OS_SCALE¶. A custom scaling parameter for opposite-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. PCG_BETA_TYPE¶. Type of PCG beta parameter (Fletcher-Reeves or Polak-Ribiere). Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_CONVERGENCE¶. Convergence criterion for residual vector of preco",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__occ-1.html:5653,optimiz,optimize,5653,psi4manual/1.4.0/autodir_options_c/module__occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__occ-1.html,9,['optimiz'],['optimize']
Performance,"Type: integer; Default: 1. SOLVER_PRECONDITION_STEPS (CPHF); CPHF — Solver precondition step type. Type: string; Possible Values: CONSTANT, TRIANGULAR; Default: TRIANGULAR. SOLVER_QUANTITY (CPHF); CPHF — Solver residue or eigenvector delta. Type: string; Possible Values: EIGENVECTOR, RESIDUAL; Default: RESIDUAL. SOLVER_TYPE (CPHF); CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC); DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF); SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF); SCF — Second order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF); SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF); SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF); SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF); SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSA",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:208250,perform,perform,208250,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,4,['perform'],['perform']
Performance,"Type: integer; Default: 1. SOLVER_PRECONDITION_STEPS (CPHF); CPHF — Solver precondition step type. Type: string; Possible Values: CONSTANT, TRIANGULAR; Default: TRIANGULAR. SOLVER_QUANTITY (CPHF); CPHF — Solver residue or eigenvector delta. Type: string; Possible Values: EIGENVECTOR, RESIDUAL; Default: RESIDUAL. SOLVER_TYPE (CPHF); CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC); DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF); SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF); SCF — Secord order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF); SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF); SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF); SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_R_START (SCF); SCF — When to start second-order SCF iterations based on gradient RMS. Type: double; Default: 1.0e-2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT); FISAPT — Do sSAPT0 exchange-sc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:208589,perform,perform,208589,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['perform'],['perform']
Performance,"Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DF_BASIS_ELST¶. Auxiliary basis set for SAPT Elst10 and Exch10 density fitting computations, may be important if heavier elements are involved. Defaults to a JKFIT basis. Previous to v1.6, defaulted to DF_BASIS_SAPT See fitting notes . Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. EXCH_SCALE_ALPHA¶. Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. FREEZE_CORE¶. The scope of core orbitals to freeze in evaluation of SAPT \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. MAXITER¶. Maximum number of CPHF iterations. Type: integer; Default: 50. MAX_CCD_DIISVECS¶. Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MIN_CCD_DIISVECS¶. Minimum number of vectors used in CCD-DIIS. Type: integer; Default: 4. NAT_ORBS_T2¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the ev",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodir_options_c/module__sapt.html:2418,perform,performs,2418,psi4manual/master/autodir_options_c/module__sapt.html,https://psicode.org,https://psicode.org/psi4manual/master/autodir_options_c/module__sapt.html,1,['perform'],['performs']
Performance,"Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. RESTART¶. Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important and amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the st",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/cc-1.html:4840,Cache,Cacheing,4840,psi4manual/4.0b4/cc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cc-1.html,4,['Cache'],['Cacheing']
Performance,"T¶. Auxiliary basis set for DCT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DIIS_START_CONVERGENCE¶. Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. GUESS_R_CONVERGENCE¶. Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. MAXITER¶. Maximum number of macro- or micro-iterations for both energy and response equations. Type: integer; Default: 40. ODC_GUESS¶. Whether to perform a guess DC-06 or DC-12 computation for ODC-06 or ODC-12 methods, respectively. Currently only available for ALGORITHM = SIMULTANEOUS. Type: boolean; Default: false. OPDM¶. Compute a (relaxed) one-particle density matrix? Can be set manually. Set internally for property and gradient computations. Type: boolean; Default: false. QC_COUPLING¶. Controls whether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_TYPE¶. Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: UHF, RHF, ROHF; Default: RHF.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__dct-1.html:2362,perform,perform,2362,psi4manual/1.4.0/autodir_options_c/module__dct-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__dct-1.html,9,['perform'],['perform']
Performance,"U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset; 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. S66by8¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference interaction energies from Rezac et al. JCTC 7 2427 (2011).; Note that the S66by8-N-1.0 members are not quite the same geometries as S66-N. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'HB' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve hydrogen-bonded systems; 'MX' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve mixed-influence systems; 'DD' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve dispersion-dominated systems. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; \(\Rightarrow\) 'HBC6A' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset; 'small'; 'large'; 'equilibrium' equilibrium points for the six systems; 'FaOOFaOO' dissociation curve for formic acid dimer; 'FaONFaON' dissociation curve for formamide dimer; 'FaNNFaNN' dissoc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_available_databases-1.html:8279,optimiz,optimize,8279,psi4manual/1.1.0/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_available_databases-1.html,12,['optimiz'],['optimize']
Performance,"UBSPACE, JACOBI, NONE; Default: JACOBI. SOLVER_PRECONDITION_MAXITER (CPHF); CPHF — Solver precondition max steps. Type: integer; Default: 1. SOLVER_PRECONDITION_STEPS (CPHF); CPHF — Solver precondition step type. Type: string; Possible Values: CONSTANT, TRIANGULAR; Default: TRIANGULAR. SOLVER_QUANTITY (CPHF); CPHF — Solver residue or eigenvector delta. Type: string; Possible Values: EIGENVECTOR, RESIDUAL; Default: RESIDUAL. SOLVER_TYPE (CPHF); CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC); DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC); OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF); SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF); SCF — Second order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF); SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF); SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF); SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF); SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_R",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:208136,perform,perform,208136,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,4,['perform'],['perform']
Performance,UHF/RKS/UKS. sos-pi-omp2; A special version of SOS-OMP2 for -systems; Y; N; RHF/ROHF/UHF/RKS/UKS. The conventional and orbital-optimized MP3 methods currently supported in PSI4 are outlined in Table OMP3 Methods. Name; Calls Method; Energy; Gradient; Reference. mp3; MP3; Y; Y; RHF/UHF. omp3; Orbital-Optimized MP3; Y; Y; RHF/ROHF/UHF/RKS/UKS. scs-omp3; Spin-Component Scaled Orbital-Optimized MP3; Y; N; RHF/ROHF/UHF/RKS/UKS. sos-omp3; Spin-Opposite Scaled Orbital-Optimized MP3; Y; N; RHF/ROHF/UHF/RKS/UKS. scsn-omp3; A special version of SCS-OMP3 for nucleobase interactions; Y; N; RHF/ROHF/UHF/RKS/UKS. scs-omp3-vdw; A special version of SCS-OMP3 (from ethene dimers); Y; N; RHF/ROHF/UHF/RKS/UKS. sos-pi-omp3; A special version of SOS-OMP3 for -systems; Y; N; RHF/ROHF/UHF/RKS/UKS. The conventional and orbital-optimized MP2.5 methods currently supported in PSI4 are outlined in Table OMP2.5 Methods. Name; Calls Method; Energy; Gradient; Reference. mp2.5; MP2.5; Y; Y; RHF/UHF. omp2.5; Orbital-Optimized MP2.5; Y; Y; RHF/ROHF/UHF/RKS/UKS. The conventional and orbital-optimized CEPA methods currently supported in PSI4 are outlined in Table OCEPA Methods. Name; Calls Method; Energy; Gradient; Reference. ocepa; Orbital-Optimized CEPA; Y; Y; RHF/ROHF/UHF/RKS/UKS. scs-ocepa; Spin-Component Scaled Orbital-Optimized CEPA; Y; N; RHF/ROHF/UHF/RKS/UKS. sos-ocepa; Spin-Opposite Scaled Orbital-Optimized CEPA; Y; N; RHF/ROHF/UHF/RKS/UKS. cepa0; CEPA(0) (identical to Linearized CCD); Y; Y; RHF/UHF. Basic Keywords¶. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for ma,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/occ-1.html:7374,Optimiz,Optimized,7374,psi4manual/4.0b5/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/occ-1.html,2,['Optimiz'],['Optimized']
Performance,UHF/RKS/UKS. sos-pi-omp2; A special version of SOS-OMP2 for -systems; Y; N; RHF/ROHF/UHF/RKS/UKS. The conventional and orbital-optimized MP3 methods currently supported in PSI4 are outlined in Table OMP3 Methods. Name; Calls Method; Energy; Gradient; Reference. mp3; MP3; Y; Y; RHF/UHF. omp3; Orbital-Optimized MP3; Y; Y; RHF/ROHF/UHF/RKS/UKS. scs-omp3; Spin-Component Scaled Orbital-Optimized MP3; Y; N; RHF/ROHF/UHF/RKS/UKS. sos-omp3; Spin-Opposite Scaled Orbital-Optimized MP3; Y; N; RHF/ROHF/UHF/RKS/UKS. scsn-omp3; A special version of SCS-OMP3 for nucleobase interactions; Y; N; RHF/ROHF/UHF/RKS/UKS. scs-omp3-vdw; A special version of SCS-OMP3 (from ethene dimers); Y; N; RHF/ROHF/UHF/RKS/UKS. sos-pi-omp3; A special version of SOS-OMP3 for -systems; Y; N; RHF/ROHF/UHF/RKS/UKS. The conventional and orbital-optimized MP2.5 methods currently supported in PSI4 are outlined in Table OMP2.5 Methods. Name; Calls Method; Energy; Gradient; Reference. mp2.5; MP2.5; Y; Y; RHF/UHF. omp2.5; Orbital-Optimized MP2.5; Y; Y; RHF/ROHF/UHF/RKS/UKS. The conventional and orbital-optimized CEPA methods currently supported in PSI4 are outlined in Table OCEPA Methods. Name; Calls Method; Energy; Gradient; Reference. ocepa; Orbital-Optimized CEPA; Y; Y; RHF/ROHF/UHF/RKS/UKS. scs-ocepa; Spin-Component Scaled Orbital-Optimized CEPA; Y; N; RHF/ROHF/UHF/RKS/UKS. sos-ocepa; Spin-Opposite Scaled Orbital-Optimized CEPA; Y; N; RHF/ROHF/UHF/RKS/UKS. cepa0; CEPA(0) (identical to Linearized CCD); Y; Y; RHF/UHF. Basic Keywords¶. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-8. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for ma,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/occ-1.html:6777,Optimiz,Optimized,6777,psi4manual/4.0b4/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/occ-1.html,2,['Optimiz'],['Optimized']
Performance,"UHF/ROHF; —; MP2_TYPE CD. mp3; MP3; RHF/UHF; RHF/UHF; MP_TYPE CONV. Density-Fitted MP3; RHF/UHF; RHF/UHF; MP_TYPE DF. Cholesky-Decomposed MP3; RHF/UHF; —; MP_TYPE CD. mp2.5; MP2.5; RHF/UHF; RHF/UHF; MP_TYPE CONV. Density-Fitted MP2.5; RHF/UHF; RHF/UHF; MP_TYPE DF. Cholesky-Decomposed MP2.5; RHF/UHF; —; MP_TYPE CD. lccd; Linearized CCD; RHF/UHF; RHF/UHF; CC_TYPE CONV. Density-Fitted LCCD; RHF/UHF; RHF/UHF; CC_TYPE DF. Cholesky-Decomposed LCCD; RHF/UHF; —; CC_TYPE CD. ccd; CCD; —; —; CC_TYPE CONV. Density-Fitted CCD; RHF; RHF; CC_TYPE DF. Cholesky-Decomposed CCD; RHF; —; CC_TYPE CD. ccsd; CCSD; —; —; CC_TYPE CONV. Density-Fitted CCSD; RHF; RHF; CC_TYPE DF. Cholesky-Decomposed CCSD; RHF; —; CC_TYPE CD. ccsd(t); CCSD(T); —; —; CC_TYPE CONV. Density-Fitted CCSD(T); RHF; —; CC_TYPE DF. Cholesky-Decomposed CCSD(T); RHF; —; CC_TYPE CD. ccsd(at); Lambda-CCSD(T); —; —; CC_TYPE CONV. Density-Fitted Lambda-CCSD(T); RHF; —; CC_TYPE DF. Cholesky-Decomposed Lambda-CCSD(T); RHF; —; CC_TYPE CD. table of contents. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Convergence Problems; Methods; Basic OCC Keywords; E_CONVERGENCE; R_CONVERGENCE; RMS_MOGRAD_CONVERGENCE; MAX_MOGRAD_CONVERGENCE; MO_MAXITER; WFN_TYPE; ORB_OPT. Advanced OCC Keywords; OPT_METHOD; MO_DIIS_NUM_VECS; LINEQ_SOLVER; ORTH_TYPE; MP2_OS_SCALE; MP2_SS_SCALE; MP2_SOS_SCALE; MP2_SOS_SCALE2; NAT_ORBS; OCC_ORBS_PRINT; TPDM_ABCD_TYPE; DO_DIIS; DO_LEVEL_SHIFT. Basic DFOCC Keywords; E_CONVERGENCE; R_CONVERGENCE; RMS_MOGRAD_CONVERGENCE; MAX_MOGRAD_CONVERGENCE; MO_MAXITER; ORB_OPT. Advanced DFOCC Keywords; OPT_METHOD; HESS_TYPE; MO_DIIS_NUM_VECS; ORTH_TYPE; DO_DIIS; DO_LEVEL_SHIFT. Conventional (Non-OO) Coupled-Cluster and Møller–Plesset Perturbation Theories. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/occ-1.html:17762,Optimiz,Optimized,17762,psi4manual/1.1.0/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/occ-1.html,2,['Optimiz'],['Optimized']
Performance,"UKS""); core.set_local_option(""SCF"", ""GUESS"", ""READ""); core.set_local_option(""SCF"", ""DF_INTS_IO"", ""SAVE""). core.set_local_option(""SCF"", ""FRAC_START"", frac_start); core.set_local_option(""SCF"", ""FRAC_RENORMALIZE"", True); # NYI core.set_local_option(""SCF"", ""FRAC_LOAD"", False). for occ in LUMO_occs:. core.set_local_option(""SCF"", ""FRAC_OCC"", [LUMO]); core.set_local_option(""SCF"", ""FRAC_VAL"", [occ]). E, wfn = driver.energy('scf', dft_functional=name, return_wfn=True, molecule=molecule, **kwargs); C = 1; if E == 0.0:; E = core.variable('SCF ITERATION ENERGY'); C = 0. if LUMO > 0:; eps = wfn.epsilon_a(); potentials.append(eps.get(int(LUMO) - 1)); else:; eps = wfn.epsilon_b(); potentials.append(eps.get(-int(LUMO) - 1)). occs.append(occ); energies.append(E); convs.append(C). core.set_local_option(""SCF"", ""FRAC_START"", 2); #core.set_local_option(""SCF"", ""FRAC_LOAD"", True); core.set_local_option(""SCF"", ""GUESS"", ""READ""); core.set_local_option(""SCF"", ""FRAC_DIIS"", frac_diis); core.set_local_option(""SCF"", ""DF_INTS_IO"", ""LOAD""). # => Run the neutral next <= #. molecule.set_molecular_charge(charge0); molecule.set_multiplicity(mult0). # Burn the neutral in with hf, if requested <= #. if not continuous_guess:; core.set_local_option(""SCF"", ""GUESS"", old_guess); if hf_guess:; core.set_local_option(""SCF"", ""FRAC_START"", 0); core.set_local_option(""SCF"", ""REFERENCE"", ""UHF""); driver.energy('scf', dft_functional=name, molecule=molecule, **kwargs); core.set_local_option(""SCF"", ""REFERENCE"", ""UKS""); core.set_local_option(""SCF"", ""GUESS"", ""READ""); # NYI core.set_local_option(""SCF"", ""FRAC_LOAD"", False). core.set_local_option(""SCF"", ""FRAC_START"", frac_start); core.set_local_option(""SCF"", ""FRAC_RENORMALIZE"", True). for occ in HOMO_occs:. core.set_local_option(""SCF"", ""FRAC_OCC"", [HOMO]); core.set_local_option(""SCF"", ""FRAC_VAL"", [occ]). E, wfn = driver.energy('scf', dft_functional=name, return_wfn=True, molecule=molecule, **kwargs); C = 1; if E == 0.0:; E = core.variable('SCF ITERATION ENERGY'); C = 0. if LU",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/frac.html:6922,LOAD,LOAD,6922,psi4manual/1.7.x/_modules/psi4/driver/frac.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/frac.html,4,['LOAD'],['LOAD']
Performance,"ULE'); # Considering only [df]occ/ccenergy/detci/fnocc. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module == 'FNOCC':; func = run_fnocc; elif module in ['', 'CCENERGY']:; func = run_ccenergy; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'FNOCC']:; func = run_fnodfcc; elif mtd_type == 'CD':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'FNOCC']:; func = run_fnodfcc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'CCENERGY']:; func = run_ccenergy; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'CCENERGY']:; func = run_ccenergy. if func is None:; raise ManagedMethodError(['select_ccsd', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_ccsd_gradient(name, **kwargs):; """"""Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CC_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/ccenergy. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module in ['', 'CCENERGY']:; func = run_ccenergy_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'CCENERGY']:; func = run_ccenergy_gradient; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module in ['', 'CCENERGY']:; func = run_ccenergy_gradient. if func is None:; raise ManagedMethodError(['select_ccsd_gradient', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_fnoccsd_t_(name, **kwargs):; """"""Function selecting the algorithm for a FNO-CCSD(T) energy call; and dir",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html:20018,perform,performance,20018,psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html,1,['perform'],['performance']
Performance,"UMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/testsuite-1.html:1729,optimiz,optimization,1729,psi4manual/1.3.2/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html,2,['optimiz'],['optimization']
Performance,"UOCC (GLOBALS). NUM_INIT_VECS (DETCI). NUM_ROOTS (DETCI). NUM_VECS_PRINT (STABILITY). NUM_VECS_WRITE (DETCI). NumberValue class in qcdb.libmintscoordentry. nunique() LibmintsMolecule method. O. OCC_TOLERANCE (SAPT). OEI_A_FILE (TRANSQT). OEI_B_FILE (TRANSQT). OEI_FILE (TRANSQT). OEProp. theory. oeprop() in module util. OFFDIAGONAL_CCSD_T (PSIMRCC). OMEGA (CCRESPONSE). (CCSORT). (RESPONSE). OMEGA_ERF (MINTS). OMP2; . setting keywords. theory. OMP2_ORBS_PRINT (OMP2). OMP3; . setting keywords. theory. OMP3_ORBS_PRINT (OMP3). OMP_N_THREAD (CPHF). OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4]. ONE-ELECTRONENERGY. ONEPDM (CCDENSITY). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OPDM (DETCI). (MP2). OPDM_AVG (DETCI). OPDM_IN_FILE (TRANSQT). OPDM_KE (DETCI). OPDM_OUT_FILE (TRANSQT). OPDM_PRINT (DETCI). OPDM_RELAX (CCDENSITY). (MP2). opt(); . see optimize(); . OPT_METHOD (OMP2). (OMP3). OPT_TYPE (OPTKING). optimization; . see geometry optimization; . optimize(); . setting keywords. optimize() in module driver. OptionsState class in optproc. OptionState class in optproc. optproc module. Orbital-Optimized Methods; . theory. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP3. orientation_fixed() LibmintsMolecule method. ORTH_TYPE (OMP2). (OMP3). output; . SAPT. cbs(). database(). geometry optimization. P. P (THERMO). PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parse_arbitrary_order() in module driver. parse_cotton_irreps() in module driver. parse_multiline_array() in module input. PATH, [1], [2], [3]. PEP1. perp_unit() in module qcdb.vecutil. PERTURB_CBS (PSIMRCC). PERTURB_CBS_COUPLING (PSIMRCC). PERTURB_H (SCF). PERTURB_MAGNITUDE (DETCI). (SCF). PERTURB_WITH (SCF). PHI_POINTS (SCF). physconst module. physical constants. PITZER (TRANSQT). point_group() LibmintsMolecule method. POINTS (FINDIF). POLE_MAXITER (ADC). populateExtern() Diffuse method. QMMM method. P",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/genindex.html:30002,optimiz,optimization,30002,psi4manual/4.0b3/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html,1,['optimiz'],['optimization']
Performance,"URRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/opt.html:2182,optimiz,optimizers,2182,psi4manual/master/opt.html,https://psicode.org,https://psicode.org/psi4manual/master/opt.html,36,['optimiz'],"['optimization', 'optimizer', 'optimizers']"
Performance,"UR_ESTATE_TRANS¶. Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS¶. Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION¶. Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE¶. Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD¶. Specifies the strength of a Fermi-Contact pertubation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the FC strength used by the program will be the value of the keyword . The atom for which the FC perturbation is switched on is specified in the ZMAT file after the CFOUR command line and potential basis set input, as follows %spin density N with N as the number of atom (in (X5,I3) format) in the order they are written by JODA to the MOL file. Be aware that for some atoms, the cal",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:21759,perform,performed,21759,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,2,['perform'],['performed']
Performance,"UR_ESTATE_TRANS¶. Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS¶. Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION¶. Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE¶. Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD¶. Specifies the strength of a Fermi-Contact perturbation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the FC strength used by the program will be the value of the keyword \(\times 10^{-6}\). The atom for which the FC perturbation is switched on is specified in the ZMAT file after the CFOUR command line and potential basis set input, as follows %spin density N with N as the number of atom (in (X5,I3) format) in the order they are written by JODA to the MOL file. Be aware that for ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html:21909,perform,performed,21909,psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,15,['perform'],['performed']
Performance,"UR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV¶. Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC¶. Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP¶. Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD¶. Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html:30654,optimiz,optimizations,30654,psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,15,['optimiz'],['optimizations']
Performance,UR_PROP_INTEGRAL; CFOUR_PROPS; CFOUR_QRHF_GENERAL; CFOUR_QRHF_ORBITAL; CFOUR_QRHFGUES; CFOUR_RAMAN_INT; CFOUR_RAMAN_ORB; CFOUR_RDO; CFOUR_REFERENCE; CFOUR_RELATIVISTIC; CFOUR_RELAX_DENS; CFOUR_RES_RAMAN; CFOUR_RESTART_CC; CFOUR_ROT_EVEC; CFOUR_SAVE_INTS; CFOUR_SCALE_ON; CFOUR_SCF_CONV; CFOUR_SCF_DAMPING; CFOUR_SCF_EXPORDER; CFOUR_SCF_EXPSTART; CFOUR_SCF_EXTRAPOLATION; CFOUR_SCF_MAXCYC; CFOUR_SD_FIELD; CFOUR_SPHERICAL; CFOUR_SPIN_FLIP; CFOUR_SPIN_ORBIT; CFOUR_SPIN_SCAL; CFOUR_SPINROTATION; CFOUR_SUBGROUP; CFOUR_SYM_CHECK; CFOUR_SYMMETRY; CFOUR_T3_EXTRAPOL; CFOUR_TAMP_SUM; CFOUR_THERMOCHEMISTRY; CFOUR_TRANS_INV; CFOUR_TREAT_PERT; CFOUR_UIJ_THRESHOLD; CFOUR_UNITS; CFOUR_UPDATE_HESSIAN; CFOUR_VIBRATION; CFOUR_VTRAN; CFOUR_XFIELD; CFOUR_XFORM_TOL; CFOUR_YFIELD; CFOUR_ZFIELD; TRANSLATE_PSI4; CPHF_MEM_SAFETY_FACTOR; CPHF_TASKS; DEBUG; DF_BASIS_SCF; EXPLICIT_HAMILTONIAN; MODULE; PRINT; SCF_TYPE; SOLVER_CONVERGENCE; SOLVER_MAXITER; SOLVER_N_GUESS; SOLVER_PRECONDITION; ALGORITHM; AO_BASIS; CACHELEVEL; DAMPING_PERCENTAGE; DCT_FUNCTIONAL; DCT_GUESS; DCT_TYPE; DF_BASIS_DCT; DIIS_MAX_VECS; DIIS_MIN_VECS; DIIS_START_CONVERGENCE; E_CONVERGENCE; ENERGY_LEVEL_SHIFT; GUESS_R_CONVERGENCE; INTS_TOLERANCE; MAXITER; ODC_GUESS; OPDM; ORBITAL_LEVEL_SHIFT; QC_COUPLING; QC_TYPE; R_CONVERGENCE; REFERENCE; RELAX_GUESS_ORBITALS; RESPONSE_ALGORITHM; STABILITY_ADD_VECTORS; STABILITY_AUGMENT_SPACE_TOL; STABILITY_CHECK; STABILITY_CONVERGENCE; STABILITY_MAX_SPACE_SIZE; STABILITY_N_EIGENVALUES; STABILITY_N_GUESS_VECTORS; THREE_PARTICLE; TIKHONOW_OMEGA; DDX_DIIS_MAX_VECS; DDX_ETA; DDX_FMM; DDX_FMM_LOCAL_LMAX; DDX_FMM_MULTIPOLE_LMAX; DDX_INCORE; DDX_LMAX; DDX_LOGFILE; DDX_MAXITER; DDX_MODEL; DDX_N_LEBEDEV; DDX_RADII; DDX_RADII_SCALING; DDX_RADII_SET; DDX_SHIFT; DDX_SOLUTE_RADIAL_POINTS; DDX_SOLUTE_SPHERICAL_POINTS; DDX_SOLVATION_CONVERGENCE; DDX_SOLVENT; DDX_SOLVENT_EPSILON; A_RAS3_MAX; AVG_STATES; AVG_WEIGHTS; B_RAS3_MAX; BENDAZZOLI; CALC_S_SQUARED; CC; CC_A_RAS3_MAX; CC_B_RAS3_MAX; CC_EX_LEVEL; CC_FIX_,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:799441,CACHE,CACHELEVEL,799441,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,1,['CACHE'],['CACHELEVEL']
Performance,UR_PROP_INTEGRAL; CFOUR_PROPS; CFOUR_QRHF_GENERAL; CFOUR_QRHF_ORBITAL; CFOUR_QRHFGUES; CFOUR_RAMAN_INT; CFOUR_RAMAN_ORB; CFOUR_RDO; CFOUR_REFERENCE; CFOUR_RELATIVISTIC; CFOUR_RELAX_DENS; CFOUR_RES_RAMAN; CFOUR_RESTART_CC; CFOUR_ROT_EVEC; CFOUR_SAVE_INTS; CFOUR_SCALE_ON; CFOUR_SCF_CONV; CFOUR_SCF_DAMPING; CFOUR_SCF_EXPORDER; CFOUR_SCF_EXPSTART; CFOUR_SCF_EXTRAPOLATION; CFOUR_SCF_MAXCYC; CFOUR_SD_FIELD; CFOUR_SPHERICAL; CFOUR_SPIN_FLIP; CFOUR_SPIN_ORBIT; CFOUR_SPIN_SCAL; CFOUR_SPINROTATION; CFOUR_SUBGROUP; CFOUR_SYM_CHECK; CFOUR_SYMMETRY; CFOUR_T3_EXTRAPOL; CFOUR_TAMP_SUM; CFOUR_THERMOCHEMISTRY; CFOUR_TRANS_INV; CFOUR_TREAT_PERT; CFOUR_UIJ_THRESHOLD; CFOUR_UNITS; CFOUR_UPDATE_HESSIAN; CFOUR_VIBRATION; CFOUR_VTRAN; CFOUR_XFIELD; CFOUR_XFORM_TOL; CFOUR_YFIELD; CFOUR_ZFIELD; TRANSLATE_PSI4; CPHF_MEM_SAFETY_FACTOR; CPHF_TASKS; DEBUG; DF_BASIS_SCF; EXPLICIT_HAMILTONIAN; MODULE; PRINT; SCF_TYPE; SOLVER_CONVERGENCE; SOLVER_MAXITER; SOLVER_N_GUESS; SOLVER_PRECONDITION; ALGORITHM; AO_BASIS; CACHELEVEL; DAMPING_PERCENTAGE; DCT_FUNCTIONAL; DCT_GUESS; DCT_TYPE; DF_BASIS_DCT; DIIS_MAX_VECS; DIIS_MIN_VECS; DIIS_START_CONVERGENCE; E_CONVERGENCE; ENERGY_LEVEL_SHIFT; GUESS_R_CONVERGENCE; INTS_TOLERANCE; MAXITER; ODC_GUESS; OPDM; ORBITAL_LEVEL_SHIFT; QC_COUPLING; QC_TYPE; R_CONVERGENCE; REFERENCE; RELAX_GUESS_ORBITALS; RESPONSE_ALGORITHM; STABILITY_ADD_VECTORS; STABILITY_AUGMENT_SPACE_TOL; STABILITY_CHECK; STABILITY_CONVERGENCE; STABILITY_MAX_SPACE_SIZE; STABILITY_N_EIGENVALUES; STABILITY_N_GUESS_VECTORS; THREE_PARTICLE; TIKHONOW_OMEGA; DDX_DIIS_MAX_VECS; DDX_ETA; DDX_FMM; DDX_FMM_LOCAL_LMAX; DDX_FMM_MULTIPOLE_LMAX; DDX_INCORE; DDX_LMAX; DDX_LOGFILE; DDX_MAXITER; DDX_MODEL; DDX_N_LEBEDEV; DDX_RADII; DDX_RADII_SCALING; DDX_RADII_SET; DDX_SHIFT; DDX_SOLUTE_RADIAL_POINTS; DDX_SOLUTE_SPHERICAL_POINTS; DDX_SOLVATION_CONVERGENCE; DDX_SOLVENT; DDX_SOLVENT_EPSILON; DDX_SOLVENT_EPSILON_OPTICAL; DDX_SOLVENT_KAPPA; A_RAS3_MAX; AVG_STATES; AVG_WEIGHTS; B_RAS3_MAX; BENDAZZOLI; CALC_S_SQUARED; CC; CC,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:829873,CACHE,CACHELEVEL,829873,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,5,['CACHE'],['CACHELEVEL']
Performance,"US (GDMA); GDMA — The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH (GDMA); GDMA — The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING); OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF); FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to READ for geometry optimizations after the first step, to CORE for single atoms, and to SAD otherwise. The HUCKEL guess employs on-the-fly calculations like SAD, as described in doi:10.1021/acs.jctc.8b01089. Type: string; Possible Values: AUTO, CORE, GWH, SAD, HUCKEL, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:136505,optimiz,optimizations,136505,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimizations']
Performance,"US for; the energy computation. Evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: two-step (default) and simultaneous. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit the similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. Minimal Input¶; Minimal input for the DCFT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis 3-21G. energy('dcft'). The energy('dcft') call to energy() executes the DCFT module, which will first call the SCF module and perform the SCF computation with UHF reference to obtain the guess for the DCFT orbitals. After the SCF is converged, the program will perform the energy computation using the DC-06 method. By default, the two-step algorithm will be used for the solution of the equations. Note that while the default value for the option REFERENCE is RHF, this option is set to UHF before the DCFT module is executed. For the DC-06 method one can also request to perform the geometry optimization following the example below:; molecule {; H; H 1 1.0; }. set basis 3-21G. optimize('dcft'). The optimize('dcft') call will first perform all of the procedures; described above to obtain the DC-06 energy. After that the DC-06 analytic; gradients code will be executed to perform the solution of the DCFT response; equations, compute the analytic gradients of the DCFT energy and perform the; geometry optimization. Recommendations¶; Here is the list of the recommendations for the DCFT module:. For the computations of small systems (less than 150 basis; functions and high symmetry) the use of the default parameters is recommended,; including the choice of ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/dcft-1.html:10266,perform,perform,10266,psi4manual/4.0b5/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/dcft-1.html,2,['perform'],['perform']
Performance,"Uses RHF singlet orbitals. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc1; ADC/6-31G** on H2O. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, at the UHF an ROHF levels of theory. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html:17940,optimiz,optimization,17940,psi4manual/4.0b4/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html,8,['optimiz'],['optimization']
Performance,"VDZ energies for the H2O+ molecule. results were independently verified against the initial wavels implementation. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cepa-module; routing check on lccd, lccsd, cepa(0). scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. nbody-hessian; Computation of VMFC-corrected HF dimer Hessian. sapt-compare; SAPT0 aug-cc-pVDZ computation of the water-water interaction energy, using the three SAPT codes. sapt-exch-ind30-inf; SAPT2+3 with S^inf exch-ind30 Geometries taken from the S66x10 database, the shortest-range point (R = 0.7 R_e). pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. castup2; SCF with various combinations of pk/density-fitting, ca",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:29393,perform,performed,29393,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['perform'],['performed']
Performance,"VDZ energy for the NO radical. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cdoremp-energy1; Cholesky decomposed OO-REMP/cc-pVDZ energy for the H2O molecule. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. numpy-array-interface; Numpy interface testing. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. cc13d; Tests analytic CC2 gradients. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. scf3; File retention, docc, socc, and bond distances specified explicitly. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. An F-SAPT partitioning follows I-SAPT. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dforemp-gra",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:41816,optimiz,optimization,41816,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimization']
Performance,"VDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:8313,perform,performed,8313,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['perform'],['performed']
Performance,"VDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and bro",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:40107,perform,performed,40107,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['perform'],['performed']
Performance,VEL_SHIFT_CUTOFF; LOCAL_CONVERGENCE; LOCAL_MAXITER; MAX_ATTEMPTS; MAX_MEM_BUF; MAXITER; MOLDEN_WRITE; MOM_OCC; MOM_START; MOM_VIR; NL_DISPERSION_PARAMETERS; ONEPOT_GRID_READ; ORBITALS_WRITE; PARALLEL; PERTURB_DIPOLE; PERTURB_H; PERTURB_MAGNITUDE; PERTURB_WITH; PHI_POINTS; PK_ALGO; PK_ALL_NONSYM; PK_MAX_BUCKETS; PK_NO_INCORE; PRINT_BASIS; PRINT_MOS; PROCESS_GRID; QCHF; R_POINTS; RADIUS; REFERENCE; S_CHOLESKY_TOLERANCE; S_ORTHOGONALIZATION; S_TOLERANCE; SAD_CHOL_TOLERANCE; SAD_D_CONVERGENCE; SAD_E_CONVERGENCE; SAD_FRAC_OCC; SAD_MAXITER; SAD_PRINT; SAD_SCF_TYPE; SAD_SPIN_AVERAGE; SAPT; SAVE_JK; SAVE_UHF_NOS; SCF_MEM_SAFETY_FACTOR; SCF_PROPERTIES; SOSCF; SOSCF_CONV; SOSCF_MAX_ITER; SOSCF_MIN_ITER; SOSCF_PRINT; SOSCF_START_CONVERGENCE; STABILITY_ANALYSIS; TDSCF_COEFF_CUTOFF; TDSCF_GUESS; TDSCF_MAXITER; TDSCF_PRINT; TDSCF_R_CONVERGENCE; TDSCF_STATES; TDSCF_TDA; TDSCF_TDM_PRINT; TDSCF_TRIPLETS; THETA_POINTS; THICKNESS; TILE_SZ; UHF_NOONS; WCOMBINE; WFN; P; ROTATIONAL_SYMMETRY_NUMBER; T; CACHELEVEL; CUTOFF_AMPS_PRINT; GAUGE; KIND; MAX_NUM_VECS; MAXITER; MEMORY; NEWTON_CONVERGENCE; NORM_TOLERANCE; NUM_AMPS_PRINT; NUM_CORE_ORBITALS; NUM_GUESSES; POLE_MAXITER; PR; R_CONVERGENCE; REFERENCE; ROOTS_PER_IRREP; SEM_MAXITER; AEL; AO_BASIS; CACHELEVEL; DEBUG; GAUGE; INTS_TOLERANCE; ONEPDM; ONEPDM_GRID_CUTOFF; ONEPDM_GRID_DUMP; ONEPDM_GRID_STEPSIZE; OPDM_RELAX; PROP_ALL; PROP_ROOT; PROP_SYM; REFERENCE; ROOTS_PER_IRREP; WFN; WRITE_NOS; XI; XI_CONNECT; ZETA; ABCD; ANALYZE; AO_BASIS; BCCD_MAXITER; BRUECKNER_ORBS_R_CONVERGENCE; CACHELEVEL; CACHETYPE; CC_NUM_THREADS; CC_OS_SCALE; CC_SS_SCALE; DIIS; E_CONVERGENCE; FORCE_RESTART; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; MP2_AMPS_PRINT; MP2_OS_SCALE; MP2_SS_SCALE; NEW_TRIPLES; NUM_AMPS_PRINT; PAIR_ENERGIES_PRINT; PROPERTY; R_CONVERGENCE; REFERENCE; RESTART; SCS_CCSD; SCS_MP2; SCSN_MP2; SEMICANONICAL; SPINADAPT_ENERGIES; T2_COUPLED; T3_WS_INCORE; WFN; ABCD; CACHELEVEL; CACHETYPE; CC_NUM_THREADS;,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:571159,CACHE,CACHELEVEL,571159,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,"VEL_SHIFT¶. Level shift to aid convergence. Type: double; Default: 0.02. LINEQ_SOLVER¶. The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, DFOCC will estimate and use a value required to achieve the desired E_CONVERGENCE The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. MOLDEN_WRITE¶. Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MO_DIIS_NUM_VECS¶. Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 100. MO_STEP_MAX¶. Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MP2_AMP_TYPE¶. The algorithm that used to handle mp2 amplitudes. The DIRECT option means compute amplitudes on the fly * whenever they are necessary. Type: string; Possible Values: DIRECT, CONV; Default: DIRECT. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0. MP2_SOS_SCALE¶. MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2¶. Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OCC_ORBS_PRINT¶. Do print OCC orbital energies?. Type: boolean; Default: false. OEPROP¶. Do compute one electron properties?. Type: boolean; Default: false. OO_SCALE¶. OO scaling factor used in MSD. Type: double; Default: 0.01. OPT_METHOD¶. The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm avail",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__dfocc.html:3297,optimiz,optimization,3297,psi4manual/1.7.x/autodir_options_c/module__dfocc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__dfocc.html,4,['optimiz'],['optimization']
Performance,"VERGENCE¶. Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Type: conv double; Default: 1e-5. RESTART¶. Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important and amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/cc-1.html:4943,cache,cache,4943,psi4manual/4.0b2/cc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/cc-1.html,8,['cache'],['cache']
Performance,"VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. INTCOS_GENERATE_EXIT¶. Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. Optimizing Minima¶; First, define the molecule and basis in the input.; 1; 2; 3; 4; 5; 6; 7molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; 1optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; 1; 2set step_type nr; optimize('scf'). Optimize using energy points instead of gradients:; 1optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; 1; 2set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:; 1; 2; 3; 4; 5; 6; 7set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:; 1; 2set full_hess_every 1; optimize('scf'). Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_E",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/optking-1.html:4448,Optimiz,Optimize,4448,psi4manual/1.1.0/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/optking-1.html,6,['Optimiz'],['Optimize']
Performance,"VER_PRECONDITION_MAXITER (CPHF); CPHF — Solver precondtion max steps. Type: integer; Default: 1. SOLVER_PRECONDITION_STEPS (CPHF); CPHF — Solver precondition step type. Type: string; Possible Values: CONSTANT, TRIANGULAR; Default: TRIANGULAR. SOLVER_QUANTITY (CPHF); CPHF — Solver residue or eigenvector delta. Type: string; Possible Values: EIGENVECTOR, RESIDUAL; Default: RESIDUAL. SOLVER_TYPE (CPHF); CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SORTED_TEI_FILE (TRANSQT); TRANSQT — MO-basis sorted two-electron integrals file. Type: integer; Default: PSIF_MO_TEI. SOS_SCALE (OMP2); OMP2 — Spin-opposite scaling (SOS) value for SCF orbitals. Type: double; Default: 1.3. SOS_SCALE (OMP3); OMP3 — Spin-opposite scaling (SOS) value for SCF orbitals. Type: double; Default: 1.3. SOS_SCALE2 (OMP2); OMP2 — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. SOS_SCALE2 (OMP3); OMP3 — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. SOS_TYPE (OMP2); OMP2 — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OMP3); OMP3 — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:117412,optimiz,optimized-,117412,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimized-']
Performance,"VIDSON, GEN_DAVIDSON, H0BLOCK, H0BLOCK_INV, ITER_INV, H0BLOCK_COUPLING, EVANGELISTI; Default: DAVIDSON. UPDATE¶. The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. Density Matrices¶. DIPMOM¶. Do compute the dipole moment?. Type: boolean; Default: false. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OPDM¶. Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. TDM¶. Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. Root Following¶. FOLLOW_ROOT¶. The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 0. Guess Vectors¶. RESTART¶. Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. File Handling¶. COLLAPSE_SIZE¶. Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS . If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. MAX_NUM_VECS¶. Maximum number of Davidson subspace vectors which can be held on disk for the CI coefficient and sigma vectors. (There is one H(diag) vector and the number of D vectors is equal to the number of roots). When the number of vectors on disk reaches the value of MAX_NUM_VECS, the Davidson subspace will be collapsed to COLLAPSE_SIZE vectors for each root. This is very helpful for saving disk space. Defaults to CI_MAXITER * NUM_ROOTS + NUM_INIT_VECS. Type: intege",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__detci-1.html:6550,optimiz,optimization,6550,psi4manual/1.1.0/autodir_options_c/module__detci-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__detci-1.html,2,['optimiz'],['optimization']
Performance,"VWN3 (RPA) LSDA Functional. s_x; Slater LSDA Exchange. vwn3rpa_c; VWN3 (RPA) LSDA Correlation. vwn3_c; VWN3 LSDA Correlation. vwn5rpa_c; VWN5 (RPA) LSDA Correlation. vwn5_c; VWN5 LSDA Correlation. dldf; Dispersionless Hybrid Meta-GGA XC Functional. dldf+d; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. dldf+d09; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/opt-1.html:6808,perform,performs,6808,psi4manual/4.0b5/opt-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/opt-1.html,2,['perform'],['performs']
Performance,"ValidationError(""At least 5 data points must be provided to compute anharmonicity""); core.print_out(""\n\nPerforming a fit to %d data points\n"" % npoints). # Sort radii and values first from lowest to highest radius; indices = np.argsort(rvals); rvals = np.array(rvals)[indices]; energies = np.array(energies)[indices]. # Make sure the molecule the user provided is the active one; molecule = mol or core.get_active_molecule(); molecule.update_geometry(); natoms = molecule.natom(); if natoms != 2:; raise Exception(""The current molecule must be a diatomic for this code to work!""); m1 = molecule.mass(0); m2 = molecule.mass(1). # Find rval of the minimum of energies, check number of points left and right; min_index = np.argmin(energies); if min_index < 3 :; core.print_out(""\nWarning: fewer than 3 points provided with a r < r(min(E))!\n""); if min_index >= len(energies) - 3:; core.print_out(""\nWarning: fewer than 3 points provided with a r > r(min(E))!\n""). # Optimize the geometry, refitting the surface around each new geometry; core.print_out(""\nOptimizing geometry based on current surface:\n\n""); re = rvals[min_index]; maxit = 30; thres = 1.0e-9; for i in range(maxit):; derivs = least_squares_fit_polynomial(rvals,energies,localization_point=re); e,g,H = derivs[0:3]; core.print_out("" E = %20.14f, x = %14.7f, grad = %20.14f\n"" % (e, re, g)); if abs(g) < thres:; break; re -= g/H; if i == maxit-1:; raise ConvergenceError(""diatomic geometry optimization"", maxit); core.print_out("" Final E = %20.14f, x = %14.7f, grad = %20.14f\n"" % (e, re, g)); if re < min(rvals):; raise Exception(""Minimum energy point is outside range of points provided. Use a lower range of r values.""); if re > max(rvals):; raise Exception(""Minimum energy point is outside range of points provided. Use a higher range of r values.""). # Convert to convenient units, and compute spectroscopic constants; d0,d1,d2,d3,d4 = derivs*constants.hartree2aJ; core.print_out(""\nEquilibrium Energy %20.14f Hartrees\n"" % e); core.pr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/diatomic.html:4855,Optimiz,Optimize,4855,psi4manual/1.6.x/_modules/psi4/driver/diatomic.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/diatomic.html,5,['Optimiz'],['Optimize']
Performance,"ValidationError(""At least 5 data points must be provided to compute anharmonicity""); core.print_out(""\n\nPerforming a fit to %d data points\n"" % npoints). # Sort radii and values first from lowest to highest radius; indices = np.argsort(rvals); rvals = np.array(rvals)[indices]; energies = np.array(energies)[indices]. # Make sure the molecule the user provided is the active one; molecule = mol or core.get_active_molecule(); molecule.update_geometry(); natoms = molecule.natom(); if natoms != 2:; raise Exception(""The current molecule must be a diatomic for this code to work!""); m1 = molecule.mass(0); m2 = molecule.mass(1). # Find rval of the minimum of energies, check number of points left and right; min_index = np.argmin(energies); if min_index < 3 :; core.print_out(""\nWarning: fewer than 3 points provided with a r < r(min(E))!\n""); if min_index >= len(energies) - 3:; core.print_out(""\nWarning: fewer than 3 points provided with a r > r(min(E))!\n""). # Optimize the geometry, refitting the surface around each new geometry; core.print_out(""\nOptimizing geometry based on current surface:\n\n""); re = rvals[min_index]; maxit = 30; thres = 1.0e-9; for i in range(maxit):; derivs = least_squares_fit_polynomial(rvals,energies,localization_point=re); e,g,H = derivs[0:3]; core.print_out("" E = %20.14f, x = %14.7f, grad = %20.14f\n"" % (e, re, g)); if abs(g) < thres:; break; re -= g/H;; if i == maxit-1:; raise ConvergenceError(""diatomic geometry optimization"", maxit); core.print_out("" Final E = %20.14f, x = %14.7f, grad = %20.14f\n"" % (e, re, g)); if re < min(rvals):; raise Exception(""Minimum energy point is outside range of points provided. Use a lower range of r values.""); if re > max(rvals):; raise Exception(""Minimum energy point is outside range of points provided. Use a higher range of r values.""). # Convert to convenient units, and compute spectroscopic constants; d0,d1,d2,d3,d4 = derivs*constants.hartree2aJ; core.print_out(""\nEquilibrium Energy %20.14f Hartrees\n"" % e); core.p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/diatomic.html:4855,Optimiz,Optimize,4855,psi4manual/1.4.0/_modules/psi4/driver/diatomic.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/diatomic.html,2,['Optimiz'],['Optimize']
Performance,"Values: RHF, ROHF, UHF, CUHF, RKS, UKS; Default: RHF. SAVE_JK¶. Keep JK object for later use?. Type: boolean; Default: false. SCF_MEM_SAFETY_FACTOR¶. Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_PROPERTIES¶. SCF Properties to calculate after an energy evaluation. Note, this keyword is not used for property evaluations. Type: array; Default: No Default. S_ORTHOGONALIZATION¶. SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE¶. Minimum S matrix eigenvalue to allow before linear dependencies are removed. Type: conv double; Default: 1e-7. Convergence Control/Stabilization¶. BASIS_GUESS¶. Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. DAMPING_CONVERGENCE¶. The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE¶. The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 0.0. DF_BASIS_GUESS¶. When BASIS_GUESS is active, run the preliminary scf in density-fitted mode with this as fitting basis for the small basis set. A value of TRUE turns on density fitting with the default basis, otherwise the specified basis is used. Type: string; Possible Values: basis string; Default: FALSE. DIIS¶. Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__scf-1.html:3483,perform,performed,3483,psi4manual/1.3.2/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__scf-1.html,2,['perform'],['performed']
Performance,"Values: basis string; Default: No Default. DF_BASIS_MP2 (LMP2); LMP2 — Auxiliary basis set for MP2 density fitting calculations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT (SAPT); SAPT — Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SCF (CPHF); CPHF — Auxiliary basis for SCF. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SCF (SCF); SCF — Auxiliary basis set for SCF density fitting computations. Defaults to a JKFIT basis. Type: string; Possible Values: basis string; Default: No Default. DF_FITTING_CONDITION (SCF); SCF (Expert) — Fitting Condition. Type: double; Default: 1.0e-12. DF_INTS_IO (DFMP2); DFMP2 (Expert) — IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. DF_INTS_IO (SCF); SCF (Expert) — IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. DF_INTS_NUM_THREADS (DFMP2); DFMP2 — Number of threads to compute integrals with. 0 is wild card. Type: integer; Default: 0. DF_INTS_NUM_THREADS (SCF); SCF — Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_LMP2 (LMP2); LMP2 — Do use density fitting? Turned on with specification of fitting basis. Type: boolean; Default: true. DFMP2_MEM_FACTOR (DFMP2); DFMP2 — % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFMP2_P2_TOLERANCE (DFMP2); DFMP2 — Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P. Type: conv double; Default: 0.0. DFMP2_P_TOLERANCE (DFMP2); DFMP2 — Minimum error in the 2-norm of the P matrix for skeleton-core Fock matrix derivatives. Type: conv double; Default: 0.0. DFT_ALPHA (SCF); SCF — The DFT Exact-exchange parameter. Type: double; Default: 0.0. DFT_BASIS_TOLERANCE (SCF); SCF — DFT basis cutoff. Type: conv double; Default:",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:24992,LOAD,LOAD,24992,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['LOAD'],['LOAD']
Performance,"Variables, OCC. Introduction¶; Orbital-optimized methods have several advantages over non-optimized counterparts.; Once the orbitals are optimized, the wave function will obey the Hellmann-Feynman theorem; for orbital rotation parameters. Therefore, there is no need for orbital response terms; in the evaluation of analytic gradients. In other words, it is unnecessary to solve the; first order coupled-perturbed CC and many-body perturbation theory (MBPT) equations.; Further, computation of one-electron properties is easier because there are no response contributions to the particle; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods; [Krylov:2000:vod]. Additionally, orbital-optimized coupled-cluster avoids spurious second-order; poles in its response function, and its transition dipole moments are gauge invarianti [Pedersen:1999:od].; Another advantage is that the orbital-optimized methods does not suffer from the artifactual symmetry-breaking; instabilities [Sherrill:1998:od], [Bozkaya:2011:omp2], and [Bozkaya:2011:omp3].; Further, Kurlancheek and Head-Gordon [Kurlancek:2009] demonstrated that first order properties such as; forces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs.; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further; discussed that the orbital response equations generally have a singularity problem at the unrestriction point; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or; small eigenvalues of the one-particle density matrix (OPDM). These abnormal eigenvalues may lead to unphysical; molecular properties such as vibrational frequencies. However, orbital optimized MP2 (hence Orbital optimized MP3); will solve this N-repres",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/occ-1.html:1335,optimiz,optimized,1335,psi4manual/4.0b4/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/occ-1.html,2,['optimiz'],['optimized']
Performance,"WN3 (RPA) LSDA Functional. s_x; Slater LSDA Exchange. vwn3rpa_c; VWN3 (RPA) LSDA Correlation. vwn3_c; VWN3 LSDA Correlation. vwn5rpa_c; VWN5 (RPA) LSDA Correlation. vwn5_c; VWN5 LSDA Correlation. dldf; Dispersionless Hybrid Meta-GGA XC Functional. dldf+d; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. dldf+d09; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. Warning; Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/opt-1.html:6809,perform,performs,6809,psi4manual/4.0b4/opt-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/opt-1.html,2,['perform'],['performs']
Performance,"WOSTEP). Type: integer; Default: 50. SCF_MEM_SAFETY_FACTOR (SCF); SCF — Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_TYPE (CPHF); CPHF — SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS; Default: DIRECT. SCF_TYPE (SCF); SCF — What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS; Default: PK. SCHMIDT_ADD_RESIDUAL_TOLERANCE (CCEOM); CCEOM — Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. SCHWARZ_CUTOFF (CPHF); CPHF — The schwarz cutoff value. Type: double; Default: 1.0e-12. SCREEN_INTS (LMP2); LMP2 — Do screen integrals?. Type: boolean; Default: false. SCS (LMP2); LMP2 — Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SCS (MP2); MP2 — Do perform a spin component scaled MP2 computation?. Type: boolean; Default: false. SCS_CCSD (CCENERGY); CCENERGY — Do spin-component-scaled CCSD. Type: boolean; Default: false. SCS_CEPA (CEPA); CEPA — Perform SCS-CEPA? If true, note that the default values for the spin component scaling factors are optimized for the CCSD method. Type: boolean; Default: false. SCS_MP2 (CCENERGY); CCENERGY — Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SCS_N (LMP2); LMP2 — Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SCS_N (MP2); MP2 — Do perform a spin component scaled (N) MP2 computation?. Type: boolean; Default: false. SCS_TYPE (OMP2); OMP2 — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCS_TYPE (OMP3); OMP3 — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCSN_MP2 (CCENERGY); CCENERGY — Do SCS-MP2 with parameters optimized for nucleic acids?. Type: bo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:112309,perform,perform,112309,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['perform'],['perform']
Performance,X_DENS; CFOUR_RES_RAMAN; CFOUR_RESTART_CC; CFOUR_ROT_EVEC; CFOUR_SAVE_INTS; CFOUR_SCALE_ON; CFOUR_SCF_CONV; CFOUR_SCF_DAMPING; CFOUR_SCF_EXPORDER; CFOUR_SCF_EXPSTART; CFOUR_SCF_EXTRAPOLATION; CFOUR_SCF_MAXCYC; CFOUR_SD_FIELD; CFOUR_SPHERICAL; CFOUR_SPIN_FLIP; CFOUR_SPIN_ORBIT; CFOUR_SPIN_SCAL; CFOUR_SPINROTATION; CFOUR_SUBGROUP; CFOUR_SYM_CHECK; CFOUR_SYMMETRY; CFOUR_T3_EXTRAPOL; CFOUR_TAMP_SUM; CFOUR_THERMOCHEMISTRY; CFOUR_TRANS_INV; CFOUR_TREAT_PERT; CFOUR_UIJ_THRESHOLD; CFOUR_UNITS; CFOUR_UPDATE_HESSIAN; CFOUR_VIBRATION; CFOUR_VTRAN; CFOUR_XFIELD; CFOUR_XFORM_TOL; CFOUR_YFIELD; CFOUR_ZFIELD; TRANSLATE_PSI4; CPHF_MEM_SAFETY_FACTOR; CPHF_TASKS; DEBUG; DF_BASIS_SCF; EXPLICIT_HAMILTONIAN; MODULE; PRINT; SCF_TYPE; SOLVER_CONVERGENCE; SOLVER_EXACT_DIAGONAL; SOLVER_MAX_SUBSPACE; SOLVER_MAXITER; SOLVER_MIN_SUBSPACE; SOLVER_N_GUESS; SOLVER_N_ROOT; SOLVER_NORM; SOLVER_PRECONDITION; SOLVER_PRECONDITION_MAXITER; SOLVER_PRECONDITION_STEPS; SOLVER_QUANTITY; SOLVER_TYPE; ALGORITHM; AO_BASIS; CACHELEVEL; DAMPING_PERCENTAGE; DCT_FUNCTIONAL; DCT_GUESS; DCT_TYPE; DF_BASIS_DCT; DIIS_MAX_VECS; DIIS_MIN_VECS; DIIS_START_CONVERGENCE; E_CONVERGENCE; ENERGY_LEVEL_SHIFT; GUESS_R_CONVERGENCE; INTS_TOLERANCE; MAXITER; ODC_GUESS; OPDM; ORBITAL_LEVEL_SHIFT; QC_COUPLING; QC_TYPE; R_CONVERGENCE; REFERENCE; RELAX_GUESS_ORBITALS; RESPONSE_ALGORITHM; STABILITY_ADD_VECTORS; STABILITY_AUGMENT_SPACE_TOL; STABILITY_CHECK; STABILITY_CONVERGENCE; STABILITY_MAX_SPACE_SIZE; STABILITY_N_EIGENVALUES; STABILITY_N_GUESS_VECTORS; THREE_PARTICLE; TIKHONOW_OMEGA; A_RAS3_MAX; AVG_STATES; AVG_WEIGHTS; B_RAS3_MAX; BENDAZZOLI; CALC_S_SQUARED; CC; CC_A_RAS3_MAX; CC_B_RAS3_MAX; CC_EX_LEVEL; CC_FIX_EXTERNAL; CC_FIX_EXTERNAL_MIN; CC_MACRO; CC_MIXED; CC_RAS3_MAX; CC_RAS34_MAX; CC_RAS4_MAX; CC_UPDATE_EPS; CC_VAL_EX_LEVEL; CC_VARIATIONAL; CC_VECS_READ; CC_VECS_WRITE; CI_FILE_START; CI_MAXITER; CI_NUM_THREADS; CIBLKS_PRINT; COLLAPSE_SIZE; DETCI_FREEZE_CORE; DF_BASIS_MCSCF; DIAG_METHOD; DIIS; DIIS_FREQ; DIIS_MAX_VECS; DIIS_MI,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:665171,CACHE,CACHELEVEL,665171,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,5,['CACHE'],['CACHELEVEL']
Performance,"Y WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU General Public License for more details.; #; # You should have received a copy of the GNU General Public License along; # with this program; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; #@END LICENSE; #. r""""""Stuff stolen from psi. Should import or not as necessary; or some better way. Apologies to the coders. """"""; import sys; import math; import re; from vecutil import *. def _success(label):; """"""Function to print a '*label*...PASSED' line to screen.; Used by :py:func:`util.compare_values` family when functions pass. """"""; print('\t{0:.<66}PASSED'.format(label)); sys.stdout.flush(). [docs]def compare_values(expected, computed, digits, label):; """"""Function to compare two values. Prints :py:func:`util.success`; when value *computed* matches value *expected* to number of *digits*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if abs(expected - computed) > 10 ** (-digits):; print(""\t%s: computed value (%f) does not match (%f) to %d digits."" % (label, computed, expected, digits)); sys.exit(1); if math.isnan(computed):; print(""\t%s: computed value (%f) does not match (%f) to %d digits.\n"" % (label, computed, expected, digits)); print(""\tprobably because the computed value is nan.""); sys.exit(1); _success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; rows = len(expected); cols = len(expected[0]); failed = 0; for row in range(rows):; for col in range(cols):; if abs(expected[row][col] - computed[row][col]) > 10 ** (-digits):; pr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/qcdb/psiutil.html:1554,Perform,Performs,1554,psi4manual/4.0b5/_modules/qcdb/psiutil.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/qcdb/psiutil.html,1,['Perform'],['Performs']
Performance,"YPE') == 'DF':; castdf = True; else:; castdf = False. if PsiMod.has_option_changed('SCF', 'DF_BASIS_GUESS'):; castdf = PsiMod.get_option('SCF', 'DF_BASIS_GUESS'); if yes.match(str(castdf)):; castdf = True; elif no.match(str(castdf)):; castdf = False. # sort out broken_symmetry settings.; if 'brokensymmetry' in kwargs:; molecule = PsiMod.get_active_molecule(); multp = molecule.multiplicity(); if multp != 1:; raise ValidationError('Broken symmetry is only for singlets.'); if PsiMod.get_option('SCF','REFERENCE') != 'UHF' and PsiMod.get_option('SCF','REFERENCE') != 'UKS':; raise ValidationError('You must specify ""set reference uhf"" to use broken symmetry.'); do_broken = True; else:; do_broken = False. precallback = None; if 'precallback' in kwargs:; precallback = kwargs.pop('precallback'). postcallback = None; if 'postcallback' in kwargs:; postcallback = kwargs.pop('postcallback'). # Hack to ensure cartesian or pure are used throughout; # Note that can't query PUREAM option directly, as it only; # reflects user changes to value, so load basis and; # read effective PUREAM setting off of it; PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')); PsiMod.set_global_option('PUREAM', PsiMod.MintsHelper().basisset().has_puream()). # broken set-up; if do_broken:; molecule.set_multiplicity(3); PsiMod.print_out('\n'); banner(' Computing high-spin triplet guess '); PsiMod.print_out('\n'). # cast set-up; if (cast):. if yes.match(str(cast)):; guessbasis = '3-21G'; else:; guessbasis = cast. if (castdf):; if yes.match(str(castdf)):; guessbasisdf = corresponding_jkfit(guessbasis); else:; guessbasisdf = castdf. # Switch to the guess namespace; namespace = PsiMod.IO.get_default_namespace(); PsiMod.IO.set_default_namespace((namespace + '.guess')). # Setup initial SCF; PsiMod.set_global_option('BASIS', guessbasis); if (castdf):; PsiMod.set_local_option('SCF', 'SCF_TYPE', 'DF'); PsiMod.set_local_option('SCF', 'DF_INTS_IO', 'none'); PsiMod.set_global_option('DF_BASIS_SCF', gue",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/proc.html:16526,load,load,16526,psi4manual/4.0b4/_modules/proc.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html,1,['load'],['load']
Performance,"YPE', mtd_type, reference, module, all_electron]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_omp3(name, **kwargs):; """"""Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ. func = None; if reference in ['RHF', 'UHF', 'ROHF', 'RKS', 'UKS']:; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc. if func is None:; raise ManagedMethodError(['select_omp3', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_omp3_gradient(name, **kwargs):; """"""Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ. func = None; if reference in ['RHF', 'UHF', 'ROHF', 'RKS', 'UKS']:; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient. if func is None:; raise ManagedMethodError(['select_omp3_gradient', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_mp2p5(name, **kwargs):; """"""Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE') if core.has_global_option_changed(""MP_TYPE"") else ""DF""; module = co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html:13718,perform,performance,13718,psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,3,['perform'],['performance']
Performance,"YPE: MP_TYPE,; CI_TYPE, CC_TYPE, which can have values CONV,; DF, and CD. These are all global keywords, as their values are; shared among modules rather than (or in addition to) being used internally; by the module). We’re sticking with SCF_TYPE and; MP2_TYPE defaulting to DF, while everything higher defaults; to CONV. In psi4/psi4/driver/driver.py, a managed method calls a; “select” function rather than a “run” function.; procedures = {; 'energy': {; 'scf' : run_scf,; 'mp3' : select_mp3,; 'dct' : run_dct,. Then in psi4/psi4/driver/procrouting/proc.py, the select function runs through; reference (always outer loop) and type (inner loop) to specify the proc; function to call for any able, non-default module (e.g., mtd_type ==; 'DETCI' ) or able, default module (e.g., mtd_typd == ['', 'FNOCC'] ).; Don’t worry about ‘else’ statements as anything that falls through will be; caught and a readable error generated.; def select_mp3(name, **kwargs):; """"""Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. """"""; reference = psi4.get_option('SCF', 'REFERENCE'); mtd_type = psi4.get_global_option('MP_TYPE'); module = psi4.get_global_option('QC_MODULE'); # Considering only [df]occ/fnocc/detci. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module == 'FNOCC':; func = run_fnocc; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module in ['DETCI']:; func = run_detci. if func is None:; raise ManagedMethodError(['select_mp3', name, 'MP_TYPE', mtd_typ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/proc_py-1.html:5117,perform,performance,5117,psi4manual/1.4.0/proc_py-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/proc_py-1.html,5,['perform'],['performance']
Performance,"Y¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. INTCOS_GENERATE_EXIT¶. Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. Optimizing Minima¶; First, define the molecule and basis in the input.; 1; 2; 3; 4; 5; 6; 7molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; 1optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; 1; 2set step_type nr; optimize('scf'). Optimize using energy points instead of gradients:; 1optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; 1; 2set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:; 1; 2; 3; 4; 5; 6; 7set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:; 1; 2set full_hess_every 1; optimize('scf'). Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_EVERY keyword. Transition States, Reaction Paths, and Constrained Optimizat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/optking-1.html:4540,optimiz,optimize,4540,psi4manual/1.1.0/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/optking-1.html,6,['optimiz'],['optimize']
Performance,"Y¶; The nuclear repulsion energy contribution [Eh] to the total SCF energy.; Quantity \(E_{NN}\) in Eq. (4). (3)¶\[E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}\]. OCEPA(0) TOTAL ENERGY¶. OCEPA(0) CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the orbital-optimized CEPA(0) level of theory. OLCCD TOTAL ENERGY¶. OLCCD CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the orbital-optimized linearized coupled cluster doubles level of theory. OLCCD REFERENCE CORRECTION ENERGY¶; The additional correction to the SCF reference energy [Eh]; for the orbital-optimized linearized coupled cluster doubles level of theory. OMP2 TOTAL ENERGY¶. OMP2 CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the orbital-optimized MP2 level of theory. OMP2.5 TOTAL ENERGY¶. OMP2.5 CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the orbital-optimized MP2.5 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the orbital-optimized MP3 level of theory. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [Eh] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). PCM POLARIZATION ENERGY¶; The energy contribution [Eh] from the polarizable continuum model for solvation. PE ENERGY¶; The energy contribution [Eh] from the polarizable embedding model for solvation. QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [Eh] and correlation energy component [Eh]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html:33902,optimiz,optimized,33902,psi4manual/1.4.0/glossary_psivariables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/glossary_psivariables-1.html,5,['optimiz'],['optimized']
Performance,Y¶; The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. OMP2.5 REFERENCE CORRECTION ENERGY¶; The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. OMP3 TOTAL ENERGY¶. OMP3 CORRELATION ENERGY¶; The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. OMP3 REFERENCE CORRECTION ENERGY¶; The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. OREMP2 TOTAL ENERGY¶. OREMP2 CORRELATION ENERGY¶; The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree Møller–Plesset; hybrid perturbation theory level. OREMP2 REFERENCE CORRECTION ENERGY¶; The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; Møller–Plesset hybrid perturbation theory level. ONE-ELECTRON ENERGY¶; The one-electron energy contribution [E_h] to the total SCF energy.; Quantity \(E_{1e^-}\) in Eq. (4). PCM POLARIZATION ENERGY¶; The energy contribution [E_h] from the polarizable continuum model for solvation. DD SOLVATION ENERGY¶; The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. PE ENERGY¶; The energy contribution [E_h] from the polarizable embedding model for solvation. QCISD TOTAL ENERGY¶. QCISD CORRELATION ENERGY¶; The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. QCISD(T) TOTAL ENERGY¶. QCISD(T) CORRELATION ENERGY¶; The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correc,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/glossary_psivariables.html:43984,optimiz,optimized,43984,psi4manual/master/glossary_psivariables.html,https://psicode.org,https://psicode.org/psi4manual/master/glossary_psivariables.html,4,['optimiz'],['optimized']
Performance,"Z H2O geom from Olsen et al., JCP 104, 8007 (1996). cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfmp2_2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mp2_1; All-electron MP2 6-31G** geometry optimization of water. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. props2; DF",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html:15103,optimiz,optimization,15103,psi4manual/4.0b2/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html,4,['optimiz'],['optimization']
Performance,"Z basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cepa1; cc-pvdz H2O Test CEPA(1) Energy. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. dftd3-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. cc36; CC2(RHF)/cc-pVDZ energy of H2O. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html:20519,optimiz,optimization,20519,psi4manual/4.0b4/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html,8,['optimiz'],['optimization']
Performance,"Z frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfremp-1; density fitted REMP/cc-pVDZ energies for the CO2 molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. aediis-2; EDIIS test case from 10.1063/1.1470195. scf-response3; UHF Dipole Polarizability Test. mom-h2o-3; MOM excitation from LUMO HOMO+3. extern3; External potential calculation with one Ghost atom and one point charge at the same position. pywrap-cbs1; Various basis set extrapolation tests. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. numpy-array-interface; Numpy interface testing. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. mom-h2o-4; MOM excitation from LUMO HOMO+4. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cbs-xtpl-dict; Extrapolated water energies. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. opt2-fd; SCF DZ allene",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:35158,Optimiz,Optimization,35158,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['Optimiz'],['Optimization']
Performance,"Z interaction energy between Ne and Ar atoms. sapt11; sapt example with orbital freezing with alkali metal and dMP2. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbody-he-4b; MP2/aug-cc-pvDZ many body energies of an arbitrary Helium complex, addressing 4-body formulas. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-guess-read3; Test if the the guess read in the same basis converges. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. cbs-xtpl-func; optimization with method defined via cbs. cc42; RHF-CC2-LR/STO-3G optical rotati",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:16168,optimiz,optimization,16168,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimization']
Performance,"Z of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa-module; routing check on lccd, lccsd, cepa(0). dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. ao-casscf-sp; CASSCF/6-31G** energy point. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecul",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:39114,perform,performed,39114,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['perform'],['performed']
Performance,"Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). full_hess_every = PsiMod.get_local_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. # are we in sow/reap mode?; isSowReap = False; if ('mode' in ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/driver.html:49643,optimiz,optimization,49643,psi4manual/4.0b4/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html,2,['optimiz'],['optimization']
Performance,"Z-matrix input. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). casscf-fzc-sp; CASSCF/6-31G** energy point. scf-coverage; Lithium test for coverage. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cisd-sp; 6-31G** H2O Test CISD Energy Point. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. props4; Electrostatic potential and electric field evaluated on a grid around water. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. dft2; DFT Functional Test. dfomp2-grad2; OMP2 ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:25089,perform,performs,25089,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['perform'],['performs']
Performance,"ZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_CORE (SAPT); SAPT — The scope of core orbitals to freeze in evaluation of SAPT and terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_INTERFRAG (OPTKING); OPTKING — Do freeze all interfragment modes?. Type: boolean; Default: false. FREEZE_INTRAFRAG (OPTKING); OPTKING — Do freeze all fragments rigid?. Type: boolean; Default: false. FROZEN_BEND (OPTKING); OPTKING — Specify angles between atoms to be frozen. Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be frozen. Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be frozen. Type: string; Default: No Default. FROZEN_DOCC (GLOBALS); GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_DOCC (PSIMRCC); PSIMRCC — The number of frozen occupied orbitals per irrep. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS); GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FROZEN_UOCC (PSIMRCC); PSIMRCC — The number of frozen virtual orbitals per irrep. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING); OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MA",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:49407,optimiz,optimized,49407,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimized']
Performance,"ZEN_DOCC and RESTRICTED_DOCC, or between; FROZEN_UOCC and RESTRICTED_UOCC. There are; differences between these keywords for MCSCF: Multi-Configurational Self-Consistent-Field. Basic DETCI Keywords¶. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. FCI¶. Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. CI_MAXITER¶. Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. NUM_ROOTS¶. number of CI roots to find. Type: integer; Default: 1. ICORE¶. Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/detci.html:7777,optimiz,optimized,7777,psi4manual/master/detci.html,https://psicode.org,https://psicode.org/psi4manual/master/detci.html,9,['optimiz'],['optimized']
Performance,"ZP, TZ, TZP, TZ2P, PVDZ, PVTZ, PVQZ, PV5Z, PV6Z, PCVDZ, PCVTZ, PCVQZ, PCV5Z, PCV6Z, AUG-PVDZ, AUG-PVTZ, AUG-PVTZ, AUG-PVQZ, AUG-PV5Z, AUG-PV6Z, D-AUG-PVDZ, D-AUG-PVTZ, D-AUG-PVQZ, D-AUG-PV5Z, D-AUG-PV6Z, cc-pVDZ, cc-pVTZ, cc-pVQZ, cc-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV¶. experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER¶. Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS¶. The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL¶. Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV¶. Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than , where is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER¶. Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION¶. Specifies the type of convergence acceleration used to solve the CC equations.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:8274,perform,performed,8274,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,2,['perform'],['performed']
Performance,"ZP, TZ, TZP, TZ2P, PVDZ, PVTZ, PVQZ, PV5Z, PV6Z, PCVDZ, PCVTZ, PCVQZ, PCV5Z, PCV6Z, AUG-PVDZ, AUG-PVTZ, AUG-PVTZ, AUG-PVQZ, AUG-PV5Z, AUG-PV6Z, D-AUG-PVDZ, D-AUG-PVTZ, D-AUG-PVQZ, D-AUG-PV5Z, D-AUG-PV6Z, cc-pVDZ, cc-pVTZ, cc-pVQZ, cc-pV5Z, cc-pV6Z, cc-pCVDZ, cc-pCVTZ, cc-pCVQZ, cc-pCV5Z, cc-pCV6Z, PWCVDZ, PWCVTZ, PWCVQZ, PWCV5Z, PWCV6Z, PwCVDZ, PwCVTZ, PwCVQZ, PwCV5Z, PwCV6Z, svp, dzp, tzp, tzp2p, qz2p, pz3d2f, 13s9p4d3f, WMR, ANO0, ANO1, ANO2, EVEN_TEMPERED, SPECIAL; Default: SPECIAL. CFOUR_BRUCK_CONV¶. experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER¶. Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS¶. The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL¶. Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Possible Values: SCF, HF, MBPT(2), MP2, MBPT(3), MP3, SDQ-MBPT(4), SDQ-MP4, MBPT(4), MP4, CCD, CCSD, CCSD(T), CCSDT-1, CCSDT-1b, CCSDT-2, CCSDT-3, CCSDT-4, CCSDT, CC2, CC3, QCISD, QCISD(T), CID, CISD, UCC(4), B-CCD; Default: SCF. CFOUR_CC_CONV¶. Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER¶. Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION¶. Specifies the type of convergence acceleration used to solve the",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html:8372,perform,performed,8372,psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,4,['perform'],['performed']
Performance,"Z_CUTOFF (CPHF); CPHF — The schwarz cutoff value. Type: double; Default: 1.0e-12. SCREEN_INTS (LMP2); LMP2 — Do screen integrals?. Type: boolean; Default: false. SCS (LMP2); LMP2 — Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SCS_CCSD (CCENERGY); CCENERGY — Do spin-component-scaled CCSD. Type: boolean; Default: false. SCS_CCSD (FNOCC); FNOCC — Do SCS-CCSD?. Type: boolean; Default: false. SCS_CEPA (FNOCC); FNOCC — Do SCS-CEPA? Note that the scaling factors will be identical to those for SCS-CCSD. Type: boolean; Default: false. SCS_MP2 (CCENERGY); CCENERGY — Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SCS_MP2 (FNOCC); FNOCC — Do SCS-MP2?. Type: boolean; Default: false. SCS_N (LMP2); LMP2 — Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SCS_TYPE (OCC); OCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCSN_MP2 (CCENERGY); CCENERGY — Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SEKINO (CCLAMBDA); CCLAMBDA — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEKINO (CCRESPONSE); CCRESPONSE — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEM_MAXITER (ADC); ADC — Maximum iteration number in simultaneous expansion method. Type: integer; Default: 30. SEMICANONICAL (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCEOM); CCEOM — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCSORT); CCSORT — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCTRIPLES); CCTRIPLES — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (TRANSQT2); TRANSQT2 — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SF_RESTRICT (DETCI); DETCI (Expert) — Do eliminate determinants not vali",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:119150,optimiz,optimized,119150,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimized']
Performance,"Z_FILE¶. Should an xyz trajectory file be kept (useful for visualization)?. Type: boolean; Default: false. RFO_FOLLOW_ROOT¶. Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_NORMALIZATION_MAX¶. Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT¶. Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RSRFO_ALPHA_MAX¶. Absolute maximum value of RS-RFO. Type: double; Default: 1e8. STEP_TYPE¶. Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SYMM_TOL¶. Symmetry tolerance for testing whether a mode is symmetric. Type: conv double; Default: 0.05. Convergence Control¶. FLEXIBLE_G_CONVERGENCE¶. Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. G_CONVERGENCE¶. Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. MAX_DISP_G_CONVERGENCE¶. Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE¶. Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE¶. Convergence criterion for geometry optmization: maximum force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. RMS_DISP_G_CONVERGENCE¶. Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. RMS_FORCE_G_CON",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__optking-1.html:3982,optimiz,optimization,3982,psi4manual/1.1.0/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__optking-1.html,2,['optimiz'],['optimization']
Performance,"Z_FILE¶. Should an xyz trajectory file be kept (useful for visualization)?. Type: boolean; Default: false. RFO_FOLLOW_ROOT¶. Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_NORMALIZATION_MAX¶. Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT¶. Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RSRFO_ALPHA_MAX¶. Absolute maximum value of RS-RFO. Type: double; Default: 1e8. STEP_TYPE¶. Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SYMM_TOL¶. Symmetry tolerance for testing whether a mode is symmetric. Type: conv double; Default: 0.05. Convergence Control¶. FLEXIBLE_G_CONVERGENCE¶. Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. G_CONVERGENCE¶. Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. MAX_DISP_G_CONVERGENCE¶. Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE¶. Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE¶. Convergence criterion for geometry optmization: maximum force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. RMS_DISP_G_CONVERGENCE¶. Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodir_options_c/module__optking-1.html:3982,optimiz,optimization,3982,psi4manual/1.2.1/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodir_options_c/module__optking-1.html,9,['optimiz'],['optimization']
Performance,"['', 'OCC']:; func = run_dfocc_property. if func is None:; raise ManagedMethodError(['select_omp2p5_property', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_omp3_property(name, **kwargs):; """"""Function selecting the algorithm for an OMP3 property call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ. func = None; if reference in ['RHF', 'UHF', 'ROHF', 'RKS', 'UKS']:; if mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_property. if func is None:; raise ManagedMethodError(['select_omp3_property', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_olccd_property(name, **kwargs):; """"""Function selecting the algorithm for an OLCCD property call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CC_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ. func = None; if reference in ['RHF', 'UHF', 'ROHF', 'RKS', 'UKS']:; if mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_property. if func is None:; raise ManagedMethodError(['select_olccd_property', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_mp3(name, **kwargs):; """"""Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE') if core.has_global_option_changed(""MP_TYPE"") else ""DF""; module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/fnocc/detci. func ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html:9715,perform,performance,9715,psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,3,['perform'],['performance']
Performance,"['db_name'] = db_name. # Establish function to call; if not('db_func' in kwargs):; if ('func' in kwargs):; kwargs['db_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['db_func'] = energy; func = kwargs['db_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper database.' % (func.__name__)); if (func is cp):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'. Use the cp keyword within database instead.' % (func.__name__)). # Define path and load module for requested database; sys.path.append('%sdatabases' % (PsiMod.Process.environment[""PSIDATADIR""])); sys.path.append('%s/lib/databases' % PsiMod.psi_top_srcdir()); try:; database = __import__(db_name); except ImportError:; PsiMod.print_out('\nPython module for database %s failed to load\n\n' % (db_name)); PsiMod.print_out('\nSearch path that was tried:\n'); PsiMod.print_out("", "".join(map(str, sys.path))); raise ValidationError(""Python module loading problem for database "" + str(db_name)); else:; dbse = database.dbse; HRXN = database.HRXN; ACTV = database.ACTV; RXNM = database.RXNM; BIND = database.BIND; TAGL = database.TAGL; GEOS = database.GEOS. # Must collect (here) and set (below) basis sets after every new molecule activation; user_basis = PsiMod.get_option('BASIS'); user_df_basis_scf = PsiMod.get_option('DF_BASIS_SCF'); user_df_basis_mp2 = PsiMod.get_option('DF_BASIS_MP2'); user_df_basis_sapt = PsiMod.get_option('DF_BASIS_SAPT'); user_df_basis_elst = PsiMod.get_option('DF_BASIS_ELST'). b_user_reference = PsiMod.has_global_option_changed('REFERENCE'); user_reference = PsiMod.get_option('REFERENCE'); user_memory = PsiMod.get_memory(). user_molecule = PsiMod.get_active_molecule(). # Configuration based upon e_name & db_name options; # Force non-supramolecular if needed; if re.match(r'^sapt', lowername):; try:; database.ACTV_SA; except AttributeError:; raise ValidationError('Database %s not suitable for non-supramolecular calculation.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html:30039,load,loading,30039,psi4manual/4.0b2/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html,1,['load'],['loading']
Performance,"[1], [2]. fy() psi4.core.Molecule method, [1], [2]. fZ() psi4.core.Molecule method, [1], [2]. fz() psi4.core.Molecule method, [1], [2]. fzc() psi4.core.MOSpace method, [1], [2]. fzv() psi4.core.MOSpace method, [1], [2]. G. G_CONVERGENCE (OPTKING). gamma() psi4.core.CharacterTable method, [1], [2]. gau2grid. GAUGE (CCDENSITY). (CCRESPONSE). Gaussian Formatted Checkpoint. GaussianShell class in psi4.core, [1]. GaussianType class in psi4.core, [1]. gCP. GDMA. gdma() in module psi4. in module psi4.driver. GDMA_LIMIT (GDMA). GDMA_MULTIPOLE_UNITS (GDMA). GDMA_ORIGIN (GDMA). GDMA_RADIUS (GDMA). GDMA_SWITCH (GDMA). gemm() psi4.core.Matrix method, [1], [2]. genbas() psi4.core.BasisSet method, [1], [2]. general. ; setting keywords. general_invert() psi4.core.Matrix method, [1], [2]. generate_oei() psi4.core.IntegralTransform method, [1], [2]. GEOM_MAXITER (OPTKING). geometry optimization. ; IRC. constrained. convergence criteria. function call. minima. output. transition state. geometry optimization, optimization. geometry() in module psi4.driver. psi4.core.Molecule method, [1], [2]. GeometryUnits class in psi4.core, [1]. get() psi4.core.IntVector method, [1], [2]. psi4.core.Matrix method, [1], [2]. psi4.core.Vector method, [1], [2]. get_active_molecule() in module psi4.core, [1]. get_algorithm() psi4.core.FittingMetric method, [1], [2]. get_amplitudes() psi4.core.CCWavefunction method, [1], [2]. get_AO_core() psi4.core.DFHelper method, [1], [2]. get_AO_size() psi4.core.DFHelper method, [1], [2]. get_array() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. get_atomic_point_charges() in module psi4.core, [1]. get_basisset() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.D",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/genindex-1.html:67802,optimiz,optimization,67802,psi4manual/1.3.2/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html,4,['optimiz'],['optimization']
Performance,"[1], [2]. integrals_erfc() psi4.core.MintsHelper method, [1], [2]. IntegralTransform class in psi4.core, [1]. IntegralTransform.FrozenOrbitals class in psi4.core, [1]. IntegralTransform.HalfTrans class in psi4.core, [1]. IntegralTransform.MOOrdering class in psi4.core, [1]. IntegralTransform.OutputType class in psi4.core, [1]. IntegralTransform.SpinType class in psi4.core, [1]. IntegralTransform.TransformationType class in psi4.core, [1]. INTERFRAG_DIST_INV (OPTKING). INTERFRAG_HESS (OPTKING). INTERFRAG_MODE (OPTKING). INTERFRAG_STEP_LIMIT (OPTKING). INTERFRAGMENT_CONNECT (OPTKING). INTERNAL_ROTATIONS (MCSCF). INTRAFRAG_HESS (OPTKING). INTRAFRAG_STEP_LIMIT (OPTKING). INTRAFRAG_STEP_LIMIT_MAX (OPTKING). INTRAFRAG_STEP_LIMIT_MIN (OPTKING). INTS_TOLERANCE (CCDENSITY). (DCFT). (DFMP2). (FISAPT). (MRCC). (SAPT). (SCF). IntVector class in psi4.core, [1]. invert() psi4.core.Matrix method, [1], [2]. IO class in psi4.core, [1]. IOManager class in psi4.core, [1]. IP_POLES (OCC). IRC. ; geometry optimization. IRC_DIRECTION (OPTKING). IRC_STEP_SIZE (OPTKING). IRC_STOP (OPTKING). IrreducibleRepresentation class in psi4.core, [1]. irrep() psi4.core.CdSalc method, [1], [2]. irrep_index() psi4.core.CdSalc method, [1], [2]. irrep_labels() psi4.core.Molecule method, [1], [2]. is_c_hybrid() psi4.core.SuperFunctional method, [1], [2]. is_c_lrc() psi4.core.SuperFunctional method, [1], [2]. is_c_scs_hybrid() psi4.core.SuperFunctional method, [1], [2]. is_cartesian() psi4.core.GaussianShell method, [1], [2]. is_done() psi4.core.AOShellCombinationsIterator method, [1], [2]. is_gga() psi4.core.Functional method, [1], [2]. psi4.core.LibXCFunctional method, [1]. psi4.core.SuperFunctional method, [1], [2]. is_inverted() psi4.core.FittingMetric method, [1], [2]. is_libxc_func() psi4.core.SuperFunctional method, [1], [2]. is_lrc() psi4.core.Functional method, [1], [2]. psi4.core.LibXCFunctional method, [1]. is_meta() psi4.core.Functional method, [1], [2]. psi4.core.LibXCFunctional method, [1]. ps",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/genindex-1.html:80896,optimiz,optimization,80896,psi4manual/1.3.2/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html,2,['optimiz'],['optimization']
Performance,"[1], [2]. integrals_erfc() psi4.core.MintsHelper method, [1], [2]. IntegralTransform class in psi4.core, [1]. IntegralTransform.FrozenOrbitals class in psi4.core, [1]. IntegralTransform.HalfTrans class in psi4.core, [1]. IntegralTransform.MOOrdering class in psi4.core, [1]. IntegralTransform.OutputType class in psi4.core, [1]. IntegralTransform.SpinType class in psi4.core, [1]. IntegralTransform.TransformationType class in psi4.core, [1]. INTERFRAG_DIST_INV (OPTKING). INTERFRAG_HESS (OPTKING). INTERFRAG_MODE (OPTKING). INTERFRAG_STEP_LIMIT (OPTKING). INTERFRAGMENT_CONNECT (OPTKING). INTERNAL_ROTATIONS (MCSCF). INTRAFRAG_HESS (OPTKING). INTRAFRAG_STEP_LIMIT (OPTKING). INTRAFRAG_STEP_LIMIT_MAX (OPTKING). INTRAFRAG_STEP_LIMIT_MIN (OPTKING). INTS_TOLERANCE (CCDENSITY). (DCFT). (DFMP2). (FISAPT). (MRCC). (SAPT). (SCF). IntVector class in psi4.core, [1]. invert() psi4.core.Matrix method, [1], [2]. IO class in psi4.core, [1]. IOManager class in psi4.core, [1]. IP_POLES (OCC). IRC. ; geometry optimization. IRC_DIRECTION (OPTKING). IRC_STEP_SIZE (OPTKING). IRC_STOP (OPTKING). irrep_labels() psi4.core.Molecule method, [1], [2]. is_c_hybrid() psi4.core.SuperFunctional method, [1], [2]. is_c_lrc() psi4.core.SuperFunctional method, [1], [2]. is_c_scs_hybrid() psi4.core.SuperFunctional method, [1], [2]. is_cartesian() psi4.core.GaussianShell method, [1], [2]. is_done() psi4.core.AOShellCombinationsIterator method, [1], [2]. is_gga() psi4.core.Functional method, [1], [2]. psi4.core.LibXCFunctional method, [1]. psi4.core.SuperFunctional method, [1], [2]. is_inverted() psi4.core.FittingMetric method, [1], [2]. is_libxc_func() psi4.core.SuperFunctional method, [1], [2]. is_lrc() psi4.core.Functional method, [1], [2]. psi4.core.LibXCFunctional method, [1]. is_meta() psi4.core.Functional method, [1], [2]. psi4.core.LibXCFunctional method, [1]. psi4.core.SuperFunctional method, [1], [2]. is_poisson() psi4.core.FittingMetric method, [1], [2]. is_pure() psi4.core.GaussianShell method, [1],",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/genindex-1.html:68465,optimiz,optimization,68465,psi4manual/1.2.1/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/genindex-1.html,2,['optimiz'],['optimization']
Performance,"[2]. c2_z() psi4.core.SymmetryOperation method, [1], [2]. C_add() psi4.core.VBase method, [1], [2]. c_alpha() psi4.core.SuperFunctional method, [1], [2]. C_clear() psi4.core.JK method, [1], [2]. psi4.core.VBase method, [1], [2]. c_functional() psi4.core.SuperFunctional method, [1], [2]. C_left_add() psi4.core.JK method, [1], [2]. c_omega() psi4.core.SuperFunctional method, [1], [2]. c_os_alpha() psi4.core.SuperFunctional method, [1], [2]. C_right_add() psi4.core.JK method, [1], [2]. c_ss_alpha() psi4.core.SuperFunctional method, [1], [2]. Ca() psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. Ca_subset() psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. CACHELEVEL (ADC). (CCDENSITY). (CCENERGY). (CCEOM). (CCHBAR). (CCLAMBDA). (CCRESPONSE). (CCTRANSORT). (DCFT). (OCC). CACHETYPE (CCENERGY). (CCEOM). CALC_S_SQUARED (DETCI). CANONICALIZE_ACTIVE_FAVG (MCSCF). CANONICALIZE_INACTIVE_FAVG (MCSCF). CART_HESS_READ (OPTKING). Cartesian psi4.core.GaussianType attribute, [1], [2]. Cb() psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. Cb_subset() psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. cbs(). ; extrapolation schemes. output. setting keywords. theory, [1]. cbs() in module psi4. in module psi4.driver. CBSCORRELATIONENERGY. CBSREFERENCEENERGY. CBSTOTALENERGY. CC. ; theory. CC (DETCI). CC(n-1)(n)_LCORRELATIONENERGY. CC(n-1)(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/genindex-1.html:12997,CACHE,CACHELEVEL,12997,psi4manual/1.1.0/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/genindex-1.html,2,['CACHE'],['CACHELEVEL']
Performance,"[Dict[str, Any]]. \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; >>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). >>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). Return type:; List[Dict[str, Any]]. psi4.driver.aliases.allen_focal_point(**kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306, https://doi.org/10.1063/1.2747241 .; Uses the composite wrapper to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code.; :rtype: List[Dict[str, Any]]. \[E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}\]; >>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). >>> # [2] single-point energy reducing the Hartree-Fock basis sets size; >>> energy('allen_focal_point', scf_basis='cc-pV[TQ5]Z'). Return type:; List[Dict[str, Any]]. Additional composite aliases are easy to define by the; user. Follow models in psi4/psi4/driver/aliases.py; and cbs-xtpl-nbody and use the; psi4.driver.driver_cbs_helper.registe",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/cbs.html:31700,perform,performed,31700,psi4manual/master/cbs.html,https://psicode.org,https://psicode.org/psi4manual/master/cbs.html,3,['perform'],['performed']
Performance,"[beta3] » ; Appendices »; Keywords by Module ». CCENERGY¶; Computes coupled cluster energies. Called as part of any coupled cluster computation. General¶. ABCD¶. Type of ABCD algorithm will be used. Type: string; Possible Values: NEW, OLD; Default: NEW. ANALYZE¶. Do analyze T2 amplitudes. Type: boolean; Default: false. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Type: conv double; Default: 1e-5. CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CC_NUM_THREADS¶. Number of threads. Type: integer; Default: 1. CC_OS_SCALE¶. Coupled-cluster opposite-spin scaling value. Type: double; Default: 1.27. CC_SS_SCALE¶. Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. DIIS¶. Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. LOCAL¶. Do simulate the effects of local correlation techniques?. Type: boolean; Default: false. LOCAL_CPHF_CUTOFF¶. Cutoff value for local-coupled-perturbed-Hartree-Fock. Type: double; Default: 0.10. LOCAL_CUTOFF¶. Value (always between one and zero) for the Br",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__ccenergy-1.html:1107,CACHE,CACHETYPE,1107,psi4manual/4.0b3/autodir_options_c/module__ccenergy-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__ccenergy-1.html,2,['CACHE'],['CACHETYPE']
Performance,"[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). 1; 2>>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). 1; 2>>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) COR",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/cbs-1.html:12730,perform,performed,12730,psi4manual/1.1.0/cbs-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/cbs-1.html,4,['perform'],['performed']
Performance,"[lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). # Select certain irreps; if 'irrep' in kwargs:; irrep = parse_cotton_irreps(kwargs['irrep']) - 1 # externally, A1 irrep is 1, internally 0; else:; irrep = -1 # -1 implies do all irreps. # Does an analytic procedure exist for the requested method?; if (dertype == 2):; # We have the desired method. Do it.; procedures['hessian'][lowername](lowername, **kwargs); optstash.restore(). # call thermo module; PsiMod.thermo(). return PsiMod.wavefunction().energy(). elif (dertype == 1):; # Ok, we're doing frequencies by gradients; info = 'Performing finite difference by gradient calculations'; print(info). func = procedures['gradient'][lowername]. # Obtain list of displacements; displacements = PsiMod.fd_geoms_freq_1(irrep). molecule.reinterpret_coordentry(False); molecule.fix_orientation(True); # Make a note of the undisplaced molecule's symmetry; PsiMod.set_parent_symmetry(molecule.schoenflies_symbol()). ndisp = len(displacements); print(' %d displacements needed.' % ndisp). #print displacements to output.dat; #for n, displacement in enumerate(displacements):; # displacement.print_out();. gradients = []; for n, displacement in enumerate(displacements):; # Print information to output.dat; PsiMod.print_out('\n'); banner('Loading displacement %d of %d' % (n + 1, ndisp)). # Print information to the screen; print(' %d' % (n + 1), end=""""); if (n + 1) == ndisp:; print('\n', end=""""); sys.stdout.flush(). # Load in displacement into the active molecule (xyz coordinates only); molecule.set_geometry(displacement). # Perform th",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/driver.html:63067,Perform,Performing,63067,psi4manual/4.0b4/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html,1,['Perform'],['Performing']
Performance,"[p] == 'Cl':; d = 1.639; if symbol[p] == 'Ar':; d = 1.595; ; return d / 1.5. #Automatically detect fragments and build a new molecule for fragment; #needing methods (SAPT0, etc...); [docs]def auto_fragments(name, **kwargs):; r""""""; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. usage: auto_fragments(''); """"""; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); ; geom = molecule.save_string_xyz(). numatoms = molecule.natom(); VdW = [1.2, 1.7, 1.5, 1.55, 1.52, 1.9, 1.85, 1.8]; ; symbol = range(numatoms); X = [0.0] * numatoms; Y = [0.0] * numatoms; Z = [0.0] * numatoms; ; Queue = []; White = []; Black = []; F = geom.split('\n'); for f in range(0, numatoms):; A = F[f+1].split(); symbol[f] = A[0]; X[f] = float(A[1]); Y[f] = float(A[2]); Z[f] = float(A[3]); White.append(f); Fragment = [[] for i in range(numatoms)] # stores fragments. start = 0 # starts with the first atom in the list; Queue.append(start); White.remove(start). frag = 0; ; while((len(White) > 0) or (len(Queue) > 0)): # Iterates to the next fragment; while(len(Queue) > 0): # BFS within a fragment; for u in Queue: # find all nearest Neighbors; # (still coloured white) to vertex u; for i in White:; Distance = math.sqrt((X[i] - X[u]) * (X[i] - X[u]) +; (Y[i] - Y[u]) * (Y[i] - Y[u]) +; (Z[i] - Z[u]) * (Z[i] - Z[u])); if Distance < convert(u,symbol) + convert(i,symbol):; Queue.append(i) # if you find you, put it in the que; White.remove(i) # and remove it from the untouched list; Queue.remove(u) # remove focus from Queue; Black.append(u); Fragment[frag].append(int(u + 1)) # add to group (adding 1 to start; # list at one instead of zero). if(len(White) != 0): # cant move White->Queue if no more exist; Queue.append(White[0]); White.remove(White[0]); frag += 1; ; new_geom = """"""\n0 1\n"""""" ; for i in Fragment[0]:; new_geom = new_geom + F[i].lstrip() + """"""\n""""""; new_geom = new_geom + """"""--\",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html:2534,Queue,Queue,2534,psi4manual/4.0b2/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html,1,['Queue'],['Queue']
Performance,"\(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE)¶CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT)¶CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY)¶CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM)¶CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI)¶DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:11002,CACHE,CACHETYPE,11002,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,18,"['CACHE', 'cache']","['CACHETYPE', 'cache']"
Performance,"\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (string) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual]. ccd; coupled cluster doubles (CCD) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/opt-1.html:2877,optimiz,optimizations,2877,psi4manual/1.3.2/opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/opt-1.html,2,['optimiz'],['optimizations']
Performance,"\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (string) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual]. ccd; coupled cluster doubles (CCD) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj;  . b1pw91; B1PW91 Hyb-GGA Ex",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html:2251,optimiz,optimizations,2251,psi4manual/1.3.2/api/psi4.driver.opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html,4,['optimiz'],['optimizations']
Performance,"\hat{K}} \hat{W}_{N} e^{\hat{K}}\end{split}\]; where \(\hat{f}_{N}\), and \(\hat{W}_{N}\) are the one- and two-electron components of normal-ordered Hamiltonian. Then,; first and second derivatives of the energy with respect to the \({\bf \kappa}\) parameter at \({\bf \kappa} = 0\). \[w_{pq} = \frac{\partial \widetilde{E}}{\partial \kappa_{pq}}\]. \[A_{pq,rs} = \frac{\partial^2 \widetilde{E}}{\partial \kappa_{pq} \partial \kappa_{rs}}\]; Then the energy can be expanded up to second-order as follows. \[\widetilde{E}^{(2)}({\bf \kappa}) = \widetilde{E}^{(0)} + {\bf \kappa^{\dagger} w} + \frac{1}{2}~{\bf \kappa^{\dagger} A \kappa}\]; where \({\bf w}\) is the MO gradient vector, \({\bf \kappa}\) is the MO rotation vector,; and \({\bf A}\) is the MO Hessian matrix. Therefore, minimizing the energy with respect to \({\bf \kappa}\); yields. \[{\bf \kappa} = -{\bf A^{-1}w}\]; This final equation corresponds to the usual Newton-Raphson step.; Publications resulting from the use of the orbital-optimized code should cite the following publications:. OMP2 [Bozkaya:2011:omp2] and [Bozkaya:2013:omp2grad]; OMP3 [Bozkaya:2011:omp3] , [Bozkaya:2013:omp3], and [Bozkaya:2013:omp3grad]; OMP2.5 [Bozkaya:2011:omp3]; OLCCD [Bozkaya:2013:ocepa]; LCCD [Bozkaya:2013:ocepa]. Convergence Problems¶; For problematic open-shell systems, we recommend to use the ROHF or DFT orbitals as an initial guess for orbital-optimized methods. Both ROHF and; DFT orbitals may provide better initial guesses than UHF orbitals, hence convergence may be significantly speeded up with ROHF or DFT orbitals.; In order to use ROHF orbitals, simply set reference rohf. For DFT orbitals, set reference uks and set dft_functional b3lyp. Of; course users can use any DFT functional available in PSI4. Methods¶; The orbital-optimized MPn and OLCCD methods currently supported in; PSI4 are outlined in Table Orbital-Optimzed OCC/DFOCC; Methods. The following methods are available; and can be controlled through OCC (conventional in",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/occ-1.html:8271,optimiz,optimized,8271,psi4manual/1.1.0/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/occ-1.html,11,['optimiz'],['optimized']
Performance,"\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC¶. Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS¶. This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT¶. Controls amount of debug printing performed by xjoda. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV¶. Convergence threshold for linear equations controlled by LINEQ_TYPE. Equations are iterated until smallest residual falls below \(10^{-N}\), where \(N\) is the value associated with this keyword. Type: integer; Default: 7. CFOUR_LINEQ_MAXCY¶. The maximum number of iterations in all linear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE¶. Determines the algorithm used to solve linear equations ( \(\Lambda\) and derivative \(T\) and \(\Lambda\) ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not guaranteed to conv",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html:35273,perform,performed,35273,psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,15,['perform'],['performed']
Performance,"\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:10066,CACHE,CACHETYPE,10066,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,12,"['CACHE', 'cache']","['CACHETYPE', 'cache']"
Performance,"\n {optimizer.Iteration:4d} {optimizer.E:16.8e} -------- ""; f""{gmax:10.2e} {conv_gmax} {grms:10.2e} {conv_grms} -------- -------- ~"")); while True:; if optimizer.state == geometric.optimize.OPT_STATE.CONVERGED:; core.print_out(""\n\n Optimization converged! ~\n""); break; elif optimizer.state == geometric.optimize.OPT_STATE.FAILED:; core.print_out(""\n\n Optimization failed to converge! ~\n""); break; optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); grms, gmax = optimizer.calcGradNorm(); drms, dmax = geometric.optimize.calc_drms_dmax(optimizer.X, optimizer.Xprev); conv_energy = '*' if np.abs(optimizer.E - optimizer.Eprev) < params.Convergence_energy else ' '; conv_gmax = '*' if gmax < params.Convergence_gmax else ' '; conv_grms = '*' if grms < params.Convergence_grms else ' '; conv_dmax = '*' if dmax < params.Convergence_dmax else ' '; conv_drms = '*' if drms < params.Convergence_drms else ' '; core.print_out((f'\n {optimizer.Iteration:4d} {optimizer.E:16.8e} '; f'{optimizer.E-optimizer.Eprev:10.2e} {conv_energy} {gmax:10.2e} {conv_gmax} '; f'{grms:10.2e} {conv_grms} {dmax:10.2e} {conv_dmax} {drms:10.2e} {conv_drms} ~')). if return_history:; step_energies.append(optimizer.E); step_coordinates.append(core.Matrix.from_array(optimizer.X.reshape(-1,3))); step_gradients.append(core.Matrix.from_array(optimizer.gradx.reshape(-1,3))). return_energy = optimizer.E; opt_geometry = core.Matrix.from_array(optimizer.X.reshape(-1,3)); molecule.set_geometry(opt_geometry); molecule.update_geometry(); core.print_out(f'\n Final Energy : {return_energy} \n'); core.print_out('\n Final Geometry : \n'); molecule.print_in_input_format(). if return_history:; history = {; 'energy': step_energies,; 'gradient': step_gradients,; 'coordinates': step_coordinates,; }. if return_wfn:; wfn = engine.p4_wfn. if return_wfn and return_history:; return (return_energy, wfn, history); elif return_wfn and not return_history:; return (return_energy, wfn); elif return_history and not retur",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html:58050,optimiz,optimizer,58050,psi4manual/1.4.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html,7,['optimiz'],['optimizer']
Performance,"\n%s' % \; (at + 1, role, text2)). # Construct the grand BasisSet for mol; basisset = BasisSet(role, mol, atom_basis_shell). # Construct all the one-atom BasisSet-s for mol's CoordEntry-s; for at in range(mol.natom()):; oneatombasis = BasisSet(basisset, at); oneatombasishash = hashlib.sha1(oneatombasis.print_detail(numbersonly=True).encode('utf-8')).hexdigest(); mol.set_shell_by_number(at, oneatombasishash, role=role); mol.update_geometry() # re-evaluate symmetry taking basissets into account. #TODO fix name; basisset.name = ' + '.join(names). # Summary printing; tmp = defaultdict(list); for at, v in enumerate(summary):; tmp[v].append(at + 1); tmp2 = OrderedDict(); maxsats = 0; for item in sorted(tmp.values()):; for msg, ats in tmp.items():; if item == ats:; G = (list(x) for _, x in itertools.groupby(ats, lambda x, c=itertools.count(): next(c) - x)); sats = "", "".join(""-"".join(map(str, (g[0], g[-1])[:len(g)])) for g in G); maxsats = max(maxsats, len(sats)); tmp2[sats] = msg; #text = """""" ==> Loading Basis Set <==\n\n""""""; #text += """""" Role: %s\n"""""" % (role); #text += """""" Basis Set: %s\n"""""" % (basisset.name); text = ''; for ats, msg in tmp2.items():; text += """""" atoms %s %s\n"""""" % (ats.ljust(maxsats), msg). #print text; return basisset, text. # <<< Simple Methods for Basic BasisSet Information >>>. [docs] def name(self):; """"""Returns the name of this basis set""""""; return self.name. [docs] def set_name(self, name):; """"""Sets the name of this basis set""""""; self.name = name. # JET added but I think should fail; #+ def atom_shell_map(self):; #+ return self.atom_shell_map. [docs] def nprimitive(self):; """"""Number of primitives.; * @return The total number of primitives in all contractions. """"""; return self.PYnprimitive. [docs] def max_nprimitive(self):; """"""Maximum number of primitives in a shell.; * Examines each shell and find the shell with the maximum number of primitives returns that; * number of primitives.; * @return Maximum number of primitives. """"""; return self.PYmax_np",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsbasisset.html:26596,Load,Loading,26596,psi4manual/1.0.0/_modules/qcdb/libmintsbasisset.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/libmintsbasisset.html,1,['Load'],['Loading']
Performance,"\n'); psi4.print_out(' BSSE Treatment: %s\n' % (bsse)); psi4.print_out(' Maximum N-Body Interactions: %d\n' % (max_n_body)); psi4.print_out(' Compute Total Energy: %s\n' % (do_total)); psi4.print_out(' External Field: %s\n' % (has_external)); if (external):; psi4.print_out(' External Field Monomers: '); for k in external_indices:; psi4.print_out('%-3d ' % (k)); psi4.print_out('\n'); psi4.print_out('\n'). # Run the total molecule, if required; energies_full = {}; energies_mon = {}; N = molecule.nfragments(); Etotal = 0.0; if do_total or max_n_body == molecule.nfragments():; psi4.print_out(' => Total Cluster Energy <=\n'); # Full cluster always gets the external field; if (external):; psi4.set_global_option_python(""EXTERN"", external); Etotal = call_function_in_1st_argument(func, **kwargs); if (external):; psi4.set_global_option_python(""EXTERN"", None); energies_full[N] = []; energies_full[N].append(Etotal); energies_mon[N] = []; energies_mon[N].append(Etotal); psi4.set_global_option('DF_INTS_IO', 'LOAD'); psi4.clean(). max_effective = max_n_body; if (max_effective == N):; max_effective = N - 1. # Build the combos for indexing purposes; Ns = []; if (max_n_body == N or do_total):; Ns.append(N); for n in range(max_effective, 0, -1):; Ns.append(n). combos = {}; for n in Ns:. combos[n] = []. # Loop through combinations in lexical order #. # initialize the reals list; reals = []; #setup first combination [3,2,1] lexical ordering; #fragments indexing is 1's based, bloody hell; for index in range(n, 0, -1):; reals.append(index); #start loop through lexical promotion; counter = 0; while True:. counter = counter + 1. # Append the current combo; combos[n].append(copy.deepcopy(reals)). #reset rank; rank = 0. #look for lexical promotion opportunity; #i.e.: [4 2 1] has a promotion opportunity at; # index 1 to produce [4 3 1]; for k in range(n - 2, -1, -1):; if (reals[k] != reals[k + 1] + 1):; rank = k + 1; break. #do the promotion; reals[rank] = reals[rank] + 1. #demote the right po",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:7975,LOAD,LOAD,7975,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,1,['LOAD'],['LOAD']
Performance,"\right) \ \mathrm{d} ^3 r_1\]. \[-\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} \alpha \iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{1}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2\]. \[-\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} (1-\alpha)\iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{\mathrm{erf}(\omega r_{12})}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2\]; For LRC functionals, the choice of range-separation parameter \(\omega\) has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of “gap; fitting” or “optimal tuning” or simply “tuning.” The most popular tuned-LRC; approach is IP-fitting, in which the \(\omega\) is varied until the; Koopman’s IP (the opposite of the HOMO energy) matches the true IP (the; difference between \(N-1\)-electron and \(N\)-electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. \[\lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{tuned-LRC}} (r) = -; \frac{1}{r} + I_{\mathrm{IP}} +; \epsilon_{\mathrm{HOMO}}\]; Note that LRC functionals with default \(\omega\) only capture the; \(-1/r\) dependence,. \[\lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{LRC}} (r) = -; \frac{1}{r},\]; hybrid functionals only capture part of the \(-1/r\) dependence,. \[\lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Hybrid}} (r) = -; \frac{\alpha}{r},\]; and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. \[\lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Local}} (r) = 0\]; IP-tuned LRC functionals effectively pin the chemical potential at \(N\); electrons to the correct value determined by the ionization potential. This; often cleans up the M",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/dft.html:11136,tune,tuned-LRC,11136,psi4manual/master/dft.html,https://psicode.org,https://psicode.org/psi4manual/master/dft.html,15,['tune'],['tuned-LRC']
Performance,"\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy MethodsThe presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters. name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.cbs-1.html:5164,perform,performed,5164,psi4manual/1.4.0/api/psi4.driver.cbs-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.cbs-1.html,10,['perform'],['performed']
Performance,"] <tlccsd>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | ccsd(t) | CCSD with perturbative triples (CCSD(T)) :ref:`[manual] <sec:cc>` :ref:`[details] <tlccsdt>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | eom-ccsd | equation of motion (EOM) CCSD :ref:`[manual] <sec:eomcc>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+. .. _`table:grad_scf`:. .. include:: /autodoc_dft_opt.rst. .. include:: /cfour_table_grad.rst. :examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). """"""; kwargs = p4util.kwargs_lower(kwargs). engine = kwargs.pop('engine', 'optking'); if engine == 'geometric':; return optimize_geometric(name, **kwargs); elif engine != 'optking':; raise ValidationError(f""Opt",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html:66367,perform,perform,66367,psi4manual/1.4.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html,6,"['optimiz', 'perform']","['optimize', 'perform']"
Performance,"] Analytic hf optimization; >>> optimize('hf'). 1; 2; 3; 4>>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). 1; 2; 3>>> # [3] Forced finite difference hf optimization run in; >>> # embarrassingly parallel fashion; >>> optimize('hf', dertype='energy', mode='sow'). 1; 2>>> # [4] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). 1; 2; 3; 4>>> # [5] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). 1; 2; 3; 4; 5; 6; 7; 8>>> # [6] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). psi4.gradient(name[, molecule, return_wfn, func, dertype])[source]¶; Function complementary to :py:func:~driver.optimize(). Carries out one gradient pass,; deciding analytic or finite difference. Returns:Matrix – Total electronic gradient in Hartrees/Bohr. Returns:(Matrix, Wavefunction) – gradient and wavefunction when return_wfn specified. Examples:. 1; 2; 3; 4; 5; 6>>> # [1] Single-point dft gradient getting the gradient; >>> # in file, core.Matrix, and np.array forms; >>> set gradient_write on; >>> G, wfn = gradient('b3lyp-d', return_wfn=True); >>> wfn.gradient().print_out(); >>> np.array(G). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calcu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/opt-1.html:5236,optimiz,optimization,5236,psi4manual/1.2.1/opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/opt-1.html,4,['optimiz'],['optimization']
Performance,"] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in PSI4, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687].; The DF-CCSD(T) procedure uses two auxiliary basis sets. The first set is; that used in the SCF procedure, defined by the DF_BASIS_SCF; keyword. If this keyword is not specified, an appropriate -JKFIT set is; automatically selected. This auxiliary set defines the ERIs used to; build the Fock matrix used in the DF-CCSD(T) procedure. The second; auxiliary set is used to approximate all other ERIs in the DF-CCSD(T); procedure. The choice of auxiliary basis is controlled by the keyword; DF_BASIS_CC. By default, DF_BASIS_CC is the RI set; (optimized for DFMP2) most appropriate for use with the primary basis.; For example, if the primary basis is aug-cc-pVDZ, the default; DF_BASIS_CC will be aug-cc-pVDZ-RI.; Alternatively, the user can request that the DF-CCSD(T) procedure use a; set of vectors defined by the Cholesky decomposition of the ERI tensor as; the auxiliary basis. This feature is enabled by specifying CC_TYPE CD.; CD methods can be enabled in the SCF; procedure as well, by specifying the SCF_TYPE as CD. The; accuracy of the decomposition can be controlled through the keyword; CHOLESKY_TOLERANCE.; The following input file sets up a DF-CCSD(T); computation using CD integrals; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. 1e-9). G",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/fnocc-1.html:11391,optimiz,optimized,11391,psi4manual/1.1.0/fnocc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/fnocc-1.html,6,['optimiz'],['optimized']
Performance,"] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in PSI4, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687].; The DF-CCSD(T) procedure uses two auxiliary basis sets. The first set is; that used in the SCF procedure, defined by the DF_BASIS_SCF; keyword. If this keyword is not specified, an appropriate -JKFIT set is; automatically selected. This auxiliary set defines the ERIs used to; build the Fock matrix used in the DF-CCSD(T) procedure. The second; auxiliary set is used to approximate all other ERIs in the DF-CCSD(T); procedure. The choice of auxiliary basis is controlled by the keyword; DF_BASIS_CC. By default, DF_BASIS_CC is the RI set; (optimized for DFMP2) most appropriate for use with the primary basis.; For example, if the primary basis is aug-cc-pVDZ, the default; DF_BASIS_CC will be aug-cc-pVDZ-RI.; Alternatively, the user can request that the DF-CCSD(T) procedure use a; set of vectors defined by the Cholesky decomposition of the ERI tensor as; the auxiliary basis. This feature is enabled by specifying CC_TYPE CD.; CD methods can be enabled in the SCF; procedure as well, by specifying the SCF_TYPE as CD. The; accuracy of the decomposition can be controlled through the keyword; CHOLESKY_TOLERANCE.; The following input file sets up a DF-CCSD(T); computation using CD integrals; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if CHOLESKY_TOLERANCE is; sufficiently small (e.g. 1e-9). Gn theory¶; The FNOCC module contains all the ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/fnocc.html:11359,optimiz,optimized,11359,psi4manual/master/fnocc.html,https://psicode.org,https://psicode.org/psi4manual/master/fnocc.html,9,['optimiz'],['optimized']
Performance,"] through dftd3; [\(s_6\), \(\alpha_6\)]. -D3; alias to -D3ZERO;  . -D3ZERO; -D3 [4] w/ original zero-damping through dftd3; [\(s_6\), \(s_8\), \(s_{r,6}\), \(\alpha_6\)]. -D3BJ; -D3 [5] w/ newer Becke-Johnson rational damping through dftd3; [\(s_6\), \(s_8\), \(a_1\), \(a_2\)]. -D3M; alias to -D3MZERO;  . -D3MZERO; -D3 [6] w/ reparameterized and more flexible original zero-damping through dftd3; [\(s_6\), \(s_8\), \(s_{r,6}\), \(\beta\)]. -D3MBJ; -D3 [6] w/ reparameterized newer Becke-Johnson rational damping through dftd3; [\(s_6\), \(s_8\), \(a_1\), \(a_2\)]. Footnotes. [1]Note that there are functionals with these extensions (e.g., wB97X-D) that,; not being Grimme corrections, have nothing to do with this table. [2][Grimme:2004:1463]. [3](1, 2) [Grimme:2006:1787]. [4][Grimme:2010:154104]. [5][Grimme:2011:1456]. [6](1, 2) [Smith:2016:2197]. A few practical examples:. DFT-D2 single point with default parameters (dftd3 not called); 1energy('bp86-d'). DFT-D3BJ optimization with default parameters; 1optimize('pbe-d3bj'). DFT-D2 optimization with custom s6 parameter; 1; 2set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values); 1; 2set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). If only dispersion corrections (rather than total energies) are of; interest, the dftd3 program can be run independently of the scf; through the python function run_dftd3(). (This function; is the same PSI4/dftd3 interface that is called during an scf job.); This route is much faster than running a DFT-D energy. Some set-up:; 1; 2; 3; 4; 5; 6molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). The same four dispersion corrections/gradients as the section above:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14>>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05. >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.18090875693",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/dftd3-1.html:6601,optimiz,optimization,6601,psi4manual/1.1.0/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/dftd3-1.html,4,['optimiz'],['optimization']
Performance,"] » ; Module code ». Source code for wrappers; #; #@BEGIN LICENSE; #; # PSI4: an ab initio quantum chemistry software package; #; # This program is free software; you can redistribute it and/or modify; # it under the terms of the GNU General Public License as published by; # the Free Software Foundation; either version 2 of the License, or; # (at your option) any later version.; #; # This program is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU General Public License for more details.; #; # You should have received a copy of the GNU General Public License along; # with this program; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; #@END LICENSE; #. """"""Module with functions that call the four main :py:mod:`driver`; functions: :py:mod:`driver.energy`, :py:mod:`driver.optimize`,; :py:mod:`driver.response`, and :py:mod:`driver.frequency`. """"""; import re; import os; import math; import warnings; import pickle; import copy; import collections; import psi4; import p4const; import p4util; from driver import *; #from extend_Molecule import *; from molutil import *; from p4regex import *; # never import aliases into this file. # Function to make calls among wrappers(), energy(), optimize(), etc.; [docs]def call_function_in_1st_argument(funcarg, **largs):; r""""""Function to make primary function call to energy(), opt(), etc.; with options dictionary *largs*.; Useful when *funcarg* to call is stored in variable. """"""; return funcarg(**largs). [docs]def convert(p, symbol):; if symbol[p] == 'H':; d = 1.001; if symbol[p] == 'He':; d = 1.012; if symbol[p] == 'Li':; d = 0.825; if symbol[p] == 'Be':; d = 1.408; if symbol[p] == 'B':; d = 1.485; if symbol[p] == 'C':; d = 1.452; if symbol[p] == 'N':; d = 1.397; if symbol[p] == 'O':; d = 1.342; if symbol[p] == 'F':; d = 1.287; if symb",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:1080,optimiz,optimize,1080,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,1,['optimiz'],['optimize']
Performance,"]); Function to reset the total memory allocation. set_module_options(module, options_dict); Sets Psi4 module options from a module specification and input dictionary. set_options(options_dict[, verbose]); Sets Psi4 options from an input dictionary. tdscf(wfn, **kwargs). temp_circular_import_blocker(). vibanal_wfn(wfn[, hess, irrep, molecule, ...]); Function to perform analysis of a hessian or hessian block, specifically. write_eigenvalues(eigs, mo_idx); Prepare multi-line string with one-particle eigenvalues to be written to the FCIDUMP file. Classes¶. CSXError(msg); Error called when CSX generation fails. ConvergenceError(eqn_description, iteration); Error called for problems with converging an iterative method. Dftd3Error(msg). EmpiricalDispersion(*[, name_hint, ...]); Lightweight unification of empirical dispersion calculation modes. ManagedMethodError(circs). MissingMethodError(msg); Error called when method not available. OptimizationConvergenceError(...); Error called for problems with geometry optimizer. ParsingError(msg); Error called for problems parsing a text file. PastureRequiredError(option); Error called when the specified value of option requires some module(s) from Psi4Pasture, but could not be imported. PsiException; Error class for Psi. PsiImportError(msg); Error called for problems import python dependencies. QMMM(). SCFConvergenceError(eqn_description, ...); Error called for problems with SCF iterations. TDSCFConvergenceError(iteration, wfn, what, ...); Error called for problems with TDSCF iterations. Table([rows, row_label_width, ...]); Class defining a flexible Table object for storing data. TestComparisonError(msg); Error called when a test case fails due to a failed compare_values() call. UpgradeHelper(old, new, version, elaboration); Error called on previously valid syntax that now isn't and a simple syntax transition is possible. ValidationError(msg); Error called for problems with the input file. Class Inheritance Diagram¶. table of conten",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/psi4api-1.html:22092,optimiz,optimizer,22092,psi4manual/1.5.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/psi4api-1.html,2,['optimiz'],['optimizer']
Performance,"], [2]. is_variable() psi4.core.Molecule method, [1], [2]. is_x_hybrid() psi4.core.SuperFunctional method, [1], [2]. is_x_lrc() psi4.core.SuperFunctional method, [1], [2]. Isotopes. ISTOP (DETCI). iterations() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. IWLAndDPD psi4.core.IntegralTransform.OutputType attribute, [1]. IWLOnly psi4.core.IntegralTransform.OutputType attribute, [1]. J. J() psi4.core.JK method, [1], [2]. JK class in psi4.core, [1]. jk() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. JOBTYPE (CCLAMBDA). join_path() in module psi4.driver. JSCH module, [1]. K. K() psi4.core.JK method, [1], [2]. KEEP_INTCOS (OPTKING). keywords. ; anharmonicity(), setting. cbs(), setting. cp, setting. database(), setting. energy(), setting. frequency(), setting. general, setting. molecule, setting. optimize(), setting. properties(), setting. vmfc, setting. kinetic_grad() psi4.core.MintsHelper method, [1], [2]. KineticInt class in psi4.core, [1]. L. L psi4.core.BoysLocalizer attribute, [1]. psi4.core.Localizer attribute, [1], [2]. psi4.core.PMLocalizer attribute, [1]. label() psi4.core.Molecule method, [1], [2]. psi4.core.MOSpace method, [1], [2]. LaplaceDenominator class in psi4.core, [1]. LCC2(+LMP2)TOTALENERGY. LCCSD. LCCSD(+LMP2)TOTALENERGY. legacy_wavefunction() in module psi4.core, [1]. LEVEL_SHIFT (DFOCC). (MCSCF). (OCC). levenshtein() in module psi4.driver. LIBEFP. libfock() in module psi4.core, [1]. Libint. Libxc. LibXCFunctional class in psi4.core, [1]. license. LINEAR (CCRESPONSE). LINEQ_SOLVER (DFOCC). (OCC). LINESEARCH_STATIC_MAX (OPTKING). LINESEARCH_STATIC_MIN (OPTKING). LINESEARCH_STATIC_N (OPTKING). LITERAL_CFOUR (GLOBALS). load() psi4.core.Matrix method, [1], [2]. load_mpqc() psi4.core.Matrix method, [1], [2]. LOCAL (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). LOCAL_CONV",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/genindex-1.html:70455,optimiz,optimize,70455,psi4manual/1.2.1/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/genindex-1.html,2,['optimiz'],['optimize']
Performance,"], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DETCI). opdm() psi4.core.CIWavefunction method, [1], [2]. OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method, [1], [2]. open_check() psi4.core.IO method, [1], [2]. operate() psi4.core.SymmetryOperation method, [1], [2]. opt(). . see optimize(). opt() in module psi4.driver. opt_clean() in module psi4.core, [1]. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_TYPE (OPTKING). OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4. in module psi4.driver. option_exists_in_module() in module psi4.core, [1]. Options class in psi4.core, [1]. optking() in module psi4.core, [1]. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCFT). orbital_values() psi4.core.PointFunctions method, [1], [2]. psi4.core.RKSFunctions method, [1]. psi4.core.UKSFunctions method, [1]. OrbitalSpace class in psi4.core, [1]. order() psi4.core.CharacterTable method, [1], [2]. psi4.core.PointGroup method, [1], [2]. ordered_params psi4.driver.EmpiricalDispersion attribute. orientation() psi4.core.DFTGrid method, [1]. psi4.core.MolecularGrid method, [1], [2]. orientation_fixed() psi4.core.Molecule method, [1], [2]. origin psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute, [1]. psi4.core.ElectrostaticInt attribute, [1]. psi4.core.KineticInt attribute, [1]. psi4.core.MultipoleInt attribute, [1]. psi4.core.NablaInt attribute, [1]. psi4.core.OneBodyAOInt attribute, [1], [2]. psi4.core.OverlapInt attribute, [1]. psi4.core.PotentialInt at",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/genindex-1.html:102573,Optimiz,Optimized,102573,psi4manual/1.3.2/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html,2,['Optimiz'],['Optimized']
Performance,"], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OO_SCALE (DFOCC). OPDM (DETCI). opdm() psi4.core.CIWavefunction method, [1], [2]. OPDM_RELAX (CCDENSITY). (DFMP2). open() psi4.core.IO method, [1], [2]. open_check() psi4.core.IO method, [1], [2]. operate() psi4.core.SymmetryOperation method, [1], [2]. opt(). . see optimize(). opt() in module psi4.driver. opt_clean() in module psi4.core, [1]. OPT_COORDINATES (OPTKING). OPT_METHOD (DFOCC). (OCC). OPT_TYPE (OPTKING). OptimizationConvergenceError. optimize(). ; setting keywords. optimize() in module psi4. in module psi4.driver. option_exists_in_module() in module psi4.core, [1]. Options class in psi4.core, [1]. optking() in module psi4.core, [1]. ORB_OPT (DFOCC). (OCC). ORB_RESP_SOLVER (DFOCC). (OCC). Orbital-Optimized Methods. ; theory. Orbital-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCFT). orbital_values() psi4.core.PointFunctions method, [1], [2]. psi4.core.RKSFunctions method, [1]. psi4.core.UKSFunctions method, [1]. OrbitalSpace class in psi4.core, [1]. orientation() psi4.core.DFTGrid method, [1]. psi4.core.MolecularGrid method, [1], [2]. orientation_fixed() psi4.core.Molecule method, [1], [2]. origin psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute, [1]. psi4.core.ElectrostaticInt attribute, [1]. psi4.core.KineticInt attribute, [1]. psi4.core.MultipoleInt attribute, [1]. psi4.core.NablaInt attribute, [1]. psi4.core.OneBodyAOInt attribute, [1], [2]. psi4.core.OverlapInt attribute, [1]. psi4.core.PotentialInt attribute, [1]. psi4.core.PseudospectralInt attribute, [1]. psi4.core.QuadrupoleInt attribute, [1]. psi4.core.TracelessQuadrupoleInt attribute, [1]. o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/genindex-1.html:88153,Optimiz,Optimized,88153,psi4manual/1.2.1/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/genindex-1.html,2,['Optimiz'],['Optimized']
Performance,"]. VectorMatrix class in psi4.core, [1]. vectors() psi4.core.FISAPT method, [1], [2]. version() in module psi4.core, [1]. vibanal_wfn() in module psi4.driver. vibrational analysis. ; function call. output. vir() psi4.core.MOSpace method, [1], [2]. VirOnly psi4.core.IntegralTransform.FrozenOrbitals attribute, [1]. visualization, [1]. VMDPATH. vmfc. ; setting keywords. vv10_b() psi4.core.SuperFunctional method, [1], [2]. vv10_c() psi4.core.SuperFunctional method, [1], [2]. Vvals() psi4.core.OEProp method, [1], [2]. W. w() psi4.core.BlockOPoints method, [1], [2]. WABEI_LOWDISK (CCHBAR). Wavefunction class in psi4.core, [1]. WebMO. WFN (CCDENSITY). (CCENERGY). (CCEOM). (CCHBAR). (CCLAMBDA). (CCRESPONSE). (CCTRANSORT). (CCTRIPLES). (DETCI). (GLOBALS). (SCF). WFN_SYM (MCSCF). (PSIMRCC). WFN_TYPE (DFOCC). (OCC). with_traceback() psi4.driver.ConvergenceError method. psi4.driver.CSXError method. psi4.driver.Dftd3Error method. psi4.driver.ManagedMethodError method. psi4.driver.OptimizationConvergenceError method. psi4.driver.ParsingError method. psi4.driver.PastureRequiredError method. psi4.driver.PsiException method. psi4.driver.PsiImportError method. psi4.driver.SCFConvergenceError method. psi4.driver.TestComparisonError method. psi4.driver.ValidationError method. wK() psi4.core.JK method, [1], [2]. psi4.core.MemDFJK method, [1]. write() psi4.core.CIVector method, [1], [2]. psi4.core.FCHKWriter method, [1], [2]. psi4.core.MOWriter method, [1], [2]. psi4.core.MoldenWriter method, [1], [2]. psi4.core.NBOWriter method, [1], [2]. write_eigenvalues() in module psi4.driver. WRITE_NOS (CCDENSITY). write_scratch_file() psi4.core.IOManager method, [1], [2]. WRITER_FILE_LABEL (GLOBALS). X. x() psi4.core.BlockOPoints method, [1], [2]. X() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. x() psi4.core.Molecule method, [1], [2]. X() psi4.core.RHF method, [1]. psi4.co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/genindex-1.html:148889,Optimiz,OptimizationConvergenceError,148889,psi4manual/1.3.2/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html,2,['Optimiz'],['OptimizationConvergenceError']
Performance,"].create_psi4_string_from_molecule()); molecule.set_name(rgt); molecule.update_geometry(). exec(commands); #print 'MOLECULE LIVES %23s %8s %4d %4d %4s' % (rgt, core.get_global_option('REFERENCE'),; # molecule.molecular_charge(), molecule.multiplicity(), molecule.schoenflies_symbol()); ERGT[rgt] = func(molecule=molecule, **kwargs); core.print_variables(); exec(actives); for envv in db_tabulate:; VRGT[rgt][envv.upper()] = core.get_variable(envv); core.set_global_option(""REFERENCE"", user_reference); core.clean(); #core.opt_clean(); core.clean_variables(). elif db_mode == 'sow':; with open('%s.in' % (rgt), 'w') as freagent:; freagent.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); freagent.write(banners); freagent.write(p4util.format_molecule_for_input(GEOS[rgt], 'dbmol')). freagent.write(commands); freagent.write('''\npickle_kw = (""""""'''); pickle.dump(kwargs, freagent); freagent.write('''"""""")\n'''); freagent.write(""""""\nkwargs = pickle.loads(pickle_kw)\n""""""); freagent.write(""""""electronic_energy = %s(**kwargs)\n\n"""""" % (func.__name__)); freagent.write(""""""core.print_variables()\n""""""); freagent.write(""""""core.print_out('\\nDATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""); freagent.write(""""""core.set_variable('NATOM', dbmol.natom())\n""""""); for envv in db_tabulate:; freagent.write(""""""core.print_out('DATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields variable value %20.12f for variable %s\\n' % (core.get_variable(""""""); freagent.write(""""""'%s'), '%s'))\n"""""" % (envv.upper(), envv.upper())). elif db_mode == 'reap':; ERGT[rgt] = 0.0; for envv in db_tabulate:; VRGT[rgt][envv.upper()] = 0.0; exec(banners); exec(actives); try:; freagent = open('%s.out' % (rgt), 'r'); except IOError:; core.print_out('Warning: Output file \'%s.out\' not found.\n' % (rgt)); core.print_out(' Database summary wil",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/wrapper_database.html:22132,load,loads,22132,psi4manual/1.1.0/_modules/psi4/driver/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/wrapper_database.html,1,['load'],['loads']
Performance,"].create_psi4_string_from_molecule()); molecule.set_name(rgt); molecule.update_geometry(). exec(commands); #print 'MOLECULE LIVES %23s %8s %4d %4d %4s' % (rgt, psi4.get_global_option('REFERENCE'),; # molecule.molecular_charge(), molecule.multiplicity(), molecule.schoenflies_symbol()); ERGT[rgt] = func(molecule=molecule, **kwargs); psi4.print_variables(); exec(actives); for envv in db_tabulate:; VRGT[rgt][envv.upper()] = psi4.get_variable(envv); psi4.set_global_option(""REFERENCE"", user_reference); psi4.clean(); #psi4.opt_clean(); psi4.clean_variables(). elif db_mode == 'sow':; with open('%s.in' % (rgt), 'w') as freagent:; freagent.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); freagent.write(banners); freagent.write(p4util.format_molecule_for_input(GEOS[rgt], 'dbmol')). freagent.write(commands); freagent.write('''\npickle_kw = (""""""'''); pickle.dump(kwargs, freagent); freagent.write('''"""""")\n'''); freagent.write(""""""\nkwargs = pickle.loads(pickle_kw)\n""""""); freagent.write(""""""electronic_energy = %s(**kwargs)\n\n"""""" % (func.__name__)); freagent.write(""""""psi4.print_variables()\n""""""); freagent.write(""""""psi4.print_out('\\nDATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""); freagent.write(""""""psi4.set_variable('NATOM', dbmol.natom())\n""""""); for envv in db_tabulate:; freagent.write(""""""psi4.print_out('DATABASE RESULT: computation %d for reagent %s """"""; % (os.getpid(), rgt)); freagent.write(""""""yields variable value %20.12f for variable %s\\n' % (psi4.get_variable(""""""); freagent.write(""""""'%s'), '%s'))\n"""""" % (envv.upper(), envv.upper())). elif db_mode == 'reap':; ERGT[rgt] = 0.0; for envv in db_tabulate:; VRGT[rgt][envv.upper()] = 0.0; exec(banners); exec(actives); try:; freagent = open('%s.out' % (rgt), 'r'); except IOError:; psi4.print_out('Warning: Output file \'%s.out\' not found.\n' % (rgt)); psi4.print_out(' Database summary wil",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html:22006,load,loads,22006,psi4manual/1.0.0/_modules/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html,1,['load'],['loads']
Performance,"][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; psi4.set_local_option('SCF', 'D_CONVERGENCE', 8); else:; psi4.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not psi4.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; psi4.set_global_option('E_CONVERGENCE', 8). # Does dertype indicate an analytic procedure both exists and is wanted?; if (dertype == 1):; # Nothing to it but to do it. Gradient information is saved; # into the current reference wavefunction; procedures['gradient'][lowername](lowername, **kwargs). if 'mode' in kwargs and kwargs['mode'].lower() == 'sow':; raise ValidationError('Optimize execution mode \'sow\' not valid for analytic gradient calculation.'); psi4.wavefunction().energy(). optstash.restore(); return psi4.get_variable('CURRENT ENERGY'). else:; # If not, perform finite difference of energies. opt_iter = 1; if ('opt_iter' in kwargs):; opt_iter = kwargs['opt_iter']. if opt_iter == 1:; print('Performing finite difference calculations'). # Obtain list of displacements; displacements = psi4.fd_geoms_1_0(); ndisp = len(displacements). # This version is pretty dependent on the reference geometry being last (as it is now); print(' %d displacements needed ...' % (ndisp), end=""""); energies = []. # S/R: Write instructions for sow/reap procedure to output file and reap input file; if (opt_mode.lower() == 'sow'):; instructionsO = """"""\n The optimization sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructionsO += """""" has produced a number of input files (OPT-%s-*.in) for individual components\n"""""" % (str(opt_iter)); instructionsO += """""" and a single input file (OPT-master.in) with an optimize(mode='reap') command.\n""""""; ins",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/driver.html:35442,perform,perform,35442,psi4manual/4.0b5/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/driver.html,1,['perform'],['perform']
Performance,"^(1/2); H2_ss_half = np.einsum(""ik,k,jk->ij"", H2_ss_vec, np.sqrt(H2_ss_val), H2_ss_vec, optimize=True); _print_array(""SS Transformed (A-B)^(1/2)"", H2_ss_half, verbose). # Build Hermitian SS product (H2)^(1/2)(H1)(H2)^(1/2); Hss = np.einsum('ij,jk,km->im', H2_ss_half, H1_ss, H2_ss_half, optimize=True); _print_array(""(H2)^(1/2)(H1)(H2)^(1/2)"", Hss, verbose). #diagonalize Hss -> w^2, Tss; w2, Tss = np.linalg.eigh(Hss); _print_array(""Eigenvalues (A-B)^(1/2)(A+B)(A-B)^(1/2)"", w2, verbose); _print_array(""Eigvectors (A-B)^(1/2)(A+B)(A-B)^(1/2)"", Tss, verbose). # pick positive roots; Tss = Tss[:, w2 > 1.0e-10]; w2 = w2[w2 > 1.0e-10]. # check for invalid eigvals; with np.errstate(invalid='raise'):; w = np.sqrt(w2). # sort roots; idx = w.argsort()[:nk]; Tss = Tss[:, idx]; w = w[idx]. # Extract Rss = H2^{1/2}Tss; Rss = np.dot(H2_ss_half, Tss). # Extract Lss = (H1 R)/ w; Lss = np.dot(H1_ss, Rss).dot(np.diag(1.0 / w)). # Biorthonormalize R/L solution vectors; inners = np.einsum(""ix,ix->x"", Rss, Lss, optimize=True); Rss = np.einsum(""x,ix->ix"", 1. / np.sqrt(inners), Rss, optimize=True); Lss = np.einsum(""x,ix->ix"", 1. / np.sqrt(inners), Lss, optimize=True). # Save best R/L vectors and eigenvalues; best_R = _best_vectors(engine, Rss[:, :nk], vecs); best_L = _best_vectors(engine, Lss[:, :nk], vecs); best_vals = w[:nk]. # check convergence of each solution; new_vecs = []; for k in range(nk):. # residual vectors for right and left eigenvectors; WR_k = engine.new_vector(); WL_k = engine.new_vector(); wk = w[k]; for i in range(l):; H1x_i = H1x[i]; H2x_i = H2x[i]; WL_k = engine.vector_axpy(Rss[i, k], H1x_i, WL_k); WR_k = engine.vector_axpy(Lss[i, k], H2x_i, WR_k). WL_k = engine.vector_axpy(-1.0 * wk, best_L[k], WL_k); WR_k = engine.vector_axpy(-1.0 * wk, best_R[k], WR_k). norm_R = np.sqrt(engine.vector_dot(WR_k, WR_k)); norm_L = np.sqrt(engine.vector_dot(WL_k, WL_k)). norm = norm_R + norm_L. iter_info['res_norm'][k] = norm; iter_info['delta_val'][k] = np.abs(old_w[k] - w[k]); iter_info['v",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/solvers.html:30539,optimiz,optimize,30539,psi4manual/1.7.x/_modules/psi4/driver/p4util/solvers.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/solvers.html,4,['optimiz'],['optimize']
Performance,"^{2}A_1\) excited state of H2O+ (B1 excitation). opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-coverage; Lithium test for coverage. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dft1-alt; DFT Functional Test. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. dft-jk; DFT JK on-disk test. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. oremp-grad2; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. single point energies were independently checked using the original wavels code. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. oremp-grad1; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. fnocc6; Test method/ba",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:9150,perform,performs,9150,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['perform'],['performs']
Performance,"_)); if (func is db):; raise ValidationError('Wrapper counterpoise_correct is unhappy to be calling function \'%s\'.' % (func.__name__)). if 'check_bsse' in kwargs and input.yes.match(str(kwargs['check_bsse'])):; check_bsse = True; else:; check_bsse = False. # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option(""BASIS"", PsiMod.get_global_option(""BASIS"")). df_ints_io = PsiMod.get_option('DF_INTS_IO'); PsiMod.set_global_option('DF_INTS_IO', 'SAVE'); psioh = PsiMod.IOManager.shared_object(); psioh.set_specific_retention(97, True). activate(molecule); molecule.update_geometry(). PsiMod.print_out(""\n""); banner(""CP Computation: Complex.\nFull Basis Set.""); PsiMod.print_out(""\n""); e_dimer = call_function_in_1st_argument(func, **kwargs); #e_dimer = energy(name, **kwargs). PsiMod.clean(); PsiMod.set_global_option('DF_INTS_IO', 'LOAD'). # All monomers with ghosts; monomers = extract_clusters(molecule, True, 1); e_monomer_full = []. cluster_n = 0; for cluster in monomers:; activate(cluster); PsiMod.print_out(""\n""); banner((""CP Computation: Monomer %d.\n Full Basis Set."" % (cluster_n + 1))); PsiMod.print_out(""\n""); e_monomer_full.append(call_function_in_1st_argument(func, **kwargs)); #e_monomer_full.append(energy(name,**kwargs)); cluster_n = cluster_n + 1; PsiMod.clean(). PsiMod.set_global_option('DF_INTS_IO', 'NONE'); if (check_bsse):; # All monomers without ghosts; monomers = extract_clusters(molecule, False, 1); e_monomer_bsse = []. cluster_n = 0; for cluster in monomers:; activate(cluster); PsiMod.print_out(""\n""); #cluster.print_to_output(); banner((""CP Computation: Monomer %d.\n Monomer Set."" % (cluster_n + 1))); PsiMod.print_out(""\n""); e_monomer_bsse.append(call_function_in_1st_argument(func, **kwargs)); #e_monomer_bsse.append(energy(name,**kwargs)); cluster_n = cluster_n + 1. PsiMod.set_globa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html:19779,LOAD,LOAD,19779,psi4manual/4.0b2/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html,1,['LOAD'],['LOAD']
Performance,"_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. E",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:48249,optimiz,optimizations,48249,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimizations']
Performance,"_3¶. This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4¶. This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV¶. Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC¶. Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP¶. Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD¶. Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html:30371,optimiz,optimizations,30371,psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,30,['optimiz'],"['optimizations', 'optimizer']"
Performance,"_5_1-B1.cube, and Psi_a_6_4-A1.cube. The subscript a in; Psi_a_5_1-B1.cube indicates an alpha orbital. The first number (5) is the index of the; orbital while 1-B1 indicates that this is the first orbital that belongs to the B1 irrep.; The file Psi_a_5_1-B1.cube begins with two comment lines:; Psi4 Gaussian Cube File.; Property: Psi_a_5_1-B1. Isocontour range for 85% of the density: (0.0787495,-0.0787495). The second line reports the isocontour values that capture 85% of the probability density using; the least amount of grid points. This quantity is determined for orbitals and densities. The; fraction of the density captured by the isocontour values is by default 0.85, but can; be changed via the option CUBEPROP_ISOCONTOUR_THRESHOLD. Note; If your cube plots are too coarse, try to decrease the grid spacing via; the option CUBIC_GRID_SPACING. If the edges of your plot are cut then; increase the size of the grid via the option CUBIC_GRID_OVERAGE. Cubeprop Tasks¶; The cubeprop utility can be provided a list of tasks to perform.; Tasks are specified by the CUBEPROP_TASKS option, which is a list of strings; that identify the tasks. Several tasks are available. These include:. ORBITALS [Default if CUBEPROP_TASKS is not specified]Produces cube representations of the molecular orbitals; \(\psi_q(\mathbf{r})\). Orbitals are sorted according to increasing; orbital energy ignoring symmetry. FRONTIER_ORBITALSProduces cube representations of the frontier molecular orbitals. For closed shell; species, the highest occupied (HOMO) and the lowest unoccupied (LUMO) alpha orbitals (ie.; \(\psi_{\alpha}(\mathbf{r})\)) are printed, while for open shell species a total; of \((4 + M_s)\) orbitals are printed (\(\alpha\) and \(\beta\); spin for both lowest virtual (LVMO) and highest doubly occupied; orbitals (DOMO), along with all \(\alpha\) singly occupied (SOMO) orbitals). DENSITYThis task can be used to obtain the alpha and beta electron densities,; \(\rho_\alpha(\mathbf{r})\) and \(\r",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/cubeprop.html:3329,perform,perform,3329,psi4manual/master/cubeprop.html,https://psicode.org,https://psicode.org/psi4manual/master/cubeprop.html,9,['perform'],['perform']
Performance,_AMPS_PRINT; GAUGE; KIND; MAX_NUM_VECS; MAXITER; MEMORY; NEWTON_CONVERGENCE; NORM_TOLERANCE; NUM_AMPS_PRINT; NUM_CORE_ORBITALS; NUM_GUESSES; POLE_MAXITER; PR; R_CONVERGENCE; REFERENCE; ROOTS_PER_IRREP; SEM_MAXITER; AEL; AO_BASIS; CACHELEVEL; DEBUG; GAUGE; INTS_TOLERANCE; ONEPDM; ONEPDM_GRID_CUTOFF; ONEPDM_GRID_DUMP; ONEPDM_GRID_STEPSIZE; OPDM_GRID_CUTOFF; OPDM_GRID_DUMP; OPDM_GRID_STEPSIZE; OPDM_ONLY; OPDM_RELAX; PROP_ALL; PROP_ROOT; PROP_SYM; REFERENCE; ROOTS_PER_IRREP; WFN; WRITE_NOS; XI; XI_CONNECT; ZETA; ABCD; ANALYZE; AO_BASIS; BCCD_MAXITER; BRUECKNER_ORBS_R_CONVERGENCE; CACHELEVEL; CACHETYPE; CC_NUM_THREADS; CC_OS_SCALE; CC_SS_SCALE; DIIS; E_CONVERGENCE; FORCE_RESTART; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; MP2_AMPS_PRINT; MP2_OS_SCALE; MP2_SS_SCALE; NEW_TRIPLES; NUM_AMPS_PRINT; PAIR_ENERGIES_PRINT; PROPERTY; R_CONVERGENCE; REFERENCE; RESTART; SCS_CCSD; SCS_MP2; SCSN_MP2; SEMICANONICAL; T2_COUPLED; T3_WS_INCORE; WFN; ABCD; CACHELEVEL; CACHETYPE; CC_NUM_THREADS; CC3_FOLLOW_ROOT; COLLAPSE_WITH_LAST; COLLAPSE_WITH_LAST_CC3; COMPLEX_TOLERANCE; E_CONVERGENCE; EOM_GUESS; EOM_REFERENCE; EXCITATION_RANGE; FULL_MATRIX; LOCAL; LOCAL_CUTOFF; LOCAL_DO_SINGLES; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PRECONDITIONER; LOCAL_WEAKP; MAXITER; NEW_TRIPLES; NUM_AMPS_PRINT; OVERLAP_CHECK; PROP_ROOT; PROP_SYM; R_CONVERGENCE; REFERENCE; RESTART_EOM_CC3; RHF_TRIPLETS; ROOTS_PER_IRREP; SCHMIDT_ADD_RESIDUAL_TOLERANCE; SEMICANONICAL; SINGLES_PRINT; SS_E_CONVERGENCE; SS_R_CONVERGENCE; SS_SKIP_DIAG; SS_VECS_PER_ROOT; T3_WS_INCORE; VECS_CC3; VECS_PER_ROOT; WFN; CACHELEVEL; EOM_REFERENCE; T_AMPS; WABEI_LOWDISK; WFN; ABCD; AO_BASIS; CACHELEVEL; DIIS; JOBTYPE; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; NUM_AMPS_PRINT; PROP_ALL; PROP_ROOT; PROP_SYM; R_CONVERGENCE; RESTART; ROOTS_PER_IRREP; SEKINO; WFN; ZETA; ABCD; ANALYZE; CACHELEVEL; DIIS; GAUGE; LINEAR; LOCAL; LOCAL_CPHF,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:765681,CACHE,CACHELEVEL,765681,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,1,['CACHE'],['CACHELEVEL']
Performance,"_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI); DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI); DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI); DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC); MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC); MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC); MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC); MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC); MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC); MRCC (Exper",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:166465,perform,performed,166465,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,6,['perform'],['performed']
Performance,"_BASIS=DISK and AO_BASIS=NONE, respectively. cc32; CC3/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). fci-dipole; 6-31G H2O Test FCI Energy Point. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. gdma1; Water RHF/cc-pVTZ distributed multipole analysis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/testsuite-1.html:21732,perform,performed,21732,psi4manual/1.0.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/testsuite-1.html,4,['perform'],['performed']
Performance,"_BASIS_MP2 (DFMP2); DFMP2 — Auxiliary basis set for MP2 density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_MP2 (LMP2); LMP2 — Auxiliary basis set for MP2 density fitting calculations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT (SAPT); SAPT — Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SCF (CPHF); CPHF — Auxiliary basis for SCF. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SCF (SCF); SCF — Auxiliary basis set for SCF density fitting computations. Defaults to a JKFIT basis. Type: string; Possible Values: basis string; Default: No Default. DF_FITTING_CONDITION (SCF); SCF (Expert) — Fitting Condition. Type: double; Default: 1.0e-12. DF_INTS_IO (DFMP2); DFMP2 (Expert) — IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. DF_INTS_IO (SCF); SCF (Expert) — IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. DF_INTS_NUM_THREADS (DFMP2); DFMP2 — Number of threads to compute integrals with. 0 is wild card. Type: integer; Default: 0. DF_INTS_NUM_THREADS (SCF); SCF — Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_LMP2 (LMP2); LMP2 — Do use density fitting? Turned on with specification of fitting basis. Type: boolean; Default: true. DFMP2_MEM_FACTOR (DFMP2); DFMP2 — % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFMP2_P2_TOLERANCE (DFMP2); DFMP2 — Minimum error in the 2-norm of the P(2) matrix for corrections to Lia and P. Type: conv double; Default: 0.0. DFMP2_P_TOLERANCE (DFMP2); DFMP2 — Minimum error in the 2-norm of the P matrix for skeleton-core Fock matrix derivatives. Type: conv double; Default: 0.0. DFT_ALPHA (SCF); SCF — The DFT",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:24859,LOAD,LOAD,24859,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['LOAD'],['LOAD']
Performance,"_CCSD_METHOD (PSIMRCC)¶PSIMRCC — How to perform MP2_CCSD computations. Type: string; Possible Values: I, IA, II; Default: II. MP2_GUESS (PSIMRCC)¶PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY)¶CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2)¶DFMP2 — OS Scale. Type: double; Default: 6.0. MP2_OS_SCALE (DFOCC)¶DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0. MP2_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 6.0. MP2_SCALE_OS (FNOCC)¶FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC)¶FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. MP2_SOS_SCALE (DFOCC)¶DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC)¶DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY)¶CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (DFMP2)¶DFMP2 — SS Scale. Type: double; Default: 1.0. MP2_SS_SCALE (DFOCC)¶DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:178967,optimiz,optimized-,178967,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,9,['optimiz'],['optimized-']
Performance,"_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. INTCOS_GENERATE_EXIT¶. Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. Optimizing Minima¶; First, define the molecule and basis in the input.; 1; 2; 3; 4; 5; 6; 7molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; 1optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; 1; 2set step_type nr; optimize('scf'). Optimize using energy points instead of gradients:; 1optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; 1; 2set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:; 1; 2; 3; 4; 5; 6; 7set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:; 1; 2set full_hess_every 1; optimize('scf'). Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/optking-1.html:4281,Optimiz,Optimize,4281,psi4manual/1.2.1/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/optking-1.html,8,"['Optimiz', 'optimiz']","['Optimize', 'optimize']"
Performance,"_CONVERGENCE. Type: conv double; Default: 1e-4. MOLDEN_WRITE¶. Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MO_DIIS_NUM_VECS¶. Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_STEP_MAX¶. Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MP2_AMP_TYPE¶. The algorithm that used to handle mp2 amplitudes. The DIRECT option means compute amplitudes on the fly * whenever they are necessary. Type: string; Possible Values: DIRECT, CONV; Default: DIRECT. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0. MP2_SOS_SCALE¶. MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2¶. Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OCC_ORBS_PRINT¶. Do print OCC orbital energies?. Type: boolean; Default: false. OEPROP¶. Do compute one electron properties?. Type: boolean; Default: false. OO_SCALE¶. OO scaling factor used in MSD. Type: double; Default: 0.01. OPT_METHOD¶. The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER¶. The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equati",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__dfocc-1.html:3774,optimiz,optimized-,3774,psi4manual/1.4.0/autodir_options_c/module__dfocc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__dfocc-1.html,5,['optimiz'],['optimized-']
Performance,"_DISTANCE (OPTKING). FROZEN_DOCC (GLOBALS). FROZEN_UOCC (GLOBALS). frzcpi() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. frzvpi() psi4.core.CCWavefunction method, [1]. psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. fsymbol() psi4.core.Molecule method, [1], [2]. ftrue_atomic_number() psi4.core.Molecule method, [1], [2]. Full psi4.core.SaveType attribute, [1], [2]. full_geometry() psi4.core.Molecule method, [1], [2]. FULL_HESS_EVERY (OPTKING). FULL_MATRIX (CCEOM). full_pg_n() psi4.core.Molecule method, [1], [2]. function call. ; geometry optimization. gradient. hessian. vibrational analysis. function_index psi4.core.GaussianShell attribute, [1], [2]. function_to_center() psi4.core.BasisSet method, [1], [2]. function_to_shell() psi4.core.BasisSet method, [1], [2]. Functional class in psi4.core, [1]. functional() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.VBase method, [1], [2]. functionals. functions_local_to_global() psi4.core.BlockOPoints method, [1], [2]. fx() psi4.core.Molecule method, [1], [2]. fy() psi4.core.Molecule method, [1], [2]. fZ() psi4.core.Molecule method, [1], [2]. fz() psi4.core.Molecule method, [1], [2]. fzc() psi4.core.MOSpace method, [1], [2]. fzv() psi4.core.MOSpace method, [1], [2]. G. G_CONVERGENCE (OPTKING). gamma() psi4.core.CharacterTable method, [1], [2]. gau2grid. GAUGE (CCDENSITY). (CCRESPONSE). Gaussian Formatted Checkpoint. GaussianShell class in psi4.core, [1]. GaussianType class in",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/genindex-1.html:66242,optimiz,optimization,66242,psi4manual/1.3.2/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/genindex-1.html,2,['optimiz'],['optimization']
Performance,_FROZEN_UOCC; PARENT_SYMMETRY; PCM; PE; PRINT; PRINT_NOONS; PROPERTIES; PROPERTIES_ORIGIN; PUREAM; QC_MODULE; RAS1; RAS2; RAS3; RAS4; RELATIVISTIC; RESTRICTED_DOCC; RESTRICTED_UOCC; SCF_TYPE; SCREENING; SOCC; WFN; WRITER_FILE_LABEL; CANONICALIZE_ACTIVE_FAVG; CANONICALIZE_INACTIVE_FAVG; CI_DIIS; D_CONVERGENCE; DIIS; DIIS_MAX_VECS; DOCC; E_CONVERGENCE; FAVG; FAVG_START; FOLLOW_ROOT; FORCE_TWOCON; INTERNAL_ROTATIONS; LEVEL_SHIFT; MAXITER; MO_READ; REFERENCE; ROTATE_MO_ANGLE; ROTATE_MO_IRREP; ROTATE_MO_P; ROTATE_MO_Q; SOCC; TURN_ON_ACTV; WFN_SYM; BASIS; OMEGA_ERF; ADC; CCDENSITY; CCENERGY; CCEOM; CCHBAR; CCLAMBDA; CCRESPONSE; CCTRANSORT; CCTRIPLES; CFOUR; CPHF; DCT; DDX; DETCI; DFEP2; DFMP2; DFOCC; DLPNO; DMRG; EFP; FINDIF; FISAPT; FNOCC; GDMA; GLOBALS; MCSCF; MINTS; MRCC; OCC; OPTKING; PCM; PE; PSIMRCC; SAPT; SCF; THERMO; E_CONVERGENCE; INTS_TOLERANCE; MRCC_LEVEL; MRCC_METHOD; MRCC_NUM_DOUBLET_ROOTS; MRCC_NUM_SINGLET_ROOTS; MRCC_NUM_TRIPLET_ROOTS; MRCC_OMP_NUM_THREADS; MRCC_RESTART; CACHELEVEL; CC_MAXITER; CCL_ENERGY; CEPA_OS_SCALE; CEPA_SOS_SCALE; CEPA_SS_SCALE; CEPA_TYPE; CUTOFF; DIIS_MAX_VECS; DIIS_MIN_VECS; DO_DIIS; DO_LEVEL_SHIFT; DO_SCS; DO_SOS; E_CONVERGENCE; E3_SCALE; EA_POLES; EKT_EA; EKT_IP; EP_EA_POLES; EP_IP_POLES; EP_MAXITER; IP_POLES; LEVEL_SHIFT; MAX_MOGRAD_CONVERGENCE; MO_MAXITER; MO_READ; MO_STEP_MAX; MO_WRITE; MOGRAD_DAMPING; MP2_OS_SCALE; MP2_SOS_SCALE; MP2_SOS_SCALE2; MP2_SS_SCALE; NAT_ORBS; OCC_ORBS_PRINT; OEPROP; OPT_METHOD; ORB_OPT; ORB_RESP_SOLVER; ORTH_TYPE; OS_SCALE; PCG_BETA_TYPE; PCG_CONVERGENCE; PCG_MAXITER; R_CONVERGENCE; RELAXED; REMP_A; RMS_MOGRAD_CONVERGENCE; SCS_TYPE; SOS_TYPE; SPIN_SCALE_TYPE; SS_SCALE; SYMMETRIZE; TPDM_ABCD_TYPE; WFN_TYPE; ADD_AUXILIARY_BONDS; AUXILIARY_BOND_FACTOR; CART_HESS_READ; CARTESIAN_SYM_TOLERANCE; CONSECUTIVE_BACKSTEPS; COVALENT_CONNECT; CUSTOM_COORDS; DYNAMIC_LEVEL; ENSURE_BT_CONVERGENCE; EXT_FORCE_BEND; EXT_FORCE_CARTESIAN; EXT_FORCE_DIHEDRAL; EXT_FORCE_DISTANCE; EXT_FORCE_OOFP; FLEXIBLE_G_CONVERGENCE; FRAG,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1751733,CACHE,CACHELEVEL,1751733,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,1,['CACHE'],['CACHELEVEL']
Performance,_FROZEN_UOCC; PARENT_SYMMETRY; PCM; PE; PRINT; PRINT_NOONS; PROPERTIES; PROPERTIES_ORIGIN; PUREAM; QC_MODULE; RAS1; RAS2; RAS3; RAS4; RELATIVISTIC; RESTRICTED_DOCC; RESTRICTED_UOCC; SCF_TYPE; SCREENING; SOCC; WFN; WRITER_FILE_LABEL; CANONICALIZE_ACTIVE_FAVG; CANONICALIZE_INACTIVE_FAVG; CI_DIIS; D_CONVERGENCE; DIIS; DIIS_MAX_VECS; DOCC; E_CONVERGENCE; FAVG; FAVG_START; FOLLOW_ROOT; FORCE_TWOCON; INTERNAL_ROTATIONS; LEVEL_SHIFT; MAXITER; MO_READ; REFERENCE; ROTATE_MO_ANGLE; ROTATE_MO_IRREP; ROTATE_MO_P; ROTATE_MO_Q; SOCC; TURN_ON_ACTV; WFN_SYM; BASIS; OMEGA_ERF; ADC; CCDENSITY; CCENERGY; CCEOM; CCHBAR; CCLAMBDA; CCRESPONSE; CCTRANSORT; CCTRIPLES; CFOUR; CPHF; DCT; DDX; DETCI; DFEP2; DFMP2; DFOCC; DLPNO; DMRG; EFP; FINDIF; FISAPT; FNOCC; GDMA; GLOBALS; MCSCF; MINTS; MRCC; OCC; OPTKING; PCM; PE; PSIMRCC; SAPT; SCF; THERMO; E_CONVERGENCE; INTS_TOLERANCE; MRCC_LEVEL; MRCC_METHOD; MRCC_NUM_DOUBLET_ROOTS; MRCC_NUM_SINGLET_ROOTS; MRCC_NUM_TRIPLET_ROOTS; MRCC_OMP_NUM_THREADS; MRCC_RESTART; CACHELEVEL; CC_MAXITER; CCL_ENERGY; CEPA_OS_SCALE; CEPA_SOS_SCALE; CEPA_SS_SCALE; CEPA_TYPE; CUTOFF; DIIS_MAX_VECS; DIIS_MIN_VECS; DO_DIIS; DO_LEVEL_SHIFT; DO_SCS; DO_SOS; E_CONVERGENCE; E3_SCALE; EA_POLES; EKT_EA; EKT_IP; EP_EA_POLES; EP_IP_POLES; EP_MAXITER; IP_POLES; LEVEL_SHIFT; MAX_MOGRAD_CONVERGENCE; MO_MAXITER; MO_READ; MO_STEP_MAX; MO_WRITE; MOGRAD_DAMPING; MP2_OS_SCALE; MP2_SOS_SCALE; MP2_SOS_SCALE2; MP2_SS_SCALE; NAT_ORBS; OCC_ORBS_PRINT; OEPROP; OPT_METHOD; ORB_OPT; ORB_RESP_SOLVER; ORTH_TYPE; OS_SCALE; PCG_BETA_TYPE; PCG_CONVERGENCE; PCG_MAXITER; R_CONVERGENCE; RELAXED; REMP_A; RMS_MOGRAD_CONVERGENCE; SCS_TYPE; SOS_TYPE; SPIN_SCALE_TYPE; SS_SCALE; SYMMETRIZE; TPDM_ABCD_TYPE; WFN_TYPE; ADD_AUXILIARY_BONDS; AUXILIARY_BOND_FACTOR; CART_HESS_READ; CARTESIAN_SYM_TOLERANCE; CONSECUTIVE_BACKSTEPS; COVALENT_CONNECT; DYNAMIC_LEVEL; ENSURE_BT_CONVERGENCE; EXT_FORCE_BEND; EXT_FORCE_CARTESIAN; EXT_FORCE_DIHEDRAL; EXT_FORCE_DISTANCE; EXT_FORCE_OOFP; FLEXIBLE_G_CONVERGENCE; FRAG_MODE; FRAG_REF,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:806445,CACHE,CACHELEVEL,806445,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,5,['CACHE'],['CACHELEVEL']
Performance,"_LINEQ_MAXCY¶. The maximum number of iterations in all linear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE¶. Determines the algorithm used to solve linear equations ( and derivative and ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not guaranteed to converge. Moreover, POPLE has not been tested for some time and should definitely be checked! (Default : DIIS). Type: string; Possible Values: POPLE, DIIS; Default: DIIS. CFOUR_LOCK_ORBOCC¶. This keyword is used by the SCF program to determine if the orbital occupancy (by symmetry block) is allowed to change in the course of the calculation. ON (=1) locks the occupation to that set by the keyword CFOUR_OCCUPATION (or the initial guess if omitted); OFF (= 0) permits the occupation to change. (Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP¶. Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEMORY_SIZE¶. Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_MEM_UNIT¶. Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_METHOD¶. Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:36358,optimiz,optimizations,36358,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,2,['optimiz'],['optimizations']
Performance,"_MIN (OPTKING). INTS_TOLERANCE (CCDENSITY). (CCSORT). (DCFT). (DFMP2). (LMP2). (MRCC). (SAPT). (SCF). (TRANSQT). (TRANSQT2). invalidate() CartesianEntry method. CoordValue method. ZMatrixEntry method. ip_fitting() in module frac. IRC; . geometry optimization. IRC_DIRECTION (OPTKING). IRC_STEP_SIZE (OPTKING). IRC_STOP (OPTKING). irrep_labels() LibmintsMolecule method. is_axis() LibmintsMolecule method. is_computed() CoordEntry method. is_equivalent_to() CoordEntry method. is_ghosted() CoordEntry method. is_linear_planar() LibmintsMolecule method. is_plane() LibmintsMolecule method. is_variable() LibmintsMolecule method. ISTOP (DETCI). IVO (TRANSQT). J. J_FILE (TRANSQT). JOBTYPE (CCLAMBDA). (MP2). JSCH module, [1]. K. KEEP_INTCOS (OPTKING). KEEP_J (TRANSQT). KEEP_OEIFILE (CCSORT). KEEP_PRESORT (TRANSQT). KEEP_TEIFILE (CCSORT). keywords; . C-side, setting. cbs(), setting. cp(), setting. database(), setting. diatomic_anharmonicity(), setting. energy(), setting. molecule, setting. optimize(), setting. property(), setting. kwargs_lower() in module procutil. L. label() CoordEntry method. LibmintsMolecule method. LAG_IN_FILE (TRANSQT). LAGRAN_DOUBLE (TRANSQT). LAGRAN_HALVE (TRANSQT). LAMBDA_MAXITER (DCFT). LCC2(+LMP2)TOTALENERGY. LCCSD(+LMP2)TOTALENERGY. LEVEL_SHIFT (MCSCF). (OMP2). (OMP3). LibmintsMolecule class in qcdb.libmintsmolecule. like_world_axis() LibmintsMolecule static method. LINEAR (CCRESPONSE). LINEQ_SOLVER (OMP2). (OMP3). load_basfam_dunning() in module basislistdunning. load_basfam_other() in module basislistother. load_basis_families() in module basislist. LOCAL (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). (CCSORT). (CIS). LOCAL_AMPS_PRINT_CUTOFF (CIS). LOCAL_CORE_CUTOFF (CCSORT). LOCAL_CPHF_CUTOFF (CCENERGY). (CCLAMBDA). (CCRESPONSE). (CCSORT). LOCAL_CUTOFF (CCENERGY). (CCEOM). (CCLAMBDA). (CCRESPONSE). (CCSORT). (CIS). (LMP2). LOCAL_DO_SINGLES (CCEOM). LOCAL_DOMAIN_MAG (CCSORT). LOCAL_DOMAIN_POLAR (CCSORT). LOCAL_DOMAIN_SEP (CCSORT). LOCAL_FILTER_SINGLES",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/genindex.html:24275,optimiz,optimize,24275,psi4manual/4.0b3/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html,1,['optimiz'],['optimize']
Performance,"_M_FILE (TRANSQT); TRANSQT —. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM —. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR —. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA —. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT —. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (MP2); MP2 — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (OMP2); OM",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html:5781,CACHE,CACHELEVEL,5781,psi4manual/4.0b2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html,4,"['CACHE', 'Cache']","['CACHELEVEL', 'Cacheing']"
Performance,"_PAIRDEF¶. Definition of local pair domains. Type: string; Default: No Default. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_AMPS_PRINT¶. Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. PROP_ALL¶. Compute unrelaxed properties for all excited states. Type: boolean; Default: true. PROP_ROOT¶. Root number (within its irrep) for computing properties. Type: integer; Default: 1. PROP_SYM¶. The symmetry of states. Type: integer; Default: 1. RESTART¶. Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. SEKINO¶. Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. ZETA¶. Do use zeta?. Type: boolean; Default: false. Expert¶. JOBTYPE¶. Type of job being performed. Type: string; Default: No Default. WFN¶. Wavefunction type. Type: string; Default: SCF. table of contents. CCLAMBDA; General; ABCD; AO_BASIS; CACHELEVEL; DIIS; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; NUM_AMPS_PRINT; PROP_ALL; PROP_ROOT; PROP_SYM; RESTART; ROOTS_PER_IRREP; R_CONVERGENCE; SEKINO; ZETA. Expert; JOBTYPE; WFN. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodir_options_c/module__cclambda.html:3275,perform,performed,3275,psi4manual/master/autodir_options_c/module__cclambda.html,https://psicode.org,https://psicode.org/psi4manual/master/autodir_options_c/module__cclambda.html,2,"['CACHE', 'perform']","['CACHELEVEL', 'performed']"
Performance,_PRESORT — PSI4 [beta2] documentation; LAG_IN_FILE — PSI4 [beta2] documentation; LAGRAN_DOUBLE — PSI4 [beta2] documentation; LAGRAN_HALVE — PSI4 [beta2] documentation; M_FILE — PSI4 [beta2] documentation; MAX_BUCKETS — PSI4 [beta2] documentation; MODE — PSI4 [beta2] documentation; MOORDER — PSI4 [beta2] documentation; MP2R12A — PSI4 [beta2] documentation; OEI_A_FILE — PSI4 [beta2] documentation; OEI_B_FILE — PSI4 [beta2] documentation; OEI_FILE — PSI4 [beta2] documentation; OPDM_IN_FILE — PSI4 [beta2] documentation; OPDM_OUT_FILE — PSI4 [beta2] documentation; PITZER — PSI4 [beta2] documentation; PRESORT_FILE — PSI4 [beta2] documentation; PRINT_LVL — PSI4 [beta2] documentation; PRINT_MOS — PSI4 [beta2] documentation; PRINT_OE_INTEGRALS — PSI4 [beta2] documentation; PRINT_REORDER — PSI4 [beta2] documentation; PRINT_SORTED_OE_INTS — PSI4 [beta2] documentation; PRINT_SORTED_TE_INTS — PSI4 [beta2] documentation; PRINT_TE_INTEGRALS — PSI4 [beta2] documentation; PSIMRCC — PSI4 [beta2] documentation; QRHF — PSI4 [beta2] documentation; RAS1 — PSI4 [beta2] documentation; RAS2 — PSI4 [beta2] documentation; RAS3 — PSI4 [beta2] documentation; RAS4 — PSI4 [beta2] documentation; REFERENCE — PSI4 [beta2] documentation; REORDER — PSI4 [beta2] documentation; RESTRICTED_DOCC — PSI4 [beta2] documentation; RESTRICTED_UOCC — PSI4 [beta2] documentation; SO_S_FILE — PSI4 [beta2] documentation; SO_T_FILE — PSI4 [beta2] documentation; SO_TEI_FILE — PSI4 [beta2] documentation; SO_V_FILE — PSI4 [beta2] documentation; SORTED_TEI_FILE — PSI4 [beta2] documentation; TPDM_ADD_REF — PSI4 [beta2] documentation; TPDM_FILE — PSI4 [beta2] documentation; WFN — PSI4 [beta2] documentation; AO_BASIS — PSI4 [beta2] documentation; CACHELEVEL — PSI4 [beta2] documentation; DELETE_TEI — PSI4 [beta2] documentation; INTS_TOLERANCE — PSI4 [beta2] documentation; PRINT_TEI — PSI4 [beta2] documentation; REFERENCE — PSI4 [beta2] documentation; SEMICANONICAL — PSI4 [beta2] documentation; WFN — PSI4 [beta2] documentation.,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:966543,CACHE,CACHELEVEL,966543,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,2,['CACHE'],['CACHELEVEL']
Performance,_PRESORT — PSI4 [beta3] documentation; LAG_IN_FILE — PSI4 [beta3] documentation; LAGRAN_DOUBLE — PSI4 [beta3] documentation; LAGRAN_HALVE — PSI4 [beta3] documentation; M_FILE — PSI4 [beta3] documentation; MAX_BUCKETS — PSI4 [beta3] documentation; MODE — PSI4 [beta3] documentation; MOORDER — PSI4 [beta3] documentation; MP2R12A — PSI4 [beta3] documentation; OEI_A_FILE — PSI4 [beta3] documentation; OEI_B_FILE — PSI4 [beta3] documentation; OEI_FILE — PSI4 [beta3] documentation; OPDM_IN_FILE — PSI4 [beta3] documentation; OPDM_OUT_FILE — PSI4 [beta3] documentation; PITZER — PSI4 [beta3] documentation; PRESORT_FILE — PSI4 [beta3] documentation; PRINT_LVL — PSI4 [beta3] documentation; PRINT_MOS — PSI4 [beta3] documentation; PRINT_OE_INTEGRALS — PSI4 [beta3] documentation; PRINT_REORDER — PSI4 [beta3] documentation; PRINT_SORTED_OE_INTS — PSI4 [beta3] documentation; PRINT_SORTED_TE_INTS — PSI4 [beta3] documentation; PRINT_TE_INTEGRALS — PSI4 [beta3] documentation; PSIMRCC — PSI4 [beta3] documentation; QRHF — PSI4 [beta3] documentation; RAS1 — PSI4 [beta3] documentation; RAS2 — PSI4 [beta3] documentation; RAS3 — PSI4 [beta3] documentation; RAS4 — PSI4 [beta3] documentation; REFERENCE — PSI4 [beta3] documentation; REORDER — PSI4 [beta3] documentation; RESTRICTED_DOCC — PSI4 [beta3] documentation; RESTRICTED_UOCC — PSI4 [beta3] documentation; SO_S_FILE — PSI4 [beta3] documentation; SO_T_FILE — PSI4 [beta3] documentation; SO_TEI_FILE — PSI4 [beta3] documentation; SO_V_FILE — PSI4 [beta3] documentation; SORTED_TEI_FILE — PSI4 [beta3] documentation; TPDM_ADD_REF — PSI4 [beta3] documentation; TPDM_FILE — PSI4 [beta3] documentation; WFN — PSI4 [beta3] documentation; AO_BASIS — PSI4 [beta3] documentation; CACHELEVEL — PSI4 [beta3] documentation; DELETE_TEI — PSI4 [beta3] documentation; INTS_TOLERANCE — PSI4 [beta3] documentation; PRINT_TEI — PSI4 [beta3] documentation; REFERENCE — PSI4 [beta3] documentation; SEMICANONICAL — PSI4 [beta3] documentation; WFN — PSI4 [beta3] documentation.,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1183413,CACHE,CACHELEVEL,1183413,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,2,['CACHE'],['CACHELEVEL']
Performance,_PRESORT — PSI4 [beta4] documentation; LAG_IN_FILE — PSI4 [beta4] documentation; LAGRAN_DOUBLE — PSI4 [beta4] documentation; LAGRAN_HALVE — PSI4 [beta4] documentation; M_FILE — PSI4 [beta4] documentation; MAX_BUCKETS — PSI4 [beta4] documentation; MODE — PSI4 [beta4] documentation; MOORDER — PSI4 [beta4] documentation; MP2R12A — PSI4 [beta4] documentation; OEI_A_FILE — PSI4 [beta4] documentation; OEI_B_FILE — PSI4 [beta4] documentation; OEI_FILE — PSI4 [beta4] documentation; OPDM_IN_FILE — PSI4 [beta4] documentation; OPDM_OUT_FILE — PSI4 [beta4] documentation; PITZER — PSI4 [beta4] documentation; PRESORT_FILE — PSI4 [beta4] documentation; PRINT_LVL — PSI4 [beta4] documentation; PRINT_MOS — PSI4 [beta4] documentation; PRINT_OE_INTEGRALS — PSI4 [beta4] documentation; PRINT_REORDER — PSI4 [beta4] documentation; PRINT_SORTED_OE_INTS — PSI4 [beta4] documentation; PRINT_SORTED_TE_INTS — PSI4 [beta4] documentation; PRINT_TE_INTEGRALS — PSI4 [beta4] documentation; PSIMRCC — PSI4 [beta4] documentation; QRHF — PSI4 [beta4] documentation; RAS1 — PSI4 [beta4] documentation; RAS2 — PSI4 [beta4] documentation; RAS3 — PSI4 [beta4] documentation; RAS4 — PSI4 [beta4] documentation; REFERENCE — PSI4 [beta4] documentation; REORDER — PSI4 [beta4] documentation; RESTRICTED_DOCC — PSI4 [beta4] documentation; RESTRICTED_UOCC — PSI4 [beta4] documentation; SO_S_FILE — PSI4 [beta4] documentation; SO_T_FILE — PSI4 [beta4] documentation; SO_TEI_FILE — PSI4 [beta4] documentation; SO_V_FILE — PSI4 [beta4] documentation; SORTED_TEI_FILE — PSI4 [beta4] documentation; TPDM_ADD_REF — PSI4 [beta4] documentation; TPDM_FILE — PSI4 [beta4] documentation; WFN — PSI4 [beta4] documentation; AO_BASIS — PSI4 [beta4] documentation; CACHELEVEL — PSI4 [beta4] documentation; DELETE_TEI — PSI4 [beta4] documentation; INTS_TOLERANCE — PSI4 [beta4] documentation; PRINT_TEI — PSI4 [beta4] documentation; REFERENCE — PSI4 [beta4] documentation; SEMICANONICAL — PSI4 [beta4] documentation; WFN — PSI4 [beta4] documentation.,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1397058,CACHE,CACHELEVEL,1397058,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,2,['CACHE'],['CACHELEVEL']
Performance,_PRESORT — PSI4 [beta5] documentation; LAG_IN_FILE — PSI4 [beta5] documentation; LAGRAN_DOUBLE — PSI4 [beta5] documentation; LAGRAN_HALVE — PSI4 [beta5] documentation; M_FILE — PSI4 [beta5] documentation; MAX_BUCKETS — PSI4 [beta5] documentation; MODE — PSI4 [beta5] documentation; MOORDER — PSI4 [beta5] documentation; MP2R12A — PSI4 [beta5] documentation; OEI_A_FILE — PSI4 [beta5] documentation; OEI_B_FILE — PSI4 [beta5] documentation; OEI_FILE — PSI4 [beta5] documentation; OPDM_IN_FILE — PSI4 [beta5] documentation; OPDM_OUT_FILE — PSI4 [beta5] documentation; PITZER — PSI4 [beta5] documentation; PRESORT_FILE — PSI4 [beta5] documentation; PRINT_LVL — PSI4 [beta5] documentation; PRINT_MOS — PSI4 [beta5] documentation; PRINT_OE_INTEGRALS — PSI4 [beta5] documentation; PRINT_REORDER — PSI4 [beta5] documentation; PRINT_SORTED_OE_INTS — PSI4 [beta5] documentation; PRINT_SORTED_TE_INTS — PSI4 [beta5] documentation; PRINT_TE_INTEGRALS — PSI4 [beta5] documentation; PSIMRCC — PSI4 [beta5] documentation; QRHF — PSI4 [beta5] documentation; RAS1 — PSI4 [beta5] documentation; RAS2 — PSI4 [beta5] documentation; RAS3 — PSI4 [beta5] documentation; RAS4 — PSI4 [beta5] documentation; REFERENCE — PSI4 [beta5] documentation; REORDER — PSI4 [beta5] documentation; RESTRICTED_DOCC — PSI4 [beta5] documentation; RESTRICTED_UOCC — PSI4 [beta5] documentation; SO_S_FILE — PSI4 [beta5] documentation; SO_T_FILE — PSI4 [beta5] documentation; SO_TEI_FILE — PSI4 [beta5] documentation; SO_V_FILE — PSI4 [beta5] documentation; SORTED_TEI_FILE — PSI4 [beta5] documentation; TPDM_ADD_REF — PSI4 [beta5] documentation; TPDM_FILE — PSI4 [beta5] documentation; WFN — PSI4 [beta5] documentation; AO_BASIS — PSI4 [beta5] documentation; CACHELEVEL — PSI4 [beta5] documentation; DELETE_TEI — PSI4 [beta5] documentation; INTS_TOLERANCE — PSI4 [beta5] documentation; PRINT_TEI — PSI4 [beta5] documentation; REFERENCE — PSI4 [beta5] documentation; SEMICANONICAL — PSI4 [beta5] documentation; WFN — PSI4 [beta5] documentation.,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1614185,CACHE,CACHELEVEL,1614185,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,2,['CACHE'],['CACHELEVEL']
Performance,"_PRINT (OCC). OCC_TOLERANCE (FNOCC). (SAPT). OCEPA; . setting keywords. theory. OCEPA(0)CORRELATIONENERGY. OCEPA(0)TOTALENERGY. OEI_A_FILE (TRANSQT). OEI_B_FILE (TRANSQT). OEI_FILE (TRANSQT). OEProp. theory. oeprop() in module p4util.util. OFFDIAGONAL_CCSD_T (PSIMRCC). OMEGA (CCRESPONSE). (CCSORT). OMEGA_ERF (MINTS). OMP2; . setting keywords. theory. OMP2.5; . setting keywords. OMP2CORRELATIONENERGY. OMP2TOTALENERGY. OMP3; . setting keywords. theory. OMP3CORRELATIONENERGY. OMP3TOTALENERGY. OMP_N_THREAD (CPHF). OMP_NESTED, [1]. OMP_NUM_THREADS, [1], [2], [3], [4]. ONE-ELECTRONENERGY. ONEPDM (CCDENSITY). (DFMP2). ONEPDM_GRID_CUTOFF (CCDENSITY). ONEPDM_GRID_DUMP (CCDENSITY). ONEPDM_GRID_STEPSIZE (CCDENSITY). ONEPOT_GRID_READ (SCF). OPDM (CPHF). (DETCI). OPDM_AVG (DETCI). OPDM_IN_FILE (TRANSQT). OPDM_KE (DETCI). OPDM_OUT_FILE (TRANSQT). OPDM_PRINT (DETCI). OPDM_RELAX (CCDENSITY). (CPHF). (DFMP2). opt(); . see optimize(); . OPT_METHOD (OCC). OPT_TYPE (OPTKING). optimization; . see geometry optimization; . optimize(); . setting keywords. optimize() in module driver. OptionsState class in p4util.optproc. OptionState class in p4util.optproc. ORB_OPT (OCC). ORB_RESP_SOLVER (OCC). Orbital-Optimized Methods; . theory. Orbital-Optimized Methods, OCEPA. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. orientation_fixed() LibmintsMolecule method. ORTH_TYPE (OCC). output; . SAPT. cbs(). database(). geometry optimization. P. P (THERMO). p4const module. p4const.__init__ module. p4const.physconst module. p4const.psifiles module. p4regex module. p4util module. p4util.__init__ module. p4util.basislist module. p4util.basislistdunning module. p4util.basislistother module. p4util.optproc module. p4util.procutil module. p4util.text module. p4util.util module. PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parse_arbitrary_order() in module driver. parse_cotton_irreps() in module driver. parse_error() in module pcmgetkw.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/genindex.html:33531,optimiz,optimization,33531,psi4manual/4.0b5/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/genindex.html,1,['optimiz'],['optimization']
Performance,"_RADIUS (GDMA); GDMA — The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH (GDMA); GDMA — The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING); OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF); FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to SAD for RHF, GWH for ROHF and UHF, and READ for geometry optimizations after the first step. Type: string; Possible Values: AUTO, CORE, GWH, SAD, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BL",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:137602,optimiz,optimizations,137602,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimizations']
Performance,"_RADIUS (GDMA)¶GDMA — The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH (GDMA)¶GDMA — The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING)¶OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF)¶FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF)¶SCF — The type of guess orbitals. Defaults to READ for geometry optimizations after the first step, to CORE for single atoms, and to SAD otherwise. The HUCKEL guess employs on-the-fly calculations like SAD, as described in doi:10.1021/acs.jctc.8b01089 which also describes the SAP guess. Type: string; Possible Values: AUTO, CORE, GWH, SAD, SADNO, SAP, HUCKEL, READ; Default: AUTO. GUESS_MIX (SCF)¶SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF)¶SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI)¶DETCI (Expert) —",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:139126,optimiz,optimizations,139126,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,6,['optimiz'],['optimizations']
Performance,"_RANGE (CCEOM); CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF); CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF); SCF — An ExternalPotential (built by Python or NULL/None). Type: python; Default: No Default. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS); GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code does NOT help you out in any way!. Type: boolean; Default: false. FAIL_ON_MAXITER (SCF); SCF — Fail if we reach maxiter without converging?. Type: boolean; Default: true. FAVG (MCSCF); MCSCF — Do use the average Fock matrix during the SCF optimization?. Type: boolean; Default: false. FAVG_CCSD_T (PSIMRCC); PSIMRCC — Do use the averaged Fock matrix over all references in (T) computations?. Type: boolean; Default: false. FAVG_START (MCSCF); MCSCF — Iteration at which to begin using the averaged Fock matrix. Type: integer; Default: 5. FCI (DETCI); DETCI — Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FCI_STRINGS (DETCI); DETCI (Expert) — Do store strings specifically for FCI? (Defaults to TRUE for FCI.). Type: boolean; Default: false. FILTER_GUESS (DETCI); DETCI (Expert) — Do invoke the FILTER_GUESS options that are used to filter out some trial vectors which may not have the appropriate phase convention between two determinants? This is useful to remove, e.g., delta states when a sigma state is desired. The user inputs two determinants (by giving the absolute alpha string number and beta string number for each), and also the desired phase between th",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:121159,optimiz,optimization,121159,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,4,['optimiz'],['optimization']
Performance,_ROT_EVEC; CFOUR_SAVE_INTS; CFOUR_SCALE_ON; CFOUR_SCF_CONV; CFOUR_SCF_DAMPING; CFOUR_SCF_EXPORDER; CFOUR_SCF_EXPSTART; CFOUR_SCF_EXTRAPOLATION; CFOUR_SCF_MAXCYC; CFOUR_SD_FIELD; CFOUR_SPHERICAL; CFOUR_SPIN_FLIP; CFOUR_SPIN_ORBIT; CFOUR_SPIN_SCAL; CFOUR_SPINROTATION; CFOUR_SUBGROUP; CFOUR_SYM_CHECK; CFOUR_SYMMETRY; CFOUR_T3_EXTRAPOL; CFOUR_TAMP_SUM; CFOUR_THERMOCHEMISTRY; CFOUR_TRANS_INV; CFOUR_TREAT_PERT; CFOUR_UIJ_THRESHOLD; CFOUR_UNITS; CFOUR_UPDATE_HESSIAN; CFOUR_VIBRATION; CFOUR_VTRAN; CFOUR_XFIELD; CFOUR_XFORM_TOL; CFOUR_YFIELD; CFOUR_ZFIELD; TRANSLATE_PSI4; CIS_AMPLITUDE_CUTOFF; CPHF_MEM_SAFETY_FACTOR; CPHF_TASKS; DEBUG; DF_BASIS_SCF; DO_SINGLETS; DO_TRIPLETS; EXPLICIT_HAMILTONIAN; MODULE; PRINT; SCF_TYPE; SOLVER_CONVERGENCE; SOLVER_EXACT_DIAGONAL; SOLVER_MAX_SUBSPACE; SOLVER_MAXITER; SOLVER_MIN_SUBSPACE; SOLVER_N_GUESS; SOLVER_N_ROOT; SOLVER_NORM; SOLVER_PRECONDITION; SOLVER_PRECONDITION_MAXITER; SOLVER_PRECONDITION_STEPS; SOLVER_QUANTITY; SOLVER_TYPE; ALGORITHM; AO_BASIS; CACHELEVEL; DAMPING_PERCENTAGE; DCT_FUNCTIONAL; DCT_GUESS; DCT_TYPE; DF_BASIS_DCT; DIIS_MAX_VECS; DIIS_MIN_VECS; DIIS_START_CONVERGENCE; E_CONVERGENCE; ENERGY_LEVEL_SHIFT; GUESS_R_CONVERGENCE; INTS_TOLERANCE; MAXITER; ODC_GUESS; OPDM; ORBITAL_LEVEL_SHIFT; QC_COUPLING; QC_TYPE; R_CONVERGENCE; REFERENCE; RELAX_GUESS_ORBITALS; RESPONSE_ALGORITHM; STABILITY_ADD_VECTORS; STABILITY_AUGMENT_SPACE_TOL; STABILITY_CHECK; STABILITY_CONVERGENCE; STABILITY_MAX_SPACE_SIZE; STABILITY_N_EIGENVALUES; STABILITY_N_GUESS_VECTORS; THREE_PARTICLE; TIKHONOW_OMEGA; A_RAS3_MAX; AVG_STATES; AVG_WEIGHTS; B_RAS3_MAX; BENDAZZOLI; CALC_S_SQUARED; CC; CC_A_RAS3_MAX; CC_B_RAS3_MAX; CC_EX_LEVEL; CC_FIX_EXTERNAL; CC_FIX_EXTERNAL_MIN; CC_MACRO; CC_MIXED; CC_RAS3_MAX; CC_RAS34_MAX; CC_RAS4_MAX; CC_UPDATE_EPS; CC_VAL_EX_LEVEL; CC_VARIATIONAL; CC_VECS_READ; CC_VECS_WRITE; CI_FILE_START; CI_MAXITER; CI_NUM_THREADS; CIBLKS_PRINT; COLLAPSE_SIZE; DETCI_FREEZE_CORE; DF_BASIS_MCSCF; DIAG_METHOD; DIIS; DIIS_FREQ; DIIS_MAX_VECS; DIIS_MI,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:558854,CACHE,CACHELEVEL,558854,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,"_TERMS (PSIMRCC); PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING); OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF); CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUTOFF (OMP2); OMP2 —. Type: integer; Default: 14. D_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for density. Type: conv double; Default: 1e-6. D_CONVERGENCE (SAPT); SAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT term. Type: conv double; Default: 1e-8. D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density. Type: conv double; Default: 1e-8. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (SCF); SCF ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html:15397,perform,performed,15397,psi4manual/4.0b2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html,2,['perform'],['performed']
Performance,"_TYPE (OMP3); OMP3 — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SPINADAPT_ENERGIES (CCENERGY); CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM); CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG (CCEOM); CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM); CCEOM — SS vectors stored per root. Type: integer; Default: 5. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attemp to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCFT); DCFT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum siz",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:118572,perform,perform,118572,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['perform'],['perform']
Performance,"_basis', 'dimer'). sapt_dimer, monomerA, monomerB = proc_util.prepare_sapt_molecule(sapt_dimer, sapt_basis). if (core.get_option('SCF', 'REFERENCE') != 'RHF') and (name.upper() != ""SAPT0""):; raise ValidationError('Only SAPT0 supports a reference different from \""reference rhf\"".'). do_delta_mp2 = True if name.endswith('dmp2') else False. # raise Exception(""""). ri = core.get_global_option('SCF_TYPE'); df_ints_io = core.get_option('SCF', 'DF_INTS_IO'); # inquire if above at all applies to dfmp2. core.IO.set_default_namespace('dimer'); core.print_out('\n'); p4util.banner('Dimer HF'); core.print_out('\n'). # Compute dimer wavefunction; if (sapt_basis == 'dimer') and (ri == 'DF'):; core.set_global_option('DF_INTS_IO', 'SAVE'). dimer_wfn = scf_helper('RHF', molecule=sapt_dimer, **kwargs); if do_delta_mp2:; select_mp2(name, ref_wfn=dimer_wfn, **kwargs); mp2_corl_interaction_e = core.get_variable('MP2 CORRELATION ENERGY'). if (sapt_basis == 'dimer') and (ri == 'DF'):; core.set_global_option('DF_INTS_IO', 'LOAD'). # Compute Monomer A wavefunction; if (sapt_basis == 'dimer') and (ri == 'DF'):; core.IO.change_file_namespace(97, 'dimer', 'monomerA'). core.IO.set_default_namespace('monomerA'); core.print_out('\n'); p4util.banner('Monomer A HF'); core.print_out('\n'); monomerA_wfn = scf_helper('RHF', molecule=monomerA, **kwargs); if do_delta_mp2:; select_mp2(name, ref_wfn=monomerA_wfn, **kwargs); mp2_corl_interaction_e -= core.get_variable('MP2 CORRELATION ENERGY'). # Compute Monomer B wavefunction; if (sapt_basis == 'dimer') and (ri == 'DF'):; core.IO.change_file_namespace(97, 'monomerA', 'monomerB'); core.IO.set_default_namespace('monomerB'); core.print_out('\n'); p4util.banner('Monomer B HF'); core.print_out('\n'); monomerB_wfn = scf_helper('RHF', molecule=monomerB, **kwargs). # Delta MP2; if do_delta_mp2:; select_mp2(name, ref_wfn=monomerB_wfn, **kwargs); mp2_corl_interaction_e -= core.get_variable('MP2 CORRELATION ENERGY'); core.set_variable('SAPT MP2 CORRELATION ENERGY', mp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/procrouting/proc.html:101458,LOAD,LOAD,101458,psi4manual/1.2.1/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/procrouting/proc.html,1,['LOAD'],['LOAD']
Performance,"_dftd3(); function with d3-atmgr as the passed functional string.; For example, the three-body ATM dispersion correction for a neon trimer could; be computed with:; molecule ne3 {; Ne 0.0 0.0 0.0; Ne 0.0 0.0 1.0; Ne 0.0 1.0 1.0; }; ne.update_geometry(); energy = m.run_dftd3('d3-atmgr', dertype=0); print(energy). Footnotes. 1; Note that there are functionals with these extensions (e.g., wB97X-D) that,; not being Grimme corrections, won’t follow this table exactly. 2; [Grimme:2004:1463]. 3; [Grimme:2006:1787]. 4; [Grimme:2010:154104]. 5; [Grimme:2011:1456]. 6(1,2); [Smith:2016:2197]. 7; [Hujo:2011:3866]. 8; [Chai:2010:6615]. 9; [Pernal:2009:263201]. 10; [Podeszwa:2010:550]. 11; Keyword not used for user-defined functionals where the dft_dict[""dispersion""][""params""]; is easily editable for this purpose. See Advanced Functional Use and Manipulation. A few practical examples:. DFT-D2 single point with default parameters (dftd3 not called); energy('bp86-d'). DFT-D3BJ optimization with default parameters; optimize('pbe-d3bj'). DFT-D2 optimization with custom s6 parameter; set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values); set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). DFT-D2 single point with dftd3 instead of PSI4‘s libdisp; energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dftd3 program can be run independently of the scf; through the python function run_dftd3(). (This function; is the same PSI4/dftd3 interface that is called during an scf job.); This route is much faster than running a DFT-D energy. Some set-up:; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). The same four dispersion corrections/gradients as the section above:; >>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05. >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/dftd3-1.html:8501,optimiz,optimization,8501,psi4manual/1.4.0/dftd3-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dftd3-1.html,4,['optimiz'],"['optimization', 'optimize']"
Performance,_function_index() ShellInfo method. set_geometry() LibmintsMolecule method. set_ghost_fragment() LibmintsMolecule method. set_ghost_fragments() LibmintsMolecule method. set_ghosted() CoordEntry method. set_has_zmatrix() LibmintsMolecule method. set_memory() in module p4util.util. set_molecular_charge() LibmintsMolecule method. set_multiplicity() LibmintsMolecule method. set_name() BasisSet method. LibmintsMolecule method. set_num_threads() in module p4util.util. set_point_group() LibmintsMolecule method. set_radius() InPsight method. set_shell() CoordEntry method. set_shell_by_number() LibmintsMolecule method. set_size() InPsight method. set_symbol() PointGroup method. set_units() LibmintsMolecule method. set_variable() LibmintsMolecule method. set_view() InPsight method. setdefault() OrderedDict method. PreservingDict method. setting; . keywords anharmonicity(). keywords cbs(). keywords database(). keywords energy(). keywords frequency(). keywords general. keywords molecule. keywords optimize(). keywords property(). SF_RESTRICT (DETCI). shell() BasisSet method. CoordEntry method. shell_on_center() BasisSet method. shell_sorter_am() BasisSet static method. shell_sorter_ncenter() BasisSet static method. shell_to_ao_function() BasisSet method. shell_to_basis_function() BasisSet method. shell_to_center() BasisSet method. ShellInfo class in qcdb.libmintsgshell. shells() CoordEntry method. sherrill_gold_standard() in module aliases. show() in module qcdb.vecutil. sigma_h() SymRep method. SIGMA_OVERLAP (DETCI). sigma_xy() SymmetryOperation method. sigma_xz() SymmetryOperation method. SymRep method. sigma_yz() SymmetryOperation method. SymRep method. similar() in module qcdb.libmintspointgrp. single-point. SINGLES_PRINT (CCEOM). sky InPsight attribute. SMALL_CUTOFF (PSIMRCC). SOCC (GLOBALS). (MCSCF). SOLVER_CONVERGENCE (CPHF). SOLVER_EXACT_DIAGONAL (CPHF). SOLVER_MAX_SUBSPACE (CPHF). SOLVER_MAXITER (CPHF). SOLVER_MIN_SUBSPACE (CPHF). SOLVER_N_GUESS (CPHF). SOLVER_N_ROOT (CP,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/genindex.html:130049,optimiz,optimize,130049,psi4manual/1.0.0/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/genindex.html,1,['optimiz'],['optimize']
Performance,"_gmax = '*' if gmax < params.Convergence_gmax else ' '; conv_grms = '*' if grms < params.Convergence_grms else ' '; core.print_out(""\n Measures of convergence in internal coordinates in au. ~""); core.print_out(""\n Criteria marked as inactive (o), active & met (*), and active & unmet ( ). ~""); core.print_out(""\n --------------------------------------------------------------------------------------------- ~""); core.print_out(""\n Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~""); core.print_out(""\n --------------------------------------------------------------------------------------------- ~""); core.print_out((f""\n Convergence Criteria {params.Convergence_energy:10.2e} ""; f""{params.Convergence_gmax:10.2e} {params.Convergence_grms:10.2e} ""; f""{params.Convergence_dmax:10.2e} {params.Convergence_drms:10.2e} ~"")); core.print_out(""\n --------------------------------------------------------------------------------------------- ~""). core.print_out((f""\n {optimizer.Iteration:4d} {optimizer.E:16.8e} -------- ""; f""{gmax:10.2e} {conv_gmax} {grms:10.2e} {conv_grms} -------- -------- ~"")); while True:; if optimizer.state == geometric.optimize.OPT_STATE.CONVERGED:; core.print_out(""\n\n Optimization converged! ~\n""); break; elif optimizer.state == geometric.optimize.OPT_STATE.FAILED:; core.print_out(""\n\n Optimization failed to converge! ~\n""); break; optimizer.step(); optimizer.calcEnergyForce(); optimizer.evaluateStep(); grms, gmax = optimizer.calcGradNorm(); drms, dmax = geometric.optimize.calc_drms_dmax(optimizer.X, optimizer.Xprev); conv_energy = '*' if np.abs(optimizer.E - optimizer.Eprev) < params.Convergence_energy else ' '; conv_gmax = '*' if gmax < params.Convergence_gmax else ' '; conv_grms = '*' if grms < params.Convergence_grms else ' '; conv_dmax = '*' if dmax < params.Convergence_dmax else ' '; conv_drms = '*' if drms < params.Convergence_drms else ' '; core.print_out((f'\n {optimizer.Iteration:4d} {optimizer.E:16.8e} '; f'{optimizer.E-optimizer.Eprev",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html:57079,optimiz,optimizer,57079,psi4manual/1.4.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html,7,['optimiz'],['optimizer']
Performance,"_gradient', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). [docs]def select_fnoccsd(name, **kwargs):; """"""Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. """"""; reference = psi4.get_option('SCF', 'REFERENCE'); mtd_type = psi4.get_global_option('CC_TYPE'); module = psi4.get_global_option('QC_MODULE'); # Considering only fnocc. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module in ['', 'FNOCC']:; func = run_fnocc; elif mtd_type == 'DF':; if module in ['', 'FNOCC']:; func = run_fnodfcc; elif mtd_type == 'CD':; if module in ['', 'FNOCC']:; func = run_fnodfcc. if func is None:; raise ManagedMethodError(['select_fnoccsd', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). [docs]def select_ccsd(name, **kwargs):; """"""Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. """"""; reference = psi4.get_option('SCF', 'REFERENCE'); mtd_type = psi4.get_global_option('CC_TYPE'); module = psi4.get_global_option('QC_MODULE'); # Considering only [df]occ/ccenergy/detci/fnocc. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module == 'FNOCC':; func = run_fnocc; elif module in ['', 'CCENERGY']:; func = run_ccenergy; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'FNOCC']:; func = run_fnodfcc; elif mtd_type == 'CD':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'FNOCC']:; func = run_fnodfcc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'CCENERGY']:; func = run_ccenergy; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'CCENERGY']:; func = run_ccenergy. if func is None:; raise ManagedMethodError([",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/procedures/proc.html:18983,perform,performance,18983,psi4manual/1.0.0/_modules/procedures/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/procedures/proc.html,1,['perform'],['performance']
Performance,"_guess):; psi4.set_global_option(""FRAC_START"", 0); psi4.set_global_option(""REFERENCE"",""UHF""); energy('scf'); psi4.set_global_option(""REFERENCE"",""UKS""); psi4.set_global_option(""GUESS"", ""READ""); psi4.set_global_option(""FRAC_LOAD"", False). psi4.set_global_option(""FRAC_START"", frac_start); psi4.set_global_option(""FRAC_RENORMALIZE"", True). for occ in HOMO_occs:. psi4.set_global_option(""FRAC_OCC"", [HOMO]); psi4.set_global_option(""FRAC_VAL"", [occ]). E = energy('scf'); C = 1; if (E == 0.0):; E = psi4.get_variable('SCF ITERATION ENERGY'); C = 0. if (LUMO > 0):; ref = psi4.wavefunction(); eps = ref.epsilon_a(); potentials.append(eps[int(HOMO)-1]); else:; ref = psi4.wavefunction(); eps = ref.epsilon_b(); potentials.append(eps[-int(HOMO)-1]). occs.append(occ - 1.0); energies.append(E); convs.append(C). psi4.set_global_option(""FRAC_START"", 2); psi4.set_global_option(""FRAC_LOAD"", True); psi4.set_global_option(""GUESS"", ""READ""); psi4.set_global_option(""FRAC_DIIS"", frac_diis); psi4.set_global_option(""DF_INTS_IO"", ""LOAD""). psi4.set_global_option(""DF_INTS_IO"", old_df_ints_io). # => Print the results out <= #; E = {}; psi4.print_out('\n ==> Fractional Occupation Traverse Results <==\n\n'); psi4.print_out('\t%-11s %-24s %-24s %11s\n' %('N', 'Energy', 'HOMO Energy', 'Converged')); for k in range(len(occs)):; psi4.print_out('\t%11.3E %24.16E %24.16E %11d\n' % (occs[k], energies[k], potentials[k], convs[k])); E[occs[k]] = energies[k]. psi4.print_out('\n\t""You trying to be a hero Watkins?""\n'); psi4.print_out('\t""Just trying to kill some bugs sir!""\n'); psi4.print_out('\t\t\t-Starship Troopers\n'). # Drop the files out; fh = open(traverse_filename, 'w'); fh.write('\t%-11s %-24s %-24s %11s\n' %('N', 'Energy', 'HOMO Energy', 'Converged')); for k in range(len(occs)):; fh.write('\t%11.3E %24.16E %24.16E %11d\n' % (occs[k], energies[k], potentials[k], convs[k])); fh.close(). return E. # Pull all the electrons out, one at a time; [docs]def frac_nuke(mol, **kwargs):; kwargs = p4util.kwargs_lower(k",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/frac.html:6157,LOAD,LOAD,6157,psi4manual/4.0b5/_modules/frac.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/frac.html,1,['LOAD'],['LOAD']
Performance,"_hess_every):; G = core.get_gradient() # TODO; core.IOManager.shared_object().set_specific_retention(1, True); core.IOManager.shared_object().set_specific_path(1, './'); frequencies(hessian_with_method, **kwargs); steps_since_last_hessian = 0; core.set_gradient(G); core.set_global_option('CART_HESS_READ', True); elif (full_hess_every == -1) and core.get_global_option('CART_HESS_READ') and (n == 1):; pass; # Do nothing; user said to read existing hessian once; else:; core.set_global_option('CART_HESS_READ', False); steps_since_last_hessian += 1. # Take step. communicate to/from/within optking through legacy_molecule; core.set_legacy_molecule(moleculeclone); optking_rval = core.optking(); moleculeclone = core.get_legacy_molecule(); moleculeclone.update_geometry(); if optking_rval == core.PsiReturnType.EndLoop:; # if this is the end of an IRC run, set wfn, energy, and molecule to that; # of the last optimized IRC point; if core.get_option('OPTKING', 'OPT_TYPE') == 'IRC':; thisenergy = old_thisenergy; print('Optimizer: Optimization complete!'); core.print_out('\n Final optimized geometry and variables:\n'); moleculeclone.print_in_input_format(); # Check if user wants to see the intcos; if so, don't delete them.; if core.get_option('OPTKING', 'INTCOS_GENERATE_EXIT') == False:; if core.get_option('OPTKING', 'KEEP_INTCOS') == False:; core.opt_clean(); # Changing environment to optimized geometry as expected by user; molecule.set_geometry(moleculeclone.geometry()); for postcallback in hooks['optimize']['post']:; postcallback(lowername, wfn=wfn, **kwargs); core.clean(). # S/R: Clean up opt input file; if opt_mode == 'reap':; with open('OPT-master.in', 'wb') as fmaster:; fmaster.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'.encode('utf-8')); fmaster.write('# Optimization complete!\n\n'.encode('utf-8')). # Cleanup binary file 1; if custom_gradient or ('/' in lowername):; core.IOManager.shared_object().set_specific_retention(1, False). optst",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html:61698,Optimiz,Optimizer,61698,psi4manual/1.1.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html,4,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,"_hess_every):; G = psi4.get_gradient() # TODO; psi4.IOManager.shared_object().set_specific_retention(1, True); psi4.IOManager.shared_object().set_specific_path(1, './'); frequencies(hessian_with_method, **kwargs); steps_since_last_hessian = 0; psi4.set_gradient(G); psi4.set_global_option('CART_HESS_READ', True); elif (full_hess_every == -1) and psi4.get_global_option('CART_HESS_READ') and (n == 1):; pass; # Do nothing; user said to read existing hessian once; else:; psi4.set_global_option('CART_HESS_READ', False); steps_since_last_hessian += 1. # Take step. communicate to/from/within optking through legacy_molecule; psi4.set_legacy_molecule(moleculeclone); optking_rval = psi4.optking(); moleculeclone = psi4.get_legacy_molecule(); moleculeclone.update_geometry(); if optking_rval == psi4.PsiReturnType.EndLoop:; # if this is the end of an IRC run, set wfn, energy, and molecule to that; # of the last optimized IRC point; if psi4.get_option('OPTKING', 'OPT_TYPE') == 'IRC':; thisenergy = old_thisenergy; print('Optimizer: Optimization complete!'); psi4.print_out('\n Final optimized geometry and variables:\n'); moleculeclone.print_in_input_format(); # Check if user wants to see the intcos; if so, don't delete them.; if psi4.get_option('OPTKING', 'INTCOS_GENERATE_EXIT') == False:; if psi4.get_option('OPTKING', 'KEEP_INTCOS') == False:; psi4.opt_clean(); # Changing environment to optimized geometry as expected by user; molecule.set_geometry(moleculeclone.geometry()); for postcallback in hooks['optimize']['post']:; postcallback(lowername, wfn=wfn, **kwargs); psi4.clean(). # S/R: Clean up opt input file; if opt_mode == 'reap':; with open('OPT-master.in', 'wb') as fmaster:; fmaster.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'.encode('utf-8')); fmaster.write('# Optimization complete!\n\n'.encode('utf-8')). # Cleanup binary file 1; if custom_gradient or ('/' in lowername):; psi4.IOManager.shared_object().set_specific_retention(1, False). optst",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver.html:59856,Optimiz,Optimizer,59856,psi4manual/1.0.0/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver.html,2,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,"_irr))). return H_block. def _process_hessian(H_blocks: List[np.ndarray], B_blocks: List[np.ndarray], massweighter: np.ndarray, print_lvl: int) -> np.ndarray:; """"""Perform post-construction processing for the Hessian.; Statements need to be printed, and the Hessian must be transformed. Parameters; ----------; H_blocks; A list of blocks of the Hessian per irrep, in mass-weighted salcs.; Each is (nsalc_in_irrep, nsalc_in_irrep); B_blocks; A block of the B matrix per irrep, which transforms CdSalcs to Cartesians.; Each is (nsalc_in_irrep, 3 * nat); massweighter; The mass associated with each atomic coordinate.; (3 * nat, ) Due to x, y, z, values appear in groups of three.; print_lvl; The level of printing information requested by the user. Returns; -------; Hx; The Hessian in non-mass weighted cartesians.; """""". # Handle empty case (atom); if not H_blocks and not B_blocks:; nat3 = massweighter.size; return np.zeros((nat3, nat3), dtype=np.float64). # We have the Hessian in each irrep! The final task is to perform coordinate transforms.; H = p4util.block_diagonal_array(*H_blocks); B = np.vstack(B_blocks). if print_lvl >= 3:; core.print_out(""\n Force constant matrix for all computed irreps in mass-weighted SALCS.\n""); core.print_out(""\n{}\n"".format(nppp10(H))). # Transform the massweighted Hessian from the CdSalc basis to Cartesians.; # The Hessian is the matrix not of a linear transformation, but of a (symmetric) bilinear form; # As such, the change of basis is formula A' = Xt A X, no inverses!; # More conceptually, it's A'_kl = A_ij X_ik X_jl; Each index transforms linearly.; Hx = np.dot(np.dot(B.T, H), B); if print_lvl >= 3:; core.print_out(""\n Force constants in mass-weighted Cartesian coordinates.\n""); core.print_out(""\n{}\n"".format(nppp10(Hx))). # Un-massweight the Hessian.; Hx = np.transpose(Hx / massweighter) / massweighter. if print_lvl >= 3:; core.print_out(""\n Force constants in Cartesian coordinates.\n""); core.print_out(""\n{}\n"".format(nppp10(Hx))). if print_lvl:",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html:25573,perform,perform,25573,psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,4,['perform'],['perform']
Performance,"_list() in module functional. sym_label() LibmintsMolecule method. symbol() CoordEntry method. LibmintsMolecule method. symmetrize() LibmintsMolecule method. symmetry. molecule. symmetry_frame() LibmintsMolecule method. symmetry_from_input() LibmintsMolecule method. T. T (THERMO). T2_COUPLED (CCENERGY). T3_WS_INCORE (CCENERGY). (CCEOM). T_AMPS (CCHBAR). Table class in text. tblhead() in module wrappers. TDHF_MEM_SAFETY_FACTOR (CPHF). TDM (DETCI). TDM_PRINT (DETCI). TDM_WRITE (DETCI). TEST_B (OPTKING). test_ccl_functional() in module functional. TEST_DERIVATIVE_B (OPTKING). text module. theory; . ADC. CC. CI. DCFT. DF-MP2. DFT. OCEPA. OEProp. OMP2. OMP3. Orbital-Optimized Methods. SAPT. SCF. cbs(), [1]. THETA_POINTS (SCF). THICKNESS (SCF). threading. TIKHONOW_MAX (PSIMRCC). TIKHONOW_OMEGA (DCFT). (PSIMRCC). TIKHONOW_TRIPLES (PSIMRCC). TILE_SZ (SCF). TPDM (DCFT). (DETCI). TPDM_ABCD_TYPE (OCC). TPDM_ADD_REF (TRANSQT). TPDM_FILE (TRANSQT). TPDM_PRINT (DETCI). transition state; . geometry optimization. translate() LibmintsMolecule method. transpose() in module qcdb.vecutil. TRIPLES_ALGORITHM (PSIMRCC). TRIPLES_DIIS (PSIMRCC). TRIPLES_LOW_MEMORY (FNOCC). TURN_ON_ACTV (MCSCF). TWO-ELECTRONENERGY. type() CartesianEntry method. NumberValue method. VariableValue method. ZMatrixEntry method. U. UNCP-CORRECTED2-BODYINTERACTIONENERGY. unique() LibmintsMolecule method. units; . molecule. UNITS (GLOBALS). units() LibmintsMolecule method. UPDATE (DETCI). update_geometry() LibmintsMolecule method. USE_SPIN_SYM (PSIMRCC). USE_SPIN_SYMMETRY (PSIMRCC). useful() in module qcdb.dbproc. util module. V. VAL_EX_LEVEL (DETCI). valid_atom_map() LibmintsMolecule method. validate_bracketed_basis() in module wrappers. validate_scheme_args() in module wrappers. ValidationError, [1]. variable_to_string() NumberValue method. VariableValue method. VariableValue class in qcdb.libmintscoordentry. VECS_CC3 (CCEOM). VECS_PER_ROOT (CCEOM). VECS_WRITE (DETCI). visualization. W. WABEI_LOWDISK (CCHBAR). WebM",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/genindex.html:44621,optimiz,optimization,44621,psi4manual/4.0b4/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/genindex.html,1,['optimiz'],['optimization']
Performance,"_list[label] = self.computer(**packet, **passalong). # for n, displacement in enumerate(findif_meta_dict[""displacements""].values(), start=2):; # _process_displacement(energy, lowername, molecule, displacement, n, ndisp, write_orbitals=False, **kwargs). [docs] def build_tasks(self, obj, **kwargs):; # permanently a dummy function; pass. [docs] def plan(self):; # uncalled function; return [t.plan() for t in self.task_list.values()]. [docs] def compute(self, client: Optional[""qcportal.FractalClient""] = None):; """"""Run each job in task list.""""""; instructions = ""\n"" + p4util.banner(f"" FiniteDifference Computations"", strNotOutfile=True) + ""\n""; logger.debug(instructions); core.print_out(instructions). with p4util.hold_options_state():; for t in self.task_list.values():; t.compute(client=client). def _prepare_results(self, client: Optional[""qcportal.FractalClient""] = None):; results_list = {k: v.get_results(client=client) for k, v in self.task_list.items()}. # load AtomicComputer results into findifrec[reference]; reference = self.findifrec[""reference""]; task = results_list[""reference""]; response = task.return_result; reference[""module""] = getattr(task.provenance, ""module"", None). if task.driver == 'energy':; reference['energy'] = response. elif task.driver == 'gradient':; reference['gradient'] = response; reference['energy'] = task.extras['qcvars']['CURRENT ENERGY']. elif task.driver == 'hessian':; reference['hessian'] = response; reference['energy'] = task.extras['qcvars']['CURRENT ENERGY']; if 'CURRENT GRADIENT' in task.extras['qcvars']:; reference['gradient'] = task.extras['qcvars']['CURRENT GRADIENT']. dipole_available = False; if 'CURRENT DIPOLE' in task.extras['qcvars']:; reference['dipole'] = task.extras['qcvars']['CURRENT DIPOLE']; dipole_available = True. # load AtomicComputer results into findifrec[displacements]; for label, displacement in self.findifrec[""displacements""].items():; task = results_list[label]; response = task.return_result. if task.driver == 'energy",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html:46614,load,load,46614,psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,1,['load'],['load']
Performance,"_local_to_global() psi4.core.BlockOPoints method. fx() psi4.core.Molecule method. fy() psi4.core.Molecule method. fZ() psi4.core.Molecule method. fz() psi4.core.Molecule method. fzc() psi4.core.MOSpace static method. fzv() psi4.core.MOSpace static method. G. G_CONVERGENCE (OPTKING). gamma psi4.driver.p4util.Lineshape attribute. gamma() psi4.core.CharacterTable method. gau2grid. GAUGE (ADC). (CCDENSITY). (CCRESPONSE). Gaussian class in psi4.driver.p4util. Gaussian Formatted Checkpoint. GaussianShell class in psi4.core. GaussianType class in psi4.core. gCP. GDMA. gdma() in module psi4.driver. GDMA_LIMIT (GDMA). GDMA_MULTIPOLE_UNITS (GDMA). GDMA_ORIGIN (GDMA). GDMA_RADIUS (GDMA). GDMA_SWITCH (GDMA). gemm() psi4.core.Matrix method. genbas() psi4.core.BasisSet method. general. ; setting keywords. general_invert() psi4.core.Matrix method. GEOM_MAXITER (OPTKING). geometry optimization. ; constrained. convergence criteria. function call. IRC. minima. output. transition state. geometry optimization, optimization. geometry() in module psi4.driver. psi4.core.Molecule method. GeometryUnits class in psi4.core. get() psi4.core.IntVector method. psi4.core.Matrix method. psi4.core.Vector method. get_active_molecule() in module psi4.core. get_algorithm() psi4.core.FittingMetric method. get_amplitudes() psi4.core.CCWavefunction method. get_AO_core() psi4.core.DFHelper method. get_AO_size() psi4.core.DFHelper method. get_array() psi4.core.Wavefunction method. get_array_variable() in module psi4.core. get_array_variables() in module psi4.core. get_basisset() psi4.core.Wavefunction method. get_block() psi4.core.IntVector method. psi4.core.Matrix method. psi4.core.VBase method. psi4.core.Vector method. get_bool() psi4.core.Options method. get_current_module() psi4.core.Options method. get_datadir() in module psi4.core. get_default_namespace() psi4.core.IO static method. get_default_path() psi4.core.IOManager method. get_density() psi4.core.Wavefunction method. get_dimension() psi4.core.CI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/genindex.html:55913,optimiz,optimization,55913,psi4manual/1.7.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/genindex.html,4,['optimiz'],['optimization']
Performance,"_mrcc; elif module in ['', 'CCENERGY']:; func = run_ccenergy; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'FNOCC']:; func = run_fnodfcc; elif mtd_type == 'CD':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'FNOCC']:; func = run_fnodfcc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module == 'MRCC' and which(""dmrcc"", return_bool=True):; func = run_mrcc; elif module in ['', 'CCENERGY']:; func = run_ccenergy; elif mtd_type in [""DF"", ""CD""]:; if module in [""OCC""]: # SOON """",; func = run_dfocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'MRCC' and which(""dmrcc"", return_bool=True):; func = run_mrcc; elif module in ['', 'CCENERGY']:; func = run_ccenergy. if func is None:; raise ManagedMethodError([__name__, name, type_var, mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_ccsd_t__gradient(name, **kwargs):; """"""Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); type_var, _, mtd_type = method_algorithm_type(name); module = core.get_global_option('QC_MODULE'). func = None; if reference in ['RHF']:; if mtd_type == 'CONV':; if module in ['', 'CCENERGY']:; func = run_ccenergy_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'CCENERGY']:; func = run_ccenergy_gradient; elif mtd_type == 'DF':; if module in ['OCC']: # SOON """",; func = run_dfocc_gradient. if func is None:; raise ManagedMethodError([__name__, name, type_var, mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_ccsd_at_(name, **kwargs):; """"""Function selecting the algorithm for a a-CCSD(T) energy call; and directing to specified or best-performance default modules. """"""; if name.lo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html:27041,perform,performance,27041,psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html,1,['perform'],['performance']
Performance,"_mrcc; elif module in ['', 'CCENERGY']:; func = run_ccenergy; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'FNOCC']:; func = run_fnodfcc; elif mtd_type == 'CD':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'FNOCC']:; func = run_fnodfcc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module == 'MRCC' and which(""dmrcc"", return_bool=True):; func = run_mrcc; elif module in ['', 'CCENERGY']:; func = run_ccenergy; elif mtd_type in [""DF"", ""CD""]:; if module in [""OCC""]: # SOON """",; func = run_dfocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'MRCC' and which(""dmrcc"", return_bool=True):; func = run_mrcc; elif module in ['', 'CCENERGY']:; func = run_ccenergy. if func is None:; raise ManagedMethodError([__name__, name, type_var, mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_ccsd_t__gradient(name, **kwargs):; """"""Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); type_var, _, mtd_type = method_algorithm_type(name); module = core.get_global_option('QC_MODULE'). func = None; if reference in ['RHF']:; if mtd_type == 'CONV':; if module in ['CCENERGY']: # FORMERLY """"; func = run_ccenergy_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['CCENERGY']: # FORMERLY """"; func = run_ccenergy_gradient; elif mtd_type == 'DF':; if module in ['OCC']: # SOON """",; func = run_dfocc_gradient. if func is None:; raise ManagedMethodError([__name__, name, type_var, mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_ccsd_at_(name, **kwargs):; """"""Function selecting the algorithm for a a-CCSD(T) energy call; and directing to specified or best-performance default modu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/procrouting/proc.html:27043,perform,performance,27043,psi4manual/1.8.x/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/procrouting/proc.html,3,['perform'],['performance']
Performance,"_object(); psio = psi4.IO.shared_object(); os.chdir(psioh.get_default_path()). # Construct and move into cfour subdirectory of job scratch directory; cfour_tmpdir = kwargs['path'] if 'path' in kwargs else \; 'psi.' + str(os.getpid()) + '.' + psio.get_default_namespace() + \; '.cfour.' + str(random.randint(0, 99999)); if not os.path.exists(cfour_tmpdir):; os.mkdir(cfour_tmpdir); os.chdir(cfour_tmpdir). # Find environment by merging PSIPATH and PATH environment variables; lenv = {; 'PATH': ':'.join([os.path.abspath(x) for x in os.environ.get('PSIPATH', '').split(':') if x != '']) + \; ':' + os.environ.get('PATH') + \; ':' + psi4.Process.environment[""PSIDATADIR""] + '/basis' + \; ':' + psi4.psi_top_srcdir() + '/share/basis',; 'LD_LIBRARY_PATH': os.environ.get('LD_LIBRARY_PATH'); }. if 'path' in kwargs:; lenv['PATH'] = kwargs['path'] + ':' + lenv['PATH']; # Filter out None values as subprocess will fault on them; lenv = {k: v for k, v in lenv.items() if v is not None}. # Load the GENBAS file; genbas_path = qcdb.search_file('GENBAS', lenv['PATH']); if genbas_path:; try:; shutil.copy2(genbas_path, psioh.get_default_path() + cfour_tmpdir); except shutil.Error: # should only fail if src and dest equivalent; pass; psi4.print_out(""\n GENBAS loaded from %s\n"" % (genbas_path)); psi4.print_out("" CFOUR to be run from %s\n"" % (psioh.get_default_path() + cfour_tmpdir)); else:; message = """"""; GENBAS file for CFOUR interface not found. Either:; [1] Supply a GENBAS by placing it in PATH or PSIPATH; [1a] Use cfour {} block with molecule and basis directives.; [1b] Use molecule {} block and CFOUR_BASIS keyword.; [2] Allow Psi4's internal basis sets to convert to GENBAS; [2a] Use molecule {} block and BASIS keyword. """"""; psi4.print_out(message); psi4.print_out(' Search path that was tried:\n'); psi4.print_out(lenv['PATH'].replace(':', ', ')). # Generate the ZMAT input file in scratch; if 'path' in kwargs and os.path.isfile('ZMAT'):; psi4.print_out("" ZMAT loaded from %s\n"" % (psioh.get_def",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/procedures/interface_cfour.html:5516,Load,Load,5516,psi4manual/1.0.0/_modules/procedures/interface_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/procedures/interface_cfour.html,1,['Load'],['Load']
Performance,"_option(""REFERENCE"",""UHF""); energy('scf', molecule=molecule, **kwargs); psi4.set_global_option(""REFERENCE"",""UKS""); psi4.set_global_option(""GUESS"", ""READ""); psi4.set_global_option(""DF_INTS_IO"", ""SAVE""). psi4.set_global_option(""FRAC_START"", frac_start); psi4.set_global_option(""FRAC_RENORMALIZE"", True); psi4.set_global_option(""FRAC_LOAD"", False). for occ in LUMO_occs:. psi4.set_global_option(""FRAC_OCC"", [LUMO]); psi4.set_global_option(""FRAC_VAL"", [occ]). E, wfn = energy('scf', return_wfn=True, molecule=molecule, **kwargs); C = 1; if E == 0.0:; E = psi4.get_variable('SCF ITERATION ENERGY'); C = 0. if LUMO > 0:; eps = wfn.epsilon_a(); potentials.append(eps[int(LUMO) - 1]); else:; eps = wfn.epsilon_b(); potentials.append(eps[-int(LUMO) - 1]). occs.append(occ); energies.append(E); convs.append(C). psi4.set_global_option(""FRAC_START"", 2); psi4.set_global_option(""FRAC_LOAD"", True); psi4.set_global_option(""GUESS"", ""READ""); psi4.set_global_option(""FRAC_DIIS"", frac_diis); psi4.set_global_option(""DF_INTS_IO"", ""LOAD""). # => Run the neutral next <= #. molecule.set_molecular_charge(charge0); molecule.set_multiplicity(mult0). # Burn the neutral in with hf, if requested <= #. if not continuous_guess:; psi4.set_global_option(""GUESS"", old_guess); if hf_guess:; psi4.set_global_option(""FRAC_START"", 0); psi4.set_global_option(""REFERENCE"", ""UHF""); energy('scf', molecule=molecule, **kwargs); psi4.set_global_option(""REFERENCE"", ""UKS""); psi4.set_global_option(""GUESS"", ""READ""); psi4.set_global_option(""FRAC_LOAD"", False). psi4.set_global_option(""FRAC_START"", frac_start); psi4.set_global_option(""FRAC_RENORMALIZE"", True). for occ in HOMO_occs:. psi4.set_global_option(""FRAC_OCC"", [HOMO]); psi4.set_global_option(""FRAC_VAL"", [occ]). E, wfn = energy('scf', return_wfn=True, molecule=molecule, **kwargs); C = 1; if E == 0.0:; E = psi4.get_variable('SCF ITERATION ENERGY'); C = 0. if LUMO > 0:; eps = wfn.epsilon_a(); potentials.append(eps[int(HOMO) - 1]); else:; eps = wfn.epsilon_b(); potentials.append(ep",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/frac.html:4716,LOAD,LOAD,4716,psi4manual/1.0.0/_modules/frac.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/frac.html,1,['LOAD'],['LOAD']
Performance,"_shell() (psi4.core.OneBodyAOInt method). (psi4.core.ThreeCenterOverlapInt method). (psi4.core.TwoBodyAOInt method). (psi4.core.TwoElectronInt method). compute_spin_contamination() (psi4.core.HF method). compute_state_transfer() (psi4.core.CIWavefunction method). COMPUTE_TRIPLES (FNOCC). compute_V() (psi4.core.VBase method). compute_Vx() (psi4.core.VBase method). computed (psi4.driver.AtomicComputer attribute). computed_shells_per_iter() (psi4.core.JK method). computeExternExternInteraction() (psi4.core.ExternalPotential method). computeNuclearEnergy() (psi4.core.ExternalPotential method). computePotentialMatrix() (psi4.core.ExternalPotential method). computer (psi4.driver.driver_findif.FiniteDifferenceComputer attribute). CONDA_PREFIX, [1]. connectivity() (psi4.core.Molecule method). CONSECUTIVE_BACKSTEPS (OPTKING). construct_from_pydict() (psi4.core.BasisSet static method). contact. continuum solvation, [1]. converged (psi4.core.Localizer attribute). convergence criteria. ; geometry optimization. ConvergenceError. copy() (psi4.core.CIVector method). (psi4.core.IntVector method). (psi4.core.Matrix method). (psi4.core.Vector method). copy_file_from_scratch() (in module psi4.driver). (in module psi4.driver.p4util). copy_file_to_scratch() (in module psi4.driver). (in module psi4.driver.p4util). copy_lower_to_upper() (psi4.core.Matrix method). copy_upper_to_lower() (psi4.core.Matrix method). core_hamiltonian_grad() (psi4.core.MintsHelper method). corl_xtpl_helgaker_2() (in module psi4.driver.driver_cbs_helper). CORR_ANSATZ (PSIMRCC). CORR_CCSD_T (PSIMRCC). CORR_CHARGE (PSIMRCC). CORR_MULTP (PSIMRCC). CORR_WFN (PSIMRCC). Correlated (psi4.core.DerivCalcType attribute). CorrelationFactor (class in psi4.core). CorrelationTable (class in psi4.core). COSMO. COSX_BASIS_TOLERANCE (SCF). COSX_DENSITY_TOLERANCE (SCF). COSX_INTS_TOLERANCE (SCF). COSX_MAXITER_FINAL (SCF). COSX_OVERLAP_FITTING (SCF). COSX_PRUNING_SCHEME (SCF). COSX_RADIAL_POINTS_FINAL (SCF). COSX_RADIAL_POINTS_INITI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/genindex.html:30995,optimiz,optimization,30995,psi4manual/1.9.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/genindex.html,1,['optimiz'],['optimization']
Performance,"_so = wfn.Da(); >>> SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); >>> Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); >>> molden(wfn, 'ccsd_no.molden', density_a=Da_mo). """""". if filename is None:; filename = core.get_writer_file_prefix(wfn.molecule().name()) + "".molden"". if dovirtual is None:; dovirt = bool(core.get_option(""SCF"", ""MOLDEN_WITH_VIRTUAL"")). else:; dovirt = dovirtual. if density_a:; nmopi = wfn.nmopi(); nsopi = wfn.nsopi(). NO_Ra = core.Matrix(""NO Alpha Rotation Matrix"", nmopi, nmopi); NO_occa = core.Vector(nmopi); density_a.diagonalize(NO_Ra, NO_occa, core.DiagonalizeOrder.Descending); NO_Ca = core.Matrix(""Ca Natural Orbitals"", nsopi, nmopi); NO_Ca.gemm(False, False, 1.0, wfn.Ca(), NO_Ra, 0). if density_b:; NO_Rb = core.Matrix(""NO Beta Rotation Matrix"", nmopi, nmopi); NO_occb = core.Vector(nmopi); density_b.diagonalize(NO_Rb, NO_occb, core.DiagonalizeOrder.Descending); NO_Cb = core.Matrix(""Cb Natural Orbitals"", nsopi, nmopi); NO_Cb.gemm(False, False, 1.0, wfn.Cb(), NO_Rb, 0). else:; NO_occb = NO_occa; NO_Cb = NO_Ca. mw = core.MoldenWriter(wfn); mw.write(filename, NO_Ca, NO_Cb, NO_occa, NO_occb, NO_occa, NO_occb, dovirt). else:; try:; occa = wfn.occupation_a(); occb = wfn.occupation_b(); except AttributeError:; core.print_out(""\n!Molden warning: This wavefunction does not have occupation numbers.\n""; ""Writing zero's for occupation numbers\n\n""); occa = core.Vector(wfn.nmopi()); occb = core.Vector(wfn.nmopi()). mw = core.MoldenWriter(wfn); mw.write(filename, wfn.Ca(), wfn.Cb(), wfn.epsilon_a(), wfn.epsilon_b(), occa, occb, dovirt). [docs]def tdscf(wfn, **kwargs):; return proc.run_tdscf_excitations(wfn,**kwargs). # Aliases; opt = optimize; freq = frequency; frequencies = frequency; prop = properties. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.6;  · . PSI4. Module code; psi4.driver.driver. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html:95680,optimiz,optimize,95680,psi4manual/1.6.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html,1,['optimiz'],['optimize']
Performance,"_specific_path(1, './'); frequencies(hessian_with_method, molecule=moleculeclone, ref_gradient=G, **kwargs); steps_since_last_hessian = 0; core.set_legacy_gradient(G); core.set_global_option('CART_HESS_READ', True); elif (full_hess_every == -1) and core.get_global_option('CART_HESS_READ') and (n == 1):; pass; # Do nothing; user said to read existing hessian once; else:; core.set_global_option('CART_HESS_READ', False); steps_since_last_hessian += 1. # Take step. communicate to/from/within optking through legacy_molecule; core.set_legacy_molecule(moleculeclone); optking_rval = core.optking(); moleculeclone = core.get_legacy_molecule(); moleculeclone.update_geometry(); if optking_rval == core.PsiReturnType.EndLoop:; # if this is the end of an IRC run, set wfn, energy, and molecule to that; # of the last optimized IRC point; if core.get_option('OPTKING', 'OPT_TYPE') == 'IRC':; thisenergy = old_thisenergy; print('Optimizer: Optimization complete!'); core.print_out('\n Final optimized geometry and variables:\n'); moleculeclone.print_in_input_format(); # Mark the optimization data as disposable now that the optimization is done.; core.IOManager.shared_object().set_specific_retention(1, False); # Check if user wants to see the intcos; if so, don't delete them.; if not core.get_option('OPTKING', 'INTCOS_GENERATE_EXIT'):; if not core.get_option('OPTKING', 'KEEP_INTCOS'):; core.opt_clean(); # Changing environment to optimized geometry as expected by user; molecule.set_geometry(moleculeclone.geometry()); for postcallback in hooks['optimize']['post']:; postcallback(lowername, wfn=wfn, **kwargs); core.clean(). # Cleanup binary file 1; if custom_gradient or ('/' in lowername) or kwargs.get('bsse_type', None) is not None:; core.IOManager.shared_object().set_specific_retention(1, False). optstash.restore(). if return_history:; history = {; 'energy': step_energies,; 'gradient': step_gradients,; 'coordinates': step_coordinates,; }. if return_wfn and return_history:; return (thisenergy,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html:67441,optimiz,optimized,67441,psi4manual/1.6.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html,1,['optimiz'],['optimized']
Performance,"_threads():; """"""Function to return the number of threads to parallelize across.""""""; return PsiMod.nthread(). [docs]def success(label):; """"""Function to print a '*label*...PASSED' line to screen.; Used by :py:func:`util.compare_values` family when functions pass. """"""; print '\t{0:.<66}PASSED'.format(label); sys.stdout.flush(). # Test functions; [docs]def compare_values(expected, computed, digits, label):; """"""Function to compare two values. Prints :py:func:`util.success`; when value *computed* matches value *expected* to number of *digits*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (abs(expected - computed) > 10 ** (-digits)):; print ""\t%s: computed value (%f) does not match (%f) to %d digits."" % (label, computed, expected, digits); sys.exit(1); success(label). [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; print ""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected); sys.exit(1); success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if(expected != computed):; print ""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected); sys.exit(1); success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() !=",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/util.html:1605,Perform,Performs,1605,psi4manual/4.0b2/_modules/util.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/util.html,1,['Perform'],['Performs']
Performance,"_values, compare_integers; from psi4 import core; from .exceptions import ValidationError. __all__ = [; ""compare_fchkfiles"",; ""compare_moldenfiles"",; ]. def _consume_fchk_section(input_list, index):; """"""compare a float or integer matrix section"""""". n = int(input_list[index].split()[-1]); kind = input_list[index].split()[-3]. if ""R"" in kind:; dtype = np.float64; format_counter = 5; elif ""I"" in kind:; dtype = np.float64; format_counter = 6; else:; raise ValidationError('Unknow field type in FCHK reader\n'). extra = 0 if n <= format_counter else n % format_counter; lines = 1 if n <= format_counter else int(n / format_counter); offset = lines + 1 if extra > 0 else lines; string = ''; for j in range(lines):; string += """".join(str(x) for x in input_list[index + 1 + j]); if extra > 0:; string += """".join(str(x) for x in input_list[index + 1 + lines]); field = np.fromiter(string.split(), dtype=dtype); return offset + 1, field. def _fchkfile_to_string(fname: str) -> str:; """""" Load FCHK file into a string""""""; with open(fname, 'r') as handle:; fchk_string = handle.read(); return fchk_string. [docs]; def compare_fchkfiles(expected: str, computed: str, atol_exponent: Union[int, float], label: str):; """"""Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4's FCHK files. Parameters; ----------; expected; Path to reference FCHK file against which `computed` is compared.; computed; Path to input FCHK file to compare against `expected`.; atol_exponen",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/fchk.html:2276,Load,Load,2276,psi4manual/1.8.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/fchk.html,1,['Load'],['Load']
Performance,"_values, compare_integers; from psi4 import core; from .exceptions import ValidationError. __all__ = [; ""compare_fchkfiles"",; ""compare_moldenfiles"",; ]. def _consume_fchk_section(input_list, index):; """"""compare a float or integer matrix section"""""". n = int(input_list[index].split()[-1]); kind = input_list[index].split()[-3]. if ""R"" in kind:; dtype = np.float64; format_counter = 5; elif ""I"" in kind:; dtype = np.float64; format_counter = 6; else:; raise ValidationError('Unknow field type in FCHK reader\n'). extra = 0 if n <= format_counter else n % format_counter; lines = 1 if n <= format_counter else int(n / format_counter); offset = lines + 1 if extra > 0 else lines; string = ''; for j in range(lines):; string += """".join(str(x) for x in input_list[index + 1 + j]); if extra > 0:; string += """".join(str(x) for x in input_list[index + 1 + lines]); field = np.fromiter(string.split(), dtype=dtype); return offset + 1, field. def _fchkfile_to_string(fname: str) -> str:; """""" Load FCHK file into a string""""""; with open(fname, 'r') as handle:; fchk_string = handle.read(); return fchk_string. [docs]def compare_fchkfiles(expected: str, computed: str, atol_exponent: Union[int, float], label: str):; """"""Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4's FCHK files. Parameters; ----------; expected; Path to reference FCHK file against which `computed` is compared.; computed; Path to input FCHK file to compare against `expected`.; atol_exponent;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/fchk.html:2274,Load,Load,2274,psi4manual/1.7.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/fchk.html,1,['Load'],['Load']
Performance,"_view(self),. @property; def _array_conversion(self):; if self.nirrep() > 1:; raise ValidationError(""__array__interface__ can only be called on Psi4 data object with only one irrep!""); else:; return self.np.__array_interface__. def _np_write(self, filename=None, prefix=""""):. ret = {}; ret[prefix + ""Irreps""] = self.nirrep(); ret[prefix + ""Name""] = self.name; for h, v in enumerate(self.nph):; ret[prefix + ""IrrepData"" + str(h)] = v. if isinstance(self, core.Matrix):; ret[prefix + ""Dim1""] = self.rowdim().to_tuple(); ret[prefix + ""Dim2""] = self.coldim().to_tuple(); if isinstance(self, core.Vector):; ret[prefix + ""Dim""] = [self.dim(x) for x in range(self.nirrep())]. if filename is None:; return ret. np.savez(filename, **ret). def _np_read(self, filename, prefix=""""):. if isinstance(filename, np.lib.npyio.NpzFile):; data = filename; elif (sys.version_info[0] == 2) and isinstance(filename, (str, unicode)):; if not filename.endswith('.npz'):; filename = filename + '.npz'; data = np.load(filename); elif (sys.version_info[0] > 2) and isinstance(filename, str):; if not filename.endswith('.npz'):; filename = filename + '.npz'. data = np.load(filename); else:; raise Exception(""Filename not understood: %s"" % filename). ret_data = []. if ((prefix + ""Irreps"") not in data.keys()) or ((prefix + ""Name"") not in data.keys()):; raise ValidationError(""File %s does not appear to be a numpyz save"" % filename). for h in range(data[prefix + ""Irreps""]):; ret_data.append(data[prefix + ""IrrepData"" + str(h)]). arr_type = self.__mro__[0]; if arr_type == core.Matrix:; dim1 = core.Dimension.from_list(data[prefix + ""Dim1""]); dim2 = core.Dimension.from_list(data[prefix + ""Dim2""]); ret = self(str(data[prefix + ""Name""]), dim1, dim2); elif arr_type == core.Vector:; dim1 = core.Dimension.from_list(data[prefix + ""Dim""]); ret = self(str(data[prefix + ""Name""]), dim1). for h in range(data[prefix + ""Irreps""]):; ret.nph[h][:] = ret_data[h]. return ret. def _to_serial(data):; """"""; Converts an object with a .nph ac",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/numpy_helper.html:10098,load,load,10098,psi4manual/1.1.0/_modules/psi4/driver/p4util/numpy_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/numpy_helper.html,1,['load'],['load']
Performance,"`. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :type return_wfn: :ref:`boolean <op_py_boolean>`; :param return_wfn: ``'on'`` || |dl| ``'off'`` |dr|. Indicate to additionally return the :py:class:`~psi4.core.Wavefunction`; calculation result as the second element (after *float* energy) of a tuple. :type return_history: :ref:`boolean <op_py_boolean>`; :param return_history: ``'on'`` || |dl| ``'off'`` |dr|. Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. :type engine: str; :param engine: |dl| ``'optking'`` |dr| || ``'geometric'``. Indicates the optimization engine to use, which can be either Psi4's; native Optking optimizer or the GeomeTRIC program. :type optimizer_keywords: dict; :param optimizer_keywords: Extra options passed to the GeomeTRIC or optking optimizers. Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type hessian_with: str; :param hessian_with: ``'scf'`` || ``'mp2'`` || etc. Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. .. warning:: Optimizations where t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver.html:62647,optimiz,optimizer,62647,psi4manual/1.7.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver.html,8,['optimiz'],"['optimization', 'optimizer']"
Performance,"`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp3 optimization; >>> opt('mp3'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). full_hess_every = PsiMod.get_local_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. # are we in sow/reap mode?; isSowReap = False; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'sow'):; isSowReap = True; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; isSowReap = True; optstash = OptionsState(; ['SCF', 'GUESS']). n = 1; if ('opt_iter' in kwargs):; n = kwargs['opt_iter']. while n <= PsiMod.get_global_option('GEOM_MAXITER'):; kwargs['opt_iter'] = n. # Use orbitals from previous iteration ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/driver.html:38167,optimiz,optimization,38167,psi4manual/4.0b3/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/driver.html,2,"['optimiz', 'perform']","['optimization', 'performed']"
Performance,"`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp3 optimization; >>> opt('mp3'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). full_hess_every = PsiMod.get_local_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. n = 1; if ('opt_iter' in kwargs):; n = kwargs['opt_iter']. while n <= PsiMod.get_option('GEOM_MAXITER'):; kwargs['opt_iter'] = n. # Compute the gradient; thisenergy = gradient(name, **kwargs). # S/R: Quit after getting new displacements or if forming gradient fails; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'sow'):; return 0.0; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap') and (thisenergy == 0.0):; r",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/driver.html:35807,optimiz,optimization,35807,psi4manual/4.0b2/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/driver.html,2,"['optimiz', 'perform']","['optimization', 'performed']"
Performance,"`~psi4.core.Wavefunction`; calculation result as the second element (after *float* energy) of a tuple. :type return_history: :ref:`boolean <op_py_boolean>`; :param return_history: ``'on'`` || |dl| ``'off'`` |dr|. Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. :type engine: str; :param engine: |dl| ``'optking'`` |dr| || ``'geometric'``. Indicates the optimization engine to use, which can be either Psi4's; native Optking optimizer or the GeomeTRIC program. :type optimizer_keywords: dict; :param optimizer_keywords: Extra options passed to the GeomeTRIC or optking optimizers. Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type hessian_with: str; :param hessian_with: ``'scf'`` || ``'mp2'`` || etc. Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. .. warning:: Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. .. note:: Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver.html:62938,perform,performed,62938,psi4manual/1.7.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver.html,4,['perform'],['performed']
Performance,"a I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. DCT_FUNCTIONAL¶. Chooses appropriate DCT method. Type: string; Possible Values: DC-06, DC-12, ODC-06, ODC-12, ODC-13, CEPA0; Default: ODC-12. DCT_TYPE¶. What algorithm to use for the DCT computation. Type: string; Possible Values: CONV, DF; Default: CONV. DF_BASIS_DCT¶. Auxiliary basis set for DCT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DIIS_START_CONVERGENCE¶. Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. GUESS_R_CONVERGENCE¶. Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. MAXITER¶. Maximum number of macro- or micro-iterations for both energy and response equations. Type: integer; Default: 40. ODC_GUESS¶. Whether to perform a guess DC-06 or DC-12 computation for ODC-06 or ODC-12 methods, respectively. Currently only available for ALGORITHM = SIMULTANEOUS. Type: boolean; Default: false. OPDM¶. Compute a (relaxed) one-particle density matrix? Can be set manually. Set internally for property and gradient computations. Type: boolean; Default: false. QC_COUPLING¶. Controls whether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_TYPE¶. Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, th",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__dct-1.html:2104,optimiz,optimized,2104,psi4manual/1.4.0/autodir_options_c/module__dct-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__dct-1.html,9,['optimiz'],['optimized']
Performance,"a MP4 energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only detci/fnocc. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'FNOCC']:; func = run_fnocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI': # no default for this case; func = run_detci; elif module in ['']:; core.print_out(""""""\nThis method is available inefficiently as a """"""; """"""byproduct of a CISDT computation.\n Add ""set """"""; """"""qc_module detci"" to input to access this route.\n""""""). if func is None:; raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_adc2(name, **kwargs):; """"""Function selecting the algorithm for ADC(2) excited state energy; call and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only adcc/adc. # TODO Actually one should do selection on a couple of other options here; # as well, e.g. adcc supports frozen-core and frozen-virtual,; # spin-specific states or spin-flip methods.; # But as far as I (mfherbst) know the BUILTIN ADC routine only supports; # singlet states and without freezing some core or some virtual orbitals. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'ADCC' and extras.addons(""adcc""):; func = run_adcc; elif module in ['', 'BUILTIN']:; func = run_adc. if reference == 'UHF':; if mtd_type == 'CONV':; if module in ['ADCC', ''] and extras.addons(""adcc""):; func = run_adcc. # Note: ROHF is theoretically available in adcc, but are not fully tested; # ... so will be added later. if func ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html:29663,perform,performance,29663,psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,2,['perform'],['performance']
Performance,"a MP4 energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only detci/fnocc. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'FNOCC']:; func = run_fnocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI': # no default for this case; func = run_detci; elif module in ['']:; core.print_out(""""""\nThis method is available inefficiently as a """"""; """"""byproduct of a CISDT computation.\n Add ""set """"""; """"""qc_module detci"" to input to access this route.\n""""""). if func is None:; raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_adc2(name, **kwargs):; """"""Function selecting the algorithm for ADC(2) excited state energy; call and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only adcc/adc. # TODO Actually one should do selection on a couple of other options here; # as well, e.g. adcc supports frozen-core and frozen-virtual,; # spin-specific states or spin-flip methods.; # But as far as I (mfherbst) know the BUILTIN ADC routine only supports; # singlet states and without freezing some core or some virtual orbitals. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module in {'ADCC', ''} and extras.addons(""adcc""):; func = run_adcc; elif module in {'BUILTIN', ''}:; func = run_adc. if reference == 'UHF':; if mtd_type == 'CONV':; if module in ['ADCC', ''] and extras.addons(""adcc""):; func = run_adcc. # Note: ROHF is theoretically available in adcc, but are not fully tested; # ... so will be added later. if",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html:30503,perform,performance,30503,psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html,1,['perform'],['performance']
Performance,"a Prefactor for the resulting matrix. general_invert(self: psi4.core.Matrix) → None¶; Computes the inverse of any nonsingular matrix using LU factorization. get(*args, **kwargs)¶; Overloaded function. get(self: psi4.core.Matrix, h: int, m: int, n: int) -> float. Returns a single element of a matrix in subblock h, row m, col n. get(self: psi4.core.Matrix, m: int, n: int) -> float. Returns a single element of a matrix, row m, col n. get_block(self: psi4.core.Matrix, rows: psi4.core.Slice, cols: psi4.core.Slice) → psi4.core.Matrix¶; Get a matrix block. hermitivitize(self: psi4.core.Matrix) → None¶; Average off-diagonal element in-place. identity(self: psi4.core.Matrix) → None¶; Sets the matrix to the identity. invert(self: psi4.core.Matrix) → None¶; Computes the inverse of a real symmetric positive definite matrix. load(*args, **kwargs)¶; Overloaded function. load(self: psi4.core.Matrix, filename: str) -> None. Loads a block matrix from an ASCII file (see tests/mints3 for format). load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, tocentry: str, nso: int) -> bool. Load a matrix from a PSIO object from fileno with tocentry of size nso. load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, savetype: psi4.core.SaveType=SaveType.LowerTriangle) -> None. Load a matrix from a PSIO object from fileno and with toc position of the name of the matrix. load_mpqc(self: psi4.core.Matrix, filename: str) → None¶; Loads a matrix from an ASCII file in MPQC format. name¶; The name of the Matrix. Used in printing. nirrep(self: psi4.core.Matrix) → int¶; Returns the number of irreps. np¶; View without only one irrep. classmethod np_read(filename, prefix='')¶; Reads the data from a NumPy compress file. np_write(filename=None, prefix='')¶; Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. nph¶; View with irreps. partial_cholesky_factorize(self: psi4.core.Matrix, delta: float=0.0, throw_if_negative: bool",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/psi4api-1.html:105260,load,load,105260,psi4manual/1.2.1/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/psi4api-1.html,2,['load'],['load']
Performance,"a Prefactor for the resulting matrix. general_invert(self: psi4.core.Matrix) → None¶; Computes the inverse of any nonsingular matrix using LU factorization. get(*args, **kwargs)¶; Overloaded function. get(self: psi4.core.Matrix, h: int, m: int, n: int) -> float. Returns a single element of a matrix in subblock h, row m, col n. get(self: psi4.core.Matrix, m: int, n: int) -> float. Returns a single element of a matrix, row m, col n. get_block(self: psi4.core.Matrix, rows: psi4.core.Slice, cols: psi4.core.Slice) → psi4.core.Matrix¶; Get a matrix block. hermitivitize(self: psi4.core.Matrix) → None¶; Average off-diagonal element in-place. identity(self: psi4.core.Matrix) → None¶; Sets the matrix to the identity. invert(self: psi4.core.Matrix) → None¶; Computes the inverse of a real symmetric positive definite matrix. load(*args, **kwargs)¶; Overloaded function. load(self: psi4.core.Matrix, filename: str) -> None. Loads a block matrix from an ASCII file (see tests/mints3 for format). load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, tocentry: str, nso: int) -> bool. Load a matrix from a PSIO object from fileno with tocentry of size nso. load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, savetype: psi4.core.SaveType=SaveType.LowerTriangle) -> None. Load a matrix from a PSIO object from fileno and with toc position of the name of the matrix. load_mpqc(self: psi4.core.Matrix, filename: str) → None¶; Loads a matrix from an ASCII file in MPQC format. nirrep(self: psi4.core.Matrix) → int¶; Returns the number of irreps. classmethod np_read(filename, prefix='')¶; Reads the data from a NumPy compress file. np_write(filename=None, prefix='')¶; Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. partial_cholesky_factorize(self: psi4.core.Matrix, delta: float=0.0, throw_if_negative: bool=False) → psi4.core.Matrix¶; Computes the fully pivoted partial Cholesky factorization of a real symmetric ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.matrix.html:10737,load,load,10737,psi4manual/1.2.1/api/psi4.core.matrix.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.matrix.html,1,['load'],['load']
Performance,"a Psi4.Dimension object. Returns:matrix – Returns the given Psi4 object. Return type:Matrix or Vector. Notes; This is a generalized function to convert a NumPy array to a Psi4 object; Examples; 1; 2>>> data = np.random.rand(20); >>> vector = array_to_matrix(data). 1; 2; 3; 4>>> irrep_data = [np.random.rand(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; >>> matrix = array_to_matrix(irrep_data); >>> print matrix.rowspi().to_tuple(); (2, 0, 4). classmethod from_serial(json_data)¶; Converts serialized data to the correct Psi4 data type. gemm(self: psi4.core.Matrix, arg0: bool, arg1: bool, arg2: float, arg3: psi4.core.Matrix, arg4: psi4.core.Matrix, arg5: float) → None¶; docstring. get(*args, **kwargs)¶; Overloaded function. get(self: psi4.core.Matrix, arg0: int, arg1: int, arg2: int) -> float. docstring. get(self: psi4.core.Matrix, arg0: int, arg1: int) -> float. docstring. identity(self: psi4.core.Matrix) → None¶; docstring. invert(self: psi4.core.Matrix) → None¶; docstring. load(self: psi4.core.Matrix, arg0: str) → None¶; docstring. load_mpqc(self: psi4.core.Matrix, arg0: str) → None¶; docstring. name¶; The name of the Matrix. Used in printing. nirrep(self: psi4.core.Matrix) → int¶; docstring. np¶; View without only one irrep. classmethod np_read(filename, prefix='')¶. np_write(filename=None, prefix='')¶. nph¶; View with irreps. partial_cholesky_factorize(self: psi4.core.Matrix, arg0: float, arg1: bool) → psi4.core.Matrix¶; docstring. power(self: psi4.core.Matrix, arg0: float, arg1: float) → psi4.core.Dimension¶; docstring. print_out(self: psi4.core.Matrix) → None¶; docstring. project_out(self: psi4.core.Matrix, arg0: psi4.core.Matrix) → None¶; docstring. remove_symmetry(self: psi4.core.Matrix, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → None¶; docstring. rms(self: psi4.core.Matrix) → float¶; docstring. rotate_columns(self: psi4.core.Matrix, arg0: int, arg1: int, arg2: int, arg3: float) → None¶; docstring. rowdim(self: psi4.core.Matrix) → psi4.core.Dimensio",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/psi4api-1.html:66837,load,load,66837,psi4manual/1.1.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/psi4api-1.html,2,['load'],['load']
Performance,"a Psi4.Dimension object. Returns:matrix – Returns the given Psi4 object. Return type:Matrix or Vector. Notes; This is a generalized function to convert a NumPy array to a Psi4 object; Examples; 1; 2>>> data = np.random.rand(20); >>> vector = array_to_matrix(data). 1; 2; 3; 4>>> irrep_data = [np.random.rand(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; >>> matrix = array_to_matrix(irrep_data); >>> print matrix.rowspi().to_tuple(); (2, 0, 4). classmethod from_serial(json_data)¶; Converts serialized data to the correct Psi4 data type. gemm(self: psi4.core.Matrix, arg0: bool, arg1: bool, arg2: float, arg3: psi4.core.Matrix, arg4: psi4.core.Matrix, arg5: float) → None¶; docstring. get(*args, **kwargs)¶; Overloaded function. get(self: psi4.core.Matrix, arg0: int, arg1: int, arg2: int) -> float. docstring. get(self: psi4.core.Matrix, arg0: int, arg1: int) -> float. docstring. identity(self: psi4.core.Matrix) → None¶; docstring. invert(self: psi4.core.Matrix) → None¶; docstring. load(self: psi4.core.Matrix, arg0: str) → None¶; docstring. load_mpqc(self: psi4.core.Matrix, arg0: str) → None¶; docstring. nirrep(self: psi4.core.Matrix) → int¶; docstring. classmethod np_read(filename, prefix='')¶. np_write(filename=None, prefix='')¶. partial_cholesky_factorize(self: psi4.core.Matrix, arg0: float, arg1: bool) → psi4.core.Matrix¶; docstring. power(self: psi4.core.Matrix, arg0: float, arg1: float) → psi4.core.Dimension¶; docstring. print_out(self: psi4.core.Matrix) → None¶; docstring. project_out(self: psi4.core.Matrix, arg0: psi4.core.Matrix) → None¶; docstring. remove_symmetry(self: psi4.core.Matrix, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → None¶; docstring. rms(self: psi4.core.Matrix) → float¶; docstring. rotate_columns(self: psi4.core.Matrix, arg0: int, arg1: int, arg2: int, arg3: float) → None¶; docstring. rowdim(self: psi4.core.Matrix) → psi4.core.Dimension¶; docstring. rows(self: psi4.core.Matrix, arg0: int) → int¶; docstring. save(self: psi4.core.Matrix, arg0",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/api/psi4.core.matrix.html:6525,load,load,6525,psi4manual/1.1.0/api/psi4.core.matrix.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/api/psi4.core.matrix.html,1,['load'],['load']
Performance,"a cc-pVDZ basis set.; Now, here comes the real beauty of running Psi4 interactively: above, when we computed the energy of H\(_2\)O with HF/cc-pVDZ, we defined the Psi4 molecule object h2o. Since we’re still in the Python shell, as long as you executed that block of code, we can reuse the h2o molecule object in our optimization without redefining it, by adding the molecule=h2o argument to the psi4.optimize(); API function:. [5]:. psi4.set_options({'reference': 'rhf'}); psi4.optimize('scf/cc-pvdz', molecule=h2o). Optimizer: Optimization complete!. [5]:. -76.02703272937504. This should perform a series of gradient computations. The gradient points which way is downhill in energy, and the optimizer then modifies the geometry to follow the gradient. After a few cycles, the geometry should converge with a message like Optimization complete!. As indicated in the following table (printed by the optimizer at the end of the computation and grep-able with ~), the energy decreases with each step, and the maximum force on each atom also decreases with each step (in; principle, these numbers could increase in some iterations, but here they do not).; --------------------------------------------------------------------------------------------------------------- ~  Step         Total Energy             Delta E       MAX Force       RMS Force        MAX Disp        RMS Disp  ~ --------------------------------------------------------------------------------------------------------------- ~     1     -76.026632734908    -76.026632734908      0.01523518      0.01245755      0.02742222      0.02277530  ~     2     -76.027022666011     -0.000389931104      0.00178779      0.00142946      0.01008137      0.00594928  ~     3     -76.027032729374     -0.000010063363      0.00014019      0.00008488      0.00077463      0.00044738  ~ --------------------------------------------------------------------------------------------------------------- ~; To get harmonic vibrational frequencies, it’s i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/psiapi-1.html:7805,optimiz,optimizer,7805,psi4manual/1.3.2/psiapi-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psiapi-1.html,9,['optimiz'],['optimizer']
Performance,"a cc-pVDZ basis set.; Now, here comes the real beauty of running Psi4 interactively: above, when we computed the energy of H\(_2\)O with HF/cc-pVDZ, we defined the Psi4 molecule object h2o. Since we’re still in the Python shell, as long as you executed that block of code, we can reuse the h2o molecule object in our optimization without redefining it, by adding the molecule=h2o argument to the psi4.optimize(); API function:. [5]:. psi4.set_options({'reference': 'rhf'}); psi4.optimize('scf/cc-pvdz', molecule=h2o). Optimizer: Optimization complete!. [5]:. -76.02703272937504. This should perform a series of gradient computations. The gradient points which way is downhill in energy, and the optimizer then modifies the geometry to follow the gradient. After a few cycles, the geometry should converge with a message like Optimization complete!. As indicated in the following table (printed by the optimizer at the end of the computation and grep-able with ~), the energy decreases with each step, and the maximum force on each atom also decreases with each step; (in principle, these numbers could increase in some iterations, but here they do not).; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734908 -76.026632734908 0.01523518 0.01245755 0.02742222 0.02277530 ~; 2 -76.027022666011 -0.000389931104 0.00178779 0.00142946 0.01008137 0.00594928 ~; 3 -76.027032729374 -0.000010063363 0.00014019 0.00008488 0.00077463 0.00044738 ~; --------------------------------------------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, it’s important to keep in mind that the values of the vibrational frequencies are a function of the molecular geometry. Therefore, it’s important ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/psiapi.html:7686,optimiz,optimizer,7686,psi4manual/master/psiapi.html,https://psicode.org,https://psicode.org/psi4manual/master/psiapi.html,2,['optimiz'],['optimizer']
Performance,"a diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than holes in the lowest set; of orbitals (called RAS I) and no more than electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are include",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/detci-1.html:1714,optimiz,optimized,1714,psi4manual/4.0b3/detci-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/detci-1.html,8,['optimiz'],['optimized']
Performance,"a diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function , we can write the CI expansion as; follows:. (1); The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly and doubly. substituted determinants (CISD) to the reference determinant; . The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in Psi4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; Psi4 is not optimized for CISD computations. Instead, emphasis; has been placed on developing a very efficient program to handle more; general CI wavefunctions which may be helpful in more challenging cases; such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than holes in the lowest set; of orbitals (called RAS I) and no more than electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are include",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/detci-1.html:1721,optimiz,optimized,1721,psi4manual/1.0.0/detci-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/detci-1.html,2,['optimiz'],['optimized']
Performance,"a file should be provided. Type: integer; Default: 2. GDMA_MULTIPOLE_UNITS (GDMA)¶GDMA — Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_ORIGIN (GDMA)¶GDMA — The origin (in Angstrom, expressed as an [x, y, z] array) about which the total multipoles will be computed during DMA. Useful for determining single site expansions at an arbitrary point. Type: array; Default: No Default. GDMA_RADIUS (GDMA)¶GDMA — The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH (GDMA)¶GDMA — The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING)¶OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF)¶FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF)¶SCF — The type of guess orbitals. Defaults to READ for geometry optimizations after the first step, to CORE for single atoms, and to SAD otherwise. The HUCKEL guess employs on-the-fly calculations like SAD, as described in doi:10.1021/acs.jctc.8b01089 which also describes the SAP guess. Type: string; Possible Values: AUTO, CORE, GWH, SAD, SADNO, SAP, HUCKEL, READ; Default: AUTO. GUESS_MIX (SCF)¶SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:138728,optimiz,optimization,138728,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,6,['optimiz'],['optimization']
Performance,"a file should be provided. Type: integer; Default: 2. GDMA_MULTIPOLE_UNITS (GDMA)¶GDMA — Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_ORIGIN (GDMA)¶GDMA — The origin (in Angstrom, expressed as an [x, y, z] array) about which the total multipoles will be computed during DMA. Useful for determining single site expansions at an arbitrary point. Type: array; Default: No Default. GDMA_RADIUS (GDMA)¶GDMA — The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH (GDMA)¶GDMA — The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING)¶OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF)¶FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF)¶SCF — The type of guess orbitals. See Initial Guess for what the options mean and what the defaults are. Type: string; Possible Values: AUTO, CORE, GWH, SAD, SADNO, SAP, SAPGAU, HUCKEL, MODHUCKEL, READ; Default: AUTO. GUESS_MIX (SCF)¶SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF)¶SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: fa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:146962,optimiz,optimization,146962,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,2,['optimiz'],['optimization']
Performance,"a file should be provided. Type: integer; Default: 2. GDMA_MULTIPOLE_UNITS (GDMA)¶GDMA — Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_ORIGIN (GDMA)¶GDMA — The origin (in Angstrom, expressed as an [x, y, z] array) about which the total multipoles will be computed during DMA. Useful for determining single site expansions at an arbitrary point. Type: array; Default: No Default. GDMA_RADIUS (GDMA)¶GDMA — The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH (GDMA)¶GDMA — The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING)¶OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF)¶FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF)¶SCF — The type of guess orbitals. See Initial Guess for what the options mean and what the defaults are. Type: string; Possible Values: AUTO, CORE, GWH, SAD, SADNO, SAP, SAPGAU, HUCKEL, READ; Default: AUTO. GUESS_MIX (SCF)¶SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF)¶SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_glossary_options_c.html:145371,optimiz,optimization,145371,psi4manual/1.8.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_glossary_options_c.html,1,['optimiz'],['optimization']
Performance,"a file to accelerate convergence, the OPT-master jobs must run on the same computer.\n\n"""""". fmaster = open('OPT-master.in', 'w'); fmaster.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); fmaster.write(p4util.format_molecule_for_input(molecule)); fmaster.write(p4util.format_options_for_input()); p4util.format_kwargs_for_input(fmaster, 2, **kwargs); fmaster.write(""""""%s('%s', **kwargs)\n\n"""""" % (optimize.__name__, lowername)); fmaster.write(instructionsM); fmaster.close(). for n, displacement in enumerate(displacements):; rfile = 'OPT-%s-%s' % (opt_iter, n + 1); #rfile = 'OPT-fd-%s' % (n + 1). # Build string of title banner; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""p4util.banner(' Gradient %d Computation: Displacement %d ')\n"""""" % (opt_iter, n + 1); banners += """"""psi4.print_out('\\n')\n\n"""""". if (opt_mode.lower() == 'continuous'):; # Print information to output.dat; psi4.print_out('\n'); p4util.banner('Loading displacement %d of %d' % (n + 1, ndisp)). # Print information to the screen; print(' %d' % (n + 1), end=""""); if (n + 1) == ndisp:; print('\n', end=""""). # Load in displacement into the active molecule; psi4.get_active_molecule().set_geometry(displacement). # Perform the energy calculation; #E = func(lowername, **kwargs); func(lowername, **kwargs); E = psi4.get_variable('CURRENT ENERGY'); #E = func(**kwargs). # Save the energy; energies.append(E). # S/R: Write each displaced geometry to an input file; elif (opt_mode.lower() == 'sow'):; psi4.get_active_molecule().set_geometry(displacement). # S/R: Prepare molecule, options, and kwargs; freagent = open('%s.in' % (rfile), 'w'); freagent.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); freagent.write(p4util.format_molecule_for_input(molecule)); freagent.write(p4util.format_options_for_input()); p4util.format_kwargs_for_input(freagent, **kwargs). # S/R: Prepare function call and energy save; freagent.write(""""""electroni",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/driver.html:39210,Load,Loading,39210,psi4manual/4.0b5/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/driver.html,1,['Load'],['Loading']
Performance,"a for different calculation types. Type: conv double; Default: 1e-6. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. If this keyword is not set by the user, OCC will estimate and use a value required to achieve the desired E_CONVERGENCE The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, OCC will estimate and use a value required to achieve the desired E_CONVERGENCE The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. Advanced OCC Keywords¶. OPT_METHOD¶. The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. LINEQ_SOLVER¶. The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. MP2_OS_SCALE¶. Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 6.0. MP2_SS_SCALE¶. Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_SOS_SCALE¶. Removed in 1.4. Will raise an er",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/occ.html:12849,optimiz,optimize,12849,psi4manual/1.6.x/occ.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/occ.html,1,['optimiz'],['optimize']
Performance,"a for different calculation types. Type: conv double; Default: 1e-6. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. If this keyword is not set by the user, OCC will estimate and use a value required to achieve the desired E_CONVERGENCE The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, OCC will estimate and use a value required to achieve the desired E_CONVERGENCE The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. Advanced OCC Keywords¶. OPT_METHOD¶. The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. MO_DIIS_NUM_VECS¶. Removed in 1.4. Will raise an error in 1.5. Type: integer; Default: 6. LINEQ_SOLVER¶. The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. MP2_OS_SCALE¶. Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 6.0. MP2_SS_SCALE¶. Removed in 1.4. Will raise an ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/occ-1.html:12849,optimiz,optimize,12849,psi4manual/1.4.0/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/occ-1.html,4,['optimiz'],['optimize']
Performance,"a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagona",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:10338,cache,cache,10338,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['cache'],['cache']
Performance,"a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make. Then execute; psi4 in the directory on the default input file.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplugin +aointegrals; >>> psi4 --new-plugin myplugin +mointegrals; >>> psi4 --new-plugin myplugin +sointegrals; >>>",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/plugins-1.html:2222,load,loading,2222,psi4manual/4.0b4/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/plugins-1.html,4,['load'],['loading']
Performance,"a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplugin +aointegrals; >>> psi4 --new-plugin myplugin +mointegrals; >>> psi4 --new-plugin myplugin +sointegrals; >>> psi4 --new-plugin myplugin +wavefunction. Several stable sampl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/plugins-1.html:2222,load,loading,2222,psi4manual/4.0b3/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/plugins-1.html,4,['load'],['loading']
Performance,"a minimal input and set symmetry. casscf-fzc-sp; CASSCF/6-31G** energy point. sapt-sf1; Tests the Psi4 SF-SAPT code. sad-scf-type; Test SAD SCF guesses on noble gas atom. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cc13d; Tests analytic CC2 gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cubeprop-esp; RHF orbitals and density for water. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:21098,perform,performs,21098,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,4,"['optimiz', 'perform']","['optimization', 'performs']"
Performance,"a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2¶. This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3¶. This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4¶. This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV¶. Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC¶. Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP¶. Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 30",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:29572,optimiz,optimization,29572,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,2,['optimiz'],['optimization']
Performance,"a plan – file a GitHub issue; I have an idea/request – ask the forum; Why do you? – ask the forum; When will you? – ask the forum; I have an experience that can improve the build documentation – inform the forum or add to the documentation itself; Anything you want to share privately – crawdad@vt.edu or sherrill@gatech.edu. Footnotes. [1]Frozen natural orbital variant available. In particular, RHF available as CONV. [2](1, 2) Frozen natural orbital variant available. In particular, RHF available as CONV/DF. [3](1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22) threading through BLAS routines only. [4]DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented. [5]Both EFP/EFP and QM/EFP energies are available. [6]Adapted from here. [7]DH-DFT only available with DF-MP2. [8](1, 2, 3, 4) Not all combinations of reference and algorithm available. In particular, non-RHF references only available as CONV. For CCSD(T), gradients are not available with frozen core. [9]Orbital-optimized variant available. In particular, all references available as CONV/DF. [10](1, 2, 3, 4, 5, 6, 7, 8, 9, 10) Capabilities breakdown in great detail can be found here. table of contents. Introduction; Overview; Citing PSI4; Overall PSI4 Package; Density Cumulant Functional Theory (DCFT); Configuration Interaction (CI); Coupled Cluster (CC); Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); Symmetry-Adapted Perturbation Theory (SAPT); Orbital-Optimized Post-Hartree–Fock Methods; Second-Order Algebraic-Diagrammatic Construction [ADC(2)]; Density Matrix Renormalization Group (DMRG); Scalar Relativistic Corrections. Supported Systems; License; Capabilities; Technical Support. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/introduction-1.html:25234,optimiz,optimized,25234,psi4manual/1.2.1/introduction-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/introduction-1.html,4,"['Optimiz', 'optimiz']","['Optimized', 'optimized']"
Performance,"a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCFT); DCFT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCFT); DCFT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING); OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SYMMETRIZE (OCC); OCC — Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. T (THERMO); THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY); CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only tran",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:211385,optimiz,optimization,211385,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,4,"['Optimiz', 'optimiz']","['Optimization', 'optimization']"
Performance,"a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCFT); DCFT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCFT); DCFT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING); OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SYMM_TOL (OPTKING); OPTKING — Symmetry tolerance for testing whether a mode is symmetric. Type: conv double; Default: 0.05. SYMMETRIZE (OCC); OCC — Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. T (THERMO); THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY); CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:211062,optimiz,optimization,211062,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,8,"['Optimiz', 'optimiz']","['Optimization', 'optimization']"
Performance,"a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCFT); DCFT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCFT); DCFT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING); OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SYMM_TOL (OPTKING); OPTKING — Symmetry tolerance for testing whether a mode is symmetric. Type: conv double; Default: 0.05. SYMMETRIZE (OCC); OCC — Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. T (THERMO); THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY); CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. TDM (DETCI); DETCI — Do compute the transition densit",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:214336,optimiz,optimization,214336,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,4,"['Optimiz', 'optimiz']","['Optimization', 'optimization']"
Performance,"a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCFT); DCFT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCFT); DCFT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING); OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. T (THERMO); THERMO — Temperature in Kelvin for thermodynamic analysis. Type: double; Default: 298.15. T2_COUPLED (CCENERGY); CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:125466,optimiz,optimization,125466,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,8,"['Optimiz', 'optimiz']","['Optimization', 'optimization']"
Performance,"a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCFT); DCFT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCFT); DCFT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING); OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD; Default: RFO. T (THERMO); THERMO — Temperature in Kelvin for thermodynamic analysis. Type: double; Default: 298.15. T2_COUPLED (CCENERGY); CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TAU_SQUARED (DCFT); DCFT (Expert) — Controls whether to compute the DCFT energy with the Tau^2 correction to Tau. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:120112,optimiz,optimization,120112,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,4,"['Optimiz', 'optimiz']","['Optimization', 'optimization']"
Performance,"a wavefunction and a scratch file number, canonicalizes the name; so that files can be consistently written and read """"""; fname = os.path.split(os.path.abspath(core.get_writer_file_prefix(self.molecule().name())))[1]; psi_scratch = core.IOManager.shared_object().get_default_path(); return os.path.join(psi_scratch, fname + '.' + str(filenumber)). core.Wavefunction.get_scratch_filename = _core_wavefunction_get_scratch_filename. @staticmethod; def _core_wavefunction_from_file(wfn_data):; """"""Summary. Parameters; ----------; wfn_data : str or dict; If a str reads a Wavefunction from a disk otherwise, assumes the data; is passed in. Returns; -------; Wavefunction; A deserialized Wavefunction object; """"""; # load the wavefunction from file; if isinstance(wfn_data, dict):; pass; elif isinstance(wfn_data, str):; if not wfn_data.endswith("".npy""):; wfn_data = wfn_data + "".npy""; wfn_data = np.load(wfn_data, allow_pickle=True).item(); else:; # Could be path-like or file-like, let `np.load` handle it; wfn_data = np.load(wfn_data, allow_pickle=True).item(). # variable type specific dictionaries to be passed into C++ constructor; wfn_matrix = wfn_data['matrix']; wfn_vector = wfn_data['vector']; wfn_dimension = wfn_data['dimension']; wfn_int = wfn_data['int']; wfn_string = wfn_data['string']; wfn_boolean = wfn_data['boolean']; wfn_float = wfn_data['float']; wfn_floatvar = wfn_data['floatvar']; wfn_matrixarr = wfn_data['matrixarr']. # reconstruct molecule from dictionary representation; wfn_molecule = wfn_data['molecule']; molecule = core.Molecule.from_dict(wfn_molecule). # get basis set name and spherical harmonics boolean; basis_name = wfn_string['basisname']; if "".gbs"" in basis_name:; basis_name = basis_name.split('/')[-1].replace('.gbs', ''). basis_puream = wfn_boolean['basispuream']; basisset = core.BasisSet.build(molecule, 'ORBITAL', basis_name, puream=basis_puream). # change some variables to psi4 specific data types (Matrix, Vector, Dimension); for label in wfn_matrix:; array =",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/python_helpers.html:4712,load,load,4712,psi4manual/1.3.2/_modules/psi4/driver/p4util/python_helpers.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/python_helpers.html,1,['load'],['load']
Performance,a5] documentation; CAS_FILES_WRITE — PSI4 [beta5] documentation; DIIS — PSI4 [beta5] documentation; FOLLOW_ROOT — PSI4 [beta5] documentation; JOBTYPE — PSI4 [beta5] documentation; LOCAL — PSI4 [beta5] documentation; LOCAL_CPHF_CUTOFF — PSI4 [beta5] documentation; LOCAL_CUTOFF — PSI4 [beta5] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta5] documentation; LOCAL_METHOD — PSI4 [beta5] documentation; LOCAL_PAIRDEF — PSI4 [beta5] documentation; LOCAL_WEAKP — PSI4 [beta5] documentation; MAXITER — PSI4 [beta5] documentation; NUM_AMPS_PRINT — PSI4 [beta5] documentation; PROP_ALL — PSI4 [beta5] documentation; PROP_ROOT — PSI4 [beta5] documentation; PROP_SYM — PSI4 [beta5] documentation; R_CONVERGENCE — PSI4 [beta5] documentation; RESTART — PSI4 [beta5] documentation; ROOTS_PER_IRREP — PSI4 [beta5] documentation; SEKINO — PSI4 [beta5] documentation; WFN — PSI4 [beta5] documentation; ZETA — PSI4 [beta5] documentation; ABCD — PSI4 [beta5] documentation; ANALYZE — PSI4 [beta5] documentation; CACHELEVEL — PSI4 [beta5] documentation; DIIS — PSI4 [beta5] documentation; GAUGE — PSI4 [beta5] documentation; LINEAR — PSI4 [beta5] documentation; LOCAL — PSI4 [beta5] documentation; LOCAL_CPHF_CUTOFF — PSI4 [beta5] documentation; LOCAL_CUTOFF — PSI4 [beta5] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta5] documentation; LOCAL_METHOD — PSI4 [beta5] documentation; LOCAL_PAIRDEF — PSI4 [beta5] documentation; LOCAL_WEAKP — PSI4 [beta5] documentation; MAXITER — PSI4 [beta5] documentation; NUM_AMPS_PRINT — PSI4 [beta5] documentation; OMEGA — PSI4 [beta5] documentation; PROPERTY — PSI4 [beta5] documentation; R_CONVERGENCE — PSI4 [beta5] documentation; REFERENCE — PSI4 [beta5] documentation; RESTART — PSI4 [beta5] documentation; SEKINO — PSI4 [beta5] documentation; WFN — PSI4 [beta5] documentation; AO_BASIS — PSI4 [beta5] documentation; CACHELEVEL — PSI4 [beta5] documentation; EOM_REFERENCE — PSI4 [beta5] documentation; INTS_TOLERANCE — PSI4 [beta5] documentation; KEEP_OEIFILE — PSI4 [beta5] do,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1548135,CACHE,CACHELEVEL,1548135,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,a5] documentation; FINDIF — PSI4 [beta5] documentation; FNOCC — PSI4 [beta5] documentation; GLOBALS — PSI4 [beta5] documentation; MCSCF — PSI4 [beta5] documentation; MINTS — PSI4 [beta5] documentation; MRCC — PSI4 [beta5] documentation; OCC — PSI4 [beta5] documentation; OPTKING — PSI4 [beta5] documentation; PSIMRCC — PSI4 [beta5] documentation; SAPT — PSI4 [beta5] documentation; SCF — PSI4 [beta5] documentation; STABILITY — PSI4 [beta5] documentation; THERMO — PSI4 [beta5] documentation; TRANSQT — PSI4 [beta5] documentation; TRANSQT2 — PSI4 [beta5] documentation; E_CONVERGENCE — PSI4 [beta5] documentation; INTS_TOLERANCE — PSI4 [beta5] documentation; MRCC_LEVEL — PSI4 [beta5] documentation; MRCC_METHOD — PSI4 [beta5] documentation; MRCC_NUM_DOUBLET_ROOTS — PSI4 [beta5] documentation; MRCC_NUM_SINGLET_ROOTS — PSI4 [beta5] documentation; MRCC_NUM_TRIPLET_ROOTS — PSI4 [beta5] documentation; MRCC_OMP_NUM_THREADS — PSI4 [beta5] documentation; MRCC_RESTART — PSI4 [beta5] documentation; CACHELEVEL — PSI4 [beta5] documentation; CC_DIIS_MAX_VECS — PSI4 [beta5] documentation; CC_DIIS_MIN_VECS — PSI4 [beta5] documentation; CC_MAXITER — PSI4 [beta5] documentation; CCL_ENERGY — PSI4 [beta5] documentation; CEPA_OS_SCALE — PSI4 [beta5] documentation; CEPA_SOS_SCALE — PSI4 [beta5] documentation; CEPA_SS_SCALE — PSI4 [beta5] documentation; CEPA_TYPE — PSI4 [beta5] documentation; CUTOFF — PSI4 [beta5] documentation; DO_DIIS — PSI4 [beta5] documentation; DO_LEVEL_SHIFT — PSI4 [beta5] documentation; DO_SCS — PSI4 [beta5] documentation; DO_SOS — PSI4 [beta5] documentation; E_CONVERGENCE — PSI4 [beta5] documentation; E3_SCALE — PSI4 [beta5] documentation; EA_POLES — PSI4 [beta5] documentation; EKT_EA — PSI4 [beta5] documentation; EKT_IP — PSI4 [beta5] documentation; EP_EA_POLES — PSI4 [beta5] documentation; EP_IP_POLES — PSI4 [beta5] documentation; EP_MAXITER — PSI4 [beta5] documentation; IP_POLES — PSI4 [beta5] documentation; LEVEL_SHIFT — PSI4 [beta5] documentation; LINEQ_SOLVER — PSI4 ,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1563347,CACHE,CACHELEVEL,1563347,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,"a^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:2636,perform,performed,2636,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,4,['perform'],['performed']
Performance,"a_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> cbs(name='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [8] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). Note; Presently (May 2016), only two of the five delta possibilities are active. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn’t affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. Output¶; At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an energy('ccsd(t)') yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run.; Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cbs-1.html:11363,perform,performed,11363,psi4manual/1.0.0/cbs-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cbs-1.html,2,['perform'],['performed']
Performance,"abase python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples:. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric we",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/db.html:5906,Optimiz,Optimize,5906,psi4manual/master/db.html,https://psicode.org,https://psicode.org/psi4manual/master/db.html,8,"['Optimiz', 'optimiz']","['Optimize', 'optimize']"
Performance,"abase.py.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters:. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Database",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/db.html:1879,optimiz,optimize,1879,psi4manual/master/db.html,https://psicode.org,https://psicode.org/psi4manual/master/db.html,8,"['optimiz', 'perform']","['optimize', 'performed']"
Performance,"able() psi4.core.Molecule method. is_x_hybrid() psi4.core.SuperFunctional method. is_x_lrc() psi4.core.SuperFunctional method. ISA. ; MBIS. Isotopes. ISOTROPIC_POL (PE). ISTOP (DETCI). iteration_ psi4.core.CUHF attribute. psi4.core.HF attribute. psi4.core.RHF attribute. psi4.core.ROHF attribute. psi4.core.UHF attribute. iterations() psi4.core.CUHF method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. J. J() psi4.core.DirectJK method. psi4.core.JK method. psi4.core.MemDFJK method. JK class in psi4.core. jk() psi4.core.CUHF method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. JOBTYPE (CCLAMBDA). join_path() in module psi4.driver. K. K() psi4.core.DirectJK method. psi4.core.JK method. psi4.core.MemDFJK method. KEEP_INTCOS (OPTKING). keywords. ; anharmonicity(), setting. cbs(), setting. cp, setting. database(), setting. energy(), setting. frequency(), setting. general, setting. molecule, setting. optimize(), setting. properties(), setting. vmfc, setting. KIND (ADC). kinetic() psi4.core.FISAPT method. kinetic_grad() psi4.core.MintsHelper method. KineticInt class in psi4.core. L. L psi4.core.BoysLocalizer attribute. psi4.core.Localizer attribute. psi4.core.PMLocalizer attribute. label qcelemental.datum.Datum attribute. label() psi4.core.Molecule method. psi4.core.MOSpace method. lagrangian() psi4.core.CCWavefunction method. psi4.core.CIWavefunction method. psi4.core.CUHF method. psi4.core.DFEP2Wavefunction method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. psi4.core.Wavefunction method. LaplaceDenominator class in psi4.core. LCC2 (+LMP2) TOTAL ENERGY. LCCD CORRELATION ENERGY. LCCD DOUBLES ENERGY. LCCD OPPOSITE-SPIN CORRELATION ENERGY. LCCD SAME-SPIN CORRELATION ENERGY. LCCD SINGLES ENERGY. LCCD TOTAL ENERGY. LCCSD. (+LMP2). LCCSD CORRELATION ENERGY. LCCSD DOUBLES ENERGY. LCCSD OPPOSITE-SPIN CORRELATION ENERGY. LCCSD SAME-SPIN CORRELATION ENERGY.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/genindex-1.html:81013,optimiz,optimize,81013,psi4manual/1.5.0/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/genindex-1.html,2,['optimiz'],['optimize']
Performance,able) or finite difference; optimization is to be performed. hessian_with (string) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Moller-Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Moller-Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual]. ccd; coupled cluster doubles (CCD) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b3lyp; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA). b3lyp-chg; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA) w/ Chai and Head-Gordon Dispersion Correction. b3lyp-d; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA) w/ Grimme’s -D2 Dispersion Correction. b3lyp-d1; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA) w/ Grimme’s -D1 Dispersion Correction. b3lyp-d3; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA) w/ Grimme’s -D3 (zero-damping) Dispe,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/opt-1.html:3400,optimiz,optimized,3400,psi4manual/1.0.0/opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/opt-1.html,2,['optimiz'],['optimized']
Performance,"able) or finite difference; optimization is to be performed. hessian_with (string) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual]. ccd; coupled cluster doubles (CCD) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. Examples:. 1; 2>>> # [1] Analytic hf optimization; >>> optimize('hf'). 1; 2; 3; 4>>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). 1; 2; 3>>> # [3] Forced finite difference hf optimization run in; >>> # embarrassingly parallel fashion; >>> optimize('hf', dertype='energy', mode='sow'). 1; 2>>> # [4] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). 1; 2; 3; 4>>> # [5] Can autom",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/opt-1.html:3542,optimiz,optimized,3542,psi4manual/1.1.0/opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/opt-1.html,4,['optimiz'],['optimized']
Performance,"able) or finite difference; optimization is to be performed. hessian_with (string) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual]. ccd; coupled cluster doubles (CCD) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of thi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/opt-1.html:3272,optimiz,optimized,3272,psi4manual/1.3.2/opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/opt-1.html,2,['optimiz'],['optimized']
Performance,able) or finite difference; optimization is to be performed. hessian_with (string) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual]. ccd; coupled cluster doubles (CCD) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj;  . b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj;  . b3lyp-d3mbj;  . b3lyp-nl; B3LYP-nl Hyb-GGA Exchange-Correlation Functional. b3lyp5; B3LYP5 Hyb-GGA Exchange-Correlation Functional. b3lyps; B3LYPs Hyb-GGA Exchange-Correlation Functional. b3p86; B3P86 Hyb-GGA Exchange-Correlation Functional. b3p86-d3bj;  . b3pw91,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.driver.opt-1.html:3129,optimiz,optimized,3129,psi4manual/1.2.1/api/psi4.driver.opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.driver.opt-1.html,8,['optimiz'],['optimized']
Performance,able) or finite difference; optimization is to be performed. hessian_with (string) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual]. ccd; coupled cluster doubles (CCD) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b3lyp; B3LYP Hybrid-GGA Exchange-Correlation Functional (VWN1-RPA). b3lyp-d;  . b3lyp-d3;  . b3lyp-d3bj;  . b3lyp-d3m;  . b3lyp-d3mbj;  . b3lyp5; B3LYP5 Hybrid-GGA Exchange-Correlation Functional (VWN5). b3_x; Becke88 GGA Exchange (B3LYP weighting). b86bpbe; B86BPBE GGA Exchange-Correlation Functional. b88_x; Becke88 GGA Exchange. b97-0; B97-0 Hybrid-GGA Exchange-Correlation Functional. b97-1; B97-1 Hybrid-GGA Exchange-Correlation Functional. b97-2; B97-2 Hybrid-GGA Exchange-Correlation Functional. b97-d,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/api/psi4.driver.opt.html:2896,optimiz,optimized,2896,psi4manual/1.1.0/api/psi4.driver.opt.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/api/psi4.driver.opt.html,2,['optimiz'],['optimized']
Performance,"able, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR)¶CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR)¶CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR)¶CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR)¶CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR)¶CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Psi4 I",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:32380,optimiz,optimize,32380,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,9,['optimiz'],['optimize']
Performance,"ac_traverse() call is substituted; for something like:; # Argument is the molecule object.; # A useful optional argument is nmax, the total number of electrons to; # strip out of the molecule, in this case, 2.; # Many optional arguments are available, see the python file; frac_nuke(h2o, nmax = 2). Note: this feature is new/powerful enough that we have several papers pending on; it, and are interested in expanding this work. If you would like to publish; results using this code, please contact Rob Parrish to make arrangements for; collaboration. Recommendations¶; The KS-DFT code is quite new, but relatively complete. During code development,; emphasis was placed on flexibility of functional technology, efficiency for; medium to large systems in difficult electronic environments (e.g., compact; spatial extents, diffuse basis sets, low band-gaps, LRC and/or hybrid GKS; functionals), and time to code completion. We are very interested in optimizing; and extending the code, so expect performance gains and extensions to; gradients/hessians and TDDFT in future releases.; Some rough guidelines for using the KS-DFT code are as follows,. Use DF for the ERI algorithm wherever possible.; PSI4 is a “tight” code, meaning we’ve set the default numerical cutoffs; for integrals, grids, and convergence criteria in such a way that you will often; get many more digits of precision than needed. You may be able to realize; additional speed gains by loosening some of these thresholds.; Read the literature to determine which functional technology to use. The world; contains far too many papers using B3LYP on noncovalent interactions without a -D. The “best-practice” input file for KS-DFT is:; memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('b3lyp'). Table Of Contents. Density Functional Theory; Theory; Minimal Input; Spin/Symmetry Treatment; Functional Selection; Grid Selection; ERI Algorithms",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/dft-1.html:21912,optimiz,optimizing,21912,psi4manual/4.0b2/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft-1.html,4,"['optimiz', 'perform']","['optimizing', 'performance']"
Performance,"accuracy of the Cholesky; decomposition is controlled by the keyword CHOLESKY_TOLERANCE.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DFA DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used. DISK_DFA DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4‘s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation.; For some of these algorithms, Schwarz and/or density sieving can be used to; identify negligible integral contributions in extended systems. To activate; sieving, set the INTS_TOLERANCE keyword to your desired cutoff; (1.0E-12 is recommended for most applications). To choose the type of sieving, set; the SCREENING keyword to your desired option. For Schwarz screening, set it; to SCHWARZ, for CSAM, CSAM, and for density matrix-based s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/scf-1.html:26934,optimiz,optimized,26934,psi4manual/1.5.0/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/scf-1.html,4,"['optimiz', 'perform']","['optimized', 'performance']"
Performance,"accuracy of the Cholesky; decomposition is controlled by the keyword CHOLESKY_TOLERANCE.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DFA DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used. DISK_DFA DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4‘s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation.; For some of these algorithms, Schwarz and/or density sieving can be used to; identify negligible integral contributions in extended systems. To activate; sieving, set the INTS_TOLERANCE keyword to your desired cutoff; (1.0E-12 is recommended for most applications).; We have added the automatic capability to use the extremely fast DF; code for intermediate convergence of the orbitals, for SCF_TYPE; DIRECT. At the moment, the code defa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/scf-1.html:26934,optimiz,optimized,26934,psi4manual/1.4.0/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/scf-1.html,4,"['optimiz', 'perform']","['optimized', 'performance']"
Performance,"ach other, but have any potential covalent links or other; interactions with C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SAPT is performed – F and I are; completely direct-product-separable considerations. Cube File Visualization with PyMol¶; Setting FISAPT_DO_PLOT true above generates a set of .cube files; containing the densities and ESPs of the various subsystems in the I-SAPT; embedding procedure. These can be used to gain a detailed understanding of the; intermolecular partition and the polarization between non-interacting and; Hartree–Fock-interacting moieties. We have developed a set of template; .pymol scripts to help with this process. These can be obtained by running:; 1>>> copy_pymol2.py. and then in PyMol:; 1>>> @run.pymol. This last command runs all of the individual .pymol files (e.g.,; DA.pymol), which in turn load in the molecule and cube file data; (contained in the .cube file), set up the visualization, and render a; .png image of the scene. Generally the view orientation and some specific; details of the .pymol files require some small tweaks to permit; publication-quality renderings. F/I-SAPT Keywords¶; The input files described above cover roughly 90% of all F/I-SAPT analyses. For; more delicate or involved problems, there are a large number of user options; that permit the customization of the I-SAPT subsystem partition, the convergence; of the IBO localization procedure, numerical thresholds, etc. We have an entire; video tutorial devoted to these options F/I-SAPT Options.; Direct source-code documentation on these options is available :ref:`here; <apdx:fisapt_psivar>`_. Additional Notes¶. Caution; In constrast to Ed Hohenstein’s SAPT0 code, FISAPT uses the -JKFIT; auxiliary basis sets for all Fock-type terms (e.g., electrostatics, exchange,; induction, and core Fock matrix elements in exchange-dispers",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/fisapt-1.html:11625,load,load,11625,psi4manual/1.1.0/fisapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/fisapt-1.html,6,['load'],['load']
Performance,"ache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM —. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR —. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA —. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT —. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (MP2); MP2 — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (OMP2); OMP2 —. Type: integer; Default: 2. CACHELEVEL (STABILITY); STABILITY —. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 —. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM —. Type: string; Possible Values: LOW, LRU; Default: LRU. CACHETYPE (MP2); MP2 — The criterion used to retain/release cached data. Type: string; Possible Values: LRU, LOW; Default: LRU. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html:6951,CACHE,CACHELEVEL,6951,psi4manual/4.0b2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html,2,['CACHE'],['CACHELEVEL']
Performance,"aches can be utilized in an integral-direct context, gaining the benefits of DF methods without suffering the; I/O bottlenecks that conventional DF methods will eventually run into. One such approach, outlined by Weigend in [Weigend:2002:4285],; is available for use in Psi4 for the separate construction of the Coulomb contribution to the Fock matrix. This implementation can be used alongside; Psi4’s separate Exchange construction algorithms for composite Fock matrix construction by using the keyword DFDIRJ as the Coulomb construction; algorithm when specifying SCF_TYPE to use a composite algorithm combination (DFDIRJ+K_alg in general,; or DFDIRJ for DFT with non-hybrid functionals).; DFDIRJ supports multiple capabilities to improve performance. Specifically, DFDIRJ allows for a combination of density-matrix based ERI; screening (set SCREENING to DENSITY) and incremental Fock matrix construction (set INCFOCK to TRUE). These two, when combined,; enable more aggressive screening of ERI contributions to the Coulomb matrix and thus greatly improve performance. COSX Exchange¶; The semi-numerical COSX algorithm described in [Neese:2009:98] evaluates; two-electron ERIs analytically over one electron coordinate and numerically; over the other electron coordinate, and belongs to the family of pseudospectral; methods originally suggested by Friesner. In COSX, numerical integration is performed on standard; DFT quadrature grids, which are described in DFT: Density Functional Theory.; Both the accuracy of the COSX algorithm and also the computational; cost are directly determined by the size of the integration grid, so selection; of the grid is important. This COSX implementation uses two separate grids.; By default, the SCF algorithm is first converged on a smaller grid, followed by a; number of SCF iterations up to a maximum value (controlled by the COSX_MAXITER_FINAL keyword); on a larger grid. By default, COSX_MAXITER_FINAL is set to 1, a single; SCF iteration, which results ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/scf.html:36391,perform,performance,36391,psi4manual/master/scf.html,https://psicode.org,https://psicode.org/psi4manual/master/scf.html,2,['perform'],['performance']
Performance,"action energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf3; are specified explicitly. cc52; CCSD Response for H2O2. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. cc12; Single point energies of multiple excited states with EOM-CCSD. cisd-sp; 6-31G** H2O Test CISD Energy Point. mrcc4; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). fci-dipole; 6-31G H2O Test FCI Energy Point. docs_psimod; This test is used to construct the documentation; it is not suitable for emulation by users. tu4-h2o-freq; Frequencies for H2O HF/cc-pVDZ at optimized geometry. dfmp2_1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. dcft3; DCFT-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. mints3; Test individual integral objects for correctness. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. psimrcc-ccsd_t-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html:9440,optimiz,optimized,9440,psi4manual/4.0b2/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html,4,['optimiz'],['optimized']
Performance,"action scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR)¶CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR)¶CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. CFOUR_CORE_ORBITALS (CFOUR)¶CFOUR — Specifies the core orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_ACTIVE_ORBI. The core orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR)¶CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the res",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:29654,optimiz,optimizations,29654,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,9,['optimiz'],['optimizations']
Performance,"actions; RHF/UHF/ROHF/RKS/UKS; —. scs-omp2-vdw; A special version of SCS-OMP2 (from ethene dimers); RHF/UHF/ROHF/RKS/UKS; —. sos-pi-omp2; A special version of SOS-OMP2 for -systems; RHF/UHF/ROHF/RKS/UKS; —. Basic OCC Keywords¶. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-6. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. Type: conv double; Default: 1e-3. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. WFN_TYPE¶. Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5; Default: OMP2. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. Advanced OCC Keywords¶. OPT_METHOD¶. The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. MO_DIIS_NUM_VECS¶. Number of vectors used in orbital DIIS. Type: integer; Default: 6. LINEQ_SOLVER¶. The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/occ-1.html:9571,optimiz,optimize,9571,psi4manual/1.0.0/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/occ-1.html,2,['optimiz'],['optimize']
Performance,"active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dft2; DFT Functional Test. scf6; Tests RHF/ROHF/UHF SCF gradients. scf-guess-read3; Test if the the guess read in the same basis converges. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. tdscf-1; td-uhf test on triplet states of methylene (rpa). mbis-4; MBIS calculation on NaCl. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. mom-h2o-4; MOM excitation from LUMO HOMO+4. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. props1; RHF STO-3G dipole moment computation, performed by applying a finite ele",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:14696,optimiz,optimization,14696,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimization']
Performance,"actor=627.5095)[source]¶; Function to apply a scaling factor Factor to the; data of the Table object. banner(text, type=1, width=35)[source]¶; Function to print text to output file in a banner of; minimum width width and minimum three-line height for; type = 1 or one-line height for type = 2. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. util¶; Module with utility functions for use in input files. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Fu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_driver-1.html:32925,Perform,Performs,32925,psi4manual/4.0b4/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver-1.html,6,['Perform'],['Performs']
Performance,"acy of the Cholesky; decomposition is controlled by the keyword CHOLESKY_TOLERANCE.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4’s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation.; For some of these algorithms, Schwarz and/or density sieving can be used to; identify negligible integral contributions in extended systems. To activate; sieving, set the INTS_TOLERANCE keyword to your desired cutoff; (1.0E-12 is recommended for most applications).; We have added the automatic capability to use the extremely fast DF; code for intermediate convergence of the orbitals, for SCF_TYPE; DIRECT. At the moment, the code defa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/scf-1.html:23163,optimiz,optimized,23163,psi4manual/1.2.1/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/scf-1.html,8,"['optimiz', 'perform']","['optimized', 'performance']"
Performance,"ad to unphysical; molecular properties such as vibrational frequencies. However, orbital-optimized MP2 (also MP3); will solve this N-representability problem by disregarding orbital response contribution of one-particle; density matrix.; Although the performance of coupled-cluster singles and doubles (CCSD) and orbital-optimized; CCD (OD) is similar, the situation is different in the case of triples corrections, especially at stretched; geometries [Bozkaya:2012:odtl]. Bozkaya and Schaefer demonstrated that orbital-optimized coupled cluster based; triple corrections, especially those of asymmetrics, provide significantly better potential energy curves than; CCSD based triples corrections.; A lot of the functionality in OCC has been enabled with Density Fitting (DF) and Cholesky; Decomposition (CD) techniques, which can greatly speed up calculations and reduce memory; requirements for typically negligible losses in accuracy.; NOTE: As will be discussed later, all methods with orbital-optimization functionality have non-orbital; optimized counterparts. Consequently, there arise two possible ways to call density-fitted MP2. In most; cases, users should prefer the DF-MP2 code described in the DF-MP2 section because it is; faster. If gradients are needed (like in a geometry optimization), then the procedures outlined hereafter; should be followed.; In general, choose the desired method, reference, and ERI type (e.g.,; set reference uhf, set mp2_type df, opt('mp2')) and the most; efficient module will be selected automatically, according to; Cross-module Redundancies.; Thus, there arise a few categories of method, each with corresponding input keywords:. Orbital-optimized MP and CC methods with conventional integrals (OMP Methods OCC keywords); Orbital-optimized MP and CC methods with DF and CD integrals (OMP Methods DFOCC keywords); Non-orbital-optimized MP and CC methods with conventional integrals (MP/CC Methods OCC keywords); Non-orbital-optimized MP and CC methods with",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/occ.html:3348,optimiz,optimization,3348,psi4manual/master/occ.html,https://psicode.org,https://psicode.org/psi4manual/master/occ.html,30,['optimiz'],"['optimization', 'optimized']"
Performance,"ad.""""""). optstash = p4util.OptionsState(; ['WRITER_FILE_LABEL'],; ['SCF', 'REFERENCE']). # Wrapper wholly defines molecule. discard any passed-in; kwargs.pop('molecule', None). # Paths to search for database files: here + PSIPATH + library + PYTHONPATH; psidatadir = os.environ.get('PSIDATADIR', None); #nolongerpredictable psidatadir = __file__ + '/../..' if psidatadir is None else psidatadir; libraryPath = ':' + os.path.abspath(psidatadir) + '/databases'; driver_loc = os.path.dirname(os.path.abspath(__file__)); dbPath = os.path.abspath('.') + \; ':' + ':'.join([os.path.abspath(x) for x in os.environ.get('PSIPATH', '').split(':')]) + \; libraryPath + \; ':' + driver_loc # so the databases can ""import qcdb"". sys.path = [sys.path[0]] + dbPath.split(':') + sys.path[1:]; # TODO this should be modernized a la interface_cfour. # Define path and load module for requested database; database = p4util.import_ignorecase(db_name); if database is None:; core.print_out('\nPython module for database %s failed to load\n\n' % (db_name)); core.print_out('\nSearch path that was tried:\n'); core.print_out("", "".join(map(str, sys.path))); raise ValidationError(""Python module loading problem for database "" + str(db_name)); else:; dbse = database.dbse; HRXN = database.HRXN; ACTV = database.ACTV; RXNM = database.RXNM; BIND = database.BIND; TAGL = database.TAGL; GEOS = database.GEOS; try:; DATA = database.DATA; except AttributeError:; DATA = {}. user_writer_file_label = core.get_global_option('WRITER_FILE_LABEL'); user_reference = core.get_global_option('REFERENCE'). # Configuration based upon e_name & db_name options; # Force non-supramolecular if needed; if not hasattr(lowername, '__call__') and re.match(r'^.*sapt', lowername):; try:; database.ACTV_SA; except AttributeError:; raise ValidationError('Database %s not suitable for non-supramolecular calculation.' % (db_name)); else:; ACTV = database.ACTV_SA; # Force open-shell if needed; openshell_override = 0; if user_reference in ['RHF', 'RKS",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/wrapper_database.html:9833,load,load,9833,psi4manual/1.1.0/_modules/psi4/driver/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/wrapper_database.html,1,['load'],['load']
Performance,"adeoff is rough here. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. cbs-xtpl-func; optimization with method defined via cbs. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cbs-xtpl-energy; Extrapolated water energies - density-fitted version. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. tdscf-6; td-camb3lyp with DiskDF and method/basis specification. dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. cubeprop; RHF orbitals and density for water. dft-smoke; DFT Functional Smoke Test. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). scf-ecp; Water-Argon complex with ECP present; check of energies and forces. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. fci-h2o; 6-31G H2O Test FCI Energy Point. extern1; External potential calculation involving a TIP3P water and a QM water. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:6035,optimiz,optimize,6035,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimize']
Performance,"adical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O mo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:10511,optimiz,optimization,10511,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,4,['optimiz'],['optimization']
Performance,"adient for the H2O molecule. nbody-he-4b; MP2/aug-cc-pvDZ many body energies of an arbitrary Helium complex, addressing 4-body formulas. sapt10; usapt example with empty beta due to frozen core. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-coverage; Lithium test for coverage. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dft1-alt; DFT Functional Test. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:8027,perform,performed,8027,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['perform'],['performed']
Performance,"adient', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_fnoccsd_t_(name, **kwargs):; """"""Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CC_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only fnocc. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module in ['', 'FNOCC']:; func = run_fnocc; elif mtd_type == 'DF':; if module in ['', 'FNOCC']:; func = run_fnodfcc; elif mtd_type == 'CD':; if module in ['', 'FNOCC']:; func = run_fnodfcc. if func is None:; raise ManagedMethodError(['select_fnoccsd_t_', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_ccsd_t_(name, **kwargs):; """"""Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CC_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/ccenergy/fnocc. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'FNOCC':; func = run_fnocc; elif module in ['', 'CCENERGY']:; func = run_ccenergy; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'FNOCC']:; func = run_fnodfcc; elif mtd_type == 'CD':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'FNOCC']:; func = run_fnodfcc; elif reference in ['UHF', 'ROHF']:; if mtd_type == 'CONV':; if module in ['', 'CCENERGY']:; func = run_ccenergy. if func is None:; raise ManagedMethodError(['select_ccsd_t_', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_ccsd_t__gradient(name, **kwargs):",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html:21769,perform,performance,21769,psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html,6,['perform'],['performance']
Performance,"adient=G, **kwargs); steps_since_last_hessian = 0; core.set_legacy_gradient(G); core.set_global_option('CART_HESS_READ', True); elif (full_hess_every == -1) and core.get_global_option('CART_HESS_READ') and (n == 1):; pass; # Do nothing; user said to read existing hessian once; else:; core.set_global_option('CART_HESS_READ', False); steps_since_last_hessian += 1. # Take step. communicate to/from/within optking through legacy_molecule; core.set_legacy_molecule(moleculeclone); optking_rval = core.optking(); moleculeclone = core.get_legacy_molecule(); moleculeclone.update_geometry(); if optking_rval == core.PsiReturnType.EndLoop:; # if this is the end of an IRC run, set wfn, energy, and molecule to that; # of the last optimized IRC point; if core.get_option('OPTKING', 'OPT_TYPE') == 'IRC':; thisenergy = old_thisenergy; print('Optimizer: Optimization complete!'); core.print_out('\n Final optimized geometry and variables:\n'); moleculeclone.print_in_input_format(); # Mark the optimization data as disposable now that the optimization is done.; core.IOManager.shared_object().set_specific_retention(1, False); # Check if user wants to see the intcos; if so, don't delete them.; if not core.get_option('OPTKING', 'INTCOS_GENERATE_EXIT'):; if not core.get_option('OPTKING', 'KEEP_INTCOS'):; core.opt_clean(); # Changing environment to optimized geometry as expected by user; molecule.set_geometry(moleculeclone.geometry()); for postcallback in hooks['optimize']['post']:; postcallback(lowername, wfn=wfn, **kwargs); core.clean(). # Cleanup binary file 1; if custom_gradient or ('/' in lowername) or kwargs.get('bsse_type', None) is not None:; core.IOManager.shared_object().set_specific_retention(1, False). optstash.restore(). if return_history:; history = {; 'energy': step_energies,; 'gradient': step_gradients,; 'coordinates': step_coordinates,; }. if return_wfn and return_history:; return (thisenergy, wfn, history); elif return_wfn and not return_history:; return (thisenergy, wfn); elif",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html:67530,optimiz,optimization,67530,psi4manual/1.6.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html,2,['optimiz'],['optimization']
Performance,"adz', 'M08SO-CP-adz', 'M08SO-unCP-atz', 'M08SO-CP-atz',; 'M11-unCP-adz', 'M11-CP-adz', 'M11-unCP-atz', 'M11-CP-atz',; 'VV10-unCP-adz', 'VV10-CP-adz', 'VV10-unCP-atz', 'VV10-CP-atz',; 'LCVV10-unCP-adz', 'LCVV10-CP-adz', 'LCVV10-unCP-atz', 'LCVV10-CP-atz',; 'WB97XV-unCP-adz', 'WB97XV-CP-adz', 'WB97XV-unCP-atz', 'WB97XV-CP-atz',; 'PBE02-unCP-adz', 'PBE02-CP-adz', 'PBE02-unCP-atz', 'PBE02-CP-atz',; 'WB97X2-unCP-adz', 'WB97X2-CP-adz', 'WB97X2-unCP-atz', 'WB97X2-CP-atz',; 'DSDPBEP86D2OPT-unCP-adz', 'DSDPBEP86D2OPT-CP-adz', 'DSDPBEP86D2OPT-unCP-atz', 'DSDPBEP86D2OPT-CP-atz',; 'B2PLYPD3-unCP-adz', 'B2PLYPD3-CP-adz', 'B2PLYPD3-unCP-atz', 'B2PLYPD3-CP-atz'],; # 'MP2-unCP-adz', 'MP2-CP-adz', 'MP2-unCP-atz', 'MP2-CP-atz'],; standalone=False, filename='tblrxn_all'). [docs]class ThreeDatabases(Database):; """""". """""". def __init__(self, pythonpath=None):; """"""Initialize ThreeDatabases object from Database""""""; Database.__init__(self, ['s22', 'a24', 'hsg'], dbse='DB3', pythonpath=None). # load up data and definitions; self.load_qcdata_byproject('pt2'); self.load_qcdata_byproject('dilabio'); self.load_qcdata_byproject('f12dilabio'); self.load_subsets(); self.define_supersubsets(); self.define_supermodelchems(). [docs] def define_supersubsets(self):; """""". """"""; self.sset['tt'] = ['default', 'default', 'default']; self.sset['hb'] = ['hb', 'hb', 'hb']; self.sset['mx'] = ['mx', 'mx', 'mx']; self.sset['dd'] = ['dd', 'dd', 'dd']; self.sset['mxdd'] = ['mxdd', 'mxdd', 'mxdd']; self.sset['pp'] = ['mxddpp', 'mxddpp', 'mxddpp']; self.sset['np'] = ['mxddnp', 'mxddnp', 'mxddnp']; self.sset['tt-5min'] = ['default', 'default', 'default']; self.sset['hb-5min'] = ['hb', 'hb', 'hb']; self.sset['mx-5min'] = ['mx', 'mx', 'mx']; self.sset['dd-5min'] = ['dd', 'dd', 'dd']; self.sset['mxdd-5min'] = ['mxdd', 'mxdd', 'mxdd']; self.sset['pp-5min'] = ['mxddpp', 'mxddpp', 'mxddpp']; self.sset['np-5min'] = ['mxddnp', 'mxddnp', 'mxddnp']; self.sset['weak'] = ['weak', 'weak', 'weak']; self.sset['weak_hb'] = ['weak_hb',",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:132277,load,load,132277,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['load'],['load']
Performance,"after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/build_planning.html:64549,queue,queue,64549,psi4manual/master/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html,1,['queue'],['queue']
Performance,"age: str; iteration: int; wfn: core.Wavefunction; e_conv: float; d_conv: float. def __init__(; self,; eqn_description: str,; iteration: int,; wfn: core.Wavefunction,; e_conv: float,; d_conv: float,; ):; ConvergenceError.__init__(self, eqn_description, iteration); self.e_conv = e_conv; self.d_conv = d_conv; self.wfn = wfn. [docs]class TDSCFConvergenceError(ConvergenceError):; """"""Error called for problems with TDSCF iterations. Parameters; ----------; wfn; Wavefunction at time of exception; what; What we were trying to solve for (singlets/triplets, irrep) when we failed to converge; stats; Dictionary of convergence statistics of last iteration.; Keys are:. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that was performed; - done : bool, if all roots were converged. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception; what; What we were trying to solve for (singlets/triplets, irrep) when we; failed to converge.; stats; Dictionary of convergence statistics of last iteration. See keys above. """"""; message: str; iteration: int; wfn: core.Wavefunction; what: str; stats: Dict[str, Any]. def __init__(self, iteration: int, wfn: core.Wavefunction, what: str, stats: Dict[str, Any]):; # prepare message, including excitation energies and residual norm; conv_info = ""==> Convergence statistics from last iteration <==\n\n""; conv_info += ""Excitation Energy"".center(21) + f"" {'D[value]':^15}"" + ""|R|"".center(11) + ""\n""; conv_info += f""{'-':->20} {'-':->15} {'-':->15}\n""; for e, diff, r_norm in zip(stats[""val""], st",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html:8172,perform,performed,8172,psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/exceptions.html,2,['perform'],['performed']
Performance,"aged procedure such as SA-CASSCF. Root numbering starts from 1. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (DFTSAPT); DFTSAPT — The name of the orbital basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (MINTS); MINTS — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (DFTSAPT); DFTSAPT — Bench level. Type: integer; Default: 0. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCEN",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:5606,perform,performing,5606,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,2,['perform'],['performing']
Performance,"agedMethodError(['select_omp2p5', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_omp2p5_gradient(name, **kwargs):; """"""Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ. func = None; if reference in ['RHF', 'UHF', 'ROHF', 'RKS', 'UKS']:; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient. if func is None:; raise ManagedMethodError(['select_omp2p5_gradient', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_lccd(name, **kwargs):; """"""Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CC_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/fnocc. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'OCC':; func = run_occ; elif module in ['', 'FNOCC']:; func = run_cepa; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc. if func is None:; raise ManagedMethodError(['select_lccd', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_lccd_gradient(name, **kwargs):;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html:14692,perform,performance,14692,psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html,6,['perform'],['performance']
Performance,"agment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible value.; Having defined a molecule containing fragments like eneyne above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (extract_subsets(1) pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). Job Control¶; PSI4 comprises a number of modules, written in C++, that each perform; specific tasks and are callable directly from the Python front end. Each module; recognizes specific keywords in the input file, detailed in Appendix Keywords by Module, which; control its function. The keywords can be made global, or scoped to apply to; certain specific modules. The following examples demonstrate some of the ways; that global keywords can be specified:; # all equivalent. set globals basis cc-pVDZ. set basis cc-pVDZ. set globals basis = cc-pVDZ. set basis = cc-pVDZ. set globals{; basis cc-pVDZ; }. set {; basis cc-pVDZ; }. set {; basis = cc-pVDZ; }. Note the lack of quotes around cc-pVDZ, even though it is a string. The; Psithon preprocessor automatically wraps any string values in set commands in; strings. The last three examples provide a more convenient way for specifying; multiple keywords:; set {; basis = cc-pVDZ; print = 1; reference = rhf; }. For arguments that require an array input, standard Python list syntax should; be used, viz.:; set {; docc = [3, ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/psithoninput-1.html:17370,perform,perform,17370,psi4manual/4.0b4/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/psithoninput-1.html,4,['perform'],['perform']
Performance,"ailable, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_EVERY keyword. Transition States, Reaction Paths, and Constrained Optimizations¶. Calculate a starting Hessian and optimize the “transition state” of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails):; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Optimize a geometry (HOOH) at a frozen dihedral angle of 90 degrees.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13molecule {; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 90.0; }. set optking {; frozen_dihedral = (""; 1 2 3 4; ""); }; optimize('scf'). To instead freeze the two O-H bond distances; 1; 2; 3; 4; 5; 6set optking {; frozen_distance = (""; 1 2; 3 4; ""); }. For bends, the corresponding keyword is “frozen_bend”. To freeze the cartesian coordinates of atom 2; 1; 2; 3; 4freeze_list = """"""; 2 xyz; """"""; set optking frozen_cartesian $freeze_list. To freeze only the y coordinates of atoms 2 and 3; 1; 2",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/optking-1.html:5886,optimiz,optimize,5886,psi4manual/1.1.0/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/optking-1.html,6,['optimiz'],['optimize']
Performance,"ained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:7607,perform,performed,7607,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['perform'],['performed']
Performance,"ained from Mihály Kállay (https://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; To indicate MRCC as the target software, set QC_MODULE=MRCC.; This is a change as of October 2022; previously, one prefixed the method by “mr”; to indicate MRCC (e.g., energy('mrccsdt')).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). 'ccsdt' in the call to energy() plus qc_module=mrcc instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the qc_module=mrcc is optional since PSI4 has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of QC_MODULE; will default to the CCENERGY module, and specification with value mrcc is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use 'ccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC.; Perturbative methods (ccsd(t), ccsdtqp(h)_l, etc.); are available with REFERENCE ROHF in versions of MRCC published; at least after July 1, 2014.; When using ROHF-CCSDT(Q), MRCC will compute and report two variants:; CCSDT(Q)/A and CCSDT(Q)/B. [Kallay:2008:144101] PSI4 will save both",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/mrcc.html:1529,perform,perform,1529,psi4manual/master/mrcc.html,https://psicode.org,https://psicode.org/psi4manual/master/mrcc.html,4,['perform'],['perform']
Performance,"ains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in whic",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:9649,CACHE,CACHELEVEL,9649,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,4,"['CACHE', 'Cache']","['CACHELEVEL', 'Cacheing']"
Performance,"air[1]))); ghost = list(set(pair[1]) - set(pair[0])). current_mol = molecule.extract_subsets(list(pair[0]), ghost); current_mol.set_name(""%s_%i_%i"" % (current_mol.name(), count, num)); if metadata['embedding_charges']: driver_nbody_helper.electrostatic_embedding(metadata, pair=pair); # Save energies info; ptype_dict[pair], wfn = func(method_string, molecule=current_mol, return_wfn=True, **kwargs); core.set_global_option_python('EXTERN', None); energies_dict[pair] = core.variable(""CURRENT ENERGY""); gradients_dict[pair] = wfn.gradient(); var_key = ""N-BODY (%s)@(%s) TOTAL ENERGY"" % (', '.join([str(i) for i in pair[0]]), ', '.join(; [str(i) for i in pair[1]])); intermediates_dict[var_key] = core.variable(""CURRENT ENERGY""); core.print_out(""\n N-Body: Complex Energy (fragments = %s, basis = %s: %20.14f)\n"" % (str(; pair[0]), str(pair[1]), energies_dict[pair])); # Flip this off for now, needs more testing; #if 'cp' in bsse_type_list and (len(bsse_type_list) == 1):; # core.set_global_option('DF_INTS_IO', 'LOAD'). core.clean(). return {; 'energies': energies_dict,; 'gradients': gradients_dict,; 'ptype': ptype_dict,; 'intermediates': intermediates_dict; }. def assemble_nbody_components(metadata, component_results):; """"""Assembles N-body components into interaction quantities according to requested BSSE procedure(s). Parameters; -----------; metadata : dict of str; Dictionary of N-body metadata. Required ``'key': value`` pairs:; ``'ptype'``: {'energy', 'gradient', 'hessian'}; Procedure which has generated the N-body components to be combined.; ``'bsse_type_list'``: list of str; List of requested BSSE treatments. Possible values include lowercase ``'cp'``, ``'nocp'``,; and ``'vmfc'``.; ``'max_nbody'``: int; Maximum number of bodies to include in the N-Body treatment.; Possible: `max_nbody` <= `max_frag`; Default: `max_nbody` = `max_frag`; ``'max_frag'``: int; Number of distinct fragments comprising full molecular supersystem.; ``'energies_dict'``: dict of set: float64; Dictionar",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_nbody.html:17448,LOAD,LOAD,17448,psi4manual/1.3.2/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_nbody.html,3,['LOAD'],['LOAD']
Performance,"aise ManagedMethodError([__name__, name, type_var, mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_omp3_gradient(name, **kwargs):; """"""Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); type_var, _, mtd_type = method_algorithm_type(name); module = core.get_global_option('QC_MODULE'). func = None; if reference in ['RHF', 'UHF', 'ROHF', 'RKS', 'UKS']:; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient. if func is None:; raise ManagedMethodError([__name__, name, type_var, mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_mp2p5(name, **kwargs):; """"""Function selecting the algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); type_var, _, mtd_type = method_algorithm_type(name); module = core.get_global_option('QC_MODULE'). func = None; if reference in ['RHF', 'UHF']:; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc. if func is None:; raise ManagedMethodError([__name__, name, type_var, mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_mp2p5_gradient(name, **kwargs):; """"""Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); type_var, _, mtd_type = method_algorithm_type(name); module = core.get_global_option('QC_MODULE'); all_electron = (core.get_global_option('FREEZE_CORE') =",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html:15108,perform,performance,15108,psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/procrouting/proc.html,4,['perform'],['performance']
Performance,"aking it ideal for; large systems and multi-core CPUs. See COSX Exchange for more information. LINKAn implementation of the linear-scaling “Linear Exchange” (LinK); algorithm described in [Ochsenfeld:1998:1663]. The LINK algorithm provides; many of the benefits of integral-direct SCF algorithms, including no disk I/O,; low memory usage, and effective parallelization. Additionally, the; LINK implementation scales well with system size; while simultaneously providing a formally-exact computation of the; Exchange term. See Linear Exchange for more information. SNLINKAn algorithm based on the “seminumerical Linear Exchange” (sn-LinK); approach described in [Laqua:2020:1456], SNLINK is only available if PSI4; is compiled with the GauXC library, described in [Williams-Young:2023:234104].; Algorithmically, SNLINK is very similar to COSX, differing primarily in screening of; the analytic 3-center integrals. In terms of implementation, SNLINK is more efficient,; owing to more highly-optimized integral contraction kernels; and supports execution; on Graphics Processing Units (GPUs). See Seminumerical Linear Exchange for more information. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DFA DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used. DISK_DFA DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/scf.html:30760,optimiz,optimized,30760,psi4manual/master/scf.html,https://psicode.org,https://psicode.org/psi4manual/master/scf.html,1,['optimiz'],['optimized']
Performance,"al Public License along; # with this program; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; #@END LICENSE; #. r""""""Stuff stolen from psi. Should import or not as necessary; or some better way. Apologies to the coders. """"""; from __future__ import absolute_import; from __future__ import print_function; import sys; import math; import re; import os; import string; from .vecutil import *. def _success(label):; """"""Function to print a '*label*...PASSED' line to screen.; Used by :py:func:`util.compare_values` family when functions pass. """"""; print('\t{0:.<66}PASSED'.format(label)); sys.stdout.flush(). [docs]def compare_values(expected, computed, digits, label, exitonfail=True):; """"""Function to compare two values. Prints :py:func:`util.success`; when value *computed* matches value *expected* to number of *digits*; (or to *digits* itself when *digits* > 1 e.g. digits=0.04). Performs; a system exit on failure unless *exitonfail* False, in which case; returns error message. Used in input files in the test suite. """"""; thresh = 10 ** -digits if digits > 1 else digits; if abs(expected - computed) > thresh:; print(""\t%s: computed value (%f) does not match (%f) to %f digits."" % (label, computed, expected, digits)); if exitonfail:; sys.exit(1); else:; return; if math.isnan(computed):; print(""\t%s: computed value (%f) does not match (%f)\n"" % (label, computed, expected)); print(""\tprobably because the computed value is nan.""); if exitonfail:; sys.exit(1); else:; return; _success(label). [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; print(""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); sys.exit(1); _success(label). [docs]def compare_strings(expected,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/psiutil.html:1743,Perform,Performs,1743,psi4manual/1.0.0/_modules/qcdb/psiutil.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/psiutil.html,1,['Perform'],['Performs']
Performance,"al QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variable. del_variable(key); Removes scalar or array QCVariable key from cls if present. density_fitted(self); Returns whether this wavefunction was obtained using density fitting or not. diis(self); docstring. doccpi(self); Returns the number of doubly occupied orbitals per irrep. efzc(self); Returns the frozen-core energy. energy(self); Returns the Wavefunction's energy. epsilon_a(self); Returns the Alpha Eigenvalues. epsilon_a_subset(self, basis, subset); Returns the requested Alpha orbital energies subset. epsilon_b(self); Returns the Beta Eigenvalues. epsilon_b_subset(self, basis, subset); Returns the requested Beta orbital energies subset. esp_at_nuclei(self); returns electrostatic potentials at nuclei. external_pot(self); Gets the requested external potential. finalize(self); Cleans up the the Wavefunction's temporary data. finalize_energy(); Performs stability analysis and calls back SCF with new guess if needed, Returns the SCF energy. find_occupation(self); docstring. force_doccpi(self, arg0); Specialized expert use only. force_soccpi(self, arg0); Specialized expert use only. form_C(self[, shift]); Forms the Orbital Matrices from the current Fock Matrices. form_D(self); Forms the Density Matrices from the current Orbitals Matrices. form_F(self); Forms the F matrix. form_FDSmSDF(self, arg0, arg1); Forms the residual of SCF theory. form_G(self); Forms the G matrix. form_H(self); Forms the core Hamiltonian. form_Shalf(self); Forms the S^1/2 matrix. form_V(self); Form the Kohn-Sham Potential Matrices from the current Density Matrices. form_initial_C(self); Forms the initial Orbital Matrices from the current Fock Matrices. form_initial_F(self); Forms the initial F matrix. frac_renormalize(self); docstring. frequencies(). from_file(wfn_data); Build Wavefunction from data. frzcpi(self); Returns the number of frozen core orbitals per irrep. frzvpi(self); Returns the",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.cuhf.html:4747,Perform,Performs,4747,psi4manual/1.5.0/api/psi4.core.cuhf.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.cuhf.html,5,['Perform'],['Performs']
Performance,"al approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail. Warning; For the present, file intco.dat is lodged in the submission; directory and defines the internal coordinates for an optimization.; Thus, it is unsafe to run multiple optimizations from a single; directory. Also, intco.dat can linger, so, unless you’ve; deliberately constructed it, be sure to clear it out before starting a; new optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the molecule being converted to a Cartesian representation. The ongoing development of optking is providing for unique treatment of; coordinates which connect distinct molecular fragments. Thus, several keywords; relate to “interfragment modes”, though many of these capabilities are; still under development. Presently by default, separate fragments are bonded by; nearest atoms, and the whole system is treated as if it were part of one; molecule. However, with the option FRAG_MODE, fragments; may instead be rel",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/optking-1.html:1788,Optimiz,Optimizing,1788,psi4manual/4.0b3/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optking-1.html,2,['Optimiz'],['Optimizing']
Performance,"al approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file named “intco.dat”. See the Optimizing Minima; section for more detail.; The ongoing development of optking is providing for unique treatment of; coordinates which connect distinct molecular fragments. Thus, several keywords; relate to “interfragment modes”, though many of these capabilities are; still under development. Presently by default, separate fragments are bonded by; nearest atoms, and the whole system is treated as if it were part of one; molecule. However, with the option FRAG_MODE, fragments; may instead be related by a unique set of interfragment coordinates defined by; reference points within each fragment. The reference points can be atomic; positions (current default), linear combinations of; atomic positions, or located on the principal axes (not yet working). Basic Keywords¶. OPT_TYPE¶. Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. STEP_TYPE¶. Geometry optimization step type, either Newton-Raphson or Rational Function Optimization.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/optking-1.html:1773,Optimiz,Optimizing,1773,psi4manual/4.0b2/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/optking-1.html,2,['Optimiz'],['Optimizing']
Performance,"al contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR); CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR); CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. CFOUR_CORE_ORBITALS (CFOUR); CFOUR — Specifies the core orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_ACTIVE_ORBI. The core orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below . Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum number of ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:30034,optimiz,optimizations,30034,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimizations']
Performance,"al contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR); CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR); CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. CFOUR_CORE_ORBITALS (CFOUR); CFOUR — Specifies the core orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_ACTIVE_ORBI. The core orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR); CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR); CFOUR — Specifies the maximum nu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:29808,optimiz,optimizations,29808,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,6,['optimiz'],['optimizations']
Performance,"al conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. scf-auto-cholesky; Cholesky filter a complete basis. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. fnocc7; Test fnocc with linear dependencies. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. linK-1; RHF Linear Exchange Algorithm test for water. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. mbis-5; MBIS calculation on ZnO. cc13d; Tests analytic CC2 gradients. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. scf-level-shift-uhf; SCF level shift on a UHF computation. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. isapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:45893,optimiz,optimization,45893,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimization']
Performance,"al files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0. MP2_SOS_SCALE¶. MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2¶. Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OCC_ORBS_PRINT¶. Do print OCC orbital energies?. Type: boolean; Default: false. OEPROP¶. Do compute one electron properties?. Type: boolean; Default: false. OPT_METHOD¶. The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER¶. The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. PCG_BETA_TYPE¶. Type of PCG beta parameter (Fletcher-Reeves or Polak-Ribiere). Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG_CONVERGENCE¶. Convergence criterion for residual vector of preconditioned conjugate gradien",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__occ-1.html:5386,perform,performed,5386,psi4manual/1.3.2/autodir_options_c/module__occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__occ-1.html,2,['perform'],['performed']
Performance,"al indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (STABILITY); STABILITY —. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:10013,cache,cache,10013,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,4,['cache'],['cache']
Performance,"al indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (MP2); MP2 — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (OMP2); OMP2 — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (OMP3); OMP3 — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (STABILITY); STABILITY —. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:9982,cache,cache,9982,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,4,['cache'],['cache']
Performance,"al update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coupled-cluster iterations from old and amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE); CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI); DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM); CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS); GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:195094,optimiz,optimizations,195094,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimizations']
Performance,"al using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/testsuite-1.html:3795,perform,performs,3795,psi4manual/1.0.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/testsuite-1.html,8,"['optimiz', 'perform']","['optimization', 'performs']"
Performance,"al-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCT). orbital_values() psi4.core.PointFunctions method. ORBITALS_WRITE (SCF). OrbitalSpace class in psi4.core. order() psi4.core.CharacterTable method. psi4.core.PointGroup method. ordered_params psi4.driver.EmpiricalDispersion attribute. psi4.driver.procrouting.empirical_dispersion.EmpiricalDispersion attribute. OREMP. ; setting keywords. OREMP2 CORRELATION ENERGY. OREMP2 DOUBLES ENERGY. OREMP2 OPPOSITE-SPIN CORRELATION ENERGY. OREMP2 REFERENCE CORRECTION ENERGY. OREMP2 SAME-SPIN CORRELATION ENERGY. OREMP2 SINGLES ENERGY. OREMP2 TOTAL ENERGY. orientation() psi4.core.MolecularGrid method. orientation_fixed() psi4.core.Molecule method. origin psi4.core.OneBodyAOInt attribute. original_coef() psi4.core.GaussianShell method. ORTH_TYPE (DFOCC). (OCC). OS_SCALE (OCC). outfile_name() in module psi4.core. output. ; cbs(). database(). geometry optimization. SAPT. vibrational analysis. overlap() psi4.core.FISAPT method. overlap_3c() psi4.core.IntegralFactory method. OVERLAP_CHECK (CCEOM). overlap_grad() psi4.core.MintsHelper method. OverlapInt class in psi4.core. P. p psi4.core.AOShellCombinationsIterator attribute. P (THERMO). PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parent_atom() psi4.core.BlockOPoints method. PARENT_SYMMETRY (GLOBALS). ParsingError. partial_cholesky_factorize() psi4.core.Matrix method. partition() psi4.core.FISAPT method. PastureRequiredError. PATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32]. PBS queueing system. PCG_BETA_TYPE (DFOCC). (OCC). PCG_CONVERGENCE (DFOCC). (OCC). PCG_MAXITER (DFOCC). (OCC). PCM, [1]. Using PCM. PCM (GLOBALS). PCM POLARIZATION ENERGY. PCM_CC_TYPE (PCM). PCM_enabled() psi4.core.Wavefunction method. pcm_helper() in modul",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/genindex.html:85164,optimiz,optimization,85164,psi4manual/1.7.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/genindex.html,1,['optimiz'],['optimization']
Performance,"al-Optimized Methods, OLCCD. Orbital-Optimized Methods, OMP2. Orbital-Optimized Methods, OMP2.5. Orbital-Optimized Methods, OMP3. ORBITAL_LEVEL_SHIFT (DCT). orbital_values() psi4.core.PointFunctions method. ORBITALS_WRITE (SCF). OrbitalSpace class in psi4.core. order() psi4.core.CharacterTable method. psi4.core.PointGroup method. ordered_params psi4.driver.EmpiricalDispersion attribute. psi4.driver.procrouting.empirical_dispersion.EmpiricalDispersion attribute. OREMP. ; setting keywords. OREMP2 CORRELATION ENERGY. OREMP2 DOUBLES ENERGY. OREMP2 OPPOSITE-SPIN CORRELATION ENERGY. OREMP2 REFERENCE CORRECTION ENERGY. OREMP2 SAME-SPIN CORRELATION ENERGY. OREMP2 SINGLES ENERGY. OREMP2 TOTAL ENERGY. orientation() psi4.core.MolecularGrid method. orientation_fixed() psi4.core.Molecule method. origin psi4.core.OneBodyAOInt attribute. original_coef() psi4.core.GaussianShell method. ORTH_TYPE (DFOCC). (OCC). OS_SCALE (OCC). outfile_name() in module psi4.core. output. ; cbs(). database(). geometry optimization. SAPT. vibrational analysis. overlap() psi4.core.FISAPT method. overlap_3c() psi4.core.IntegralFactory method. OVERLAP_CHECK (CCEOM). overlap_grad() psi4.core.MintsHelper method. OverlapInt class in psi4.core. owner_group psi4.driver.AtomicComputer attribute. P. p psi4.core.AOShellCombinationsIterator attribute. P (THERMO). PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parent_atom() psi4.core.BlockOPoints method. PARENT_SYMMETRY (GLOBALS). ParsingError. partial_cholesky_factorize() psi4.core.Matrix method. partition() psi4.core.FISAPT method. PastureRequiredError. PATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32]. PBS queueing system. PCG_BETA_TYPE (DFOCC). (OCC). PCG_CONVERGENCE (DFOCC). (OCC). PCG_MAXITER (DFOCC). (OCC). PCM, [1]. Using PCM. PCM (GLOBALS). PCM POLARIZATION ENERGY. PCM_CC_TYPE (PCM). PCM_enabled() ps",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/genindex.html:85518,optimiz,optimization,85518,psi4manual/1.8.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/genindex.html,1,['optimiz'],['optimization']
Performance,"al. build_wpbe_x_superfunctional() in module procedures.functional. build_wpbed3bj_superfunctional() in module procedures.functional. build_wpbed3mbj_superfunctional() in module procedures.functional. build_wpbed3mzero_superfunctional() in module procedures.functional. build_wpbed3zero_superfunctional() in module procedures.functional. build_wpbesol0_superfunctional() in module procedures.functional. build_wpbesol_superfunctional() in module procedures.functional. build_wpbesol_x_functional() in module procedures.functional. build_wpbesol_x_superfunctional() in module procedures.functional. build_wpw92_c_superfunctional() in module procedures.functional. build_ws_x_functional() in module procedures.functional. build_ws_x_superfunctional() in module procedures.functional. build_wsvwn_superfunctional() in module procedures.functional. C. c2_x() SymmetryOperation method. SymRep method. c2_y() SymmetryOperation method. SymRep method. c2_z() SymmetryOperation method. SymRep method. CACHELEVEL (ADC). (CCDENSITY). (CCENERGY). (CCEOM). (CCHBAR). (CCLAMBDA). (CCRESPONSE). (CCSORT). (CCTRANSORT). (DCFT). (OCC). (TRANSQT2). CACHETYPE (CCENERGY). (CCEOM). CALC_S_SQUARED (DETCI). CANONICALIZE_ACTIVE_FAVG (MCSCF). CANONICALIZE_INACTIVE_FAVG (MCSCF). CART_HESS_READ (OPTKING). CartesianEntry class in qcdb.libmintscoordentry. cbs(); . extrapolation schemes. output. setting keywords. theory, [1]. CBSCORRELATIONENERGY. CBSREFERENCEENERGY. CBSTOTALENERGY. CC; . theory. CC (DETCI). CC(n-1)(n)_LCORRELATIONENERGY. CC(n-1)(n)_LTOTALENERGY. CC(n-1)(n)CORRELATIONENERGY. CC(n-1)(n)TOTALENERGY. CC, coupled cluster. CC2CORRELATIONENERGY. CC2TOTALENERGY. CC3_FOLLOW_ROOT (CCEOM). CC3CORRELATIONENERGY. CC3TOTALENERGY. CC4CORRELATIONENERGY. CC4TOTALENERGY. CC_A_RAS3_MAX (DETCI). CC_B_RAS3_MAX (DETCI). CC_DIIS_MAX_VECS (DFOCC). (OCC). CC_DIIS_MIN_VECS (DFOCC). (OCC). CC_EX_LEVEL (DETCI). CC_FIX_EXTERNAL (DETCI). CC_FIX_EXTERNAL_MIN (DETCI). CC_LAMBDA (DFOCC). CC_MACRO (DETCI). CC_MAXITER (DFOCC). (O",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/genindex.html:14040,CACHE,CACHELEVEL,14040,psi4manual/1.0.0/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/genindex.html,1,['CACHE'],['CACHELEVEL']
Performance,"al. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.opt-1.html:13110,perform,perform,13110,psi4manual/1.4.0/api/psi4.driver.opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.opt-1.html,14,"['Optimiz', 'optimiz', 'perform']","['OptimizationConvergenceError', 'optimization', 'optimize', 'perform']"
Performance,"al. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.driver.opt-1.html:13110,perform,perform,13110,psi4manual/1.5.0/api/psi4.driver.opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.driver.opt-1.html,14,"['Optimiz', 'optimiz', 'perform']","['OptimizationConvergenceError', 'optimization', 'optimize', 'perform']"
Performance,"al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WRITE (SCF); SCF — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOM_OCC (SCF); SCF — The absolute indices of orbitals to excite from in MOM (+/- for alpha/beta). Type: array; Default: No Default. MOM_START (SCF); SCF — The iteration to start MOM on (or 0 for no MOM). Type: integer; Default: 0. MOM_VIR (SCF); SCF — The absolute indices of orbitals to excite to in MOM (+/- for alpha/beta). Type: array; Default: No Default. MOORDER (TRANSQT); TRANSQT — Numbering of MOs for reordering requests?. Type: array; Default: No Default. MP2_AMPS_PRINT (CCENERGY); CCENERGY — Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. MP2_CCSD_METHOD (PSIMRCC); PSIMRCC — How to perform MP2_CCSD computations. Type: string; Possible Values: I, IA, II; Default: II. MP2_GUESS (PSIMRCC); PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY); CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2); DFMP2 — OS Scale. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (LMP2); LMP2 — The scale factor used for opposite-spin pairs in SCS computations. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (OCC); OCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SCALE_OS (FNOCC); FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0/3.0. MP2_SOS_SCALE (OCC); OCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2 (OCC); OCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SS_SCALE (CCE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:79830,perform,perform,79830,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,2,['perform'],['perform']
Performance,"al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WRITE (SCF); SCF — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOM_OCC (SCF); SCF — The absolute indices of orbitals to excite from in MOM (+/- for alpha/beta). Type: array; Default: No Default. MOM_START (SCF); SCF — The iteration to start MOM on (or 0 for no MOM). Type: integer; Default: 0. MOM_VIR (SCF); SCF — The absolute indices of orbitals to excite to in MOM (+/- for alpha/beta). Type: array; Default: No Default. MOORDER (TRANSQT); TRANSQT — Numbering of MOs for reordering requests?. Type: array; Default: No Default. MP2_AMPS_PRINT (CCENERGY); CCENERGY — Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. MP2_CCSD_METHOD (PSIMRCC); PSIMRCC — How to perform MP2_CCSD computations. Type: string; Possible Values: I, IA, II; Default: II. MP2_GUESS (PSIMRCC); PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY); CCENERGY — The scale factor used for opposite-spin pairs in SCS computations. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (CPHF); CPHF — The scale factor used for opposite-spin pairs in SCS computations. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (DFMP2); DFMP2 — OS Scale. Type: double; Default: 6.0/5.0. MP2_OS_SCALE (OCC); OCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SCALE_OS (FNOCC); FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC); FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0/3.0. MP2_SOS_SCALE (OCC); OCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE2 (OCC); OCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: do",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html:78233,perform,perform,78233,psi4manual/4.0b5/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html,2,['perform'],['perform']
Performance,"al]. adc; 2nd-order algebraic diagrammatic construction (ADC) [manual]. eom-cc2; EOM-CC2 [manual]. eom-ccsd; equation of motion (EOM) CCSD [manual]. eom-cc3; EOM-CC3 [manual]. Examples:. 1; 2>>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). 1; 2; 3; 4; 5>>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). 1; 2>>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). 1; 2; 3; 4; 5; 6; 7; 8; 9>>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). 1; 2; 3; 4; 5>>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). 1; 2>>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). 1; 2; 3; 4>>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/energy-1.html:8392,perform,perform,8392,psi4manual/1.2.1/energy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/energy-1.html,4,['perform'],['perform']
Performance,"algorithm for a MP2.5 energy call; and directing to specified or best-performance default modules. select_mp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP2.5 gradient call; and directing to specified or best-performance default modules. select_mp3(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. select_mp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. select_mp4(name, **kwargs)[source]¶; Function selecting the algorithm for a MP4 energy call; and directing to specified or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:169560,perform,performance,169560,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['perform'],['performance']
Performance,"algorithm to a water cluster. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. aediis-1; ADIIS test case, from 10.1063/1.3304922. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. sapt11; sapt example with orbital freezing with alkali metal and dMP2. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. mbis-2; MBIS calculation on OH- (Expanded Arrays). phi-ao; Test computing values of basis functions (puream and non-puream) at points. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:1900,optimiz,optimization,1900,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimization']
Performance,"algorithms. The current default is the; newer RS_I_RFO algorithm [Besalu:1998:265] . The old algorithm can be used by setting; STEP_TYPE P_RFO for OPT_TYPE TS. Calculate a starting Hessian and optimize the “transition state” of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails):; molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum:; molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Constrained Optimizations¶. Optimize a geometry (HOOH) at a frozen dihedral angle of 90 degrees.; molecule {; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 90.0; }. set optking {; frozen_dihedral = (""; 1 2 3 4; ""); }; optimize('scf'). To instead freeze the two O-H bond distances; set optking {; frozen_distance = (""; 1 2; 3 4; ""); }. For bends, the corresponding keyword is “frozen_bend”. To freeze the cartesian coordinates of atom 2. freeze_list = """"""; 2 xyz; """"""; set optking frozen_cartesian $freeze_list. To freeze only the y coordinates of atoms 2 and 3. freeze_list = """"""; 2 y; 3 y; """"""; set optking frozen_cartesian $freeze_list. To optimize toward a value of 0.95 Angstroms for the distance between; atoms 1 and 3, as well as that between 2 and 4. set optking {; ranged_distance = (""; 1 3 0.949 0.95; 2 4 0.949 0.95; ""); }. Note; The effect of the frozen and ranged keywords is generally independent of; how the geometry of the molecule was input (whether Z-matrix or Cartesian, etc.)..; At this time; however, enforcing Cartesian constraints when using a zmatrix for; molecular input is not supported. Freezing or constraining Cartesian coordinates; requires Cartesian molecule input. If ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/optking.html:6020,optimiz,optimize,6020,psi4manual/master/optking.html,https://psicode.org,https://psicode.org/psi4manual/master/optking.html,1,['optimiz'],['optimize']
Performance,"aliases: frequencies(), freq(). :returns: *float* |w--w| Total electronic energy in Hartrees. :returns: (*float*, :py:class:`~psi4.core.Wavefunction`) |w--w| energy and wavefunction when **return_wfn** specified. :type name: string; :param name: ``'scf'`` || ``'mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the system. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :type return_wfn: :ref:`boolean <op_py_boolean>`; :param return_wfn: ``'on'`` || |dl| ``'off'`` |dr|. Indicate to additionally return the :py:class:`~psi4.core.Wavefunction`; calculation result as the second element (after *float* energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``freq_func`` instead of ``func``. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: |dl| ``'hessian'`` |dr| || ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available- they're not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. :type irrep: int or string; :param irrep: |dl| ``-1`` |dr| || ``1`` || ``'b2'`` || ``'App'`` || etc. Indicates which symmetry block (:ref:`Cotton <table:irrepOrdering>` ordering) of vibrational; frequencies to be computed. ``1``, ``'1'``, or ``'a1'`` represents; :math:`a_1`, requesting only the totally symmetric modes.; ``-1`` indicates a full frequency calculation. .. note:: Analytic hessians are only available for RHF. F",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html:70086,perform,performed,70086,psi4manual/1.3.2/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html,1,['perform'],['performed']
Performance,"aliases: frequencies(), freq(). :returns: *float* |w--w| Total electronic energy in Hartrees. :returns: (*float*, :py:class:`~psi4.core.Wavefunction`) |w--w| energy and wavefunction when **return_wfn** specified. :type name: string; :param name: ``'scf'`` || ``'mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the system. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :type return_wfn: :ref:`boolean <op_py_boolean>`; :param return_wfn: ``'on'`` || |dl| ``'off'`` |dr|. Indicate to additionally return the :py:class:`~psi4.core.Wavefunction`; calculation result as the second element (after *float* energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``freq_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies or gradients frequency, indicates; whether the calculations required to complete the frequency are to be run; in one file (``'continuous'``) or are to be farmed out in an; embarrassingly parallel fashion (``'sow'``/``'reap'``)/ For the latter,; run an initial job with ``'sow'`` and follow instructions in its output file.; For maximum flexibility, ``return_wfn`` is always on in ``'reap'`` mode. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: |dl| ``'hessian'`` |dr| || ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available- they're not), finite",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html:81743,perform,performed,81743,psi4manual/1.1.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html,2,['perform'],['performed']
Performance,"ality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is made, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, Psi4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. Creating a New Plugin¶; Psi4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, Psi4 will complain.; >>> psi4 --new-plugin myplugin. Psi4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make. Then execute; psi4 in the directory on the default input file.; Psi4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplugin +aointegrals; >>> psi4 --new-plugin myplugin +mointegrals; >>> psi4 --new-plugin myplugin +sointegrals; >>> psi4 --new-plugin myplugin +wavefunction; >>> psi4 ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/plugins-1.html:2058,load,loaded,2058,psi4manual/1.0.0/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/plugins-1.html,2,['load'],['loaded']
Performance,"ality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make. Then execute; psi4 in the directory on the default input file.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/plugins-1.html:2051,load,loaded,2051,psi4manual/4.0b4/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/plugins-1.html,4,['load'],['loaded']
Performance,"ality to the old cints; module, and LibTrans, which replaces the old transqt code. When codes are; wrapped in a library, they should be placed into psi4/src/lib, and; codes that resemble modules belong in psi4/src/bin.; The single-executable design leads to a somewhat cumbersome development; cycle, since every time a change is make, one must compile the code,; archive it into a library, and then re-link the code into the main; executable. It’s also daunting to new developers if they’re required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with previous versions due to the independent; nature of the modules. To overcome these problems, PSI4 now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi’s vast library. The plugins can be loaded at; run-time from any location. To be able to use plugins, you should compile; your source code with the --with-plugins flag passed to configure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplugin +aointegrals; >>> psi4 --new-plugin myplugin +mointegrals; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/plugins-1.html:2051,load,loaded,2051,psi4manual/4.0b3/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/plugins-1.html,4,['load'],['loaded']
Performance,"alization in stability check. Type: integer; Default: 20. STABILITY_AUGMENT_SPACE_TOL¶. The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK¶. Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE¶. Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE¶. The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES¶. The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS¶. The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. TIKHONOW_OMEGA¶. The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. table of contents. DCFT; General; ALGORITHM; AO_BASIS; DCFT_FUNCTIONAL; DCFT_TYPE; DF_BASIS_DCFT; DIIS_START_CONVERGENCE; E_CONVERGENCE; GUESS_R_CONVERGENCE; MAXITER; MOLDEN_WRITE; ODC_GUESS; QC_COUPLING; QC_TYPE; REFERENCE; RESPONSE_ALGORITHM; R_CONVERGENCE; THREE_PARTICLE. Expert; CACHELEVEL; DAMPING_PERCENTAGE; DCFT_GUESS; DIIS_MAX_VECS; DIIS_MIN_VECS; ENERGY_LEVEL_SHIFT; IGNORE_TAU; INTS_TOLERANCE; MO_RELAX; ORBITAL_LEVEL_SHIFT; RELAX_GUESS_ORBITALS; RELAX_TAU; STABILITY_ADD_VECTORS; STABILITY_AUGMENT_SPACE_TOL; STABILITY_CHECK; STABILITY_CONVERGENCE; STABILITY_MAX_SPACE_SIZE; STABILITY_N_EIGENVALUES; STABILITY_N_GUESS_VECTORS; TIKHONOW_OMEGA. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Keywords by Module. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__dcft-1.html:7701,CACHE,CACHELEVEL,7701,psi4manual/1.1.0/autodir_options_c/module__dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__dcft-1.html,2,['CACHE'],['CACHELEVEL']
Performance,"alization in stability check. Type: integer; Default: 20. STABILITY_AUGMENT_SPACE_TOL¶. The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK¶. Performs stability analysis of the DCT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE¶. Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE¶. The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES¶. The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS¶. The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. TIKHONOW_OMEGA¶. The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. table of contents. DCT; General; ALGORITHM; AO_BASIS; DCT_FUNCTIONAL; DCT_TYPE; DF_BASIS_DCT; DIIS_START_CONVERGENCE; E_CONVERGENCE; GUESS_R_CONVERGENCE; MAXITER; ODC_GUESS; OPDM; QC_COUPLING; QC_TYPE; REFERENCE; RESPONSE_ALGORITHM; R_CONVERGENCE; THREE_PARTICLE. Expert; CACHELEVEL; DAMPING_PERCENTAGE; DCT_GUESS; DIIS_MAX_VECS; DIIS_MIN_VECS; ENERGY_LEVEL_SHIFT; INTS_TOLERANCE; ORBITAL_LEVEL_SHIFT; RELAX_GUESS_ORBITALS; STABILITY_ADD_VECTORS; STABILITY_AUGMENT_SPACE_TOL; STABILITY_CHECK; STABILITY_CONVERGENCE; STABILITY_MAX_SPACE_SIZE; STABILITY_N_EIGENVALUES; STABILITY_N_GUESS_VECTORS; TIKHONOW_OMEGA. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; DCT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__dct.html:7087,CACHE,CACHELEVEL,7087,psi4manual/1.7.x/autodir_options_c/module__dct.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__dct.html,1,['CACHE'],['CACHELEVEL']
Performance,"all higher order n-body effects up to the number of fragments. embedding_charges (dict) – {1: [-0.834, 0.417, 0.417], ..}; Dictionary of atom-centered point charges. keys: 1-based index of fragment, values: list of charges for each fragment.; Add atom-centered point charges for fragments whose basis sets are not included in the computation. The nbody function computes counterpoise-corrected (CP), non-CP (noCP), and Valiron-Mayer Function Counterpoise (VMFC) interaction energies for complexes composed of arbitrary numbers of monomers.; Examples :; # Counterpoise corrected CCSD(T) energies for the Helium dimer; molecule mol {; He; --; He 1 3; }; # Calculate interaction energies only (skips monomers in monomer basis):; energy('CCSD(T)', bsse_type='cp'); # Calculate interaction and total energies, return interaction energies:; energy('CCSD(T)', bsse_type=['cp','nocp']); # Calculate and return counterpoise-corrected gradient; # Useful for e.g. CP-corrected geometry optimization; gradient('CCSD(T)', bsse_type='cp', return_total_data=True). # noCP, VMFC, and CP energy for a helium cluster, limited at 3 bodies; molecule mol {; He 0 0 0; --; He 0 0 4; --; He 0 4 0; --; He 4 0 0; }. # Returns the nocp energy as its first in the list; energy('CCSD(T)', bsse_type=['nocp', 'cp', 'vmfc'], max_nbody=3). API¶. class psi4.driver.driver_nbody.BsseEnum(value)[source]¶; Available basis-set superposition error (BSSE) treatments. cp = 'cp'¶. nocp = 'nocp'¶. vmfc = 'vmfc'¶. pydantic model psi4.driver.driver_nbody.ManyBodyComputer[source]¶. Show JSON schema{; ""title"": ""ManyBodyComputer"",; ""description"": ""Base class for \""computers\"" that plan, run, and process QC tasks."",; ""type"": ""object"",; ""properties"": {; ""molecule"": {; ""title"": ""Molecule"",; ""description"": ""The target molecule, if not the last molecule defined.""; },; ""basis"": {; ""title"": ""Basis"",; ""default"": ""(auto)"",; ""type"": ""string""; },; ""method"": {; ""title"": ""Method"",; ""default"": ""(auto)"",; ""type"": ""string""; },; ""driver"": {; ""descrip",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/nbody.html:3387,optimiz,optimization,3387,psi4manual/1.7.x/nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/nbody.html,2,['optimiz'],['optimization']
Performance,"all higher order n-body effects up to the number of fragments. embedding_charges (dict) – {1: [-0.834, 0.417, 0.417], ..}; Dictionary of atom-centered point charges. keys: 1-based index of fragment, values: list of charges for each fragment.; Add atom-centered point charges for fragments whose basis sets are not included in the computation. The nbody function computes counterpoise-corrected (CP), non-CP (noCP), and Valiron-Mayer Function Counterpoise (VMFC) interaction energies for complexes composed of arbitrary numbers of monomers.; Examples :; # Counterpoise corrected CCSD(T) energies for the Helium dimer; molecule mol {; He; --; He 1 3; }; # Calculate interaction energies only (skips monomers in monomer basis):; energy('CCSD(T)', bsse_type='cp'); # Calculate interaction and total energies, return interaction energies:; energy('CCSD(T)', bsse_type=['cp','nocp']); # Calculate and return counterpoise-corrected gradient; # Useful for e.g. CP-corrected geometry optimization; gradient('CCSD(T)', bsse_type='cp', return_total_data=True). # noCP, VMFC, and CP energy for a helium cluster, limited at 3 bodies; molecule mol {; He 0 0 0; --; He 0 0 4; --; He 0 4 0; --; He 4 0 0; }. # Returns the nocp energy as its first in the list; energy('CCSD(T)', bsse_type=['nocp', 'cp', 'vmfc'], max_nbody=3). API¶. class psi4.driver.driver_nbody.BsseEnum(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None)[source]¶; Available basis-set superposition error (BSSE) treatments. cp = 'cp'¶. nocp = 'nocp'¶. vmfc = 'vmfc'¶. pydantic model psi4.driver.driver_nbody.ManyBodyComputer[source]¶. Show JSON schema{; ""title"": ""ManyBodyComputer"",; ""description"": ""Base class for \""computers\"" that plan, run, and process QC tasks."",; ""type"": ""object"",; ""properties"": {; ""molecule"": {; ""title"": ""Molecule"",; ""description"": ""The target molecule, if not the last molecule defined.""; },; ""basis"": {; ""title"": ""Basis"",; ""default"": ""(auto)"",; ""type"": ""string""; },; ""method"": {; ""title""",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/nbody.html:3389,optimiz,optimization,3389,psi4manual/1.8.x/nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/nbody.html,1,['optimiz'],['optimization']
Performance,"all higher order n-body effects up to the number of fragments. embedding_charges (dict) – {1: [-0.834, 0.417, 0.417], ..}; Dictionary of atom-centered point charges. keys: 1-based index of fragment, values: list of charges for each fragment.; Add atom-centered point charges for fragments whose basis sets are not included in the computation. The nbody function computes counterpoise-corrected (CP), non-CP (noCP), and Valiron-Mayer Function Counterpoise (VMFC) interaction energies for complexes composed of arbitrary numbers of monomers.; Examples :; # Counterpoise corrected CCSD(T) energies for the Helium dimer; molecule mol {; He; --; He 1 3; }; # Calculate interaction energies only (skips monomers in monomer basis):; energy('CCSD(T)', bsse_type='cp'); # Calculate interaction and total energies, return interaction energies:; energy('CCSD(T)', bsse_type=['cp','nocp']); # Calculate and return counterpoise-corrected gradient; # Useful for e.g. CP-corrected geometry optimization; gradient('CCSD(T)', bsse_type='cp', return_total_data=True). # noCP, VMFC, and CP energy for a helium cluster, limited at 3 bodies; molecule mol {; He 0 0 0; --; He 0 0 4; --; He 0 4 0; --; He 4 0 0; }. # Returns the nocp energy as its first in the list; energy('CCSD(T)', bsse_type=['nocp', 'cp', 'vmfc'], max_nbody=3). class psi4.driver.driver_nbody.ManyBodyComputer(**data)[source]¶. Parameters. molecule (Any) – The target molecule, if not the last molecule defined.; basis (str, Default: (auto)) – ; method (str, Default: (auto)) – ; driver ({energy,gradient,hessian,properties}) – The computation driver; i.e., energy, gradient, hessian.; keywords (Dict[Any], Default: {}) – The computation keywords/options.; bsse_type ({nocp,cp,vmfc}, Default: [<BsseEnum.cp: 'cp'>]) – Requested BSSE treatments. First in list determines which interaction or total energy/gradient/Hessian returned.; nfragments (int, Default: -1) – Number of distinct fragments comprising full molecular supersystem.; max_nbody (int, Defa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/nbody.html:3384,optimiz,optimization,3384,psi4manual/1.6.x/nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/nbody.html,1,['optimiz'],['optimization']
Performance,"all interfragment modes?. Type: boolean; Default: false. FREEZE_INTRAFRAG¶. Do freeze all fragments rigid?. Type: boolean; Default: false. H_BOND_CONNECT¶. For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. INTCOS_GENERATE_EXIT¶. Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. INTERFRAG_DIST_INV¶. Do use for the stretching coordinate between fragments? Otherwise, use . Type: boolean; Default: false. INTERFRAG_HESS¶. Model Hessian to guess interfragment force constants. Type: string; Possible Values: DEFAULT, FISCHER_LIKE; Default: DEFAULT. INTERFRAG_MODE¶. When interfragment coordinates are present, use as reference points either principal axes or fixed linear combinations of atoms. Type: string; Possible Values: FIXED, INTERFRAGMENT; Default: FIXED. Misc.¶. FINAL_GEOM_WRITE¶. Do save and print the geometry from the last projected step at the end of a geometry optimization? Otherwise (and by default), save and print the previous geometry at which was computed the gradient that satisfied the convergence criteria. Type: boolean; Default: false. INTCO_FIXED_EQ_FORCE_CONSTANT¶. In constrained optimizations, for internal coordinates with user-specified equilibrium values, this is the force constant (in au) used to apply an additional force to each coordinate. If the user is only concerned to satify the desired constraint, then the user need only ensure that this value is sufficiently large. Alternatively, the user may specify this value to apply a force of a particular magnitude, in which case the given equilibrium value may or may not be reached by the optimization. Type: double; Default: 2.0. KEEP_INTCOS¶. Keep internal coordinate definition file. Type: boolean; Default: false. TEST_B¶. Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B¶. Do test derivative B matrix?. Type: boolean; Default: false. Table Of Contents. OPTKING; Optimization Algorithm; CONSECUTIVE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__optking-1.html:6013,optimiz,optimization,6013,psi4manual/4.0b2/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__optking-1.html,4,['optimiz'],['optimization']
Performance,"all pairs to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING)¶OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF)¶FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF)¶SCF — The type of guess orbitals. See Initial Guess for what the options mean and what the defaults are. Type: string; Possible Values: AUTO, CORE, GWH, SAD, SADNO, SAP, SAPGAU, HUCKEL, READ; Default: AUTO. GUESS_MIX (SCF)¶SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF)¶SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI)¶DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI)¶DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI)¶DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_glossary_options_c.html:146299,optimiz,optimization,146299,psi4manual/1.8.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_glossary_options_c.html,1,['optimiz'],['optimization']
Performance,"all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme='corl_xtpl_helgaker_2', func=cbs). """"""; pass. ## Aliases ##; complete_basis_set = cbs. # LAB: below is a piece of pre-class cbs() that didn't make the transition. it has details, so preserving for future revival; #; # #psioh = core.IOManager.shared_object(); # #psioh.set_specific_retention(psif.PSIF_SCF_MOS, True); # # projection across point groups not allowed and cbs() usually a mix of symm-enabled and symm-tol calls; # # needs to be communicated to optimize() so reset by that optstash; # core.set_local_option('SCF', 'GUESS_PERSIST', True); #; # # Run necessary computations; # for mc in JOBS:; # kwargs['name'] = mc['f_wfn']; #; # # Build string of molecule and commands that are dependent on the database; # commands = '\n'; # commands += """"""\ncore.set_global_option('BASIS', '%s')\n"""""" % (mc['f_basis']); # commands += """"""core.set_global_option('WRITER_FILE_LABEL', '%s')\n"""""" % \; # (user_writer_file_label + ('' if user_writer_file_label == '' else '-') + mc['f_wfn'].lower() + '-' + mc['f_basis'].lower()); # exec(commands); #; # psioh.set_specific_retention(psif.PSIF_SCF_MOS, False). def _expand_scheme_orders(scheme: str, basisname: List[str], basiszeta: List[int], wfnname: str, options: Dict) -> Dict[str, Dict[str, Any]]:; """"""Check that the length of *basiszeta* array matches the implied degree of; extrapolation in *scheme* name. Return a dictionary of same length as; basiszet",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html:35816,optimiz,optimize,35816,psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,3,['optimiz'],['optimize']
Performance,"aller; set of active orbitals; it is equivalent to CASSCF except without; any orbital optimization. It can be invoked via energy('fci'); with appropriate values selected for FROZEN_DOCC and; ACTIVE. For CI computations, there is no difference between; FROZEN_DOCC and RESTRICTED_DOCC, or between; FROZEN_UOCC and RESTRICTED_UOCC. There are; differences between these keywords for MCSCF: Multi-Configurational Self-Consistent-Field. Basic DETCI Keywords¶. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. FCI¶. Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. CI_MAXITER¶. Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. NUM_ROOTS¶. number of CI roots to find. Type: integer; Default: 1. ICORE¶. Specifies how to han",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/detci.html:7530,optimiz,optimized,7530,psi4manual/master/detci.html,https://psicode.org,https://psicode.org/psi4manual/master/detci.html,9,['optimiz'],['optimized']
Performance,"alling from Source; Installing from Binary; Scratch Files; Elementary Restart; Saving the Wavefunction; ~/.psi4rc File; Threading; PBS job file; Command Line Options; Environment Variables. A PSI4 Tutorial; Psithon Tutorial: Using PSI4 as an Executable; PsiAPI Tutorial: Using Psi4 as a Python Module. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. Theoretical Methods: SCF to FCI; Notes on Options; Alternate Implementations; HF: Hartree–Fock Theory; DFT: Density Functional Theory; DFT-NL; DCT: Density Cumulant Theory; DF-MP2: Density-Fitted 2nd-Order Møller–Plesset Perturbation Theory; DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; CC: Coupled Cluster Theory; FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; PSIMRCC Implementation of Mk-MRCC Theory; CI: Configuration Interaction; MCSCF: Multi-Configurational Self-Consistent-Field; SAPT: Symmetry-Adapted Perturbation Theory; F/I-SAPT: Functional Group and/or Intramolecular SAPT; ADC: Ab Initio Polarization Propagator; Scalar relativistic Hamiltonians; Geometry Optimization; Evaluation of One-Electron Properties — oeprop(); Vibrational and Thermochemical Analysis; TDSCF: Time-dependent Hartree–Fock and density-functional theory. Interfaces: Enhancing PSI4 Capabilities; Interface to NumPy; Interface to adcc by M. F. Herbst and M. Scheurer; Interface to the BrianQC GPU module by the BrianQC team; Interface to CFOUR by J. Stanton & J. Gauss; Interface to CheMPS2 by S. Wouters; Interface to CPPE by M. Scheurer; Interface to DFTD3 by S. Grimme; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to LIBEFP by I. Kaliman; Interface to ERD by N. Flocke and V. Lotrich; Interface to programs through FCHK files — fchk(); Psi4FockCI: A Gen",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/index.html:1287,Optimiz,Optimized,1287,psi4manual/1.5.0/index.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/index.html,2,['Optimiz'],"['Optimization', 'Optimized']"
Performance,"alls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp3 optimization; >>> opt('mp3'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). full_hess_every = PsiMod.get_local_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. # are we in sow/reap mode?; isSowReap = False; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'sow'):; isSowReap = True; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; isSowReap = True; optstash = OptionsState(; ['SCF', 'GUESS']). n = 1; if ('opt_iter' in kwargs):; n = kwargs['opt_iter']. while n <= PsiMod.get_global_option('GEOM_MAXITER'):; kwargs['opt_iter'] = n. # Use orbitals from previous iteration as a guess; if (n > 1) and (not isSowReap):; PsiMod.set_local_option('SCF', 'GUESS', 'READ'). # Compute the gradient; thisenergy = gradient(name, **kwargs). # S/R: Quit after getting new displacements or if forming gradient fails; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'sow'):; return 0.0; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'rea",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/driver.html:38510,optimiz,optimization,38510,psi4manual/4.0b3/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/driver.html,2,['optimiz'],"['optimization', 'optimize']"
Performance,"alls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp3 optimization; >>> opt('mp3'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). full_hess_every = PsiMod.get_local_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. n = 1; if ('opt_iter' in kwargs):; n = kwargs['opt_iter']. while n <= PsiMod.get_option('GEOM_MAXITER'):; kwargs['opt_iter'] = n. # Compute the gradient; thisenergy = gradient(name, **kwargs). # S/R: Quit after getting new displacements or if forming gradient fails; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'sow'):; return 0.0; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap') and (thisenergy == 0.0):; return 0.0. # S/R: Move opt data file from last pass into namespace for this pass; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap') and (n != 0):; PsiMod.IOManager.shared_object().set_specific_retention(1, True); PsiMod.IOManager.shared_object().set_specific_path(1, './'); if 'opt_datafile' in kwargs:; restartfile = kwargs.pop('opt_datafile'); if(Ps",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/driver.html:36150,optimiz,optimization,36150,psi4manual/4.0b2/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/driver.html,2,['optimiz'],"['optimization', 'optimize']"
Performance,"alls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). full_hess_every = PsiMod.get_local_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. # are we in sow/reap mode?; isSowReap = False; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'sow'):; isSowReap = True; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; isSowReap = True; optstash = OptionsState(; ['SCF', 'GUESS']). n = 1; if ('opt_iter' in kwargs):; n = kwargs['opt_iter']. PsiMod.get_active_molecule().update_geometry(); mol = PsiMod.get_active_molecule(); mol.update_geometry(); initial_sym = mol.schoenflies_symbol(); while n <= PsiMod.get_global_option('GEOM_MAXITER'):; mol = PsiMod.get_active_molecule(); mol.update_geometry(); current_sym = mol.schoenflies_symbol(); if initial_sym != current_sym:; raise Exception(""Point group changed! You should restart using "" +\; ""the last geometry in the output, after carefully ""+\; ""making sure all symmet",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/driver.html:50462,optimiz,optimization,50462,psi4manual/4.0b4/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html,2,['optimiz'],"['optimization', 'optimize']"
Performance,"alls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). full_hess_every = psi4.get_local_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. # are we in sow/reap mode?; isSowReap = False; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'sow'):; isSowReap = True; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; isSowReap = True; optstash = p4util.OptionsState(; ['SCF', 'GUESS']). n = 1; if ('opt_iter' in kwargs):; n = kwargs['opt_iter']. psi4.get_active_molecule().update_geometry(); mol = psi4.get_active_molecule(); mol.update_geometry(); initial_sym = mol.schoenflies_symbol(); while n <= psi4.get_global_option('GEOM_MAXITER'):; mol = psi4.get_active_molecule(); mol.update_geometry(); current_sym = mol.schoenflies_symbol(); if initial_sym != current_sym:; raise Exception(""Point group changed! You should restart using "" +\; ""the last geometry in the output, after carefully "" +\; ""making sure all s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/driver.html:50705,optimiz,optimization,50705,psi4manual/4.0b5/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/driver.html,2,['optimiz'],"['optimization', 'optimize']"
Performance,"ally symmetric space; gradient_rms = wfn.gradient().rms(); else:; gradient_rms = 1 # choose to force non-projection of rotations; translations_projection_sound, rotations_projection_sound = _energy_is_invariant(gradient_rms). project_trans = kwargs.get('project_trans', translations_projection_sound); project_rot = kwargs.get('project_rot', rotations_projection_sound). irrep = kwargs.get('irrep', None); vibinfo = vibanal_wfn(wfn, irrep=irrep, project_trans=project_trans, project_rot=project_rot); wfn.frequency_analysis = vibinfo. for postcallback in hooks['frequency']['post']:; postcallback(lowername, wfn=wfn, **kwargs). if return_wfn:; return (core.variable('CURRENT ENERGY'), wfn); else:; return core.variable('CURRENT ENERGY'). [docs]; def vibanal_wfn(; wfn: core.Wavefunction,; hess: Optional[np.ndarray] = None,; irrep: Optional[Union[int, str]] = None,; molecule=None,; project_trans: bool = True,; project_rot: bool = True,; ) -> Dict[str, np.ndarray]:; """"""Function to perform analysis of a hessian or hessian block, specifically...; calling for and printing vibrational and thermochemical analysis, setting thermochemical variables,; and writing the vibrec and normal mode files. Parameters; ----------; wfn; The wavefunction which had its Hessian computed.; hess; Hessian to analyze, if not the hessian in wfn.; (3*nat, 3*nat) non-mass-weighted Hessian in atomic units, [Eh/a0/a0].; irrep; The irrep for which frequencies are calculated. Thermochemical analysis; is skipped if this is specified (non-None),; as only one symmetry block of the hessian has been computed.; molecule : :py:class:`~psi4.core.Molecule` or qcdb.Molecule, optional; The molecule to pull information from, if not the molecule in wfn. Must at least have similar; geometry to the molecule in wfn.; project_trans; Should translations be projected in the harmonic analysis?; project_rot; Should rotations be projected in the harmonic analysis?. Returns; -------; vibinfo : ~typing.Dict[str, ~numpy.ndarray]; A dicti",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver.html:88134,perform,perform,88134,psi4manual/1.8.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver.html,3,['perform'],['perform']
Performance,"alongside; the orbital basis set definition, c.f. Inputting effective core potentials (ECPs). All; information related to the definition and number of core electrons will; automatically be detected and no further input is required to use the; ECP-containing basis set. See scf-ecp and dfmp2-ecp; for examples of computations with ECP-containing basis sets. Warning; Analytic derivatives of ECPs are not yet available. The HF and DFT derivatives are implemented in a semi-numerical scheme, where numerical ECP gradients are added to analytic SCF gradients. Analytic gradients for (DF)MP2 are not yet available, but the standard numerical gradients will work correctly. Fully analytic gradients will be implemented soon. Warning; ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the forum. External potentials and QM/MM¶; In addition to the implementation of EFP for accurate QM/MM; computations, PSI4 can perform more rudimentary QM/MM procedures via the; EXTERN keyword. The following snippet, extracted from the; extern1 test case, demonstrates its use for a TIP3P external potential:; 1; 2; 3; 4; 5Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834, 1.649232019048, 0.0, -2.356023604706); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -3.799961446760); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -0.912085762652); psi4.set_global_option_python('EXTERN', Chrgfield.extern). First a QMMM object is created, then three separate particles are added to this; object before the SCF code is told about its existence on the last line. The; calls to addCharge take the atomic charge, x coordinate, y coordinate, and; z coordinate in that order. The atomic charge is specified in atomic units,; and the coordinates always use the same units as the geometry specification in; the regular QM region. Additional MM molecules may be specified by adding; extra calls",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/scf-1.html:34149,perform,perform,34149,psi4manual/1.2.1/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/scf-1.html,4,['perform'],['perform']
Performance,"alongside; the orbital basis set definition, c.f. Inputting effective core potentials (ECPs). All; information related to the definition and number of core electrons will; automatically be detected and no further input is required to use the; ECP-containing basis set. See scf-ecp and dfmp2-ecp; for examples of computations with ECP-containing basis sets. Warning; Analytic derivatives of ECPs are not yet available. The HF and DFT derivatives are implemented in a semi-numerical scheme, where numerical ECP gradients are added to analytic SCF gradients. Analytic gradients for (DF)MP2 are not yet available, but the standard numerical gradients will work correctly. Fully analytic gradients will be implemented soon. Warning; ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the forum. External potentials and QM/MM¶; In addition to the implementation of EFP for accurate QM/MM; computations, PSI4 can perform more rudimentary QM/MM procedures via the; EXTERN keyword. The following snippet, extracted from the; extern1 test case, demonstrates its use for a TIP3P external potential:; Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834, 1.649232019048, 0.0, -2.356023604706); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -3.799961446760); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -0.912085762652); psi4.set_global_option_python('EXTERN', Chrgfield.extern). First a QMMM object is created, then three separate particles are added to this; object before the SCF code is told about its existence on the last line. The; calls to addCharge take the atomic charge, x coordinate, y coordinate, and; z coordinate in that order. The atomic charge is specified in atomic units,; and the coordinates always use the same units as the geometry specification in; the regular QM region. Additional MM molecules may be specified by adding; extra calls to addCharge",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/scf-1.html:37921,perform,perform,37921,psi4manual/1.4.0/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/scf-1.html,4,['perform'],['perform']
Performance,"als per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Alpha Eigenvalues subset. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Vector¶; Returns the requested Beta Eigenvalues subset. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. external_pot(self: psi4.core.Wavefunction) → psi4.core.ExternalPotential¶; Gets the requested external potential. finalize(self: psi4.core.HF) → None¶; Cleans up the the Wavefunction’s temporary data. finalize_energy()¶; Performs stability analysis and calls back SCF with new guess; if needed, Returns the SCF energy. This function should be called; once orbitals are ready for energy/property computations, usually; after iterations() is called. find_occupation(self: psi4.core.HF) → None¶; docstring. force_doccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of doubly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. force_soccpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of singly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. form_C(self: psi4.core.HF, shift: float = 0.0) → None¶; Forms the Orbital Matrices from the current Fock Matrices. form_D(self: psi4.core.HF) → None¶; Forms the Density Matrices from the current Orbitals Matrices. form_F(self: psi4.core.HF) → No",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.cuhf.html:20621,Perform,Performs,20621,psi4manual/1.4.0/api/psi4.core.cuhf.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.cuhf.html,5,['Perform'],['Performs']
Performance,"als() psi4.core.SuperFunctional method, [1], [2]. C_left_add() psi4.core.JK method, [1], [2]. c_omega() psi4.core.SuperFunctional method, [1], [2]. c_os_alpha() psi4.core.SuperFunctional method, [1], [2]. C_right_add() psi4.core.JK method, [1], [2]. c_ss_alpha() psi4.core.SuperFunctional method, [1], [2]. Ca() psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.SADGuess method, [1], [2]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. Ca_subset() psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. CACHELEVEL (ADC). (CCDENSITY). (CCENERGY). (CCEOM). (CCHBAR). (CCLAMBDA). (CCRESPONSE). (CCTRANSORT). (DCFT). (OCC). CACHETYPE (CCENERGY). (CCEOM). CALC_S_SQUARED (DETCI). CANONICALIZE_ACTIVE_FAVG (MCSCF). CANONICALIZE_INACTIVE_FAVG (MCSCF). CART_HESS_READ (OPTKING). Cartesian psi4.core.GaussianType attribute, [1], [2]. Cb() psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.SADGuess method, [1], [2]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. Cb_subset() psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.DFEP2Wavefunction method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. cbs(). ; extrapolation schemes. output. setting keywords. theory, [1]. cbs() in module psi4. in module psi4.driver. CBSCORRELATIONENERGY. CBSREFERENCEENERGY. CBSTOTALENERGY. CC. ; theory. CC (DETCI). CC(n-1)(n)_LCORRELATIONENERGY. CC(n-1)(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/genindex-1.html:16277,CACHE,CACHETYPE,16277,psi4manual/1.2.1/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/genindex-1.html,2,['CACHE'],['CACHETYPE']
Performance,"als, hence convergence may be significantly speeded up with ROHF or DFT orbitals.; In order to use ROHF orbitals, simply set reference rohf. For DFT orbitals, set reference uks and set dft_functional b3lyp. Of; course users can use any DFT functional available in PSI4. Methods¶; The various orbital-optimized methods supported by the OCC/DFOCC; modules in PSI4 are summarized in Table OCC OO; Methods and detailed in Table OCC; OO Capabilities. Note that while two; separate libraries OCC (conventional integrals CONV) and DFOCC; (density-fitted DF and Cholesky-decomposed CD) together provide; the methods described on this page, they are controlled through one; QC_MODULE value OCC. Without set qc_module occ,; these methods may default to implementations in other modules based on efficiency considerations. Orbital-optimized theoretical methods accessible through OCC/DFOCC¶. name; calls method; OO. omp2; orbital-optimized second-order MP perturbation theory; E/G. omp2.5; orbital-optimized average of MP2 and MP3; E/G. omp3; orbital-optimized third-order MP perturbation theory; E/G. oremp2; orbital-optimized second-order REMP hybrid PT; E/G. olccd; orbital-optimized linear coupled cluster doubles; E/G. Detailed orbital-optimized capabilities of the OCC module. “✓” runs analytically. Single underline “✓̲” is default module when QC_MODULE unspecified. Double underline “✓̳” is default algorithm type when type selector (e.g., CC_TYPE) unspecified.¶. ◻; ◻; name ↓ →; ◻; ◻. ◻; REFERENCE →; ◻; type[1] ↓ →; FREEZE_CORE[2]→. QC_MODULE=OCC Capabilities. Restricted (RHF); Unrestricted (UHF); Restricted Open (ROHF). energy(); gradient()[3]; energy(); gradient()[3]; energy(); gradient()[3]. CV; DF; CD; CV; DF; CD; CV; DF; CD; CV; DF; CD; CV; DF; CD; CV; DF; CD. A; F; A; F; A; F; A; F; A; F; A; F; A; F; A; F; A; F; A; F; A; F; A; F; A; F; A; F; A; F; A; F; A; F; A; F. omp2[4]; MP2_TYPE; ✓̲. ✓̳; ✓̳; ✓̲; ✓̲; ✓̲. ✓̳; ✓̳. ✓̲. ✓̳; ✓̳; ✓̲; ✓̲; ✓̲. ✓̳; ✓̳. ✓̲. ✓̳; ✓̳; ✓̲; ✓̲; ✓̲. ✓̳; ✓̳. omp2.5[4]",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/occ.html:10433,optimiz,optimized,10433,psi4manual/master/occ.html,https://psicode.org,https://psicode.org/psi4manual/master/occ.html,4,['optimiz'],['optimized']
Performance,"als, the choice of range-separtion parameter has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of “gap; fitting” or “optimal tuning” or simply “tuning.” The most popular tuned-LRC; approach is IP-fitting, in which the is varied until the; Koopman’s IP (the opposite of the HOMO energy) matches the true IP (the; difference between -electron and -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. Note that LRC functionals with default only capture the; dependence,. hybrid functionals only capture part of the dependence,. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. IP-tuned LRC functionals effectively pin the chemical potential at ; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by fractional particle curves. Other gap; fitting techniques involving the electron affinity or band gap are sometimes; also used. IP-fitting is found to be particularly critical for the qualitative; determination of excited state ordering in many low band-gap systems.; For dispersion-bound complexes, a very simple additive empirical dispersion; potential, based on a damped Lennard-Jones potential can often produce; remarkably accurate results with KS-DFT. This approach was championed by Grimme,; whose “-D2” approach is a de facto industry standard. The more modern “-D3”; approach is gaining popularity, and may supersede -D2 in the next few years. Minimal Input¶; Minimal input for a KS-DFT computation is a molecule block, basis set; option, and a call to energy('b3lyp') (or other valid functional na",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/dft-1.html:7682,tune,tuned,7682,psi4manual/4.0b3/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dft-1.html,10,['tune'],['tuned']
Performance,"als. Return type:; Vector. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. external_pot(self: psi4.core.Wavefunction) → psi4.core.ExternalPotential¶; Gets the requested external potential. force_occpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension, arg1: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of doubly and singly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. frequencies()¶; Returns the results of a frequency analysis. Parameters:; self – Wavefunction instance. Returns:; A dictionary of vibrational information. See psi4.driver.qcdb.vib.harmonic_analysis(). Return type:; Optional[Dict[str, ndarray]]. static from_file(wfn_data)¶; Build Wavefunction from data laid out like; to_file(). Parameters:; wfn_data (Union[str, Dict, Path]) – If a dict, use data directly. Otherwise, path-like passed to; numpy.load() to read from disk. Returns:; A deserialized Wavefunction object. Return type:; Wavefunction. frzcpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen core orbitals per irrep. frzvpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen virtual orbitals per irrep. get_array(key)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variable() instead. Changed in version 1.9: Errors rather than warn-and-forward. get_basisset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_density(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Experimental!. get_dipole_field_strength(self: psi4.core.Wavefunction) → Annotated[List[float], FixedSize(3)]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Return canonical p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/api/psi4.core.Wavefunction.html:16754,load,load,16754,psi4manual/1.9.x/api/psi4.core.Wavefunction.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/api/psi4.core.Wavefunction.html,1,['load'],['load']
Performance,"als. Return type:; Vector. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. external_pot(self: psi4.core.Wavefunction) → psi4.core.ExternalPotential¶; Gets the requested external potential. force_occpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension, arg1: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of doubly and singly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. frequencies()¶; Returns the results of a frequency analysis. Parameters:; self – Wavefunction instance. Returns:; A dictionary of vibrational information. See psi4.driver.qcdb.vib.harmonic_analysis(). Return type:; Optional[Dict[str, ndarray]]. static from_file(wfn_data)¶; Build Wavefunction from data laid out like; to_file(). Parameters:; wfn_data (Union[str, Dict, Path]) – If a dict, use data directly. Otherwise, path-like passed to; numpy.load() to read from disk. Returns:; A deserialized Wavefunction object. Return type:; Wavefunction. frzcpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen core orbitals per irrep. frzvpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen virtual orbitals per irrep. get_array(key)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variable() instead. Changed in version 1.9: Errors rather than warn-and-forward. get_basisset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_density(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Experimental!. get_dipole_field_strength(self: psi4.core.Wavefunction) → Annotated[list[float], FixedSize(3)]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Return canonical p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.core.Wavefunction.html:16603,load,load,16603,psi4manual/master/api/psi4.core.Wavefunction.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.core.Wavefunction.html,1,['load'],['load']
Performance,"als. Return type:; Vector. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. external_pot(self: psi4.core.Wavefunction) → psi4.core.ExternalPotential¶; Gets the requested external potential. force_occpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension, arg1: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of doubly and singly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. frequencies()¶; Returns the results of a frequency analysis. Parameters:; self – Wavefunction instance. Returns:; A dictionary of vibrational information. See psi4.driver.qcdb.vib.harmonic_analysis(). Return type:; Optional[Dict[str, ndarray]]. static from_file(wfn_data)¶; Build Wavefunction from data laid out like; to_file(). Parameters:; wfn_data (Union[str, Dict, Path]) – If a dict, use data directly. Otherwise, path-like passed to; numpy.load() to read from disk. Returns:; A deserialized Wavefunction object. Return type:; Wavefunction. frzcpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen core orbitals per irrep. frzvpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen virtual orbitals per irrep. get_array(key)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variable() instead. get_basisset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_density(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Experimental!. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Return canonical path to scratch file filenumber based on molecule on self. Parameters:. self (Wavefu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:16654,load,load,16654,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html,2,['load'],['load']
Performance,"als. Type: boolean; Default: false. OPDM_PRINT (DETCI); DETCI — Do print the one-particle density matrix for each root?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING); OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC); DFOCC — The orbital optimization algorithm. Presently Quasy Newton-Raphson algorithm avaliable with several Hessian options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC); DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC); DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER opti",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:176732,optimiz,optimization,176732,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimization']
Performance,"als. Type: integer; Default: 50. MO_READ¶. Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_STEP_MAX¶. Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE¶. Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MP2_OS_SCALE¶. Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 6.0. MP2_SOS_SCALE¶. Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. MP2_SOS_SCALE2¶. Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.2. MP2_SS_SCALE¶. Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OCC_ORBS_PRINT¶. Do print OCC orbital energies?. Type: boolean; Default: false. OEPROP¶. Do compute one electron properties?. Type: boolean; Default: false. OPT_METHOD¶. The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. ORB_OPT¶. Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER¶. The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Typ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__occ-1.html:5200,optimiz,optimization,5200,psi4manual/1.4.0/autodir_options_c/module__occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__occ-1.html,9,['optimiz'],['optimization']
Performance,"alse)¶; Converts a PSI4 Matrix or Vector to a NumPy array. Either copies the; data or simply constructs a view. Parameters:. matrix (Union[Matrix, Vector]) – Pointers to which Psi4 core class should be used in the construction.; copy (bool) – Copy the data if True, return a view otherwise; dense (bool) – Converts irrepped Psi4 objects to diagonally blocked dense arrays if; True. Returns a list of arrays otherwise. Returns:; Returns a single or list of NumPy arrays depending on options. Return type:; ndarray or List[ndarray]. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.core.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. Parameters:; self (Union[Matrix, Vector]) – Matrix or Vector instance. Returns:; Serialized dictionary with keys:. shape; data : List[str]; type : {‘matrix’, ‘vector’}. Return type:; Dict[str, Any]. vector_dot(self: psi4.core.Vector, other: psi4.core.Vector) → float¶; Take the dot product of two vectors. zero(self: psi4.core.Vector) → None¶; Zeros the vector. table of contents. Vector; Vector; Vector.name; Vector.np; Vector.nph; Vector.shape; Vector.add(); Vector.array_interface(); Vector.axpby(); Vector.axpy(); Vector.clone(); Vector.copy(); Vector.dim(); Vector.dimpi(); Vector.from_array(); Vector.from_list(); Vector.from_serial(); Vector.get(); Vector.get_block(); Vector.init(); Vector.load(); Vector.nirrep(); Vector.np_read(); Vector.np_write(); Vector.print_out(); Vector.save(); Vector.scale(); Vector.set(); Vector.set_block(); Vector.to_array(); Vector.to_serial(); Vector.vector_dot(); Vector.zero(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. PSI4 API: Linking C++ and Python; Vector. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.core.Vector.html:8371,load,load,8371,psi4manual/master/api/psi4.core.Vector.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.core.Vector.html,1,['load'],['load']
Performance,"alse; try:; from mdi import (; MDI_DOUBLE,; MDI_INT,; MDI_Accept_Communicator,; MDI_Init,; MDI_MPI_get_world_comm,; MDI_Recv,; MDI_Recv_Command,; MDI_Register_Command,; MDI_Register_Node,; MDI_Send,; ); _have_mdi = True; except ImportError:; pass. try:; from mpi4py import MPI; use_mpi4py = True; except ImportError:; use_mpi4py = False. class MDIEngine():; def __init__(self, scf_method: str, **kwargs):; """""" Initialize an MDIEngine object for communication with MDI (MolSSI driver interface). Parameters; ----------; scf_method; Method (SCF or post-SCF) used when calculating energies or gradients.; molecule; The target molecule, if not the last molecule defined.; kwargs; Any additional arguments to pass to :func:`psi4.driver.energy` or; :func:`psi4.driver.gradient` computation. """""". # Method used when the SCF command is received; self.scf_method = scf_method. # Additional arguments for energy, gradient, or optimization calculations; self.kwargs = kwargs. # Molecule all MDI operations are performed on; input_molecule = kwargs.pop('molecule', psi4.core.get_active_molecule()); _ini_cart = getattr(input_molecule, ""_initial_cartesian"", None); self.molecule = input_molecule.clone(); if _ini_cart:; self.molecule._initial_cartesian = _ini_cart; psi4.core.set_active_molecule(self.molecule). # Most recent SCF energy; self.energy = 0.0. # Variables used when MDI sets a lattice of point charges; self.nlattice = 0 # number of lattice point charges; self.clattice = [] # list of lattice coordinates; self.lattice = [] # list of lattice charges; self.lattice_field = psi4.QMMMbohr() # Psi4 chargefield. # MPI variables; self.mpi_world = None; self.world_rank = 0. # Flag for if a lattice of point charges has been set; self.set_lattice = False. # Get correct intra-code MPI communicator; if use_mpi4py:; self.mpi_world = MDI_MPI_get_world_comm(); self.world_rank = self.mpi_world.Get_rank(). # Psi4 does not currently support multiple MPI ranks; if self.mpi_world.Get_size() != 1:; MPI.COMM_WORLD",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/mdi_engine.html:2366,perform,performed,2366,psi4manual/1.9.x/_modules/psi4/driver/mdi_engine.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/mdi_engine.html,2,['perform'],['performed']
Performance,"aluation of SAPT \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_INTERFRAG (OPTKING); OPTKING — Do freeze all interfragment modes?. Type: boolean; Default: false. FREEZE_INTRAFRAG (OPTKING); OPTKING — Do freeze all fragments rigid?. Type: boolean; Default: false. FROZEN_BEND (OPTKING); OPTKING — Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN (OPTKING); OPTKING — Specify atom and X, XY, XYZ, … to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS); GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS); GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING); OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM); CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:133925,optimiz,optimized,133925,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,4,['optimiz'],['optimized']
Performance,"alue *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); raise TestComparisonError(message); success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if(expected != computed):; message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); raise TestComparisonError(message); success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); raise TestComparisonError(message); if (expected.symmetry() != computed.symmetry()):; message = (""\t%s has %d symmetry, but %s has %d\n."" % (expected.name(), expected.symmetry(), computed.name(), computed.symmetry())); raise TestComparisonError(message); nirreps = expected.nirrep(); symmetry = expected.symmetry(); for irrep in range(nirreps):; if(expected.rows(irrep) != computed.rows(irrep)):; message = (""\t%s has %d rows in irrep %d, but %s has %d\n."" % (expected.name(), expected.rows(irrep), irrep, computed.name(), computed.rows(irrep))); raise TestComparisonError(message); if(expected.cols(irrep ^ symmetry) != computed.cols(irrep ^ symmetry)):; message = (""\t%s has %d columns in irrep, but %s has %d\n."" % (expected.name(),",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html:5327,Perform,Performs,5327,psi4manual/1.0.0/_modules/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html,1,['Perform'],['Performs']
Performance,"alue of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI); DETCI — Do calculate the value of for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:10372,CACHE,CACHELEVEL,10372,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,4,"['CACHE', 'cache']","['CACHELEVEL', 'cache']"
Performance,"alue. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC¶. Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP¶. Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD¶. Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO¶. Specifies whether gauge-including atomic orbitals are used (ON) or not (",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:30669,optimiz,optimization,30669,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,17,['optimiz'],['optimization']
Performance,"alue. Type: double; Default: 1.0/3.0. MP3L_ENERGY¶. Do compute mp3l energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE COMPUTE” option. Type: boolean; Default: false. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OMP3_ORBS_PRINT¶. Do print OMP3 orbital energies?. Type: boolean; Default: false. OPT_METHOD¶. The optimization algorithm. Type: string; Possible Values: MSD, DIIS; Default: MSD. ORTH_TYPE¶. The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. RMS_MOGRAD_CONVERGENCE¶. Convergence criterion for RMS orbital gradient. Type: conv double; Default: 1e-5. R_CONVERGENCE¶. Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. SCS_TYPE¶. Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SOS_SCALE¶. Spin-opposite scaling (SOS) value for SCF orbitals. Type: double; Default: 1.3. SOS_SCALE2¶. Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. SOS_TYPE¶. Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. TPDM_ABCD_TYPE¶. How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algoritm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default: DIRECT. Table Of Contents. OMP3; General; CACHELEVEL; CC_MAXITER; CUTOFF; DIIS_MAX_VECS; DO_LEVEL_SHIFT; DO_SCS; DO_SOS; E3_SCALE; E_CONVERGENCE; HESS_TYPE; LEVEL_SHIFT; LINEQ_SOLVER; MAX_MOGRAD_CONVERGENCE; MO_MAXITER; MO_READ; MO_STEP_MAX; MO_WRITE; MP2_OS_SCALE; MP2_SS_SCALE; MP3L_ENERGY; NAT_ORBS; OMP3_ORBS_PRINT; OPT_METHOD; ORTH_TYPE; RMS_MOGRAD_CONVERGENCE; R_CONVERGENCE; SCS_TYPE; SOS_SCALE; SOS_SCALE2; SOS_TYPE; TPDM_ABCD_TYPE. Previous topic; SOS_TYPE; Next topic; CACHELEVEL; This Page. Show Source. Qui",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__omp3-1.html:3880,optimiz,optimized-,3880,psi4manual/4.0b3/autodir_options_c/module__omp3-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__omp3-1.html,2,['optimiz'],['optimized-']
Performance,"alues: DEFAULT, FISCHER_LIKE; Default: DEFAULT. INTERFRAG_MODE¶. When interfragment coordinates are present, use as reference points either principal axes or fixed linear combinations of atoms. Type: string; Possible Values: FIXED, INTERFRAGMENT; Default: FIXED. Misc.¶. FINAL_GEOM_WRITE¶. Do save and print the geometry from the last projected step at the end of a geometry optimization? Otherwise (and by default), save and print the previous geometry at which was computed the gradient that satisfied the convergence criteria. Type: boolean; Default: false. INTCO_FIXED_EQ_FORCE_CONSTANT¶. In constrained optimizations, for internal coordinates with user-specified equilibrium values, this is the force constant (in au) used to apply an additional force to each coordinate. If the user is only concerned to satify the desired constraint, then the user need only ensure that this value is sufficiently large. Alternatively, the user may specify this value to apply a force of a particular magnitude, in which case the given equilibrium value may or may not be reached by the optimization. Type: double; Default: 2.0. KEEP_INTCOS¶. Keep internal coordinate definition file. Type: boolean; Default: false. LINESEARCH_STATIC_MAX¶. If doing a static line search, this fixes the largest step, whose largest change in an internal coordinate is set to this value (in au). Type: double; Default: 0.100. LINESEARCH_STATIC_MIN¶. If doing a static line search, this fixes the shortest step, whose largest change in an internal coordinate is set to this value (in au). Type: double; Default: 0.001. LINESEARCH_STATIC_N¶. If doing a static line search, scan this many points. Type: integer; Default: 8. TEST_B¶. Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B¶. Do test derivative B matrix?. Type: boolean; Default: false. Table Of Contents. OPTKING; Optimization Algorithm; CONSECUTIVE_BACKSTEPS; FROZEN_BEND; FROZEN_DIHEDRAL; FROZEN_DISTANCE; GEOM_MAXITER; INTERFRAG_STEP_LIMIT; INTRAFRAG_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__optking-1.html:7354,optimiz,optimization,7354,psi4manual/4.0b4/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__optking-1.html,2,['optimiz'],['optimization']
Performance,"alues: DEFAULT, FISCHER_LIKE; Default: DEFAULT. INTERFRAG_MODE¶. When interfragment coordinates are present, use as reference points either principal axes or fixed linear combinations of atoms. Type: string; Possible Values: FIXED, INTERFRAGMENT; Default: FIXED. Misc.¶. FINAL_GEOM_WRITE¶. Do save and print the geometry from the last projected step at the end of a geometry optimization? Otherwise (and by default), save and print the previous geometry at which was computed the gradient that satisfied the convergence criteria. Type: boolean; Default: false. INTCO_FIXED_EQ_FORCE_CONSTANT¶. In constrained optimizations, for internal coordinates with user-specified equilibrium values, this is the force constant (in au) used to apply an additional force to each coordinate. If the user is only concerned to satify the desired constraint, then the user need only ensure that this value is sufficiently large. Alternatively, the user may specify this value to apply a force of a particular magnitude, in which case the given equilibrium value may or may not be reached by the optimization. Type: double; Default: 2.0. KEEP_INTCOS¶. Keep internal coordinate definition file. Type: boolean; Default: false. TEST_B¶. Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B¶. Do test derivative B matrix?. Type: boolean; Default: false. Table Of Contents. OPTKING; Optimization Algorithm; CONSECUTIVE_BACKSTEPS; GEOM_MAXITER; INTERFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT_MAX; INTRAFRAG_STEP_LIMIT_MIN; IRC_DIRECTION; IRC_STEP_SIZE; IRC_STOP; OPT_TYPE; RFO_FOLLOW_ROOT; RFO_ROOT; STEP_TYPE. Convergence Control; FLEXIBLE_G_CONVERGENCE; G_CONVERGENCE; MAX_DISP_G_CONVERGENCE; MAX_ENERGY_G_CONVERGENCE; MAX_FORCE_G_CONVERGENCE; RMS_DISP_G_CONVERGENCE; RMS_FORCE_G_CONVERGENCE. Hessian Update; CART_HESS_READ; FULL_HESS_EVERY; HESS_UPDATE; HESS_UPDATE_LIMIT; HESS_UPDATE_LIMIT_MAX; HESS_UPDATE_LIMIT_SCALE; HESS_UPDATE_USE_LAST; INTRAFRAG_HESS. Fragment/Internal Coordinate C",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__optking-1.html:6715,optimiz,optimization,6715,psi4manual/4.0b2/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__optking-1.html,4,['optimiz'],['optimization']
Performance,"alues: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. INTCOS_GENERATE_EXIT¶. Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. Optimizing Minima¶; First, define the molecule and basis in the input.; 1; 2; 3; 4; 5; 6; 7molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; 1optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; 1; 2set step_type nr; optimize('scf'). Optimize using energy points instead of gradients:; 1optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; 1; 2set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:; 1; 2; 3; 4; 5; 6; 7set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:; 1; 2set full_hess_every 1; optimize('scf'). Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/optking-1.html:4379,Optimiz,Optimize,4379,psi4manual/1.2.1/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/optking-1.html,4,['Optimiz'],['Optimize']
Performance,"alysis¶; The above examples were simple single-point energy computations (as specified by the psi4.energy() API function). Of course there are other kinds of computations to perform, such as geometry optimizations and vibrational frequency computations. These can be specified by replacing psi4.energy() API with; psi4.optimize() API or psi4.frequency() API, respectively.; Let’s take a look at an example of optimizing the H\(_2\)O molecule using Hartree-Fock with a cc-pVDZ basis set.; Now, here comes the real beauty of running Psi4 interactively: above, when we computed the energy of H\(_2\)O with HF/cc-pVDZ, we defined the Psi4 molecule object h2o. Since we’re still in the Python shell, as long as you executed that block of code, we can reuse the h2o molecule object in our optimization without redefining it, by adding the molecule=h2o argument to the psi4.optimize(); API function:. [5]:. psi4.set_options({'reference': 'rhf'}); psi4.optimize('scf/cc-pvdz', molecule=h2o). Optimizer: Optimization complete!. [5]:. -76.02703272937504. This should perform a series of gradient computations. The gradient points which way is downhill in energy, and the optimizer then modifies the geometry to follow the gradient. After a few cycles, the geometry should converge with a message like Optimization complete!. As indicated in the following table (printed by the optimizer at the end of the computation and grep-able with ~), the energy decreases with each step, and the maximum force on each atom also decreases with each step (in; principle, these numbers could increase in some iterations, but here they do not).; --------------------------------------------------------------------------------------------------------------- ~  Step         Total Energy             Delta E       MAX Force       RMS Force        MAX Disp        RMS Disp  ~ --------------------------------------------------------------------------------------------------------------- ~     1     -76.026632734908    -76.0266",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/psiapi-1.html:7422,Optimiz,Optimizer,7422,psi4manual/1.3.2/psiapi-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psiapi-1.html,18,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,"alysis¶; The above examples were simple single-point energy computations (as specified by the psi4.energy() API function). Of course there are other kinds of computations to perform, such as geometry optimizations and vibrational frequency computations. These can be specified by replacing psi4.energy() API with; psi4.optimize() API or psi4.frequency() API, respectively.; Let’s take a look at an example of optimizing the H\(_2\)O molecule using Hartree-Fock with a cc-pVDZ basis set.; Now, here comes the real beauty of running Psi4 interactively: above, when we computed the energy of H\(_2\)O with HF/cc-pVDZ, we defined the Psi4 molecule object h2o. Since we’re still in the Python shell, as long as you executed that block of code, we can reuse the h2o molecule object in our optimization without redefining it, by adding the molecule=h2o argument to the psi4.optimize(); API function:. [5]:. psi4.set_options({'reference': 'rhf'}); psi4.optimize('scf/cc-pvdz', molecule=h2o). Optimizer: Optimization complete!. [5]:. -76.02703272937504. This should perform a series of gradient computations. The gradient points which way is downhill in energy, and the optimizer then modifies the geometry to follow the gradient. After a few cycles, the geometry should converge with a message like Optimization complete!. As indicated in the following table (printed by the optimizer at the end of the computation and grep-able with ~), the energy decreases with each step, and the maximum force on each atom also decreases with each step; (in principle, these numbers could increase in some iterations, but here they do not).; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734908 -76.026632734908 0.01523518 0.01245755 0.02742222 0.02277530 ~; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/psiapi.html:7303,Optimiz,Optimizer,7303,psi4manual/master/psiapi.html,https://psicode.org,https://psicode.org/psi4manual/master/psiapi.html,4,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,"ame, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_olccd(name, **kwargs):; """"""Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CC_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ. func = None; if reference in ['RHF', 'UHF', 'ROHF', 'RKS', 'UKS']:; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc. if func is None:; raise ManagedMethodError(['select_olccd', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_olccd_gradient(name, **kwargs):; """"""Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CC_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ. func = None; if reference in ['RHF', 'UHF', 'ROHF', 'RKS', 'UKS']:; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient. if func is None:; raise ManagedMethodError(['select_olccd_gradient', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_fnoccsd(name, **kwargs):; """"""Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CC_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html:17269,perform,performance,17269,psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html,3,['perform'],['performance']
Performance,"ame, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). select_ccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD energy call; and directing to specified or best-performance default modules. select_ccsd_at_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. select_ccsd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD gradient call; and directing to specified or best-performance default modules. select_ccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) energy call; and directing to specified or best-performance default modules. select_ccsd_t__gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. select_cisd(name, **kwargs)[source]¶; Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. select_fnoccsd(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD energy call; and directing to specified or best-performance default modules. select_fnoccsd_t_(name, **kwargs)[source]¶; Function selecting the algorithm for a FNO-CCSD(T) energy call; and directing to specified or best-performance default modules. select_lccd(name, **kwargs)[source]¶; Function selecting the algorithm for a LCCD energy call; and directing to specified or best-performance default modules. select_lccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:166915,perform,performance,166915,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['perform'],['performance']
Performance,"ame, *, debug=False, strict_label=True)[source]; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns; None. Parameters. wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file; filename (str) – destination file name for FCHK file; debug (bool) – returns a dictionary to aid with debugging; strict_label (bool) – If true set a density label compliant with what Gaussian would write. A warning will be printed if this is not possible.; Otherwise set the density label according to the method name. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; PSI4 will try to find the right one for the current calculation. If strict_label=False the PSI4 method name will be used as label.; Not all theory modules in PSI4 are compatible with the FCHK writer.; A warning will be printed if a theory module is not supported.; Caution! For orbital-optimized correlated methods (e.g. DCT, OMP2) the ‘Orbital Energy’ field contains ambiguous data. Examples. Parameters. wfn (psi4.core.Wavefunction) – ; filename (str) – ; debug (bool) – ; strict_label (bool) – . >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] FCHK file for correlated densities; >>> E, wfn = gradient('ccsd', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] Write FCHK file with non-standard label.; >>> E, wfn = gradient('mp2.5', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk', strict_label=False). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to programs through FCHK files — fchk(). © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/fchk.html:2569,optimiz,optimized,2569,psi4manual/1.6.x/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/fchk.html,1,['optimiz'],['optimized']
Performance,"ame; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.optimize-1.html:13138,perform,perform,13138,psi4manual/1.4.0/api/psi4.driver.optimize-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.optimize-1.html,16,"['Optimiz', 'optimiz', 'perform']","['OptimizationConvergenceError', 'optimization', 'optimize', 'perform']"
Performance,"ame; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.driver.optimize-1.html:13138,perform,perform,13138,psi4manual/1.5.0/api/psi4.driver.optimize-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.driver.optimize-1.html,16,"['Optimiz', 'optimiz', 'perform']","['OptimizationConvergenceError', 'optimization', 'optimize', 'perform']"
Performance,"amespace() + \; '.cfour.' + str(random.randint(0, 99999)); if not os.path.exists(cfour_tmpdir):; os.mkdir(cfour_tmpdir); os.chdir(cfour_tmpdir). # Find environment by merging PSIPATH and PATH environment variables; lenv = {; 'PATH': ':'.join([os.path.abspath(x) for x in os.environ.get('PSIPATH', '').split(':') if x != '']) + \; ':' + os.environ.get('PATH') + \; ':' + psi4.Process.environment[""PSIDATADIR""] + '/basis' + \; ':' + psi4.psi_top_srcdir() + '/share/basis',; 'LD_LIBRARY_PATH': os.environ.get('LD_LIBRARY_PATH'); }. if 'path' in kwargs:; lenv['PATH'] = kwargs['path'] + ':' + lenv['PATH']; # Filter out None values as subprocess will fault on them; lenv = {k: v for k, v in lenv.items() if v is not None}. # Load the GENBAS file; genbas_path = qcdb.search_file('GENBAS', lenv['PATH']); if genbas_path:; try:; shutil.copy2(genbas_path, psioh.get_default_path() + cfour_tmpdir); except shutil.Error: # should only fail if src and dest equivalent; pass; psi4.print_out(""\n GENBAS loaded from %s\n"" % (genbas_path)); psi4.print_out("" CFOUR to be run from %s\n"" % (psioh.get_default_path() + cfour_tmpdir)); else:; message = """"""; GENBAS file for CFOUR interface not found. Either:; [1] Supply a GENBAS by placing it in PATH or PSIPATH; [1a] Use cfour {} block with molecule and basis directives.; [1b] Use molecule {} block and CFOUR_BASIS keyword.; [2] Allow Psi4's internal basis sets to convert to GENBAS; [2a] Use molecule {} block and BASIS keyword. """"""; psi4.print_out(message); psi4.print_out(' Search path that was tried:\n'); psi4.print_out(lenv['PATH'].replace(':', ', ')). # Generate the ZMAT input file in scratch; if 'path' in kwargs and os.path.isfile('ZMAT'):; psi4.print_out("" ZMAT loaded from %s\n"" % (psioh.get_default_path() + kwargs['path'] + '/ZMAT')); else:; with open('ZMAT', 'w') as cfour_infile:; cfour_infile.write(write_zmat(lowername, dertype)). internal_p4c4_info['zmat'] = open('ZMAT', 'r').read(); #psi4.print_out('\n====== Begin ZMAT input for CFOUR ======\n')",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/procedures/interface_cfour.html:5785,load,loaded,5785,psi4manual/1.0.0/_modules/procedures/interface_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/procedures/interface_cfour.html,1,['load'],['loaded']
Performance,"ample of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. nbo; Generation of NBO file. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. mbis-5; MBIS calculation on ZnO. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. fd-gradient; SCF STO-3G finite-difference tests. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. options1; check all variety of options parsing. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. isapt-charged; This test case shows an example of running the I-SAPT0/aug-cc-pVDZ com",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:37903,optimiz,optimization,37903,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,4,['optimiz'],"['optimization', 'optimized']"
Performance,"ample, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS¶. Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS¶. Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION¶. Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE¶. Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD¶. Specifies the strength of a Fermi-Contact pertubation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the FC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:21319,optimiz,optimizations,21319,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,4,['optimiz'],"['optimizations', 'optimizer']"
Performance,"ample, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS¶. Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS¶. Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION¶. Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE¶. Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD¶. Specifies the strength of a Fermi-Contact perturbation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the F",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html:21469,optimiz,optimizations,21469,psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,4,['optimiz'],"['optimizations', 'optimizer']"
Performance,"amples of computations with ECP-containing basis sets. Warning; Prior to May 2022, v1.6, Psi4 used a built-in ECP code. Analytic derivatives of ECPs were not available. The HF and DFT derivatives were implemented in a semi-numerical scheme, where numerical ECP gradients were added to analytic SCF gradients. For post-SCF methods, the entire gradient computation needed to be run as finite difference of energies. Warning; As of May 2022, v1.6, Psi4 uses the LibECPInt library, and analytic derivatives and Hessians of ECPs are available. Analytic derivatives of molecular systems including ECPs should be available whenever the method has analytic derivatives, but these have so far only been verified for HF and DFT. Warning; ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the forum. External potentials and QM/MM¶; In addition to the implementation of EFP for accurate QM/MM; computations, PSI4 can perform more rudimentary QM/MM procedures via the; EXTERN keyword. The following snippet, extracted from the; extern1 test case, demonstrates its use for a TIP3P external potential:; import numpy as np; external_potentials = [; [-0.834, np.array([1.649232019048,0.0,-2.356023604706]) / psi_bohr2angstroms],; [ 0.417, np.array([0.544757019107,0.0,-3.799961446760]) / psi_bohr2angstroms],; [ 0.417, np.array([0.544757019107,0.0,-0.912085762652]) / psi_bohr2angstroms]]. gradient('scf', external_potentials=external_potentials). The external_potentials array has three rows for three separate; particles, and it is passed to the SCF code on the last line. The; rows are composed of the atomic charge, x coordinate, y coordinate,; and z coordinate in that order. The atomic charge and coordinates are; specified in atomic units, [e] and [a0]. Add as many particle rows as; needed to describe the full MM region. Caution; In PSI4 previous to Spring 2022 and v1.6, setting an; exte",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/scf.html:53704,perform,perform,53704,psi4manual/master/scf.html,https://psicode.org,https://psicode.org/psi4manual/master/scf.html,5,['perform'],['perform']
Performance,"amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT); CCTRANSORT — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache u",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:9615,cache,cache,9615,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['cache'],['cache']
Performance,"amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CPHF); CPHF — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (STABILITY); STABILITY —. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Se",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html:9490,cache,cache,9490,psi4manual/4.0b5/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html,2,['cache'],['cache']
Performance,"amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (MP2); MP2 — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (OMP2); OMP2 — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (OMP3); OMP3 — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all q",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:9044,cache,cache,9044,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['cache'],['cache']
Performance,"amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (STABILITY); STABILITY —. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A v",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:9685,cache,cache,9685,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,2,['cache'],['cache']
Performance,"an += 1. # Take step. communicate to/from/within optking through legacy_molecule; core.set_legacy_molecule(moleculeclone); optking_rval = core.optking(); moleculeclone = core.get_legacy_molecule(); moleculeclone.update_geometry(); if optking_rval == core.PsiReturnType.EndLoop:; # if this is the end of an IRC run, set wfn, energy, and molecule to that; # of the last optimized IRC point; if core.get_option('OPTKING', 'OPT_TYPE') == 'IRC':; thisenergy = old_thisenergy; print('Optimizer: Optimization complete!'); core.print_out('\n Final optimized geometry and variables:\n'); moleculeclone.print_in_input_format(); # Mark the optimization data as disposable now that the optimization is done.; core.IOManager.shared_object().set_specific_retention(1, False); # Check if user wants to see the intcos; if so, don't delete them.; if core.get_option('OPTKING', 'INTCOS_GENERATE_EXIT') == False:; if core.get_option('OPTKING', 'KEEP_INTCOS') == False:; core.opt_clean(); # Changing environment to optimized geometry as expected by user; molecule.set_geometry(moleculeclone.geometry()); for postcallback in hooks['optimize']['post']:; postcallback(lowername, wfn=wfn, **kwargs); core.clean(). # Cleanup binary file 1; if custom_gradient or ('/' in lowername) or kwargs.get('bsse_type', None) is not None:; core.IOManager.shared_object().set_specific_retention(1, False). optstash.restore(). if return_history:; history = {; 'energy': step_energies,; 'gradient': step_gradients,; 'coordinates': step_coordinates,; }. if return_wfn and return_history:; return (thisenergy, wfn, history); elif return_wfn and not return_history:; return (thisenergy, wfn); elif return_history and not return_wfn:; return (thisenergy, history); else:; return thisenergy. elif optking_rval == core.PsiReturnType.Failure:; print('Optimizer: Optimization failed!'); # Mark the optimization data as disposable now that the optimization is done.; core.IOManager.shared_object().set_specific_retention(1, False); if (core.get_opti",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html:59982,optimiz,optimized,59982,psi4manual/1.3.2/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html,3,['optimiz'],['optimized']
Performance,"an be accessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file.; __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section). doc.rst — Documentation file. Place in this file any notes,; equations, warnings to users, todo lists, etc.. Plain text is fine,; though reStructuredText is the ultimate goal. Remove the .. comment; text and build Sphinx documentation for samples of linking keywords,; sections, and math. This file is absorbed into the PSI4; documentation, along with any docstrings to Python functions, and the C++; keywords block in the myplugin.cc file. See Updating the Users’ and Programmers’ Manual; for building documentation. Please note that pure virtual functions in a plugin may cause undefined symbols errors when; the plugin is loaded.; To create a purely Python plugin, create a new plugin directory, then; remove the Makefile and myplugin.cc files and; erase the shared object loading portion of __init__.py. Create as many .py; files as necessary (registering each one in __init__.py), use; input.dat as a model for loading the plugin, no recompile ever; necessary. table of contents. Creating New Plugins; Modular Approach to Development; Creating a New Plugin; Creating a New Plugin Using a Conda Pre-compiled Binary; Files in a Plugin Directory. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Adding New Code to PSI4; Creating New Plugins. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/plugins.html:7967,load,loaded,7967,psi4manual/1.8.x/plugins.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/plugins.html,3,['load'],"['loaded', 'loading']"
Performance,"an be accessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file.; __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section). doc.rst — Documentation file. Place in this file any notes,; equations, warnings to users, todo lists, etc.. Plain text is fine,; though reStructuredText is the ultimate goal. Remove the .. comment; text and build Sphinx documentation for samples of linking keywords,; sections, and math. This file is absorbed into the PSI4; documentation, along with any docstrings to Python functions, and the C++; keywords block in the myplugin.cc file. See Updating the Users’ and Programmers’ Manual; for building documentation. Please note that pure virtual functions in a plugin may cause undefined symbols errors when; the plugin is loaded.; To create a purely Python plugin, create a new plugin directory, then; remove the Makefile and myplugin.cc files and; erase the shared object loading portion of __init__.py. Create as many .py; files as necessary (registering each one in __init__.py), use; input.dat as a model for loading the plugin, no recompile ever; necessary. table of contents. Creating New Plugins; Modular Approach to Development; Creating a New Plugin; Creating a New Plugin Using a Conda Pre-compiled Binary; Files in a Plugin Directory. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Adding New Code to PSI4; Creating New Plugins. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/plugins.html:7967,load,loaded,7967,psi4manual/1.9.x/plugins.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/plugins.html,3,['load'],"['loaded', 'loading']"
Performance,"an for whether the keyword arg1 has been touched in the global scope, by either user or code. has_local_option_changed((arg0: str, ...); Returns boolean for whether the keyword arg2 has been touched in the scope of the specified module arg1, by either user or code. has_option_changed((arg0: str, ...); Returns boolean for whether the option arg2 has been touched either locally to the specified module arg1 or globally, by either user or code. has_variable((arg0: str) -> bool); Returns true if the PSI variable exists/is set. initialize(() -> bool). legacy_wavefunction(() -> psi::Wavefunction); Returns the current legacy_wavefunction object from the most recent computation. libfock(...); Runs a CPHF calculation, using libfock. mcscf(...); Runs the MCSCF code, (N.B. mrcc_generate_input(...); Generates an input for Kallay’s MRCC code. mrcc_load_densities(...); Reads in the density matrices from Kallay’s MRCC code. occ(...); Runs the orbital optimized CC codes. opt_clean(() -> None); Cleans up the optimizer’s scratch files. optking(() -> int); Runs the geometry optimization / frequency analysis code. outfile_name(() -> str); Returns the name of the output file. plugin((arg0: str, ...); Call the plugin of name arg0. plugin_close((arg0: str) -> None); Close the plugin of name arg0. plugin_close_all(() -> None); Close all open plugins. plugin_load((arg0: str) -> int); Load the plugin of name arg0. prepare_options_for_module((arg0: str) -> None); Sets the options module up to return options pertaining to the named argument (e.g. print_global_options(() -> None); Prints the currently set global (all modules) options to the output file. print_options(() -> None); Prints the currently set options (to the output file) for the current module. print_out((arg0: str) -> None); Prints a string (using sprintf-like notation) to the output file. print_variables(() -> None); Prints all PSI variables that have been set internally. psi_top_srcdir(() -> str); Returns the location of the sourc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/psi4api-1.html:168328,optimiz,optimizer,168328,psi4manual/1.1.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/psi4api-1.html,2,['optimiz'],['optimizer']
Performance,"an initial job with 'sow' and follow instructions in its output file.; For maximum flexibility, return_wfn is always on in 'reap' mode. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or string) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) [manual]. Examples:. 1; 2>>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). 1; 2; 3; 4; 5>>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). 1; 2; 3; 4; 5>>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). 1; 2; 3>>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.driver.freq-1.html:3296,optimiz,optimize,3296,psi4manual/1.2.1/api/psi4.driver.freq-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.driver.freq-1.html,6,['optimiz'],['optimize']
Performance,"an only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. Optimizing Minima¶; First, define the molecule and basis in the input.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; set step_type nr; optimize('scf'). Optimize using finite differences of energies instead of gradients:; optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:. set full_hess_every 1; optimize('scf'). import optking. Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_EVERY keyword. Transition States and Reaction Paths¶. Calculate a starting Hessian and optimize the “transition state” of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails):; molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_typ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/optking.html:4225,optimiz,optimize,4225,psi4manual/1.7.x/optking.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/optking.html,3,['optimiz'],['optimize']
Performance,"an only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. Optimizing Minima¶; First, define the molecule and basis in the input.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; set step_type nr; optimize('scf'). Optimize using finite differences of energies instead of gradients:; optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:. set full_hess_every 1; optimize('scf'). import optking. Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_EVERY keyword. Transition States and Reaction Paths¶; Optking currently has two transition state algorithms. The current default is the; newer RS_I_RFO algorithm [Besalu:1998:265] . The old algorithm can be used by setting; STEP_TYPE P_RFO for OPT_TYPE TS. Calculate a starting Hessian and optimize the “transition state” of; linear wat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/optking.html:4244,optimiz,optimize,4244,psi4manual/master/optking.html,https://psicode.org,https://psicode.org/psi4manual/master/optking.html,1,['optimiz'],['optimize']
Performance,"an() or fail. getSDF()[source]¶; Function to return the SDF (structure-data file) of the PubChem object. getXYZFile()[source]¶; Function to obtain preferentially a molecule string; through getCartesian() or a query string otherwise. name()[source]¶; Function to return the IUPAC name of the PubChem object. getPubChemResults(name)[source]¶; Function to query the PubChem database for molecules matching the; input string. Builds a PubChem object if found. psiexceptions¶; Module with non-generic exceptions classes. exception PsiException[source]¶; Error class for Psi. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. frac¶. frac_nuke(mol, **kwargs)[source]¶. frac_traverse(mol, **kwargs)[source]¶. ip_fitting(mol, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the PsiMod.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mol, ghost=True, cluster_size=0)[source]¶; Function to return all subclusters of the molecule mol of; real size cluster_size and all other atoms ghosted if ghost; equals true, all other atoms discarded if ghost is false. If; cluster_size = 0, returns all possible combinations of cluster size. geometry(geom, name='default')[source]¶; Function to create a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_driver-1.html:6220,Perform,Perform,6220,psi4manual/4.0b4/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_driver-1.html,2,['Perform'],['Perform']
Performance,"an() or fail. getSDF()[source]¶; Function to return the SDF (structure-data file) of the PubChem object. getXYZFile()[source]¶; Function to obtain preferentially a molecule string; through getCartesian() or a query string otherwise. name()[source]¶; Function to return the IUPAC name of the PubChem object. getPubChemResults(name)[source]¶; Function to query the PubChem database for molecules matching the; input string. Builds a PubChem object if found. psiexceptions¶; Module with non-generic exceptions classes. exception PsiException[source]¶; Error class for Psi. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. frac¶. frac_nuke(mol, **kwargs)[source]¶. frac_traverse(mol, **kwargs)[source]¶. ip_fitting(mol, omega_l, omega_r, **kwargs)[source]¶. molutil¶; Module with utility functions that act on molecule objects. BFS(self)[source]¶; Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. activate(mol)[source]¶; Function to set molecule object mol as the current active molecule. dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the psi4.Molecule class. extract_cluster_indexing(mol, cluster_size=0)[source]¶; Function to returns a LIST of all subclusters of the molecule mol of; real size cluster_size. If cluster_size = 0, returns all possible; combinations of cluster size. extract_clusters(mol, ghost=True, cluster_size=0)[source]¶; Function to return all subclusters of the molecule mol of; real size cluster_size and all other atoms ghosted if ghost; equals true, all other atoms discarded if ghost is false. If; cluster_size = 0, returns all possible combinations of cluster size. geometry(geom, name='default')[source]¶; Function to create a m",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_driver-1.html:4160,Perform,Perform,4160,psi4manual/4.0b5/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_driver-1.html,2,['Perform'],['Perform']
Performance,"an(). # Cleanup binary file 1; if custom_gradient or ('/' in lowername) or kwargs.get('bsse_type', None) is not None:; core.IOManager.shared_object().set_specific_retention(1, False). optstash.restore(). if return_history:; history = {; 'energy': step_energies,; 'gradient': step_gradients,; 'coordinates': step_coordinates,; }. if return_wfn and return_history:; return (thisenergy, wfn, history); elif return_wfn and not return_history:; return (thisenergy, wfn); elif return_history and not return_wfn:; return (thisenergy, history); else:; return thisenergy. elif optking_rval == core.PsiReturnType.Failure:; print('Optimizer: Optimization failed!'); # Mark the optimization data as disposable now that the optimization is done.; core.IOManager.shared_object().set_specific_retention(1, False); if (core.get_option('OPTKING', 'KEEP_INTCOS') == False):; core.opt_clean(); molecule.set_geometry(moleculeclone.geometry()); core.clean(); optstash.restore(); raise OptimizationConvergenceError(""""""geometry optimization"""""", n - 1, wfn); return thisenergy. core.print_out('\n Structure for next step:\n'); moleculeclone.print_in_input_format(). n += 1. if core.get_option('OPTKING', 'INTCOS_GENERATE_EXIT') == False:; if core.get_option('OPTKING', 'KEEP_INTCOS') == False:; core.opt_clean(). optstash.restore(); raise OptimizationConvergenceError(""""""geometry optimization"""""", n - 1, wfn). [docs]def hessian(name, **kwargs):; r""""""Function complementary to :py:func:`~frequency`. Computes force; constants, deciding analytic, finite difference of gradients, or; finite difference of energies. :returns: :py:class:`~psi4.core.Matrix` |w--w| Total non-mass-weighted electronic Hessian in Hartrees/Bohr/Bohr. :returns: (:py:class:`~psi4.core.Matrix`, :py:class:`~psi4.core.Wavefunction`) |w--w| Hessian and wavefunction when **return_wfn** specified. :examples:. >>> # [1] Frequency calculation without thermochemical analysis; >>> hessian('mp3'). >>> # [2] Frequency calc w/o thermo analysis getting the Hes",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html:61135,Optimiz,OptimizationConvergenceError,61135,psi4manual/1.3.2/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html,6,"['Optimiz', 'optimiz']","['OptimizationConvergenceError', 'optimization']"
Performance,"an) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Options passed to the GeomeTRIC optimizer; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized se",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.opt-1.html:2062,optimiz,optimization,2062,psi4manual/1.4.0/api/psi4.driver.opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.opt-1.html,30,"['optimiz', 'perform']","['optimization', 'performed']"
Performance,"an) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (string) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. lccd; Linear CCD ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html:1824,perform,perform,1824,psi4manual/1.3.2/api/psi4.driver.opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html,12,"['optimiz', 'perform']","['optimization', 'perform']"
Performance,"an; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DOI_BASIS_TOLERANCE (DLPNO)¶DLPNO (Expert) — Screening criteria for basis function values on DOI grids. Type: conv double; Default: 1.0e-10. DOI_PRUNING_SCHEME (DLPNO)¶DLPNO (Expert) — Pruning scheme for DOI grids. Type: string; Possible Values: ROBUST, TREUTLER, NONE, FLAT, P_GAUSSIAN, D_GAUSSIAN, P_SLATER, D_SLATER, LOG_GAUSSIAN, LOG_SLATER, NONE; Default: ROBUST. DOI_RADIAL_POINTS (DLPNO)¶D",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:121287,perform,perform,121287,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,2,"['optimiz', 'perform']","['optimizations', 'perform']"
Performance,"an; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CO",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c-1.html:115617,perform,perform,115617,psi4manual/1.5.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c-1.html,10,"['optimiz', 'perform']","['optimizations', 'perform']"
Performance,"an; Default: false. FREEZE_INTRAFRAG (OPTKING); OPTKING — Do freeze all fragments rigid?. Type: boolean; Default: false. FROZEN_BEND (OPTKING); OPTKING — Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS); GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_DOCC (PSIMRCC); PSIMRCC — The number of frozen occupied orbitals per irrep. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS); GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FROZEN_UOCC (PSIMRCC); PSIMRCC — The number of frozen virtual orbitals per irrep. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING); OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM); CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. FZC_A_FILE (TRANSQT); TRANSQT — Alpha-spin frozen-core file. Type: integer; Default: PSIF_OEI. FZC_B_FILE (TRANSQT); TRANSQT — Beta-spin frozen-core file. Type: integer; Default: PSIF_OEI. FZC_FILE (TRANSQT); TRANSQT — Frozen-core file. Type: integer; Default: PSIF_OEI. G_CONVERGENCE (OPTKING); O",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html:50388,optimiz,optimized,50388,psi4manual/4.0b5/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimized']
Performance,"an; Default: false. LOCAL_DOMAIN_POLAR¶. Do use augment domains with polarized orbitals?. Type: boolean; Default: false. LOCAL_DOMAIN_SEP¶. Type: boolean; Default: false. LOCAL_FILTER_SINGLES¶. Do apply local filtering to single excitation amplitudes?. Type: boolean; Default: false. LOCAL_METHOD¶. Type of local-CCSD scheme to be simulated. WERNER (unique avaliable option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. LOCAL_PAIRDEF¶. Definition of local pair domains, unique avaliable option is BP, Boughton-Pulay. Type: string; Default: BP. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique avaliable option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. OMEGA¶. Energy of applied field [au] for dynamic properties. Type: array; Default: No Default. PROPERTY¶. The response property desired. The unique acceptable values is POLARIZABILITY for dipole-polarizabilitie. Type: string; Default: POLARIZABILITY. REFERENCE¶. Reference wavefunction type. Type: string; Default: RHF. SEMICANONICAL¶. Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. Expert¶. WFN¶. Wavefunction type. Type: string; Default: No Default. Table Of Contents. CCSORT; General; AO_BASIS; CACHELEVEL; EOM_REFERENCE; INTS_TOLERANCE; KEEP_OEIFILE; KEEP_TEIFILE; LOCAL; LOCAL_CORE_CUTOFF; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_DOMAIN_MAG; LOCAL_DOMAIN_POLAR; LOCAL_DOMAIN_SEP; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; OMEGA; PROPERTY; REFERENCE; SEMICANONICAL. Expert; WFN. Previous topic; WFN; Next topic; AO_BASIS. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Appendices »; Keywords by Module ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__ccsort-1.html:3283,CACHE,CACHELEVEL,3283,psi4manual/1.0.0/autodir_options_c/module__ccsort-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__ccsort-1.html,2,['CACHE'],['CACHELEVEL']
Performance,"an; Default: false. REFERENCE¶. Reference wavefunction type. Cfour Interface: Keyword translates into CFOUR_REFERENCE. Type: string; Possible Values: RHF, ROHF, UHF, CUHF, RKS, UKS; Default: RHF. SAVE_JK¶. Keep JK object for later use?. Type: boolean; Default: false. SCF_MEM_SAFETY_FACTOR¶. Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_TYPE¶. What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, FAST_DF, CD, INDEPENDENT; Default: PK. S_ORTHOGONALIZATION¶. SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE¶. Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. Convergence Control/Stabilization¶. BASIS_GUESS¶. Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. DAMPING_CONVERGENCE¶. The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE¶. The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 100.0. DF_BASIS_GUESS¶. When BASIS_GUESS is active, run the preliminary scf in density-fitted mode with this as fitting basis for the small basis set. A value of TRUE turns on",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__scf-1.html:3285,perform,performing,3285,psi4manual/1.0.0/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__scf-1.html,2,['perform'],['performing']
Performance,"an; Default: false. SCS (MP2); MP2 — Do perform a spin component scaled MP2 computation?. Type: boolean; Default: false. SCS_CCSD (CCENERGY); CCENERGY — Do spin-component-scaled CCSD. Type: boolean; Default: false. SCS_CEPA (CEPA); CEPA — Perform SCS-CEPA? If true, note that the default values for the spin component scaling factors are optimized for the CCSD method. Type: boolean; Default: false. SCS_MP2 (CCENERGY); CCENERGY — Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SCS_N (LMP2); LMP2 — Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SCS_N (MP2); MP2 — Do perform a spin component scaled (N) MP2 computation?. Type: boolean; Default: false. SCS_TYPE (OMP2); OMP2 — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCS_TYPE (OMP3); OMP3 — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCSN_MP2 (CCENERGY); CCENERGY — Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SEKINO (CCLAMBDA); CCLAMBDA — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEKINO (CCRESPONSE); CCRESPONSE — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEM_MAXITER (ADC); ADC — Maximum iteration number in simultaneous expansion method. Type: integer; Default: 30. SEMICANONICAL (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCEOM); CCEOM — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCSORT); CCSORT — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCTRIPLES); CCTRIPLES — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (TRANSQT2); TRANSQT2 — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SF_RESTRICT (DETCI); DETCI (Expert) — Do eliminate determinants not vali",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:113285,optimiz,optimized,113285,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimized']
Performance,"an; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_MBPT_DISP (SAPT); SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC); DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (DFOCC); DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DYNAMIC_LEVEL (OPTKING); OP",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:112679,perform,perform,112679,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,2,['perform'],['perform']
Performance,"and C++ compilers and versions are approved¶; On Linux, the following work nicely. GNU: gcc, g++; Intel: icc, icpc; Clang: clang, clang++. On Mac, the following work nicely. Apple Clang: clang, clang++; Intel: icc, icpc. PSI4 requires full C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; psi4/cmake/custom_cxxstandard.cmake, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both icpc and gcc versions are checked. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -H. -Bbuild \; -D",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:31539,perform,performed,31539,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['perform'],['performed']
Performance,"and C++ compilers and versions are approved¶; On Linux, the following work nicely. GNU: gcc, g++; Intel: icc, icpc; Clang: clang, clang++. On Mac, the following work nicely. Apple Clang: clang, clang++; Intel: icc, icpc. PSI4 requires full C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; psi4/cmake/custom_cxxstandard.cmake, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both icpc and gcc versions are checked. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. Note that this “AppleClang” will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives.; Another route to obtaining clang compilers without the above limitations; is through conda.; # Install Clang 4.0.1 into a non-primary conda environment; >>> conda create -n clang401 clangxx_osx-64 clang_osx-64 llvm-openmp intel-openmp. # To Build, activate environment (prepends PATH and defines environment variables CLANG, CLANGXX, HOST, etc):; >>> conda activate clang401; >>> echo ${CLANGXX}; /path/to/miniconda/envs/clang401/bin/x86_64-apple-darwin13.4.0-clang++; >>> echo ${HOST}; x86_64-apple-darwin13.4.0. # build with Clang; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DCMAKE_CXX_COMPILER=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -H. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:32902,perform,performed,32902,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['perform'],['performed']
Performance,"and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012).; (doi: 10.1002/wcms.84). Using Natural Orbitals in SAPT. “Efficient Evaluation of Triple Excitations in Symmetry-Adapted; Perturbation Theory via MP2 Natural Orbitals,” E. G. Hohenstein; and C. D. Sherrill, J. Chem. Phys. 133, 104107 (2010).; (doi: 10.1063/1.3479400). Orbital-Optimized Post-Hartree-Fock Methods¶; Orbital-optimized second-order perturbation theory (OMP2). “Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order Møller–Plesset perturbation theory,”; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; J. Chem. Phys. 135, 104103 (2011).; (doi: 10.1063/1.3631129).; “Analytic energy gradients for the orbital-optimized second-order; Møller–Plesset perturbation theory,” U. Bozkaya and; C. D. Sherrill, J. Chem. Phys. 138, 184103 (2013).; (doi: 10.1063/1.4803662). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized Third-Order Møller–Plesset; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q). Orbital-optimized coupled electron pair approximation (OCEPA). “Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order Møller–Plesset perturbation theory,”; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; J. Chem. Phys. 135, 104103 (2011).; (doi: 10.1063/1.3631129).; “Orbital-optimized coupled electron pair theory and its an",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/introduction-1.html:8858,optimiz,optimized,8858,psi4manual/4.0b5/introduction-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/introduction-1.html,2,['optimiz'],['optimized']
Performance,"and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly usefu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/dct.html:13925,optimiz,optimization,13925,psi4manual/master/dct.html,https://psicode.org,https://psicode.org/psi4manual/master/dct.html,18,"['optimiz', 'perform']","['optimization', 'performed']"
Performance,"and Python. SymmetryOperation¶. class psi4.core.SymmetryOperation¶; Bases: pybind11_builtins.pybind11_object; Class to provide a 3 by 3 matrix representation of a symmetry operation, such as a rotation or reflection.; Methods Summary. E(self); Set equal to E. c2_x(self); Set equal to C2 about the x axis. c2_y(self); Set equal to C2 about the y axis. c2_z(self); Set equal to C2 about the z axis. i(self); Set equal to an inversion. matrix(self); Return the matrix for the operation on Cartesians. operate(self, arg0); Performs the operation arg2 * arg1. rotate_n(self, arg0); Set equal to a clockwise rotation by 2pi/n. rotate_theta(self, arg0); Set equal to a clockwise rotation by theta. sigma_xy(self); Set equal to reflection in xy plane. sigma_xz(self); Set equal to reflection in xz plane. sigma_yz(self); Set equal to reflection in yz plane. trace(self); Returns trace of transformation matrix. transform(self, arg0); Performs the transform arg2 * arg1 * arg2~. transpose(self); Performs transposition of matrix operation. unit(self); Set equal to a unit matrix. zero(self); Zero out the symmetry operation. Methods Documentation. E(self: psi4.core.SymmetryOperation) → None¶; Set equal to E. c2_x(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the x axis. c2_y(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the y axis. c2_z(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the z axis. i(self: psi4.core.SymmetryOperation) → None¶; Set equal to an inversion. matrix(self: psi4.core.SymmetryOperation) → List[List[float[3]][3]]¶; Return the matrix for the operation on Cartesians. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None¶; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryOperation, arg0: float) → None¶; Set equal to a clockwise rotatio",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.symmetryoperation.html:1102,Perform,Performs,1102,psi4manual/1.3.2/api/psi4.core.symmetryoperation.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.symmetryoperation.html,1,['Perform'],['Performs']
Performance,"and RASSCF. run_detci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn. run_detci_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a configuration interaction calculation, namely FCI,; CIn, MPn, and ZAPTn, computing properties. run_dfmp2(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted MP2 calculation. run_dfmp2_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 gradient calculation. run_dfmp2_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a DFMP2 property calculation. run_dfocc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted or Cholesky-decomposed; (non-)orbital-optimized MPN or CC computation. run_dfocc_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dfocc_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-fitted (non-)orbital-optimized MPN or CC computation. run_dft(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-functional-theory calculation. run_dft_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a density-functional-theory gradient calculation. run_dft_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; DFT calculations. This is a simple alias to run_scf(); since DFT properties all handled through oeprop. run_dmrgci(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an DMRG calculation. run_dmrgscf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an DMRG calculation. run_efp(name, **kwargs)[source]¶; Function encoding sequence of mo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:162412,optimiz,optimized,162412,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['optimiz'],['optimized']
Performance,"and a QM water. Finite different test of the gradient is performed to validate forces. fnocc4; Test FNO-DF-CCSD(T) energy. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. cc54; CCSD dipole with user-specified basis set. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. rasci-h2o; RASCI/6-31G** H2O Energy Point. ddd-deriv; Sample HF/cc-pVDZ H2O computation all derivatives. scf-auto-cholesky; Cholesky filter a complete basis. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properti",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:9157,perform,performed,9157,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['perform'],['performed']
Performance,"and any add-ons in working order: pytest -m smoke; * Run tests matching by name: pytest -k testname; * Run tests excluding those by name: pytest -k ""not testname""; * Run tests matching by label: pytest -m testlabel; * Run tests excluding those by label: pytest -m ""not testlabel"". How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n`getconf _NPROCESSORS_ONLN`; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n`getconf _NPROCESSORS_O",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:54493,perform,performed,54493,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['perform'],['performed']
Performance,and can be controlled through OCC (conventional integrals CONV); and DFOCC (density-fitted DF and Cholesky-decomposed CD); keywords. Switching between the integrals treatments is controlled; through ‘type select’ values; see rightmost Table column. Orbital-Optimized MP and LCCD capabilities of OCC/DFOCC modules¶. name; calls method; Energy; Gradient; type select. omp2; Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP2_TYPE CONV. Density-Fitted Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP2_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —; MP2_TYPE CD. omp3; Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE CONV. Density-Fitted Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —; MP_TYPE CD. omp2.5; Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE CONV. Density-Fitted Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; —; MP_TYPE CD. olccd; Orbital-Optimized Linear CCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE CONV. Density-Fitted Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE DF. Cholesky-Decomposed Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; —; CC_TYPE CD. Spin-Component-Scaled Orbital-Optimized MP capabilities of OCC/DFOCC modules¶. name; calls method; Energy; Gradient. scs-omp3; Spin-Component Scaled Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —. sos-omp3; Spin-Opposite Scaled Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —. scs(n)-omp3; A special version of SCS-OMP3 for nucleobase interactions; RHF/UHF/ROHF/RKS/UKS; —. scs-omp3-vdw; A special version of SCS-OMP3 (from ethene dimers); RHF/UHF/ROHF/RKS/UKS; —. sos-pi-omp3; A special version of SOS-OMP3 for -systems; RHF/UHF/ROHF/RKS/UKS; —. scs-omp2; Spin-Componen,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/occ-1.html:7386,Optimiz,Optimized,7386,psi4manual/1.0.0/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/occ-1.html,2,['Optimiz'],['Optimized']
Performance,"and dihedral angles between the two; fragments will be created using these reference points. See; Dimer coordinate table for how reference points are created.; For a set of three dimers A, B, and C, sets of coordinates are created between each pair:; AB, AC, and BC. Each DimerFrag may use different reference points.; Creation of the intermolecular coordinates can be controlled through FRAG_REF_ATOMS; and INTERFRAG_COORDS. FRAG_REF_ATOMS specifies which atoms; (or linear combination of atoms) to use for the reference points and INTERFRAG_COORDS,; which encompasses FRAG_REF_ATOMS, allows for constraints and labels to be added to the; intermolecular coordinates. Note; Manual specification of the interfragment coordinates is supported for power users,; and provides complete control of fragments’ relative orientations.; Setting INTERFRAG_MODE to multi should suffice in almost all cases.; Dimer coordinate table. provides the name and ordering; convention for the coordinates. Basic multi-fragment optimization. Use automatically generated reference points. memory 4GB; molecule mol {; 0 1; O -0.5026452583 -0.9681078610 -0.4772692868; H -2.3292990446 -1.1611084524 -0.4772692868; H -0.8887241813 0.8340933116 -0.4772692868; --; 0 1; C 0.8853463281 -5.2235996493 0.5504918473; C 1.8139169342 -2.1992967152 3.8040686146; C 2.8624456357 -4.1143863257 0.5409035710; C -0.6240195463 -4.8153482424 2.1904642137; C -0.1646305764 -3.3031992532 3.8141619690; C 3.3271056135 -2.6064153737 2.1669340785; H 0.5244823836 -6.4459192939 -0.7478283184; H 4.0823309159 -4.4449979205 -0.7680411190; H -2.2074914566 -5.7109913627 2.2110247636; H -1.3768100495 -2.9846751653 5.1327625515; H 4.9209603634 -1.7288723155 2.1638694922; H 2.1923374156 -0.9964630692 5.1155773223; nocom; units au; }. set {; basis 6-31+G; frag_mode MULTI; }. optimize(""mp2""). Warning; The molecule input for psi4 has no effect upon optking, expect to provide Cartesian; coordinates. Specifying independent fragments with the – seperator",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/optking.html:10674,optimiz,optimization,10674,psi4manual/master/optking.html,https://psicode.org,https://psicode.org/psi4manual/master/optking.html,4,['optimiz'],['optimization']
Performance,"and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESP",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:8069,CACHE,CACHELEVEL,8069,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,16,"['CACHE', 'Cache']","['CACHELEVEL', 'Cacheing']"
Performance,"and must match the; database python file. Examples :. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('dfmp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichoimetric weights by which the reagent energies are transfromed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/db-1.html:5763,perform,performed,5763,psi4manual/4.0b2/db-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/db-1.html,2,['perform'],['performed']
Performance,"and the CP-corrected CCSD(T) energies, converted from; atomic units (Hartree) to kcal mol-1 by multiplying by the; automatically-defined conversion factor psi_hartree2kcalmol. PSI4; provides several built-in physical constants and conversion factors, as; described in section Physical Constants.; Notice the loop over \(R\) to create; the table looks just like the loop over R to run the different; computations, and the CP-corrected energies ecp[R] are accessed the same; way they were stored. The print line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section).; Our table is printed at the very end of the output file, and looks like; this; CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies. R (Ang) E_int (kcal/mol); -----------------------------------------------------; 2.5 0.757718; 3.0 0.015687; 4.0 -0.016264. The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easily in PSI4. table of contents. Psithon Tutorial: Using PSI4 as an Executable; Basic Input File Structure; Sample Input Files; Running a Basic Hartree–Fock Calculation; Geometry Optimization and Vibrational Frequency Analysis; Analysis of Intermolecular Interactions; Potential Surface Scans and Counterpoise Correction Made Easy with Psithon. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. A PSI4 Tutorial; Psithon Tutorial: Using PSI4 as an Executable. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/tutorial.html:23316,Optimiz,Optimization,23316,psi4manual/1.6.x/tutorial.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/tutorial.html,1,['Optimiz'],['Optimization']
Performance,"and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. 1; 2>>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). 1; 2; 3; 4; 5>>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). 1; 2>>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). 1; 2; 3; 4; 5; 6; 7; 8; 9>>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). 1; 2; 3; 4; 5>>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). 1; 2>>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). 1; 2; 3; 4>>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.driver.energy-1.html:21486,perform,perform,21486,psi4manual/1.2.1/api/psi4.driver.energy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.driver.energy-1.html,4,['perform'],['perform']
Performance,"and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1¶. This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2¶. This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3¶. This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4¶. This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV¶. Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC¶. Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optki",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:29172,perform,performs,29172,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,2,['perform'],['performs']
Performance,"and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1¶. This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2¶. This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3¶. This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4¶. This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV¶. Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC¶. Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html:29431,perform,performs,29431,psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,15,['perform'],['performs']
Performance,"and variables:\n'); molecule.print_in_input_format(). for postcallback in hooks['optimize']['post']:; postcallback(lowername, wfn=wfn, **kwargs); core.clean(). optstash.restore(). if return_history:; history = {; 'energy': [step.E for step in opt_object.history.steps],; 'gradient': [step.cart_grad for step in opt_object.history.steps],; 'coordinates': [step.geom for step in opt_object.history.steps],; }. # Create OptimizationResult like Schema. Not validated since optimize() does not pass AtomicResults.; opt_data = opt_object.close(); if core.get_option('OPTKING', 'WRITE_OPT_HISTORY'):; with open(f""{core.get_writer_file_prefix(molecule.name())}.opt.json"", 'w+') as f:; json.dump(opt_data, f, indent=2). if return_wfn and return_history:; return (thisenergy, wfn, history); elif return_wfn and not return_history:; return (thisenergy, wfn); elif return_history and not return_wfn:; return (thisenergy, history); else:; return thisenergy. elif opt_status == 'FAILED':. print('Optimizer: Optimization failed!'); molecule.set_geometry(core.Matrix.from_array(opt_object.molsys.geom)); molecule.update_geometry(); core.clean(); optstash.restore(). opt_data = opt_object.to_dict(); if core.get_option('OPTKING', 'WRITE_OPT_HISTORY'):; with open(f""{core.get_writer_file_prefix(molecule.name())}.opt.json"", 'w+') as f:; json.dump(opt_data, f, indent=2). raise OptimizationConvergenceError(""""""geometry optimization"""""", n - 1, wfn). core.print_out('\n Structure for next step:\n'); molecule.print_in_input_format(). n += 1. optstash.restore(); raise OptimizationConvergenceError(""""""geometry optimization"""""", n - 1, wfn). [docs]; def hessian(name, **kwargs):; r""""""Function complementary to :py:func:`~psi4.driver.frequency`. Computes force; constants, deciding analytic, finite difference of gradients, or; finite difference of energies. :returns: :py:class:`~psi4.core.Matrix` |w--w| Total non-mass-weighted electronic Hessian in Hartrees/Bohr/Bohr. :returns: (:py:class:`~psi4.core.Matrix`, :py:class:`",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver.html:76924,Optimiz,Optimizer,76924,psi4manual/1.8.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver.html,6,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,"and variables:\n'); molecule.print_in_input_format(). for postcallback in hooks['optimize']['post']:; postcallback(lowername, wfn=wfn, **kwargs); core.clean(). optstash.restore(). if return_history:; history = {; 'energy': [step.E for step in opt_object.history.steps],; 'gradient': [step.cart_grad for step in opt_object.history.steps],; 'coordinates': [step.geom for step in opt_object.history.steps],; }. # Create OptimizationResult like Schema. Not validated since optimize() does not pass AtomicResults.; opt_data = opt_object.close(); if core.get_option('OPTKING', 'WRITE_OPT_HISTORY'):; with open(f""{core.get_writer_file_prefix(molecule.name())}.opt.json"", 'w+') as f:; json.dump(opt_data, f, indent=2). if return_wfn and return_history:; return (thisenergy, wfn, history); elif return_wfn and not return_history:; return (thisenergy, wfn); elif return_history and not return_wfn:; return (thisenergy, history); else:; return thisenergy. elif opt_status == 'FAILED':. print('Optimizer: Optimization failed!'); molecule.set_geometry(core.Matrix.from_array(opt_object.molsys.geom)); molecule.update_geometry(); core.clean(); optstash.restore(). opt_data = opt_object.to_dict(); if core.get_option('OPTKING', 'WRITE_OPT_HISTORY'):; with open(f""{core.get_writer_file_prefix(molecule.name())}.opt.json"", 'w+') as f:; json.dump(opt_data, f, indent=2). raise OptimizationConvergenceError(""""""geometry optimization"""""", n - 1, wfn). core.print_out('\n Structure for next step:\n'); molecule.print_in_input_format(). n += 1. optstash.restore(); raise OptimizationConvergenceError(""""""geometry optimization"""""", n - 1, wfn). [docs]def hessian(name, **kwargs):; r""""""Function complementary to :py:func:`~psi4.driver.frequency`. Computes force; constants, deciding analytic, finite difference of gradients, or; finite difference of energies. :returns: :py:class:`~psi4.core.Matrix` |w--w| Total non-mass-weighted electronic Hessian in Hartrees/Bohr/Bohr. :returns: (:py:class:`~psi4.core.Matrix`, :py:class:`~p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver.html:76899,Optimiz,Optimizer,76899,psi4manual/1.7.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver.html,2,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,"and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf3; File retention, docc, socc, and bond distances specified explicitly. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dfomp3-gra",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/testsuite-1.html:31215,perform,performed,31215,psi4manual/1.0.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/testsuite-1.html,4,['perform'],['performed']
Performance,"and; CCSD(T)/cc-pVTZ (C4) single-points.; molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for complete_basis_set(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming).; Finally, any number and combination of jobs can be run from a single; Psi4 input file. Depending on the nature of preceeding or following; jobs, it is prudent to separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. Warning; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a Psi4-style molecule, the; interface cannot judge whether a sandwich mode (drop the Psi4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the Psi4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a Psi4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cfour-1.html:17452,optimiz,optimize,17452,psi4manual/1.0.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cfour-1.html,2,['optimiz'],['optimize']
Performance,"and; Helgaker [Bakken:2002:9160]. (However, for separated; fragments, we have chosen not to employ by default their “extra-redundant”; coordinates defined by their “auxiliary interfragment” bonds. These can be; included via the option ADD_AUXILIARY_BONDS).; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased.; Otherwise, the internal coordinate definitions may be modified. If one; desires to see or modify the internal coordinates being used, then one can set; INTCOS_GENERATE_EXIT to true. The internal coordinate; definitions are provided in the file with extension ”.intco”. See the Optimizing Minima; section for more detail. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the molecule being converted to a Cartesian representation. The ongoing development of optking is providing for unique treatment of; coordinates which connect distinct molecular fragments. Thus, several keywords; relate to “interfragment modes”, though many of these capabilities are; still under development. Presently by default, separate fragments are bonded by; nearest atoms, and the whole system is treated as if it were part of one; molecule. However, with the option FRAG_MODE, fragments; may instead be related by a unique set of interfragment coordinates defined by; reference points within each fragment. The reference points can be atomic; positions (current default), linear combinations of; atomic positions, or located on the principal axes (not yet working). Basic Keywords¶. OPT_TYPE¶. Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. STEP_TYPE¶. Geometry optimization step type, ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/optking-1.html:1847,Optimiz,Optimizations,1847,psi4manual/4.0b4/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optking-1.html,4,['Optimiz'],['Optimizations']
Performance,"andard input file needed to run the plugin are (1); the line plugin_load(""./myplugin.so"") before any keyword setting to; load the plugin’s options into PSI4’s options data structure and (2); the final line plugin(""./myplugin.so"") to call the plugin code after; any necessary preparatory modules (here, scf) have been run. pymodule.py — Python component of the plugin. The procedure; for calling plugin code shown in input.dat sounds very simple, but it; can be made simpler still. By encoding the sequence of PSI4 module; calls needed to run the plugin in the run_myplugin() function in this; file, the plugin is hooked into the main PSI4 driver function; energy() and so can be accessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file. __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section as modeled in; psi4/tests/plugin_libcim/__init__.py).; """"""Plugin docstring. """"""; __version__ = '0.1'; __author__ = 'Psi4 Developer'. # Load Python modules; from pymodule import *. # Load C++ plugin; import os; import PsiMod; plugdir = os.path.split(os.path.abspath(__file__))[0]; sofile = plugdir + '/' + os.path.split(plugdir)[1] + '.so'; PsiMod.plugin_load(sofile). inputalt.dat — Sample input file for the plugin (new style).; Since the __init__.py file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be included in PYTHONPATH,; either externally in the calling shell or defined in the input file. Then,; the plugin can be loaded as import myplugin a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/plugins-1.html:5554,Load,Load,5554,psi4manual/4.0b3/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/plugins-1.html,4,['Load'],['Load']
Performance,"andler. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc12; Single point energies of multiple excited states with EOM-CCSD. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cbs-xtpl-func; optimization with method defined via cbs. fcidump; test FCIDUMP functionality for rhf/uhf. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. scf-level-shift-rohf; SCF level shift on an ROHF computation. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. scf3; File retention, docc, socc, and bond distances specified explicitly. opt16; SCF 6-31G(d) optimization of TS for HCN to HNC Performs finite difference hessian calculation. Then optimizes using previous orbitals for scf guess, in subsequent calculations. The last two displacements of the hessian break the plane of symemtry, This test confirms that only the reference geometry, with the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. nbo; Generation of NBO file. fnocc6; Test method/basis with disk_df. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:34180,optimiz,optimization,34180,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimization']
Performance,"andwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR); CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR); CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR); CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:49285,optimiz,optimized,49285,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,8,['optimiz'],['optimized']
Performance,"ane. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. omp3-3; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. sapt3; SAPT2+3 aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). adc1; ADC/6-31G** on H2O. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, at the UHF an ROHF levels of theory. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 block",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/testsuite-1.html:16039,optimiz,optimization,16039,psi4manual/4.0b3/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/testsuite-1.html,4,['optimiz'],['optimization']
Performance,"aneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; Recommendations section. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: two-step (default) and simultaneous. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction . Methods Summary¶; The table below summarizes current DCFT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. SIMULTANEOUS, QC; Y; N; UHF. SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE = RHF is only available for; ALGORITHM = SIMULTANEOUS. To compute correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCFT single-point computation looks like this:; molecule {; H; H 1 1.0; }.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/dcft-1.html:11688,perform,perform,11688,psi4manual/1.0.0/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/dcft-1.html,4,"['optimiz', 'perform']","['optimizations', 'perform']"
Performance,"ange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCFT); DCFT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF); SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attemp to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCFT); DCFT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCFT); DCFT (Expert) — Performs stability analysis of the DCFT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCFT); DCFT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCFT); DCFT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCFT); DCFT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCFT); DCFT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING); OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SYMM",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:210544,Perform,Performs,210544,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['Perform'],['Performs']
Performance,"angle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR)¶CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR)¶CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR)¶CFOUR — Controls amount of debug printing performed by xjoda. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV (CFOUR)¶CFOUR — Convergence threshold for linear equations controlled by LINEQ_TYPE. Equations are iterated until smallest residual falls below \(10^{-N}\), where \(N\) is the value associated with this keyword. Type: integer; Default: 7. CFOUR_LINEQ_MAXCY (CFOUR)¶CFOUR — The maximum number of iterations in all linear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE (CFOUR)¶CFOUR — Determines the algorithm used to solve linear equations ( \(\Lambda\) and derivative \(T\) and \(\Lambda\) ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring m",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:53116,perform,performed,53116,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,9,['perform'],['performed']
Performance,"ans recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. INTCOS_GENERATE_EXIT¶. Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. Optimizing Minima¶; First, define the molecule and basis in the input.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; set step_type nr; optimize('scf'). Optimize using energy points instead of gradients:; optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:. set full_hess_every 1; optimize('scf'). Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The Hessian may be computed during an optimization using the; FULL_HESS_EVERY keyword. Transition States, Reaction Paths, and Constrained Optimizations¶. Calculate a starting Hessian and optimize the “transition state” of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails):; molecule h2o {; O; H 1 1.0; H 1 ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/optking-1.html:4738,Optimiz,Optimize,4738,psi4manual/1.4.0/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/optking-1.html,5,['Optimiz'],['Optimize']
Performance,ansform method. set_title() psi4.core.OEProp method. set_tpdm_already_presorted() psi4.core.IntegralTransform method. set_tpdm_presorted() psi4.core.Deriv method. set_tweak() psi4.core.LibXCFunctional method. set_units() psi4.core.Molecule method. set_variable() in module psi4.core. psi4.core.Molecule method. psi4.core.Wavefunction method. set_view() psi4.driver.p4util.InPsight method. set_vv10_b() psi4.core.SuperFunctional method. set_vv10_c() psi4.core.SuperFunctional method. set_wcombine() psi4.core.JK method. set_write_dpd_so_tpdm() psi4.core.IntegralTransform method. set_x_alpha() psi4.core.SuperFunctional method. set_x_beta() psi4.core.SuperFunctional method. set_x_omega() psi4.core.SuperFunctional method. set_xclib_description() psi4.core.SuperFunctional method. setName() psi4.core.ExternalPotential method. setting. ; keywords anharmonicity(). keywords cbs(). keywords cp. keywords database(). keywords energy(). keywords frequency(). keywords general. keywords molecule. keywords optimize(). keywords properties(). keywords vmfc. SF_RESTRICT (DETCI). shallow_copy() psi4.core.Wavefunction method. shape psi4.core.Matrix attribute. psi4.core.Vector attribute. shared_object() psi4.core.IO static method. psi4.core.IOManager static method. shell() psi4.core.BasisSet method. shell_extents() psi4.core.BasisExtents method. shell_on_center() psi4.core.BasisSet method. shell_significant() psi4.core.ERISieve method. psi4.core.TwoBodyAOInt method. psi4.core.TwoElectronInt method. shell_to_ao_function() psi4.core.BasisSet method. shell_to_basis_function() psi4.core.BasisSet method. shell_to_center() psi4.core.BasisSet method. ShellInfo class in psi4.core. shells_iterator() psi4.core.IntegralFactory method. shells_local_to_global() psi4.core.BlockOPoints method. sherrill_gold_standard() in module psi4.driver.aliases. shift() psi4.core.CIVector method. sigma() psi4.core.CIWavefunction method. SIGMA_OVERLAP (DETCI). sigma_xy() psi4.core.SymmetryOperation method. sigma_xz() psi4.c,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/genindex.html:114374,optimiz,optimize,114374,psi4manual/1.8.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/genindex.html,1,['optimiz'],['optimize']
Performance,"ansformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfremp-2; density fitted REMP/cc-pVDZ energies for the CH3 radical. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. sapt-ecp; sapt0 of charged system in ECP basis set. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies - density-fitted version. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. dfccsdat2; DF-A-CCSD(T) cc-pVDZ energy for the NH molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. pywrap-align; apply linear fragmentation algorithm",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:25747,optimiz,optimization,25747,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimization']
Performance,"ansition OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. COLLAPSE_SIZE (DETCI); DETCI — Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM); CCEOM — Do collapse with last vector?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC); DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC); FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC); FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING); OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC); PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT); SAPT (Expert) — Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:88572,optimiz,optimization,88572,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimization']
Performance,"ansition OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. COLLAPSE_SIZE (DETCI); DETCI — Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM); CCEOM — Do collapse with last vector?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC); DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC); FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC); FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING); OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC); PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT); SAPT (Expert) — Whether or not to compute coupled induction, applies only to the open-shell SAPT0 code. Coupled induction is not available for ROHF, and the option is automatically false in thi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:88346,optimiz,optimization,88346,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimization']
Performance,"antity in-core. oremp-grad1; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. rasci-h2o; RASCI/6-31G** H2O Energy Point. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. scf-level-shift-rks; SCF level shift on an RKS computation. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cbs-parser; mtd/basis syntax examples. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. dfremp-1; density fitted REMP/cc-pVDZ energies for the CO2 molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. dct5; DC-06 calculation for ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:8681,perform,performed,8681,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['perform'],['performed']
Performance,"any-body gradients of different BSSE schemes. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. scf-upcast-custom-basis; test scf castup with custom basis sets. aediis-2; EDIIS test case from 10.1063/1.1470195. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. mints2-bse; Similar to mints2, but using the BSE to specify the basis sets. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. soscf-large; Second-order SCF convergnece: Benzene. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, rest",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:18142,perform,performed,18142,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['perform'],['performed']
Performance,"ap procedure to output file and reap input file; if opt_mode == 'sow':; instructionsO = """"""\n The optimization sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructionsO += """""" has produced a number of input files (OPT-%s-*.in) for individual components\n"""""" % (str(opt_iter)); instructionsO += """""" and a single input file (OPT-master.in) with an optimize(mode='reap') command.\n""""""; instructionsO += """""" These files may look very peculiar since they contain processed and pickled python\n""""""; instructionsO += """""" rather than normal input. Follow the instructions in OPT-master.in to continue.\n\n""""""; instructionsO += """""" Alternatively, a single-job execution of the gradient may be accessed through\n""""""; instructionsO += """""" the optimization wrapper option mode='continuous'.\n\n""""""; core.print_out(instructionsO). instructionsM = """"""\n# Follow the instructions below to carry out this optimization cycle.\n#\n""""""; instructionsM += """"""# (1) Run all of the OPT-%s-*.in input files on any variety of computer architecture.\n"""""" % (str(opt_iter)); instructionsM += """"""# The output file names must be as given below.\n#\n""""""; for rgt in range(ndisp):; pre = 'OPT-' + str(opt_iter) + '-' + str(rgt + 1); instructionsM += """"""# psi4 -i %-27s -o %-27s\n"""""" % (pre + '.in', pre + '.out'); instructionsM += """"""#\n# (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructionsM += """"""# OPT-master.in into that directory and run it. The job will be minimal in\n""""""; instructionsM += """"""# length and give summary results for the gradient step in its output file.\n#\n""""""; if opt_iter == 1:; instructionsM += """"""# psi4 -i %-27s -o %-27s\n#\n"""""" % ('OPT-master.in', 'OPT-master.out'); else:; instructionsM += """"""# psi4 -a -i %-27s -o %-27s\n#\n"""""" % ('OPT-master.in', 'OPT-master.out'); instructionsM += """"""# After each optimization iteration",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html:39912,optimiz,optimization,39912,psi4manual/1.1.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html,2,['optimiz'],['optimization']
Performance,"ap procedure to output file and reap input file; if opt_mode == 'sow':; instructionsO = """"""\n The optimization sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += """""" to this output file (which contains no quantum chemical calculations), this job\n""""""; instructionsO += """""" has produced a number of input files (OPT-%s-*.in) for individual components\n"""""" % (str(opt_iter)); instructionsO += """""" and a single input file (OPT-master.in) with an optimize(mode='reap') command.\n""""""; instructionsO += """""" These files may look very peculiar since they contain processed and pickled python\n""""""; instructionsO += """""" rather than normal input. Follow the instructions in OPT-master.in to continue.\n\n""""""; instructionsO += """""" Alternatively, a single-job execution of the gradient may be accessed through\n""""""; instructionsO += """""" the optimization wrapper option mode='continuous'.\n\n""""""; psi4.print_out(instructionsO). instructionsM = """"""\n# Follow the instructions below to carry out this optimization cycle.\n#\n""""""; instructionsM += """"""# (1) Run all of the OPT-%s-*.in input files on any variety of computer architecture.\n"""""" % (str(opt_iter)); instructionsM += """"""# The output file names must be as given below.\n#\n""""""; for rgt in range(ndisp):; pre = 'OPT-' + str(opt_iter) + '-' + str(rgt + 1); instructionsM += """"""# psi4 -i %-27s -o %-27s\n"""""" % (pre + '.in', pre + '.out'); instructionsM += """"""#\n# (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructionsM += """"""# OPT-master.in into that directory and run it. The job will be minimal in\n""""""; instructionsM += """"""# length and give summary results for the gradient step in its output file.\n#\n""""""; if opt_iter == 1:; instructionsM += """"""# psi4 -i %-27s -o %-27s\n#\n"""""" % ('OPT-master.in', 'OPT-master.out'); else:; instructionsM += """"""# psi4 -a -i %-27s -o %-27s\n#\n"""""" % ('OPT-master.in', 'OPT-master.out'); instructionsM += """"""# After each optimization iteration",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver.html:38578,optimiz,optimization,38578,psi4manual/1.0.0/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver.html,1,['optimiz'],['optimization']
Performance,"apolated water energies. soscf1; Second-order SCF convergnece: Benzene. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-fr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:13264,optimiz,optimization,13264,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,8,['optimiz'],"['optimization', 'optimized']"
Performance,"approximate N-representability conditions derived from; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part \(\boldsymbol{\tau}\) of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods \(\boldsymbol{\tau}\) is derived from the density cumulant; in an approximate way (labelled by ‘06’), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by ‘12’). The corresponding DC and ODC methods; have similar description of the \(\boldsymbol{\gamma_1}\) N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12.; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution \(\boldsymbol{\tau}\), respectively,; and the orbitals are variationally optimized.; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [\(\mbox{ODC-13$(\lambda_3)$}\)] can be used (see below).; For the detailed comparison of the quality of these methods we refer; users to our publications.; The DCFT functional can be specified by the DCFT_FUNCTIONAL option. The; default choice is the ODC-12 functional. In addition to five methods listed; above, DCFT_FUNCTIONAL option can be set to CEPA0 (coupled elect",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/dcft-1.html:5838,optimiz,optimization,5838,psi4manual/1.1.0/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/dcft-1.html,6,['optimiz'],['optimization']
Performance,"approximate N-representability conditions derived from; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part \(\boldsymbol{\tau}\) of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods \(\boldsymbol{\tau}\) is derived from the density cumulant; in an approximate way (labelled by ‘06’), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by ‘12’). The corresponding DC and ODC methods; have similar description of the \(\boldsymbol{\gamma_1}\) N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12.; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution \(\boldsymbol{\tau}\), respectively,; and the orbitals are variationally optimized.; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [\(\mbox{ODC-13$(\lambda_3)$}\)] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our publications.; The DCT functional can be specified by the DCT_FUNCTIONAL option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the \((\lambda_3)\) energy correction that perturbatively a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/dct.html:5833,optimiz,optimization,5833,psi4manual/master/dct.html,https://psicode.org,https://psicode.org/psi4manual/master/dct.html,9,['optimiz'],['optimization']
Performance,"approximated with the; Axilrod-Teller-Muto model:. \[E_{disp}^{(3)}=-\frac{1}{6}\sum_{A\neqB\neqC}\frac{C_{9}^{ABC}(3\cos{\theta_a}\cos{\theta_b}\cos{\theta_c}+1)}{(r_{AB}r_{BC}r_{AC})^{3}}f_{damp}(\bar{r}_{ABC})\]; where \(\theta_a\) is the angle at atom A corresponding to the triangle formed by atoms A, B, and C,; and \(\bar{r}_{ABC}\) is the geometric mean of the corresponding atomic-pair distances.; The dispersion coefficients are defined as. \[C_{9}^{ABC} = \sqrt{C_{6}^{AB}C_{6}^{BC}C_{6}^{AC}}\]; See the DFT-D3 documentation; for more details.; For now, the three-body correction can be called by using the run_dftd3(); function with d3-atmgr as the passed functional string.; For example, the three-body ATM dispersion correction for a neon trimer could; be computed with:; molecule ne3 {; Ne 0.0 0.0 0.0; Ne 0.0 0.0 1.0; Ne 0.0 1.0 1.0; }; ne.update_geometry(); energy = m.run_dftd3('d3-atmgr', dertype=0); print(energy). Since v1.7, it is preferred to use s-dftd3 for ATM since the 3-body can be run concurrent; with the 2-body contribution.; Footnotes. [1]; Note that there are functionals with these extensions (e.g., wB97X-D) that,; not being Grimme corrections, won’t follow this table exactly. [2]; [Grimme:2004:1463]. [3]; [Grimme:2006:1787]. [4]; (1,2); [Grimme:2010:154104]. [5]; (1,2); [Grimme:2011:1456]. [6]; (1,2,3,4); [Smith:2016:2197]. [7]; [Hujo:2011:3866]. [8]; [Chai:2010:6615]. [9]; [Pernal:2009:263201]. [10]; [Podeszwa:2010:550]. [11]; Keyword not used for user-defined functionals where the dft_dict[""dispersion""][""params""]; is easily editable for this purpose. See Advanced Functional Use and Manipulation. [12]; [Caldeweyher:2019:154122]. A few practical examples:. DFT-D2 single point with default parameters (dftd3 not called); energy('bp86-d'). DFT-D3BJ optimization with default parameters; optimize('pbe-d3bj'). DFT-D2 optimization with custom s6 parameter; set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). DFT-D3ZERO single point (b3lyp) with cus",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/dftd3.html:10959,concurren,concurrent,10959,psi4manual/1.7.x/dftd3.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/dftd3.html,2,['concurren'],['concurrent']
Performance,"approximation code; ; clean(...); clean() -> None :; Function to remove scratch files. Call between independent jobs.; ; close_outfile(...); close_outfile() -> None :; Closes the output file.; ; dcft(...); dcft() -> float :; Runs the density cumulant functional theory code.; ; deriv(...); deriv() -> int :; Runs deriv, which contracts density matrices with derivative integrals, to compute gradients.; ; detci(...); detci() -> float :; Runs the determinant-based configuration interaction code.; ; dfmp2(...); dfmp2() -> float :; Runs the DF-MP2 code.; ; dfmp2grad(...); dfmp2grad() -> float :; Runs the DF-MP2 gradient.; ; fd_1_0(...); fd_1_0( (list)arg1) -> PsiReturnType :; Performs a finite difference gradient computation, from energy points.; ; fd_freq_0(...); fd_freq_0( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from energy points, for a given irrep.; ; fd_freq_1(...); fd_freq_1( (list)arg1, (int)arg2) -> PsiReturnType :; Performs a finite difference frequency computation, from gradients, for a given irrep.; ; fd_geoms_1_0(...); fd_geoms_1_0() -> matrix_vector :; Gets the list of displacements needed for a finite difference gradient computation, from energy points.; ; fd_geoms_freq_0(...); fd_geoms_freq_0( (int)arg1) -> matrix_vector :; Gets the list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep.; ; fd_geoms_freq_1(...); fd_geoms_freq_1( (int)arg1) -> matrix_vector :; Gets the list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep; ; fd_geoms_hessian_0(...); fd_geoms_hessian_0() -> matrix_vector :; Gets the list of displacements needed fof a finite difference frequency computation, from energy points.; ; fd_hessian_0(...); fd_hessian_0( (list)arg1) -> PsiReturnType :; Performs a finite difference frequency computation, from energy points.; ; flush_outfile(...); flush_outfile() -> None :; Flushes the ou",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/psimod-1.html:106023,Perform,Performs,106023,psi4manual/4.0b3/psimod-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psimod-1.html,2,['Perform'],['Performs']
Performance,"ar or array QCVariable key has been set in global memory. initialize(); Called upon psi4 module import to initialize timers, singletons, and I/O. legacy_wavefunction(); Returns the current legacy_wavefunction object from the most recent computation. mcscf(arg0); Runs the MCSCF code, (N.B. mrcc_generate_input(arg0, arg1); Generates an input for Kallay's MRCC code. mrcc_load_densities(arg0, arg1); Reads in the density matrices from Kallay's MRCC code. occ(ref_wfn); Runs the orbital optimized CC codes. opt_clean(); Cleans up the optimizer's scratch files. option_exists_in_module(module, key); Whether keyword key is a valid keyword for module. options_to_python(arg0); Get dictionary of whether options of module have changed. optking(); Runs the geometry optimization code. outfile_name(); Returns the name of the output file. plugin(arg0, arg1); Call the plugin of name arg0. plugin_close(arg0); Close the plugin of name arg0. plugin_close_all(); Close all open plugins. plugin_load(arg0); Load the plugin of name arg0. prepare_options_for_module(name); Sets up the options library to return options pertaining to the module or plugin name (e.g. print_global_options(); Prints the currently set global (all modules) options to the output file. print_options(); Prints the currently set options (to the output file) for the current module. print_out(arg0); Prints a string (using sprintf-like notation) to the output file. print_variables(); Prints to output file all QCVariables that have been set in global memory. psi_top_srcdir(); Returns the location of the source code. psimrcc(arg0); Runs the multireference coupled cluster code. reopen_outfile(); Reopens the output file. revoke_global_option_changed(key); Clear the touched status for keyword key at global (all-module) scope. revoke_local_option_changed(module, key); Clear the touched status for keyword key at module scope. run_gdma(ref_wfn, datfilename); Runs the GDMA interface code. sapt(dimer_wfn, monoa_wfn, monob_wfn); Runs the ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/psi4api-1.html:7810,Load,Load,7810,psi4manual/1.5.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/psi4api-1.html,3,['Load'],['Load']
Performance,"ar or array QCVariable key has been set in global memory. initialize(); Called upon psi4 module import to initialize timers, singletons, and I/O. legacy_wavefunction(); Returns the current legacy_wavefunction object from the most recent computation. mcscf(arg0); Runs the MCSCF code, (N.B. mrcc_generate_input(arg0, arg1); Generates an input for Kallay’s MRCC code. mrcc_load_densities(arg0, arg1); Reads in the density matrices from Kallay’s MRCC code. occ(ref_wfn); Runs the orbital optimized CC codes. opt_clean(); Cleans up the optimizer’s scratch files. option_exists_in_module(module, key); Whether keyword key is a valid keyword for module. options_to_python(arg0); Get dictionary of whether options of module have changed. optking(); Runs the geometry optimization code. outfile_name(); Returns the name of the output file. plugin(arg0, arg1); Call the plugin of name arg0. plugin_close(arg0); Close the plugin of name arg0. plugin_close_all(); Close all open plugins. plugin_load(arg0); Load the plugin of name arg0. prepare_options_for_module(name); Sets up the options library to return options pertaining to the module or plugin name (e.g. print_global_options(); Prints the currently set global (all modules) options to the output file. print_options(); Prints the currently set options (to the output file) for the current module. print_out(arg0); Prints a string (using sprintf-like notation) to the output file. print_variables(); Prints to output file all QCVariables that have been set in global memory. psi_top_srcdir(); Returns the location of the source code. psimrcc(arg0); Runs the multireference coupled cluster code. reopen_outfile(); Reopens the output file. revoke_global_option_changed(key); Clear the touched status for keyword key at global (all-module) scope. revoke_local_option_changed(module, key); Clear the touched status for keyword key at module scope. run_gdma(ref_wfn, datfilename); Runs the GDMA interface code. sapt(dimer_wfn, monoa_wfn, monob_wfn); Runs the ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/psi4api-1.html:7723,Load,Load,7723,psi4manual/1.4.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/psi4api-1.html,2,['Load'],['Load']
Performance,"aram filename: destination file name for file11 file. :param wfn: set of molecule, gradient from which to generate file11. :examples:. >>> # [1] file11 for CISD calculation; >>> G, wfn = gradient('cisd', return_wfn=True); >>> fake_file11(wfn, 'mycalc.11'). """"""; molecule = wfn.molecule(); molecule.update_geometry(); gradient = wfn.gradient(). with open(filename, 'w') as handle:; handle.write('%d\n' % (molecule.natom())). for at in range(molecule.natom()):; handle.write('%6s %16.8f %16.8f %16.8f\n' % (molecule.symbol(; at), molecule.x(at), molecule.y(at), molecule.z(at))). for at in range(molecule.natom()):; handle.write('%6s %16.8f %16.8f %16.8f\n' % (; '', gradient.get(at, 0), gradient.get(at, 1), gradient.get(at, 2))). [docs]; def sherrill_gold_standard(**kwargs) -> CBSMetadata:; r""""""Function to call the quantum chemical method known as 'Gold Standard'; in the Sherrill group. Uses the composite wrapper to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to :py:func:`~psi4.driver.driver_cbs_helper.corl_xtpl_helgaker_2`. .. math:: E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}. >>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). >>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). """"""; scf = {; 'wfn': 'hf',; 'basis': kwargs.pop('scf_basis', 'aug-cc-pVQZ'),; 'scheme': kwargs.pop('scf_scheme', 'xtpl_highest_1'),; 'options': kwargs.pop('scf_options', {}),; }; corl = {; 'wfn': kwargs.pop('corl_wfn', 'mp2'),; 'basis': kwargs.pop('corl_basis', 'aug-cc-pV[TQ]Z'),; 'scheme': kwargs.pop('corl_scheme",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/aliases.html:2956,perform,performed,2956,psi4manual/1.8.x/_modules/psi4/driver/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/aliases.html,3,['perform'],['performed']
Performance,"arameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dft1; DFT Functional Test all values update for new BraggSlater radii. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dft-jk; DFT JK on-disk test. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. scf-response2; Compute the dipole polarizability for water with custom basis set. fcidump; test FCIDUMP functionality for rhf/uhf. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. dft2; DFT Functional Test. fd-gradient; SCF STO-3G finite-difference tests. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:26424,optimiz,optimized,26424,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['optimiz'],['optimized']
Performance,"ard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). """"""; scf = {; 'wfn': 'hf',; 'basis': kwargs.pop('scf_basis', 'aug-cc-pVQZ'),; 'scheme': kwargs.pop('scf_scheme', 'xtpl_highest_1'); }; corl = {; 'wfn': kwargs.pop('corl_wfn', 'mp2'),; 'basis': kwargs.pop('corl_basis', 'aug-cc-pV[TQ]Z'),; 'scheme': kwargs.pop('corl_scheme', 'corl_xtpl_helgaker_2'); }; delta = {; 'wfn': kwargs.pop('delta_wfn', 'ccsd(t)'),; 'wfn_lesser': kwargs.pop('delta_wfn_lesser', 'mp2'),; 'basis': kwargs.pop('delta_basis', 'aug-cc-pVTZ'),; 'scheme': kwargs.pop('delta_scheme', 'xtpl_highest_1'); }. return [scf, corl, delta]. [docs]def allen_focal_point(**kwargs) -> CBSMetadata:; r""""""Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306, https://doi.org/10.1063/1.2747241 .; Uses the composite wrapper to evaluate the following; expression. SCF employs a three-point extrapolation according; to :py:func:`~psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_3`. MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; :py:func:`~psi4.driver.driver_cbs_helper.corl_xtpl_helgaker_2`. CCSDT and CCSDT(Q); are plain deltas. This wrapper requires :ref:`Kallay's MRCC code <sec:mrcc>`. .. math:: E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}. >>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). >>> # [2] single-point energy reducing the Hartree-Fock basis sets size; >>> energy('allen_focal_point', scf_basis='cc-pV[TQ5]Z'). """"""; import psi4; if not psi4.addons(""mrcc""):; raise ImportError(""Install MRCC (executable 'dmrcc') to use the allen_focal_point function.""). # Note: HF and MP2 steps (which do",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/aliases.html:4586,perform,performed,4586,psi4manual/1.7.x/_modules/psi4/driver/aliases.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/aliases.html,1,['perform'],['performed']
Performance,"arded if ghost is false. fchk(wfn, filename); Function to write wavefunction information in wfn to filename in Gaussian FCHK format. filter_comments(string); Remove from string any Python-style comments (‘#’ to end of line). find_approximate_string_matches(seq1, ...); Function to compute approximate string matches from a list of options. freq(name, **kwargs); Function to compute harmonic vibrational frequencies. frequencies(name, **kwargs); Function to compute harmonic vibrational frequencies. frequency(name, **kwargs); Function to compute harmonic vibrational frequencies. gdma(wfn[, datafile]); Function to use wavefunction information in wfn and, if specified, additional commands in filename to run GDMA analysis. geometry(geom[, name]); Function to create a molecule object of name name from the geometry in string geom. getFromDict(dataDict, mapList). get_memory(); Function to return the total memory allocation. gradient(name, **kwargs); Function complementary to :py:func:~driver.optimize(). hessian(name, **kwargs); Function complementary to frequency(). join_path(prefix, *args). levenshtein(seq1, seq2); Function to compute the Levenshtein distance between two strings. molden(wfn[, filename, density_a, ...]); Function to write wavefunction information in wfn to filename in molden format. molecule_get_attr(self, name); Function to redefine __getattr__ method of molecule class. molecule_set_attr(self, name, value); Function to redefine __setattr__ method of molecule class. oeprop(wfn, *args, **kwargs); Evaluate one-electron properties. opt(name, **kwargs); Function to perform a geometry optimization. optimize(name, **kwargs); Function to perform a geometry optimization. pcm_helper(block); Passes multiline string block to PCMSolver parser. print_stderr(stuff); Function to print stuff to standard error stream. print_stdout(stuff); Function to print stuff to standard output stream. process_input(raw_input[, print_level]); Function to preprocess raw input, the text of the ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/psi4api-1.html:198788,optimiz,optimize,198788,psi4manual/1.1.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/psi4api-1.html,2,['optimiz'],['optimize']
Performance,"are an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database, database(); finite difference operation of Geometry Optimization, optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis, frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis, frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. Previous topic; Function Intercalls; Next topic; cubeprop() Generation of cube files. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/sowreap-1.html:1495,Optimiz,Optimization,1495,psi4manual/1.0.0/sowreap-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/sowreap-1.html,4,"['Optimiz', 'optimiz']","['Optimization', 'optimize']"
Performance,"are connected (directly or indirectly). Type: double; Default: 1.8. INTERFRAG_DIST_INV¶. Do use \(\frac{1}{R_{AB}}\) for the stretching coordinate between fragments? Otherwise, use \(R_{AB}\). Type: boolean; Default: false. INTERFRAG_HESS¶. Model Hessian to guess interfragment force constants. Type: string; Possible Values: DEFAULT, FISCHER_LIKE; Default: DEFAULT. INTERFRAG_MODE¶. When interfragment coordinates are present, use as reference points either principal axes or fixed linear combinations of atoms. Type: string; Possible Values: FIXED, PRINCIPAL_AXES; Default: FIXED. Misc.¶. FINAL_GEOM_WRITE¶. Do save and print the geometry from the last projected step at the end of a geometry optimization? Otherwise (and by default), save and print the previous geometry at which was computed the gradient that satisfied the convergence criteria. Type: boolean; Default: false. FIXED_COORD_FORCE_CONSTANT¶. In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. KEEP_INTCOS¶. Keep internal coordinate definition file. Type: boolean; Default: false. LINESEARCH_STATIC_MAX¶. If doing a static line search, this fixes the largest step, whose largest change in an internal coordinate is set to this value (in au). Type: double; Default: 0.100. LINESEARCH_STATIC_MIN¶. If doing a static line search, this fixes the shortest step, whose largest change in an internal coordinate is set to this value (in au). Type: double; Default: 0.001. LINESEARCH_STATIC_N¶. If doing a static line search, scan this many points. Type: integer; Default: 8. TEST_B¶. Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B¶. Do test derivative B matrix?. Type: boolean; Default: false. table of contents. OPTKING; Optimization Algorithm; CONSECUTIVE_BACKSTEPS; DYNAMIC_LEVEL; ENSURE_BT_CONVERGENCE; FIXED_BEND; FIXED_DIHEDRAL; FIXED_DISTANCE; FROZEN_BEN",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__optking-1.html:9093,optimiz,optimizations,9093,psi4manual/1.1.0/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__optking-1.html,11,['optimiz'],['optimizations']
Performance,"are two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; print(""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); sys.exit(1); success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if(expected != computed):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); sys.exit(1); success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; print(""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); sys.exit(1); if (expected.symmetry() != computed.symmetry()):; print(""\t%s has %d symmetry, but %s has %d\n."" % (expected.name(), expected.symmetry(), computed.name(), computed.symmetry())); sys.exit(1); nirreps = expected.nirrep(); symmetry = expected.symmetry(); for irrep in range(nirreps):; if(expected.rows(irrep) != computed.rows(irrep)):; print(""\t%s has %d rows in irrep %d, but %s has %d\n."" % (expected.name(), expected.rows(irrep), irrep, computed.name(), computed.rows(irrep))); sys.exit(1); if(expected.cols(irrep ^ symmetry) != computed.cols(irrep ^ symmetry)):; print(""\t%s has %d columns in irrep, but %s has %d\n."" % (expected.name(), expected.cols(irrep), irrep, computed.name(), computed.cols(irrep))); sys.exit(1); rows ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/util.html:2854,Perform,Performs,2854,psi4manual/4.0b3/_modules/util.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/util.html,3,['Perform'],['Performs']
Performance,"arg0); Set equal to a clockwise rotation by theta. sigma_xy(self); Set equal to reflection in xy plane. sigma_xz(self); Set equal to reflection in xz plane. sigma_yz(self); Set equal to reflection in yz plane. trace(self); Returns trace of transformation matrix. transform(self, arg0); Performs the transform arg2 * arg1 * arg2~. transpose(self); Performs transposition of matrix operation. unit(self); Set equal to a unit matrix. zero(self); Zero out the symmetry operation. Methods Documentation. E(self: psi4.core.SymmetryOperation) → None¶; Set equal to E. c2_x(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the x axis. c2_y(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the y axis. c2_z(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the z axis. i(self: psi4.core.SymmetryOperation) → None¶; Set equal to an inversion. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None¶; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryOperation, arg0: float) → None¶; Set equal to a clockwise rotation by theta. sigma_xy(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xy plane. sigma_xz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xz plane. sigma_yz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in yz plane. trace(self: psi4.core.SymmetryOperation) → float¶; Returns trace of transformation matrix. transform(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the transform arg2 * arg1 * arg2~. transpose(self: psi4.core.SymmetryOperation) → None¶; Performs transposition of matrix operation. unit(self: psi4.core.SymmetryOperation) → None¶; Set equal to a unit matrix. zero(self: psi4.core.SymmetryOperation) → None¶; Zero out ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.symmetryoperation.html:1683,Perform,Performs,1683,psi4manual/1.2.1/api/psi4.core.symmetryoperation.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.symmetryoperation.html,1,['Perform'],['Performs']
Performance,"arg0: psi::Wavefunction, arg1: dict) → psi4.core.PsiReturnType¶; Reads in the density matrices from Kallay’s MRCC code. psi4.core.occ(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the orbital optimized CC codes. psi4.core.opt_clean() → None¶; Cleans up the optimizer’s scratch files. psi4.core.option_exists_in_module(arg0: str, arg1: str) → bool¶; Given a string of a keyword name arg1 and a particular module arg0, returns whether arg1 is a valid option for arg0. psi4.core.optking() → int¶; Runs the geometry optimization / frequency analysis code. psi4.core.outfile_name() → str¶; Returns the name of the output file. psi4.core.plugin(arg0: str, arg1: psi::Wavefunction) → psi::Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. psi4.core.plugin_close(arg0: str) → None¶; Close the plugin of name arg0. psi4.core.plugin_close_all() → None¶; Close all open plugins. psi4.core.plugin_load(arg0: str) → int¶; Load the plugin of name arg0. Returns 0 if not loaded, 1 if loaded, 2 if already loaded. psi4.core.prepare_options_for_module(arg0: str) → None¶; Sets the options module up to return options pertaining to the named argument (e.g. SCF). psi4.core.print_global_options() → None¶; Prints the currently set global (all modules) options to the output file. psi4.core.print_options() → None¶; Prints the currently set options (to the output file) for the current module. psi4.core.print_out(arg0: str) → None¶; Prints a string (using sprintf-like notation) to the output file. psi4.core.print_variables() → None¶; Prints all PSI variables that have been set internally. psi4.core.psi_top_srcdir() → str¶; Returns the location of the source code. psi4.core.psimrcc(arg0: psi::Wavefunction) → float¶; Runs the multireference coupled cluster code. psi4.core.reopen_outfile() → None¶; Reopens the output file. psi4.core.revoke_global_option_changed(arg0: str) → None¶; Given a string of a keyword name arg1, sets the has_changed attribute in the global options scope to",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/psi4api-1.html:233602,load,loaded,233602,psi4manual/1.2.1/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/psi4api-1.html,12,['load'],['loaded']
Performance,"arg1, arg2, arg3, arg4, arg5, ...); docstring. DTBSV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRMM(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRMV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRSM(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRSV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. IDAMAX(arg0, arg1, arg2, arg3); docstring. array_variable(key); Returns copy of the Matrix QCVariable key (case-insensitive); prefer variable(). array_variables(); Returns dictionary of all Matrix QCVariables; prefer variables(). be_quiet(); Redirects output to /dev/null. benchmark_blas1(max_dim, min_time); Perform benchmark traverse of BLAS 1 routines. benchmark_blas2(max_dim, min_time); Perform benchmark traverse of BLAS 2 routines. benchmark_blas3(max_dim, min_time[, nthread]); Perform benchmark traverse of BLAS 3 routines. benchmark_disk(max_dim, min_time); Perform benchmark of PSIO disk performance. benchmark_integrals(max_am, min_time); Perform benchmark of psi integrals (of libmints type). benchmark_math(min_time); Perform benchmark of common double floating point operations including most of cmath. ccdensity(ref_wfn); Runs the code to compute coupled cluster density matrices. ccenergy(ref_wfn); Runs the coupled cluster energy code. cceom(ref_wfn); Runs the equation of motion coupled cluster code for excited states. cchbar(ref_wfn); Runs the code to generate the similarity transformed Hamiltonian. cclambda(ref_wfn); Runs the coupled cluster lambda equations code. ccresponse(ref_wfn); Runs the coupled cluster response theory code. cctransort(ref_wfn); Runs cctransort that transforms and reorders integrals for use in the coupled cluster codes. cctriples(ref_wfn); Runs the coupled cluster (T) energy code. clean(); Remove scratch files. clean_options(); Reset options to clean state. clean_timers(); Reinitialize timers for independent timer.dat entries. clean_variables(); Empties all double and Matrix QCVariables that have been ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/psi4api.html:2841,Perform,Perform,2841,psi4manual/master/psi4api.html,https://psicode.org,https://psicode.org/psi4manual/master/psi4api.html,4,['Perform'],['Perform']
Performance,"args):; r""""""; Detects fragments if the user does not supply them.; Currently only used for the WebMO implementation of SAPT. usage: auto_fragments(''); """"""; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = psi4.get_active_molecule(); molecule.update_geometry(). geom = molecule.save_string_xyz(). numatoms = molecule.natom(); VdW = [1.2, 1.7, 1.5, 1.55, 1.52, 1.9, 1.85, 1.8]. symbol = range(numatoms); X = [0.0] * numatoms; Y = [0.0] * numatoms; Z = [0.0] * numatoms. Queue = []; White = []; Black = []; F = geom.split('\n'); for f in range(0, numatoms):; A = F[f+1].split(); symbol[f] = A[0]; X[f] = float(A[1]); Y[f] = float(A[2]); Z[f] = float(A[3]); White.append(f); Fragment = [[] for i in range(numatoms)] # stores fragments. start = 0 # starts with the first atom in the list; Queue.append(start); White.remove(start). frag = 0. while((len(White) > 0) or (len(Queue) > 0)): # Iterates to the next fragment; while(len(Queue) > 0): # BFS within a fragment; for u in Queue: # find all nearest Neighbors; # (still coloured white) to vertex u; for i in White:; Distance = math.sqrt((X[i] - X[u]) * (X[i] - X[u]) +; (Y[i] - Y[u]) * (Y[i] - Y[u]) +; (Z[i] - Z[u]) * (Z[i] - Z[u])); if Distance < convert(u,symbol) + convert(i,symbol):; Queue.append(i) # if you find you, put it in the que; White.remove(i) # and remove it from the untouched list; Queue.remove(u) # remove focus from Queue; Black.append(u); Fragment[frag].append(int(u + 1)) # add to group (adding 1 to start; # list at one instead of zero). if(len(White) != 0): # cant move White->Queue if no more exist; Queue.append(White[0]); White.remove(White[0]); frag += 1. new_geom = """"""\n0 1\n""""""; for i in Fragment[0]:; new_geom = new_geom + F[i].lstrip() + """"""\n""""""; new_geom = new_geom + """"""--\n0 1\n""""""; for j in Fragment[1]:; new_geom = new_geom + F[j].lstrip() + """"""\n""""""; new_geom = new_geom + """"""units angstrom\n"""""". new_mol = geometry(new_geom); new_mol.print_out(); psi4.print_out(""Exitin",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:3457,Queue,Queue,3457,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,3,['Queue'],['Queue']
Performance,"args, **kwargs); Overloaded function. get(self: psi4.core.Matrix, h: int, m: int, n: int) -> float. Returns a single element of a matrix in subblock h, row m, col n. get(self: psi4.core.Matrix, m: int, n: int) -> float. Returns a single element of a matrix, row m, col n. get_block(self: psi4.core.Matrix, rows: psi4.core.Slice, cols: psi4.core.Slice) → psi4.core.Matrix; Get a matrix block. hermitivitize(self: psi4.core.Matrix) → None; Average off-diagonal element in-place. identity(self: psi4.core.Matrix) → None; Sets the matrix to the identity. invert(self: psi4.core.Matrix) → None; Computes the inverse of a real symmetric positive definite matrix. load(*args, **kwargs); Overloaded function. load(self: psi4.core.Matrix, filename: str) -> None. Loads a block matrix from an ASCII file (see tests/mints3 for format). load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, tocentry: str, nso: int) -> bool. Load a matrix from a PSIO object from fileno with tocentry of size nso. load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, savetype: psi4.core.SaveType=SaveType.LowerTriangle) -> None. Load a matrix from a PSIO object from fileno and with toc position of the name of the matrix. load_mpqc(self: psi4.core.Matrix, filename: str) → None; Loads a matrix from an ASCII file in MPQC format. name; The name of the Matrix. Used in printing. nirrep(self: psi4.core.Matrix) → int; Returns the number of irreps. np; View without only one irrep. classmethod np_read(filename, prefix=''); Reads the data from a NumPy compress file. np_write(filename=None, prefix=''); Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. nph; View with irreps. partial_cholesky_factorize(self: psi4.core.Matrix, delta: float=0.0, throw_if_negative: bool=False) → psi4.core.Matrix; Computes the fully pivoted partial Cholesky factorization of a real symmetric positive semidefinite matrix, to numerical precision delta. power(sel",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.matrix.html:21762,load,load,21762,psi4manual/1.2.1/api/psi4.core.matrix.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.matrix.html,1,['load'],['load']
Performance,"ariables, OMP3. Introduction¶; Orbital-optimized methods have several advantages over non-optimized counterparts.; Once the orbitals are optimized, the wave function will obey the Hellmann-Feynman theorem; for orbital rotation parameters. Therefore, there is no need for orbital response terms; in the evaluation of analytic gradients. In other words, it is unnecessary to solve the; first order coupled-perturbed CC and many-body perturbation theory (MBPT) equations.; Further, computation of one-electron properties is easier because there are no response contributions to the particle; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods; [Krylov:2000:vod]. Additionally, orbital-optimized coupled-cluster avoids spurious second-order; poles in its response function, and its transition dipole moments are gauge invarianti [Pedersen:1999:od].; Another advantage is that the orbital-optimized methods does not suffer from the artifactual symmetry-breaking; instabilities [Sherrill:1998:od], [Bozkaya:2011:omp2], and [Bozkaya:2011:omp3].; Further, Kurlancheek and Head-Gordon [Kurlancek:2009] demonstrated that first order properties such as; forces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs.; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further; discussed that the orbital response equations generally have a singularity problem at the unrestriction point; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or; small eigenvalues of the one-particle density matrix (OPDM). These abnormal eigenvalues may lead to unphysical; molecular properties such as vibrational frequencies. However, orbital optimized MP2 (hence Orbital optimized MP3); will solve this N-repres",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/ompn-1.html:1333,optimiz,optimized,1333,psi4manual/4.0b3/ompn-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/ompn-1.html,2,['optimiz'],['optimized']
Performance,"arisonError(message); rows = expected.rows(irrep); cols = expected.cols(irrep ^ symmetry); failed = 0; for row in range(rows):; for col in range(cols):; if(abs(expected.get(irrep, row, col) - computed.get(irrep, row, col)) > 10 ** (-digits)):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, expected.get(irrep, row, col), computed.get(irrep, row, col))); failed = 1; break. if(failed):; print(""Check your output file for reporting of the matrices.""); psi4.print_out(""The Failed Test Matrices\n""); psi4.print_out(""Computed Matrix (2nd matrix passed in)\n""); computed.print_out(); psi4.print_out(""Expected Matrix (1st matrix passed in)\n""); expected.print_out(); raise TestComparisonError(""\n""); success(label). [docs]def compare_vectors(expected, computed, digits, label):; """"""Function to compare two vectors. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); raise TestComparisonError(message); nirreps = expected.nirrep(); for irrep in range(nirreps):; if(expected.dim(irrep) != computed.dim(irrep)):; message = (""\tThe reference has %d entries in irrep %d, but the computed vector has %d\n."" % (expected.dim(irrep), irrep, computed.dim(irrep))); raise TestComparisonError(message); dim = expected.dim(irrep); failed = 0; for entry in range(dim):; if(abs(expected.get(irrep, entry) - computed.get(irrep, entry)) > 10 ** (-digits)):; failed = 1; break. if(failed):; psi4.print_out(""The computed vector\n""); computed.print_out(); psi4.print_out(""The reference vector\n""); expected.print_out(); message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed.get(irrep, entry), exp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html:7413,Perform,Performs,7413,psi4manual/1.0.0/_modules/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html,1,['Perform'],['Performs']
Performance,"ark the error; }. energy('b3lyp'). ERI Algorithms¶; The ERI algorithms for the Coulomb and hybrid exchange are identical to; those for Hartree–Fock. However, for LRC functionals, the long-range; exchange contributions to the Kohn–Sham matrix have only been implemented in the; DF and DIRECT algorithms. The use of DF is highly recommended for KS-DFT, as the; errors incurred by the density fitting approximation (in a proper -JKFIT; auxiliary basis) are orders of magnitude smaller than the accuracy of any known; functional.; Note: gradients with LRC functionals and DF integrals technology are not; currently enabled. We hope to have a patch for this deficit soon. Please let us; know if you have a strong need for this capability, and we will move the; priority up. IP Fitting¶; In collaboration with the Bredas group, we have developed an automatic procedure; for IP fitting of LRC functionals, based on a modified Regula-Falsi method. To; perform IP fitting, one simply calls the ip_fitting() Python macro, after; setting up a standard LRC UKS computation. A representative example is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20memory 512 MB; from frac import *. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c1 # IP fitting must be run in C1 symmetry; }. set {; reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; dft_functional wb97; }. # Arguments are molecule object, minimum omega, maximum omega; ip_fitting(h2o, 0.4, 2.0). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various values; of \(\omega\), though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; \(\omega\). The procedure can also be assisted by providing a tighter guess; for the bounds of \(\omega\). This small test case has a tuned; \(\omega\) of 1.700, hence the bounds of ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/dft-1.html:22312,perform,perform,22312,psi4manual/1.1.0/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/dft-1.html,2,['perform'],['perform']
Performance,"ark the error; }. energy('b3lyp'). ERI Algorithms¶; The ERI algorithms for the Coulomb and hybrid exchange are identical to; those for Hartree–Fock. However, for LRC functionals, the long-range; exchange contributions to the Kohn–Sham matrix have only been implemented in the; DF and DIRECT algorithms. The use of DF is highly recommended for KS-DFT, as the; errors incurred by the density fitting approximation (in a proper -JKFIT; auxiliary basis) are orders of magnitude smaller than the accuracy of any known; functional.; Note: gradients with LRC functionals and DF integrals technology are not; currently enabled. We hope to have a patch for this deficit soon. Please let us; know if you have a strong need for this capability, and we will move the; priority up. IP Fitting¶; In collaboration with the Bredas group, we have developed an automatic procedure; for IP fitting of LRC functionals, based on a modified Regula-Falsi method. To; perform IP fitting, one simply calls the ip_fitting() Python macro, after; setting up a standard LRC UKS computation. A representative example is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18memory 512 MB. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # IP fitting runs in C1 symmetry; }. set {; reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; }. # Optional arguments are minimum omega, maximum omega, molecule object; omega = ip_fitting('wb97', 0.4, 2.0, molecule=h2o). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various values; of \(\omega\), though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; \(\omega\). The procedure can also be assisted by providing a tighter guess; for the bounds of \(\omega\). This small test case has a tuned; \(\omega\) of 1.700, hence the bounds of 0.4 and 2.0. Lar",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/dft-1.html:22949,perform,perform,22949,psi4manual/1.2.1/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/dft-1.html,2,['perform'],['perform']
Performance,"arly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CPHF); CPHF — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (STABILITY); STABILITY —. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CACHETYPE (CPHF); CPHF — The criterion used to retain/release cached data. Type: string; Possible Values: LRU, LOW; Default: LRU. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. T",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html:10251,CACHE,CACHELEVEL,10251,psi4manual/4.0b5/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html,2,['CACHE'],['CACHELEVEL']
Performance,"arly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (STABILITY); STABILITY —. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:10414,CACHE,CACHELEVEL,10414,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,4,"['CACHE', 'cache']","['CACHELEVEL', 'cache']"
Performance,arning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbjatm. b3lyp-d3mzero2b. b3lyp-d3mzeroatm. b3lyp-d3opatm. b3lyp-d3zero2b. b3lyp-d3zeroatm. b3lyp-nl; B3LYP-nl Hyb-GGA Exchange-Correlation Functional. b3lyp5; B3LYP5 Hyb-GGA Exchange-Correlation Funct,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:3379,optimiz,optimized,3379,psi4manual/1.8.x/api/psi4.driver.opt.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html,3,['optimiz'],['optimized']
Performance,arning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbjatm. b3lyp-d3mzero2b. b3lyp-d3mzeroatm. b3lyp-d3zero2b. b3lyp-d3zeroatm. b3lyp-nl; B3LYP-nl Hyb-GGA Exchange-Correlation Functional. b3lyp5; B3LYP5 Hyb-GGA Exchange-Correlation Functional. b3lyps; ,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/opt.html:4068,optimiz,optimized,4068,psi4manual/master/opt.html,https://psicode.org,https://psicode.org/psi4manual/master/opt.html,9,['optimiz'],['optimized']
Performance,"array or list of NumPy arrays into a PSI4 Matrix or Vector (irrepped if list). from_list(x). from_serial(); Converts serialized data to the correct Psi4 data type :rtype: Union[Matrix, Vector]. gemm(self, transa, transb, alpha, a, b, beta); Generalized matrix multiplication argument transa Transpose the left matrix? argument transb Transpose the right matrix? argument alpha Prefactor for the matrix multiplication argument A Left matrix argument B Right matrix argument beta Prefactor for the resulting matrix. general_invert(self); Computes the inverse of any nonsingular matrix using LU factorization. get(*args, **kwargs); Overloaded function. get_block(self, rows, cols); Get a matrix block. hermitivitize(self); Average off-diagonal element in-place. hermitize(self); Makes a real matrix symmetric by averaging the matrix and its transpose. identity(self); Sets the matrix to the identity. invert(self); Computes the inverse of a real symmetric positive definite matrix. load(*args, **kwargs); Overloaded function. load_mpqc(self, filename); Loads a matrix from an ASCII file in MPQC format. nirrep(self); Returns the number of irreps. np_read([prefix]); Reads the data from a NumPy compressed or uncompressed file using numpy.load(). np_write([filename, prefix]); Writes the irrepped matrix to a NumPy uncompressed file using numpy.savez(). partial_cholesky_factorize(self[, delta, ...]); Computes the fully pivoted partial Cholesky factorization of a real symmetric positive semidefinite matrix, to numerical precision delta. power(self, alpha[, cutoff]); Takes the matrix to the alpha power with precision cutoff. print_atom_vector(self[, RMRoutfile]); Print the matrix with atom labels, assuming it is an natom X 3 tensor. print_out(self); Prints the matrix to the output file. pseudoinverse(self, condition, nremoved); Computes the matrix which is the conditioned pseudoinverse of this matrix. remove_symmetry(self, a, transformer); Remove symmetry from a matrix A with PetiteList::sotoa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/api/psi4.core.Matrix.html:2770,load,load,2770,psi4manual/1.9.x/api/psi4.core.Matrix.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/api/psi4.core.Matrix.html,1,['load'],['load']
Performance,"array; Default: No Default. FREEZE_CORE¶. Specifies how many core orbitals to freeze in correlated computations. TRUE will default to freezing the standard default number of core orbitals. For PSI, the standard number of core orbitals is the number of orbitals in the nearest previous noble gas atom. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. INTEGRAL_PACKAGE¶. Integral package to use. If compiled with ERD or Simint support, change this option to use them; LibInt is used otherwise. Type: string; Possible Values: ERD, LIBINT, SIMINT; Default: LIBINT. LITERAL_CFOUR¶. Text to be passed directly into CFOUR input files. May contain molecule, options, percent blocks, etc. Access through cfour {...} block. Type: string; Default: No Default. MOLDEN_WITH_VIRTUAL¶. Write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs (false). Type: boolean; Default: true. MP2_TYPE¶. Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE¶. Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__globals-1.html:3262,optimiz,optimized,3262,psi4manual/1.1.0/autodir_options_c/module__globals-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__globals-1.html,4,['optimiz'],['optimized']
Performance,"array; Default: No Default. FREEZE_CORE¶. Specifies how many core orbitals to freeze in correlated computations. TRUE will default to freezing the standard default number of core orbitals. For PSI, the standard number of core orbitals is the number of orbitals in the nearest previous noble gas atom. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. INTEGRAL_PACKAGE¶. Integral package to use. If compiled with ERD support, ERD is used where possible; LibInt is used otherwise. Type: string; Possible Values: ERD, LIBINT; Default: ERD. LITERAL_CFOUR¶. Text to be passed directly into CFOUR input files. May contain molecule, options, percent blocks, etc. Access through cfour {...} block. Type: string; Default: No Default. MP2_TYPE¶. Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE¶. Algorithm to use for MPn ( ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. NUM_FROZEN_DOCC¶. The number of core orbitals to freeze in later correlated computations. This trumps FREEZE_CORE. Type: integer; Default: 0. N",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__globals-1.html:3132,optimiz,optimized,3132,psi4manual/1.0.0/autodir_options_c/module__globals-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__globals-1.html,2,['optimiz'],['optimized']
Performance,"array; Default: No Default. FREEZE_CORE¶. Specifies how many core orbitals to freeze in correlated computations. TRUE will default to freezing the standard default number of core orbitals. For PSI, the standard number of core orbitals is the number of orbitals in the nearest previous noble gas atom. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. NUM_FROZEN_DOCC¶. The number of core orbitals to freeze in later correlated computations. This trumps FREEZE_CORE. Type: integer; Default: 0. NUM_FROZEN_UOCC¶. The number of virtual orbitals to freeze in later correlated computations. Type: integer; Default: 0. PRINT¶. The amount of information to print to the output file. 1 prints basic information, and higher levels print more information. A value of 5 will print very large amounts of debugging information. Type: integer; Default: 1. PROPERTIES¶. List of properties to compute. Type: array; Default: No Default. PROPERTIES_ORIGIN¶. Either a set of 3 coordinates, or a string (see manual) describing the origin about which one-electron properties are computed. Type: array; Default: No Default. PUREAM¶. Do use pure angular momentum basis functions? If not explicitly set, the default comes from the",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__globals-1.html:1447,optimiz,optimized,1447,psi4manual/4.0b4/autodir_options_c/module__globals-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__globals-1.html,4,['optimiz'],['optimized']
Performance,"art of any coupled cluster computation. General¶. ABCD¶. Type of ABCD algorithm will be used. Type: string; Possible Values: NEW, OLD; Default: NEW. ANALYZE¶. Do analyze T2 amplitudes. Type: boolean; Default: false. BCCD_MAXITER¶. Maximum number of iterations for Brueckner CCD. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CC_NUM_THREADS¶. Number of threads. Type: integer; Default: 1. CC_OS_SCALE¶. Coupled-cluster opposite-spin scaling value. Type: double; Default: 1.27. CC_SS_SCALE¶. Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. DIIS¶. Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. LOCAL¶. Do simu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__ccenergy-1.html:1207,cache,cache,1207,psi4manual/1.4.0/autodir_options_c/module__ccenergy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__ccenergy-1.html,9,['cache'],['cache']
Performance,"artial; Cholesky factorization of the density matrices is used. Often extremely; accurate, particularly for closed-shell systems. SADNONatural orbitals from Superposition of Atomic Densities. Similar; to the above, but it forms natural orbitals from the SAD density; matrix to get proper orbitals which are used to start the; calculation, see [Lehtola:2019:1593]. GWHA generalized Wolfsberg-Helmholtz modification of the core; Hamiltonian matrix. Usually less accurate than the core guess: the; latter is exact for one-electron systems, GWH is not; see; [Lehtola:2019:1593]). HUCKELAn extended Hückel guess based on on-the-fly atomic UHF; calculations alike SAD, see [Lehtola:2019:1593]. READRead the previous orbitals from a wfn file, casting from; one basis to another if needed. Useful for starting anion; computations from neutral orbitals, or after small geometry; changes. At present, casting from a different molecular point; group is not supported. This becomes the default for the second; and later iterations of geometry optimizations. SAPSuperposition of Atomic Potentials. This is essentially a; modification of the core Hamiltonian, which includes screening; effects by using a radially screened effective atomic charge. The; screening effects have been calculated at the complete basis set; limit with finite-element calculations, see [Lehtola:2019:25945]; and [Lehtola:2020:012516]. The guess and its implementation have; been described in [Lehtola:2019:1593]. The guess is evaluated on a; DFT quadrature grid, so the guess energy depends slightly on the; used DFT quadrature. The current implementation is based on; exchange-only local density calculations that are but nanohartree; away from the complete basis set limit [Lehtola:2020:012516]. These are all set by the GUESS keyword. Also, an automatic Python; procedure has been developed for converging the SCF in a small basis, and then; casting up to the true basis. This can be done by adding; BASIS_GUESS = SMALL_BASIS to the op",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/scf.html:18351,optimiz,optimizations,18351,psi4manual/1.6.x/scf.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/scf.html,2,['optimiz'],['optimizations']
Performance,"artree) to kcal mol-1 by multiplying by the; automatically-defined conversion factor psi_hartree2kcalmol. Psi4; provides several built-in physical constants and conversion factors, as; described in section Physical Constants.; Notice the loop over to create; the table looks just like the loop over R to run the different; computations, and the CP-corrected energies ecp[R] are accessed the same; way they were stored. The print line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section).; Our table is printed at the very end of the output file, and looks like; this; CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies. R (Ang) E_int (kcal/mol); -----------------------------------------------------; 2.5 0.757718; 3.0 0.015687; 4.0 -0.016264. The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easily in Psi4. Table Of Contents. A Psi4 Tutorial; Basic Input File Structure; Sample Input Files; Running a Basic Hartree–Fock Calculation; Geometry Optimization and Vibrational Frequency Analysis; Analysis of Intermolecular Interactions; Potential Surface Scans and Counterpoise Correction Made Easy with Psithon. Previous topic; Binary Distribution; Next topic; Psithon: Structuring an Input File. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » . © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/tutorial-1.html:22349,Optimiz,Optimization,22349,psi4manual/1.0.0/tutorial-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/tutorial-1.html,2,['Optimiz'],['Optimization']
Performance,"artree2kcalmol * (2*h_energy - h2_energy); print (""De = %f"" % D_e). h2 = psi4.geometry(""""""; H; H 1 0.9; """"""). psi4.set_options({""basis"": ""cc-pvdz"",; ""reference"": ""rhf""}); h2_energy = psi4.energy('scf'). h = psi4.geometry(""""""; H; """"""). psi4.set_options({""basis"": ""cc-pvdz"",; ""reference"": ""uhf""}); h_energy = psi4.energy('scf'). D_e = psi4.constants.hartree2kcalmol * (2*h_energy - h2_energy); print(""De = %f"" % D_e). The energy() function returns the final result of the; computation, the requested total energy in Hartrees, which we assign to a; Python variable. The two energies are then converted to a dissociation; energy and printed to the output file using standard Python notation.; Generally, there are multiple quantities of interest. Appendix; PSI Variables by Module lists PSI variables variables set by each; module, and PSI Variables by Alpha defines them. These can be; accessed through the variable() function. For example, after; performing a density fitted MP2 computation, both the spin component; scaled energy and the unscaled MP2 energy are made available. PSIthonPsiAPIe_mp2 = variable('MP2 TOTAL ENERGY'); e_scs_mp2 = variable('SCS-MP2 TOTAL ENERGY'). e_mp2 = psi4.variable('MP2 TOTAL ENERGY'); e_scs_mp2 = psi4.variable('SCS-MP2 TOTAL ENERGY'). Each module and the Python driver set PSI variables over the course of a; calculation. The values for all can be printed in the output file with; the input file command print_variables(). Note that PSI variables; are cleared at the start of each energy(), etc. in an input; file by clean_variables().; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a print_variables() command, the; last will include SCF TOTAL ENERGY but not; FCI TOTAL ENERGY.; The entire dictionary of PSI variables can be obtained through; get_variables(). Return Values¶; Most of the usual user computation functions (i.e.,; energy(), optimize(), and; frequency()) return simply the current total energy.; Consult t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/psithoninput.html:8990,perform,performing,8990,psi4manual/master/psithoninput.html,https://psicode.org,https://psicode.org/psi4manual/master/psithoninput.html,1,['perform'],['performing']
Performance,"ary Order Coupled-Cluster Theory. MCSCF: Multi-Configurational Self-Consistent-Field; Basic MCSCF Keywords. SAPT: Symmetry-Adapted Perturbation Theory; The S2 approximation and scaling; A First Example; Advanced example; SAPT0; SAPT(DFT); Higher-Order SAPT; MP2 Natural Orbitals; Charge-Transfer in SAPT; Monomer-Centered Basis Computations; Computations with Mid-bonds; Interpreting SAPT Results; Spin-Flip SAPT; Higher-Order Exchange Terms without Single-Exchange Approximation. F/I-SAPT: Functional Group and/or Intramolecular SAPT; F-SAPT: A Representative Example; Order-1 Visualization with PyMol; Difference F-SAPT Analysis; I-SAPT: A Representative Example; Cube File Visualization with PyMol; Adding Point Charges to F/I-SAPT Computations; Link Orbital Partitioning in I-SAPT; Other F/I-SAPT Keywords; Additional Notes. ADC: Ab Initio Polarization Propagator; Available ADC methods; Running ADC calculations; Interface to adcc. Scalar relativistic Hamiltonians; A First Example; Basis sets options; Theory. Geometry Optimization; Basic Keywords; Optimizing Minima; Hessian; Transition States and Reaction Paths; Constrained Optimizations; Multi-Fragment Optimizations; Dealing with problematic optimizations; Convergence Criteria; Interface to GeomeTRIC; Output; Important User Changes from cpp-optking. Evaluation of One-Electron Properties — oeprop(); Basic Keywords; Properties evaluated on a grid; Minimal Basis Iterative Stockholder. Vibrational and Thermochemical Analysis; Keywords; Examples; Output. TDSCF: Time-dependent Hartree–Fock and density-functional theory; Introduction; Known limitations; Theory; Psithon keywords; PsiAPI usage; Plotting one-photon absorption and electronic circular dichroism spectra. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/methods.html:3819,Optimiz,Optimization,3819,psi4manual/master/methods.html,https://psicode.org,https://psicode.org/psi4manual/master/methods.html,5,"['Optimiz', 'optimiz']","['Optimization', 'Optimizations', 'Optimizing', 'optimizations']"
Performance,"ary; (“scratch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. The PSI4 installation instructions explain how to set up a; resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file),; for each user providing this information.; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. The primary use of the ~/.psi4rc file is to control the; handling of scratch files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are sequentially; numbered and are written to /tmp, then deleted at the end of the computation,; unless otherwise instructed by the user.; A Python callable handle to the PSI4 I/O management routines is available,; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to the ~/.psi4rc; file (note the trailing “/”):; psi4_io.set_default_path('/scratch/user/'). For batch jobs runnin",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/external-1.html:1368,perform,performing,1368,psi4manual/4.0b2/external-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/external-1.html,2,['perform'],['performing']
Performance,"as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR); CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR); CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR); CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR); CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR); CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:47878,optimiz,optimizations,47878,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,12,['optimiz'],"['optimizations', 'optimizer']"
Performance,"as a function of . OMP2. OMP3. where , , and defined as. and first and second derivatives of the energy with respect to the parameter at . Then the energy can be expanded up to second-order as follows. where is the MO gradient vector, is the MO rotation vector,; and is the MO Hessian matrix. Therefore, minimizing the energy with respect to ; yields. This final equation corresponds to the usual Newton-Raphson step.; Publications resulting from the use of the OMP2 code should cite the following publication(s):; [Bozkaya:2011:omp2].; Publications resulting from the use of the OMP3 code should cite the following publications:; [Bozkaya:2011:omp2] and [Bozkaya:2011:omp3]. Methods¶; The orbital-optimized MP2 methods currently supported in PSI4 are outlined in Table OMP2 Methods. Name; Calls Method; Energy; Gradient; Reference. omp2; Orbital-Optimized MP2; Y; Y; RHF/UHF/RKS/UKS. scs-omp2; Spin-Component Scaled Orbital-Optimized MP2; Y; N; RHF/UHF/RKS/UKS. sos-omp2; Spin-Opposite Scaled Orbital-Optimized MP2; Y; N; RHF/UHF/RKS/UKS. scsn-omp2; A special version of SCS-OMP2 for nucleobase interactions; Y; N; RHF/UHF/RKS/UKS. scs-mi-omp2; A special version of SCS-OMP2 (from S22 database); Y; N; RHF/UHF/RKS/UKS. scs-omp2-vdw; A special version of SCS-OMP2 (from ethene dimers); Y; N; RHF/UHF/RKS/UKS. sos-pi-omp2; A special version of SOS-OMP2 for -systems; Y; N; RHF/UHF/RKS/UKS. The orbital-optimized MP3 methods currently supported in PSI4 are outlined in Table OMP3 Methods. Name; Calls Method; Energy; Gradient; Reference. omp3; Orbital-Optimized MP3; Y; N; RHF/UHF/RKS/UKS. scs-omp3; Spin-Component Scaled Orbital-Optimized MP3; Y; N; RHF/UHF/RKS/UKS. sos-omp3; Spin-Opposite Scaled Orbital-Optimized MP3; Y; N; RHF/UHF/RKS/UKS. scsn-omp3; A special version of SCS-OMP3 for nucleobase interactions; Y; N; RHF/UHF/RKS/UKS. scs-mi-omp3; A special version of SCS-OMP3 (from S22 database); Y; N; RHF/UHF/RKS/UKS. scs-omp3-vdw; A special version of SCS-OMP3 (from ethene dimers); Y; N; RHF/UH",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/ompn-1.html:4561,Optimiz,Optimized,4561,psi4manual/4.0b3/ompn-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/ompn-1.html,2,['Optimiz'],['Optimized']
Performance,"as a single s-function at the origin with an exponent of 0.0 and contraction of 1.0.; C++ signature :. N5boost10shared_ptrIN3psi8BasisSetEEE zero_ao_basis_set(). BasisSetParser¶. BoysLocalizer¶. psi4.BoysLocalizer.L()¶; Python Library Documentation: property. Localized orbital coefficients. psi4.BoysLocalizer.U()¶; Python Library Documentation: property. Orbital rotation matrix. psi4.BoysLocalizer.build()¶; Python Library Documentation: built-in function build; build(...). build( (str)arg1, (BasisSet)arg2, (Matrix)arg3) -> Localizer :. docstring; C++ signature :. N5boost10shared_ptrIN3psi9LocalizerEEE build(Ss,N5boost10shared_ptrIN3psi8BasisSetEEE,N5boost10shared_ptrIN3psi6MatrixEEE). psi4.BoysLocalizer.converged()¶; Python Library Documentation: property. Did the localization procedure converge?. psi4.BoysLocalizer.localize()¶; Python Library Documentation: method localize; localize(...) unbound psi4.BoysLocalizer method. localize( (Localizer)arg1) -> None :. Perform the localization procedure; C++ signature :. void localize(N3psi9LocalizerE {lvalue}). CIVector¶. psi4.CIVector.axpy()¶; Python Library Documentation: method axpy; axpy(...) unbound psi4.CIVector method. axpy( (CIVector)arg1, (float)arg2, (CIVector)arg3, (int)arg4, (int)arg5) -> None :. docstring; C++ signature :. void axpy(N3psi5detci6CIvectE {lvalue},d,N5boost10shared_ptrIN3psi5detci6CIvectEEE,i,i). psi4.CIVector.close_io_files()¶; Python Library Documentation: method close_io_files; close_io_files(...) unbound psi4.CIVector method. close_io_files( (CIVector)arg1, (int)arg2) -> None :. docstring; C++ signature :. void close_io_files(N3psi5detci6CIvectE {lvalue},i). psi4.CIVector.copy()¶; Python Library Documentation: method copy; copy(...) unbound psi4.CIVector method. copy( (CIVector)arg1, (CIVector)arg2, (int)arg3, (int)arg4) -> None :. docstring; C++ signature :. void copy(N3psi5detci6CIvectE {lvalue},N5boost10shared_ptrIN3psi5detci6CIvectEEE,i,i). psi4.CIVector.dcalc()¶; Python Library Documentati",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:59458,Perform,Perform,59458,psi4manual/1.0.0/autodoc_psimod-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html,2,['Perform'],['Perform']
Performance,"as computed the gradient that satisfied the convergence criteria. Type: boolean; Default: false. KEEP_INTCOS¶. Keep internal coordinate definition file. Type: boolean; Default: false. LINESEARCH_STATIC_MAX¶. If doing a static line search, this fixes the largest step, whose largest change in an internal coordinate is set to this value (in au). Type: double; Default: 0.100. LINESEARCH_STATIC_MIN¶. If doing a static line search, this fixes the shortest step, whose largest change in an internal coordinate is set to this value (in au). Type: double; Default: 0.001. LINESEARCH_STATIC_N¶. If doing a static line search, scan this many points. Type: integer; Default: 8. TEST_B¶. Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B¶. Do test derivative B matrix?. Type: boolean; Default: false. Table Of Contents. OPTKING; Optimization Algorithm; CONSECUTIVE_BACKSTEPS; FIXED_BEND; FIXED_DIHEDRAL; FIXED_DISTANCE; FROZEN_BEND; FROZEN_DIHEDRAL; FROZEN_DISTANCE; GEOM_MAXITER; INTERFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT_MAX; INTRAFRAG_STEP_LIMIT_MIN; IRC_DIRECTION; IRC_STEP_SIZE; IRC_STOP; OPT_TYPE; RFO_FOLLOW_ROOT; RFO_ROOT; STEP_TYPE. Convergence Control; FLEXIBLE_G_CONVERGENCE; G_CONVERGENCE; MAX_DISP_G_CONVERGENCE; MAX_ENERGY_G_CONVERGENCE; MAX_FORCE_G_CONVERGENCE; RMS_DISP_G_CONVERGENCE; RMS_FORCE_G_CONVERGENCE. Hessian Update; CART_HESS_READ; FULL_HESS_EVERY; HESS_UPDATE; HESS_UPDATE_LIMIT; HESS_UPDATE_LIMIT_MAX; HESS_UPDATE_LIMIT_SCALE; HESS_UPDATE_USE_LAST; INTRAFRAG_HESS. Fragment/Internal Coordinate Control; ADD_AUXILIARY_BONDS; COVALENT_CONNECT; FRAG_MODE; FREEZE_INTERFRAG; FREEZE_INTRAFRAG; H_BOND_CONNECT; INTCOS_GENERATE_EXIT; INTERFRAGMENT_CONNECT; INTERFRAG_DIST_INV; INTERFRAG_HESS; INTERFRAG_MODE. Misc.; FINAL_GEOM_WRITE; KEEP_INTCOS; LINESEARCH_STATIC_MAX; LINESEARCH_STATIC_MIN; LINESEARCH_STATIC_N; TEST_B; TEST_DERIVATIVE_B. Previous topic; WFN_TYPE; Next topic; ADD_AUXILIARY_BONDS; This Page. Show Source. Quick search. Enter sear",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__optking-1.html:7971,Optimiz,Optimization,7971,psi4manual/4.0b5/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__optking-1.html,2,['Optimiz'],['Optimization']
Performance,"as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important and amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with PSI4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should not specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the memory keyword to a value less than 16 GB.; Set the CACHELEVEL keyword to 0.; This will t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/cc-1.html:5653,cache,cache,5653,psi4manual/4.0b4/cc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cc-1.html,8,['cache'],['cache']
Performance,"as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important and amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with Psi4:. In most cases it is reasonable to set the memory keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should not specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the memory keyword to a value less than 16 GB.; Set the CACHELEVEL keyword to 0.; This will t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cc-1.html:5704,cache,cache,5704,psi4manual/1.0.0/cc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cc-1.html,2,['cache'],['cache']
Performance,"ase calculation, run in sow/reap mode. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc12; Single point energies of multiple excited states with EOM-CCSD. cisd-sp; 6-31G** H2O Test CISD Energy Point. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. mrcc4; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). omp2_5-1; OMP2 cc-pVDZ energy for the H2O molecule. fci-dipole; 6-31G H2O Test FCI Energy Point. fnocc3; Test FNO-QCISD(T) computation. tu4-h2o-freq; Frequencies for H2O HF/cc-pVDZ at optimized geometry. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. mints3; Test individual integral objects for correctness. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. pywrap-checkrun-convcrit; Advance",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html:13460,optimiz,optimized,13460,psi4manual/4.0b4/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html,4,['optimiz'],['optimized']
Performance,"ase calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. dlpnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. dft1; DFT Functional Test all values update for new BraggSlater radii. cubeprop-esp; RHF orbitals and density for water. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom; DFT custom functional test. cc13b; Tests RHF CCSD(T)gradients. sad-scf-type; Test SAD SCF guesses on noble gas atom. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc51; EOM-CC3/cc-pVTZ on H2O. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). mints2-bse; Similar to mints2, but using the BSE to specify the basis sets. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. nbo; Generation of NBO file. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. dlp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:28050,perform,performed,28050,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['perform'],['performed']
Performance,"ase in some iterations, but here they do not).; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734908 -76.026632734908 0.01523518 0.01245755 0.02742222 0.02277530 ~; 2 -76.027022666011 -0.000389931104 0.00178779 0.00142946 0.01008137 0.00594928 ~; 3 -76.027032729374 -0.000010063363 0.00014019 0.00008488 0.00077463 0.00044738 ~; --------------------------------------------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, it’s important to keep in mind that the values of the vibrational frequencies are a function of the molecular geometry. Therefore, it’s important to obtain the vibrational frequencies AT THE OPTIMIZED GEOMETRY. Luckily, Psi4 updates the molecule with optimized geometry as it is being optimized. So, the optimized geometry for H\(_2\)O is stored inside the h2o molecule object, which we can access! To compute the frequencies, all we need to do; is to again pass the molecule=h2o argument to the psi4.frequency() API function:. [6]:. scf_e, scf_wfn = psi4.frequency('scf/cc-pvdz', molecule=h2o, return_wfn=True). 6 displacements needed.; 1 2 3 4 5 6. Executing this cell will prompt Psi4 to compute the Hessian (second derivative matrix) of the electronic energy with respect to nuclear displacements. From this, it can obtain the harmonic vibrational frequencies, given below (roundoff errors of around \(0.1\) cm\(^{-1}\) may exist):; Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6478; A1 4113.3795; B2 4212.1814; -----------------------------------------------. Notice the symmetry type of the normal modes is specified (A1, A1, B2). The program also print out the normal modes in terms of Cartesian coor",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/psiapi.html:8891,optimiz,optimized,8891,psi4manual/master/psiapi.html,https://psicode.org,https://psicode.org/psi4manual/master/psiapi.html,4,['optimiz'],['optimized']
Performance,"ase python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.; Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples:. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; 1; 2; 3; 4RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/db-1.html:5870,Optimiz,Optimize,5870,psi4manual/1.3.2/db-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/db-1.html,4,"['Optimiz', 'optimiz']","['Optimize', 'optimize']"
Performance,"ase python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.; Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples:. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichoimetric we",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/db-1.html:5636,Optimiz,Optimize,5636,psi4manual/1.0.0/db-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/db-1.html,4,"['Optimiz', 'optimiz']","['Optimize', 'optimize']"
Performance,"ase. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft1; DFT Functional Test all values update for new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. mints3; Test individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:23354,optimiz,optimization,23354,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['optimiz'],['optimization']
Performance,"ased on the “seminumerical Linear Exchange” (sn-LinK); approach described in [Laqua:2020:1456], SNLINK is only available if PSI4; is compiled with the GauXC library, described in [Williams-Young:2023:234104].; Algorithmically, SNLINK is very similar to COSX, differing primarily in screening of; the analytic 3-center integrals. In terms of implementation, SNLINK is more efficient,; owing to more highly-optimized integral contraction kernels; and supports execution; on Graphics Processing Units (GPUs). See Seminumerical Linear Exchange for more information. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DFA DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used. DISK_DFA DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4‘s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation. Additionally, expert users; can manually switch between the in-memory and on-disk options within MEM_DF or DISK_DF using; the SCF_SUBTYPE option. Using SCF_SUBTYPE = AUTO, where ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/scf.html:31301,optimiz,optimized,31301,psi4manual/master/scf.html,https://psicode.org,https://psicode.org/psi4manual/master/scf.html,1,['optimiz'],['optimized']
Performance,"asis and cfour_spherical. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/psi-a24-grad; geometry after",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_cfour.html:1914,optimiz,optimization,1914,psi4manual/1.8.x/autodoc_testsuite_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_cfour.html,1,['optimiz'],['optimization']
Performance,"asis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SCF (CPHF); CPHF — Auxiliary basis for SCF. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SCF (SCF); SCF — Auxiliary basis set for SCF density fitting computations. Defaults to a JKFIT basis. Type: string; Possible Values: basis string; Default: No Default. DF_BUMP_R0 (SCF); SCF — Bump function min radius. Type: double; Default: 0.0. DF_BUMP_R1 (SCF); SCF — Bump function max radius. Type: double; Default: 0.0. DF_DOMAINS (SCF); SCF — FastDF geometric fitting domain selection algorithm. Type: string; Possible Values: DIATOMIC, SPHERES; Default: DIATOMIC. DF_FITTING_CONDITION (SCF); SCF (Expert) — Fitting Condition, i.e. eigenvalue threshold for RI basis. Analogous to S_TOLERANCE. Type: double; Default: 1.0e-10. DF_INTS_IO (DFMP2); DFMP2 (Expert) — IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. DF_INTS_IO (SCF); SCF (Expert) — IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. DF_INTS_NUM_THREADS (DFMP2); DFMP2 — Number of threads to compute integrals with. 0 is wild card. Type: integer; Default: 0. DF_INTS_NUM_THREADS (SCF); SCF — Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_METRIC (SCF); SCF — FastDF Fitting Metric. Type: string; Possible Values: COULOMB, EWALD, OVERLAP; Default: COULOMB. DF_SCF_GUESS (SCF); SCF — Do a density fitting SCF calculation to converge the orbitals before switching to the use of exact integrals in a |scf__scf_type| DIRECT calculation. Type: boolean; Default: true. DF_THETA (SCF); SCF — FastDF SR Ewald metric range separation parameter. Type: double; Default: 1.0. DFCC (FNOCC); FNOCC — Do use density fitting or cholesky decomposition in CC? This keyword is used internally by the driver. Changing ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:97917,LOAD,LOAD,97917,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,2,['LOAD'],['LOAD']
Performance,"asis sets; present in ``delta2_basis`` and :py:func:`~xtpl_highest_1` otherwise. .. hlist::; :columns: 1. * xtpl_highest_1; * corl_xtpl_helgaker_2. :type scf_alpha: float. Overrides the default \alpha parameter used in the listed SCF extrapolation procedures.; Has no effect on others, including :py:func:`~xtpl_highest_1` and :py:func:`~scf_xtpl_helgaker_3`. .. hlist::; :columns: 1. * :py:func:`scf_xtpl_helgaker_2`; * :py:func:`scf_xtpl_truhlar_2`; * :py:func:`scf_xtpl_karton_2`. :type corl_alpha: float. Overrides the default \alpha parameter used in the listed :py:func:`corl_xtpl_helgaker_2` correlation; extrapolation to the corl stage. The supplied \alpha does not impact delta or any further stages. .. hlist::; :columns: 1. * :py:func:`corl_xtpl_helgaker_2`. :type delta_alpha: float. Overrides the default \alpha parameter used in the listed; :py:func:`corl_xtpl_helgaker_2` correlation extrapolation for the delta correction. Useful when; delta correction is performed using smaller basis sets for which a different \alpha might; be more appropriate. .. hlist::; :columns: 1. * :py:func:`corl_xtpl_helgaker_2`. * Combined interface. :type cbs_metadata: list of dicts. This is the interface to which all of the above calls are internally translated. The first item in; the array is always defining the SCF contribution to the total energy. The required items in the; dictionary are:. * ```wfn```: typically ```HF```, which is subsumed in correlated methods anyway.; * ```basis```: basis set, can be in a bracketed form (eg. ```cc-pv[tq]z```). Other supported arguments for the first dictionary are:. * ```scheme```: scf extrapolation scheme function, by default it is worked out from the number of; basis sets (1 - 3) supplied as ```basis```.; * ```alpha```: alpha for the above scheme, if the default is to be overriden; * ```options```: if special options are required for a step, they should be entered as a dict here.; This is helpful for calculating all electron corrections in otherw",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_cbs.html:41699,perform,performed,41699,psi4manual/1.3.2/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_cbs.html,1,['perform'],['performed']
Performance,"asis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BB_M_FILE (TRANSQT); TRANSQT —. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM —. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR —. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA —. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT —. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT — Controls how to cache quantities within the DPD library. Ty",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html:5675,CACHE,CACHELEVEL,5675,psi4manual/4.0b2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html,6,"['CACHE', 'cache', 'perform']","['CACHELEVEL', 'cacheing', 'perform']"
Performance,"asis_set(). Aliases¶; When a particular composite method or its functional form is going to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/lib/python/aliases.py; (source location) or psi4/share/psi/python/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. sherrill_gold_standard(name='mp2', **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). >>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). >>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). allen_focal_point(name='mp2', **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; corl_xtpl_helgaker_2(). CCSDT and CCSDT(Q); are plain deltas. This wrapper requires Kallay’s MRCC code. >>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). >>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). Table Of Contents. Complete Basis Set; Output; Extrapolation Schemes; Aliases. Previous topic; BAKERJCC96; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. in",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/cbs-1.html:15180,optimiz,optimization,15180,psi4manual/4.0b5/cbs-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/cbs-1.html,4,['optimiz'],"['optimization', 'optimize']"
Performance,"ass method, [1], [2]. psi4.core.Vector class method, [1], [2]. from_list() psi4.core.Dimension class method, [1], [2]. from_serial() psi4.core.Matrix class method, [1], [2]. psi4.core.Vector class method, [1], [2]. Frozen natural orbital coupled cluster. Frozen Natural Orbitals. FROZEN_BEND (OPTKING). FROZEN_CARTESIAN (OPTKING). FROZEN_DIHEDRAL (OPTKING). FROZEN_DISTANCE (OPTKING). FROZEN_DOCC (GLOBALS). FROZEN_UOCC (GLOBALS). frzcpi() psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. frzvpi() psi4.core.CIWavefunction method, [1]. psi4.core.CUHF method, [1]. psi4.core.HF method, [1]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.Wavefunction method, [1], [2]. fsymbol() psi4.core.Molecule method, [1], [2]. FULL_HESS_EVERY (OPTKING). FULL_MATRIX (CCEOM). function call. ; geometry optimization. gradient. hessian. vibrational analysis. function_index psi4.core.GaussianShell attribute, [1], [2]. function_to_center() psi4.core.BasisSet method, [1], [2]. function_to_shell() psi4.core.BasisSet method, [1], [2]. Functional class in psi4.core, [1]. functional() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. psi4.core.VBase method, [1], [2]. fx() psi4.core.Molecule method, [1], [2]. fy() psi4.core.Molecule method, [1], [2]. fZ() psi4.core.Molecule method, [1], [2]. fz() psi4.core.Molecule method, [1], [2]. G. G_CONVERGENCE (OPTKING). GAUGE (CCDENSITY). (CCRESPONSE). Gaussian Formatted Checkpoint. Gaussian94BasisSetParser class in psi4.core, [1]. GaussianShell class in psi4.core, [1]. GaussianType class in psi4.core, [1]. gCP. GDMA. gdma() in module psi4. in module psi4.driver. GDMA_LIMIT (GDMA). GDMA_MULTIPOLE_UNITS (GDMA). GDMA_ORIGIN (GDMA). GDMA_RADIUS (GDMA). GDMA_SWITCH (GD",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/genindex-1.html:47474,optimiz,optimization,47474,psi4manual/1.1.0/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/genindex-1.html,2,['optimiz'],['optimization']
Performance,"ass_scf']))):; scf_helper(name, **kwargs). psi4.set_local_option('OCC', 'DO_SCS', 'TRUE'); psi4.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); psi4.occ(). optstash.restore(). [docs]def run_sos_omp3(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a spin-opposite scaled OMP3 computation. """"""; lowername = name.lower(). optstash = p4util.OptionsState(; ['OCC', 'SOS_TYPE'],; ['OCC', 'DO_SOS'],; ['OCC', 'WFN_TYPE']). # what type of sos?; if (lowername == 'sos-omp3'):; psi4.set_local_option('OCC', 'SOS_TYPE', 'SOS'); elif (lowername == 'sos-pi-omp3'):; psi4.set_local_option('OCC', 'SOS_TYPE', 'SOSPI'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). psi4.set_local_option('OCC', 'DO_SOS', 'TRUE'); psi4.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); psi4.occ(). optstash.restore(). [docs]def run_ocepa(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an orbital-optimized CEPA computation. """"""; optstash = p4util.OptionsState(; ['OCC', 'WFN_TYPE']). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). psi4.set_local_option('OCC', 'WFN_TYPE', 'OCEPA'); psi4.occ(). optstash.restore(). [docs]def run_ocepa_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; OCEPA gradient calculation. """"""; optstash = p4util.OptionsState(; ['GLOBALS', 'DERTYPE']). psi4.set_global_option('DERTYPE', 'FIRST'); run_ocepa(name, **kwargs); psi4.deriv(). optstash.restore(). [docs]def run_cepa0(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a CEPA (LCCD) computation. """"""; optstash = p4util.OptionsState(; ['OCC', 'WFN_TYPE'],; ['OCC', 'ORB_OPT']). psi4.set_local_option('OCC', 'WFN_TYPE', 'OCEPA'); psi4.set_local_option('OCC', 'ORB_OPT', 'FALSE'); run_ocepa(n",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/proc.html:9540,optimiz,optimized,9540,psi4manual/4.0b5/_modules/proc.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/proc.html,1,['optimiz'],['optimized']
Performance,"assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF); CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUTOFF (OCC); OCC — Cutoff value for numerical procedures. Type: integer; Default: 14. D_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for density. Type: conv double; Default: 1e-6. D_CONVERGENCE (SAPT); SAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT term. Type: conv double; Default: 1e-8. D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density, which is defined as the RMS value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (S",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html:21406,perform,performed,21406,psi4manual/4.0b5/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html,2,['perform'],['performed']
Performance,"at and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; 1; 2; 3; 4; 5; 6; 7--------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; ------------------------------------",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/tutorial-1.html:5816,optimiz,optimizing,5816,psi4manual/1.1.0/tutorial-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/tutorial-1.html,6,['optimiz'],['optimizing']
Performance,"at files can be consistently written and read """"""; fname = os.path.split(os.path.abspath(core.get_writer_file_prefix(self.molecule().name())))[1]; psi_scratch = core.IOManager.shared_object().get_default_path(); return os.path.join(psi_scratch, fname + '.' + str(filenumber)). core.Wavefunction.get_scratch_filename = _core_wavefunction_get_scratch_filename. @staticmethod; def _core_wavefunction_from_file(wfn_data: Union[str, Dict, Path]) -> core.Wavefunction:; r""""""Build Wavefunction from data. Parameters; ----------; wfn_data; If a dict, use data directly. Otherwise, path-like passed to :py:func:`numpy.load`; to read from disk. Returns; -------; Wavefunction; A deserialized Wavefunction object. """"""; # load the wavefunction from file; if isinstance(wfn_data, dict):; pass; elif isinstance(wfn_data, str):; if not wfn_data.endswith("".npy""):; wfn_data = wfn_data + "".npy""; wfn_data = np.load(wfn_data, allow_pickle=True).item(); else:; # Could be path-like or file-like, let `np.load` handle it; wfn_data = np.load(wfn_data, allow_pickle=True).item(). # variable type specific dictionaries to be passed into C++ constructor; wfn_matrix = wfn_data['matrix']; wfn_vector = wfn_data['vector']; wfn_dimension = wfn_data['dimension']; wfn_int = wfn_data['int']; wfn_string = wfn_data['string']; wfn_boolean = wfn_data['boolean']; wfn_float = wfn_data['float']; wfn_floatvar = wfn_data['floatvar']; wfn_matrixarr = wfn_data['matrixarr']. # reconstruct molecule from dictionary representation; wfn_molecule = wfn_data['molecule']; molecule = core.Molecule.from_dict(wfn_molecule). # get basis set name and spherical harmonics boolean; basis_name = wfn_string['basisname']; if "".gbs"" in basis_name:; basis_name = basis_name.split('/')[-1].replace('.gbs', ''). basis_puream = wfn_boolean['basispuream']; basisset = core.BasisSet.build(molecule, 'ORBITAL', basis_name, puream=basis_puream). # change some variables to psi4 specific data types (Matrix, Vector, Dimension); for label in wfn_matrix:; array =",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/python_helpers.html:5003,load,load,5003,psi4manual/1.4.0/_modules/psi4/driver/p4util/python_helpers.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/python_helpers.html,3,['load'],['load']
Performance,"at satisfied the convergence criteria. Type: boolean; Default: false. INTCO_FIXED_EQ_FORCE_CONSTANT¶. In constrained optimizations, for internal coordinates with user-specified equilibrium values, this is the force constant (in au) used to apply an additional force to each coordinate. If the user is only concerned to satify the desired constraint, then the user need only ensure that this value is sufficiently large. Alternatively, the user may specify this value to apply a force of a particular magnitude, in which case the given equilibrium value may or may not be reached by the optimization. Type: double; Default: 2.0. KEEP_INTCOS¶. Keep internal coordinate definition file. Type: boolean; Default: false. TEST_B¶. Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B¶. Do test derivative B matrix?. Type: boolean; Default: false. Table Of Contents. OPTKING; Optimization Algorithm; CONSECUTIVE_BACKSTEPS; GEOM_MAXITER; INTERFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT_MAX; INTRAFRAG_STEP_LIMIT_MIN; IRC_DIRECTION; IRC_STEP_SIZE; IRC_STOP; OPT_TYPE; RFO_FOLLOW_ROOT; RFO_ROOT; STEP_TYPE. Convergence Control; FLEXIBLE_G_CONVERGENCE; G_CONVERGENCE; MAX_DISP_G_CONVERGENCE; MAX_ENERGY_G_CONVERGENCE; MAX_FORCE_G_CONVERGENCE; RMS_DISP_G_CONVERGENCE; RMS_FORCE_G_CONVERGENCE. Hessian Update; CART_HESS_READ; FULL_HESS_EVERY; HESS_UPDATE; HESS_UPDATE_LIMIT; HESS_UPDATE_LIMIT_MAX; HESS_UPDATE_LIMIT_SCALE; HESS_UPDATE_USE_LAST; INTRAFRAG_HESS. Fragment/Internal Coordinate Control; ADD_AUXILIARY_BONDS; COVALENT_CONNECT; FRAG_MODE; FREEZE_INTERFRAG; FREEZE_INTRAFRAG; H_BOND_CONNECT; INTCOS_GENERATE_EXIT; INTERFRAG_DIST_INV; INTERFRAG_HESS; INTERFRAG_MODE. Misc.; FINAL_GEOM_WRITE; INTCO_FIXED_EQ_FORCE_CONSTANT; KEEP_INTCOS; TEST_B; TEST_DERIVATIVE_B. Previous topic; SOS_SCALE2; Next topic; ADD_AUXILIARY_BONDS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__optking-1.html:7012,Optimiz,Optimization,7012,psi4manual/4.0b2/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__optking-1.html,2,['Optimiz'],['Optimization']
Performance,"at satisfied the convergence criteria. Type: boolean; Default: false. INTCO_FIXED_EQ_FORCE_CONSTANT¶. In constrained optimizations, for internal coordinates with user-specified equilibrium values, this is the force constant (in au) used to apply an additional force to each coordinate. If the user is only concerned to satify the desired constraint, then the user need only ensure that this value is sufficiently large. Alternatively, the user may specify this value to apply a force of a particular magnitude, in which case the given equilibrium value may or may not be reached by the optimization. Type: double; Default: 2.0. KEEP_INTCOS¶. Keep internal coordinate definition file. Type: boolean; Default: false. TEST_B¶. Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B¶. Do test derivative B matrix?. Type: boolean; Default: false. Table Of Contents. OPTKING; Optimization Algorithm; CONSECUTIVE_BACKSTEPS; GEOM_MAXITER; INTERFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT_MAX; INTRAFRAG_STEP_LIMIT_MIN; IRC_DIRECTION; IRC_STEP_SIZE; IRC_STOP; OPT_TYPE; RFO_FOLLOW_ROOT; RFO_ROOT; STEP_TYPE. Convergence Control; FLEXIBLE_G_CONVERGENCE; G_CONVERGENCE; MAX_DISP_G_CONVERGENCE; MAX_ENERGY_G_CONVERGENCE; MAX_FORCE_G_CONVERGENCE; RMS_DISP_G_CONVERGENCE; RMS_FORCE_G_CONVERGENCE. Hessian Update; CART_HESS_READ; FULL_HESS_EVERY; HESS_UPDATE; HESS_UPDATE_LIMIT; HESS_UPDATE_LIMIT_MAX; HESS_UPDATE_LIMIT_SCALE; HESS_UPDATE_USE_LAST; INTRAFRAG_HESS. Fragment/Internal Coordinate Control; ADD_AUXILIARY_BONDS; COVALENT_CONNECT; FRAG_MODE; FREEZE_INTERFRAG; FREEZE_INTRAFRAG; H_BOND_CONNECT; INTCOS_GENERATE_EXIT; INTERFRAG_DIST_INV; INTERFRAG_HESS; INTERFRAG_MODE. Misc.; FINAL_GEOM_WRITE; INTCO_FIXED_EQ_FORCE_CONSTANT; KEEP_INTCOS; TEST_B; TEST_DERIVATIVE_B. Previous topic; TPDM_ABCD_TYPE; Next topic; ADD_AUXILIARY_BONDS; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__optking-1.html:7034,Optimiz,Optimization,7034,psi4manual/4.0b3/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__optking-1.html,2,['Optimiz'],['Optimization']
Performance,"at table for DHDFT. make_dhdft_Tables_SII()[source]¶; Generate the subset details suppmat Part II tables and their indices for DHDFT. make_dhdft_Tables_SIII()[source]¶; Generate the per-reaction suppmat Part III tables and their indices for DHDFT. make_pt2_Figure_2()[source]¶; Plot all the graphics needed for the diffuse augmented grey; bars plot in Fig. 2 of PT2.; Note that in the modern implementation of class DB4, would need to; pass sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min'] to get; published figure. make_pt2_Figure_3()[source]¶; Plot all the graphics needed for the calendar grey bars plot; in Fig. 3 of PT2.; Note that in the modern implementation of class DB4, would need to; pass sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min'] to get; published figure. plot_dhdft_flats()[source]¶; Generate pieces for grey bars figure for DH-DFT paper. plot_dhdft_modelchems()[source]¶. plot_minn_modelchems()[source]¶. class Database(dbnamelist, dbse=None, pythonpath=None, loadfrompickle=False, path=None)[source]¶; Collection for handling single or multiple qcdb.WrappedDatabase objects.; Particularly, unifying modelchem and subset names that when inconsistent; across component databases. Also, defining statistics across databases.; >>> asdf = qcdb.Database(['s22', 'Nbc10', 'hbc6', 'HSG'], 'DB4'); >>> qwer = qcdb.Database('s22'). add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a database; func whose keys are the keys of dbdict and whose values are a; function that filters each WrappedDatabase’s self.hrxn. add_Subset_union(name, sslist)[source]¶; Define a new subset labeled name (note that there’s nothing to; prevent overwriting an existing subset name) from the union of; existing named subsets in sslist. add_sampled_Subset(sset='default', number_of_samples=1, sample_size=5, prefix='rand')[source]¶; Generate and register number_of_samples new subsets of size; sample_size and name built from prefix. Reactions chosen from sset. analyze_modelchem",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:29620,load,loadfrompickle,29620,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['load'],['loadfrompickle']
Performance,"at the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE); CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI); DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM); CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS); GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (GLOBALS); GLOBALS — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RFO_FOLLOW_ROOT (OPTKING); OPTKING — Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_NORMALIZATION_MAX (OPTKING); OPTKING — Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT (OPTKING); OPTKING — Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RHF_TRIPLETS (CCEOM); CCEOM — Do form a triplet state from RHF reference?. Type: boolean; Default: false. RMS_DISP_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. RMS_FORCE_G_CONVERGENCE (OPTKING); OPTKING — Convergence criterion for geometry optmization: rms force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. RMS_MOGRAD_CONVERGE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:195732,optimiz,optimized,195732,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,6,['optimiz'],['optimized']
Performance,"at(); # Check if user wants to see the intcos; if so, don't delete them.; if core.get_option('OPTKING', 'INTCOS_GENERATE_EXIT') == False:; if core.get_option('OPTKING', 'KEEP_INTCOS') == False:; core.opt_clean(); # Changing environment to optimized geometry as expected by user; molecule.set_geometry(moleculeclone.geometry()); for postcallback in hooks['optimize']['post']:; postcallback(lowername, wfn=wfn, **kwargs); core.clean(). # S/R: Clean up opt input file; if opt_mode == 'reap':; with open('OPT-master.in', 'wb') as fmaster:; fmaster.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'.encode('utf-8')); fmaster.write('# Optimization complete!\n\n'.encode('utf-8')). # Cleanup binary file 1; if custom_gradient or ('/' in lowername):; core.IOManager.shared_object().set_specific_retention(1, False). optstash.restore(). if return_wfn:; return (thisenergy, wfn); else:; return thisenergy. elif optking_rval == core.PsiReturnType.Failure:; print('Optimizer: Optimization failed!'); if (core.get_option('OPTKING', 'KEEP_INTCOS') == False):; core.opt_clean(); molecule.set_geometry(moleculeclone.geometry()); core.clean(); optstash.restore(); return thisenergy. core.print_out('\n Structure for next step:\n'); moleculeclone.print_in_input_format(). # S/R: Preserve opt data file for next pass and switch modes to get new displacements; if opt_mode == 'reap':; kwargs['opt_datafile'] = p4util.get_psifile(1); kwargs['mode'] = 'sow'. n += 1. if core.get_option('OPTKING', 'INTCOS_GENERATE_EXIT') == False:; if core.get_option('OPTKING', 'KEEP_INTCOS') == False:; core.opt_clean(). optstash.restore(); raise ConvergenceError(""""""geometry optimization"""""", n - 1). [docs]def hessian(name, **kwargs):; r""""""Function complementary to :py:func:`~frequency`. Computes force; constants, deciding analytic, finite difference of gradients, or; finite difference of energies. :returns: :py:class:`~psi4.core.Matrix` |w--w| Total non-mass-weighted electronic Hessian in Hartrees",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html:62819,Optimiz,Optimizer,62819,psi4manual/1.1.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html,2,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,"at(); # Check if user wants to see the intcos; if so, don't delete them.; if psi4.get_option('OPTKING', 'INTCOS_GENERATE_EXIT') == False:; if psi4.get_option('OPTKING', 'KEEP_INTCOS') == False:; psi4.opt_clean(); # Changing environment to optimized geometry as expected by user; molecule.set_geometry(moleculeclone.geometry()); for postcallback in hooks['optimize']['post']:; postcallback(lowername, wfn=wfn, **kwargs); psi4.clean(). # S/R: Clean up opt input file; if opt_mode == 'reap':; with open('OPT-master.in', 'wb') as fmaster:; fmaster.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'.encode('utf-8')); fmaster.write('# Optimization complete!\n\n'.encode('utf-8')). # Cleanup binary file 1; if custom_gradient or ('/' in lowername):; psi4.IOManager.shared_object().set_specific_retention(1, False). optstash.restore(). if return_wfn:; return (thisenergy, wfn); else:; return thisenergy. elif optking_rval == psi4.PsiReturnType.Failure:; print('Optimizer: Optimization failed!'); if (psi4.get_option('OPTKING', 'KEEP_INTCOS') == False):; psi4.opt_clean(); molecule.set_geometry(moleculeclone.geometry()); psi4.clean(); optstash.restore(); return thisenergy. psi4.print_out('\n Structure for next step:\n'); moleculeclone.print_in_input_format(). # S/R: Preserve opt data file for next pass and switch modes to get new displacements; if opt_mode == 'reap':; kwargs['opt_datafile'] = p4util.get_psifile(1); kwargs['mode'] = 'sow'. n += 1. psi4.print_out('\tOptimizer: Did not converge!'); if psi4.get_option('OPTKING', 'INTCOS_GENERATE_EXIT') == False:; if psi4.get_option('OPTKING', 'KEEP_INTCOS') == False:; psi4.opt_clean(). optstash.restore(). [docs]def hessian(name, **kwargs):; r""""""Function complementary to :py:func:`~frequency`. Computes force; constants, deciding analytic, finite difference of gradients, or; finite difference of energies. :returns: :ref:`Matrix<sec:psimod_Matrix>` |w--w| Total non-mass-weighted electronic Hessian in Hartrees/Bohr/B",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver.html:60977,Optimiz,Optimizer,60977,psi4manual/1.0.0/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver.html,2,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,"atabase attribute. output; . SAPT. cbs(). database(). geometry optimization. vibrational analysis. OVERLAP_CHECK (CCEOM). oxcom() in module qcdb.dbwrap. P. P (THERMO). p() IrreducibleRepresentation method. p4const module. p4const.__init__ module. p4const.physconst module. p4const.psifiles module. p4util module. p4util.__init__ module. p4util.basislist module. p4util.basislistdunning module. p4util.basislistother module. p4util.exceptions module. p4util.inpsight module. p4util.numpy_helper module. p4util.optproc module. p4util.p4regex module. p4util.procutil module. p4util.text module. p4util.util module. PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parse() Gaussian94BasisSetParser method. parse_arbitrary_order() in module driver_util. parse_cotton_irreps() in module driver_util. parse_multiline_array() in module inputparser. ParsingError. ParsingValidationError. PATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16]. PBS queueing system. PCG_BETA_TYPE (DFOCC). (OCC). PCG_CONVERGENCE (DFOCC). (OCC). PCG_MAXITER (DFOCC). (OCC). PCM. Using PCM. PCM (GLOBALS). pcm_placeholder module. PCM_SCF_TYPE (GLOBALS). PCMSolver. PEP1. perp_unit() in module qcdb.vecutil. PERTURB_CBS (PSIMRCC). PERTURB_CBS_COUPLING (PSIMRCC). PERTURB_H (SCF). PERTURB_MAGNITUDE (DETCI). (SCF). PERTURB_WITH (SCF). PHI_POINTS (SCF). physconst. physical constants. PK_ALGO (SCF). PK_ALL_NONSYM (SCF). PK_MAX_BUCKETS (SCF). PK_NO_INCORE (SCF). plot() Reaction method. plot_all_flats() Database method. plot_axis() Database method. plot_bars() Database method. plot_dhdft_flats() DB4 method. plot_dhdft_modelchems() DB4 method. plot_disthist() Database method. plot_flat() Database method. plot_iowa() Database method. plot_liliowa() Database method. plot_minn_modelchems() DB4 method. plot_modelchems() Database method. plot_ternary() Database method. point_group() LibmintsMolecule method. PointGroup class in qcdb.libmintspointgrp. POINTS (FINDIF). POLE_MA",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/genindex.html:56451,queue,queueing,56451,psi4manual/1.0.0/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/genindex.html,1,['queue'],['queueing']
Performance,"atabase from a collection of xyz files; using the script psi4/lib/scripts/ixyz2database.pl.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Parameters:; name (string) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). db_name (string) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching the name of a python file in psi4/lib/databases.; Consult that directory for available databases and literature citations. func (function) – energy || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || 'off' ; Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the cp(); function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || 'off' ; Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) onl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/db-1.html:1607,perform,performs,1607,psi4manual/4.0b2/db-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/db-1.html,8,"['optimiz', 'perform']","['optimization', 'optimize', 'performs']"
Performance,"atafile]); Function to use wavefunction information in wfn and, if specified, additional commands in filename to run GDMA analysis. geometry(geom[, name]); Function to create a molecule object of name name from the geometry in string geom. getFromDict(dataDict, mapList). get_memory(); Function to return the total memory allocation. gradient(name, **kwargs); Function complementary to :py:func:~driver.optimize(). hessian(name, **kwargs); Function complementary to frequency(). join_path(prefix, *args). levenshtein(seq1, seq2); Function to compute the Levenshtein distance between two strings. molden(wfn[, filename, density_a, ...]); Function to write wavefunction information in wfn to filename in molden format. molecule_get_attr(self, name); Function to redefine __getattr__ method of molecule class. molecule_set_attr(self, name, value); Function to redefine __setattr__ method of molecule class. oeprop(wfn, *args, **kwargs); Evaluate one-electron properties. opt(name, **kwargs); Function to perform a geometry optimization. optimize(name, **kwargs); Function to perform a geometry optimization. pcm_helper(block); Passes multiline string block to PCMSolver parser. print_stderr(stuff); Function to print stuff to standard error stream. print_stdout(stuff); Function to print stuff to standard output stream. process_input(raw_input[, print_level]); Function to preprocess raw input, the text of the input file, then parse it, validate it for format, and convert it into legitimate Python. process_pubchem_command(matchobj); Function to process match of pubchem in molecule block. prop(name, **kwargs); Function to compute various properties. property(name, **kwargs); Function to compute various properties. sanitize_name(name); Function to return name in coded form, stripped of characters that confuse filenames, characters into lowercase, + into p, * into s, and (, ), -, & , into _. scf_helper(name, **kwargs); Function serving as helper to SCF, choosing whether to cast up or just run ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/psi4api-1.html:199386,perform,perform,199386,psi4manual/1.1.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/psi4api-1.html,4,"['optimiz', 'perform']","['optimization', 'perform']"
Performance,"atch directory; cfour_tmpdir = kwargs['path'] if 'path' in kwargs else \; 'psi.' + str(os.getpid()) + '.' + psio.get_default_namespace() + \; '.cfour.' + str(uuid.uuid4())[:8]; if not os.path.exists(cfour_tmpdir):; os.mkdir(cfour_tmpdir); os.chdir(cfour_tmpdir). # Find environment by merging PSIPATH and PATH environment variables; lenv = {; 'PATH': ':'.join([os.path.abspath(x) for x in os.environ.get('PSIPATH', '').split(':') if x != '']) + \; ':' + os.environ.get('PATH') + \; ':' + core.get_datadir() + '/basis',; 'GENBAS_PATH': core.get_datadir() + '/basis',; 'CFOUR_NUM_CORES': os.environ.get('CFOUR_NUM_CORES'),; 'MKL_NUM_THREADS': os.environ.get('MKL_NUM_THREADS'),; 'OMP_NUM_THREADS': os.environ.get('OMP_NUM_THREADS'),; 'LD_LIBRARY_PATH': os.environ.get('LD_LIBRARY_PATH'); }. if 'path' in kwargs:; lenv['PATH'] = kwargs['path'] + ':' + lenv['PATH']; # Filter out None values as subprocess will fault on them; lenv = {k: v for k, v in lenv.items() if v is not None}. # Load the GENBAS file; genbas_path = qcdb.search_file('GENBAS', lenv['GENBAS_PATH']); if genbas_path:; try:; shutil.copy2(genbas_path, psioh.get_default_path() + cfour_tmpdir); except shutil.Error: # should only fail if src and dest equivalent; pass; core.print_out(""\n GENBAS loaded from %s\n"" % (genbas_path)); core.print_out("" CFOUR to be run from %s\n"" % (psioh.get_default_path() + cfour_tmpdir)); else:; message = """"""; GENBAS file for CFOUR interface not found. Either:; [1] Supply a GENBAS by placing it in PATH or PSIPATH; [1a] Use cfour {} block with molecule and basis directives.; [1b] Use molecule {} block and CFOUR_BASIS keyword.; [2] Allow Psi4's internal basis sets to convert to GENBAS; [2a] Use molecule {} block and BASIS keyword. """"""; core.print_out(message); core.print_out(' Search path that was tried:\n'); core.print_out(lenv['PATH'].replace(':', ', ')). # Generate the ZMAT input file in scratch; if 'path' in kwargs and os.path.isfile('ZMAT'):; core.print_out("" ZMAT loaded from %s\n"" % (psioh.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/interface_cfour.html:5604,Load,Load,5604,psi4manual/1.4.0/_modules/psi4/driver/procrouting/interface_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/interface_cfour.html,2,['Load'],['Load']
Performance,"ate of the CN radical, with Z-matrix input. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cisd-sp; 6-31G** H2O Test CISD Energy Point. cbs-xtpl-dict; Extrapolated water energies. scf-level-shift-cuhf; SCF level shift on a CUHF computation. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. fd-gradient; SCF STO-3G finite-difference tests. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. fnocc2; Test G2 method for H2O. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. scf-level-shift-rohf; SCF level shift on an ROHF computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. frac; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:42608,optimiz,optimization,42608,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimization']
Performance,"ated input. Should not be used as a model input file but as a canary to avoid breaking database/input parser dependencies. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dft2; DFT Functional Test. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). dft1; DFT Functional Test. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. dcft5; DCFT-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt2; SCF DZ allene geometry optimzation, with Cartesian input. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. opt5; 6-31G** UHF CH2 3B1 optimization. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. docs_dft; This test is used to construct the documentation; it is not suitable for emulation by users. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. cc16; UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf3; are specif",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html:7684,optimiz,optimization,7684,psi4manual/4.0b2/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html,4,['optimiz'],['optimization']
Performance,"ated mp2 correlation energy atop a T-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy(cbs, corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme=corl_xtpl_helgaker_2, delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme=corl_xtpl_helgaker_2, func=cbs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html:11644,optimiz,optimize,11644,psi4manual/1.3.2/api/psi4.driver.cbs-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.cbs-1.html,4,['optimiz'],['optimize']
Performance,"ated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: UHF, RHF, ROHF; Default: RHF. RESPONSE_ALGORITHM¶. Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. R_CONVERGENCE¶. Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. THREE_PARTICLE¶. Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. Expert¶. CACHELEVEL¶. Controls how to cache quantities within the DPD library. Type: integer; Default: 2. DAMPING_PERCENTAGE¶. The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DCFT_GUESS¶. Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCFT; Default: MP2. DIIS_MAX_VECS¶. Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MIN_VECS¶. Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. ENERGY_LEVEL_SHIFT¶. Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCFT energy. Type: double; Default",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__dcft-1.html:4172,cache,cache,4172,psi4manual/1.3.2/autodir_options_c/module__dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__dcft-1.html,2,['cache'],['cache']
Performance,"ated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: UHF, RHF, ROHF; Default: RHF. RESPONSE_ALGORITHM¶. Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. R_CONVERGENCE¶. Convergence criterion for the RMS of the residual vector in density cumulant updates, as well as the solution of the density cumulant and orbital response equations. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. THREE_PARTICLE¶. Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. Expert¶. CACHELEVEL¶. Controls how to cache quantities within the DPD library. Type: integer; Default: 2. DAMPING_PERCENTAGE¶. The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DCT_GUESS¶. Whether to read the orbitals from a previous computation, or to compute an MP2 guess. Type: string; Possible Values: CC, BCC, MP2, DCT; Default: MP2. DIIS_MAX_VECS¶. Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MIN_VECS¶. Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. ENERGY_LEVEL_SHIFT¶. Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCT energy. Type: double; Default: 0",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__dct-1.html:4073,cache,cache,4073,psi4manual/1.4.0/autodir_options_c/module__dct-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__dct-1.html,9,['cache'],['cache']
Performance,"ater energies. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. dft-reference; MP2 with a PBE0 reference computation. mbis-1; MBIS calculation on H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. cbs-xtpl-func; optimization with method defined via cbs. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. fci-h2o; 6-31G H2O Test FCI Energy Point. opt11; Transition-state optimizations of HOOH to both torsional transition states. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:41211,optimiz,optimization,41211,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['optimiz'],['optimization']
Performance,"ates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type hessian_with: string; :param hessian_with: ``'scf'`` || ``'mp2'`` || etc. Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. .. warning:: Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. .. note:: Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. .. _`table:grad_gen`:. +-------------------------+---------------------------------------------------------------------------------------------------------------+; | name | calls method |; +=========================+===============================================================================================================+; | efp | efp-only optimizations |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | scf | Hartree--Fock (HF) or density functional theory (DFT) :ref:`[manual] <sec:scf>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | hf | HF self consistent field (SCF) :ref:`[manual] <sec:scf>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | dcft | den",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html:49633,Optimiz,Optimizations,49633,psi4manual/1.3.2/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html,1,['Optimiz'],['Optimizations']
Performance,"ates which properties should be computed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Optical rotation calculation; >>> property('cc2', properties=['rotation']). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; return procedures['property'][lowername](lowername, **kwargs); except KeyError:; raise ValidationError('Property method %s not available.' % (lowername)). ## Aliases ##; prop = property. [docs]def optimize(name, **kwargs):; r""""""Function to perform a geometry optimization. :aliases: opt(). :returns: (*float*) Total electronic energy of optimized structure in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`. .. note:: Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. .. _`table:grad_gen`:. +-------------------------+---------------------------------------------------------------------------------------+; | name | calls method |; +=========================+=======================================================================================+; | scf | Hartree--Fock (HF) or density functional theory (DFT) |; +-------------------------+---------------------------------------------------------------------------------------+; | dcft | density cumulant functional theory |; +-------------------------+---------------------------------------------------------------------",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/driver.html:32805,optimiz,optimize,32805,psi4manual/4.0b2/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/driver.html,3,"['optimiz', 'perform']","['optimization', 'optimize', 'perform']"
Performance,"ation Functional. x1b95; X1B95 Hyb-GGA Exchange-Correlation Functional. x3lyp; X3LYP Hyb-GGA Exchange-Correlation Functional. x3lyp-d3bj;  . xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj;  . zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html:11902,optimiz,optimization,11902,psi4manual/1.3.2/api/psi4.driver.opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html,8,['optimiz'],"['optimization', 'optimize']"
Performance,"ation Functional. x3lyp-d3bj;  . xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj;  . zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. 1; 2>>> # [1] Analytic hf optimization; >>> optimize('hf'). 1; 2; 3; 4>>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). 1; 2; 3>>> # [3] Forced finite difference hf optimization run in; >>> # embarrassingly parallel fashion; >>> optimize('hf', dertype='energy', mode='sow'). 1; 2>>> # [4] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). 1; 2; 3; 4>>> # [5] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). 1; 2; 3; 4; 5; 6; 7; 8>>> # [6] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz')",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.driver.opt-1.html:12421,optimiz,optimization,12421,psi4manual/1.2.1/api/psi4.driver.opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.driver.opt-1.html,4,['optimiz'],['optimization']
Performance,"ation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR); CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR); CFOUR — Specifies the type of SCF calculation to be performed. RHF (= 0) requests a restricted Hartree-Fock reference; UHF (= 1) an unrestricted Hartree-Fock reference; ROHF (= 2) a restricted open-shell Hartree-Fock calculation; TCSCF (=3) a two-configurational SCF calculation, and CASSCF (=4) a complete-active space SCF calculations (currently not implemented). Psi4 Interface: Keyword subject to translation from value of REFERENCE unless set explicitly. Type: string; Possible Values: RHF, UHF, ROHF, TCSCF, CASSCF; Default: RHF. CFOUR_RELATIVISTIC (CFOUR); CFOUR — Specifies the treatment of relativistic effects. The default is a non-relativistic treatment (OFF), while perturbational treatments are invoked via MVD1 (mass-velocity and 1-electron Darwin conribution), MVD2 (mass-velocity and 1- and 2-electron Darwin contribution), DPT2 (second-order direct perturbation theory approach), SF-DPT4 (scalar-relativistic part of fourth-order direct perturbation theory, DPT4 (full fourth-order DPT including spin-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:69919,perform,performed,69919,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['perform'],['performed']
Performance,"ation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR); CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR); CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR); CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR); CFOUR — Specifies the type of SCF calculation to be performed. RHF (= 0) requests a restricted Hartree-Fock reference; UHF (= 1) an unrestricted Hartree-Fock reference; ROHF (= 2) a restricted open-shell Hartree-Fock calculation; TCSCF (=3) a two-configurational SCF calculation, and CASSCF (=4) a complete-active space SCF calculations (currently not implemented). Psi4 Interface: Keyword subject to translation from value of REFERENCE unless set explicitly. Type: string; Possible Values: RHF, UHF, ROHF, TCSCF, CASSCF; Default: RHF. CFOUR_RELATIVISTIC (CFOUR); CFOUR — Specifies the treatment of relativistic effects. The default is a non-relativistic treatment (OFF), while perturbational treatments are invoked via MVD1 (mass-velocity and 1-electron Darwin contribution), MVD2 (mass-velocity and 1- and 2-electron Darwin contribution), DPT2 (second-order direct perturbation theory approach), SF-DPT4 (scalar-relativistic part of fourth-order direct perturbation theory, DPT4 (full fourth-order DPT including spin",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:70121,perform,performed,70121,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,6,['perform'],['performed']
Performance,"ation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. sapt-exch-ind30-inf; SAPT2+3 with S^inf exch-ind30 Geometries taken from the S66x10 database, the shortest-range point (R = 0.7 R_e). cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega= (589 355 nm). fci-h2o; 6-31G H2O Test FCI Energy Point. dfremp-1; density fitted REMP/cc-pVDZ energies for the CO2 molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. scf-cholesky-basis; incremental Cholesky filtered SCF. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cc15; RHF-B-CCD(T)/6-31G** H2O si",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:8820,optimiz,optimization,8820,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimization']
Performance,"ation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/kw-1; testing best practices options, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential en",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html:3669,optimiz,optimization,3669,psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_cfour-1.html,2,['optimiz'],['optimization']
Performance,"ation types. Type: conv double; Default: 1e-8. FOCK_TOLERANCE¶. Minimum absolute value below which parts of the Fock matrix are skipped. Type: conv double; Default: 1e-2. INTS_TOLERANCE¶. Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-7. LOCAL_CUTOFF¶. Localization cutoff. Type: double; Default: 0.02. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. MEMORY¶. The amount of memory available (in Mb). Type: integer; Default: 2000. MP2_OS_SCALE¶. The scale factor used for opposite-spin pairs in SCS computations. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. The scale factor used for same-spin pairs in SCS computations. Type: double; Default: 1.0/3.0. NEGLECT_DISTANT_PAIR¶. Do neglect distant pairs?. Type: boolean; Default: true. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for T2 amplitudes (RMS change). Type: conv double; Default: 1e-5. SCREEN_INTS¶. Do screen integrals?. Type: boolean; Default: false. SCS¶. Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SCS_N¶. Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. Expert¶. WFN¶. Wavefunction type. Type: string; Default: LMP2. Table Of Contents. LMP2; General; DF_BASIS_MP2; DF_LMP2; DIIS; DIIS_MAX_VECS; DIIS_START_ITER; DISTANT_PAIR_CUTOFF; DOMAIN_PRINT_EXIT; E_CONVERGENCE; FOCK_TOLERANCE; INTS_TOLERANCE; LOCAL_CUTOFF; MAXITER; MEMORY; MP2_OS_SCALE; MP2_SS_SCALE; NEGLECT_DISTANT_PAIR; REFERENCE; R_CONVERGENCE; SCREEN_INTS; SCS; SCS_N. Expert; WFN. Previous topic; TRIPLES_LOW_MEMORY; Next topic; DF_BASIS_MP2; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; Keywords by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__lmp2-1.html:2249,optimiz,optimized,2249,psi4manual/4.0b4/autodir_options_c/module__lmp2-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__lmp2-1.html,2,['optimiz'],['optimized']
Performance,"ation with symmetry. sapt-compare; SAPT0 aug-cc-pVDZ computation of the water-water interaction energy, using the three SAPT codes. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. dft-jk; DFT JK on-disk test. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. cbs-delta-energy; Extrapolated energies with delta correction. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf con",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:24093,perform,performs,24093,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['perform'],['performs']
Performance,"ation)arg1) -> None :. Set equal to reflection in yz plane; C++ signature :. void sigma_yz(N3psi17SymmetryOperationE {lvalue}). psi4.SymmetryOperation.trace()¶; Python Library Documentation: method trace; trace(...) unbound psi4.SymmetryOperation method. trace( (SymmetryOperation)arg1) -> float :. Returns trace of transformation matrix; C++ signature :. d trace(N3psi17SymmetryOperationE {lvalue}). psi4.SymmetryOperation.transform()¶; Python Library Documentation: method transform; transform(...) unbound psi4.SymmetryOperation method. transform( (SymmetryOperation)arg1, (SymmetryOperation)arg2) -> SymmetryOperation :. Performs the transform arg2 * arg1 * arg2~; C++ signature :. N3psi17SymmetryOperationE transform(N3psi17SymmetryOperationE {lvalue},N3psi17SymmetryOperationE). psi4.SymmetryOperation.transpose()¶; Python Library Documentation: method transpose; transpose(...) unbound psi4.SymmetryOperation method. transpose( (SymmetryOperation)arg1) -> None :. Performs transposition of matrix operation; C++ signature :. void transpose(N3psi17SymmetryOperationE {lvalue}). psi4.SymmetryOperation.unit()¶; Python Library Documentation: method unit; unit(...) unbound psi4.SymmetryOperation method. unit( (SymmetryOperation)arg1) -> None :. Set equal to a unit matrix; C++ signature :. void unit(N3psi17SymmetryOperationE {lvalue}). psi4.SymmetryOperation.zero()¶; Python Library Documentation: method zero; zero(...) unbound psi4.SymmetryOperation method. zero( (SymmetryOperation)arg1) -> None :. Zero out the symmetry operation; C++ signature :. void zero(N3psi17SymmetryOperationE {lvalue}). ThreeCenterOverlapInt¶. psi4.ThreeCenterOverlapInt.compute_shell()¶; Python Library Documentation: method compute_shell; compute_shell(...) unbound psi4.ThreeCenterOverlapInt method. compute_shell( (ThreeCenterOverlapInt)arg1, (int)arg2, (int)arg3, (int)arg4) -> None :. docstring; C++ signature :. void compute_shell(N3psi21ThreeCenterOverlapIntE {lvalue},i,i,i). psi4.ThreeCenterOverlapInt.py_b",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:344920,Perform,Performs,344920,psi4manual/1.0.0/autodoc_psimod-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html,2,['Perform'],['Performs']
Performance,"ation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:9864,perform,performs,9864,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,4,['perform'],['performs']
Performance,"ation. Additionally, the; LINK implementation scales well with system size; while simultaneously providing a formally-exact computation of the; Exchange term. See Linear Exchange for more information. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DFA DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used. DISK_DFA DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4‘s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation. Additionally, expert users; can manually switch between the in-memory and on-disk options within MEM_DF or DISK_DF using; the SCF_SUBTYPE option. Using SCF_SUBTYPE = AUTO, where PSI4; automatically selects the in-memory or on-disk option for MEM_DF/DISK_DF based on memory and molecule, is the default; and recommended option. However, the in-memory or on-disk algorithms for MEM_DF and DISK_DF can be forced by using; SCF_SUBTYPE = INCORE or SCF_SUBTYPE = OUT_OF_CORE, respectively.; Note that an exception will be thrown if; SCF_SUBTYPE ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/scf.html:30767,perform,performance,30767,psi4manual/1.8.x/scf.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/scf.html,2,['perform'],['performance']
Performance,"ation. Additionally, the; LINK implementation scales well with system size; while simultaneously providing a formally-exact computation of the; Exchange term. See Linear Exchange for more information. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DFA DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used. DISK_DFA DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4‘s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation.; For some of these algorithms, Schwarz and/or density sieving can be used to; identify negligible integral contributions in extended systems. To activate; sieving, set the INTS_TOLERANCE keyword to your desired cutoff; (1.0E-12 is recommended for most applications). To choose the type of sieving, set; the SCREENING keyword to your desired option. For Schwarz screening, set it; to SCHWARZ, for CSAM, CSAM, and for density matrix-based screening, DENSITY. SCHWARZUses the Cauchy-Schwarz inequality to calculate an upper bounded value of a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/scf.html:28532,perform,performance,28532,psi4manual/1.7.x/scf.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/scf.html,1,['perform'],['performance']
Performance,"ation.; #! Sample UHF/6-31G** CH2 computation. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; 1@UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/tutorial-1.html:5413,Optimiz,Optimization,5413,psi4manual/1.1.0/tutorial-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/tutorial-1.html,6,['Optimiz'],['Optimization']
Performance,ation; WFN — PSI4 [beta2] documentation; ZETA — PSI4 [beta2] documentation; ABCD — PSI4 [beta2] documentation; ANALYZE — PSI4 [beta2] documentation; CACHELEVEL — PSI4 [beta2] documentation; DIIS — PSI4 [beta2] documentation; GAUGE — PSI4 [beta2] documentation; LINEAR — PSI4 [beta2] documentation; LOCAL — PSI4 [beta2] documentation; LOCAL_CPHF_CUTOFF — PSI4 [beta2] documentation; LOCAL_CUTOFF — PSI4 [beta2] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta2] documentation; LOCAL_METHOD — PSI4 [beta2] documentation; LOCAL_PAIRDEF — PSI4 [beta2] documentation; LOCAL_WEAKP — PSI4 [beta2] documentation; MAXITER — PSI4 [beta2] documentation; NUM_AMPS_PRINT — PSI4 [beta2] documentation; OMEGA — PSI4 [beta2] documentation; PROPERTY — PSI4 [beta2] documentation; R_CONVERGENCE — PSI4 [beta2] documentation; REFERENCE — PSI4 [beta2] documentation; RESTART — PSI4 [beta2] documentation; SEKINO — PSI4 [beta2] documentation; WFN — PSI4 [beta2] documentation; AO_BASIS — PSI4 [beta2] documentation; CACHELEVEL — PSI4 [beta2] documentation; EOM_REFERENCE — PSI4 [beta2] documentation; INTS_TOLERANCE — PSI4 [beta2] documentation; KEEP_OEIFILE — PSI4 [beta2] documentation; KEEP_TEIFILE — PSI4 [beta2] documentation; LOCAL — PSI4 [beta2] documentation; LOCAL_CORE_CUTOFF — PSI4 [beta2] documentation; LOCAL_CPHF_CUTOFF — PSI4 [beta2] documentation; LOCAL_CUTOFF — PSI4 [beta2] documentation; LOCAL_DOMAIN_MAG — PSI4 [beta2] documentation; LOCAL_DOMAIN_POLAR — PSI4 [beta2] documentation; LOCAL_DOMAIN_SEP — PSI4 [beta2] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta2] documentation; LOCAL_METHOD — PSI4 [beta2] documentation; LOCAL_PAIRDEF — PSI4 [beta2] documentation; LOCAL_WEAKP — PSI4 [beta2] documentation; OMEGA — PSI4 [beta2] documentation; PROPERTY — PSI4 [beta2] documentation; REFERENCE — PSI4 [beta2] documentation; SEMICANONICAL — PSI4 [beta2] documentation; WFN — PSI4 [beta2] documentation; CC_NUM_THREADS — PSI4 [beta2] documentation; REFERENCE — PSI4 [beta2] documentation; SEMICANONICAL ,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:909502,CACHE,CACHELEVEL,909502,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,ation; WFN — PSI4 [beta3] documentation; ZETA — PSI4 [beta3] documentation; ABCD — PSI4 [beta3] documentation; ANALYZE — PSI4 [beta3] documentation; CACHELEVEL — PSI4 [beta3] documentation; DIIS — PSI4 [beta3] documentation; GAUGE — PSI4 [beta3] documentation; LINEAR — PSI4 [beta3] documentation; LOCAL — PSI4 [beta3] documentation; LOCAL_CPHF_CUTOFF — PSI4 [beta3] documentation; LOCAL_CUTOFF — PSI4 [beta3] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta3] documentation; LOCAL_METHOD — PSI4 [beta3] documentation; LOCAL_PAIRDEF — PSI4 [beta3] documentation; LOCAL_WEAKP — PSI4 [beta3] documentation; MAXITER — PSI4 [beta3] documentation; NUM_AMPS_PRINT — PSI4 [beta3] documentation; OMEGA — PSI4 [beta3] documentation; PROPERTY — PSI4 [beta3] documentation; R_CONVERGENCE — PSI4 [beta3] documentation; REFERENCE — PSI4 [beta3] documentation; RESTART — PSI4 [beta3] documentation; SEKINO — PSI4 [beta3] documentation; WFN — PSI4 [beta3] documentation; AO_BASIS — PSI4 [beta3] documentation; CACHELEVEL — PSI4 [beta3] documentation; EOM_REFERENCE — PSI4 [beta3] documentation; INTS_TOLERANCE — PSI4 [beta3] documentation; KEEP_OEIFILE — PSI4 [beta3] documentation; KEEP_TEIFILE — PSI4 [beta3] documentation; LOCAL — PSI4 [beta3] documentation; LOCAL_CORE_CUTOFF — PSI4 [beta3] documentation; LOCAL_CPHF_CUTOFF — PSI4 [beta3] documentation; LOCAL_CUTOFF — PSI4 [beta3] documentation; LOCAL_DOMAIN_MAG — PSI4 [beta3] documentation; LOCAL_DOMAIN_POLAR — PSI4 [beta3] documentation; LOCAL_DOMAIN_SEP — PSI4 [beta3] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta3] documentation; LOCAL_METHOD — PSI4 [beta3] documentation; LOCAL_PAIRDEF — PSI4 [beta3] documentation; LOCAL_WEAKP — PSI4 [beta3] documentation; OMEGA — PSI4 [beta3] documentation; PROPERTY — PSI4 [beta3] documentation; REFERENCE — PSI4 [beta3] documentation; SEMICANONICAL — PSI4 [beta3] documentation; WFN — PSI4 [beta3] documentation; CC_NUM_THREADS — PSI4 [beta3] documentation; REFERENCE — PSI4 [beta3] documentation; SEMICANONICAL ,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1118949,CACHE,CACHELEVEL,1118949,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,ation; WFN — PSI4 [beta4] documentation; ZETA — PSI4 [beta4] documentation; ABCD — PSI4 [beta4] documentation; ANALYZE — PSI4 [beta4] documentation; CACHELEVEL — PSI4 [beta4] documentation; DIIS — PSI4 [beta4] documentation; GAUGE — PSI4 [beta4] documentation; LINEAR — PSI4 [beta4] documentation; LOCAL — PSI4 [beta4] documentation; LOCAL_CPHF_CUTOFF — PSI4 [beta4] documentation; LOCAL_CUTOFF — PSI4 [beta4] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta4] documentation; LOCAL_METHOD — PSI4 [beta4] documentation; LOCAL_PAIRDEF — PSI4 [beta4] documentation; LOCAL_WEAKP — PSI4 [beta4] documentation; MAXITER — PSI4 [beta4] documentation; NUM_AMPS_PRINT — PSI4 [beta4] documentation; OMEGA — PSI4 [beta4] documentation; PROPERTY — PSI4 [beta4] documentation; R_CONVERGENCE — PSI4 [beta4] documentation; REFERENCE — PSI4 [beta4] documentation; RESTART — PSI4 [beta4] documentation; SEKINO — PSI4 [beta4] documentation; WFN — PSI4 [beta4] documentation; AO_BASIS — PSI4 [beta4] documentation; CACHELEVEL — PSI4 [beta4] documentation; EOM_REFERENCE — PSI4 [beta4] documentation; INTS_TOLERANCE — PSI4 [beta4] documentation; KEEP_OEIFILE — PSI4 [beta4] documentation; KEEP_TEIFILE — PSI4 [beta4] documentation; LOCAL — PSI4 [beta4] documentation; LOCAL_CORE_CUTOFF — PSI4 [beta4] documentation; LOCAL_CPHF_CUTOFF — PSI4 [beta4] documentation; LOCAL_CUTOFF — PSI4 [beta4] documentation; LOCAL_DOMAIN_MAG — PSI4 [beta4] documentation; LOCAL_DOMAIN_POLAR — PSI4 [beta4] documentation; LOCAL_DOMAIN_SEP — PSI4 [beta4] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta4] documentation; LOCAL_METHOD — PSI4 [beta4] documentation; LOCAL_PAIRDEF — PSI4 [beta4] documentation; LOCAL_WEAKP — PSI4 [beta4] documentation; OMEGA — PSI4 [beta4] documentation; PROPERTY — PSI4 [beta4] documentation; REFERENCE — PSI4 [beta4] documentation; SEMICANONICAL — PSI4 [beta4] documentation; WFN — PSI4 [beta4] documentation; CC_NUM_THREADS — PSI4 [beta4] documentation; REFERENCE — PSI4 [beta4] documentation; SEMICANONICAL ,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1330052,CACHE,CACHELEVEL,1330052,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,ation; WFN — PSI4 [beta5] documentation; ZETA — PSI4 [beta5] documentation; ABCD — PSI4 [beta5] documentation; ANALYZE — PSI4 [beta5] documentation; CACHELEVEL — PSI4 [beta5] documentation; DIIS — PSI4 [beta5] documentation; GAUGE — PSI4 [beta5] documentation; LINEAR — PSI4 [beta5] documentation; LOCAL — PSI4 [beta5] documentation; LOCAL_CPHF_CUTOFF — PSI4 [beta5] documentation; LOCAL_CUTOFF — PSI4 [beta5] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta5] documentation; LOCAL_METHOD — PSI4 [beta5] documentation; LOCAL_PAIRDEF — PSI4 [beta5] documentation; LOCAL_WEAKP — PSI4 [beta5] documentation; MAXITER — PSI4 [beta5] documentation; NUM_AMPS_PRINT — PSI4 [beta5] documentation; OMEGA — PSI4 [beta5] documentation; PROPERTY — PSI4 [beta5] documentation; R_CONVERGENCE — PSI4 [beta5] documentation; REFERENCE — PSI4 [beta5] documentation; RESTART — PSI4 [beta5] documentation; SEKINO — PSI4 [beta5] documentation; WFN — PSI4 [beta5] documentation; AO_BASIS — PSI4 [beta5] documentation; CACHELEVEL — PSI4 [beta5] documentation; EOM_REFERENCE — PSI4 [beta5] documentation; INTS_TOLERANCE — PSI4 [beta5] documentation; KEEP_OEIFILE — PSI4 [beta5] documentation; KEEP_TEIFILE — PSI4 [beta5] documentation; LOCAL — PSI4 [beta5] documentation; LOCAL_CORE_CUTOFF — PSI4 [beta5] documentation; LOCAL_CPHF_CUTOFF — PSI4 [beta5] documentation; LOCAL_CUTOFF — PSI4 [beta5] documentation; LOCAL_DOMAIN_MAG — PSI4 [beta5] documentation; LOCAL_DOMAIN_POLAR — PSI4 [beta5] documentation; LOCAL_DOMAIN_SEP — PSI4 [beta5] documentation; LOCAL_FILTER_SINGLES — PSI4 [beta5] documentation; LOCAL_METHOD — PSI4 [beta5] documentation; LOCAL_PAIRDEF — PSI4 [beta5] documentation; LOCAL_WEAKP — PSI4 [beta5] documentation; OMEGA — PSI4 [beta5] documentation; PROPERTY — PSI4 [beta5] documentation; REFERENCE — PSI4 [beta5] documentation; SEMICANONICAL — PSI4 [beta5] documentation; WFN — PSI4 [beta5] documentation; CC_NUM_THREADS — PSI4 [beta5] documentation; REFERENCE — PSI4 [beta5] documentation; SEMICANONICAL ,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1548981,CACHE,CACHELEVEL,1548981,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,"ation?. Type: boolean; Default: true. DO_DIIS (OCC)¶OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DISP_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-dispersion term. Type: boolean; Default: false. DO_IND30_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT2+3, compute the non-approximated third-order exchange-induction term. Type: boolean; Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-induction term. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:120712,perform,perform,120712,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,4,['perform'],['perform']
Performance,"ationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). """"""; kwargs = p4util.kwargs_lower(kwargs). if hasattr(name, '__call__'):; lowername = name; custom_gradient = True; else:; lowername = name.lower(); custom_gradient = False. return_wfn = kwargs.pop('return_wfn', False). return_history = kwargs.pop('return_history', False); if return_history:; # Add wfn once the deep copy issues are worked out; step_energies = []; step_gradients = []; step_coordinates = []. # For CBS wrapper, need to set retention on INTCO file; if custom_gradient or ('/' in lowername):; core.IOManager.shared_object().set_specific_retention(1, True). if kwargs.get('bsse_type', None) is not None:; raise ValidationError(""Optimize: Does not currently support 'bsse_type' arguements""). full_hess_every = core.get_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. if custom_gradient and core.has_option_changed('OPTKING', 'FULL_HESS_EVERY'):; raise ValidationError(""Optimize: Does not support custom Hessian's yet.""); else:; hessian_with_method = kwargs.get('hessian_with', lowername). # are we in sow/reap mode?; opt_mode = kwargs.get('mode', 'continuous').lower(); if opt_mode not in ['continuous', 'sow', 'reap']:; raise ValidationError(""""""Optimize execution mode '%s' not valid."""""" % (opt_mode)). optstash = p4util.OptionsState(; ['OPTKING', 'INTRAFRAG_STEP_LIMIT'],; ['FINDIF', 'HESSIAN_WRITE'],; ['OPTKING', 'CART_HESS_READ'],; ['SCF', 'GUESS_PERSIST'], # handle on behalf of cbs(); ['SCF', 'GUESS']). n = kwargs.get('opt_iter', 1). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()). # If we are freezing cartesian, do not orient or COM; if core.get_local_option(""OPTKING"", ""FROZEN_CARTESIAN""):; molecule.fix_orientation(True); molecule.fix_com(True); molecule.update_geometry(). # Shifting the geometry so need to copy the active molecule; moleculeclone = molecule.clone()",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html:59656,Optimiz,Optimize,59656,psi4manual/1.2.1/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html,1,['Optimiz'],['Optimize']
Performance,"ation_fixed() psi4.core.Molecule method. origin psi4.core.OneBodyAOInt attribute. original_coef() psi4.core.GaussianShell method. ORTH_TYPE (DFOCC). (OCC). OS_SCALE (OCC). outfile_name() in module psi4.core. output. ; cbs(). database(). geometry optimization. SAPT. vibrational analysis. overlap() psi4.core.FISAPT method. overlap_3c() psi4.core.IntegralFactory method. OVERLAP_CHECK (CCEOM). overlap_grad() psi4.core.MintsHelper method. OverlapInt class in psi4.core. P. p psi4.core.AOShellCombinationsIterator attribute. P (THERMO). PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. parent_atom() psi4.core.BlockOPoints method. PARENT_SYMMETRY (GLOBALS). ParsingError. partial_cholesky_factorize() psi4.core.Matrix method. partition() psi4.core.FISAPT method. PastureRequiredError. PATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32]. PBS queueing system. PCG_BETA_TYPE (DFOCC). (OCC). PCG_CONVERGENCE (DFOCC). (OCC). PCG_MAXITER (DFOCC). (OCC). PCM, [1]. Using PCM. PCM (GLOBALS). PCM POLARIZATION ENERGY. PCM_CC_TYPE (PCM). PCM_enabled() psi4.core.Wavefunction method. pcm_helper() in module psi4.driver. in module psi4.driver.p4util. PCM_SCF_TYPE (PCM). PCMSolver. PCMSOLVER_PARSED_FNAME (PCM). PE. Using PE. PE (GLOBALS). PE ENERGY. PE_ECP (PE). PEP1. PERTURB_CBS (PSIMRCC). PERTURB_CBS_COUPLING (PSIMRCC). PERTURB_DIPOLE (SCF). perturb_grad() psi4.core.MintsHelper method. PERTURB_H (SCF). PERTURB_MAGNITUDE (DETCI). (SCF). PERTURB_WITH (SCF). petite_list() psi4.core.MintsHelper method. psi4.core.SOBasisSet method. petite_list1() psi4.core.MintsHelper method. PetiteList class in psi4.core. PHI_POINTS (SCF). physconst. physical constants. pitzer_to_ci_order_onel() psi4.core.CIWavefunction method. pitzer_to_ci_order_twoel() psi4.core.CIWavefunction method. PK_ALGO (SCF). PK_ALL_NONSYM (SCF). PK_MAX_BUCKETS (SCF). PK_NO_INCORE (SCF). p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/genindex.html:85913,queue,queueing,85913,psi4manual/1.7.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/genindex.html,1,['queue'],['queueing']
Performance,"ations of coordinates. In the simplest default case, the lines; above simply define combination coordinates which are identical to the simple internals.; If OPT_COORDINATES specifies delocalized coordinates, then the combinations; will be more complex.; Since the multiple-fragment coordinates are still under; development, they are not documented here. However, if desired, one can change the value; of FRAG_MODE, generate the internal coordinates, and see how multiple; fragment systems are defined.; Coordinates may be frozen by adding an asterisk after the letter of the coordinate. The; asterisk results in that internal coordinate being frozen at its initial value. The; “intco” file below for water specifies an optimization with both O-H bonds frozen.:; F 1 3; R* 1 2; R* 1 3; B 2 1 3. If one instead wishes to optimize toward (“fix”) a value that is not satisfied by the; initial structure, then the value is added to the end of the line. The following; corresponds to an optimization that will add additional forces to move the O-H bonds; to 1.70 au.; F 1 3; R 1 2 1.70; R 1 3 1.70; B 2 1 3. Convergence Criteria¶; Optking monitors five quantities to evaluate the progress of a geometry; optimization. These are (with their keywords) the change in energy; (MAX_ENERGY_G_CONVERGENCE), the maximum element of; the gradient (MAX_FORCE_G_CONVERGENCE), the root-mean-square; of the gradient (RMS_FORCE_G_CONVERGENCE), the maximum element; of displacement (MAX_DISP_G_CONVERGENCE), and the; root-mean-square of displacement (RMS_DISP_G_CONVERGENCE),; all in internal coordinates and atomic units. Usually, these options will not; be set directly. Primary control for geometry convergence lies with the keyword; G_CONVERGENCE which sets the aforementioned in accordance; with Table Geometry Convergence. Summary of sets of geometry optimization criteria available in PSI4¶. G_CONVERGENCE; Max Energy; Max Force; RMS Force; Max Disp; RMS Disp. NWCHEM_LOOSE 4. \(4.5 \times 10^{-3}\); \(3.0 \times 10",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/optking-1.html:10671,optimiz,optimization,10671,psi4manual/1.4.0/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/optking-1.html,5,['optimiz'],['optimization']
Performance,"ations of coordinates. In the simplest default case, the lines; above simply define combination coordinates which are identical to the simple internals.; If OPT_COORDINATES specifies delocalized coordinates, then the combinations; will be more complex.; Since the multiple-fragment coordinates are still under; development, they are not documented here. However, if desired, one can change the value; of FRAG_MODE, generate the internal coordinates, and see how multiple; fragment systems are defined.; Coordinates may be frozen by adding an asterisk after the letter of the coordinate. The; asterisk results in that internal coordinate being frozen at its initial value. The; “intco” file below for water specifies an optimization with both O-H bonds frozen.:; F 1 3; R* 1 2; R* 1 3; B 2 1 3. If one instead wishes to optimize toward (“fix”) a value that is not satisfied by the; initial structure, then the value is added to the end of the line. The following; corresponds to an optimization that will add additional forces to move the O-H bonds; to 1.70 au.; F 1 3; R 1 2 1.70; R 1 3 1.70; B 2 1 3. Convergence Criteria¶; Optking monitors five quantities to evaluate the progress of a geometry; optimization. These are (with their keywords) the change in energy; (MAX_ENERGY_G_CONVERGENCE), the maximum element of; the gradient (MAX_FORCE_G_CONVERGENCE), the root-mean-square; of the gradient (RMS_FORCE_G_CONVERGENCE), the maximum element; of displacement (MAX_DISP_G_CONVERGENCE), and the; root-mean-square of displacement (RMS_DISP_G_CONVERGENCE),; all in internal coordinates and atomic units. Usually, these options will not; be set directly. Primary control for geometry convergence lies with the keyword; G_CONVERGENCE which sets the aforementioned in accordance; with Table Geometry Convergence. Summary of sets of geometry optimization criteria available in Psi4¶. G_CONVERGENCE; Max Energy; Max Force; RMS Force; Max Disp; RMS Disp. NWCHEM_LOOSE [4];  . GAU_LOOSE [6];  . TURBOMOLE [4]. G",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/optking-1.html:10684,optimiz,optimization,10684,psi4manual/1.0.0/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/optking-1.html,2,['optimiz'],['optimization']
Performance,"ations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (MP2); MP2 — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (OMP2); OMP2 — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (OMP3); OMP3 — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtua",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:9197,CACHE,CACHELEVEL,9197,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,6,"['CACHE', 'cache', 'perform']","['CACHELEVEL', 'cacheing', 'perform']"
Performance,"atom(N5boost10shared_ptrIN3psi6MatrixEEE,i,i,i,d). psi4.dmrg()¶; Python Library Documentation: built-in function dmrg in module psi4; dmrg(...). dmrg( (Wavefunction)arg1) -> Wavefunction :. Runs the DMRG code.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE dmrg(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.efp_init()¶; Python Library Documentation: built-in function efp_init in module psi4; efp_init(...). efp_init() -> EFP :. Initializes the EFP library and returns an EFP object.; C++ signature :. N5boost10shared_ptrIN3psi3efp3EFPEEE efp_init(). psi4.efp_set_options()¶; Python Library Documentation: built-in function efp_set_options in module psi4; efp_set_options(...). efp_set_options() -> None :. Set EFP options from environment options object.; C++ signature :. void efp_set_options(). psi4.fd_1_0()¶; Python Library Documentation: built-in function fd_1_0 in module psi4; fd_1_0(...). fd_1_0( (Molecule)arg1, (list)arg2) -> Matrix :. Performs a finite difference gradient computation, from energy points.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE fd_1_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE). psi4.fd_freq_0()¶; Python Library Documentation: built-in function fd_freq_0 in module psi4; fd_freq_0(...). fd_freq_0( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :. Performs a finite difference frequency computation, from energy points, for a given irrep.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_0(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i). psi4.fd_freq_1()¶; Python Library Documentation: built-in function fd_freq_1 in module psi4; fd_freq_1(...). fd_freq_1( (Molecule)arg1, (list)arg2, (int)arg3) -> Matrix :. Performs a finite difference frequency computation, from gradients, for a given irrep.; C++ signature :. N5boost10shared_ptrIN3psi6MatrixEEE fd_freq_1(N5boost10shared_ptrIN3psi8MoleculeEEE,N5boost6python4listE,i). psi4.fd_geoms_1_0()¶; Python Library Documentation: built-in funct",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:21257,Perform,Performs,21257,psi4manual/1.0.0/autodoc_psimod-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html,2,['Perform'],['Performs']
Performance,"atoms. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. cc12; Single point energies of multiple excited states with EOM-CCSD. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., e",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:31000,perform,performs,31000,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['perform'],['performs']
Performance,"ator and DIIS (if enabled). For restricted-open references, EDIIS and ADIIS have no effect. Type: string; Possible Values: NONE, EDIIS, ADIIS; Default: ADIIS. SCF_INITIAL_FINISH_DIIS_TRANSITION¶. SCF error at which to complete the linear interpolation between DIIS steps and steps of the initial SCF accelerator Value taken from Garza and Scuseria, DOI: 10.1063/1.4740249. Type: double; Default: 1.0e-4. SCF_INITIAL_START_DIIS_TRANSITION¶. SCF error at which to start the linear interpolation between DIIS steps and steps of the initial SCF accelerator. Value taken from Garza and Scuseria, DOI: 10.1063/1.4740249. Type: double; Default: 1.0e-1. SOSCF¶. Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV¶. Second order convergence threshold. Cease microiterating at this value. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER¶. Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER¶. Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT¶. Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE¶. When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. STABILITY_ANALYSIS¶. Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. Fractional Occupation UHF/UKS¶. FRAC_DIIS¶. Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD¶. Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC¶. The absolute indices of occupied orbitals ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__scf.html:8480,perform,perform,8480,psi4manual/1.6.x/autodir_options_c/module__scf.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__scf.html,1,['perform'],['perform']
Performance,"atrix. Type: array; Default: No Default. DO_ALL_TEI (TRANSQT); TRANSQT — Do transform all TEIs. Type: boolean; Default: false. DO_CCD_DISP (SAPT); SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (OCC); OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC); OCC — Do apply level shifting?. Type: boolean; Default: true. DO_SCS (OCC); OCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SINGLETS (CPHF); CPHF — Do singlet states? Default true. Type: boolean; Default: true. DO_SOS (OCC); OCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT); SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DO_TRIPLETS (CPHF); CPHF — Do triplet states? Default true. Type: boolean; Default: true. DOCC (GLOBALS); GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF); MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DOMAIN_PRINT (CIS); CIS — Do print the domains?. Type: boolean; Default: false. DOMAIN_PRINT_EXIT (LMP2); LMP2 — Do exit after printing the domains?. Type: boolean; Default: false. DOMAINS (CIS); CIS —. Type: array; Default: No Default. E3_SCALE (OCC); OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for energ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:35834,perform,perform,35834,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,4,"['optimiz', 'perform']","['optimizations', 'perform']"
Performance,"atrix? This density matrix can be diagonalized to obtain the CI natural orbitals. Type: boolean; Default: false. OPDM_IN_FILE (TRANSQT); TRANSQT — MO-basis one-particle density matrix file. Type: integer; Default: PSIF_MO_OPDM. OPDM_KE (DETCI); DETCI (Expert) — Do compute the kinetic energy contribution from the correlated part of the one-particle density matrix?. Type: boolean; Default: false. OPDM_OUT_FILE (TRANSQT); TRANSQT — AO-basis one-particle density matrix file. Type: integer; Default: PSIF_AO_OPDM. OPDM_PRINT (DETCI); DETCI — Do print the one-particle density matrix for each root?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY); CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (CPHF); CPHF — Do add relaxation terms to the one particle density matrix, for properties?. Type: boolean; Default: false. OPDM_RELAX (DFMP2); DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_METHOD (OCC); OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters by solving the orbital-reponse (coupled-perturbed CC) equations. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: ORB_RESP. OPT_TYPE (OPTKING); OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (OCC); OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (OCC); OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the si",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html:91683,optimiz,optimization,91683,psi4manual/4.0b5/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimization']
Performance,"aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy Methods; The presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:; name (string) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (string) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (string) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (string) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (string) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtai",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/api/psi4.driver.cbs.html:5165,perform,performed,5165,psi4manual/1.1.0/api/psi4.driver.cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/api/psi4.driver.cbs.html,3,['perform'],['performed']
Performance,"auge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pV",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:20337,Optimiz,Optimization,20337,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['Optimiz'],['Optimization']
Performance,"ault is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. FCI¶. Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. CI_MAXITER¶. Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. NUM_ROOTS¶. number of CI roots to find. Type: integer; Default: 1. ICORE¶. Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. DIAG_METHOD¶. This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/detci.html:8187,optimiz,optimized,8187,psi4manual/master/detci.html,https://psicode.org,https://psicode.org/psi4manual/master/detci.html,17,['optimiz'],['optimized']
Performance,"ault modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE') if core.has_global_option_changed(""MP_TYPE"") else ""DF""; module = core.get_global_option('QC_MODULE'); all_electron = (core.get_global_option('FREEZE_CORE') == ""FALSE""); # Considering only [df]occ. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if all_electron:; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient; elif reference == 'UHF':; if mtd_type == 'CONV':; if all_electron:; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient. if func is None:; raise ManagedMethodError(['select_mp3_gradient', name, 'MP_TYPE', mtd_type, reference, module, all_electron]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_omp3(name, **kwargs):; """"""Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ. func = None; if reference in ['RHF', 'UHF', 'ROHF', 'RKS', 'UKS']:; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc. if func is None:; raise ManagedMethodError(['select_omp3', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_omp3_gradient(name, **kwargs):; """"""Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_gl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html:12918,perform,performance,12918,psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,3,['perform'],['performance']
Performance,"ault. CFOUR_GENBAS_3¶. This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4¶. This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV¶. Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC¶. Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP¶. Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD¶. Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:30094,optimiz,optimizations,30094,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,4,['optimiz'],"['optimizations', 'optimizer']"
Performance,"ault. CUTOFF (DFOCC); DFOCC — Cutoff value for numerical procedures. Type: integer; Default: 8. CUTOFF (OCC); OCC — Cutoff value for numerical procedures. Type: integer; Default: 14. D_CONVERGENCE (FISAPT); FISAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. D_CONVERGENCE (MCSCF); MCSCF — Convergence criterion for density. Type: conv double; Default: 1e-6. D_CONVERGENCE (SAPT); SAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. D_CONVERGENCE (SCF); SCF — Convergence criterion for SCF density, which is defined as the RMS value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMPING_CONVERGENCE (SCF); SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE (DCFT); DCFT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC); PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the amplitudes from the previous iteration being mixed into the current iteration) can help in cases where oscillatory convergence is",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:93262,perform,performed,93262,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,4,['perform'],['performed']
Performance,"ault. FROZEN_CARTESIAN (OPTKING); OPTKING — Specify atom and X, XY, XYZ, … to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING); OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS); GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS); GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING); OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM); CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (CCDENSITY); CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE); CCRESPONSE — Specifies the choice of representation of the electric dipole operator. For po",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:134396,optimiz,optimization,134396,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,4,['optimiz'],['optimization']
Performance,"ault. FROZEN_DIHEDRAL (OPTKING)¶OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING)¶OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_OOFP (OPTKING)¶OPTKING — Specify out-of-plane angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_UOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING)¶OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM)¶CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING)¶OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (ADC)¶ADC — Specifies the choice of representation of the electric dipole operator. * Acceptable values are LENGTH (default) and VELOCITY. Type: string; Possible Values: LENGTH, VELOCITY; Default: LENGTH. GAUGE ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:143994,optimiz,optimization,143994,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,4,['optimiz'],['optimization']
Performance,"ault: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:8035,cache,cache,8035,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,8,['cache'],['cache']
Performance,"ault: 50. PRINT¶. The amount of information to print to the output file for the sapt module. For 0, only the header and final results are printed. For 1, (recommended for large calculations) some intermediate quantities are also printed. Type: integer; Default: 1. Advanced SAPT0 Keywords¶. AIO_CPHF¶. Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS¶. Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. NO_RESPONSE¶. Don’t solve the CPHF equations? Evaluate \(E_{ind}^{(20)}\) and \(E_{exch-ind}^{(20)}\) instead of their response-including counterparts. Only turn on this option if the induction energy is not going to be used. Type: boolean; Default: false. EXCH_SCALE_ALPHA¶. Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. INTS_TOLERANCE¶. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶. The amount of information t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/sapt-1.html:16793,perform,perform,16793,psi4manual/1.1.0/sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/sapt-1.html,2,['perform'],['perform']
Performance,"ault: WERNER. LOCAL_PAIRDEF¶. Definition of local pair domains. Type: string; Default: No Default. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. NUM_AMPS_PRINT¶. Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. PROP_ALL¶. Compute unrelaxed properties for all excited states. Type: boolean; Default: true. PROP_ROOT¶. Root number (within its irrep) for computing properties. Type: integer; Default: 1. PROP_SYM¶. The symmetry of states. Type: integer; Default: 1. RESTART¶. Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. SEKINO¶. Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. ZETA¶. Do use zeta?. Type: boolean; Default: false. Expert¶. JOBTYPE¶. Type of job being performed. Type: string; Default: No Default. WFN¶. Wavefunction type. Type: string; Default: SCF. table of contents. CCLAMBDA; General; ABCD; AO_BASIS; CACHELEVEL; DIIS; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_FILTER_SINGLES; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; NUM_AMPS_PRINT; PROP_ALL; PROP_ROOT; PROP_SYM; RESTART; ROOTS_PER_IRREP; R_CONVERGENCE; SEKINO; ZETA. Expert; JOBTYPE; WFN. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__cclambda.html:3266,perform,performed,3266,psi4manual/1.6.x/autodir_options_c/module__cclambda.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__cclambda.html,2,"['CACHE', 'perform']","['CACHELEVEL', 'performed']"
Performance,"ault: false. FREEZE_INTRAFRAG (OPTKING)¶OPTKING — Do freeze all fragments rigid?. Type: boolean; Default: false. FROZEN_BEND (OPTKING)¶OPTKING — Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN (OPTKING)¶OPTKING — Specify atom and X, XY, XYZ, … to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING)¶OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING)¶OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING)¶OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM)¶CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING)¶OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:135564,optimiz,optimized,135564,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,5,['optimiz'],['optimized']
Performance,"avefunction when **return_wfn** specified. :raises: psi4.ConvergenceError if |optking__geom_maxiter| exceeded without reaching geometry convergence. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`. :type name: string; :param name: ``'scf'`` || ``'mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :type return_wfn: :ref:`boolean <op_py_boolean>`; :param return_wfn: ``'on'`` || |dl| ``'off'`` |dr|. Indicate to additionally return the :py:class:`~psi4.core.Wavefunction`; calculation result as the second element (after *float* energy) of a tuple. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. For maximum; flexibility, ``return_wfn`` is always on in ``'reap'`` mode. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html:50363,perform,performed,50363,psi4manual/1.1.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html,1,['perform'],['performed']
Performance,"avidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG¶. Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT¶. SS vectors stored per root. Type: integer; Default: 5. T3_WS_INCORE¶. Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. VECS_CC3¶. Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT¶. Vectors stored per root. Type: integer; Default: 12. Expert¶. EXCITATION_RANGE¶. The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. WFN¶. Wavefunction type. Type: string; Possible Values: EOM_CCSD, EOM_CC2, EOM_CC3; Default: EOM_CCSD. Table Of Contents. CCEOM; General; ABCD; CACHELEVEL; CACHETYPE; CC3_FOLLOW_ROOT; CC_NUM_THREADS; COLLAPSE_WITH_LAST; COMPLEX_TOLERANCE; EOM_GUESS; EOM_REFERENCE; E_CONVERGENCE; FULL_MATRIX; LOCAL; LOCAL_CUTOFF; LOCAL_DO_SINGLES; LOCAL_FILTER_SINGLES; LOCAL_GHOST; LOCAL_METHOD; LOCAL_PRECONDITIONER; LOCAL_WEAKP; MAXITER; NEW_TRIPLES; NUM_AMPS_PRINT; PROP_ROOT; PROP_SYM; REFERENCE; RESTART_EOM_CC3; RHF_TRIPLETS; ROOTS_PER_IRREP; R_CONVERGENCE; SCHMIDT_ADD_RESIDUAL_TOLERANCE; SEMICANONICAL; SINGLES_PRINT; SS_E_CONVERGENCE; SS_R_CONVERGENCE; SS_SKIP_DIAG; SS_VECS_PER_ROOT; T3_WS_INCORE; VECS_CC3; VECS_PER_ROOT. Expert; EXCITATION_RANGE; WFN. Previous topic; WFN; Next topic; ABCD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Keywords by Module ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__cceom-1.html:6529,CACHE,CACHELEVEL,6529,psi4manual/4.0b3/autodir_options_c/module__cceom-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__cceom-1.html,4,['CACHE'],"['CACHELEVEL', 'CACHETYPE']"
Performance,"avidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG¶. Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT¶. SS vectors stored per root. Type: integer; Default: 5. T3_WS_INCORE¶. Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. VECS_CC3¶. Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT¶. Vectors stored per root. Type: integer; Default: 12. Expert¶. EXCITATION_RANGE¶. The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. WFN¶. Wavefunction type. Type: string; Possible Values: EOM_CCSD, EOM_CC2, EOM_CC3; Default: EOM_CCSD. Table Of Contents. CCEOM; General; ABCD; CACHELEVEL; CACHETYPE; CC3_FOLLOW_ROOT; CC_NUM_THREADS; COLLAPSE_WITH_LAST; COMPLEX_TOLERANCE; EOM_GUESS; EOM_REFERENCE; E_CONVERGENCE; FULL_MATRIX; LOCAL; LOCAL_CUTOFF; LOCAL_DO_SINGLES; LOCAL_FILTER_SINGLES; LOCAL_GHOST; LOCAL_METHOD; LOCAL_PRECONDITIONER; LOCAL_WEAKP; MAXITER; NEW_TRIPLES; NUM_AMPS_PRINT; PROP_ROOT; PROP_SYM; REFERENCE; RESTART_EOM_CC3; RHF_TRIPLETS; ROOTS_PER_IRREP; R_CONVERGENCE; SCHMIDT_ADD_RESIDUAL_TOLERANCE; SEMICANONICAL; SINGLES_PRINT; SS_E_CONVERGENCE; SS_R_CONVERGENCE; SS_SKIP_DIAG; SS_VECS_PER_ROOT; T3_WS_INCORE; VECS_CC3; VECS_PER_ROOT. Expert; EXCITATION_RANGE; WFN. Previous topic; WFN; Next topic; ABCD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Appendices »; Keywords by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__cceom-1.html:6626,CACHE,CACHELEVEL,6626,psi4manual/4.0b4/autodir_options_c/module__cceom-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodir_options_c/module__cceom-1.html,4,['CACHE'],"['CACHELEVEL', 'CACHETYPE']"
Performance,"avidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SKIP_DIAG¶. Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT¶. SS vectors stored per root. Type: integer; Default: 5. T3_WS_INCORE¶. Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. VECS_CC3¶. Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT¶. Vectors stored per root. Type: integer; Default: 12. Expert¶. EXCITATION_RANGE¶. The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. WFN¶. Wavefunction type. Type: string; Possible Values: EOM_CCSD, EOM_CC2, EOM_CC3; Default: EOM_CCSD. Table Of Contents. CCEOM; General; ABCD; CACHELEVEL; CACHETYPE; CC3_FOLLOW_ROOT; CC_NUM_THREADS; COLLAPSE_WITH_LAST; COMPLEX_TOLERANCE; EOM_GUESS; EOM_REFERENCE; E_CONVERGENCE; FULL_MATRIX; LOCAL; LOCAL_CUTOFF; LOCAL_DO_SINGLES; LOCAL_FILTER_SINGLES; LOCAL_GHOST; LOCAL_METHOD; LOCAL_PRECONDITIONER; LOCAL_WEAKP; MAXITER; NEW_TRIPLES; NUM_AMPS_PRINT; PROP_ROOT; PROP_SYM; REFERENCE; RESTART_EOM_CC3; RHF_TRIPLETS; ROOTS_PER_IRREP; R_CONVERGENCE; SCHMIDT_ADD_RESIDUAL_TOLERANCE; SEMICANONICAL; SINGLES_PRINT; SS_E_CONVERGENCE; SS_R_CONVERGENCE; SS_SKIP_DIAG; SS_VECS_PER_ROOT; T3_WS_INCORE; VECS_CC3; VECS_PER_ROOT. Expert; EXCITATION_RANGE; WFN. Previous topic; WFN; Next topic; ABCD; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Keywords by Module ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__cceom-1.html:6626,CACHE,CACHELEVEL,6626,psi4manual/4.0b5/autodir_options_c/module__cceom-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__cceom-1.html,4,['CACHE'],"['CACHELEVEL', 'CACHETYPE']"
Performance,"aving many matrices into the same file.; """""". ret = {}; ret[prefix + ""Irreps""] = self.nirrep(); ret[prefix + ""Name""] = self.name; for h, v in enumerate(self.nph):; # If returning arrays to user, we want to return copies (snapshot), not; # views of the core.Matrix's memory.; if filename is None and not v.flags['OWNDATA']:; v = np.copy(v); ret[prefix + ""IrrepData"" + str(h)] = v. if isinstance(self, core.Matrix):; ret[prefix + ""Dim1""] = self.rowdim().to_tuple(); ret[prefix + ""Dim2""] = self.coldim().to_tuple(); if isinstance(self, core.Vector):; ret[prefix + ""Dim""] = [self.dim(x) for x in range(self.nirrep())]. if filename is None:; return ret. np.savez(filename, **ret). def _np_read(self, filename, prefix=""""):; """"""; Reads the data from a NumPy compress file.; """""". if isinstance(filename, np.lib.npyio.NpzFile):; data = filename; elif (sys.version_info[0] == 2) and isinstance(filename, (str, unicode)):; if not filename.endswith('.npz'):; filename = filename + '.npz'; data = np.load(filename); elif (sys.version_info[0] > 2) and isinstance(filename, str):; if not filename.endswith('.npz'):; filename = filename + '.npz'. data = np.load(filename); else:; raise Exception(""Filename not understood: %s"" % filename). ret_data = []. if ((prefix + ""Irreps"") not in data.keys()) or ((prefix + ""Name"") not in data.keys()):; raise ValidationError(""File %s does not appear to be a numpyz save"" % filename). for h in range(data[prefix + ""Irreps""]):; ret_data.append(data[prefix + ""IrrepData"" + str(h)]). arr_type = self.__mro__[0]; if arr_type == core.Matrix:; dim1 = core.Dimension.from_list(data[prefix + ""Dim1""]); dim2 = core.Dimension.from_list(data[prefix + ""Dim2""]); ret = self(str(data[prefix + ""Name""]), dim1, dim2); elif arr_type == core.Vector:; dim1 = core.Dimension.from_list(data[prefix + ""Dim""]); ret = self(str(data[prefix + ""Name""]), dim1). for h in range(data[prefix + ""Irreps""]):; ret.nph[h][:] = ret_data[h]. return ret. def _to_serial(data):; """"""; Converts an object with a .nph ac",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/numpy_helper.html:9476,load,load,9476,psi4manual/1.2.1/_modules/psi4/driver/p4util/numpy_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/numpy_helper.html,1,['load'],['load']
Performance,"awford:1997:instability], [Sherrill:1998:od], [Bozkaya:2011:omp2], and [Bozkaya:2011:omp3].; Further, Kurlancheek and Head-Gordon [Kurlancek:2009] demonstrated that first order properties such as; forces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs.; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further; discussed that the orbital response equations generally have a singularity problem at the unrestriction point; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or; small eigenvalues of the one-particle density matrix (OPDM). These abnormal eigenvalues may lead to unphysical; molecular properties such as vibrational frequencies. However, orbital optimized MP2 (hence Orbital optimized MP3); will solve this N-representability problem by disregarding orbital response contribution of one-partical; density matrix.; Although the performance of coupled-cluster singles and doubles (CCSD) and orbital-optimized; CCD (OD) is similar, the situation is different in the case of triples corrections, especially at stretched; geometries [Bozkaya:2012:odtl]. Bozkaya and Schaefer demonstrated that orbital-optimized coupled cluster based; triple corrections, especially those of asymmetrics, provide significantly better potential energy curves than; CCSD based triples corrections. Theory¶; What follows is a very basic description of orbital-optimized Møller–Plesset perturbation; theory as implemented in PSI4. We will follow our previous presentations ([Bozkaya:2011:omp2],; [Bozkaya:2011:omp3], and [Bozkaya:2012:odtl]); The orbital variations may be expressed by means of an exponential unitary operator. where is the orbital rotation operator. The effect of the orbital rotations on the MO coefficients can be written as. w",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/occ-1.html:2348,optimiz,optimized,2348,psi4manual/4.0b5/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/occ-1.html,4,['optimiz'],['optimized']
Performance,"ax']). # By default, DIIS in FRAC (1.0 occupation is always DIIS'd); frac_diis = kwargs.get('frac_diis', True). # By default, drop the files to the molecule's name; root = kwargs.get('filename', molecule.name()); traverse_filename = root + '.traverse.dat'; stats_filename = root + '.stats.dat'. # => Traverse <= #; core.set_local_option(""SCF"", ""DF_INTS_IO"", ""SAVE""). Ns = []; energies = []; potentials = []; convs = []; stats = []. # Run one SCF to burn things in; E, wfn = driver.energy('scf', dft_functional=name, return_wfn=True, molecule=molecule, **kwargs). # Determine HOMO; eps_a = wfn.epsilon_a(); eps_b = wfn.epsilon_b(); eps_a.print_out(); if Na == Nb:; HOMO = -Nb; elif Nb == 0:; HOMO = Na; else:; E_a = eps_a.get(int(Na - 1)); E_b = eps_b.get(int(Nb - 1)); if E_a >= E_b:; HOMO = Na; else:; HOMO = -Nb. stats.append("""""" %6d %6d %6d %6d %6d %6d\n"""""" % (N, Na, Nb, charge, mult, HOMO)). if HOMO > 0:; Na -= 1; else:; Nb -= 1; charge += 1; mult = Na - Nb + 1. core.set_local_option(""SCF"", ""DF_INTS_IO"", ""LOAD""); core.set_local_option(""SCF"", ""FRAC_START"", frac_start); core.set_local_option(""SCF"", ""FRAC_RENORMALIZE"", True). # Nuke 'em Rico!; for Nintegral in range(N, Nmin, -1):. # Nuke the current HOMO; for occ in foccs:. core.set_local_option(""SCF"", ""FRAC_OCC"", [HOMO]); core.set_local_option(""SCF"", ""FRAC_VAL"", [occ]). E, wfn = driver.energy('scf', dft_functional=name, return_wfn=True, molecule=molecule, **kwargs); C = 1; if E == 0.0:; E = core.variable('SCF ITERATION ENERGY'); C = 0. if HOMO > 0:; eps = wfn.epsilon_a(); potentials.append(eps.np[HOMO - 1]); else:; eps = wfn.epsilon_b(); potentials.append(eps.np[-HOMO - 1]). Ns.append(Nintegral + occ - 1.0); energies.append(E); convs.append(C). core.set_local_option(""SCF"", ""FRAC_START"", 2); # NYI core.set_local_option(""SCF"", ""FRAC_LOAD"", True); core.set_local_option(""SCF"", ""FRAC_DIIS"", frac_diis); core.set_local_option(""SCF"", ""GUESS"", ""READ""). # Set the next charge/mult; molecule.set_molecular_charge(charge); molecule.set_mul",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/frac.html:11796,LOAD,LOAD,11796,psi4manual/1.7.x/_modules/psi4/driver/frac.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/frac.html,4,['LOAD'],['LOAD']
Performance,"ax_nbody']].copy(); np_final_ptype -= ptype_body_dict[1]. nbody_results['ret_ptype'] = core.Matrix.from_array(np_final_ptype); else:; nbody_results['ret_ptype'] = nbody_results['ret_energy']. # Build wfn and bind variables; wfn = core.Wavefunction.build(metadata['molecule'], 'def2-svp'); dicts = ['energies', 'ptype', 'intermediates', 'energy_body_dict', 'ptype_body_dict', 'nbody']; for r in [component_results, nbody_results]:; for d in r:; if d in dicts:; for var, value in r[d].items():; wfn.set_variable(str(var), value); core.set_variable(str(var), value). if metadata['ptype'] == 'gradient':; wfn.set_gradient(ret_ptype); elif metadata['ptype'] == 'hessian':; wfn.set_hessian(ret_ptype). core.set_variable(""CURRENT ENERGY"", nbody_results['ret_energy']); wfn.set_variable(""CURRENT ENERGY"", nbody_results['ret_energy']). if metadata['return_wfn']:; return (nbody_results['ret_ptype'], wfn); else:; return nbody_results['ret_ptype']. def build_nbody_compute_list(metadata):; """"""Generates the list of N-Body computations to be performed for a given BSSE type. Parameters; ----------; metadata : dict of str; Dictionary containing N-body metadata. Required ``'key': value`` pairs:; ``'bsse_type_list'``: list of str; List of requested BSSE treatments. Possible values include lowercase ``'cp'``, ``'nocp'``,; and ``'vmfc'``.; ``'max_nbody'``: int; Maximum number of bodies to include in the N-Body treatment.; Possible: `max_nbody` <= `max_frag`; Default: `max_nbody` = `max_frag`; ``'max_frag'``: int; Number of distinct fragments comprising full molecular supersystem. Returns; -------; metadata : dict of str; Dictionary containing N-body metadata.; ; New ``'key': value`` pair:; ``'compute_dict'`` : dict of str: dict; Dictionary containing subdicts enumerating compute lists for each possible BSSE treatment. Contents:; ``'all'``: dict of int: set; Set containing full list of computations required; ``'cp'``: dict of int: set; Set containing list of computations required for CP procedure; ``",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver_nbody.html:9245,perform,performed,9245,psi4manual/1.2.1/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver_nbody.html,1,['perform'],['performed']
Performance,"ax_ss_size; The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter; The maximum number of iterations; verbose; The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only; Should eigenpairs with eigenvalue < 0 be ignored?. Returns; -------; best_values : numpy.ndarray; (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors: List[`vector`]; (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats : List[Dict]; Statistics collected on each iteration. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that was performed; - done : bool, if all roots were converged. Notes; -----; The solution vector is normalized to 1/2. The solver will return even when `maxiter` iterations are performed without convergence.; The caller **must check** ``stats[-1]['done']`` for failure and handle each case accordingly.; """"""; nk = nroot. iter_info = {; ""count"": 0,; ""res_norm"": np.zeros((nk)),; ""val"": np.zeros((nk)),; ""delta_val"": np.zeros((nk)),. # conv defaults to true, and will be flipped when a non-conv root is hit; ""done"": True,; ""nvec"": 0,; ""collapse"": False,; ""product_count"": 0,; }. print_name = ""DavidsonSolver""; title_lines = [""Generalized Davidson Solver"", ""By Ruhee Dcunha""]. _diag_print_heading(title_lines, print_name, max_ss_size, nroot, r_convergence, maxiter, verbose). vecs = guess; stats = []; best_eigvecs = []; best_eigvals = []; while iter_info['count'] < maxiter:. # increment iteration/ save old vals; iter_info['count'",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/solvers.html:20552,perform,performed,20552,psi4manual/1.7.x/_modules/psi4/driver/p4util/solvers.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/solvers.html,8,['perform'],['performed']
Performance,"aximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Will be removed in v1.7. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors and performing ADIIS/EDIIS. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI)¶DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI)¶DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC)¶FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF)¶FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF)¶SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS)¶GLOBALS (Expert) — Order of Dougla",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:114417,perform,performing,114417,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,5,['perform'],['performing']
Performance,"ay_variable(key); Is the Matrix QCVariable key (case-insensitive) set? Prefer has_variable(). has_global_option_changed(key); Whether keyword key value has been touched at global (all-module) scope. has_local_option_changed(module, key); Whether keyword key value has been touched at module scope. has_option_changed(module, key); Whether keyword key value has been touched or is default. has_scalar_variable(key); Is the double QCVariable key (case-insensitive) set? Prefer has_variable(). has_variable(key); Whether scalar or array QCVariable key has been set in global memory. initialize(); Called upon psi4 module import to initialize timers, singletons, and I/O. legacy_wavefunction(); Returns the current legacy_wavefunction object from the most recent computation. mcscf(arg0); Runs the MCSCF code, (N.B. mrcc_generate_input(arg0, arg1); Generates an input for Kallay's MRCC code. mrcc_load_densities(arg0, arg1); Reads in the density matrices from Kallay's MRCC code. occ(ref_wfn); Runs the orbital optimized CC codes. opt_clean(); Cleans up the optimizer's scratch files. option_exists_in_module(module, key); Whether keyword key is a valid keyword for module. options_to_python(arg0); Get dictionary of whether options of module have changed. optking(); Runs the geometry optimization code. outfile_name(); Returns the name of the output file. plugin(arg0, arg1); Call the plugin of name arg0. plugin_close(arg0); Close the plugin of name arg0. plugin_close_all(); Close all open plugins. plugin_load(arg0); Load the plugin of name arg0. prepare_options_for_module(name); Sets up the options library to return options pertaining to the module or plugin name (e.g. print_global_options(); Prints the currently set global (all modules) options to the output file. print_options(); Prints the currently set options (to the output file) for the current module. print_out(arg0); Prints a string (using sprintf-like notation) to the output file. print_variables(); Prints to output file all QCVari",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/psi4api-1.html:7299,optimiz,optimized,7299,psi4manual/1.5.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/psi4api-1.html,3,['optimiz'],['optimized']
Performance,"ay_variable(key); Is the Matrix QCVariable key (case-insensitive) set? Prefer has_variable(). has_global_option_changed(key); Whether keyword key value has been touched at global (all-module) scope. has_local_option_changed(module, key); Whether keyword key value has been touched at module scope. has_option_changed(module, key); Whether keyword key value has been touched or is default. has_scalar_variable(key); Is the double QCVariable key (case-insensitive) set? Prefer has_variable(). has_variable(key); Whether scalar or array QCVariable key has been set in global memory. initialize(); Called upon psi4 module import to initialize timers, singletons, and I/O. legacy_wavefunction(); Returns the current legacy_wavefunction object from the most recent computation. mcscf(arg0); Runs the MCSCF code, (N.B. mrcc_generate_input(arg0, arg1); Generates an input for Kallay’s MRCC code. mrcc_load_densities(arg0, arg1); Reads in the density matrices from Kallay’s MRCC code. occ(ref_wfn); Runs the orbital optimized CC codes. opt_clean(); Cleans up the optimizer’s scratch files. option_exists_in_module(module, key); Whether keyword key is a valid keyword for module. options_to_python(arg0); Get dictionary of whether options of module have changed. optking(); Runs the geometry optimization code. outfile_name(); Returns the name of the output file. plugin(arg0, arg1); Call the plugin of name arg0. plugin_close(arg0); Close the plugin of name arg0. plugin_close_all(); Close all open plugins. plugin_load(arg0); Load the plugin of name arg0. prepare_options_for_module(name); Sets up the options library to return options pertaining to the module or plugin name (e.g. print_global_options(); Prints the currently set global (all modules) options to the output file. print_options(); Prints the currently set options (to the output file) for the current module. print_out(arg0); Prints a string (using sprintf-like notation) to the output file. print_variables(); Prints to output file all QCVari",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/psi4api-1.html:7212,optimiz,optimized,7212,psi4manual/1.4.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/psi4api-1.html,2,['optimiz'],['optimized']
Performance,"ays, compare_values, compare_integers; from psi4 import core; from .exceptions import ValidationError. __all__ = ['fchkfile_to_string','compare_fchkfiles']. def _consume_fchk_section(input_list, index):; """"""compare a float or integer matrix section"""""". n = int(input_list[index].split()[-1]); kind = input_list[index].split()[-3]. if ""R"" in kind:; dtype = np.float64; format_counter = 5; elif ""I"" in kind:; dtype = np.float64; format_counter = 6; else:; raise ValidationError('Unknow field type in FCHK reader\n'). extra = 0 if n <= format_counter else n % format_counter; lines = 1 if n <= format_counter else int(n / format_counter); offset = lines + 1 if extra > 0 else lines; string = ''; for j in range(lines):; string += """".join(str(x) for x in input_list[index + 1 + j]); if extra > 0:; string += """".join(str(x) for x in input_list[index + 1 + lines]); field = np.fromiter(string.split(), dtype=dtype); return offset + 1, field. [docs]def fchkfile_to_string(fname):; """""" Load FCHK file into a string""""""; with open(fname, 'r') as handle:; fchk_string = handle.read(); return fchk_string. [docs]def compare_fchkfiles(expected, computed, digits, label):; # """"""Function to compare two FCHK files. # an older format description can be found here; # http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; # It lists more fields (logical, character) that are not included in this; # test function. They should be covered by the string comparison.; # This function is only meant to work with PSI4's FCHK files.; #; # :param expected: reference FCHK file name; # :param computed: computed FCHK file name; # :param digits: tolerance for high accuracy fields -- 1.e-8 or 1.e-9 suitable; # :param label: string labelling the test; # """""". fchk_ref = fchkfile_to_string(expected).splitlines(); fchk_calc = fchkfile_to_string(computed).splitlines(). high_accuracy = digits; low_accuracy = 3. # Those listed below need super high scf convergence (d_conv 1e-12) and might; # show machine dependenc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/fchk.html:2222,Load,Load,2222,psi4manual/1.4.0/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/fchk.html,2,['Load'],['Load']
Performance,"b. Some of these libraries may not be found correctly. How to set up the scratch directory¶; The scratch directory is where Psi4 stores potentially large files during; computation. It should thus be on a local, fast disk to minimize any; computational inefficiencies caused by I/O. The scratch directory is; commonly set up through the PSI_SCRATCH environment variable:; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:38339,queue,queue,38339,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,6,['queue'],['queue']
Performance,"b.Molecule.init_with_xyz('h2o.xyz'). print_ring_planes(entity1, entity2, entity3=None, entity4=None)[source]¶; (reals only, 1-indexed). save_string_xyz(save_ghosts=True)[source]¶; Save a string for a XYZ-style file.; >>> H2OH2O.save_string_xyz(); 6; -2 3 water_dimer; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. Elemental masses (most common isotope), symbols, and atomic numbers from psi4.; Stuff stolen from psi. Should import or not as necessary; or some better way. Apologies to the coders. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. query_yes_no(question, default=True)[source]¶; Ask a yes/no question via raw_input() and return their answer.; question is a string that is presented to the user.; default is the presumed answer if the user just hits <Enter>.; It must be yes (the default), no or None (meaning; an answer is required of the user).; The return value is one of True or False. File for accessory procedures in the chem module.; Credit for the libmints vector3 class to Justin M. Turney and; incremental improvements by other psi4 developers. add(v, u)[source]¶; Compute sum of vectors v and u. cross(v, u)[source]¶; Compute cross product of length 3 vectors v and u. determinant(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_driver-1.html:66942,Perform,Performs,66942,psi4manual/4.0b5/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_driver-1.html,2,['Perform'],['Performs']
Performance,"b97x singlet excitation energies of methylene (tda). omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. fnocc3; Test FNO-QCISD(T) computation. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:30669,optimiz,optimization,30669,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['optimiz'],['optimization']
Performance,bXCFunctional method. set_units() psi4.core.Molecule method. set_variable() in module psi4.core. psi4.core.CCWavefunction method. psi4.core.CIWavefunction method. psi4.core.CUHF method. psi4.core.DFEP2Wavefunction method. psi4.core.HF method. psi4.core.Molecule method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. psi4.core.Wavefunction method. set_vv10_b() psi4.core.SuperFunctional method. set_vv10_c() psi4.core.SuperFunctional method. set_wcombine() psi4.core.DFJCOSK method. psi4.core.DirectJK method. psi4.core.JK method. psi4.core.MemDFJK method. set_write_dpd_so_tpdm() psi4.core.IntegralTransform method. set_x_alpha() psi4.core.SuperFunctional method. set_x_beta() psi4.core.SuperFunctional method. set_x_omega() psi4.core.SuperFunctional method. setName() psi4.core.ExternalPotential method. setting. ; keywords anharmonicity(). keywords cbs(). keywords cp. keywords database(). keywords energy(). keywords frequency(). keywords general. keywords molecule. keywords optimize(). keywords properties(). keywords vmfc. SF_RESTRICT (DETCI). shallow_copy() psi4.core.CCWavefunction method. psi4.core.CIWavefunction method. psi4.core.CUHF method. psi4.core.DFEP2Wavefunction method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. psi4.core.Wavefunction method. shape psi4.core.Matrix attribute. psi4.core.Vector attribute. shared_object() psi4.core.IO static method. psi4.core.IOManager static method. shell() psi4.core.BasisSet method. shell_extents() psi4.core.BasisExtents method. shell_on_center() psi4.core.BasisSet method. shell_significant() psi4.core.ERI method. psi4.core.ERISieve method. psi4.core.TwoBodyAOInt method. psi4.core.TwoElectronInt method. shell_to_ao_function() psi4.core.BasisSet method. shell_to_basis_function() psi4.core.BasisSet method. shell_to_center() psi4.core.BasisSet method. ShellInfo class in psi4.core. shells_iterator() psi4.core.IntegralFactory method. shells_local_to_global() psi4.core.Block,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/genindex.html:141283,optimiz,optimize,141283,psi4manual/1.6.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/genindex.html,1,['optimiz'],['optimize']
Performance,"bal options (e.g., the local option set by ``set scf scf_type df`` will not be respected). .. note:: To access a database that is not embedded in a |PSIfour|; distribution, add the path to the directory containing the database; to the environment variable :envvar:`PYTHONPATH`. :type name: str; :param name: ``'scf'`` || ``'sapt0'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`psi4.energy`. :type db_name: str; :param db_name: ``'BASIC'`` || ``'S22'`` || ``'HTBH'`` || etc. Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; ``psi4/share/databases`` or :envvar:`PYTHONPATH`. Consult that; directory for available databases and literature citations. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on each database; member. The default performs a single-point ``energy('name')``, while; ``optimize`` perfoms a geometry optimization on each reagent, and; ``cbs`` performs a compound single-point energy. If a nested series; of python functions is intended (see :ref:`sec:intercalls`), use; keyword ``db_func`` instead of ``func``. :type mode: str; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. Indicates whether the calculations required to complete the; database are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type cp: :ref:`boolean <op_py_boolean>`; :param cp: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the ``bsse_type=""cp""``; function for BSSE correction in database(). Opti",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/wrapper_database.html:3445,perform,performed,3445,psi4manual/1.4.0/_modules/psi4/driver/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/wrapper_database.html,3,['perform'],['performed']
Performance,"bal. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:16101,perform,performed,16101,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,4,['perform'],['performed']
Performance,"bal_option(""BASIS"")); wfn_dimer.set_basisset(""DF_BASIS_SAPT"", aux_basis); wfn_dimer.set_basisset(""DF_BASIS_ELST"", aux_basis). psi4.sapt(wfn_dimer,wfn_monA,wfn_monB). In this way, any of the SCF options can be tweaked for individual fragments.; For optimal efficiency, the example uses set df_ints_io save to keep file 97,; which contains the three-index integrals for density fitting. set df_ints_io load; then instructs the program to read these integrals from disk instead of recomputing; them. For each SCF computation, we use psi4.IO.set_default_namespace to uniquely; name scratch files. In the following SCF step, only file 97 is renamed using; psi4.IO.change_file_namespace so that integrals can be read from it.; For more information on stability analysis, see the stability; documentation. SAPT0¶; Generally speaking, SAPT0 should be applied to large systems or large data; sets. The performance of closed-shell SAPT0 relies entirely on error cancellation, which; seems to be optimal with a truncated aug-cc-pVDZ basis, namely,; jun-cc-pVDZ (which we have referred to in previous work as; aug-cc-pVDZ’). We do not recommend using SAPT0 with large basis sets; like aug-cc-pVTZ. A systematic study of the accuracy of closed-shell SAPT0 and other SAPT; truncations, using different basis sets, is reported in; [Parker:2014:094106]. In particular, an empirical recipe for scaled SAPT0; can yield improved performance and has been included in the output file as; the sSAPT0 interaction energy. sSAPT0 is a free by-product and is automatically; computed when SAPT0 is requested (see above for more details).; The SAPT module has been used to perform SAPT0 computations with over; 200 atoms and 2800 basis functions; this code should be scalable to 4000; basis functions. Publications resulting from the use of the SAPT0 code; should cite the following publications: [Hohenstein:2010:184111] and; [Hohenstein:2011:174107]. If the open-shell SAPT0 code is used,; [Gonthier:2016:134106] should be add",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/sapt.html:18042,perform,performance,18042,psi4manual/master/sapt.html,https://psicode.org,https://psicode.org/psi4manual/master/sapt.html,13,['perform'],['performance']
Performance,"based on the largest amplitude. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM —. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR —. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA —. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT —. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (MP2); MP2 — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (OMP2); OMP2 —. Type: integer; Default: 2. CACHELEVEL (STABILITY); STABILITY —. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 —. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM —. Type: string; Possible Values: L",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html:6479,CACHE,CACHELEVEL,6479,psi4manual/4.0b2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html,4,"['CACHE', 'Cache']","['CACHELEVEL', 'Cacheing']"
Performance,"basis = 'dimer'; if 'sapt_basis' in kwargs:; sapt_basis = kwargs.pop('sapt_basis'); sapt_basis = sapt_basis.lower(). if (sapt_basis == 'dimer'):; #molecule.update_geometry(); monomerA = molecule.extract_subsets(1, 2); monomerA.set_name('monomerA'); monomerB = molecule.extract_subsets(2, 1); monomerB.set_name('monomerB'); elif (sapt_basis == 'monomer'):; #molecule.update_geometry(); monomerA = molecule.extract_subsets(1); monomerA.set_name('monomerA'); monomerB = molecule.extract_subsets(2); monomerB.set_name('monomerB'). ri = PsiMod.get_option('SCF', 'SCF_TYPE'); df_ints_io = PsiMod.get_option('SCF', 'DF_INTS_IO'); # inquire if above at all applies to dfmp2. PsiMod.IO.set_default_namespace('dimer'); PsiMod.set_local_option('SCF', 'SAPT', '2-dimer'); PsiMod.print_out('\n'); banner('Dimer HF'); PsiMod.print_out('\n'); if (sapt_basis == 'dimer'):; PsiMod.set_global_option('DF_INTS_IO', 'SAVE'); e_dimer = scf_helper('RHF', **kwargs); if (sapt_basis == 'dimer'):; PsiMod.set_global_option('DF_INTS_IO', 'LOAD'). activate(monomerA); if (ri == 'DF' and sapt_basis == 'dimer'):; PsiMod.IO.change_file_namespace(97, 'dimer', 'monomerA'); PsiMod.IO.set_default_namespace('monomerA'); PsiMod.set_local_option('SCF', 'SAPT', '2-monomer_A'); PsiMod.print_out('\n'); banner('Monomer A HF'); PsiMod.print_out('\n'); e_monomerA = scf_helper('RHF', **kwargs). activate(monomerB); if (ri == 'DF' and sapt_basis == 'dimer'):; PsiMod.IO.change_file_namespace(97, 'monomerA', 'monomerB'); PsiMod.IO.set_default_namespace('monomerB'); PsiMod.set_local_option('SCF', 'SAPT', '2-monomer_B'); PsiMod.print_out('\n'); banner('Monomer B HF'); PsiMod.print_out('\n'); e_monomerB = scf_helper('RHF', **kwargs); PsiMod.set_global_option('DF_INTS_IO', df_ints_io). PsiMod.IO.change_file_namespace(PSIF_SAPT_MONOMERA, 'monomerA', 'dimer'); PsiMod.IO.change_file_namespace(PSIF_SAPT_MONOMERB, 'monomerB', 'dimer'). activate(molecule); PsiMod.IO.set_default_namespace('dimer'); PsiMod.set_local_option('SAPT', 'E_CONVERG",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/proc.html:47896,LOAD,LOAD,47896,psi4manual/4.0b4/_modules/proc.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html,1,['LOAD'],['LOAD']
Performance,"basis, xtpl_type)[source]¶; A helper function to determine default extrapolation type. Parameters:; nbasis (int) – Number of basis sets; xtpl_type ({'scf', 'corl'}) – Extrapolation type: ‘scf’ for the total energy, ‘corl’ for just the; correlation component. Returns:Extrapolation function to be used. Return type:function. Aliases¶; When a particular composite method or its functional form is going to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/psi4/driver/aliases.py; (source location) or psi4/lib/psi4/driver/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. psi4.driver.aliases.sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; >>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). >>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/cbs-1.html:20618,perform,performed,20618,psi4manual/1.3.2/cbs-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/cbs-1.html,2,['perform'],['performed']
Performance,"basisChanged = psi4.has_option_changed(""BASIS""); ribasisChanged = psi4.has_option_changed(""DF_BASIS_SCF""); scftypeChanged = psi4.has_option_changed(""SCF_TYPE""). basis = psi4.get_option(""BASIS""); ribasis = psi4.get_option(""DF_BASIS_SCF""); scftype = psi4.get_option(""SCF_TYPE""). psi4.print_out("" => Diffuse SCF (Determines Da) <=\n\n""). psi4.set_global_option(""BASIS"", self.basisname); psi4.set_global_option(""DF_BASIS_SCF"", self.ribasisname); psi4.set_global_option(""SCF_TYPE"", ""DF""); E, ref = energy('scf', return_wfn=True, molecule=self.molecule); self.wfn = ref; psi4.print_out(""\n""). self.fitGeneral(). psi4.clean(). psi4.set_global_option(""BASIS"", basis); psi4.set_global_option(""DF_BASIS_SCF"", ribasis); psi4.set_global_option(""SCF_TYPE"", scftype). if not basisChanged:; psi4.revoke_option_changed(""BASIS""); if not ribasisChanged:; psi4.revoke_option_changed(""DF_BASIS_SCF""); if not scftypeChanged:; psi4.revoke_option_changed(""SCF_TYPE""). [docs] def fitGeneral(self):; """"""Function to perform a general fit of diffuse charges; to wavefunction density. """"""; psi4.print_out("" => Diffuse Charge Fitting (Determines da) <=\n\n""); self.Da = self.wfn.Da(); self.basis = self.wfn.basisset(); parser = psi4.Gaussian94BasisSetParser(); self.ribasis = psi4.BasisSet.construct(parser, self.molecule, ""DF_BASIS_SCF""). fitter = psi4.DFChargeFitter(); fitter.setPrimary(self.basis); fitter.setAuxiliary(self.ribasis); fitter.setD(self.Da); self.da = fitter.fit(); self.da.scale(2.0). [docs] def populateExtern(self, extern):; # Electronic Part; extern.addBasis(self.ribasis, self.da); # Nuclear Part; for A in range(0, self.molecule.natom()):; extern.addCharge(self.molecule.Z(A), self.molecule.x(A), self.molecule.y(A), self.molecule.z(A)). [docs]class QMMM(object):. def __init__(self):; self.charges = []; self.diffuses = []; self.extern = psi4.ExternalPotential(). [docs] def addDiffuse(self, diffuse):; """"""Function to add a diffuse charge field *diffuse*.""""""; self.diffuses.append(diffuse). [docs] def ad",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qmmm.html:2836,perform,perform,2836,psi4manual/1.0.0/_modules/qmmm.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qmmm.html,1,['perform'],['perform']
Performance,"bation Theories¶; Module: Keywords, PSI Variables, OCC; PSI4 also has a non-density-fitted MP2 algorithm for RHF and UHF; energies and gradients. The; density-fitted module DFMP2 is always the default, so to access the; conventional MP2 code, set MP2_TYPE to conv and call as usual; energy('mp2')/optimize('mp2'). Basic Keywords¶. MP2_TYPE¶. Algorithm to use for non-OO MP2 computation. Type: string; Possible Values: DF, CONV; Default: DF. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0/3.0. Non-orbital-optimized counterparts to higher order MPn methods are also; available. Summarizing from tables above, the following methods are; available and can be controlled through OCC keywards. Name; Calls Method; Energy; Gradient; Reference. conv-mp2; MP2; Y; Y; RHF/ROHF/UHF. mp3; MP3; Y; Y; RHF/UHF. mp2.5; MP2.5; Y; Y; RHF/UHF. cepa0; CEPA(0) (identical to Linearized CCD); Y; Y; RHF/UHF. Table Of Contents. OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Introduction; Theory; Methods; Basic Keywords; E_CONVERGENCE; R_CONVERGENCE; RMS_MOGRAD_CONVERGENCE; MAX_MOGRAD_CONVERGENCE; MO_MAXITER; WFN_TYPE; ORB_OPT. Advanced Keywords; OPT_METHOD; MO_DIIS_NUM_VECS; LINEQ_SOLVER; ORTH_TYPE; MP2_OS_SCALE; MP2_SS_SCALE; MP2_SOS_SCALE; MP2_SOS_SCALE2; NAT_ORBS; OCC_ORBS_PRINT; TPDM_ABCD_TYPE; DO_DIIS; DO_LEVEL_SHIFT. OCC: Conventional Møller–Plesset Perturbation Theories; Basic Keywords; MP2_TYPE; MP2_OS_SCALE; MP2_SS_SCALE. Previous topic; DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Next topic; CC: Coupled Cluster Methods; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Theoretical Methods: SCF to FCI ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/occ-1.html:10977,Optimiz,Optimized,10977,psi4manual/4.0b4/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/occ-1.html,2,['Optimiz'],['Optimized']
Performance,"bation Theory Interaction; Energy Components: The Functional-Group SAPT Partition,”; R. M. Parrish, T. M. Parker, and C. D. Sherrill,; J. Chem. Theory Comput. 10, 4417 (2014).; (doi: 10.1021/ct500724p).; “Communication: Practical Intramolecular Symmetry Adapted Perturbation Theory; via Hartree-Fock Embedding,”; R. M. Parrish, J. F. Gonthier, C. Corminboeuf, and C. D. Sherrill,; J. Chem. Phys. 143, 051103 (2015).; (doi: 10.1063/1.4927575). The derivation of the second-order exchange terms without the single-exchange; approximation are found in the following two works:. “Intermolecular exchange-induction energies without the overlap expansion,”; R. Schäffer and G. Jansen, Theor. Chem. Acc. 131, 1235 (2012).; (doi: 10.1007/s00214-012-1235-6); “Single-determinant-based symmetry-adapted perturbation theory without; single-exchange approximation,”; R. Schäffer and G. Jansen, Mol. Phys. 111, 2570 (2013).; (doi: 10.1080/00268976.2013.827253). Orbital-Optimized Post-Hartree–Fock Methods¶; Orbital-optimized second-order perturbation theory (OMP2). “Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order Møller–Plesset perturbation theory,”; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; J. Chem. Phys. 135, 104103 (2011).; (doi: 10.1063/1.3631129).; “Analytic energy gradients for the orbital-optimized second-order; Møller–Plesset perturbation theory,” U. Bozkaya and; C. D. Sherrill, J. Chem. Phys. 138, 184103 (2013).; (doi: 10.1063/1.4803662).; “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Ap",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/introduction.html:16370,Optimiz,Optimized,16370,psi4manual/master/introduction.html,https://psicode.org,https://psicode.org/psi4manual/master/introduction.html,18,"['Optimiz', 'optimiz']","['Optimized', 'optimized']"
Performance,"bbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:. Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Embarrassing Parallelism. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/sowreap-1.html:1470,Optimiz,Optimization,1470,psi4manual/1.4.0/sowreap-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/sowreap-1.html,4,"['Optimiz', 'optimiz']","['Optimization', 'optimize']"
Performance,"bbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:. Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Psithon Functions: Invoking a Calculation; Embarrassing Parallelism. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/sowreap-1.html:1470,Optimiz,Optimization,1470,psi4manual/1.5.0/sowreap-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/sowreap-1.html,4,"['Optimiz', 'optimiz']","['Optimization', 'optimize']"
Performance,"bda amplitute equations?. Type: boolean; Default: false. CC_MAXITER¶. Maximum number of iterations to determine the amplitudes. Type: integer; Default: 50. CHOLESKY¶. Do Cholesky decomposition of the ERI tensor. Type: boolean; Default: false. CHOLESKY_TOLERANCE¶. tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. COMPUT_S2¶. Do compute <S2> for DF-OMP2/DF-MP2?. Type: boolean; Default: false. CUTOFF¶. Cutoff value for numerical procedures. Type: integer; Default: 8. DO_DIIS¶. Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT¶. Do apply level shifting?. Type: boolean; Default: true. DO_SCS¶. Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SOS¶. Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. E3_SCALE¶. CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. EKT_IP¶. Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. HESS_TYPE¶. Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF, HF; Default: HF. INTEGRAL_CUTOFF¶. Cutoff value for DF integrals. Type: integer; Default: 9. LEVEL_SHIFT¶. Level shift to aid convergence. Type: double; Default: 0.02. LINEQ_SOLVER¶. The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__dfocc-1.html:1447,perform,perform,1447,psi4manual/1.0.0/autodir_options_c/module__dfocc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__dfocc-1.html,2,['perform'],['perform']
Performance,"be [[orb1, orb2], [], …] for each irrep. Type: array; Default: No Default. EP_EA_POLES (OCC); OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC); OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC); OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI); DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST. Type: array; Default: No Default. EX_LEVEL (DETCI); DETCI — The CI excitation level. Type: integer; Default: 2. EXCH_SCALE_ALPHA (SAPT); SAPT — Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. EXCITATION_RANGE (CCEOM); CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF); CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXTERN (SCF); SCF — An ExternalPotential (built by Python or nullptr/None). Type: boolean; Default: false. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS); GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code does NOT help you out in any way!. Type: boolean; Default: false. FAIL_ON_MAXITER (SCF); SCF — Fail if we reach maxiter without",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:122483,perform,performs,122483,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,4,['perform'],['performs']
Performance,"be applied to the database. May be any valid argument to; energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (string) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. dcft; density cumulant functional theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html:1694,optimiz,optimization,1694,psi4manual/1.3.2/api/psi4.driver.opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.driver.opt-1.html,12,"['optimiz', 'perform']","['optimization', 'performed']"
Performance,"be found in the; samples subdirectory of the top-level PSI4 source directory and should; serve as useful examples.; The equivalent Python PsiAPI syntax is shown alongside the Psithon code snippets.; When using the Python API, one must import the PSI4 module with:; import psi4. No such directive is neccesary when using Psithon, which is run using the psi4; executable. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from NIST CODATA 2014; are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that the user’s ~/.psi4rc values can; override the builtins (in the input file, not in the C++ code).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files are in Physical Constants.; In Psithon input files, prepend physical constants with psi_ to; prevent clashes with user-defined variables (e.g., psi_h). In; PsiAPI mode, access as, e.g., psi4.constants.h. Memory Specification¶; By default, PSI4 assumes that 500 MiB of memory are available. While this is; enough for many computations, many of the algorithms will perform better if; more is available. To specify memory, the memory keyword should be used. The following; lines are all equivalent methods for specifying that 2 GB of RAM is available; to PSI4:; # all equivalent. memory 2 GB. memory 2000 MB. memory 2000000 kB. Please note that memory can be specified both in IEC bi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/psithoninput.html:1760,load,loaded,1760,psi4manual/master/psithoninput.html,https://psicode.org,https://psicode.org/psi4manual/master/psithoninput.html,1,['load'],['loaded']
Performance,"be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. Minimal Input¶; Minimal input for the DCFT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis 3-21G. energy('dcft'). The energy('dcft') call to energy() executes the DCFT module, which will first call the SCF module and perform the SCF computation with UHF reference to obtain the guess for the DCFT orbitals. After the SCF is converged, the program will perform the energy computation using the DC-06 method. By default, the two-step algorithm will be used for the solution of the equations. Note that while the default value for the option REFERENCE is RHF, this option is set to UHF before the DCFT module is executed. For the DC-06 method one can also request to perform the geometry optimization following the example below:; molecule {; H; H 1 1.0; }. set basis 3-21G. optimize('dcft'). The optimize('dcft') call will first perform all of the procedures; described above to obtain the DC-06 energy. After that the DC-06 analytic; gradients code will be executed to perform the solution of the DCFT response; equations, compute the analytic gradients of the DCFT energy and perform the; geometry optimization. Recommendations¶; Here is the list of the recommendations for the DCFT module:. For the computations of small systems (less than 150 basis; functions and high symmetry) the use of the default parameters is recommended,; including the choice of the two-step algorithm.; For large systems (more than 150 basis functions) the simultaneous algorithm; is preferred and can be significantly faster than two-step, as the result of; smaller number of the expensive steps. In addition,; significant savings can be achieved if one sets AO_BASIS option to; DISK together with simultaneous algorithm. It should be noted, however, that; the analytic gradients of the DC-06 method a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/dcft-1.html:10747,optimiz,optimize,10747,psi4manual/4.0b4/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/dcft-1.html,2,['optimiz'],['optimize']
Performance,"be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. Minimal Input¶; Minimal input for the DCFT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis 3-21G. energy('dcft'). The energy('dcft') call to energy() executes the DCFT module, which will first call the SCF module and perform the SCF computation with UHF reference to obtain the guess for the DCFT orbitals. After the SCF is converged, the program will perform the energy computation using the DC-06 method. By default, the two-step algorithm will be used for the solution of the equations. Note that while the default value for the option REFERENCE is RHF, this option is set to UHF before the DCFT module is executed. For the DC-06 method one can also request to perform the geometry optimization following the example below:; molecule {; H; H 1 1.0; }. set basis 3-21G. optimize('dcft'). The optimize('dcft') call will first perform all of the procedures; described above to obtain the DC-06 energy. After that the DC-06 analytic; gradients code will be executed to perform the solution of the DCFT response; equations, compute the analytic gradients of the DCFT energy and perform the; geometry optimization. Recommendations¶; Here is the list of the recommendations for the DCFT module:. For the computations of small systems (less than 150 basis; functions and high symmetry) the use of the default parameters is recommended,; including the choice of the two-step algorithm.; For large systems (more than 150 basis functions) the simultaneous algorithm; is preferred and can be significantly faster than two-step, as the result of; smaller number of the expensive steps. In addition,; significant savings can be achieved if one sets AO_BASIS option to; DISK together with simultaneous algorithm.; In the case when insufficient memory is available, set AO_BASIS option; to DIS",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/dcft-1.html:10686,optimiz,optimize,10686,psi4manual/4.0b5/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/dcft-1.html,2,['optimiz'],['optimize']
Performance,"be placed in the PSI4 input file.; energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. psi4.driver.procrouting.interface_cfour.run_cfour(name[, keep, path])[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated file constants accessible as P4C4_INFO['zmat'], P4C4_INFO['output'], P4C4_INFO['grd'], etc. Parameters. name (str) – 'c4-scf' || 'c4-ccsd(t)' || 'cfour' || etc.; First argument, usually unlabeled. Indicates the computational; method to be applied to the system. keep (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether to delete the Cfour scratch directory upon; completion of the Cfour job. path (str) – Indicates path to Cfour scratch directory (with respect to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (str) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated top",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cfour-1.html:23735,optimiz,optimize,23735,psi4manual/1.4.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html,5,['optimiz'],['optimize']
Performance,"be placed in the PSI4 input file.; energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. psi4.driver.procrouting.interface_cfour.run_cfour(name[, keep, path])[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated file constants accessible as P4C4_INFO['zmat'], P4C4_INFO['output'], P4C4_INFO['grd'], etc. Parameters:. name (str) – 'c4-scf' || 'c4-ccsd(t)' || 'cfour' || etc.; First argument, usually unlabeled. Indicates the computational; method to be applied to the system. keep (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether to delete the Cfour scratch directory upon; completion of the Cfour job. path (str) – Indicates path to Cfour scratch directory (with respect to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (str) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated to",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/cfour.html:23866,optimiz,optimize,23866,psi4manual/master/cfour.html,https://psicode.org,https://psicode.org/psi4manual/master/cfour.html,4,['optimiz'],['optimize']
Performance,"be', False):; return; else:; return func(name, **kwargs). def select_ccsd_t__gradient(name, **kwargs):; """"""Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CC_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only ccenergy. func = None; if reference in ['RHF']:; if mtd_type == 'CONV':; if module in ['', 'CCENERGY']:; func = run_ccenergy_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'CCENERGY']:; func = run_ccenergy_gradient. if func is None:; raise ManagedMethodError(['select_ccsd_t__gradient', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_ccsd_at_(name, **kwargs):; """"""Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CC_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/ccenergy. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module in ['', 'CCENERGY']:; func = run_ccenergy; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc. if func is None:; raise ManagedMethodError(['select_ccsd_at_', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_cisd(name, **kwargs):; """"""Function selecting the algorithm for a CISD energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CI_TYPE'); module = core.get_global_option('QC_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/procrouting/proc.html:23627,perform,performance,23627,psi4manual/1.2.1/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/procrouting/proc.html,2,['perform'],['performance']
Performance,"be', False):; return; else:; return func(name, **kwargs). def select_ccsd_t__gradient(name, **kwargs):; """"""Function selecting the algorithm for a CCSD(T) gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CC_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only ccenergy. func = None; if reference in ['RHF']:; if mtd_type == 'CONV':; if module in ['', 'CCENERGY']:; func = run_ccenergy_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'CCENERGY']:; func = run_ccenergy_gradient. if func is None:; raise ManagedMethodError(['select_ccsd_t__gradient', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_ccsd_at_(name, **kwargs):; """"""Function selecting the algorithm for a CCSD(AT) energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CC_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/ccenergy. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module in ['', 'CCENERGY']:; func = run_ccenergy; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc. if func is None:; raise ManagedMethodError(['select_ccsd_at_', name, 'CC_TYPE', mtd_type, reference, module]). if name.lower() == ""a-ccsd(t)"":; pass; elif name.lower() in [""ccsd(at)"", ""lambda-ccsd(t)""]:; core.print_out(f""""""\nMethod ""{name.lower()}"" has been regularized to ""a-ccsd(t)"" for QCVariables.""""""); name = ""a-ccsd(t)"". if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_cisd(name, **kwargs):; """"""Function selecting the algorithm for a CI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html:26898,perform,performance,26898,psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,3,['perform'],['performance']
Performance,"bedded in a |PSIfour|; distribution, add the path to the directory containing the database; to the environment variable :envvar:`PYTHONPATH`. :type name: string; :param name: ``'scf'`` || ``'sapt0'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type db_name: string; :param db_name: ``'BASIC'`` || ``'S22'`` || ``'HTBH'`` || etc. Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; ``psi4/share/databases`` or :envvar:`PYTHONPATH`. Consult that; directory for available databases and literature citations. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on each database; member. The default performs a single-point ``energy('name')``, while; ``optimize`` perfoms a geometry optimization on each reagent, and; ``cbs`` performs a compound single-point energy. If a nested series; of python functions is intended (see :ref:`sec:intercalls`), use; keyword ``db_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. Indicates whether the calculations required to complete the; database are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type cp: :ref:`boolean <op_py_boolean>`; :param cp: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the :py:func:`~wrappers.cp`; function for BSSE correction in database(). Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes. :type rlxd: :ref:`boolean",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html:3645,perform,performs,3645,psi4manual/1.0.0/_modules/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html,16,"['optimiz', 'perform']","['optimization', 'optimize', 'performs']"
Performance,"bel() LibmintsMolecule method. symbol() CoordEntry method. LibmintsMolecule method. symmetrize() LibmintsMolecule method. symmetry. molecule. symmetry_frame() LibmintsMolecule method. symmetry_from_input() LibmintsMolecule method. T. T (THERMO). T2_COUPLED (CCENERGY). T3_WS_INCORE (CCENERGY). (CCEOM). T_AMPS (CCHBAR). Table class in text. TAU_SQUARED (DCFT). tblhead() in module wrappers. TDHF_MEM_SAFETY_FACTOR (CPHF). TDM (DETCI). TDM_PRINT (DETCI). TDM_WRITE (DETCI). TEST_B (OPTKING). test_ccl_functional() in module functional. TEST_DERIVATIVE_B (OPTKING). text module. theory; . ADC. CC. CEPA. CI. Coupled-Pair Methods. DF-MP2. DFT. OEProp. OMP2. OMP3. Orbital-Optimized Methods. SAPT. SCF. cbs(), [1]. THETA_POINTS (SCF). THICKNESS (SCF). threading. TIKHONOW_MAX (PSIMRCC). TIKHONOW_OMEGA (DCFT). (PSIMRCC). TIKHONOW_TRIPLES (PSIMRCC). TILE_SZ (SCF). TPDM (DCFT). (DETCI). TPDM_ABCD_TYPE (OMP3). TPDM_ADD_REF (TRANSQT). TPDM_FILE (TRANSQT). TPDM_PRINT (DETCI). transition state; . geometry optimization. translate() LibmintsMolecule method. transpose() in module qcdb.vecutil. TRIPLES_ALGORITHM (PSIMRCC). TRIPLES_DIIS (PSIMRCC). TURN_ON_ACTV (MCSCF). TWO-ELECTRONENERGY. type() CartesianEntry method. NumberValue method. VariableValue method. ZMatrixEntry method. U. UNCP-CORRECTED2-BODYINTERACTIONENERGY. unique() LibmintsMolecule method. units; . molecule. UNITS (GLOBALS). units() LibmintsMolecule method. UPDATE (DETCI). update_geometry() LibmintsMolecule method. USE_SPIN_SYM (PSIMRCC). USE_SPIN_SYMMETRY (PSIMRCC). useful() in module qcdb.dbproc. util module. V. VAL_EX_LEVEL (DETCI). valid_atom_map() LibmintsMolecule method. validate_bracketed_basis() in module wrappers. validate_scheme_args() in module wrappers. ValidationError, [1]. variable_to_string() NumberValue method. VariableValue method. VariableValue class in qcdb.libmintscoordentry. VECS_CC3 (CCEOM). VECS_PER_ROOT (CCEOM). VECS_WRITE (DETCI). W. WABEI_LOWDISK (CCHBAR). WFN (CCDENSITY). (CCENERGY). (CCEOM). (CCHBAR).",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/genindex.html:42424,optimiz,optimization,42424,psi4manual/4.0b3/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/genindex.html,1,['optimiz'],['optimization']
Performance,"below which integrals are neglected. Type: conv double; Default: 1e-14. INTS_TOLERANCE (TRANSQT2); TRANSQT2 — Minimum absolute value below which integrals are neglected. Type: conv double; Default: 1e-14. IRC_DIRECTION (OPTKING); OPTKING — IRC mapping direction. Type: string; Possible Values: FORWARD, BACKWARD; Default: FORWARD. IRC_STEP_SIZE (OPTKING); OPTKING — IRC step size in bohr(amu). Type: double; Default: 0.2. IRC_STOP (OPTKING); OPTKING — Decide when to stop IRC calculations. Type: string; Possible Values: ASK, STOP, GO; Default: STOP. ISTOP (DETCI); DETCI — Do stop DETCI after string information is formed and before integrals are read?. Type: boolean; Default: false. IVO (TRANSQT); TRANSQT — Do form improved virtual orbitals (IVO)?. Type: boolean; Default: false. J_FILE (TRANSQT); TRANSQT — Half-transformed integrals. Type: integer; Default: 91. JOBTYPE (CCLAMBDA); CCLAMBDA (Expert) — Type of job being performed. Type: string; Default: No Default. JOBTYPE (MP2); MP2 (Expert) — Type of job being performed. Type: string; Default: SP. KEEP_INTCOS (OPTKING); OPTKING — Keep internal coordinate definition file. Type: boolean; Default: false. KEEP_J (TRANSQT); TRANSQT — Do keep half-transformed integrals?. Type: boolean; Default: false. KEEP_OEIFILE (CCSORT); CCSORT — Do retain the input one-electron integrals?. Type: boolean; Default: false. KEEP_PRESORT (TRANSQT); TRANSQT — Do keep presort file?. Type: boolean; Default: false. KEEP_TEIFILE (CCSORT); CCSORT — Do retain the input two-electron integrals?. Type: boolean; Default: false. LAG_IN_FILE (TRANSQT); TRANSQT — MO-basis MO-lagrangian file. Type: integer; Default: PSIF_MO_LAG. LAGRAN_DOUBLE (TRANSQT); TRANSQT — Do multiply the MO-lagrangian by 2.0?. Type: boolean; Default: false. LAGRAN_HALVE (TRANSQT); TRANSQT — Do divide the MO-lagrangian by 2.0?. Type: boolean; Default: false. LAMBDA_MAXITER (DCFT); DCFT — Maximum number of density cumulant update micro-iterations per macro-iteration (for ALOGRITHM = TWOST",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:58181,perform,performed,58181,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['perform'],['performed']
Performance,"ber data. schema([by_alias, ref_template]). rtype; DictStrAny. schema_json(*[, by_alias, ref_template]). rtype; unicode. serialize(encoding, *[, include, exclude, ...]); Generates a serialized representation of the model. set_basis(basis). set_keywords(keywords). set_method(method). update_forward_refs(**localns); Try to update ForwardRefs on fields based on this Model, globalns and localns. validate(value). rtype; Model. Methods Documentation. compare(other, **kwargs)¶; Compares the current object to the provided object recursively. Parameters. other (Model) – The model to compare to.; **kwargs – Additional kwargs to pass to qcelemental.compare_recursive. Returns; True if the objects match. Return type; bool. compute(client=None)[source]¶; Run quantum chemistry. Parameters; client (Optional[FractalClient]) – . classmethod construct(_fields_set=None, **values)¶; Creates a new model setting __dict__ and __fields_set__ from trusted or pre-validated data.; Default values are respected, but no other validation is performed.; Behaves as if Config.extra = ‘allow’ was set since it adds all passed values. Return type; Model. Parameters. _fields_set (Optional[SetStr]) – ; values (Any) – . copy(*, include=None, exclude=None, update=None, deep=False)¶; Duplicate a model, optionally choose which fields to include, exclude and change. Parameters. include (Union[AbstractSetIntStr, MappingIntStrAny]) – fields to include in new model; exclude (Union[AbstractSetIntStr, MappingIntStrAny]) – fields to exclude from new model, as with values this takes precedence over include; update (DictStrAny) – values to change/add in the new model. Note: the data is not validated before creating; the new model: you should trust this data; deep (bool) – set to True to make a deep copy of the model; self (Model) – . Return type; Model. Returns; new model instance. dict(**kwargs)¶; Generate a dictionary representation of the model, optionally specifying which fields to include or exclude. Return type; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/api/psi4.driver.AtomicComputer.html:3019,perform,performed,3019,psi4manual/1.6.x/api/psi4.driver.AtomicComputer.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/api/psi4.driver.AtomicComputer.html,1,['perform'],['performed']
Performance,"ber of iterations in all linear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE (CFOUR); CFOUR — Determines the algorithm used to solve linear equations ( and derivative and ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not guaranteed to converge. Moreover, POPLE has not been tested for some time and should definitely be checked! (Default : DIIS). Type: string; Possible Values: POPLE, DIIS; Default: DIIS. CFOUR_LOCK_ORBOCC (CFOUR); CFOUR — This keyword is used by the SCF program to determine if the orbital occupancy (by symmetry block) is allowed to change in the course of the calculation. ON (=1) locks the occupation to that set by the keyword CFOUR_OCCUPATION (or the initial guess if omitted); OFF (= 0) permits the occupation to change. (Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP (CFOUR); CFOUR — Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEM_UNIT (CFOUR); CFOUR — Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR); CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR); CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:54440,optimiz,optimizations,54440,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimizations']
Performance,"ber of iterations in all linear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE¶. Determines the algorithm used to solve linear equations ( \(\Lambda\) and derivative \(T\) and \(\Lambda\) ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not guaranteed to converge. Moreover, POPLE has not been tested for some time and should definitely be checked! (Default : DIIS). Type: string; Possible Values: POPLE, DIIS; Default: DIIS. CFOUR_LOCK_ORBOCC¶. This keyword is used by the SCF program to determine if the orbital occupancy (by symmetry block) is allowed to change in the course of the calculation. ON (=1) locks the occupation to that set by the keyword CFOUR_OCCUPATION (or the initial guess if omitted); OFF (= 0) permits the occupation to change. (Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP¶. Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEMORY_SIZE¶. Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_MEM_UNIT¶. Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_METHOD¶. Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html:36857,optimiz,optimizations,36857,psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,15,['optimiz'],['optimizations']
Performance,"bin/gcc++; $PSI4CONDA/bin/gfortran; >>> which python psi4 g++ gfortran clang++ # Mac; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/g++; $PSI4CONDA/bin/gfortran; /usr/bin/clang++. >>> which cmake; $PSI4CONDA/bin/cmake; # if above empty, ``conda install cmake``. Create and compile plugin:. >>> psi4 --plugin-name testplugin; -- Creating ""testplugin"" with ""basic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testplugin.so; [100%] Built target testplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in $PATH or the; conda enviroment must be activated before compilation and execution of; plugins created using this procedure. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directory contains the following files. CMakeLists.txt — CMake fil",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/plugins.html:3904,load,loading,3904,psi4manual/master/plugins.html,https://psicode.org,https://psicode.org/psi4manual/master/plugins.html,18,"['cache', 'load']","['cache', 'loading']"
Performance,"bitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (CCDENSITY)¶CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY)¶CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR)¶CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA)¶CCLAMBDA — Caching level for libdpd governing the storage of amplitudes",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:8685,cache,cache,8685,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,8,['cache'],['cache']
Performance,"bitals. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. sapt-sf1; Tests the Psi4 SF-SAPT code. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. scf-guess-read2; Test if the the guess read in the same basis converges. cc13d; Tests analytic CC2 gradients. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. mp2-h; check that methods can act on single atom. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. fnocc3; Test FNO-QCISD(T) computation. cbs-xtpl-freq; Various gradie",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:4466,optimiz,optimizations,4466,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['optimiz'],['optimizations']
Performance,"bject of name name from the geometry in string geom. get_memory(); Function to return the total memory allocation. gradient(name, **kwargs); Function complementary to optimize(). hessian(name, **kwargs); Function complementary to frequency(). ipi_broker(LOT[, molecule, serverdata, options]); Run IPIBroker to connect to i-pi. join_path(prefix, *args). levenshtein(seq1, seq2); Compute the Levenshtein distance between two strings. mdi_run(scf_method, **kwargs); Begin functioning as an MDI engine. message_box([message, max_width, min_width]); put a message string into a box for extra attention. molden(wfn[, filename, density_a, …]); Function to write wavefunction information in wfn to filename in molden format. molecule_get_attr(self, name); Function to redefine __getattr__ method of molecule class. molecule_set_attr(self, name, value); Function to redefine __setattr__ method of molecule class. oeprop(wfn, *args, **kwargs); Evaluate one-electron properties. opt(name, **kwargs); Function to perform a geometry optimization. optimize(name, **kwargs); Function to perform a geometry optimization. optimize_geometric(name, **kwargs). pcm_helper(block); Passes multiline string block to PCMSolver parser. print_stderr(stuff); Function to print stuff to standard error stream. print_stdout(stuff); Function to print stuff to standard output stream. process_input(raw_input[, print_level]); Function to preprocess raw input, the text of the input file, then parse it, validate it for format, and convert it into legitimate Python. prop(*args, **kwargs); Function to compute various properties. properties(*args, **kwargs); Function to compute various properties. sanitize_name(name); Function to return name in coded form, stripped of characters that confuse filenames, characters into lowercase, + into p, * into s, and (, ), -, & , into _. scf_helper(name[, post_scf]); Function serving as helper to SCF, choosing whether to cast up or just run SCF with a standard guess. scf_wavefunction_facto",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/psi4api-1.html:19708,perform,perform,19708,psi4manual/1.4.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/psi4api-1.html,4,"['optimiz', 'perform']","['optimization', 'perform']"
Performance,"ble SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. FAIL_ON_MAXITER¶. Fail if we reach maxiter without converging?. Type: boolean; Default: true. MAXITER¶. Maximum number of iterations. Cfour Interface: Keyword translates into CFOUR_SCF_MAXCYC. Type: integer; Default: 100. MOM_OCC¶. The absolute indices of orbitals to excite from in MOM (+/- for alpha/beta). Type: array; Default: No Default. MOM_START¶. The iteration to start MOM on (or 0 for no MOM). Type: integer; Default: 0. MOM_VIR¶. The absolute indices of orbitals to excite to in MOM (+/- for alpha/beta). Type: array; Default: No Default. SOSCF¶. Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV¶. Second order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER¶. Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER¶. Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT¶. Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE¶. When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. STABILITY_ANALYSIS¶. Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. Fractional Occupation UHF/UKS¶. FRAC_DIIS¶. Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD¶. Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC¶. The absolute indices of occupied orbitals ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__scf-1.html:6205,perform,perform,6205,psi4manual/1.1.0/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__scf-1.html,4,['perform'],['perform']
Performance,"ble SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. FAIL_ON_MAXITER¶. Fail if we reach maxiter without converging?. Type: boolean; Default: true. MAXITER¶. Maximum number of iterations. Cfour Interface: Keyword translates into CFOUR_SCF_MAXCYC. Type: integer; Default: 100. MOM_OCC¶. The absolute indices of orbitals to excite from in MOM (+/- for alpha/beta). Type: array; Default: No Default. MOM_START¶. The iteration to start MOM on (or 0 for no MOM). Type: integer; Default: 0. MOM_VIR¶. The absolute indices of orbitals to excite to in MOM (+/- for alpha/beta). Type: array; Default: No Default. SOSCF¶. Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV¶. Secord order convergence threshold. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER¶. Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER¶. Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT¶. Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_R_START¶. When to start second-order SCF iterations based on gradient RMS. Type: double; Default: 1.0e-2. STABILITY_ANALYSIS¶. Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attemp to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. Fractional Occupation UHF/UKS¶. FRAC_DIIS¶. Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD¶. Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC¶. The absolute indices of occupied orbitals to fractionally ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__scf-1.html:6255,perform,perform,6255,psi4manual/1.0.0/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__scf-1.html,2,['perform'],['perform']
Performance,"ble Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (DFTSAPT); DFTSAPT — Bench level. Type: integer; Default: 0. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be he",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:6546,optimiz,optimization,6546,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimization']
Performance,"ble Values: basis string; Default: No Default. DF_BASIS_MP2 (LMP2); LMP2 — Auxiliary basis set for MP2 density fitting calculations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT (SAPT); SAPT — Auxiliary basis set for SAPT density fitting computations. Defaults to BASIS-RI. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SCF (CPHF); CPHF — Auxiliary basis for SCF. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SCF (SCF); SCF — Auxiliary basis set for SCF density fitting computations. Defaults to BASIS-JKFIT. Type: string; Possible Values: basis string; Default: No Default. DF_FITTING_CONDITION (SCF); SCF (Expert) — Fitting Condition. Type: double; Default: 1.0e-12. DF_INTS_IO (DFMP2); DFMP2 (Expert) — IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. DF_INTS_IO (SCF); SCF (Expert) — IO caching for CP corrections, etc. Type: string; Possible Values: NONE, SAVE, LOAD; Default: NONE. DF_INTS_NUM_THREADS (DFMP2); DFMP2 — Number of threads to compute integrals with. 0 is wild card. Type: integer; Default: 0. DF_INTS_NUM_THREADS (SCF); SCF — Number of threads for integrals (may be turned down if memory is an issue). 0 is blank. Type: integer; Default: 0. DF_LMP2 (LMP2); LMP2 — Do use density fitting? Turned on with specification of fitting basis. Type: boolean; Default: true. DFMP2_MEM_FACTOR (DFMP2); DFMP2 — % of memory for DF-MP2 three-index buffers. Type: double; Default: 0.9. DFT_ALPHA (SCF); SCF — The DFT Exact-exchange parameter. Type: double; Default: 0.0. DFT_BASIS_TOLERANCE (SCF); SCF — DFT basis cutoff. Type: conv double; Default: 1.0e-12. DFT_BLOCK_MAX_POINTS (SCF); SCF (Expert) — The maximum number of grid points per evaluation block. Type: integer; Default: 5000. DFT_BLOCK_MAX_RADIUS (SCF); SCF (Expert) — The maximum radius to terminate subdivision of an octree block [au]. Type: double; Default: 3.0. DFT_BLOCK_MIN_POINTS (",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html:19313,LOAD,LOAD,19313,psi4manual/4.0b2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html,2,['LOAD'],['LOAD']
Performance,"ble alternatives. An; example tabulating a potential energy surface scan for water with Pandas; is shown below:; molecule h2o {; O; H 1 R; H 1 R 2 A; }. Rvals=[0.9,1.0,1.1]; Avals=range(100,103,2). rows = []; table = []. set basis cc-pvdz. for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('mp2'); escf = variable('SCF TOTAL ENERGY'); edfmp2 = variable('MP2 TOTAL ENERGY'); escsmp2 = variable('SCS-MP2 TOTAL ENERGY'); rows.append((R, A)); table.append([escf, escsmp2, edfmp2]). import pandas as pd; df = pd.DataFrame(table, columns = [""E(SCF)"", ""E(SCS)"", ""E(DFMP2)""], index=rows); print(df). # E(SCF) E(SCS) E(DFMP2); # (0.9, 100) -76.020680 -76.217006 -76.221189; # (0.9, 102) -76.021305 -76.217439 -76.221605; # (1.0, 100) -76.021264 -76.224987 -76.228727; # (1.0, 102) -76.021460 -76.224946 -76.228668; # (1.1, 100) -75.990195 -76.201891 -76.205087; # (1.1, 102) -75.990085 -76.201498 -76.204676. Python Wrappers¶; The Python foundations of the PSI4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the PSI4 suite.; As seen in the neon dimer example from the tutorial section,; the nbody() wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example,; energy('mp2', bsse_type='cp'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules.; PSI4 also provides the cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; # all equivalent. energy('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVT",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/psithoninput.html:13045,perform,performed,13045,psi4manual/1.7.x/psithoninput.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/psithoninput.html,3,['perform'],['performed']
Performance,"blelines)); with open(filename + '_index.tex', 'w') as handle:; handle.write('\n'.join(indexlines)); print(""""""\n LaTeX index written to {filename}_index.tex\n""""""; """""" LaTeX table written to {filename}.tex\n""""""; """""" >>> pdflatex {filename}\n""""""; """""" >>> open /Applications/Preview.app {filename}.pdf\n"""""".format(filename=filename)); filedict = {'data': os.path.abspath(filename) + '.tex',; 'index': os.path.abspath(filename + '_index.tex')}; return filedict. [docs] def table_scrunch(self, plotpath, subjoin):; rowplan = ['mtd']; columnplan = [; ['l', r'Method', '', textables.label, {}],; ['c', r'Description', '', textables.empty, {}],; ['d', r'aug-cc-pVDZ', 'unCP', textables.val, {'bas': 'adz', 'opt': 'unCP'}],; ['d', r'aug-cc-pVDZ', 'CP', textables.val, {'bas': 'adz', 'opt': 'CP'}],; ['d', r'aug-cc-pVTZ', 'unCP', textables.val, {'bas': 'atz', 'opt': 'unCP'}],; ['d', r'aug-cc-pVTZ', 'CP', textables.val, {'bas': 'atz', 'opt': 'CP'}]]. footnotes = []; landscape = False; theme = 'summavg'; title = r""""""Classification and Performance of model chemistries. Interaction energy [kcal/mol] {{err}} statistics."""""".format(); return rowplan, columnplan, landscape, footnotes, title, theme. [docs] def table_merge_abbr(self, plotpath, subjoin):; """"""Specialization of table_generic into table with minimal statistics; (three S22 and three overall) plus embedded slat diagram as suitable; for main paper. A single table is formed in sections by *bas* with; lines *mtd* within each section. """"""; rowplan = ['bas', 'mtd']; columnplan = [; ['l', r""""""Method \& Basis Set"""""", '', textables.label, {}],; ['d', r'S22', 'HB', textables.val, {'sset': 'hb', 'dbse': 'S22'}],; ['d', r'S22', 'MX/DD', textables.val, {'sset': 'mxdd', 'dbse': 'S22'}],; ['d', r'S22', 'TT', textables.val, {'sset': 'tt', 'dbse': 'S22'}],; ['d', r'Overall', 'HB', textables.val, {'sset': 'hb', 'dbse': 'DB4'}],; ['d', r'Overall', 'MX/DD', textables.val, {'sset': 'mxdd', 'dbse': 'DB4'}],; ['d', r'Overall', 'TT', textables.val, {'sset': 't",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:102416,Perform,Performance,102416,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['Perform'],['Performance']
Performance,"blocks. print_header(self: psi4.core.VBase) → None¶; Prints the objects header. properties(self: psi4.core.VBase) → List[psi::PointFunctions]¶; Returns the properties computer. quadrature_values(self: psi4.core.VBase) → Dict[str, float]¶; Returns the quadrature values. set_D(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; Sets the internal density. set_debug(self: psi4.core.VBase, arg0: int) → None¶; Sets the debug level of the object. set_print(self: psi4.core.VBase, arg0: int) → None¶; Sets the print level of the object. Dao(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None; Returns internal AO density. basis(self: psi4.core.VBase) → psi4.core.BasisSet; Returns the internal basis set. build(arg0: psi4.core.BasisSet, arg1: psi4.core.SuperFunctional, arg2: str) → psi4.core.VBase. build_collocation_cache(self: psi4.core.VBase, arg0: int) → None; Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self: psi4.core.VBase) → None; Clears the collocation cache. compute_V(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None; doctsring. compute_Vx(self: psi4.core.VBase, arg0: List[psi4.core.Matrix], arg1: List[psi4.core.Matrix]) → None; doctsring. compute_gradient(self: psi4.core.VBase) → psi4.core.Matrix; Compute the DFT nuclear gradient contribution. compute_hessain(self: psi4.core.VBase) → psi4.core.Matrix; Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs); Overloaded function. finalize(self: psi4.core.VBase) -> None. doctsring. finalize(self: psi4.core.VBase) -> None. Finalizes the V object. functional(self: psi4.core.VBase) → psi4.core.SuperFunctional; Returns the interal superfunctional. get_block(self: psi4.core.VBase, arg0: int) → psi::BlockOPoints; Returns the requested BlockOPoints. get_np_xyzw(); Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. grid(self: psi4.core.VBase) → psi::DFTGrid; Returns the grid object. initialize(*args, **kwargs); Overloaded fu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vbase.html:4098,cache,cache,4098,psi4manual/1.3.2/api/psi4.core.vbase.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.vbase.html,1,['cache'],['cache']
Performance,"body_range}; for n in nbody_range:; compute_list[n] |= cp_compute_list[n]; compute_list[n] |= nocp_compute_list[n]; compute_list[n] |= vmfc_compute_list[n]; core.print_out("" Number of %d-body computations: %d\n"" % (n, len(compute_list[n]))). metadata['compute_dict'] = {; 'all': compute_list,; 'cp': cp_compute_list,; 'nocp': nocp_compute_list,; 'vmfc_compute': vmfc_compute_list,; 'vmfc_levels': vmfc_level_list; }. return metadata. def compute_nbody_components(func, method_string, metadata):; """"""Computes requested N-body components. Performs requested computations for psi4::Molecule object `molecule` according to; `compute_list` with function `func` at `method_string` level of theory. Parameters; ----------; func : {'energy', 'gradient', 'hessian'}; Function object to be called within N-Body procedure.; method_string : str; Indicates level of theory to be passed to function `func`.; metadata : dict of str; Dictionary of N-body metadata. Required ``'key': value`` pairs:; ``'compute_list'``: dict of int: set; List of computations to perform. Keys indicate body-levels, e.g,. `compute_list[2]` is the; list of all 2-body computations required.; ``'kwargs'``: dict; Arbitrary keyword arguments to be passed to function `func`. Returns; -------; dict of str: dict; Dictionary containing computed N-body components. Contents:; ``'energies'``: dict of set: float64; Dictionary containing all energy components required for given N-body procedure.; ``'ptype'``: dict of set: float64 or dict of set: psi4.Matrix; Dictionary of returned quantities from calls of function `func` during N-body computations; ``'intermediates'``: dict of str: float64; Dictionary of psivars for intermediate N-body computations to be set at the end of the; N-body procedure.; """"""; # Get required metadata; kwargs = metadata['kwargs']; molecule = metadata['molecule']; #molecule = core.get_active_molecule(); compute_list = metadata['compute_dict']['all']. # Now compute the energies; energies_dict = {}; gradients_dic",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_nbody.html:14841,perform,perform,14841,psi4manual/1.3.2/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_nbody.html,1,['perform'],['perform']
Performance,"bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:16187,optimiz,optimization,16187,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,8,['optimiz'],['optimization']
Performance,"boolean; Default: false. SCF_MEM_SAFETY_FACTOR¶. Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_TYPE¶. What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, FAST_DF, CD, INDEPENDENT, GTFOCK; Default: PK. S_ORTHOGONALIZATION¶. SO orthogonalization: symmetric or canonical?. Type: string; Possible Values: SYMMETRIC, CANONICAL; Default: SYMMETRIC. S_TOLERANCE¶. Minimum S matrix eigenvalue to be used before compensating for linear dependencies. Type: conv double; Default: 1e-7. Convergence Control/Stabilization¶. BASIS_GUESS¶. Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. DAMPING_CONVERGENCE¶. The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_PERCENTAGE¶. The amount (percentage) of damping to apply to the early density updates. 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current density) could help to solve problems with oscillatory convergence. Type: double; Default: 0.0. DF_BASIS_GUESS¶. When BASIS_GUESS is active, run the preliminary scf in density-fitted mode with this as fitting basis for the small basis set. A value of TRUE turns on density fitting with the default basis, otherwise the specified basis is used. Type: string; Possible Values: basis string; Default: FALSE. DIIS¶. Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__scf-1.html:3533,perform,performed,3533,psi4manual/1.1.0/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__scf-1.html,2,['perform'],['performed']
Performance,"bose=True, alpha=None)[source]¶; Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by cbs().; Halkier, Helgaker, Jorgensen, Klopper, Koch, Olsen, & Wilson, Chem. Phys. Lett. 286 (1998) 243-252,; DOI: 10.1016/S0009-2614(99)00179-7. \[E_{corl}^X = E_{corl}^{\infty} + \beta X^{-alpha}\]. Aliases¶; When a particular composite method or its functional form is going to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/psi4/driver/aliases.py; (source location) or psi4/lib/psi4/driver/aliases.py (installed; location). No recompilation is necessary after defining an alias. Some; existing examples are below. psi4.driver.aliases.sherrill_gold_standard(func, label, **kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses complete_basis_set() to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; 1; 2>>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). 1; 2>>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). 1; 2>>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). psi4.driver.aliases.allen_focal_point(func, label, **kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; complete_basis_set() to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/cbs-1.html:18831,perform,performed,18831,psi4manual/1.2.1/cbs-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cbs-1.html,2,['perform'],['performed']
Performance,"bove at all applies to dfmp2. core.IO.set_default_namespace('dimer'); core.print_out('\n'); p4util.banner('Dimer HF'); core.print_out('\n'). # Compute dimer wavefunction. if (sapt_basis == 'dimer') and (ri == 'DF'):; core.set_global_option('DF_INTS_IO', 'SAVE'). optstash2 = p4util.OptionsState(['NUM_FROZEN_DOCC']); core.set_global_option(""NUM_FROZEN_DOCC"", nfc_ab); core.timer_on(""SAPT: Dimer SCF""); dimer_wfn = scf_helper('RHF', molecule=sapt_dimer, **kwargs); core.timer_off(""SAPT: Dimer SCF""). necp_ab = dimer_wfn.basisset().n_ecp_core(); share_df_ints = ((sapt_basis == 'dimer') and (ri == 'DF') and not (necp_ab and (os.name == 'nt'))); if (sapt_basis == 'dimer') and (ri == 'DF') and not share_df_ints:; core.print_out(f""\n Turning off SAPT DF integrals sharing because of ECP: {necp_ab}\n\n""). if do_delta_mp2:; select_mp2(""mp2"", ref_wfn=dimer_wfn, **kwargs); mp2_corl_interaction_e = core.variable('MP2 CORRELATION ENERGY'). optstash2.restore(); if share_df_ints:; core.set_global_option('DF_INTS_IO', 'LOAD'). # Compute Monomer A wavefunction; if share_df_ints:; core.IO.change_file_namespace(97, 'dimer', 'monomerA'). core.IO.set_default_namespace('monomerA'); core.print_out('\n'); p4util.banner('Monomer A HF'); core.print_out('\n'). core.timer_on(""SAPT: Monomer A SCF""); monomerA_wfn = scf_helper('RHF', molecule=monomerA, **kwargs); core.timer_off(""SAPT: Monomer A SCF""). if do_delta_mp2:; select_mp2(""mp2"", ref_wfn=monomerA_wfn, **kwargs); mp2_corl_interaction_e -= core.variable('MP2 CORRELATION ENERGY'). # Compute Monomer B wavefunction; if share_df_ints:; core.IO.change_file_namespace(97, 'monomerA', 'monomerB'); core.IO.set_default_namespace('monomerB'); core.print_out('\n'); p4util.banner('Monomer B HF'); core.print_out('\n'). core.timer_on(""SAPT: Monomer B SCF""); monomerB_wfn = scf_helper('RHF', molecule=monomerB, **kwargs); core.timer_off(""SAPT: Monomer B SCF""). # Delta MP2; if do_delta_mp2:; select_mp2(""mp2"", ref_wfn=monomerB_wfn, **kwargs); mp2_corl_interaction_e -",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/procrouting/proc.html:148827,LOAD,LOAD,148827,psi4manual/1.9.x/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/procrouting/proc.html,2,['LOAD'],['LOAD']
Performance,"broker(LOT[, molecule, serverdata, options]); Runs IPIBroker to connect to i-PI (https://ipi-code.org/). levenshtein(seq1, seq2); Compute the Levenshtein distance between two strings. libint2_configuration(); Returns information on integral classes, derivatives, and AM from currently linked Libint2. libint2_print_out(). rtype:; None. mdi_run(scf_method, **kwargs); Begin functioning as an MDI (MolSSI driver interface) engine. message_box(message[, max_width, min_width]); Put a message string into a box for extra attention. molden(wfn[, filename, density_a, ...]); Function to write wavefunction information in wfn to filename in molden format. molecule_get_attr(self, name); Function to redefine __getattr__ method of molecule class. molecule_set_attr(self, name, value); Function to redefine __setattr__ method of molecule class. oeprop(wfn, *args, **kwargs); Evaluate one-electron properties. opt(name, **kwargs); Function to perform a geometry optimization. optimize(name, **kwargs); Function to perform a geometry optimization. optimize_geometric(name, **kwargs). pcm_helper(block); Helper to specify the multiline PCMSolver syntax for PCM. process_input(raw_input[, print_level]); Function to preprocess raw input, the text of the input file, then parse it, validate it for format, and convert it into legitimate Python. prop(*args, **kwargs); Function to compute various properties. properties(*args, **kwargs); Function to compute various properties. sanitize_method(name); Replace characters in method name so that suitable for function name or Sphinx table anchor (both as-is) or HTML table link (replace underscore in returned string by dash). sanitize_name(name); Function to return name in coded form, stripped of characters that confuse filenames, characters into lowercase, + into p, * into s, and (, ), -, & , into _. scf_helper(name[, post_scf]); Function serving as helper to SCF, choosing whether to cast up or just run SCF with a standard guess. scf_wavefunction_factory(name, ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/psi4api.html:19250,optimiz,optimize,19250,psi4manual/1.8.x/psi4api.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/psi4api.html,3,"['optimiz', 'perform']","['optimization', 'optimize', 'perform']"
Performance,"broker(LOT[, molecule, serverdata, options]); Runs IPIBroker to connect to i-PI (https://ipi-code.org/). levenshtein(seq1, seq2); Compute the Levenshtein distance between two strings. libint2_configuration(); Returns information on integral classes, derivatives, and AM from currently linked Libint2. libint2_print_out(). rtype:; None. mdi_run(scf_method, **kwargs); Begin functioning as an MDI (MolSSI driver interface) engine. message_box(message[, max_width, min_width]); Put a message string into a box for extra attention. molden(wfn[, filename, density_a, ...]); Function to write wavefunction information in wfn to filename in molden format. molecule_get_attr(self, name); Function to redefine __getattr__ method of molecule class. molecule_set_attr(self, name, value); Function to redefine __setattr__ method of molecule class. oeprop(wfn, *args, **kwargs); Evaluate one-electron properties. opt(name, **kwargs); Function to perform a geometry optimization. optimize(name, **kwargs); Function to perform a geometry optimization. optimize_geometric(name, **kwargs). pcm_helper(block); Helper to specify the multiline PCMSolver syntax for PCM. process_input(raw_input[, print_level]); Function to preprocess raw input, the text of the input file, then parse it, validate it for format, and convert it into legitimate Python. prop(*args, **kwargs); Function to compute various properties. properties(*args, **kwargs); Function to compute various properties. sanitize_method(name); Replace characters in method name so that suitable for function name or Sphinx table anchor :rtype: str. sanitize_name(name); Function to return name in coded form, stripped of :rtype: str. scf_helper(name[, post_scf]); Function serving as helper to SCF, choosing whether to cast up or just run SCF with a standard guess. scf_wavefunction_factory(name, ref_wfn, ...); Builds the correct (R/U/RO/CU HF/KS) wavefunction from the provided information, sets relevant auxiliary basis sets on it, and prepares any empiric",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/psi4api.html:19349,optimiz,optimize,19349,psi4manual/1.9.x/psi4api.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/psi4api.html,3,"['optimiz', 'perform']","['optimization', 'optimize', 'perform']"
Performance,"bs(); ['SCF', 'GUESS']). n = kwargs.get('opt_iter', 1). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()). # If we are feezing cartesian, do not orient or COM; if core.get_local_option(""OPTKING"", ""FROZEN_CARTESIAN""):; molecule.fix_orientation(True); molecule.fix_com(True); molecule.update_geometry(). # Shifting the geometry so need to copy the active molecule; moleculeclone = molecule.clone(). initial_sym = moleculeclone.schoenflies_symbol(); while n <= core.get_option('OPTKING', 'GEOM_MAXITER'):; current_sym = moleculeclone.schoenflies_symbol(); if initial_sym != current_sym:; raise ValidationError(""""""Point group changed! (%s <-- %s) You should restart """"""; """"""using the last geometry in the output, after """"""; """"""carefully making sure all symmetry-dependent """"""; """"""input, such as DOCC, is correct."""""" %; (current_sym, initial_sym)); kwargs['opt_iter'] = n. # Use orbitals from previous iteration as a guess; # set within loop so that can be influenced by fns to optimize (e.g., cbs); if (n > 1) and (opt_mode == 'continuous') and (not core.get_option('SCF', 'GUESS_PERSIST')):; core.set_local_option('SCF', 'GUESS', 'READ'). # Before computing gradient, save previous molecule and wavefunction if this is an IRC optimization; if (n > 1) and (core.get_option('OPTKING', 'OPT_TYPE') == 'IRC'):; old_thisenergy = core.get_variable('CURRENT ENERGY'). # Compute the gradient; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); thisenergy = core.get_variable('CURRENT ENERGY'). # above, used to be getting energy as last of energy list from gradient(); # thisenergy below should ultimately be testing on wfn.energy(). # S/R: Quit after getting new displacements or if forming gradient fails; if opt_mode == 'sow':; return (0.0, None); elif opt_mode == 'reap' and thisenergy == 0.0:; return (0.0, None). core.set_gradient(G). # S/R: Move opt data file from last pass into namespace for this p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html:58998,optimiz,optimize,58998,psi4manual/1.1.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html,1,['optimiz'],['optimize']
Performance,"bs(); ['SCF', 'GUESS']). n = kwargs.get('opt_iter', 1). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()). # If we are freezing cartesian, do not orient or COM; if core.get_local_option(""OPTKING"", ""FROZEN_CARTESIAN""):; molecule.fix_orientation(True); molecule.fix_com(True); molecule.update_geometry(). # Shifting the geometry so need to copy the active molecule; moleculeclone = molecule.clone(). initial_sym = moleculeclone.schoenflies_symbol(); while n <= core.get_option('OPTKING', 'GEOM_MAXITER'):; current_sym = moleculeclone.schoenflies_symbol(); if initial_sym != current_sym:; raise ValidationError(""""""Point group changed! (%s <-- %s) You should restart """"""; """"""using the last geometry in the output, after """"""; """"""carefully making sure all symmetry-dependent """"""; """"""input, such as DOCC, is correct."""""" % (current_sym, initial_sym)); kwargs['opt_iter'] = n. # Use orbitals from previous iteration as a guess; # set within loop so that can be influenced by fns to optimize (e.g., cbs); if (n > 1) and (not core.get_option('SCF', 'GUESS_PERSIST')):; core.set_local_option('SCF', 'GUESS', 'READ'). # Before computing gradient, save previous molecule and wavefunction if this is an IRC optimization; if (n > 1) and (core.get_option('OPTKING', 'OPT_TYPE') == 'IRC'):; old_thisenergy = core.variable('CURRENT ENERGY'). # Compute the gradient - preserve opt data despite core.clean calls in gradient; core.IOManager.shared_object().set_specific_retention(1, True); G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); thisenergy = core.variable('CURRENT ENERGY'). # above, used to be getting energy as last of energy list from gradient(); # thisenergy below should ultimately be testing on wfn.energy(). # Record optimization steps; # Add wavefunctions later; if return_history:; step_energies.append(thisenergy); step_coordinates.append(moleculeclone.geometry()); step_gradients.append(G.clone(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html:57013,optimiz,optimize,57013,psi4manual/1.3.2/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html,3,['optimiz'],['optimize']
Performance,"bs(); ['SCF', 'GUESS']). n = kwargs.get('opt_iter', 1). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', psi4.get_active_molecule()). # If we are feezing cartesian, do not orient or COM; if psi4.get_local_option(""OPTKING"", ""FROZEN_CARTESIAN""):; molecule.fix_orientation(True); molecule.fix_com(True); molecule.update_geometry(). # Shifting the geometry so need to copy the active molecule; moleculeclone = molecule.clone(). initial_sym = moleculeclone.schoenflies_symbol(); while n <= psi4.get_option('OPTKING', 'GEOM_MAXITER'):; current_sym = moleculeclone.schoenflies_symbol(); if initial_sym != current_sym:; raise ValidationError(""""""Point group changed! (%s <-- %s) You should restart """"""; """"""using the last geometry in the output, after """"""; """"""carefully making sure all symmetry-dependent """"""; """"""input, such as DOCC, is correct."""""" %; (current_sym, initial_sym)); kwargs['opt_iter'] = n. # Use orbitals from previous iteration as a guess; # set within loop so that can be influenced by fns to optimize (e.g., cbs); if (n > 1) and (opt_mode == 'continuous') and (not psi4.get_option('SCF', 'GUESS_PERSIST')):; psi4.set_local_option('SCF', 'GUESS', 'READ'). # Before computing gradient, save previous molecule and wavefunction if this is an IRC optimization; if (n > 1) and (psi4.get_option('OPTKING', 'OPT_TYPE') == 'IRC'):; old_thisenergy = psi4.get_variable('CURRENT ENERGY'). # Compute the gradient; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); thisenergy = psi4.get_variable('CURRENT ENERGY'). # above, used to be getting energy as last of energy list from gradient(); # thisenergy below should ultimately be testing on wfn.energy(). # S/R: Quit after getting new displacements or if forming gradient fails; if opt_mode == 'sow':; return (0.0, None); elif opt_mode == 'reap' and thisenergy == 0.0:; return (0.0, None). psi4.set_gradient(G). # S/R: Move opt data file from last pass into namespace for this p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver.html:57156,optimiz,optimize,57156,psi4manual/1.0.0/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver.html,1,['optimiz'],['optimize']
Performance,"bs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc12; Single point energies of multiple excited states with EOM-CCSD. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cbs-xtpl-func; optimization with method defined via cbs. fcidump; test FCIDUMP functionality for rhf/uhf. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. scf-level-shift-rohf; SCF level shift on an ROHF computation. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. scf3; File retention, docc, socc, and bond distances specified explicitly. opt16; SCF 6-31G(d) optimization of TS for HCN to HNC Performs finite difference hessian calculation. Then optimizes using previous orbitals fo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:33768,optimiz,optimized,33768,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimized']
Performance,"bs_helper.xtpl_highest_1` and :py:func:`~psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_3`. .. hlist::; :columns: 1. * :py:func:`~psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2`; * :py:func:`~psi4.driver.driver_cbs_helper.scf_xtpl_truhlar_2`; * :py:func:`~psi4.driver.driver_cbs_helper.scf_xtpl_karton_2`. :type corl_alpha: float; :param corl_alpha: |dl| ``3.00`` |dr| . Overrides the default \alpha parameter used in the listed :py:func:`~psi4.driver.driver_cbs_helper.corl_xtpl_helgaker_2` correlation; extrapolation to the corl stage. The supplied \alpha does not impact delta or any further stages. .. hlist::; :columns: 1. * :py:func:`~psi4.driver.driver_cbs_helper.corl_xtpl_helgaker_2`. :type delta_alpha: float; :param delta_alpha: |dl| ``3.00`` |dr| . Overrides the default \alpha parameter used in the listed; :py:func:`~psi4.driver.driver_cbs_helper.corl_xtpl_helgaker_2` correlation extrapolation for the delta correction. Useful when; delta correction is performed using smaller basis sets for which a different \alpha might; be more appropriate. .. hlist::; :columns: 1. * :py:func:`~psi4.driver.driver_cbs_helper.corl_xtpl_helgaker_2`. * Combined interface; ; :type cbs_metadata: List[Dict]; :param cbs_metadata: |dl| autogenerated from above keywords |dr| || ``[{""wfn"": ""hf"", ""basis"": ""cc-pv[TQ5]z""}]`` || etc. This is the interface to which all of the above calls are internally translated. The first item in; the array is always defining the SCF contribution to the total energy. The required items in the; dictionary are:. * ```wfn```: typically ```HF```, which is subsumed in correlated methods anyway.; * ```basis```: basis set, can be in a bracketed form (eg. ```cc-pv[tq]z```). | Other supported arguments for the first dictionary are:. * ```scheme```: scf extrapolation scheme function, by default it is worked out from the number of basis sets (1 - 3) supplied as ```basis```.; * ```alpha```: alpha for the above scheme, if the default is to be overriden; * ```options```:",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs.html:30854,perform,performed,30854,psi4manual/1.7.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs.html,4,['perform'],['performed']
Performance,"bsolute value below which integrals are neglected. Type: conv double; Default: 1e-14. IP_POLES (OCC); OCC — Do compute OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. IRC_DIRECTION (OPTKING); OPTKING — IRC mapping direction. Type: string; Possible Values: FORWARD, BACKWARD; Default: FORWARD. IRC_STEP_SIZE (OPTKING); OPTKING — IRC step size in bohr(amu). Type: double; Default: 0.2. IRC_STOP (OPTKING); OPTKING — Decide when to stop IRC calculations. Type: string; Possible Values: ASK, STOP, GO; Default: STOP. ISTOP (DETCI); DETCI — Do stop DETCI after string information is formed and before integrals are read?. Type: boolean; Default: false. IVO (TRANSQT); TRANSQT — Do form improved virtual orbitals (IVO)?. Type: boolean; Default: false. J_FILE (TRANSQT); TRANSQT — Half-transformed integrals. Type: integer; Default: 91. JOBTYPE (CCLAMBDA); CCLAMBDA (Expert) — Type of job being performed. Type: string; Default: No Default. JOBTYPE (CPHF); CPHF (Expert) — Type of job being performed. Type: string; Default: SP. KEEP_INTCOS (OPTKING); OPTKING — Keep internal coordinate definition file. Type: boolean; Default: false. KEEP_J (TRANSQT); TRANSQT — Do keep half-transformed integrals?. Type: boolean; Default: false. KEEP_OEIFILE (CCSORT); CCSORT — Do retain the input one-electron integrals?. Type: boolean; Default: false. KEEP_PRESORT (TRANSQT); TRANSQT — Do keep presort file?. Type: boolean; Default: false. KEEP_TEIFILE (CCSORT); CCSORT — Do retain the input two-electron integrals?. Type: boolean; Default: false. LAG_IN_FILE (TRANSQT); TRANSQT — MO-basis MO-lagrangian file. Type: integer; Default: PSIF_MO_LAG. LAGRAN_DOUBLE (TRANSQT); TRANSQT — Do multiply the MO-lagrangian by 2.0?. Type: boolean; Default: false. LAGRAN_HALVE (TRANSQT); TRANSQT — Do divide the MO-lagrangian by 2.0?. Type: boolean; Default: false. LAMBDA_MAXITER (DCFT); DCFT — Maximum number of density cumulant update micro-iterations per macro-iteration (for ALOGRITHM = TWOS",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html:62251,perform,performed,62251,psi4manual/4.0b5/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html,2,['perform'],['performed']
Performance,"bspace (eigen-decomposition to compute H2^(1/2)); H2_ss_val, H2_ss_vec = np.linalg.eigh(H2_ss); _print_array(""eigenvalues H2_ss"", H2_ss_val, verbose); _print_array(""eigenvectors H2_ss"", H2_ss_vec, verbose). # Check H2 is PD; # NOTE: If this triggers failure the SCF solution is not stable. A few ways to handle this; # 1. Use davidson solver where product function evaluates (H2 * (H1 * X)); # - Poor convergence; # 2. Switch to CIS/TDA; # - User would probably not expect this; # 3. Perform Stability update and restart with new reference; if np.any(H2_ss_val < 0.0):; msg = (""The H2 matrix is not Positive Definite. "" ""This means the reference state is not stable.""); raise RuntimeError(msg). # Build H2^(1/2); H2_ss_half = np.einsum(""ik,k,jk->ij"", H2_ss_vec, np.sqrt(H2_ss_val), H2_ss_vec, optimize=True); _print_array(""SS Transformed (A-B)^(1/2)"", H2_ss_half, verbose). # Build Hermitian SS product (H2)^(1/2)(H1)(H2)^(1/2); Hss = np.einsum('ij,jk,km->im', H2_ss_half, H1_ss, H2_ss_half, optimize=True); _print_array(""(H2)^(1/2)(H1)(H2)^(1/2)"", Hss, verbose). #diagonalize Hss -> w^2, Tss; w2, Tss = np.linalg.eigh(Hss); _print_array(""Eigenvalues (A-B)^(1/2)(A+B)(A-B)^(1/2)"", w2, verbose); _print_array(""Eigvectors (A-B)^(1/2)(A+B)(A-B)^(1/2)"", Tss, verbose). # pick positive roots; Tss = Tss[:, w2 > 1.0e-10]; w2 = w2[w2 > 1.0e-10]. # check for invalid eigvals; with np.errstate(invalid='raise'):; w = np.sqrt(w2). # sort roots; idx = w.argsort()[:nk]; Tss = Tss[:, idx]; w = w[idx]. # Extract Rss = H2^{1/2}Tss; Rss = np.dot(H2_ss_half, Tss). # Extract Lss = (H1 R)/ w; Lss = np.dot(H1_ss, Rss).dot(np.diag(1.0 / w)). # Biorthonormalize R/L solution vectors; inners = np.einsum(""ix,ix->x"", Rss, Lss, optimize=True); Rss = np.einsum(""x,ix->ix"", 1. / np.sqrt(inners), Rss, optimize=True); Lss = np.einsum(""x,ix->ix"", 1. / np.sqrt(inners), Lss, optimize=True). # Save best R/L vectors and eigenvalues; best_R = _best_vectors(engine, Rss[:, :nk], vecs); best_L = _best_vectors(engine, Lss[:, :nk], ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/solvers.html:29824,optimiz,optimize,29824,psi4manual/1.7.x/_modules/psi4/driver/p4util/solvers.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/solvers.html,4,['optimiz'],['optimize']
Performance,"by; installing XCode from the App Store that provides clang and; clang++ compilers. Check environment:. # yes, the following returns a blank line. yes, LD_LIBRARY_PATH irrelevant; >>> echo $PYTHONHOME $PYTHONPATH $DYLD_LIBRARY_PATH $PSIDATADIR. >>> which python psi4 g++ gfortran # Linux; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/gcc++; $PSI4CONDA/bin/gfortran; >>> which python psi4 g++ gfortran clang++ # Mac; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/g++; $PSI4CONDA/bin/gfortran; /usr/bin/clang++. >>> which cmake; $PSI4CONDA/bin/cmake; # if above empty, ``conda install cmake``. Create and compile plugin:. >>> psi4 --plugin-name testplugin; -- Creating ""testplugin"" with ""basic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testplugin.so; [100%] Built target testplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/plugins.html:3549,load,loading,3549,psi4manual/master/plugins.html,https://psicode.org,https://psicode.org/psi4manual/master/plugins.html,18,"['cache', 'load']","['cache', 'loading']"
Performance,"c gradients. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mp2_1; All-electron MP2 6-31G** geometry optimization of water. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. dcft1; DCFT-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. Previous topic; Test Suite and Sample Inputs; Next topic; Basis Sets by Element; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html:16602,perform,performs,16602,psi4manual/4.0b2/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html,2,['perform'],['performs']
Performance,"c is None:; raise ManagedMethodError(['select_lccd', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). [docs]def select_lccd_gradient(name, **kwargs):; """"""Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. """"""; reference = psi4.get_option('SCF', 'REFERENCE'); mtd_type = psi4.get_global_option('CC_TYPE'); module = psi4.get_global_option('QC_MODULE'); # Considering only [df]occ. func = None; if reference in ['RHF', 'UHF']:; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient. if func is None:; raise ManagedMethodError(['select_lccd_gradient', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). [docs]def select_olccd(name, **kwargs):; """"""Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. """"""; reference = psi4.get_option('SCF', 'REFERENCE'); mtd_type = psi4.get_global_option('CC_TYPE'); module = psi4.get_global_option('QC_MODULE'); # Considering only [df]occ. func = None; if reference in ['RHF', 'UHF', 'ROHF', 'RKS', 'UKS']:; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc. if func is None:; raise ManagedMethodError(['select_olccd', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). [docs]def select_olccd_gradient(name, **kwargs):; """"""Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. """"""; reference = psi4.get_option('SCF', 'REFERENCE'); mtd_type = psi4.get_global_option('CC_TYPE'); module ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/procedures/proc.html:16638,perform,performance,16638,psi4manual/1.0.0/_modules/procedures/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/procedures/proc.html,1,['perform'],['performance']
Performance,"c or finite difference. """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs); dertype = 1. # Order of precedence:; # 1. Default for wavefunction; # 2. Value obtained from kwargs, if user changed it; # 3. If user provides a custom 'func' use that. # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # 1. set the default to that of the provided name; if lowername in procedures['gradient']:; dertype = 1; elif lowername in procedures['energy']:; dertype = 0; func = energy. if (PsiMod.get_global_option('REFERENCE').lower() == 'rks') or (PsiMod.get_global_option('REFERENCE').lower() == 'uks'):; dertype = 0; func = energy. # 2. Check if the user passes dertype into this function; if 'dertype' in kwargs:; opt_dertype = kwargs['dertype']. if input.der0th.match(str(opt_dertype)):; dertype = 0; func = energy; elif input.der1st.match(str(opt_dertype)):; dertype = 1; else:; raise ValidationError('Requested derivative level \'dertype\' %s not valid for helper function optimize.' % (opt_dertype)). # 3. if the user provides a custom function THAT takes precendence; if ('opt_func' in kwargs) or ('func' in kwargs):; if ('func' in kwargs):; kwargs['opt_func'] = kwargs['func']; del kwargs['func']; dertype = 0; func = kwargs['opt_func']. # Summary validation; if (dertype == 1) and (lowername in procedures['gradient']):; pass; elif (dertype == 0) and (func is energy) and (lowername in procedures['energy']):; pass; elif (dertype == 0) and not(func is energy):; pass; else:; raise ValidationError('Requested method \'name\' %s and derivative level \'dertype\' %s are not available.'; % (lowername, dertype)). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # S/R: Mode",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/driver.html:21544,optimiz,optimize,21544,psi4manual/4.0b2/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/driver.html,1,['optimiz'],['optimize']
Performance,"c(name, **kwargs). def select_mp3_gradient(name, **kwargs):; """"""Function selecting the algorithm for a MP3 gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient. if func is None:; raise ManagedMethodError(['select_mp3_gradient', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_omp3(name, **kwargs):; """"""Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ. func = None; if reference in ['RHF', 'UHF', 'ROHF', 'RKS', 'UKS']:; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc. if func is None:; raise ManagedMethodError(['select_omp3', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_omp3_gradient(name, **kwargs):; """"""Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_gl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html:10080,perform,performance,10080,psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html,3,['perform'],['performance']
Performance,"c-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dft2; DFT Functional Test. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). dft1; DFT Functional Test. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. pywrap-cbs1; Various basis set extrapolation tests. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. dcft5; DCFT-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. opt2; SCF DZ allene geometry optimzation, with Cartesian input. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc54; CCSD dipole with user-specified basis set. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active sp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/testsuite-1.html:9324,perform,performs,9324,psi4manual/4.0b3/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/testsuite-1.html,8,"['optimiz', 'perform']","['optimization', 'performs']"
Performance,"c-pVTZ level of theory. cdoremp-energy1; Cholesky decomposed OO-REMP/cc-pVDZ energy for the H2O molecule. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. numpy-array-interface; Numpy interface testing. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. cc13d; Tests analytic CC2 gradients. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. scf3; File retention, docc, socc, and bond distances specified explicitly. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. An F-SAPT partitioning follows I-SAPT. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dforemp-grad1; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O molecule. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. aediis-1; ADIIS test case, from 10.1063/1.3304922. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradien",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:42109,optimiz,optimization,42109,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimization']
Performance,"c-pvtz on water. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/dfmp2-1; MP2/cc-PVDZ computation of form",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:3327,optimiz,optimization,3327,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,2,['optimiz'],['optimization']
Performance,"c. -6.69968912 [mEh] -4.20411857 [kcal/mol] -17.59003378 [kJ/mol]; Total SAPT2+ sc. -7.31030140 [mEh] -4.58728357 [kcal/mol] -19.19319632 [kJ/mol]; Total SAPT2+(3) sc. -6.98526650 [mEh] -4.38332109 [kcal/mol] -18.33981720 [kJ/mol]; Total SAPT2+3 sc. -7.15142168 [mEh] -4.48758504 [kcal/mol] -18.77605762 [kJ/mol]; --------------------------------------------------------------------------------------------------------. The scaling factor is reported at the top (here 1.0072) together with the; \(\alpha\) parameter. All terms that are scaled are indicated by the sc.; label. Note that if Exch10 is less than \(10^{-5}\), the scaling factor is; set to \(1.0\). Caution; To density fit the dispersion terms in SAPT, the RI auxiliary; basis set (e.g., aug-cc-pVDZ-RI) controlled through; DF_BASIS_SAPT performs well. For Fock-type terms (i.e.,; electrostatics, exchange, induction, and core Fock matrix elements in; exchange-dispersion), the density-fitting auxiliary basis in the; SAPT module (both SAPT0 and higher-order) is RI (more; efficient for the small basis sets at which SAPT0 performs best) while; the FISAPT module uses the more appropriate JKFIT; (e.g., aug-cc-pVDZ-JKFIT). For heavier elements (i.e., second-row; and beyond), the RI auxiliary basis is unsound for this role; (insufficiently flexible). For SAPT0 in the SAPT; module, a workaround is to set DF_BASIS_ELST (which; controls Elst10 and Exch10 terms) to a JKFIT basis. For higher-order; methods in SAPT module, there is no workaround;; on-the-fly construction of an auxiliary basis through Cholesky; decomposition (not implemented) is the long-term solution. Spin-Flip SAPT¶; SAPT0 with two open-shell references will always yield a high-spin complex. In; order to obtain a SAPT-based estimate of the splittings between different spin; states of a complex the first-order exchange energies for all multiplets can be; shown to be a linear combination of two matrix elements: a diagonal exchange; term that determines the spin-ave",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/sapt-1.html:37540,perform,performs,37540,psi4manual/1.2.1/sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/sapt-1.html,8,['perform'],['performs']
Performance,"c. -6.69968912 [mEh] -4.20411857 [kcal/mol] -17.59003378 [kJ/mol]; Total SAPT2+ sc. -7.31030140 [mEh] -4.58728357 [kcal/mol] -19.19319632 [kJ/mol]; Total SAPT2+(3) sc. -6.98526650 [mEh] -4.38332109 [kcal/mol] -18.33981720 [kJ/mol]; Total SAPT2+3 sc. -7.15142168 [mEh] -4.48758504 [kcal/mol] -18.77605762 [kJ/mol]; --------------------------------------------------------------------------------------------------------. The scaling factor is reported at the top (here 1.0072) together with the; \(\alpha\) parameter. All terms that are scaled are indicated by the sc.; label. Note that if Exch10 is less than \(10^{-5}\), the scaling factor is; set to \(1.0\). Caution; To density fit the dispersion terms in SAPT, the RI auxiliary; basis set (e.g., aug-cc-pVDZ-RI) controlled through; DF_BASIS_SAPT performs well. For Fock-type terms (i.e.,; electrostatics, exchange, induction, and core Fock matrix elements in; exchange-dispersion), the density-fitting auxiliary basis in the; SAPT module (both SAPT0 and higher-order) is RI (more; efficient for the small basis sets at which SAPT0 performs best) while; the FISAPT module uses the more appropriate JKFIT; (e.g., aug-cc-pVDZ-JKFIT). For heavier elements (i.e., second-row; and beyond), the RI auxiliary basis is unsound for this role; (insufficiently flexible). For SAPT0 in the SAPT; module, a workaround is to set DF_BASIS_ELST (which; controls Elst10 and Exch10 terms) to a JKFIT basis. For higher-order; methods in SAPT module, there is no workaround;; on-the-fly construction of an auxiliary basis through Cholesky; decomposition (not implemented) is the long-term solution. table of contents. SAPT: Symmetry-Adapted Perturbation Theory; The S2 approximation and scaling; A First Example; Advanced example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; D_CONVERGENCE; E_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; NO_RESPONSE; EXCH_SCALE_ALPHA; INTS_TOLERANCE; DENOM",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/sapt-1.html:36708,perform,performs,36708,psi4manual/1.1.0/sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/sapt-1.html,2,['perform'],['performs']
Performance,"c. if func is None:; raise ManagedMethodError(['select_lccd', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_lccd_gradient(name, **kwargs):; """"""Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CC_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ. func = None; if reference in ['RHF', 'UHF']:; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient. if func is None:; raise ManagedMethodError(['select_lccd_gradient', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_olccd(name, **kwargs):; """"""Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CC_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ. func = None; if reference in ['RHF', 'UHF', 'ROHF', 'RKS', 'UKS']:; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc. if func is None:; raise ManagedMethodError(['select_olccd', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_olccd_gradient(name, **kwargs):; """"""Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CC_TYPE'); module = core.ge",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html:16466,perform,performance,16466,psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html,3,['perform'],['performance']
Performance,c.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbjatm. b3lyp-d3mzero2b. b3lyp-d3mzeroatm. b3lyp-d3opatm. b3lyp-d3zero2b. b3lyp-d3z,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html:3246,optimiz,optimized,3246,psi4manual/1.8.x/api/psi4.driver.opt.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.opt.html,3,['optimiz'],['optimized']
Performance,c.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbjatm. b3lyp-d3mzero2b. b3lyp-d3mzeroatm. b3lyp-d3zero2b. b3lyp-d3zeroatm. b3lyp-n,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/opt.html:3935,optimiz,optimized,3935,psi4manual/master/opt.html,https://psicode.org,https://psicode.org/psi4manual/master/opt.html,9,['optimiz'],['optimized']
Performance,"c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/testsuite-1.html:25123,perform,performing,25123,psi4manual/1.0.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/testsuite-1.html,4,['perform'],['performing']
Performance,"c3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Psithon Functions: Invoking a Calculation; Single-Point Energy — energy(). © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/energy.html:22535,perform,perform,22535,psi4manual/1.6.x/energy.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/energy.html,2,['perform'],['perform']
Performance,"c:occ_nonoo>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | ccsd | coupled cluster singles and doubles (CCSD) :ref:`[manual] <sec:cc>` :ref:`[details] <tlccsd>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | ccsd(t) | CCSD with perturbative triples (CCSD(T)) :ref:`[manual] <sec:cc>` :ref:`[details] <tlccsdt>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | eom-ccsd | equation of motion (EOM) CCSD :ref:`[manual] <sec:eomcc>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+. .. _`table:grad_scf`:. .. include:: autodoc_dft_opt.rst. .. include:: cfour_table_grad.rst. :examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Forced finite difference hf optimization run in; >>> # embarrassingly parallel fashion; >>> optimize('hf', dertype='energy', mode='sow'). """"""; kwargs = p4util.kwargs_lower(kwargs). if hasattr(name, '__call__'):; lowername = name; custom_gradient = True; else:; lowername = name.lower(); custom_gradient = False. return_wfn = kwargs.pop('return_wfn', False). # For CBS wrapper, need to set retention on INTCO file; if custom_gradient or ('/' in lowername):; psi4.IOManager.shared_object().set_specific_retention(1, True). if kwargs.get('bsse_type', None) is not None:; raise ValidationError(""Optimize: Does not currently support 'bsse_type' arguements""). full_hess_every = psi4.get_option('OPTKING', 'FULL_HESS_EVERY'); steps_since_last_hessian = 0. if custom_gradient and psi4.has_option_changed(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver.html:54532,optimiz,optimization,54532,psi4manual/1.0.0/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver.html,2,['optimiz'],"['optimization', 'optimize']"
Performance,"c; positions (current default), linear combinations of; atomic positions, or located on the principal axes (not yet working). Basic Keywords¶. OPT_TYPE¶. Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. STEP_TYPE¶. Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. GEOM_MAXITER¶. Maximum number of geometry optimization steps. Type: integer; Default: 50. G_CONVERGENCE¶. Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. INTCOS_GENERATE_EXIT¶. Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. Optimizing Minima¶; First, define the molecule and basis in the input.; 1; 2; 3; 4; 5; 6; 7molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; 1optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; 1; 2set step_type nr; optimize('scf'). Optimize using energy points instead of gradients:; 1optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; 1; 2set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the ste",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/optking-1.html:3627,optimiz,optimization,3627,psi4manual/1.1.0/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/optking-1.html,2,['optimiz'],['optimization']
Performance,"c; positions (current default), linear combinations of; atomic positions, or located on the principal axes (not yet working). Basic Keywords¶. OPT_TYPE¶. Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. STEP_TYPE¶. Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. GEOM_MAXITER¶. Maximum number of geometry optimization steps. Type: integer; Default: 50. G_CONVERGENCE¶. Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. INTCOS_GENERATE_EXIT¶. Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. Optimizing Minima¶; First, define the molecule and basis in the input.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; set step_type nr; optimize('scf'). Optimize using energy points instead of gradients:; optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:; set {; int",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/optking-1.html:3627,optimiz,optimization,3627,psi4manual/4.0b4/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/optking-1.html,6,['optimiz'],['optimization']
Performance,"c>` |; +-------------------------+---------------------------------------------------------------------------------------+; | eom-ccsd | equation of motion (EOM) CCSD :ref:`[manual] <sec:eomcc>` |; +-------------------------+---------------------------------------------------------------------------------------+. .. include:: autodoc_dft_opt.rst. .. warning:: Optimizations where the molecule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/driver.html:49338,perform,performs,49338,psi4manual/4.0b4/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html,1,['perform'],['performs']
Performance,"c_diis', True). # By default, use the neutral orbitals as a guess for the anion; neutral_guess = kwargs.get('neutral_guess', True). # By default, burn-in with UHF first, if UKS; hf_guess = False; if core.get_local_option('SCF', 'REFERENCE') == 'UKS':; hf_guess = kwargs.get('hf_guess', True). # By default, re-guess at each N; continuous_guess = kwargs.get('continuous_guess', False). # By default, drop the files to the molecule's name; root = kwargs.get('filename', molecule.name()); traverse_filename = root + '.traverse.dat'; # => Traverse <= #; occs = []; energies = []; potentials = []; convs = []. # => Run the neutral for its orbitals, if requested <= #. core.set_local_option(""SCF"", ""DF_INTS_IO"", ""SAVE""). old_guess = core.get_local_option(""SCF"", ""GUESS""); if (neutral_guess):; if (hf_guess):; core.set_local_option(""SCF"", ""REFERENCE"", ""UHF""); driver.energy('scf', dft_functional=name, molecule=molecule, **kwargs); core.set_local_option(""SCF"", ""GUESS"", ""READ""); core.set_local_option(""SCF"", ""DF_INTS_IO"", ""LOAD""). # => Run the anion first <= #. molecule.set_molecular_charge(chargem); molecule.set_multiplicity(multm). # => Burn the anion in with hf, if requested <= #; if hf_guess:; core.set_local_option(""SCF"", ""REFERENCE"",""UHF""); driver.energy('scf', dft_functional=name, molecule=molecule, **kwargs); core.set_local_option(""SCF"", ""REFERENCE"", ""UKS""); core.set_local_option(""SCF"", ""GUESS"", ""READ""); core.set_local_option(""SCF"", ""DF_INTS_IO"", ""SAVE""). core.set_local_option(""SCF"", ""FRAC_START"", frac_start); core.set_local_option(""SCF"", ""FRAC_RENORMALIZE"", True); # NYI core.set_local_option(""SCF"", ""FRAC_LOAD"", False). for occ in LUMO_occs:. core.set_local_option(""SCF"", ""FRAC_OCC"", [LUMO]); core.set_local_option(""SCF"", ""FRAC_VAL"", [occ]). E, wfn = driver.energy('scf', dft_functional=name, return_wfn=True, molecule=molecule, **kwargs); C = 1; if E == 0.0:; E = core.variable('SCF ITERATION ENERGY'); C = 0. if LUMO > 0:; eps = wfn.epsilon_a(); potentials.append(eps.get(int(LUMO) - 1)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/frac.html:5564,LOAD,LOAD,5564,psi4manual/1.7.x/_modules/psi4/driver/frac.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/frac.html,4,['LOAD'],['LOAD']
Performance,"cal MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:6855,CACHE,CACHELEVEL,6855,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,6,"['CACHE', 'cache', 'perform']","['CACHELEVEL', 'cacheing', 'perform']"
Performance,"cal with user-specified basis and properties for particular root. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. cbs-xtpl-energy; Extrapolated water energies. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/testsuite-1.html:16649,optimiz,optimization,16649,psi4manual/1.0.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/testsuite-1.html,4,['optimiz'],['optimization']
Performance,"cal/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. sapt10; usapt example with empty beta due to frozen core. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cbs-xtpl-dict; Extrapolated water energies. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. dfremp-1; density fitted REMP/cc-pVDZ energies for the CO2 molecule. fci-dipole; 6-31G H2O Test FCI Energy Point. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. linK-1; RHF Linear Exchange Algorithm test for water. stability3; Test LDA stability analysis against QChem. freq-isotope2; Vibrational and thermo analysis of several water ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:11145,optimiz,optimization,11145,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimization']
Performance,calar_variable; set_variable; ShellInfo; Slice; SOBasisSet; SOMCSCF; SuperFunctional; SymmetryOperation; test_matrix_dpd_interface; ThreeCenterOverlapInt; timer_off; timer_on; TLaplaceDenominator; TracelessQuadrupoleInt; triplet; tstart; tstop; TwoBodyAOInt; TwoElectronInt; UHF; UKSFunctions; variable; variables; VBase; Vector; Vector3; version; Wavefunction; activate; AtomicComputer; banner; basis_helper; cbs; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; ConvergenceError; copy_file_from_scratch; copy_file_to_scratch; create_plugin; cubeprop; docs_table_link; dynamic_variable_bind; EmpiricalDispersion; energies_from_fcidump; energy; fchk; fcidump; fcidump_from_file; find_approximate_string_matches; freq; frequencies; frequency; gdma; geometry; get_memory; gradient; hessian; ipi_broker; levenshtein; libint2_configuration; libint2_print_out; ManagedMethodError; mdi_run; message_box; MissingMethodError; molden; molecule_get_attr; molecule_set_attr; oeprop; opt; OptimizationConvergenceError; optimize; optimize_geometric; all_casings; array_to_matrix; banner; basis_helper; block_diagonal_array; cg_solver; compare_fchkfiles; compare_fcidumps; compare_moldenfiles; copy_file_from_scratch; copy_file_to_scratch; cubeprop; davidson_solver; DIIS; docs_table_link; drop_duplicates; energies_from_fcidump; expand_psivars; fcidump; fcidump_from_file; find_approximate_string_matches; format_molecule_for_input; format_options_for_input; free_atom_volumes; Gaussian; get_memory; get_psifile; getattr_ignorecase; hamiltonian_solver; hold_options_state; import_ignorecase; InPsight; kwargs_lower; levenshtein; libint2_configuration; libint2_print_out; Lineshape; Lorentzian; mat2arr; message_box; oeprop; OptionsState; OptionsStateCM; OptionState; pcm_helper; plump_qcvar; prefactor_ecd; prefactor_opa; prepare_options_for_modules; prepare_options_for_set_options; provenance_stamp; sanitize_method; set_memory; set_module_options; set_options; SolverEngine; spectrum; state_to_atomicin,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:823464,Optimiz,OptimizationConvergenceError,823464,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,5,['Optimiz'],['OptimizationConvergenceError']
Performance,"calculation in; the PSI variable DISPERSION CORRECTION ENERGY.; By default, the output from the dftd3; program is suppressed; to see it in the output file, set print > 2. Variants of S. Grimme’s -D correction. Extension [1]; Variant and Computing Program; DFT_DISPERSION_PARAMETERS. -D; alias to -D2P4;  . -D1; -D1 [2] within PSI4;  . -D2; alias to -D2P4;  . -D2P4; -D2 [3] within PSI4; []. -D2GR; -D2 [3] through dftd3; [, ]. -D3; alias to -D3ZERO;  . -D3ZERO; -D3 [4] w/ original zero-damping through dftd3; [, , , ]. -D3BJ; -D3 [5] w/ newer Becke-Johnson rational damping through dftd3; [, , , ]. Footnotes. [1]Note that there are functionals with these extensions (e.g., wB97X-D) that,; not being Grimme corrections, have nothing to do with this table. [2][Grimme:2004:1463]. [3](1, 2) [Grimme:2006:1787]. [4][Grimme:2010:154104]. [5][Grimme:2011:1456]. A few practical examples:. DFT-D2 single point with default parameters (dftd3 not called); energy('bp86-d'). DFT-D3BJ optimization with default parameters; optimize('pbe-d3bj'). DFT-D2 optimization with custom s6 parameter; set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values); set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). If only dispersion corrections (rather than total energies) are of; interest, the dftd3 program can be run independently of the scf; through the python function run_dftd3(). (This function; is the same PSI4/dftd3 interface that is called during an scf job.); This route is much faster than running a DFT-D energy. Some set-up:; molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). The same four dispersion corrections/gradients as the section above:; >>> print nene.run_dftd3('bp86', 'd', dertype=0); -7.735e-05. >>> E, G = nene.run_dftd3('pbe', 'd3bj'); >>> print G; [[0.0, 0.0, -1.1809087569358e-05], [0.0, 0.0, 1.1809087569358e-05]]. >>> E, G = nene.run_dftd3('b3lyp', 'd2', {'s6': 1.20}); >>> ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/dftd3.html:5273,optimiz,optimization,5273,psi4manual/4.0b3/dftd3.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dftd3.html,10,['optimiz'],"['optimization', 'optimize']"
Performance,"calculation through libfock, namely RCPHF,; RCIS, RTDHF, RTDA, and RTDDFT. run_mcscf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a multiconfigurational self-consistent-field calculation. run_mrcc(name, **kwargs)[source]¶; Function that prepares environment and input files; for a calculation calling Kallay’s MRCC code. run_occ(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a conventional integral (O)MPN computation. run_occ_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a conventional integral (O)MPN computation. run_psimrcc(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the MCSCF module. run_psimrcc_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for a PSIMRCC computation; using a reference from the SCF module. run_qchf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; an density-fitted orbital-optimized MP2 computation. run_sapt(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SAPT calculation of any level. run_sapt_ct(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a charge-transfer SAPT calcuation of any level. run_scf(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a self-consistent-field theory (HF & DFT) calculation. run_scf_gradient(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; a SCF gradient calculation. run_scf_property(name, **kwargs)[source]¶; Function encoding sequence of PSI module calls for; SCF calculations. This is a simple alias to run_scf(); since SCF properties all handled through oeprop. scf_helper(name, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:165293,optimiz,optimized,165293,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['optimiz'],['optimized']
Performance,"caled MP2 (SCS-MP2)?. Type: boolean; Default: false. SEMICANONICAL¶. Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. T2_COUPLED¶. Type: boolean; Default: false. T3_WS_INCORE¶. Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. Expert¶. AO_BASIS¶. The algorithm to use for the \(\left\langle VV||VV\right\rangle\) terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. FORCE_RESTART¶. Do restart the coupled-cluster iterations even if MO phases are screwed up?. Type: boolean; Default: false. WFN¶. Wavefunction type. Type: string; Default: NONE. table of contents. CCENERGY; General; ABCD; ANALYZE; BCCD_MAXITER; BRUECKNER_ORBS_R_CONVERGENCE; CACHELEVEL; CACHETYPE; CC_NUM_THREADS; CC_OS_SCALE; CC_SS_SCALE; DIIS; E_CONVERGENCE; LOCAL; LOCAL_CPHF_CUTOFF; LOCAL_CUTOFF; LOCAL_METHOD; LOCAL_PAIRDEF; LOCAL_WEAKP; MAXITER; MP2_AMPS_PRINT; MP2_OS_SCALE; MP2_SS_SCALE; NEW_TRIPLES; NUM_AMPS_PRINT; PAIR_ENERGIES_PRINT; PROPERTY; REFERENCE; RESTART; R_CONVERGENCE; SCSN_MP2; SCS_CCSD; SCS_MP2; SEMICANONICAL; T2_COUPLED; T3_WS_INCORE. Expert; AO_BASIS; FORCE_RESTART; WFN. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Appendices; Keywords by Module; CCENERGY. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__ccenergy.html:6676,CACHE,CACHELEVEL,6676,psi4manual/1.6.x/autodir_options_c/module__ccenergy.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__ccenergy.html,2,['CACHE'],"['CACHELEVEL', 'CACHETYPE']"
Performance,"can be directly specified through INTERFRAG_COORDS); See here <DimerSection_> for two examples of their use. Basic Keywords¶. OPT_TYPE¶. Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. STEP_TYPE¶. Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, P_RFO, NR, SD, LINESEARCH; Default: RFO. GEOM_MAXITER¶. Maximum number of geometry optimization steps. Type: integer; Default: 50. G_CONVERGENCE¶. Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. Optimizing Minima¶; First, define the molecule and basis in the input.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; set step_type nr; optimize('scf'). Optimize using finite differences of energies instead of gradients:; optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/optking.html:3171,optimiz,optimization,3171,psi4manual/1.7.x/optking.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/optking.html,3,['optimiz'],['optimization']
Performance,"cartesian coordinates, bonds, angles, and dihedrals, and they can be; used to either freeze a coordinate or set it to a specific value. See the GeomeTRIC github; for more information on keywords and JSON specification of constraints. Optimize the water molecule using GeomeTRIC:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; maxiter 100; g_convergence gau; }. optimize('hf/cc-pvdz', engine='geometric'). Optimize the water molecule using GeomeTRIC, with one of the two OH bonds constrained to 2.0 au; and the HOH angle constrained to 104.5 degrees:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; maxiter 100; g_convergence gau; }. geometric_keywords = {; 'coordsys' : 'tric',; 'constraints' : {; 'set' : [{'type' : 'distance',; 'indices' : [0, 1],; 'value' : 2.0 },; {'type' : 'angle',; 'indices' : [1, 0, 2],; 'value' : 104.5 }]; }; }. optimize('hf/cc-pvdz', engine='geometric', optimizer_keywords=geometric_keywords). Optimize the benzene/water dimer using GeomeTRIC, with the 6 carbon atoms of benzene frozen in; place:; molecule h2o {; C 0.833 1.221 -0.504; H 1.482 2.086 -0.518; C 1.379 -0.055 -0.486; H 2.453 -0.184 -0.483; C 0.546 -1.167 -0.474; H 0.971 -2.162 -0.466; C -0.833 -1.001 -0.475; H -1.482 -1.867 -0.468; C -1.379 0.275 -0.490; H -2.453 0.404 -0.491; C -0.546 1.386 -0.506; H -0.971 2.381 -0.524; --; O 0.000 0.147 3.265; H 0.000 -0.505 2.581; H 0.000 0.965 2.790; no_com; no_reorient; }. set {; maxiter 100; g_convergence gau; }. geometric_keywords = {; 'coordsys' : 'tric',; 'constraints' : {; 'freeze' : [{'type' : 'xyz',; 'indices' : [0, 2, 4, 6, 8, 10]}]; }; }. optimize('hf/cc-pvdz', engine='geometric', optimizer_keywords=geometric_keywords). Output¶; The progress of a geometry optimization can be monitored by grepping the output file for the; tilde character (~). This produces a table like the one below that shows; for each iteration the value for each of the five quantities and whether the criterion; is active and fulfilled (*), active and unfulfil",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/optking.html:23274,Optimiz,Optimize,23274,psi4manual/master/optking.html,https://psicode.org,https://psicode.org/psi4manual/master/optking.html,9,['Optimiz'],['Optimize']
Performance,"cation.; #! Sample UHF/6-31G** CH2 computation. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). This sample input can be found in; tu2-ch2-energy and as; before it can be run through the command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; @UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/tutorial.html:5459,Optimiz,Optimization,5459,psi4manual/master/tutorial.html,https://psicode.org,https://psicode.org/psi4manual/master/tutorial.html,9,['Optimiz'],['Optimization']
Performance,"cations resulting from the use of the MP3 code should cite the following publications:; [Bozkaya:2011:omp3] and [Bozkaya:2013:omp3].; Publications resulting from the use of the MP2.5 code should cite the following publications:; [Bozkaya:2011:omp3] and [Bozkaya:2013:omp3].; Publications resulting from the use of the CEPA0 code should cite the following publication(s):; [Bozkaya:2011:omp2]. Convergence Problems¶; For problematic open-shell systems, we recommend to use the ROHF or DFT orbitals as an initial guess for orbital-optimized methods. Both ROHF and; DFT orbitals generally provide much better initial guesses than UHF orbitals, hence convergence may be significantly speeded up with ROHF or DFT orbitals.; In order to use ROHF orbitals we can simply use “reference rohf” option. For DFT orbitals one should use “reference uks” and “dft_functional b3lyp” options. Of; course users can use any DFT functional available in Psi4. Methods¶; The conventional and orbital-optimized MP2 methods currently supported in PSI4 are outlined in Table OMP2 Methods. Name; Calls Method; Energy; Gradient; Reference. conv-mp2; MP2; Y; Y; RHF/ROHF/UHF. omp2; Orbital-Optimized MP2; Y; Y; RHF/ROHF/UHF/RKS/UKS. scs-omp2; Spin-Component Scaled Orbital-Optimized MP2; Y; N; RHF/ROHF/UHF/RKS/UKS. sos-omp2; Spin-Opposite Scaled Orbital-Optimized MP2; Y; N; RHF/ROHF/UHF/RKS/UKS. scsn-omp2; A special version of SCS-OMP2 for nucleobase interactions; Y; N; RHF/ROHF/UHF/RKS/UKS. scs-omp2-vdw; A special version of SCS-OMP2 (from ethene dimers); Y; N; RHF/ROHF/UHF/RKS/UKS. sos-pi-omp2; A special version of SOS-OMP2 for -systems; Y; N; RHF/ROHF/UHF/RKS/UKS. The conventional and orbital-optimized MP3 methods currently supported in PSI4 are outlined in Table OMP3 Methods. Name; Calls Method; Energy; Gradient; Reference. mp3; MP3; Y; Y; RHF/UHF. omp3; Orbital-Optimized MP3; Y; Y; RHF/ROHF/UHF/RKS/UKS. scs-omp3; Spin-Component Scaled Orbital-Optimized MP3; Y; N; RHF/ROHF/UHF/RKS/UKS. sos-omp3; Spin-Opposite S",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/occ-1.html:5804,optimiz,optimized,5804,psi4manual/4.0b5/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/occ-1.html,2,['optimiz'],['optimized']
Performance,"cause they perform efficiently for common, representative test sets.; More restrictive, cautious steps are sometimes necessary.; DYNAMIC_LEVEL allows optking to change the method of optimization; toward algorithms that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps.; The developers have found the OPT_COORDINATES set to “BOTH” which; includes both the redundant internal coordinate set, as well as cartesian coordinates,; works well for systems with long ‘arms’ or floppy portions of a molecule poorly; described by local internals. Direct manipulation of the optmization coordinates¶. Generate the internal coordinates and then stop:; set intcos_generate_exit true; optimize('scf'). The coordinates may then be found in the “intco” file. In this case, the file contains:; F 1 3; R 1 2; R 1 3; B 2 1 3; C 1; 1 1.000000; C 1; 2 1.000000; C 1; 3 1.000000. The first line indicates a fragment containing atoms 1-3. The following lines define; two distance coordinates (bonds) and one bend coordinate. This file can be modified, and if present,; is used in subsequent optimizations. The lines below the simple internal coordinates; specify linear combinations of coordinates. In the simplest default case, the lines; above simply define combination coordinates which are identical to the simple internals.; If OPT_COORDINATES specifies delocalized coordinates, then the combinations; will be more complex.; Since the multiple-fragment coordinates are still under; development, they are not documented here. However, if desired, one can change the value; of FRAG_MODE, generate the internal coordinates, and see how multiple; fragment syst",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/optking-1.html:9208,optimiz,optimize,9208,psi4manual/1.4.0/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/optking-1.html,7,['optimiz'],['optimize']
Performance,"cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme='corl_xtpl_helgaker_2', func=cbs). table of contents. cbs; cbs(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html:14603,optimiz,optimize,14603,psi4manual/1.8.x/api/psi4.driver.cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.driver.cbs.html,2,['optimiz'],['optimize']
Performance,"cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme='corl_xtpl_helgaker_2', func=cbs). table of contents. cbs; cbs(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/api/psi4.driver.cbs.html:14603,optimiz,optimize,14603,psi4manual/1.9.x/api/psi4.driver.cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/api/psi4.driver.cbs.html,2,['optimiz'],['optimize']
Performance,"cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. scf-coverage; Lithium test for coverage. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. cbs-parser; mtd/basis syntax examples. casscf-fzc-sp; CASSCF/6-31G** energy point. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. cbs-xtpl-func; optimization with method defined via cbs. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cbs-xtpl-energy; Extrapolated water energies - density-fitted version. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:5151,optimiz,optimization,5151,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimization']
Performance,"cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. dfccsdat2; DF-A-CCSD(T) cc-pVDZ energy for the NH molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. mp2-h; check that methods can act on single atom. nbody-he-4b; MP2/aug-cc-pvDZ many body energies of an arbitrary Helium complex, addressing 4-body formulas. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. ao-dfcasscf-sp; CASSCF/6-31G** energy point. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mints2; A t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:26674,optimiz,optimization,26674,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimization']
Performance,"cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt10; usapt example with empty beta due to frozen core. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. scf-guess-read2; Test if the the guess read in the same basis converges. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. pywrap-checkrun-rhf; This ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:1869,optimiz,optimization,1869,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,8,['optimiz'],"['optimization', 'optimized']"
Performance,"cc-pVTZ-RI auxilliary basis. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. casscf-sp; CASSCF/6-31G** energy point. dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). nbody-multi-level-2; many-body different levels of theory on each body of helium tetramer. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. fci-h2o-2; 6-31G H2O Test FCI Energy Point. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. nbody-he-4b; MP2/aug-cc-pvDZ many body energies of an arbitrary Helium complex, addressing 4-body formulas. sapt10; usapt example with empty beta due to frozen core. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. sapt2; SA",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:6312,optimiz,optimization,6312,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,4,['optimiz'],"['optimization', 'optimized']"
Performance,"cc3; Test FNO-QCISD(T) computation. tu4-h2o-freq; Frequencies for H2O HF/cc-pVDZ at optimized geometry. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. mints3; Test individual integral objects for correctness. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-fd-freq1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. rasci-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html:14365,optimiz,optimization,14365,psi4manual/4.0b4/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html,8,['optimiz'],['optimization']
Performance,"cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dft2; DFT Functional Test. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). dft1; DFT Functional Test. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. pywrap-cbs1; Various basis set extrapolation tests. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. dcft5; DCFT-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. opt2; SCF DZ allene geometry optimzation, with Cartesian input. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc54; CCSD dipole with user-specified basis set. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dft3; DFT in",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/testsuite-1.html:9510,optimiz,optimize,9510,psi4manual/4.0b3/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/testsuite-1.html,4,['optimiz'],['optimize']
Performance,"cc5; Test FNO-DF-CCSD(T) energy. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cbs-xtpl-energy; Extrapolated water energies. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. dft-reference; MP2 with a PBE0 reference computation. mbis-1; MBIS calculation on H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. cbs-xtpl-func; optimization with method defined via cbs. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:40285,perform,performs,40285,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['perform'],['performs']
Performance,"cc>` |; +-------------------------+---------------------------------------------------------------------------------------+; | eom-ccsd | equation of motion (EOM) CCSD :ref:`[manual] <sec:eomcc>` |; +-------------------------+---------------------------------------------------------------------------------------+. .. include:: autodoc_dft_opt.rst. .. warning:: Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. :type name: string; :param name: ``'scf'`` || ``'df-mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`~driver.energy`. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file (``'continuous'``) or are to be; farmed out in an embarrassingly parallel fashion; (``'sow'``/``'reap'``). For the latter, run an initial job with; ``'sow'`` and follow instructions in its output file. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available) or finite difference; optimization is to be performed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Analytic scf",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/driver.html:49581,perform,performs,49581,psi4manual/4.0b5/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/driver.html,1,['perform'],['performs']
Performance,"ccessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file.; __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section). doc.rst — Documentation file. Place in this file any notes,; equations, warnings to users, todo lists, etc.. Plain text is fine,; though reStructuredText is the ultimate goal. Remove the .. comment; text and build Sphinx documentation for samples of linking keywords,; sections, and math. This file is absorbed into the PSI4; documentation, along with any docstrings to Python functions, and the C++; keywords block in the myplugin.cc file. See Updating the Users’ and Programmers’ Manual; for building documentation. Please note that pure virtual functions in a plugin may cause undefined symbols errors when; the plugin is loaded.; To create a purely Python plugin, create a new plugin directory, then; remove the Makefile and myplugin.cc files and; erase the shared object loading portion of __init__.py. Create as many .py; files as necessary (registering each one in __init__.py), use; input.dat as a model for loading the plugin, no recompile ever; necessary. table of contents. Creating New Plugins; Modular Approach to Development; Creating a New Plugin; Creating a New Plugin Using a Conda Pre-compiled Binary; Files in a Plugin Directory. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Adding New Code to PSI4; Creating New Plugins. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/plugins.html:7974,load,loaded,7974,psi4manual/master/plugins.html,https://psicode.org,https://psicode.org/psi4manual/master/plugins.html,3,['load'],"['loaded', 'loading']"
Performance,"ce for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. IP_POLES¶. Do compute OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. LEVEL_SHIFT¶. Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 0.02. MAX_MOGRAD_CONVERGENCE¶. Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, OCC will estimate and use a value required to achieve the desired E_CONVERGENCE The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. MOGRAD_DAMPING¶. Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MO_MAXITER¶. Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ¶. Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_STEP_MAX¶. Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE¶. Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MP2_OS_SCALE¶. Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 6.0. MP2_SOS_SCALE¶. Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. MP2_SOS_SCALE2¶. Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.2. MP2_SS_SCALE¶. Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. NAT_ORBS¶. Do compute natural orbitals?. Type: boolean; Default: false. OCC_ORBS_PRINT¶. Do print OCC orbital energies?. Type: boolean; Default: false. OEPROP¶. Do compute one electron properties?. Type: boolean; Default: false. OPT_METHOD¶. The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation paramete",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__occ.html:4003,optimiz,optimization,4003,psi4manual/1.7.x/autodir_options_c/module__occ.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__occ.html,4,['optimiz'],['optimization']
Performance,"ce scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Opt",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:26048,optimiz,optimizations,26048,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,4,['optimiz'],['optimizations']
Performance,"ce to CPPE by M. Scheurer; Interface to DFTD3 by S. Grimme; Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; Interface to LIBEFP by I. Kaliman; Interface to ERD by N. Flocke and V. Lotrich; Interface to programs through FCHK files — fchk(); Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; Interface to gau2grid by D. G. A. Smith; Interface to gCP by S. Grimme; Interface to GDMA Distributed Multipole Analysis by A. J. Stone — gdma(); Interface to Libint by E. Valeev; Interface to Molden — molden(); Interface to MRCC by M. Kállay; Interface to PCMSolver by R. Di Remigio; Interface to SIMINT by B. Pritchard; Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; Plugin v2rdm_casscf by A. E. DePrince; Interface to Libxc by M. A. L. Marques. Psithon Functions: Invoking a Calculation; Notes on Options; Single-Point Energy — energy(); Property; Basis Set Superposition Corrections; Geometry Optimization — optimize() and gradient(); Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); Database — database(); Complete Basis Set; Spectroscopic Constants for Diatomics; Function Intercalls; Embarrassing Parallelism; Generation of Cube Files — cubeprop(); Orbital Visualization with VMD. Customization: Adding Simple Extensions; Defining a Method Alias; Creating a Database. Appendices; Keywords; Keywords by Alpha; Keywords by Module. Basis Sets; Basis Sets by Family; Basis Sets by Element; Auxiliary Basis Sets. PSI Variables; PSI Variables by Alpha; PSI Variables by Module. Miscellaneous; Test Suite and Sample Inputs; DFT Functionals; PSIOH Intermediate Files; Physical Constants; Bibliography. Programmers’ Manual¶. Introduction to Programming in PSI4; Welcome to New Programmers; Community Code of Conduct; Setting Up Your Development Environment; General layout of the core: where new C++ code should live; Where to Get Help. Adding New Code to PSI4; Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Creating New Plugins; Integra",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/index.html:2942,Optimiz,Optimization,2942,psi4manual/1.4.0/index.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/index.html,4,"['Optimiz', 'optimiz']","['Optimization', 'optimize']"
Performance,"ce to MRCC by M. Kállay. Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC, Samples; PSI4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (https://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by PSI4, ensure that the program binary (dmrcc) can be; found in your PATH. If PSI4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in PSI4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs PSI4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, PSI4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC.; Perturbative methods (ccsd(t), ccsdtqp(h)_l, etc.); are available with REFERENCE ROHF in versions of MRCC published; at least after July 1, 2014.; When using ROHF-CCSDT(Q), MRCC will compute and report two variants:; CCSDT(Q)/A and CCSDT(Q)/B. [Kallay:2008:144101] PSI4 will save both energies but will use; the CCSDT(Q)/B as the CCSDT(Q) energy. CCSDT(Q)/B has been found to be; more robust by Martin. [Martin:2014:785]. name; cal",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/mrcc-1.html:1144,perform,perform,1144,psi4manual/1.4.0/mrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/mrcc-1.html,5,['perform'],['perform']
Performance,"ce; is reached, the following could be placed in the Psi4 input file.; energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. run_cfour(name[, keep, path])[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated file constants accessible as P4C4_INFO['zmat'], P4C4_INFO['output'], P4C4_INFO['grd'], etc. Parameters:; name (string) – 'c4-scf' || 'c4-ccsd(t)' || 'cfour' || etc.; First argument, usually unlabeled. Indicates the computational; method to be applied to the system. keep (boolean) – 'on' || 'off' ; Indicates whether to delete the Cfour scratch directory upon; completion of the Cfour job. path (string) – Indicates path to Cfour scratch directory (with respect to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (string) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unne",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cfour-1.html:23764,optimiz,optimize,23764,psi4manual/1.0.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cfour-1.html,2,['optimiz'],['optimize']
Performance,"ce]¶; Find maximum n in Cn around given axis, i.e., the highest-order rotation axis.; @param coord Matrix : points to rotate - column dim is 3; @param axis Vector3 : axis around which to rotate, does not need to be normalized; @param bool reflect : if true, really look for Sn not Cn; @returns n. Stuff stolen from psi. Should import or not as necessary; or some better way. Apologies to the coders. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:96189,Perform,Performs,96189,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['Perform'],['Performs']
Performance,"ception.__init__(self, msg); core.print_out('\nPsiException: %s\n\n' % (msg)). [docs]; class ConvergenceError(PsiException):; """"""Error called for problems with converging an iterative method. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF, optimization).; iteration; Iteration number on which routine failed.; additional_info; Any additional message to convey. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed. """"""; message: str; iteration: int. def __init__(self, eqn_description: str, iteration: int, additional_info: Optional[str] = None):; msg = f""Could not converge {eqn_description:s} in {iteration:d} iterations.""; if additional_info is not None:; msg += f""\n\n{additional_info}""; PsiException.__init__(self, msg); self.iteration = iteration; self.message = msg; core.print_out(f'\nPsiException: {msg:s}\n\n'). [docs]; class OptimizationConvergenceError(ConvergenceError):; """"""Error called for problems with geometry optimizer. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., geometry optimization).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. Attributes; ----------; message; Human readable string describing the exception.; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception. """"""; message: str; iteration: int; wfn: core.Wavefunction. def __init__(self, eqn_description: str, iteration: int, wfn: core.Wavefunction):; ConvergenceError.__init__(self, eqn_description, iteration); self.wfn = wfn. [docs]; class SCFConvergenceError(ConvergenceError):; """"""Error called for problems with SCF iterations. Parameters; ----------; eqn_description; Type of QC routine that has failed (e.g., SCF preiterations).; iteration; Iteration number on which routine failed.; wfn; Wavefunction at time of exception.; e_conv; Change in energy for last iterati",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html:5813,Optimiz,OptimizationConvergenceError,5813,psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,6,"['Optimiz', 'optimiz']","['OptimizationConvergenceError', 'optimizer']"
Performance,"certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC); OCC — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (STABILITY); STABILITY —. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:9838,CACHE,CACHELEVEL,9838,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,4,"['CACHE', 'Cache']","['CACHELEVEL', 'Cacheing']"
Performance,"certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (STABILITY); STABILITY —. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM); CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CACHETYPE (MP2); MP2 — The criterion used to retain/release cached data. Type: string; Possible Values: LRU, LOW; Default: LRU. CANONICALIZE_ACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF); MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING); OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CAS_FILES_WRITE (CLAG); CLAG — Do write the OEI, TEI, OPDM, TPDM, and Lagrangian files in canonical form, Pitzer order?. Type: boolean; Default: false. CC (DETCI); DETCI — Do coupled-cluster computation?. Type: boolean; Default: false. CC3_FOLLOW_ROOT (CCEOM); CCEOM — Do turn on root following for CC3. Type: boolean; Default: false. CC_A_RAS3_MAX (DETCI); DETCI — maximum number of alpha electrons in RAS III, for CC. Type: int",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:11080,CACHE,CACHETYPE,11080,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,4,"['CACHE', 'cache']","['CACHETYPE', 'cached']"
Performance,"ces even when; max force and/or rms force are small. For ultimate control, specifying a value for any of the five monitored options activates that; criterium and overwrites/appends it to the criteria set by G_CONVERGENCE.; Note that this revokes the special convergence arrangements detailed in notes 5 and 6; and instead requires all active criteria to be fulfilled to; achieve convergence. To avoid this revokation, turn on keyword FLEXIBLE_G_CONVERGENCE. Interface to GeomeTRIC¶; The GeomeTRIC optimizer developed by Wang and Song [Wang:2016:214108] may be used in place of; Psi4’s native Optking optimizer. GeomeTRIC uses a translation-rotation-internal coordinate (TRIC); system that works well for optimizing geometries of systems containing noncovalent interactions.; Use of the GeomeTRIC optimizer is specified with the engine argument to; optimize(). The optimization will respect the keywords G_CONVERGENCE; and GEOM_MAXITER. Any other GeomeTRIC-specific options (including constraints); may be specified with the optimizer_keywords argument to optimize().; Constraints may be placed on cartesian coordinates, bonds, angles, and dihedrals, and they can be; used to either freeze a coordinate or set it to a specific value. See the GeomeTRIC github; for more information on keywords and JSON specification of constraints. Optimize the water molecule using GeomeTRIC:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; maxiter 100; g_convergence gau; }. optimize('hf/cc-pvdz', engine='geometric'). Optimize the water molecule using GeomeTRIC, with one of the two OH bonds constrained to 2.0 au; and the HOH angle constrained to 104.5 degrees:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; maxiter 100; g_convergence gau; }. geometric_keywords = {; 'coordsys' : 'tric',; 'constraints' : {; 'set' : [{'type' : 'distance',; 'indices' : [0, 1],; 'value' : 2.0 },; {'type' : 'angle',; 'indices' : [1, 0, 2],; 'value' : 104.5 }]; }; }. optimize('hf/cc-pvdz', engine='geometric', optim",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/optking-1.html:14445,optimiz,optimize,14445,psi4manual/1.4.0/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/optking-1.html,5,['optimiz'],['optimize']
Performance,"ces of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:3155,perform,performed,3155,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['perform'],['performed']
Performance,"ces »; Keywords by Module ». CCENERGY¶; Performs local MP2 computations for RHF reference functions. General¶. ABCD¶. Type of ABCD algorithm will be used. Type: string; Possible Values: NEW, OLD; Default: NEW. ANALYZE¶. Do analyze T2 amplitudes. Type: boolean; Default: false. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CC_NUM_THREADS¶. Number of threads. Type: integer; Default: 1. CC_OS_SCALE¶. Coupled-cluster opposite-spin scaling value. Type: double; Default: 1.27. CC_SS_SCALE¶. Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. DF_BASIS_MP2¶. Auxiliary basis set for MP2 density fitting calculations. Type: string; Possible Values: basis string; Default: No Default. DF_LMP2¶. Do use density fitting? Turned on with specification of fitting basis. Type: boolean; Default: true. DIAG_METHOD¶. Diagonalization method for the CI matrix. Type: string; Possible Values: DAVIDSON, FULL; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__ccenergy-1.html:1126,CACHE,CACHETYPE,1126,psi4manual/4.0b5/autodir_options_c/module__ccenergy-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__ccenergy-1.html,2,['CACHE'],['CACHETYPE']
Performance,"cessible through the handle option_molecule_name in; molecule optional_molecule_name {...}. The molecular geometry can be got and set and manipulated as a; psi4.Matrix object. Below shows how to access; coordinates in an input file in Python.; molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms as Python array. geom2psi = psi4.Matrix(4, 3) # initialize psi4.Matrix; geom2psi.set(geom2py) # load Python array into psi4.Matrix; geom2psi.scale(1.0/psi_bohr2angstroms) # scale into bohr; geom2psi.print_out() # print alternate coord array to output file. formaldehyde.set_geometry(geom2psi) # load alternate coordinates into molecule; formaldehyde.update_geometry() # update the molecule internals; formaldehyde.print_out() # print new molecule to output file; compare_values(28.9950517332, formaldehyde.nuclear_repulsion_energy(), 4, ""geom2 took""). Molecules can be initited from XYZ files and fragmented for SAPT computations.; # >>> cat mol1.xyz; #7; #; #O 0.00000000 -0.05786571 -1.47979303; #N 0.00000000 0.01436394 1.46454628; #H 0.00000000 0.82293384 -1.85541474; #H 0.81348351 0.39876776 1.92934049; #H 0.00000000 0.07949567 -0.51934253; #H 0.00000000 -0.98104857 1.65344779; #H -0.81348351 0.39876776 1.92934049. # >>> cat mol2.xyz; # 6 au; # stuff; # C 0.00000000000000 0.00000000000000 5.26601138679877; # C 0.00000000000000 0.00000000000000 -3.15195886530135; # H 0.00000000000000 0.000000",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/psithonmol-1.html:16934,load,load,16934,psi4manual/1.0.0/psithonmol-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/psithonmol-1.html,2,['load'],['load']
Performance,"cf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). PsiMod.set_local_option('OCC', 'DO_SCS', 'TRUE'); PsiMod.occ(). optstash.restore(). [docs]def run_sos_omp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a spin-opposite scaled OMP2 computation. """"""; lowername = name.lower(). optstash = OptionsState(; ['OCC', 'SOS_TYPE'],; ['OCC', 'DO_SOS']). # what type of sos?; if (lowername == 'sos-omp2'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOS'); elif (lowername == 'sos-pi-omp2'):; PsiMod.set_local_option('OCC', 'SOS_TYPE', 'SOSPI'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). PsiMod.set_local_option('OCC', 'DO_SOS', 'TRUE'); PsiMod.occ(). optstash.restore(). [docs]def run_omp3(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an orbital-optimized MP3 computation. """"""; optstash = OptionsState(; ['OCC', 'WFN_TYPE']). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_scf' in kwargs) and yes.match(str(kwargs['bypass_scf']))):; scf_helper(name, **kwargs). PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); PsiMod.occ(). optstash.restore(). [docs]def run_omp3_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; OMP3 gradient calculation. """"""; optstash = OptionsState(; ['OCC', 'WFN_TYPE'],; ['GLOBALS', 'DERTYPE']). PsiMod.set_global_option('DERTYPE', 'FIRST'); PsiMod.set_local_option('OCC', 'WFN_TYPE', 'OMP3'); run_omp3(name, **kwargs); PsiMod.deriv(). optstash.restore(). [docs]def run_mp3(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a MP3 calculation. """"""; optstash = OptionsState(; ['OCC', 'ORB_OPT']). PsiMod.set_local_option('OCC', 'ORB_OPT', 'FALSE'); run_omp3(name, **kwargs). optstash.r",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/proc.html:4528,optimiz,optimized,4528,psi4manual/4.0b4/_modules/proc.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/proc.html,1,['optimiz'],['optimized']
Performance,"cf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mbis-1; MBIS calculation on H2O. phi-ao; Test computing values of basis functions (puream and non-puream) at points. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. sapt-sf1; Tests the Psi4 SF-SAPT code. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). nbody-hessian; Computation of VMFC-corrected HF dimer Hessian. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. opt11; Transition-state optimizations of HOOH to both torsional transition states. dft-dsd; DSD S22 Ammonia test. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dft2; DFT Functional Test. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser meth",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:19953,optimiz,optimization,19953,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimization']
Performance,"cf; optimization HF/svp on water. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/kw-2; testing best practices options, part ii. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. «; h",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_cfour.html:4044,perform,performed,4044,psi4manual/1.8.x/autodoc_testsuite_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_cfour.html,1,['perform'],['performed']
Performance,"cf_basis'] = 'aug-cc-pVQZ'; if not ('scf_scheme' in kwargs):; kwargs['scf_scheme'] = highest_1. if not ('corl_wfn' in kwargs):; kwargs['corl_wfn'] = 'mp2'; name = 'mp2'; if not ('corl_basis' in kwargs):; kwargs['corl_basis'] = 'aug-cc-pV[TQ]Z'; if not ('corl_scheme' in kwargs):; kwargs['corl_scheme'] = corl_xtpl_helgaker_2. if not ('delta_wfn' in kwargs):; kwargs['delta_wfn'] = 'ccsd(t)'; if not ('delta_wfn_lesser' in kwargs):; kwargs['delta_wfn_lesser'] = 'mp2'; if not ('delta_basis' in kwargs):; kwargs['delta_basis'] = 'aug-cc-pVTZ'; if not ('delta_scheme' in kwargs):; kwargs['delta_scheme'] = highest_1. return cbs(name, **kwargs). [docs]def allen_focal_point(name='mp2', **kwargs):; r""""""Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; :py:func:`~wrappers.complete_basis_set` to evaluate the following; expression. SCF employs a three-point extrapolation according; to :py:func:`~wrappers.scf_xtpl_helgaker_3`. MP2, CCSD, and; CCSD(T) employ two-point extrapolation performed according to; :py:func:`~wrappers.corl_xtpl_helgaker_2`. CCSDT and CCSDT(Q); are plain deltas. This wrapper requires :ref:`Kallay's MRCC code <sec:mrcc>`. .. math:: E_{total}^{\text{FPA}} = E_{total,\; \text{SCF}}^{\text{cc-pV[Q56]Z}} \; + E_{corl,\; \text{MP2}}^{\text{cc-pV[56]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD}}^{\text{CCSD(T)}}\big\vert_{\text{cc-pV[56]Z}} \; + \delta_{\text{CCSD(T)}}^{\text{CCSDT}}\big\vert_{\text{cc-pVTZ}} \; + \delta_{\text{CCSDT}}^{\text{CCSDT(Q)}}\big\vert_{\text{cc-pVDZ}}. >>> # [1] single-point energy by this composite method; >>> energy('allen_focal_point'). >>> # [2] finite-difference geometry optimization embarrasingly parallel; >>> optimize('allen_focal_point', mode='sow'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). if not ('func_cbs' in kwargs):; kwargs['func_cbs'] = energy. # SCF; if not ('scf_basis' in kwargs):; kwargs['scf_basis'] = 'cc-pV[Q56]Z'; if",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/aliases.html:3692,perform,performed,3692,psi4manual/4.0b5/_modules/aliases.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/aliases.html,1,['perform'],['performed']
Performance,"cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/kw-1; testing best practices options, part i. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/kw-5; Basis set sp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_cfour.html:3428,optimiz,optimization,3428,psi4manual/1.9.x/autodoc_testsuite_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_cfour.html,1,['optimiz'],['optimization']
Performance,"cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/kw-1; testing best practices options, part i. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:4437,optimiz,optimization,4437,psi4manual/master/autodoc_testsuite_cfour.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html,1,['optimiz'],['optimization']
Performance,"cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rohf-mp2-sc; single-point MP",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_cfour.html:2142,optimiz,optimization,2142,psi4manual/1.7.x/autodoc_testsuite_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_cfour.html,1,['optimiz'],['optimization']
Performance,"cft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SA",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:9222,perform,performed,9222,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,4,['perform'],['performed']
Performance,"ch irrep in \(^{3}B_1\) CH2. tdscf-1; td-uhf test on triplet states of methylene (rpa). omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. mbis-1; MBIS calculation on H2O. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with vari",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:28228,perform,performed,28228,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['perform'],['performed']
Performance,"ch level. Type: integer; Default: 0. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:6925,CACHE,CACHELEVEL,6925,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,6,"['CACHE', 'cache', 'perform']","['CACHELEVEL', 'cacheing', 'perform']"
Performance,"ch of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometry shown above computed with; SAPT0/aug-cc-pVDZ. Monomer-Centered Basis Computations¶; The charge-transfer analysis above is carried out by taking the; difference between SAPT induction as calculated in the dimer-centered; basis (i.e., each monomer sees the basis functions on both monomers); vs. the monomer-centered basis (i.e., each monomer utilizes only its; own basis set). It is also possible to run a closed-shell SAPT computation at any; level using only t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/sapt-1.html:25120,perform,performs,25120,psi4manual/1.1.0/sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/sapt-1.html,6,['perform'],['performs']
Performance,"ch reference determinant and are not correlated in the; MRCC procedure.; Doubly occupied orbitals (RESTRICTED_DOCC) are doubly; occupied in each reference determinant and are correlated in the MRCC; procedure.; Active orbitals (ACTIVE) are partially occupied in each; reference determinant.; Frozen virtual orbitals (FROZEN_UOCC) are unoccupied in; all reference determinants and are excluded from the correlated wave; function. The model space is selected by considering all possible occupations; of the electrons among the orbitals in the active space that result; in determinants with the correct symmetry (WFN_SYM); and the correct value specified by the keyword; CORR_MULTP. Note that this does not consider the multiplicity; of the wavefunction. Thus, in order to obtain the wavefunction; with a set of reference determinants for; an open-shell system you should request a CORR_MULTP of; 1 within the PSIMRCC module, and select the root of the effective; Hamiltonian that corresponds to the state of interest. In addition,; the WFN_SYM keyword needs to be specified otherwise the; wavefunction belonging to the all-symmetric irrep will be selected. In; addition, it should be noted that for an open-shell singlet based; on two determinants the eigenvector is; [], which corresponds; to a wavefunction of the following form:. See Appendix PSIMRCC for a complete list of PSIMRCC options. Table Of Contents. PSIMRCC Implementation of Mk-MRCC Theory; A Simple Example; Orbital ordering and selection of the model space. Previous topic; OCC: Orbital-Optimized Coupled-Cluster and Møller–Plesset Perturbation Theories; Next topic; CI: Configuration Interaction. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Theoretical Methods: SCF to FCI ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/psimrcc-1.html:7096,Optimiz,Optimized,7096,psi4manual/1.0.0/psimrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/psimrcc-1.html,2,['Optimiz'],['Optimized']
Performance,"ch that in practice, this returns whether the option has been touched by the user. psi4.core.has_variable(arg0: str) → bool¶; Returns true if the PSI variable exists/is set. psi4.core.initialize() → bool¶. psi4.core.legacy_wavefunction() → psi::Wavefunction¶; Returns the current legacy_wavefunction object from the most recent computation. psi4.core.libfock(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs a CPHF calculation, using libfock. psi4.core.mcscf(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the MCSCF code, (N.B. restricted to certain active spaces). psi4.core.mrcc_generate_input(arg0: psi::Wavefunction, arg1: dict) → psi4.core.PsiReturnType¶; Generates an input for Kallay’s MRCC code. psi4.core.mrcc_load_densities(arg0: psi::Wavefunction, arg1: dict) → psi4.core.PsiReturnType¶; Reads in the density matrices from Kallay’s MRCC code. psi4.core.occ(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the orbital optimized CC codes. psi4.core.opt_clean() → None¶; Cleans up the optimizer’s scratch files. psi4.core.option_exists_in_module(arg0: str, arg1: str) → bool¶; Given a string of a keyword name arg1 and a particular module arg0, returns whether arg1 is a valid option for arg0. psi4.core.optking() → int¶; Runs the geometry optimization / frequency analysis code. psi4.core.outfile_name() → str¶; Returns the name of the output file. psi4.core.plugin(arg0: str, arg1: psi::Wavefunction) → psi::Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. psi4.core.plugin_close(arg0: str) → None¶; Close the plugin of name arg0. psi4.core.plugin_close_all() → None¶; Close all open plugins. psi4.core.plugin_load(arg0: str) → int¶; Load the plugin of name arg0. Returns 0 if not loaded, 1 if loaded, 2 if already loaded. psi4.core.prepare_options_for_module(arg0: str) → None¶; Sets the options module up to return options pertaining to the named argument (e.g. SCF). psi4.core.print_global_options() → None¶; Prints the currently set global (all mo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/psi4api-1.html:232876,optimiz,optimizer,232876,psi4manual/1.2.1/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/psi4api-1.html,2,['optimiz'],['optimizer']
Performance,"ch that in practice, this returns whether the option has been touched by the user. psi4.core.has_variable(arg0: str) → bool¶; Returns true if the PSI variable exists/is set. psi4.core.initialize() → bool¶. psi4.core.legacy_wavefunction() → psi::Wavefunction¶; Returns the current legacy_wavefunction object from the most recent computation. psi4.core.libfock(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs a CPHF calculation, using libfock. psi4.core.mcscf(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the MCSCF code, (N.B. restricted to certain active spaces). psi4.core.mrcc_generate_input(arg0: psi::Wavefunction, arg1: dict) → psi4.core.PsiReturnType¶; Generates an input for Kallay’s MRCC code. psi4.core.mrcc_load_densities(arg0: psi::Wavefunction, arg1: dict) → psi4.core.PsiReturnType¶; Reads in the density matrices from Kallay’s MRCC code. psi4.core.occ(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the orbital optimized CC codes. psi4.core.opt_clean() → None¶; Cleans up the optimizer’s scratch files. psi4.core.optking() → int¶; Runs the geometry optimization / frequency analysis code. psi4.core.outfile_name() → str¶; Returns the name of the output file. psi4.core.plugin(arg0: str, arg1: psi::Wavefunction) → psi::Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. psi4.core.plugin_close(arg0: str) → None¶; Close the plugin of name arg0. psi4.core.plugin_close_all() → None¶; Close all open plugins. psi4.core.plugin_load(arg0: str) → int¶; Load the plugin of name arg0. Returns 0 if not loaded, 1 if loaded, 2 if already loaded. psi4.core.prepare_options_for_module(arg0: str) → None¶; Sets the options module up to return options pertaining to the named argument (e.g. SCF). psi4.core.print_global_options() → None¶; Prints the currently set global (all modules) options to the output file. psi4.core.print_options() → None¶; Prints the currently set options (to the output file) for the current module. psi4.core.print_out(arg0: str) → N",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/psi4api-1.html:153643,optimiz,optimizer,153643,psi4manual/1.1.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/psi4api-1.html,2,['optimiz'],['optimizer']
Performance,"change in; energy and root-mean-square change in density matrix values, which must be below; the user-specified E_CONVERGENCE and D_CONVERGENCE, respectively.; The maximum number of iterations is specified by the MAXITER option. It; should be noted that SCF is a chaotic process, and, as such, often requires; careful selection of initial orbitals and damping during iterations to ensure; convergence. This is particularly likely for large systems, metallic systems,; multireference systems, open-shell systems, anions, and systems with diffuse; basis sets.; For initial orbital selection, several options are available. These include:. CORE [Default]; Diagonalization of the core Hamiltonian, removing even mean-field electron; repulsion. Simple, but often too far from the final solution for larger; systems.; SAD; Superposition of Atomic Densities. Builds the initial density as the; spin-averaged sum of atomic UHF computations in the current basis. If an; open-shell system, uniform scaling of the spin-averaged density matrices is; performed. If orbitals are needed (e.g., in density fitting), a partial; Cholesky factorization of the density matrices is used. Often extremely; accurate, particularly for closed-shell systems.; GWH; Generalized Wolfsberg-Helmholtz, a simple Huckel-Theory-like method based on; the overlap and core Hamiltonian matrices. May be useful in open-shell systems.; READ; Read the previous orbitals from a checkpoint file, casting from one basis to; another if needed. Useful for starting anion computations from neutral; orbitals, or after small geometry changes. At present, casting from a; different molecular point group is not supported. These are all set by the GUESS keyword. Also, an automatic Python; procedure has been developed for converging the SCF in a small basis, and then; casting up to the true basis, This can be done by placing a cast_up =; 'SMALL_BASIS' modifier in the energy() procedure call. We recommend the; 3-21G basis for the small basis due",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/scf-1.html:13225,perform,performed,13225,psi4manual/4.0b2/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/scf-1.html,2,['perform'],['performed']
Performance,"change in; energy and root-mean-square change in density matrix values, which must be below; the user-specified E_CONVERGENCE and D_CONVERGENCE, respectively.; The maximum number of iterations is specified by the MAXITER option. It; should be noted that SCF is a chaotic process, and, as such, often requires; careful selection of initial orbitals and damping during iterations to ensure; convergence. This is particularly likely for large systems, metallic systems,; multireference systems, open-shell systems, anions, and systems with diffuse; basis sets.; For initial orbital selection, several options are available. These include:. CORE [Default]; Diagonalization of the core Hamiltonian, removing even mean-field electron; repulsion. Simple, but often too far from the final solution for larger; systems.; SAD; Superposition of Atomic Densities. Builds the initial density as the; spin-averaged sum of atomic UHF computations in the current basis. If an; open-shell system, uniform scaling of the spin-averaged density matrices is; performed. If orbitals are needed (e.g., in density fitting), a partial; Cholesky factorization of the density matrices is used. Often extremely; accurate, particularly for closed-shell systems.; GWH; Generalized Wolfsberg-Helmholtz, a simple Huckel-Theory-like method based on; the overlap and core Hamiltonian matrices. May be useful in open-shell systems.; READ; Read the previous orbitals from a checkpoint file, casting from one basis to; another if needed. Useful for starting anion computations from neutral; orbitals, or after small geometry changes. At present, casting from a; different molecular point group is not supported. These are all set by the GUESS keyword. Also, an automatic Python; procedure has been developed for converging the SCF in a small basis, and then; casting up to the true basis. This can be done by adding; BASIS_GUESS = SMALL_BASIS to the options list. We recommend the; 3-21G basis for the small basis due to its efficient mix",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/scf-1.html:13996,perform,performed,13996,psi4manual/4.0b3/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/scf-1.html,2,['perform'],['performed']
Performance,"ched at module scope. has_option_changed(module, key); Whether keyword key value has been touched or is default. has_scalar_variable(key); Is the double QCVariable key (case-insensitive) set? Prefer has_variable(). has_variable(key); Whether scalar or array QCVariable key has been set in global memory. initialize(); Called upon psi4 module import to initialize timers, singletons, and I/O. legacy_wavefunction(); Returns the current legacy_wavefunction object from the most recent computation. mcscf(arg0); Runs the MCSCF code, (N.B. mrcc_generate_input(arg0, arg1); Generates an input for Kallay's MRCC code. mrcc_load_densities(arg0, arg1); Reads in the density matrices from Kallay's MRCC code. occ(ref_wfn); Runs the orbital optimized CC codes. opt_clean(); Cleans up the optimizer's scratch files. option_exists_in_module(module, key); Whether keyword key is a valid keyword for module. options_to_python(arg0); Get dictionary of whether options of module have changed. optking(); Runs the geometry optimization code. outfile_name(); Returns the name of the output file. plugin(arg0, arg1); Call the plugin of name arg0. plugin_close(arg0); Close the plugin of name arg0. plugin_close_all(); Close all open plugins. plugin_load(arg0); Load the plugin of name arg0. prepare_options_for_module(name); Sets up the options library to return options pertaining to the module or plugin name (e.g. print_global_options(); Prints the currently set global (all modules) options to the output file. print_options(); Prints the currently set options (to the output file) for the current module. print_out(arg0); Prints a string (using sprintf-like notation) to the output file. print_variables(); Prints to output file all QCVariables that have been set in global memory. psi_top_srcdir(); Returns the location of the source code. psimrcc(arg0); Runs the multireference coupled cluster code. reopen_outfile(); Reopens the output file. revoke_global_option_changed(key); Clear the touched status for keywo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/psi4api-1.html:7574,optimiz,optimization,7574,psi4manual/1.5.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/psi4api-1.html,3,['optimiz'],['optimization']
Performance,"ched at module scope. has_option_changed(module, key); Whether keyword key value has been touched or is default. has_scalar_variable(key); Is the double QCVariable key (case-insensitive) set? Prefer has_variable(). has_variable(key); Whether scalar or array QCVariable key has been set in global memory. initialize(); Called upon psi4 module import to initialize timers, singletons, and I/O. legacy_wavefunction(); Returns the current legacy_wavefunction object from the most recent computation. mcscf(arg0); Runs the MCSCF code, (N.B. mrcc_generate_input(arg0, arg1); Generates an input for Kallay’s MRCC code. mrcc_load_densities(arg0, arg1); Reads in the density matrices from Kallay’s MRCC code. occ(ref_wfn); Runs the orbital optimized CC codes. opt_clean(); Cleans up the optimizer’s scratch files. option_exists_in_module(module, key); Whether keyword key is a valid keyword for module. options_to_python(arg0); Get dictionary of whether options of module have changed. optking(); Runs the geometry optimization code. outfile_name(); Returns the name of the output file. plugin(arg0, arg1); Call the plugin of name arg0. plugin_close(arg0); Close the plugin of name arg0. plugin_close_all(); Close all open plugins. plugin_load(arg0); Load the plugin of name arg0. prepare_options_for_module(name); Sets up the options library to return options pertaining to the module or plugin name (e.g. print_global_options(); Prints the currently set global (all modules) options to the output file. print_options(); Prints the currently set options (to the output file) for the current module. print_out(arg0); Prints a string (using sprintf-like notation) to the output file. print_variables(); Prints to output file all QCVariables that have been set in global memory. psi_top_srcdir(); Returns the location of the source code. psimrcc(arg0); Runs the multireference coupled cluster code. reopen_outfile(); Reopens the output file. revoke_global_option_changed(key); Clear the touched status for keywo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/psi4api-1.html:7487,optimiz,optimization,7487,psi4manual/1.4.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/psi4api-1.html,2,['optimiz'],['optimization']
Performance,"chem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. dfremp-1; density fitted REMP/cc-pVDZ energies for the CO2 molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. dlpnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. scf-hess",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:9741,perform,performs,9741,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,4,"['optimiz', 'perform']","['optimization', 'performs']"
Performance,"chner, L. A. Cunha, A. G. Heide, J. M. Waldrop, T. Y. Takeshita, A. Alenaizan, D. Neuhauser, R. A. King, A. C. Simmonett, J. M. Turney, H. F. Schaefer III, F. A. Evangelista, A. E. DePrince, T. D. Crawford, K. Patkowski, and C. D. Sherrill; J. Chem. Theory Comput. 14, 3504-3511 (2018). Schriber:2021:234107; J. B. Schriber, D. A. Sirianni, D. G. A. Smith, L. A. Burns, D. Sitkoff, D. L. Cheney, C. D. Sherrill; J. Chem. Phys. 154, 234107 (2021). Caldeweyher:2019:154122; “A generally applicable atomic-charge dependent London dispersion correction”,; E. Caldeweyher, S. Ehlert, A. Hansen, H. Neugebauer, S. Spicher, C. Bannwarth, and S. Grimme,; J. Chem. Phys. 150, 154122 (2019).; https://doi.org/10.1063/1.5090222. Haser:1989:104; M. Haser and R. Ahlrichs,; J. Comp. Chem. 10(1), 104 (1989).; doi: 10.1002/jcc.540100111. Thompson:2017:144101; T. H. Thompson and C. Ochsenfeld; J. Chem. Phys. 147, 144101 (2017).; doi: 10.1063/1.4994190. Smith:2020:184108; “PSI4 1.4: Open-source software for high-throughput quantum chemistry”,; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O’Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov, K. Patkowski, A. E. DePrince III, U. Bozkaya, R. King, F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill; J. Chem. Phys. 152, 184108 (2020).; doi: 10.1063/5.0006002. Waldrop:2021:024103; “Nonapproximated third-order exchange induction energy in symmetry-adapted perturbation theory”,; J. M. Waldrop and K. Patkowski; J. Chem. Phys. 154, 024103 (2021).; doi: 10.1063/1.4994190. Ochsenfeld:1998:1663; C. Ochsenfeld, C. A. White, M. Head-Gordon; J. Chem. Phys. 109, 1663 (1998); doi: 10.1063/1.476741. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .   ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/bibliography.html:13429,throughput,throughput,13429,psi4manual/1.6.x/bibliography.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/bibliography.html,1,['throughput'],['throughput']
Performance,"chosen as the optimization engine. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual]. ccd; coupled cluster doubles (CCD) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.opt-1.html:2497,Optimiz,Optimizations,2497,psi4manual/1.4.0/api/psi4.driver.opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.opt-1.html,15,['Optimiz'],['Optimizations']
Performance,"ch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. The primary use of the ~/.psi4rc file is to control the; handling of scratch files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are sequentially; numbered and are written to /tmp, then deleted at the end of the computation,; unless otherwise instructed by the user.; A Python callable handle to the PSI4 I/O management routines is available,; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to the ~/.psi4rc; file.:; psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it mi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/external-1.html:2186,perform,performing,2186,psi4manual/4.0b3/external-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/external-1.html,2,['perform'],['performing']
Performance,"ch”) files. Electronic structure packages like PSI4 can; create rather large temporary disk files. It is very important to; ensure that PSI4 is writing its temporary files to a disk drive; phsyically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, PSI4 will write temporary files to /tmp, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB–1TB or more, depending on the size of; the molecules to be studied) and (b) tell PSI4 the path to this; directory. Scratch file location can be specified through the; PSI_SCRATCH environment variable or, more flexibly, through; a resource file, ~/.psi4rc (example psi4/samples/example_psi4rc_file).; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. The primary use of the ~/.psi4rc file is to control the; handling of scratch files. PSI4 has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated scratch numbered by content and labeled; with the process id, then are deleted at the end of the computation,; unless otherwise instructed by the user.; A Python callable handle to the PSI4 I/O management routines is available,; and is called psi4_io. To instruct the I/O manager to send all files to; another location, say /scratch/user, add the following command to the ~/.psi4rc; file.:; psi4_io.set_default_path('/scratch/user'). ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/external-1.html:2125,perform,performing,2125,psi4manual/4.0b4/external-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/external-1.html,4,['perform'],['performing']
Performance,"ci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. rasci-h2o; RASCI/6-31G** H2O Energy Point. cc17; Single point energies of multiple excited states with EOM-CCSD. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. mrcc2; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mrcc3; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. pywrap_alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cc51; EOM-CC3/cc-pVTZ on H2O. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical wi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html:11358,optimiz,optimization,11358,psi4manual/4.0b2/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html,4,['optimiz'],['optimization']
Performance,"ci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. rasci-h2o; RASCI/6-31G** H2O Energy Point. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. scf-level-shift-rks; SCF level shift on an RKS computation. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cbs-parser; mtd/basis syntax examples. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. dfremp-1; density fitted REMP/cc-pVDZ energies for the CO2 molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:8939,optimiz,optimized,8939,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['optimiz'],['optimized']
Performance,"cies on methyloxirane. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc1; ADC/6-31G** on H2O. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, at the UHF an ROHF levels of theory. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mp2_5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html:18526,optimiz,optimization,18526,psi4manual/4.0b4/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html,4,['optimiz'],['optimization']
Performance,"cies on methyloxirane. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc1; ADC/6-31G** on H2O. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, at the UHF an ROHF levels of theory. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mp2_5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. df",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_testsuite-1.html:18912,optimiz,optimization,18912,psi4manual/4.0b5/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_testsuite-1.html,4,['optimiz'],['optimization']
Performance,"cified basis and properties for particular root. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc12; Single point energies of multiple excited states with EOM-CCSD. cisd-sp; 6-31G** H2O Test CISD Energy Point. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. mrcc4; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). omp2_5-1; OMP2 cc-pVDZ energy for the H2O molecule. fci-dipole; 6-31G H2O Test FCI Energy Point. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fnocc3; Test FNO-QCISD(T) computation. tu4-h2o-freq; Frequencies for H2O HF/cc-pVDZ at optimized geometry. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. mints3; Test individual integral objects for correctness. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. pywrap-checkrun-convcrit; Advance",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_testsuite-1.html:13544,optimiz,optimized,13544,psi4manual/4.0b5/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_testsuite-1.html,4,['optimiz'],['optimized']
Performance,"cifies delocalized coordinates, then the combinations; will be more complex.; Since the multiple-fragment coordinates are still under; development, they are not documented here. However, if desired, one can change the value; of FRAG_MODE, generate the internal coordinates, and see how multiple; fragment systems are defined.; Coordinates may be frozen by adding an asterisk after the letter of the coordinate. The; asterisk results in that internal coordinate being frozen at its initial value. The; “intco” file below for water specifies an optimization with both O-H bonds frozen.:; 1; 2; 3; 4F 1 3; R* 1 2; R* 1 3; B 2 1 3. If one instead wishes to optimize toward (“fix”) a value that is not satisfied by the; initial structure, then the value is added to the end of the line. The following; corresponds to an optimization that will add additional forces to move the O-H bonds; to 1.70 au.; 1; 2; 3; 4F 1 3; R 1 2 1.70; R 1 3 1.70; B 2 1 3. Convergence Criteria¶; Optking monitors five quantities to evaluate the progress of a geometry; optimization. These are (with their keywords) the change in energy; (MAX_ENERGY_G_CONVERGENCE), the maximum element of; the gradient (MAX_FORCE_G_CONVERGENCE), the root-mean-square; of the gradient (RMS_FORCE_G_CONVERGENCE), the maximum element; of displacement (MAX_DISP_G_CONVERGENCE), and the; root-mean-square of displacement (RMS_DISP_G_CONVERGENCE),; all in internal coordinates and atomic units. Usually, these options will not; be set directly. Primary control for geometry convergence lies with the keyword; G_CONVERGENCE which sets the aforementioned in accordance; with Table Geometry Convergence. Summary of sets of geometry optimization criteria available in PSI4¶. G_CONVERGENCE; Max Energy; Max Force; RMS Force; Max Disp; RMS Disp. NWCHEM_LOOSE [4];  ; \(4.5 \times 10^{-3}\); \(3.0 \times 10^{-3}\); \(5.4 \times 10^{-3}\); \(3.6 \times 10^{-3}\). GAU_LOOSE [6];  ; \(2.5 \times 10^{-3}\); \(1.7 \times 10^{-3}\); \(1.0 \times 10^{-2}\); \(6",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/optking-1.html:11233,optimiz,optimization,11233,psi4manual/1.1.0/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/optking-1.html,6,['optimiz'],['optimization']
Performance,"cing Psi4 Capabilities ». Interface to MRCC by M. Kállay¶; Code author: Justin M. Turney and Andrew C. Simmonett; Section author: Justin M. Turney; Module: Keywords, PSI Variables, MRCC, Samples; Psi4 contains code to interface to the MRCC program of M. Kállay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mihály Kállay (http://www.mrcc.hu/). Installation¶; Follow the instructions provided with the source to build the MRCC programs.; To be used by Psi4, ensure that the program binary (dmrcc) can be; found in your PATH. If Psi4 is unable to execute the binary, an; error will be reported. Running MRCC¶; MRCC can be invoked in similar fashion as other theories provided in Psi4.; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following:; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt'). 'mrccsdt' in the call to energy() instructs Psi4 to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; For a CCSDT(Q) energy, simply use 'mrccsdt(q)' in the call to; energy(). MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only.; At this time, Psi4 is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you must prefix; the method name with MR. For other methods, you will be required to; use the MRCC keywords described in Appendix MRCC.; Note that perturbative methods (ccsd(t), ccsdtqp(h)_l, etc.); are not available with REFERENCE ROHF. name; calls method in Kallay’s MRCC program [manual]. mrccsd; CC through doubles. mrccsdt; CC through triples. mrccsdtq; CC through quadruples. mrccsdtqp; CC through quintuples. mrccsdtqph; CC through sextuples. mrccsd(t); CC through doubles with perturbative triples. mrccsdt(q); CC through triples with perturbative quadruples. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/mrcc-1.html:1163,perform,perform,1163,psi4manual/1.0.0/mrcc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/mrcc-1.html,2,['perform'],['perform']
Performance,"cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). frac-sym; Fractional occupation with symmetry. scf-ecp2; Water-Argon complex with ECP present; check of RHF Hessian. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfomp3-gr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:39667,perform,performs,39667,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['perform'],['performs']
Performance,"cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. mints3; Test individual integral objects for correctness. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. rasci-h2o; RASCI/6-31G** H2O Energy Point. cc17; Single point energies of multiple excited states with EOM-CCSD. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. mrcc2; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mrcc3; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. pywrap_alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cc51; EOM-CC3/",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html:11005,Optimiz,Optimize,11005,psi4manual/4.0b2/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html,4,['Optimiz'],['Optimize']
Performance,ck Calculation; Geometry Optimization and Vibrational Frequency Analysis; Analysis of Intermolecular Interactions; Potential Surface Scans and Counterpoise Correction Made Easy with Psithon. Configuration: Preparing PSI4’s Environment; Scratch Files and the ~/.psi4rc File; Threading; Command Line Options; Environment Variables. Psithon: Structuring an Input File; Physical Constants; Molecule Specification; Geometries from the PubChem Database; Symmetry; Non-Covalently Bonded Molecule Fragments; Job Control; Assigning Basis Sets; Memory Specification; Return Values and PSI Variables; Loops; Tables of Results; Python Wrappers. Basis Sets; Theoretical Methods: SCF to FCI; Notes on Options; Hartree–Fock Theory; Density Functional Theory; Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Ab Initio Polarization Propagator; Symmetry-Adapted Perturbation Theory; Coupled Cluster Methods; PSIMRCC Implementation of Mk-MRCC Theory; Interface to MRCC by M. Kállay; Configuration Interaction; Geometry Optimization. Psithon Functions: Invoking a Calculation; Notes on Options; Energy; Property; Counterpoise Correct; Optimize; Frequency; Database; Complete Basis Set; Function Intercalls; Embarrassing Parallelism. Interfaces: Enhancing PSI4 Capabilities. Customization: Adding Simple Extensions; User-Defined Basis Sets; Defining a Method Alias; Creating a Database. Contributions: Intro to Programming in PSI4; Plugins: Adding New Functionality to PSI4; Best Practices for Python Functions; Documentation. Programming: Using the Core Libraries. Emerging Theoretical Methods: Plugins DFADC to RQCHF; plugin_cepa; plugin_ccsort; plugin_dfadc; plugin_test_matrix; plugin_ccsd_serial; plugin_libfock; plugin_aointegrals; plugin_mp2; plugin_sointegrals; plugin_testparse; plugin_rqchf; plugin_omega; plugin_mointegrals; plugin_backtrans. Python Driver; input; pubchem; psiexceptions; frac; molutil; proc; procutil; driver; physconst; wrappers; qmmm; functional; text; util; aliases. PsiMod,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/index.html:1312,Optimiz,Optimization,1312,psi4manual/4.0b2/index.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/index.html,1,['Optimiz'],['Optimization']
Performance,"ck, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; --------------------------------------------------------------------------------------------------",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/tutorial-1.html:5689,Optimiz,Optimization,5689,psi4manual/1.0.0/tutorial-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/tutorial-1.html,6,['Optimiz'],['Optimization']
Performance,"ck, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt.; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After about 4 cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; ----------------------------------------------------------------------; Step Energy Delta(E) MAX force MAX Delta(q); ----------------------------------------------------------------------; 1 -76.026653665892 -76.026653665892 1.52e-02 1.52e-02; 2 -76.026907793199 -0.000254127307 9.55e-03 9.55e-03; 3 -76.027052927171 -0.000145133972 4.47e-04 4.47e-04; 4 -76.027053472137 -0.000000544965 1.16e-04 1.16e-04; ----------------------------------------------------------------------. To get harmonic vibrational frequencies, first we must set up an input; using the OPTIMIZED GEOMETRY. We can easily get the optimized geometry; from the previous computation. Looking a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/tutorial-1.html:4872,Optimiz,Optimization,4872,psi4manual/4.0b3/tutorial-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/tutorial-1.html,4,['Optimiz'],['Optimization']
Performance,"cked data for saving many matrices into the same file.; """""". ret = {}; ret[prefix + ""Irreps""] = self.nirrep(); ret[prefix + ""Name""] = self.name; for h, v in enumerate(self.nph):; # If returning arrays to user, we want to return copies (snapshot), not; # views of the core.Matrix's memory.; if filename is None and not v.flags['OWNDATA']:; v = np.copy(v); ret[prefix + ""IrrepData"" + str(h)] = v. if isinstance(self, core.Matrix):; ret[prefix + ""Dim1""] = self.rowdim().to_tuple(); ret[prefix + ""Dim2""] = self.coldim().to_tuple(); if isinstance(self, core.Vector):; ret[prefix + ""Dim""] = [self.dim(x) for x in range(self.nirrep())]. if filename is None:; return ret. np.savez(filename, **ret). def _np_read(self, filename, prefix=""""):; """"""; Reads the data from a NumPy compress file.; """""". if isinstance(filename, np.lib.npyio.NpzFile):; data = filename; elif isinstance(filename, str):; if not filename.endswith('.npz'):; filename = filename + '.npz'. data = np.load(filename); else:; raise Exception(""Filename not understood: %s"" % filename). ret_data = []. if ((prefix + ""Irreps"") not in data.keys()) or ((prefix + ""Name"") not in data.keys()):; raise ValidationError(""File %s does not appear to be a numpyz save"" % filename). for h in range(data[prefix + ""Irreps""]):; ret_data.append(data[prefix + ""IrrepData"" + str(h)]). arr_type = self.__mro__[0]; if arr_type == core.Matrix:; dim1 = core.Dimension.from_list(data[prefix + ""Dim1""]); dim2 = core.Dimension.from_list(data[prefix + ""Dim2""]); ret = self(str(data[prefix + ""Name""]), dim1, dim2); elif arr_type == core.Vector:; dim1 = core.Dimension.from_list(data[prefix + ""Dim""]); ret = self(str(data[prefix + ""Name""]), dim1). for h in range(data[prefix + ""Irreps""]):; ret.nph[h][:] = ret_data[h]. return ret. def _to_serial(data):; """"""; Converts an object with a .nph accessor to a serialized dictionary; """""". json_data = {}; json_data[""shape""] = []; json_data[""data""] = []. for view in data.nph:; json_data[""shape""].append(view.shape); json_data[""data",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/numpy_helper.html:9448,load,load,9448,psi4manual/1.3.2/_modules/psi4/driver/p4util/numpy_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/numpy_helper.html,4,['load'],['load']
Performance,"cks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:3384,optimiz,optimization,3384,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,2,['optimiz'],['optimization']
Performance,"class:`psi4.OptimizationConvergenceError` if :term:`GEOM_MAXITER <GEOM_MAXITER (OPTKING)>` exceeded without reaching geometry convergence. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY`. :type name: str; :param name: ``'scf'`` || ``'mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; :py:func:`psi4.energy`. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :type return_wfn: :ref:`boolean <op_py_boolean>`; :param return_wfn: ``'on'`` || |dl| ``'off'`` |dr|. Indicate to additionally return the :py:class:`~psi4.core.Wavefunction`; calculation result as the second element (after *float* energy) of a tuple. :type return_history: :ref:`boolean <op_py_boolean>`; :param return_history: ``'on'`` || |dl| ``'off'`` |dr|. Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. :type engine: str; :param engine: |dl| ``'optking'`` |dr| || ``'geometric'``. Indicates the optimization engine to use, which can be either Psi4's; native Optking optimizer or the GeomeTRIC program. :type optimizer_keywords: dict; :param optimizer_keywords: Options passed to the GeomeTRIC optimizer. Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``gradient`` |dr| || ``energy`` || ``cbs``. Indicates the type of calculation to be performed on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``opt_func`` instead of ``func``. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: ``'gradient'`` || ``'energy'`",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html:60490,optimiz,optimization,60490,psi4manual/1.4.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html,3,['optimiz'],['optimization']
Performance,"cle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_ONLY (CCDENSITY)¶CCDENSITY (Expert) — For internal use only! Compute the one-particle density matrix, but not the two-particle density matrix. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY)¶CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2)¶DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_RESTART (OPTKING)¶OPTKING — Restart the optimization from optking’s written history. Type: double; Default: 0. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html:186741,optimiz,optimization,186741,psi4manual/1.7.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html,3,['optimiz'],['optimization']
Performance,"clean state. clean_variables(() -> None); Empties all PSI variables that have set internally. close_outfile(() -> None); Closes the output file. dcft(...); Runs the density cumulant functional theory code. detci(...); Runs the determinant-based configuration interaction code. dfmp2(...); Runs the DF-MP2 code. dfocc(...); Runs the density-fitted orbital optimized CC codes. displace_atom((arg0: psi::Matrix, arg1: int, ...); Displaces one coordinate of single atom. dmrg(...); Runs the DMRG code. efp_init(() -> psi4.core.EFP); Initializes the EFP library and returns an EFP object. efp_set_options(() -> None); Set EFP options from environment options object. fd_1_0((arg0: psi::Molecule, ...); Performs a finite difference gradient computation, from energy points. fd_freq_0((arg0: psi::Molecule, arg1: list, ...); Performs a finite difference frequency computation, from energy points, for a given irrep. fd_freq_1((arg0: psi::Molecule, arg1: list, ...); Performs a finite difference frequency computation, from gradients, for a given irrep. fd_geoms_1_0(...); Gets list of displacements needed for a finite difference gradient computation, from energy points. fd_geoms_freq_0((arg0: psi::Molecule, ...); Gets list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep. fd_geoms_freq_1((arg0: psi::Molecule, ...); Gets list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep. finalize(() -> None). fisapt((arg0: psi::Wavefunction) -> float); Runs the functional-group intramolecular symmetry adapted perturbation theory code. flush_outfile(() -> None); Flushes the output file. fnocc(...); Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code. get_active_efp(() -> psi4.core.EFP); Returns the currently active EFP object. get_active_molecule(() -> psi::Molecule); Returns the currently active molecule object. get_array_variable((arg0: str) -> psi::Matrix); Returns one of the PSI variables",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/psi4api-1.html:164009,Perform,Performs,164009,psi4manual/1.1.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/psi4api-1.html,2,['Perform'],['Performs']
Performance,"clear charge. See dfmp2_1; and ghosts for a demonstration of both mechanisms for specifying; ghost atoms. Geometries from the PubChem Database¶; Obtaining rough starting guess geometries can be burdensome. The Z-matrix; coordinate system was designed to provide chemists with an intuitive method for; guessing structures in terms of bond lengths and angles. While Z-matrix input is; intuitive for small molecules with few degrees of freedom, it quickly becomes; laborious as the system size grows. To obtain a reasonable starting guess; geometry, PSI4 can take a chemical name as input; this is then used; to attempt to retrieve Cartesian coordinates from the [PubChem] database.; For example, to run a computation on benzene, we can use the following molecule specification:; molecule benzene {; pubchem:benzene; }. If the computer is connected to the internet, the above code will instruct; PSI4 to search PubChem for a starting structure. The search is actually; performed for compounds whose name contains “benzene”, so multiple; entries will be returned. If the name provided (“benzene” in the above; example) exactly matches one of the results, that entry will be used. If no; exact match is found the results, along with a unique chemical identifier; (CID), are printed to the output file, prompting the user to provide a more; specific name. For example, if we know that we want to run a computation on a; compound whose name(s) contain “benzene”, but we’re not sure of the exact IUPAC; name, the following input can be used:; molecule benzene {; pubchem:benzene*; }. Appending the “*” prevents an exact match from being found and, at the time; of writing, the following results are displayed in the output file:; Chemical ID IUPAC Name; 241 benzene; 7371 benzenesulfonic acid; 91526 benzenesulfonate; 244 phenylmethanol; 727 1,2,3,4,5,6-hexachlorocyclohexane; 240 benzaldehyde; 65723 benzenesulfonohydrazide; 74296 N-phenylbenzenesulfonamide; 289 benzene-1,2-diol; 243 benzoic acid; 7370 ben",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/psithoninput-1.html:8055,perform,performed,8055,psi4manual/4.0b3/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithoninput-1.html,6,['perform'],['performed']
Performance,"clude:: ../cfour_table_grad.rst. :examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Forced finite difference hf optimization run in; >>> # embarrassingly parallel fashion; >>> optimize('hf', dertype='energy', mode='sow'). >>> # [4] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [5] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [6] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). """"""; kwargs = p4util.kwargs_lower(kwargs). if hasattr(name, '__call__'):; lowername = name; custom_gradient = True; else:; lowername = name.lower(); custom_gradient = False. return_wfn = kwargs.pop('return_wfn', False). return_history = kwargs.pop('return_history', False); if return_history:; # Add wfn once the deep copy issues are worked out; step_energies = []; step_gradients = []; step_coordinates = []. # For CBS wrapper, need to set retention on INTCO file; if custom_gradient or ('/' in lowername):; core.IOManager.shared_object().set_specific_retention(1, True). if kwargs.get('bsse_type', None) is not None:; raise ValidationError(""Optimize: Does not currently support 'bsse_type' arguements""). full_hess_every = core.get_option('O",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html:58475,optimiz,optimization,58475,psi4manual/1.2.1/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html,2,['optimiz'],['optimization']
Performance,"cluster response theory code. cctransort(ref_wfn); Runs cctransort that transforms and reorders integrals for use in the coupled cluster codes. cctriples(ref_wfn); Runs the coupled cluster (T) energy code. clean(); Remove scratch files. clean_options(); Reset options to clean state. clean_timers(); Reinitialize timers for independent timer.dat entries. clean_variables(); Empties all double and Matrix QCVariables that have been set in global memory. close_outfile(); Closes the output file. dct(ref_wfn); Runs the density cumulant (functional) theory code. del_array_variable(key); Removes the Matrix QCVariable key (case-insensitive); prefer del_variable(). del_scalar_variable(key); Removes the double QCVariable key (case-insensitive); prefer del_variable(). del_variable(key); Removes scalar or array QCVariable key from global memory if present. detci(ref_wfn); Runs the determinant-based configuration interaction code. dfmp2(ref_wfn); Runs the DF-MP2 code. dfocc(ref_wfn); Runs the density-fitted orbital optimized CC codes. dlpno(arg0); Runs the DLPNO codes. dmrg(ref_wfn); Runs the CheMPS2 interface DMRG code. doublet(A, B[, transA, transB]); Returns the multiplication of two matrices A and B, with options to transpose each beforehand. dummy_einsums(ref_wfn); Runs the einsums placeholder code. dummy_integratorxx(ref_wfn); Runs the integratorxx placeholder code. fcidump_tei_helper(nirrep, restricted, ...); Write integrals to file in FCIDUMP format. finalize(); Called upon psi4 module exit to closes timers and I/O. flush_outfile(); Flushes the output file. fnocc(ref_wfn); Runs the FNO-CCSD(T)/QCISD(T)/MP4/CEPA energy code. get_active_molecule(); Returns the currently active molecule object. get_array_variable(key). get_array_variables(). get_datadir(); Returns the path to shared text resources, PSIDATADIR. get_global_option(key); Return keyword key value at global (all-module) scope. get_global_option_list(); Returns a list of all global options. get_local_option(module, k",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/psi4api.html:4432,optimiz,optimized,4432,psi4manual/master/psi4api.html,https://psicode.org,https://psicode.org/psi4manual/master/psi4api.html,1,['optimiz'],['optimized']
Performance,"cluster response theory code. cctransort(ref_wfn); Runs cctransort that transforms and reorders integrals for use in the coupled cluster codes. cctriples(ref_wfn); Runs the coupled cluster (T) energy code. clean(); Remove scratch files. clean_options(); Reset options to clean state. clean_timers(); Reinitialize timers for independent timer.dat entries. clean_variables(); Empties all double and Matrix QCVariables that have been set in global memory. close_outfile(); Closes the output file. dct(ref_wfn); Runs the density cumulant (functional) theory code. del_array_variable(key); Removes the Matrix QCVariable key (case-insensitive); prefer del_variable(). del_scalar_variable(key); Removes the double QCVariable key (case-insensitive); prefer del_variable(). del_variable(key); Removes scalar or array QCVariable key from global memory if present. detci(ref_wfn); Runs the determinant-based configuration interaction code. dfmp2(ref_wfn); Runs the DF-MP2 code. dfocc(ref_wfn); Runs the density-fitted orbital optimized CC codes. dlpno(arg0); Runs the DLPNO codes. dmrg(ref_wfn); Runs the CheMPS2 interface DMRG code. doublet(A, B[, transA, transB]); Returns the multiplication of two matrices A and B, with options to transpose each beforehand. dummy_einsums(ref_wfn); Runs the einsums placeholder code. fcidump_tei_helper(nirrep, restricted, ...); Write integrals to file in FCIDUMP format. finalize(); Called upon psi4 module exit to closes timers and I/O. flush_outfile(); Flushes the output file. fnocc(ref_wfn); Runs the FNO-CCSD(T)/QCISD(T)/MP4/CEPA energy code. get_active_molecule(); Returns the currently active molecule object. get_array_variable(key). Deprecated since version 1.4. get_array_variables(). Deprecated since version 1.4. get_datadir(); Returns the path to shared text resources, PSIDATADIR. get_global_option(key); Return keyword key value at global (all-module) scope. get_global_option_list(); Returns a list of all global options. get_local_option(module, key); Retu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/psi4api.html:4425,optimiz,optimized,4425,psi4manual/1.9.x/psi4api.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/psi4api.html,1,['optimiz'],['optimized']
Performance,"cluster response theory code. cctransort(ref_wfn); Runs cctransort that transforms and reorders integrals for use in the coupled cluster codes. cctriples(ref_wfn); Runs the coupled cluster (T) energy code. clean(); Remove scratch files. clean_options(); Reset options to clean state. clean_timers(); Reinitialize timers for independent timer.dat entries. clean_variables(); Empties all double and Matrix QCVariables that have been set in global memory. close_outfile(); Closes the output file. dct(ref_wfn); Runs the density cumulant (functional) theory code. del_array_variable(key); Removes the Matrix QCVariable key (case-insensitive); prefer del_variable(). del_scalar_variable(key); Removes the double QCVariable key (case-insensitive); prefer del_variable(). del_variable(key); Removes scalar or array QCVariable key from global memory if present. detci(ref_wfn); Runs the determinant-based configuration interaction code. dfmp2(ref_wfn); Runs the DF-MP2 code. dfocc(ref_wfn); Runs the density-fitted orbital optimized CC codes. dlpno(arg0); Runs the DLPNO codes. dmrg(ref_wfn); Runs the CheMPS2 interface DMRG code. doublet(A, B[, transA, transB]); Returns the multiplication of two matrices A and B, with options to transpose each beforehand. fcidump_tei_helper(nirrep, restricted, ...); Write integrals to file in FCIDUMP format. finalize(); Called upon psi4 module exit to closes timers and I/O. flush_outfile(); Flushes the output file. fnocc(ref_wfn); Runs the FNO-CCSD(T)/QCISD(T)/MP4/CEPA energy code. get_active_molecule(); Returns the currently active molecule object. get_array_variable(key). Deprecated since version 1.4. get_array_variables(). Deprecated since version 1.4. get_atomic_point_charges(). Deprecated since version 1.4. get_datadir(); Returns the path to shared text resources, PSIDATADIR. get_global_option(key); Return keyword key value at global (all-module) scope. get_global_option_list(); Returns a list of all global options. get_gradient(). Deprecated since ver",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/psi4api-1.html:4487,optimiz,optimized,4487,psi4manual/1.5.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/psi4api-1.html,3,['optimiz'],['optimized']
Performance,"cluster response theory code. cctransort(ref_wfn); Runs cctransort that transforms and reorders integrals for use in the coupled cluster codes. cctriples(ref_wfn); Runs the coupled cluster (T) energy code. clean(); Remove scratch files. clean_options(); Reset options to clean state. clean_timers(); Reinitialize timers for independent timer.dat entries. clean_variables(); Empties all double and Matrix QCVariables that have been set in global memory. close_outfile(); Closes the output file. dct(ref_wfn); Runs the density cumulant (functional) theory code. del_array_variable(key); Removes the Matrix QCVariable key (case-insensitive); prefer del_variable(). del_scalar_variable(key); Removes the double QCVariable key (case-insensitive); prefer del_variable(). del_variable(key); Removes scalar or array QCVariable key from global memory if present. detci(ref_wfn); Runs the determinant-based configuration interaction code. dfmp2(ref_wfn); Runs the DF-MP2 code. dfocc(ref_wfn); Runs the density-fitted orbital optimized CC codes. dlpno(arg0); Runs the DLPNO codes. dmrg(ref_wfn); Runs the CheMPS2 interface DMRG code. doublet(A, B[, transA, transB]); Returns the multiplication of two matrices A and B, with options to transpose each beforehand. fcidump_tei_helper(nirrep, restricted, ...); Write integrals to file in FCIDUMP format. finalize(); Called upon psi4 module exit to closes timers and I/O. flush_outfile(); Flushes the output file. fnocc(ref_wfn); Runs the FNO-CCSD(T)/QCISD(T)/MP4/CEPA energy code. get_active_molecule(); Returns the currently active molecule object. get_array_variable(key). Deprecated since version 1.4. get_array_variables(). Deprecated since version 1.4. get_datadir(); Returns the path to shared text resources, PSIDATADIR. get_global_option(key); Return keyword key value at global (all-module) scope. get_global_option_list(); Returns a list of all global options. get_local_option(module, key); Return keyword key value at module scope. get_memory(); Returns",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/psi4api.html:4423,optimiz,optimized,4423,psi4manual/1.7.x/psi4api.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/psi4api.html,2,['optimiz'],['optimized']
Performance,"cluster response theory code. cctransort(ref_wfn); Runs cctransort that transforms and reorders integrals for use in the coupled cluster codes. cctriples(ref_wfn); Runs the coupled cluster (T) energy code. clean(); Remove scratch files. clean_options(); Reset options to clean state. clean_timers(); Reinitialize timers for independent timer.dat entries. clean_variables(); Empties all double and Matrix QCVariables that have been set in global memory. close_outfile(); Closes the output file. dct(ref_wfn); Runs the density cumulant (functional) theory code. del_array_variable(key); Removes the Matrix QCVariable key (case-insensitive); prefer del_variable(). del_scalar_variable(key); Removes the double QCVariable key (case-insensitive); prefer del_variable(). del_variable(key); Removes scalar or array QCVariable key from global memory if present. detci(ref_wfn); Runs the determinant-based configuration interaction code. dfmp2(ref_wfn); Runs the DF-MP2 code. dfocc(ref_wfn); Runs the density-fitted orbital optimized CC codes. dmrg(ref_wfn); Runs the CheMPS2 interface DMRG code. doublet(A, B, transA, transB); Returns the multiplication of two matrices A and B, with options to transpose each beforehand. fcidump_tei_helper(nirrep, restricted, …); Write integrals to file in FCIDUMP format. finalize(); Called upon psi4 module exit to closes timers and I/O. flush_outfile(); Flushes the output file. fnocc(ref_wfn); Runs the FNO-CCSD(T)/QCISD(T)/MP4/CEPA energy code. get_active_molecule(); Returns the currently active molecule object. get_array_variable(key). Deprecated since version 1.4. get_array_variables(). Deprecated since version 1.4. get_atomic_point_charges(). Deprecated since version 1.4. get_datadir(); Returns the path to shared text resources, PSIDATADIR. get_global_option(key); Return keyword key value at global (all-module) scope. get_global_option_list(); Returns a list of all global options. get_gradient(). Deprecated since version 1.2. get_legacy_gradient(); Return",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/psi4api-1.html:4439,optimiz,optimized,4439,psi4manual/1.4.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/psi4api-1.html,2,['optimiz'],['optimized']
Performance,"cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). psi4.gradient(name[, molecule, return_wfn, func, dertype])[source]; Function complementary to optimize(). Carries out one gradient pass,; deciding analytic or finite difference. Returns; Matrix – Total electronic gradient in Hartrees/Bohr. Returns; (Matrix, Wavefunction) – gradient and wavefunction when return_wfn specified. Examples. >>> # [1] Single-point dft gradient getting the gradient; >>> # in file, core.Matrix, and np.array forms; >>> set gradient_write on; >>> G, wfn = gradient('b3lyp-d', return_wfn=True); >>> wfn.gradient().print_out(); >>> np.array(G). «; hide menu. menu; sidebar; »; . Navigat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/opt-1.html:14138,optimiz,optimization,14138,psi4manual/1.4.0/opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/opt-1.html,5,['optimiz'],['optimization']
Performance,"cluster singles and doubles (CCSD). bccd; Brueckner coupled cluster doubles (BCCD). cc3; approximate coupled cluster singles, doubles, and triples (CC3). ccsd(t); CCSD with perturbative triples. bccd(t); BCCD with perturbative triples. ccenergy; expert full control over ccenergy module. mpn; nth-order Moller–Plesset perturbation theory. zaptn; nth-order z-averaged perturbation theory (ZAPT). cisd; configuration interaction (CI) singles and doubles (CISD). cisdt; CI singles, doubles, and triples (CISDT). cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ). cin; nth-order CI. fci; full configuration interaction (FCI). detci; expert full control over detci module. adc; 2nd-order algebraic diagrammatic construction (ADC). eom-cc2; EOM-CC2. eom-ccsd; equation of motion (EOM) CCSD. eom-cc3; EOM-CC3. cepa(n); coupled electron pair approximation, variants 0, 1, and 3. acpf; averaged coupled-pair functional. aqcc; averaged quadratic coupled cluster. omp2; orbital-optimized second order Moller–Plesset perturbation theory. scs-omp2; spin-component scaled OMP2. sos-omp2; spin-opposite scaled OMP2. omp3; orbital-optimized third order Moller–Plesset perturbation theory. scs-omp3; spin-component scaled OMP3. sos-omp3; spin-opposite scaled OMP3. name; calls method (aliases to name = ‘scf’). hf; HF. rhf; HF with restricted reference. uhf; HF with unrestricted reference. rohf; HF with restricted open-shell reference. rscf; HF or DFT with restricted reference. uscf; HF or DFT with unrestricted reference. roscf; HF or DFT with restricted open-shell reference. df-scf; HF or DFT with density fitting. name; calls method. b2plyp; B2PLYP Double Hybrid Exchange-Correlation Functional. b2plyp-d; B2PLYP Double Hybrid Exchange-Correlation Functional w/ Grimme’s -D2 Dispersion Correction. b2plyp-d3; B2PLYP Double Hybrid Exchange-Correlation Functional w/ Grimme’s -D3 (zero-damping) Dispersion Correction. b2plyp-d3bj; B2PLYP Double Hybrid Exchange-Correlation Functional w/ Grimme’s -D3 (",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/energy-1.html:2214,optimiz,optimized,2214,psi4manual/4.0b3/energy-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/energy-1.html,2,['optimiz'],['optimized']
Performance,"code ». Source code for driver; #; #@BEGIN LICENSE; #; # PSI4: an ab initio quantum chemistry software package; #; # This program is free software; you can redistribute it and/or modify; # it under the terms of the GNU General Public License as published by; # the Free Software Foundation; either version 2 of the License, or; # (at your option) any later version.; #; # This program is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU General Public License for more details.; #; # You should have received a copy of the GNU General Public License along; # with this program; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; #@END LICENSE; #. from __future__ import print_function; """"""Module with a *procedures* dictionary specifying available quantum; chemical methods and functions driving the main quantum chemical; functionality, namely single-point energies, geometry optimizations,; properties, and vibrational frequency calculations. """"""; import sys; import psi4; import p4util; import p4const; from proc import *; from functional import *; from p4regex import *; # never import wrappers or aliases into this file. # Procedure lookup tables; procedures = {; 'energy': {; 'scf' : run_scf,; 'mcscf' : run_mcscf,; 'dcft' : run_dcft,; 'oldmp2' : run_oldmp2,; 'dfmp2' : run_dfmp2,; 'df-mp2' : run_dfmp2,; 'conv-mp2' : run_mp2,; 'mp3' : run_mp3,; 'mp2.5' : run_mp2_5,; 'mp2' : run_mp2_select,; 'omp2' : run_omp2,; 'scs-omp2' : run_scs_omp2,; 'scsn-omp2' : run_scs_omp2,; 'scs-mi-omp2' : run_scs_omp2,; 'scs-omp2-vdw' : run_scs_omp2,; 'sos-omp2' : run_sos_omp2,; 'sos-pi-omp2' : run_sos_omp2,; 'omp3' : run_omp3,; 'scs-omp3' : run_scs_omp3,; 'scsn-omp3' : run_scs_omp3,; 'scs-mi-omp3' : run_scs_omp3,; 'scs-omp3-vdw' : run_scs_omp3,; 'sos-omp3' : run_sos_omp3,; 'sos-pi-omp3' : run_sos_omp3,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/driver.html:1187,optimiz,optimizations,1187,psi4manual/4.0b5/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/driver.html,1,['optimiz'],['optimizations']
Performance,"command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; @UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; --------------------------------------------------------------------------------------------------------------- ~; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/tutorial-1.html:5146,optimiz,optimize,5146,psi4manual/1.0.0/tutorial-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/tutorial-1.html,6,['optimiz'],['optimize']
Performance,"command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; @UHF Final Energy: -38.92533462456894. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; --------------------------------------------------------------------------------------------------------------- ~; Step Total Ener",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/tutorial.html:5799,optimiz,optimize,5799,psi4manual/master/tutorial.html,https://psicode.org,https://psicode.org/psi4manual/master/tutorial.html,9,['optimiz'],['optimize']
Performance,"command psi4 input.dat output.dat; (actually, because psi4 by default looks for an input file named; input.dat and writes by default to a file called output.dat, in this; case one could also just type psi4). If it works, it should print; the final energy as; @UHF Final Energy: -38.92534160932308. Notice we added a new keyword, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt.; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After about 4 cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; ----------------------------------------------------------------------; Step Energy Delta(E) MAX force MAX Delta(q); ------------------",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/tutorial-1.html:4328,optimiz,optimize,4328,psi4manual/4.0b3/tutorial-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/tutorial-1.html,4,['optimiz'],['optimize']
Performance,"computation. A representative example is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18memory 512 MB. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # IP fitting runs in C1 symmetry; }. set {; reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; }. # Optional arguments are minimum omega, maximum omega, molecule object; omega = ip_fitting('wb97', 0.4, 2.0, molecule=h2o). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various values; of \(\omega\), though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; \(\omega\). The procedure can also be assisted by providing a tighter guess; for the bounds of \(\omega\). This small test case has a tuned; \(\omega\) of 1.700, hence the bounds of 0.4 and 2.0. Larger systems,; particularly conjugated systems, will typically have an optimized \(\omega\); between 0.1 and 0.5. Fractional Particle Curves¶; The behavior of the electronic energy and HOMO energy across fractional numbers; of electrons is extremely useful for elucidating the MSIE behavior of various; functional technologies. PSI4 features an efficient fractional-particle DFT; code, written into the UKS spin specialization. Due to a combination of DIIS and; reuse of integrals/guess orbitals across a range of fractional occupations, this; code is able to perform fractional occupation curves for systems with up to 60; atoms, across a wide range of the particle number \(N\).; Two python macros exist for this code. The first is frac_traverse(), which is; used to investigate the fractional occupation behavior within one electron above; and below the neutral. An example is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # FRAC jobs will be be run in C1 symmetry; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/dft-1.html:24075,optimiz,optimized,24075,psi4manual/1.2.1/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/dft-1.html,4,['optimiz'],['optimized']
Performance,computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual]. hf; HF self consistent field (SCF) [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual]. omp2.5; orbital-optimized MP2.5 [manual]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual]. ccd; coupled cluster doubles (CCD) [manual]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj. b3lyp-d3mbj. b3lyp-nl; B3LYP-nl Hyb-GGA Exchange-Correlation Functional. b3lyp5; B3LYP5 Hyb-GGA Exchange-Correlation Functional. b3lyps; B3LYPs Hyb-GGA Exchange-Correlation Functional. b3p86; B3P86 Hyb-GGA Exchange-Correlation Functional. b3p86-d3bj. b3pw91; B3PW91 Hyb-GGA Exchange-Correlation Functional. b3pw91-d3bj. b3pw91-nl; B3PW91-nl Hyb-GGA Exchange-Correlation Functional. b5050lyp; ,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.opt-1.html:3153,optimiz,optimized,3153,psi4manual/1.4.0/api/psi4.driver.opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.opt-1.html,15,['optimiz'],['optimized']
Performance,"computations require ""reference rhf"".""""""). # stash user options:; optstash = OptionsState(; ['FNOCC','COMPUTE_TRIPLES'],; ['FNOCC','COMPUTE_MP4_TRIPLES'],; ['FREEZE_CORE'],; ['SCF','SCF_TYPE']). # override default scf_type; PsiMod.set_local_option('SCF','SCF_TYPE','OUT_OF_CORE'). # optimize geometry at scf level; PsiMod.clean(); PsiMod.set_global_option('BASIS',""6-31G(D)""); optimize('scf'); PsiMod.clean(). # scf frequencies for zpe; frequency('scf'). # thermodynamic properties; du = PsiMod.get_variable('INTERNAL ENERGY CORRECTION'); dh = PsiMod.get_variable('ENTHALPY CORRECTION'); dg = PsiMod.get_variable('GIBBS FREE ENERGY CORRECTION'). ref = PsiMod.wavefunction(); freqs = ref.frequencies(); nfreq = freqs.dim(0); freqsum = 0.0; for i in range (0,nfreq):; freqsum += freqs.get(i); zpe = freqsum / psi_hartree2wavenumbers * 0.8929 * 0.5; PsiMod.clean(). # optimize geometry at mp2 (no frozen core) level; # note: freeze_core isn't an option in MP2; PsiMod.set_global_option('FREEZE_CORE',""FALSE""); optimize('conv-mp2'); PsiMod.clean(). # qcisd(t); PsiMod.set_local_option('FNOCC','COMPUTE_MP4_TRIPLES',""TRUE""); PsiMod.set_global_option('FREEZE_CORE',""TRUE""); PsiMod.set_global_option('BASIS',""6-311G(D_P)""); run_fnocc('qcisd(t)',**kwargs). # HLC: high-level correction based on number of valence electrons; ref = PsiMod.wavefunction(); nirrep = ref.nirrep(); frzcpi = ref.frzcpi(); nfzc = 0; for i in range (0,nirrep):; nfzc += frzcpi[i]; nalpha = ref.nalpha() - nfzc; nbeta = ref.nbeta() - nfzc; # hlc of gaussian-2; hlc = -0.00481 * nalpha -0.00019 * nbeta; # hlc of gaussian-1; hlc1 = -0.00614 * nalpha. eqci_6311gdp = PsiMod.get_variable(""QCISD(T) TOTAL ENERGY""); emp4_6311gd = PsiMod.get_variable(""MP4 TOTAL ENERGY""); emp2_6311gd = PsiMod.get_variable(""MP2 TOTAL ENERGY""); PsiMod.clean(). # correction for diffuse functions; PsiMod.set_global_option('BASIS',""6-311+G(D_P)""); energy('mp4'); emp4_6311pg_dp = PsiMod.get_variable(""MP4 TOTAL ENERGY""); emp2_6311pg_dp = PsiMod.get_variable(""M",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html:1550,optimiz,optimize,1550,psi4manual/4.0b4/_modules/gaussian_n.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/gaussian_n.html,1,['optimiz'],['optimize']
Performance,"computations. Defaults to a JKFIT basis. Type: string; Possible Values: basis string; Default: No Default. DF_SCF_GUESS¶. Do a density fitting SCF calculation to converge the orbitals before switching to the use of exact integrals in a SCF_TYPE DIRECT calculation. Type: boolean; Default: true. GUESS¶. The type of guess orbitals. Defaults to READ for geometry optimizations after the first step, to CORE for single atoms, and to SAD otherwise. The HUCKEL guess employs on-the-fly calculations like SAD, as described in doi:10.1021/acs.jctc.8b01089 which also describes the SAP guess. Type: string; Possible Values: AUTO, CORE, GWH, SAD, SADNO, SAP, HUCKEL, READ; Default: AUTO. GUESS_MIX¶. Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST¶. If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. INTS_TOLERANCE¶. Schwarz screening threshold. Mininum absolute value below which TEI are neglected. Type: conv double; Default: 1e-12. MAX_MEM_BUF¶. Max memory per buf for PK algo REORDER, for debug and tuning. Type: integer; Default: 0. MOLDEN_WRITE¶. Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ORBITALS_WRITE¶. File name (case sensitive) to which to serialize Wavefunction orbital data. Type: string; Default: No Default. PRINT_BASIS¶. Do print the basis set?. Type: boolean; Default: false. PRINT_MOS¶. Do print the molecular orbitals?. Type: boolean; Default: false. QCHF¶. Do perform a QCHF computation?. Type: boolean; Default: false. REFERENCE¶. Reference wavefunction type. Cfour Interface: Keyword tran",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__scf-1.html:1637,optimiz,optimization,1637,psi4manual/1.4.0/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__scf-1.html,2,['optimiz'],['optimization']
Performance,"computations. Defaults to a JKFIT basis. Type: string; Possible Values: basis string; Default: No Default. DF_SCF_GUESS¶. Do a density fitting SCF calculation to converge the orbitals before switching to the use of exact integrals in a SCF_TYPE DIRECT calculation. Type: boolean; Default: true. GUESS¶. The type of guess orbitals. Defaults to READ for geometry optimizations after the first step, to CORE for single atoms, and to SAD otherwise. The HUCKEL guess employs on-the-fly calculations like SAD, as described in doi:10.1021/acs.jctc.8b01089 which also describes the SAP guess. Type: string; Possible Values: AUTO, CORE, GWH, SAD, SADNO, SAP, HUCKEL, READ; Default: AUTO. GUESS_MIX¶. Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST¶. If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. INTS_TOLERANCE¶. Screening threshold for the chosen screening method (SCHWARZ, CSAM, DENSITY) Absolute value below which TEI are neglected. Type: conv double; Default: 1e-12. MAX_MEM_BUF¶. Max memory per buf for PK algo REORDER, for debug and tuning. Type: integer; Default: 0. MOLDEN_WRITE¶. Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ORBITALS_WRITE¶. File name (case sensitive) to which to serialize Wavefunction orbital data. Type: string; Default: No Default. PRINT_BASIS¶. Do print the basis set?. Type: boolean; Default: false. PRINT_MOS¶. Do print the molecular orbitals?. Type: boolean; Default: false. QCHF¶. Do perform a QCHF computation?. Type: boolean; Default: false. REFERENCE¶. Reference wavefunc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__scf-1.html:1637,optimiz,optimization,1637,psi4manual/1.5.0/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__scf-1.html,4,['optimiz'],['optimization']
Performance,"computed) > thresh:; print(""\t%s: computed value (%f) does not match (%f) to %f digits."" % (label, computed, expected, digits)); if exitonfail:; sys.exit(1); else:; return; if math.isnan(computed):; print(""\t%s: computed value (%f) does not match (%f)\n"" % (label, computed, expected)); print(""\tprobably because the computed value is nan.""); if exitonfail:; sys.exit(1); else:; return; _success(label). [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; print(""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); sys.exit(1); _success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if(expected != computed):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); sys.exit(1); _success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; rows = len(expected); cols = len(expected[0]); failed = 0; for row in range(rows):; for col in range(cols):; if abs(expected[row][col] - computed[row][col]) > 10 ** (-digits):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, expected[row][col], computed[row][col])); failed = 1; break. if failed:; print(""The Failed Test Matrices\n""); show(computed); print('\n'); show(expected); sys.exit(1); _success(label).",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/psiutil.html:2939,Perform,Performs,2939,psi4manual/1.0.0/_modules/qcdb/psiutil.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/psiutil.html,1,['Perform'],['Performs']
Performance,"cond one is used in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS¶. Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS¶. Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION¶. Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE¶. Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD¶. Specifies the strength of a Fermi-Contact pertubation as required for fi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:21191,optimiz,optimization,21191,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,2,['optimiz'],['optimization']
Performance,"cond one is used in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS¶. Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS¶. Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION¶. Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE¶. Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD¶. Specifies the strength of a Fermi-Contact perturbation as required for f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html:21341,optimiz,optimization,21341,psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,2,['optimiz'],['optimization']
Performance,"conscientiously. If using the environment variable PSI_SCRATCH is inconvenient,; or if some psi4_io commands must be present in all input files,; the ~/.psi4rc resource file can be used (example psi4/samples/example_psi4rc_file).; All the commands mentioned in section Scratch Files and Elementary Restart can be used in this file.; To set up the scratch path:; 1psi4_io.set_default_path('/scratch/user'). To set up the scratch path from a variable $MYSCRATCH:; 1; 2; 3; 4import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). To set up a specific path for the checkpoint file and instruct PSI4 not to delete it:; 1; 2; 3; 4; 5; 6psi4_io.set_specific_path(32, './'); psi4_io.set_specific_retention(32, True). # equivalent to above; psi4_io.set_specific_path(PSIF_CHKPT, './'); psi4_io.set_specific_retention(PSIF_CHKPT, True). The Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. As a consequence, the commands in the input files supersede; any instructions in the ~/.psi4rc file. During; execution, the ~/.psi4rc defaults will be loaded in first, but then the commands; in the input file will be executed.; The ~/.psi4rc file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every PSI4 instance. Threading¶; Most new modules in PSI4 are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for PSI4; involves using threaded BLAS/LAPACK (particularly Intel’s excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and C++; std::thread for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/external-1.html:9647,perform,performing,9647,psi4manual/1.3.2/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html,2,['perform'],['performing']
Performance,"consider an overlap; integral: its value depends only on the relative separation of the two centers; and not their absolute positions in space. Therefore, the derivative with; respect to center A is the negative of the same derivative with respect to; center B, so one is trivially gleaned from the other. Extending this to second; derivatives, the same principle leads to the fact that double derivatives with; respect to center A are equal to double derivatives with respect to center B,; which are also equal to the negative of the mixed double derivatives with; respect to both center A and B. The old code only provided the double; derivative with respect to center A, leaving the caller to determine the other; values. The Libint2 engine instead provides all integrals, so the caller; simply needs to loop over all of the buffers provided in the appropriate order. Changes to External Potential Engines¶; Benchmarking showed that early versions of the old code spent a non-negligible; amount of time performing the Cartesian to spherical harmonic transformation of; the integrals, which is needed for most modern basis sets. To improve; performance, we instead backtransformed the density to the Cartesian; representation (denoted “CartAO”) and computed / contracted all integrals in; this Cartesian basis, eliminating the need to transform to spherical harmonics; as the integrals are computed. This bottleneck no longer exists, so these; extra transformation steps have been removed as part of the switch to Libint2,; and the affected codes (PCM and CPPE interfaces) now compute the potential and; field integrals in the representation required by the basis set.; Also, note that the way external point charges are specified has changed.; Previously, a set of N external point charges would be specified by passing a; matrix with dimensions N rows and 4 columns – corresponding to charge, x, y, z; – to the set_charge_field() member of the potential integral class. The; same information is n",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/prog_integrals.html:15065,perform,performing,15065,psi4manual/master/prog_integrals.html,https://psicode.org,https://psicode.org/psi4manual/master/prog_integrals.html,5,['perform'],['performing']
Performance,"conventional MPn computations. General¶. CC_DIIS_MAX_VECS¶. Maximum number of vectors used in amplitude DIIS. Type: integer; Default: 6. CC_DIIS_MIN_VECS¶. Minimum number of vectors used in amplitude DIIS. Type: integer; Default: 2. CC_LAMBDA¶. Do solve lambda amplitude equations?. Type: boolean; Default: false. CC_MAXITER¶. Maximum number of iterations to determine the amplitudes. Type: integer; Default: 50. CHOLESKY¶. Do Cholesky decomposition of the ERI tensor. Type: boolean; Default: false. CHOLESKY_TOLERANCE¶. tolerance for Cholesky decomposition of the ERI tensor. Type: conv double; Default: 1.0e-4. COMPUT_S2¶. Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. CUTOFF¶. Cutoff value for numerical procedures. Type: integer; Default: 8. DO_DIIS¶. Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_LEVEL_SHIFT¶. Do apply level shifting?. Type: boolean; Default: true. DO_SCS¶. Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SOS¶. Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. E3_SCALE¶. CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. EKT_IP¶. Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. HESS_TYPE¶. Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_EKT, APPROX_DIAG_HF",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__dfocc-1.html:1136,perform,perform,1136,psi4manual/1.1.0/autodir_options_c/module__dfocc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__dfocc-1.html,15,['perform'],['perform']
Performance,"convergence in the SCF code, but not the rest of the code), it can be set by prefixing the option name with; [MODULE]__, for example psi4.set_options('scf__e_convergence': 1e-8}).; Note: The arguments to the functions we’ve used so far, like psi4.set_options() API, psi4.energy() API, psi4.optimize() API, psi4.frequency(); API, etc., are case-insensitive.; Back to our SAPT example, we have found that for basic-level SAPT computations (i.e., SAPT0), a good error cancellation is found (Hohenstein:2012:WIREs) with the jun-cc-pVDZ basis (this is the usual aug-cc-pVDZ basis, but without diffuse functions on hydrogen and without diffuse \(d\) functions on heavy atoms) (Papajak:2011:10). So,; we’ll use that as our standard basis set. The SAPT code is designed to use density fitting techniques, because they introduce minimal errors while providing much faster computations (Hohenstein:2010:184111,Hohenstein:2010:014101). Since we’re using density fitting for the SAPT, we might as well also use it for the Hartree-Fock; computations that are performed as part of the SAPT. We can specify that by adding 'scf_type': 'df' to the dictionary passed to psi4.set_options().; Density fitting procedures require the use of auxiliary basis sets that pair with the primary basis set. Fortunately, Psi4 is usually smart enough to figure out what auxiliary basis sets are needed for a given computation. In this case, jun-cc-pVDZ is a standard enough basis set (just a simple truncation of the very popular aug-cc-pVDZ basis set) that Psi4 correctly guesses that we want the jun-cc-pVDZ-JKFIT auxiliary basis for the Hartree-Fock, and the jun-cc-pVDZ-RI basis set for the SAPT; procedure.; To speed up the computation a little, we also tell the SAPT procedure to freeze the core electrons by adding 'freeze_core': 'true' to the dictionary passed to psi4.set_options(). The SAPT procedure is invoked by psi4.energy('sapt0/jun-cc-pvdz', molecule=dimer). Here, Psi4 knows to automatically run two monomer comput",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/psiapi.html:13762,perform,performed,13762,psi4manual/master/psiapi.html,https://psicode.org,https://psicode.org/psi4manual/master/psiapi.html,2,['perform'],['performed']
Performance,"coordinates. In the simplest default case, the lines; above simply define combination coordinates which are identical to the simple internals.; If OPT_COORDINATES specifies delocalized coordinates, then the combinations; will be more complex.; Since the multiple-fragment coordinates are still under; development, they are not documented here. However, if desired, one can change the value; of FRAG_MODE, generate the internal coordinates, and see how multiple; fragment systems are defined.; Coordinates may be frozen by adding an asterisk after the letter of the coordinate. The; asterisk results in that internal coordinate being frozen at its initial value. The; “intco” file below for water specifies an optimization with both O-H bonds frozen.:; 1; 2; 3; 4F 1 3; R* 1 2; R* 1 3; B 2 1 3. If one instead wishes to optimize toward (“fix”) a value that is not satisfied by the; initial structure, then the value is added to the end of the line. The following; corresponds to an optimization that will add additional forces to move the O-H bonds; to 1.70 au.; 1; 2; 3; 4F 1 3; R 1 2 1.70; R 1 3 1.70; B 2 1 3. Convergence Criteria¶; Optking monitors five quantities to evaluate the progress of a geometry; optimization. These are (with their keywords) the change in energy; (MAX_ENERGY_G_CONVERGENCE), the maximum element of; the gradient (MAX_FORCE_G_CONVERGENCE), the root-mean-square; of the gradient (RMS_FORCE_G_CONVERGENCE), the maximum element; of displacement (MAX_DISP_G_CONVERGENCE), and the; root-mean-square of displacement (RMS_DISP_G_CONVERGENCE),; all in internal coordinates and atomic units. Usually, these options will not; be set directly. Primary control for geometry convergence lies with the keyword; G_CONVERGENCE which sets the aforementioned in accordance; with Table Geometry Convergence. Summary of sets of geometry optimization criteria available in PSI4¶. G_CONVERGENCE; Max Energy; Max Force; RMS Force; Max Disp; RMS Disp. NWCHEM_LOOSE [4];  ; \(4.5 \times 10^{-3}\); ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/optking-1.html:11006,optimiz,optimization,11006,psi4manual/1.1.0/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/optking-1.html,6,['optimiz'],['optimization']
Performance,"copy(restartfile, get_psifile(1)). # print 'full_hess_every', full_hess_every; # print 'steps_since_last_hessian', steps_since_last_hessian; # compute Hessian as requested; frequency wipes out gradient so stash it; if ((full_hess_every > -1) and (n == 1)) or (steps_since_last_hessian + 1 == full_hess_every):; G = PsiMod.get_gradient(); PsiMod.IOManager.shared_object().set_specific_retention(1, True); PsiMod.IOManager.shared_object().set_specific_path(1, './'); frequencies(name, **kwargs); steps_since_last_hessian = 0; PsiMod.set_gradient(G); PsiMod.set_global_option('CART_HESS_READ', True); elif ((full_hess_every == -1) and (PsiMod.get_global_option('CART_HESS_READ')) and (n == 1)):; pass; # Do nothing; user said to read existing hessian once; else:; PsiMod.set_global_option('CART_HESS_READ', False); steps_since_last_hessian += 1. # print 'cart_hess_read', PsiMod.get_global_option('CART_HESS_READ'); # Take step; if PsiMod.optking() == PsiMod.PsiReturnType.EndLoop:; print('Optimizer: Optimization complete!'); PsiMod.get_active_molecule().print_in_input_format(); # Check if user wants to see the intcos; if so, don't delete them.; if (PsiMod.get_option('OPTKING', 'INTCOS_GENERATE_EXIT') == False):; PsiMod.opt_clean(); PsiMod.clean(). # S/R: Clean up opt input file; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; fmaster = open('OPT-master.in', 'w'); fmaster.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); fmaster.write('# Optimization complete!\n\n'); fmaster.close(). optstash.restore(); return thisenergy. PsiMod.print_out('\n Structure for next step:\n'); PsiMod.get_active_molecule().print_out_in_angstrom(). # S/R: Preserve opt data file for next pass and switch modes to get new displacements; if ('mode' in kwargs) and (kwargs['mode'].lower() == 'reap'):; kwargs['opt_datafile'] = get_psifile(1); kwargs['mode'] = 'sow'. n += 1. PsiMod.print_out('\tOptimizer: Did not converge!'); optstash.restore(); return 0.0. ## Alias",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/driver.html:40918,Optimiz,Optimizer,40918,psi4manual/4.0b3/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/driver.html,2,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,"core.Dimension method, [1], [2]. tocclean() psi4.core.IO method, [1], [2]. tocentry_exists() psi4.core.IO method, [1], [2]. tocprint() psi4.core.IO method, [1], [2]. tocwrite() psi4.core.IO method, [1], [2]. TPDM (DETCI). tpdm() psi4.core.CIWavefunction method, [1], [2]. TPDM_ABCD_TYPE (OCC). trace() psi4.core.Matrix method, [1], [2]. psi4.core.SymmetryOperation method, [1], [2]. TracelessQuadrupoleInt class in psi4.core, [1]. transform() psi4.core.DFHelper method, [1], [2]. psi4.core.Matrix method, [1], [2]. psi4.core.SymmetryOperation method, [1], [2]. transform_ci_integrals() psi4.core.CIWavefunction method, [1], [2]. transform_mcscf_integrals() psi4.core.CIWavefunction method, [1], [2]. transform_oei() psi4.core.IntegralTransform method, [1], [2]. transform_tei() psi4.core.IntegralTransform method, [1], [2]. transform_tei_first_half() psi4.core.IntegralTransform method, [1], [2]. transform_tei_second_half() psi4.core.IntegralTransform method, [1], [2]. transition state. ; geometry optimization. translate() psi4.core.Molecule method, [1], [2]. TRANSLATE_PSI4 (CFOUR). transpose() psi4.core.DFHelper method, [1], [2]. psi4.core.Matrix method, [1], [2]. psi4.core.SymmetryOperation method, [1], [2]. transpose_this() psi4.core.Matrix method, [1], [2]. TRIPLES_ALGORITHM (PSIMRCC). TRIPLES_DIIS (PSIMRCC). TRIPLES_IABC_TYPE (DFOCC). TRIPLES_LOW_MEMORY (FNOCC). triplet() psi4.core.Matrix method, [1], [2]. tstart() in module psi4.core, [1]. tstop() in module psi4.core, [1]. TURN_ON_ACTV (MCSCF). TWO-ELECTRONENERGY. TwoBodyAOInt class in psi4.core, [1]. twoel_Hx() psi4.core.CUHF method, [1]. psi4.core.HF method, [1], [2]. psi4.core.RHF method, [1]. psi4.core.ROHF method, [1]. psi4.core.UHF method, [1]. TwoElectronInt class in psi4.core, [1]. U. U psi4.core.BoysLocalizer attribute, [1]. psi4.core.Localizer attribute, [1], [2]. psi4.core.PMLocalizer attribute, [1]. UHF class in psi4.core, [1]. UHF_NOONS (SCF). UKSFunctions class in psi4.core, [1]. UNCP-CORRECTED2-BODYINTERACTIO",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/genindex-1.html:123454,optimiz,optimization,123454,psi4manual/1.2.1/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/genindex-1.html,2,['optimiz'],['optimization']
Performance,"core.IOManager.shared_object().set_specific_retention(1, True); core.IOManager.shared_object().set_specific_path(1, './'); frequencies(hessian_with_method, molecule=moleculeclone, ref_gradient=G, **kwargs); steps_since_last_hessian = 0; core.set_legacy_gradient(G); core.set_global_option('CART_HESS_READ', True); elif (full_hess_every == -1) and core.get_global_option('CART_HESS_READ') and (n == 1):; pass; # Do nothing; user said to read existing hessian once; else:; core.set_global_option('CART_HESS_READ', False); steps_since_last_hessian += 1. # Take step. communicate to/from/within optking through legacy_molecule; core.set_legacy_molecule(moleculeclone); optking_rval = core.optking(); moleculeclone = core.get_legacy_molecule(); moleculeclone.update_geometry(); if optking_rval == core.PsiReturnType.EndLoop:; # if this is the end of an IRC run, set wfn, energy, and molecule to that; # of the last optimized IRC point; if core.get_option('OPTKING', 'OPT_TYPE') == 'IRC':; thisenergy = old_thisenergy; print('Optimizer: Optimization complete!'); core.print_out('\n Final optimized geometry and variables:\n'); moleculeclone.print_in_input_format(); # Mark the optimization data as disposable now that the optimization is done.; core.IOManager.shared_object().set_specific_retention(1, False); # Check if user wants to see the intcos; if so, don't delete them.; if not core.get_option('OPTKING', 'INTCOS_GENERATE_EXIT'):; if not core.get_option('OPTKING', 'KEEP_INTCOS'):; core.opt_clean(); # Changing environment to optimized geometry as expected by user; molecule.set_geometry(moleculeclone.geometry()); for postcallback in hooks['optimize']['post']:; postcallback(lowername, wfn=wfn, **kwargs); core.clean(). # Cleanup binary file 1; if custom_gradient or ('/' in lowername) or kwargs.get('bsse_type', None) is not None:; core.IOManager.shared_object().set_specific_retention(1, False). optstash.restore(). if return_history:; history = {; 'energy': step_energies,; 'gradient': step_gradi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html:67379,Optimiz,Optimizer,67379,psi4manual/1.6.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html,2,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,"core.Matrix) → None; Computes the inverse of any nonsingular matrix using LU factorization. get(*args, **kwargs); Overloaded function. get(self: psi4.core.Matrix, h: int, m: int, n: int) -> float. Returns a single element of a matrix in subblock h, row m, col n. get(self: psi4.core.Matrix, m: int, n: int) -> float. Returns a single element of a matrix, row m, col n. get_block(self: psi4.core.Matrix, rows: psi4.core.Slice, cols: psi4.core.Slice) → psi4.core.Matrix; Get a matrix block. hermitivitize(self: psi4.core.Matrix) → None; Average off-diagonal element in-place. hermitize(self: psi4.core.Matrix) → None; Makes a real matrix symmetric by averaging the matrix and its transpose. identity(self: psi4.core.Matrix) → None; Sets the matrix to the identity. invert(self: psi4.core.Matrix) → None; Computes the inverse of a real symmetric positive definite matrix. load(*args, **kwargs); Overloaded function. load(self: psi4.core.Matrix, filename: str) -> None. Loads a block matrix from an ASCII file (see tests/mints3 for format). load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, tocentry: str, nso: int) -> bool. Load a matrix from a PSIO object from fileno with tocentry of size nso. load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, savetype: psi4.core.SaveType=SaveType.LowerTriangle) -> None. Load a matrix from a PSIO object from fileno and with toc position of the name of the matrix. load_mpqc(self: psi4.core.Matrix, filename: str) → None; Loads a matrix from an ASCII file in MPQC format. name; The name of the Matrix. Used in printing. nirrep(self: psi4.core.Matrix) → int; Returns the number of irreps. np; View without only one irrep. classmethod np_read(filename, prefix=''); Reads the data from a NumPy compress file. np_write(filename=None, prefix=''); Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. nph; View with irreps. partial_cholesky_factorize(self: psi4.core.Matrix, delt",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:21430,Load,Loads,21430,psi4manual/1.3.2/api/psi4.core.matrix.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html,1,['Load'],['Loads']
Performance,"core.PointFunctions method, [1], [2]. psi4.core.RKSFunctions method, [1]. psi4.core.UKSFunctions method, [1]. OrbitalSpace class in psi4.core, [1]. orientation() psi4.core.DFTGrid method, [1]. psi4.core.MolecularGrid method, [1], [2]. orientation_fixed() psi4.core.Molecule method, [1], [2]. origin psi4.core.AngularMomentumInt attribute, [1]. psi4.core.DipoleInt attribute, [1]. psi4.core.ElectricFieldInt attribute, [1]. psi4.core.ElectrostaticInt attribute, [1]. psi4.core.KineticInt attribute, [1]. psi4.core.MultipoleInt attribute, [1]. psi4.core.NablaInt attribute, [1]. psi4.core.OneBodyAOInt attribute, [1], [2]. psi4.core.OverlapInt attribute, [1]. psi4.core.PotentialInt attribute, [1]. psi4.core.PseudospectralInt attribute, [1]. psi4.core.QuadrupoleInt attribute, [1]. psi4.core.TracelessQuadrupoleInt attribute, [1]. original_coef() psi4.core.GaussianShell method, [1], [2]. ORTH_TYPE (DFOCC). (OCC). outfile_name() in module psi4.core, [1]. output. ; SAPT. cbs(). database(). geometry optimization. vibrational analysis. overlap_3c() psi4.core.IntegralFactory method, [1], [2]. OVERLAP_CHECK (CCEOM). overlap_grad() psi4.core.MintsHelper method, [1], [2]. OverlapInt class in psi4.core, [1]. P. p psi4.core.AOShellCombinationsIterator attribute, [1], [2]. P (THERMO). PAIR_ENERGIES_PRINT (CCENERGY). PARALLEL (SCF). parallel operation. ParsingError. partial_cholesky_factorize() psi4.core.Matrix method, [1], [2]. pasture_required_modules psi4.driver.PastureRequiredError attribute. PastureRequiredError. PATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32], [33], [34], [35], [36], [37]. PBS queueing system. PCG_BETA_TYPE (DFOCC). (OCC). PCG_CONVERGENCE (DFOCC). (OCC). PCG_MAXITER (DFOCC). (OCC). PCM. Using PCM. PCM (GLOBALS). PCM_CC_TYPE (GLOBALS). pcm_helper() in module psi4.driver. PCM_SCF_TYPE (GLOBALS). PCMSolver. PCMSOLVER_PARSED_FNAME (GLO",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/genindex-1.html:89329,optimiz,optimization,89329,psi4manual/1.2.1/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/genindex-1.html,2,['optimiz'],['optimization']
Performance,"core.SuperFunctional method. C_left_add() psi4.core.DirectJK method. psi4.core.JK method. psi4.core.MemDFJK method. c_omega() psi4.core.SuperFunctional method. c_os_alpha() psi4.core.SuperFunctional method. C_right_add() psi4.core.DirectJK method. psi4.core.JK method. psi4.core.MemDFJK method. c_ss_alpha() psi4.core.SuperFunctional method. Ca() psi4.core.CCWavefunction method. psi4.core.CIWavefunction method. psi4.core.CUHF method. psi4.core.DFEP2Wavefunction method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.SADGuess method. psi4.core.UHF method. psi4.core.Wavefunction method. Ca_subset() psi4.core.CCWavefunction method. psi4.core.CIWavefunction method. psi4.core.CUHF method. psi4.core.DFEP2Wavefunction method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. psi4.core.Wavefunction method. CACHELEVEL (ADC). (CCDENSITY). (CCENERGY). (CCEOM). (CCHBAR). (CCLAMBDA). (CCRESPONSE). (CCTRANSORT). (DCT). (OCC). CACHETYPE (CCENERGY). (CCEOM). CALC_S_SQUARED (DETCI). CANONICALIZE_ACTIVE_FAVG (MCSCF). CANONICALIZE_INACTIVE_FAVG (MCSCF). CART_HESS_READ (OPTKING). Cartesian psi4.core.GaussianType attribute. Cb() psi4.core.CCWavefunction method. psi4.core.CIWavefunction method. psi4.core.CUHF method. psi4.core.DFEP2Wavefunction method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.SADGuess method. psi4.core.UHF method. psi4.core.Wavefunction method. Cb_subset() psi4.core.CCWavefunction method. psi4.core.CIWavefunction method. psi4.core.CUHF method. psi4.core.DFEP2Wavefunction method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. psi4.core.Wavefunction method. CBS CORRELATION ENERGY. CBS REFERENCE ENERGY. CBS TOTAL ENERGY. cbs(). ; extrapolation schemes. output. setting keywords. theory, [1], [2]. cbs() in module psi4.driver. CC. ; theory. CC (DETCI). CC CORRELATION ENERGY. CC D1 DIAGNOSTIC. CC D2 DIAGNOSTIC. CC DIPOLE. CC DIPOLE X. CC DI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/genindex-1.html:16801,CACHE,CACHETYPE,16801,psi4manual/1.5.0/genindex-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/genindex-1.html,2,['CACHE'],['CACHETYPE']
Performance,"core.print_out(instructions). # Loop through chemical systems; ERGT = {}; ERXN = {}; VRGT = {}; VRXN = {}; for rgt in HSYS:; VRGT[rgt] = {}. core.print_out('\n'); p4util.banner(' Database {} Computation: Reagent {} \n {}'.format(db_name, rgt, TAGL[rgt])); core.print_out('\n'). molecule = core.Molecule.from_dict(GEOS[rgt].to_dict()); molecule.set_name(rgt); molecule.update_geometry(). if symmetry_override:; molecule.reset_point_group('c1'); molecule.fix_orientation(True); molecule.fix_com(True); molecule.update_geometry(). if (openshell_override) and (molecule.multiplicity() != 1):; if user_reference == 'RHF':; core.set_global_option('REFERENCE', 'UHF'); elif user_reference == 'RKS':; core.set_global_option('REFERENCE', 'UKS'). core.set_global_option('WRITER_FILE_LABEL', user_writer_file_label + ('' if user_writer_file_label == '' else '-') + rgt). if allowoptexceeded:; try:; ERGT[rgt] = func(molecule=molecule, **kwargs); except ConvergenceError:; core.print_out(f""Optimization exceeded cycles for {rgt}""); ERGT[rgt] = 0.0; else:; ERGT[rgt] = func(molecule=molecule, **kwargs); core.print_variables(); core.print_out("" Database Contributions Map:\n {}\n"".format('-' * 75)); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn); if rgt in ACTV[db_rxn]:; core.print_out(' reagent {} contributes by {:.4f} to reaction {}\n'.format(rgt, RXNM[db_rxn][rgt], db_rxn)); core.print_out('\n'); for envv in db_tabulate:; VRGT[rgt][envv.upper()] = core.variable(envv); core.set_global_option(""REFERENCE"", user_reference); core.clean(); #core.opt_clean(); core.clean_variables(). # Reap all the necessary reaction computations; core.print_out(""\n""); p4util.banner((""Database %s Results"" % (db_name))); core.print_out(""\n""). maxactv = []; for rxn in HRXN:; maxactv.append(len(ACTV[dbse + '-' + str(rxn)])); maxrgt = max(maxactv); table_delimit = '-' * (62 + 20 * maxrgt); tables = ''. # find any reactions that are incomplete; FAIL = collections.defaultdict(int); for rxn in HRXN:; db_rxn = dbse + '-' + s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/wrapper_database.html:16806,Optimiz,Optimization,16806,psi4manual/1.4.0/_modules/psi4/driver/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/wrapper_database.html,7,['Optimiz'],['Optimization']
Performance,"coupled cluster computations. General¶. CANONICALIZE_ACTIVE_FAVG¶. Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG¶. Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CI_DIIS¶. Do use DIIS extrapolation to accelerate convergence of the CI coefficients?. Type: boolean; Default: false. DIIS¶. Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS_MAX_VECS¶. Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DOCC¶. The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. D_CONVERGENCE¶. Convergence criterion for density. Type: conv double; Default: 1e-6. E_CONVERGENCE¶. Convergence criterion for energy. Type: conv double; Default: 1e-6. FAVG¶. Do use the average Fock matrix during the SCF optimization?. Type: boolean; Default: false. FAVG_START¶. Iteration at which to begin using the averaged Fock matrix. Type: integer; Default: 5. FOLLOW_ROOT¶. Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FORCE_TWOCON¶. Do attempt to force a two configruation solution by starting with CI coefficents of ?. Type: boolean; Default: false. INTERNAL_ROTATIONS¶. Do consider internal rotations?. Type: boolean; Default: true. LEVEL_SHIFT¶. Level shift to aid convergence. Type: double; Default: 0.0. MAXITER¶. Maximum number of iterations. Type: integer; Default: 100. MO_READ¶. Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF, TWOCON, MCSCF, GENERAL; Default: RHF. SOCC¶. The number of singly occupied orbitals, per irrep. Type: array; Default: No Default. TURN_ON_ACTV¶. Type: integer; Default: 0. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__mcscf-1.html:1302,optimiz,optimization,1302,psi4manual/1.0.0/autodir_options_c/module__mcscf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__mcscf-1.html,4,['optimiz'],['optimization']
Performance,"coupled cluster computations. General¶. CANONICALIZE_ACTIVE_FAVG¶. Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG¶. Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CI_DIIS¶. Do use DIIS extrapolation to accelerate convergence of the CI coefficients?. Type: boolean; Default: false. DIIS¶. Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS_MAX_VECS¶. Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DOCC¶. The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. D_CONVERGENCE¶. Convergence criterion for density. Type: conv double; Default: 1e-6. E_CONVERGENCE¶. Convergence criterion for energy. Type: conv double; Default: 1e-6. FAVG¶. Do use the average Fock matrix during the SCF optimization?. Type: boolean; Default: false. FAVG_START¶. Iteration at which to begin using the averaged Fock matrix. Type: integer; Default: 5. FOLLOW_ROOT¶. Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FORCE_TWOCON¶. Do attempt to force a two configruation solution by starting with CI coefficents of \(\pm \sqrt{\frac{1}{2}}\) ?. Type: boolean; Default: false. INTERNAL_ROTATIONS¶. Do consider internal rotations?. Type: boolean; Default: true. LEVEL_SHIFT¶. Level shift to aid convergence. Type: double; Default: 0.0. MAXITER¶. Maximum number of iterations. Type: integer; Default: 100. MO_READ¶. Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF, TWOCON, MCSCF, GENERAL; Default: RHF. SOCC¶. The number of singly occupied orbitals, per irrep. Type: array; Default: No Default. TURN_ON_ACTV¶. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__mcscf-1.html:1248,optimiz,optimization,1248,psi4manual/1.1.0/autodir_options_c/module__mcscf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__mcscf-1.html,4,['optimiz'],['optimization']
Performance,"coupled cluster computations. General¶. CANONICALIZE_ACTIVE_FAVG¶. Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG¶. Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CI_DIIS¶. Do use DIIS extrapolation to accelerate convergence of the CI coefficients?. Type: boolean; Default: false. DIIS¶. Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS_MAX_VECS¶. Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DOCC¶. The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. D_CONVERGENCE¶. Convergence criterion for density. Type: conv double; Default: 1e-6. E_CONVERGENCE¶. Convergence criterion for energy. Type: conv double; Default: 1e-8. FAVG¶. Do use the average Fock matrix during the SCF optimization?. Type: boolean; Default: false. FAVG_START¶. Iteration at which to begin using the averaged Fock matrix. Type: integer; Default: 5. FOLLOW_ROOT¶. Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FORCE_TWOCON¶. Do attempt to force a two configruation solution by starting with CI coefficents of ?. Type: boolean; Default: false. INTERNAL_ROTATIONS¶. Do ?. Type: boolean; Default: true. LEVEL_SHIFT¶. Level shift to aid convergence. Type: double; Default: 0.0. MAXITER¶. Maximum number of iterations. Type: integer; Default: 100. MO_READ¶. Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF, TWOCON, MCSCF, GENERAL; Default: RHF. SOCC¶. The number of singly occupied orbitals, per irrep. Type: array; Default: No Default. TURN_ON_ACTV¶. Type: integer; Default: 0. WFN_SYM¶. The symmetry of t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__mcscf-1.html:1280,optimiz,optimization,1280,psi4manual/4.0b2/autodir_options_c/module__mcscf-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__mcscf-1.html,2,['optimiz'],['optimization']
Performance,"coupled cluster computations. General¶. CANONICALIZE_ACTIVE_FAVG¶. Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG¶. Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CI_DIIS¶. Do use DIIS extrapolation to accelerate convergence of the CI coefficients?. Type: boolean; Default: false. DIIS¶. Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS_MAX_VECS¶. Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DOCC¶. The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. D_CONVERGENCE¶. Convergence criterion for density. Type: conv double; Default: 1e-6. E_CONVERGENCE¶. Convergence criterion for energy. Type: conv double; Default: 1e-8. FAVG¶. Do use the average Fock matrix during the SCF optimization?. Type: boolean; Default: false. FAVG_START¶. Iteration at which to begin using the averaged Fock matrix. Type: integer; Default: 5. FOLLOW_ROOT¶. Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FORCE_TWOCON¶. Do attempt to force a two configruation solution by starting with CI coefficents of ?. Type: boolean; Default: false. INTERNAL_ROTATIONS¶. Do consider internal rotations?. Type: boolean; Default: true. LEVEL_SHIFT¶. Level shift to aid convergence. Type: double; Default: 0.0. MAXITER¶. Maximum number of iterations. Type: integer; Default: 100. MO_READ¶. Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF, TWOCON, MCSCF, GENERAL; Default: RHF. SOCC¶. The number of singly occupied orbitals, per irrep. Type: array; Default: No Default. TURN_ON_ACTV¶. Type: integer; Default: 0. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__mcscf-1.html:1295,optimiz,optimization,1295,psi4manual/4.0b3/autodir_options_c/module__mcscf-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__mcscf-1.html,4,['optimiz'],['optimization']
Performance,"coupled cluster linear response is provided in Appendix CCRESPONSE.; The most important keywords associated with CC-LR calculations are as follows. PROPERTY¶. The response property desired. Acceptable values are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. OMEGA¶. Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. GAUGE¶. Specifies the choice of representation of the electric dipole operator. Acceptable values are LENGTH for the usual length-gauge representation, VELOCITY for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or BOTH. Note that, for optical rotation calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: LENGTH. table of contents. CC: Coupled Cluster Theory; Basic Keywords; REFERENCE; R_CONVERGENCE; MAXITER; BRUECKNER_ORBS_R_CONVERGENCE; RESTART; CACHELEVEL; CACHETYPE; NUM_AMPS_PRINT; MP2_AMPS_PRINT. Larger Calculations; Excited State Coupled Cluster Calculations; ROOTS_PER_IRREP; E_CONVERGENCE; SINGLES_PRINT; SCHMIDT_ADD_RESIDUAL_TOLERANCE; EOM_GUESS. Linear Response (CCLR) Calculations; PROPERTY; OMEGA; GAUGE. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/cc-1.html:11025,CACHE,CACHELEVEL,11025,psi4manual/1.1.0/cc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/cc-1.html,4,['CACHE'],"['CACHELEVEL', 'CACHETYPE']"
Performance,"covered; Fragment = [] # stores fragments. start = 0 # starts with the first atom in the list; Queue.append(start); White.remove(start). # Simply start with the first atom, do a BFS when done, go to any; # untouched atom and start again iterate until all atoms belong; # to a fragment group; while White or Queue: # Iterates to the next fragment; Fragment.append([]). while Queue: # BFS within a fragment; for u in Queue: # find all white neighbors to vertex u; for i in White:; dist = constants.bohr2angstroms * math.sqrt(; (self.x(i) - self.x(u)) ** 2 +; (self.y(i) - self.y(u)) ** 2 +; (self.z(i) - self.z(u)) ** 2); if dist < vdW_diameter[self.symbol(u)] + \; vdW_diameter[self.symbol(i)]:; Queue.append(i) # if you find you, put in the queue; White.remove(i) # & remove it from the untouched list; Queue.remove(u) # remove focus from Queue; Black.append(u); Fragment[-1].append(int(u)) # add to group (0-indexed); Fragment[-1].sort() # preserve original atom ordering. if White: # can't move White -> Queue if empty; Queue.append(White[0]); White.remove(White[0]). return Fragment. [docs]def dynamic_variable_bind(cls):; """"""Function to dynamically add extra members to; the core.Molecule class. """"""; cls.__setattr__ = molecule_set_attr; cls.__getattr__ = molecule_get_attr. cls.BFS = BFS. dynamic_variable_bind(core.Molecule) # pass class type, not class instance. #; # Define geometry to be used by PSI4.; # The molecule created by this will be set in options.; #; # geometry(""; # O 1.0 0.0 0.0; # H 0.0 1.0 0.0; # H 0.0 0.0 0.0; #; [docs]def geometry(geom, name=""default""):; """"""Function to create a molecule object of name *name* from the; geometry in string *geom*. Permitted for user use but deprecated; in driver in favor of explicit molecule-passing. Comments within; the string are filtered. """"""; core.efp_init(); geom = pubchemre.sub(process_pubchem_command, geom); geom = filter_comments(geom); molecule = core.Molecule.create_molecule_from_string(geom); molecule.set_name(name). activat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/molutil.html:6975,Queue,Queue,6975,psi4manual/1.1.0/_modules/psi4/driver/molutil.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/molutil.html,2,['Queue'],['Queue']
Performance,"creen; core.print_out('\n'); p4util.banner('Loading displacement %d of %d' % (n, ndisp)); print("""""" %d"""""" % (n), end=('\n' if (n == ndisp) else '')); sys.stdout.flush(). parent_group = molecule.point_group(); clone = molecule.clone(); clone.reinterpret_coordentry(False); clone.fix_orientation(True). # Load in displacement (flat list) into the active molecule; geom_array = np.reshape(displacement[""geometry""], (-1, 3)); clone.set_geometry(core.Matrix.from_array(geom_array)). # If the user insists on symmetry, weaken it if some is lost when displacing.; if molecule.symmetry_from_input():; disp_group = clone.find_highest_point_group(); new_bits = parent_group.bits() & disp_group.bits(); new_symm_string = qcdb.PointGroup.bits_to_full_name(new_bits); clone.reset_point_group(new_symm_string). # clean possibly necessary for n=1 if its irrep (unsorted in displacement list) different from initial G0 for freq; core.clean(). # Perform the derivative calculation; derivative, wfn = derivfunc(method, return_wfn=True, molecule=clone, **kwargs); displacement[""energy""] = core.variable('CURRENT ENERGY'). # If we computed a first or higher order derivative, set it.; if derivfunc == gradient:; displacement[""gradient""] = wfn.gradient().np.ravel().tolist(). # clean may be necessary when changing irreps of displacements; core.clean(). return wfn. [docs]def energy(name, **kwargs):; r""""""Function to compute the single-point electronic energy. :returns: *float* |w--w| Total electronic energy in Hartrees. SAPT & EFP return interaction energy. :returns: (*float*, :py:class:`~psi4.core.Wavefunction`) |w--w| energy and wavefunction when **return_wfn** specified. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY <CURRENTENERGY>`; * :psivar:`CURRENT REFERENCE ENERGY <CURRENTREFERENCEENERGY>`; * :psivar:`CURRENT CORRELATION ENERGY <CURRENTCORRELATIONENERGY>`. :type name: string; :param name: ``'scf'`` || ``'mp2'`` || ``'ci5'`` || etc. First argument, usually unlabeled. Indicates the ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html:6450,Perform,Perform,6450,psi4manual/1.3.2/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html,1,['Perform'],['Perform']
Performance,"creen; core.print_out('\n'); p4util.banner('Loading displacement %d of %d' % (n, ndisp)); print("""""" %d"""""" % (n), end=('\n' if (n == ndisp) else '')); sys.stdout.flush(). parent_group = molecule.point_group(); clone = molecule.clone(); clone.reinterpret_coordentry(False); clone.fix_orientation(True). # Load in displacement (flat list) into the active molecule; geom_array = np.reshape(displacement[""geometry""], (-1, 3)); clone.set_geometry(core.Matrix.from_array(geom_array)). # If the user insists on symmetry, weaken it if some is lost when displacing.; if molecule.symmetry_from_input():; disp_group = clone.find_highest_point_group(); new_bits = parent_group.bits() & disp_group.bits(); new_symm_string = qcdb.PointGroup.bits_to_full_name(new_bits); clone.reset_point_group(new_symm_string). # clean possibly necessary for n=1 if its irrep (unsorted in displacement list) different from initial G0 for freq; core.clean(). # Perform the derivative calculation; derivative, wfn = derivfunc(method, return_wfn=True, molecule=clone, **kwargs); displacement[""energy""] = core.variable('CURRENT ENERGY'). # If we computed a first or higher order derivative, set it.; if derivfunc == gradient:; displacement[""gradient""] = wfn.gradient().np.ravel().tolist(). # clean may be necessary when changing irreps of displacements; core.clean(). return wfn. def _filter_renamed_methods(compute, method):; r""""""Raises UpgradeHelper when a method has been renamed.""""""; if method == ""dcft"":; raise UpgradeHelper(compute + ""('dcft')"", compute + ""('dct')"", 1.4, "" All instances of 'dcft' should be replaced with 'dct'.""). [docs]def energy(name, **kwargs):; r""""""Function to compute the single-point electronic energy. :returns: *float* |w--w| Total electronic energy in Hartrees. SAPT & EFP return interaction energy. :returns: (*float*, :py:class:`~psi4.core.Wavefunction`) |w--w| energy and wavefunction when **return_wfn** specified. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CURRENT ENERGY`; * :psivar:`CUR",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html:6840,Perform,Perform,6840,psi4manual/1.4.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html,2,['Perform'],['Perform']
Performance,"criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. FULL_HESS_EVERY¶. Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. Optimizing Minima¶; First, define the molecule and basis in the input.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }. set basis dz. Then the following are examples of various types of calculations that can be completed. Optimize a geometry using default methods (RFO step):; optimize('scf'). Optimize using Newton-Raphson steps instead of RFO steps:; set step_type nr; optimize('scf'). Optimize using finite differences of energies instead of gradients:; optimize('scf', dertype='energy'). Optimize while limiting the initial step size to 0.1 au:; set intrafrag_step_limit 0.1; optimize('scf'). Optimize while always limiting the step size to 0.1 au:. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). Optimize while calculating the Hessian at every step:. set full_hess_every 1; optimize('scf'). import optking. Hessian¶; If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333] and Fischer and Almlof; [Fischer:1992:9770].; Either of these or a simple diagonal Hessian may be selected using the; INTRAFRAG_HESS keyword.; All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC] and Bofill [Bofill:1994:1].; The He",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/optking.html:3787,Optimiz,Optimize,3787,psi4manual/master/optking.html,https://psicode.org,https://psicode.org/psi4manual/master/optking.html,8,"['Optimiz', 'optimiz']","['Optimize', 'optimize']"
Performance,"croiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm ca",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/dct.html:9508,perform,performed,9508,psi4manual/master/dct.html,https://psicode.org,https://psicode.org/psi4manual/master/dct.html,9,['perform'],['performed']
Performance,"croiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods.; QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive \({\cal O}(N^6)\); cumulant updates. As a result, for small closed-shell systems the two-st",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/dcft-1.html:10361,perform,perform,10361,psi4manual/1.1.0/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/dcft-1.html,6,['perform'],['perform']
Performance,"csd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. Examples:. 1; 2>>> # [1] Analytic hf optimization; >>> optimize('hf'). 1; 2; 3; 4>>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). 1; 2; 3>>> # [3] Forced finite difference hf optimization run in; >>> # embarrassingly parallel fashion; >>> optimize('hf', dertype='energy', mode='sow'). 1; 2>>> # [4] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). 1; 2; 3; 4>>> # [5] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). 1; 2; 3; 4; 5; 6; 7; 8>>> # [6] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). psi4.gradient(name[, molecule, return_wfn, func, dertype])[source]¶; Function complementary to :py:func:~driver.optimize(). Carries out one gradient pass,; deciding analytic or finite difference. Returns:Matrix – Total electronic gradient in Hartrees/Bohr. Returns:(Matrix, Wavefunction) – gradient and wavefunction when return_wfn specified. Examples:. 1; 2; 3; 4; 5; 6>>> # [1] Single-point dft gradient getting the gradient; >>> # in file, core.Matrix, and np.array forms; >>> set gradient_write on; >>> G, wfn = gradient('b3lyp-d', return_wfn=True); >>> wfn.gradient().print_out(); >>> np.array(G",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/opt-1.html:5152,optimiz,optimization,5152,psi4manual/1.2.1/opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/opt-1.html,2,['optimiz'],['optimization']
Performance,"ct HF exchange. x_functional(self: psi4.core.SuperFunctional, arg0: str) → psi::Functional¶; Returns the desired X Functional. x_functionals(self: psi4.core.SuperFunctional) → List[psi::Functional]¶; Returns all X Functionals. x_omega(self: psi4.core.SuperFunctional) → float¶; Range-seperated exchange parameter. class psi4.core.SymmetryOperation¶; Bases: pybind11_builtins.pybind11_object; Class to provide a 3 by 3 matrix representation of a symmetry operation, such as a rotation or reflection. E(self: psi4.core.SymmetryOperation) → None¶; Set equal to E. c2_x(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the x axis. c2_y(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the y axis. c2_z(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the z axis. i(self: psi4.core.SymmetryOperation) → None¶; Set equal to an inversion. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None¶; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryOperation, arg0: float) → None¶; Set equal to a clockwise rotation by theta. sigma_xy(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xy plane. sigma_xz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xz plane. sigma_yz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in yz plane. trace(self: psi4.core.SymmetryOperation) → float¶; Returns trace of transformation matrix. transform(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the transform arg2 * arg1 * arg2~. transpose(self: psi4.core.SymmetryOperation) → None¶; Performs transposition of matrix operation. unit(self: psi4.core.SymmetryOperation) → None¶; Set equal to a unit matrix. zero(self: psi4.core.SymmetryOperation) → None¶; Zero out ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/psi4api-1.html:193101,Perform,Performs,193101,psi4manual/1.2.1/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/psi4api-1.html,2,['Perform'],['Performs']
Performance,"ct.__getattribute__(self, ""is_variable""); isvar = fxn(name). if isvar:; fxn = object.__getattribute__(self, ""get_variable""); return fxn(name). return object.__getattribute__(self, name). [docs]def BFS(self):; """"""Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. """"""; vdW_diameter = {; 'H': 1.001 / 1.5,; 'HE': 1.012 / 1.5,; 'LI': 0.825 / 1.5,; 'BE': 1.408 / 1.5,; 'B': 1.485 / 1.5,; 'C': 1.452 / 1.5,; 'N': 1.397 / 1.5,; 'O': 1.342 / 1.5,; 'F': 1.287 / 1.5,; 'NE': 1.243 / 1.5,; 'NA': 1.144 / 1.5,; 'MG': 1.364 / 1.5,; 'AL': 1.639 / 1.5,; 'SI': 1.716 / 1.5,; 'P': 1.705 / 1.5,; 'S': 1.683 / 1.5,; 'CL': 1.639 / 1.5,; 'AR': 1.595 / 1.5}. Queue = []; White = range(self.natom()) # untouched; Black = [] # touched and all edges discovered; Fragment = [] # stores fragments. start = 0 # starts with the first atom in the list; Queue.append(start); White.remove(start). # Simply start with the first atom, do a BFS when done, go to any; # untouched atom and start again iterate until all atoms belong; # to a fragment group; while White or Queue: # Iterates to the next fragment; Fragment.append([]). while Queue: # BFS within a fragment; for u in Queue: # find all white neighbors to vertex u; for i in White:; dist = constants.bohr2angstroms * math.sqrt(; (self.x(i) - self.x(u)) ** 2 +; (self.y(i) - self.y(u)) ** 2 +; (self.z(i) - self.z(u)) ** 2); if dist < vdW_diameter[self.symbol(u)] + \; vdW_diameter[self.symbol(i)]:; Queue.append(i) # if you find you, put in the queue; White.remove(i) # & remove it from the untouched list; Queue.remove(u) # remove focus from Queue; Black.append(u); Fragment[-1].append(int(u)) # add to group (0-indexed); Fragment[-1].sort() # preserve original atom ordering. if White: # can't move White -> Queue if empty; Queue.append(White[0]); White.remove(White[0]). re",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/molutil.html:6064,Queue,Queue,6064,psi4manual/1.1.0/_modules/psi4/driver/molutil.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/molutil.html,1,['Queue'],['Queue']
Performance,"ct.__getattribute__(self, ""is_variable""); isvar = fxn(name). if isvar:; fxn = object.__getattribute__(self, ""get_variable""); return fxn(name). return object.__getattribute__(self, name). [docs]def BFS(self):; """"""Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. """"""; vdW_diameter = {; 'H': 1.001 / 1.5,; 'HE': 1.012 / 1.5,; 'LI': 0.825 / 1.5,; 'BE': 1.408 / 1.5,; 'B': 1.485 / 1.5,; 'C': 1.452 / 1.5,; 'N': 1.397 / 1.5,; 'O': 1.342 / 1.5,; 'F': 1.287 / 1.5,; 'NE': 1.243 / 1.5,; 'NA': 1.144 / 1.5,; 'MG': 1.364 / 1.5,; 'AL': 1.639 / 1.5,; 'SI': 1.716 / 1.5,; 'P': 1.705 / 1.5,; 'S': 1.683 / 1.5,; 'CL': 1.639 / 1.5,; 'AR': 1.595 / 1.5}. Queue = []; White = range(self.natom()) # untouched; Black = [] # touched and all edges discovered; Fragment = [] # stores fragments. start = 0 # starts with the first atom in the list; Queue.append(start); White.remove(start). # Simply start with the first atom, do a BFS when done, go to any; # untouched atom and start again iterate until all atoms belong; # to a fragment group; while White or Queue: # Iterates to the next fragment; Fragment.append([]). while Queue: # BFS within a fragment; for u in Queue: # find all white neighbors to vertex u; for i in White:; dist = p4const.psi_bohr2angstroms * math.sqrt(; (self.x(i) - self.x(u)) ** 2 +; (self.y(i) - self.y(u)) ** 2 +; (self.z(i) - self.z(u)) ** 2); if dist < vdW_diameter[self.symbol(u)] + \; vdW_diameter[self.symbol(i)]:; Queue.append(i) # if you find you, put in the queue; White.remove(i) # & remove it from the untouched list; Queue.remove(u) # remove focus from Queue; Black.append(u); Fragment[-1].append(int(u)) # add to group (0-indexed); Fragment[-1].sort() # preserve original atom ordering. if White: # can't move White -> Queue if empty; Queue.append(White[0]); White.remove(White[0]). ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/molutil.html:5966,Queue,Queue,5966,psi4manual/1.0.0/_modules/molutil.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/molutil.html,1,['Queue'],['Queue']
Performance,"ct.__getattribute__(self, ""is_variable""); isvar = fxn(name). if isvar:; fxn = object.__getattribute__(self, ""get_variable""); return fxn(name). return object.__getattribute__(self, name). [docs]def BFS(self):; """"""Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. """"""; vdW_diameter = {; 'H': 1.001 / 1.5,; 'HE': 1.012 / 1.5,; 'LI': 0.825 / 1.5,; 'BE': 1.408 / 1.5,; 'B': 1.485 / 1.5,; 'C': 1.452 / 1.5,; 'N': 1.397 / 1.5,; 'O': 1.342 / 1.5,; 'F': 1.287 / 1.5,; 'NE': 1.243 / 1.5,; 'NA': 1.144 / 1.5,; 'MG': 1.364 / 1.5,; 'AL': 1.639 / 1.5,; 'SI': 1.716 / 1.5,; 'P': 1.705 / 1.5,; 'S': 1.683 / 1.5,; 'CL': 1.639 / 1.5,; 'AR': 1.595 / 1.5}. Queue = []; White = range(self.natom()) # untouched; Black = [] # touched and all edges discovered; Fragment = [] # stores fragments. start = 0 # starts with the first atom in the list; Queue.append(start); White.remove(start). # Simply start with the first atom, do a BFS when done, go to any; # untouched atom and start again iterate until all atoms belong; # to a fragment group; while len(White) > 0 or len(Queue) > 0: # Iterates to the next fragment; Fragment.append([]). while len(Queue) > 0: # BFS within a fragment; for u in Queue: # find all (still white) nearest neighbors to vertex u; for i in White:; dist = p4const.psi_bohr2angstroms * math.sqrt((self.x(i) - self.x(u)) ** 2 + \; (self.y(i) - self.y(u)) ** 2 + (self.z(i) - self.z(u)) ** 2); if dist < vdW_diameter[self.symbol(u)] + vdW_diameter[self.symbol(i)]:; Queue.append(i) # if you find you, put in the queue; White.remove(i) # and remove it from the untouched list; Queue.remove(u) # remove focus from Queue; Black.append(u); Fragment[-1].append(int(u)) # add to group (0-indexed); Fragment[-1].sort() # preserve original atom ordering. if len(White) != 0: # can't move White -> Queue if no m",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/molutil.html:6049,Queue,Queue,6049,psi4manual/4.0b5/_modules/molutil.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/molutil.html,1,['Queue'],['Queue']
Performance,"ct.__getattribute__(self, ""is_variable""); isvar = fxn(name). if isvar:; fxn = object.__getattribute__(self, ""get_variable""); return fxn(name). return object.__getattribute__(self, name). [docs]def BFS(self):; """"""Perform a breadth-first search (BFS) on the real atoms; in molecule, returning an array of atom indices of fragments.; Relies upon van der Waals radii and so faulty for close; (esp. hydrogen-bonded) fragments. Original code from; Michael S. Marshall. """"""; vdW_diameter = {; 'H': 1.001 / 1.5,; 'HE': 1.012 / 1.5,; 'LI': 0.825 / 1.5,; 'BE': 1.408 / 1.5,; 'B': 1.485 / 1.5,; 'C': 1.452 / 1.5,; 'N': 1.397 / 1.5,; 'O': 1.342 / 1.5,; 'F': 1.287 / 1.5,; 'NE': 1.243 / 1.5,; 'NA': 1.144 / 1.5,; 'MG': 1.364 / 1.5,; 'AL': 1.639 / 1.5,; 'SI': 1.716 / 1.5,; 'P': 1.705 / 1.5,; 'S': 1.683 / 1.5,; 'CL': 1.639 / 1.5,; 'AR': 1.595 / 1.5}. Queue = []; White = range(self.natom()) # untouched; Black = [] # touched and all edges discovered; Fragment = [] # stores fragments. start = 0 # starts with the first atom in the list; Queue.append(start); White.remove(start). # Simply start with the first atom, do a BFS when done, go to any; # untouched atom and start again iterate until all atoms belong; # to a fragment group; while len(White) > 0 or len(Queue) > 0: # Iterates to the next fragment; Fragment.append([]). while len(Queue) > 0: # BFS within a fragment; for u in Queue: # find all (still white) nearest neighbors to vertex u; for i in White:; dist = physconst.psi_bohr2angstroms * math.sqrt((self.x(i) - self.x(u)) ** 2 + \; (self.y(i) - self.y(u)) ** 2 + (self.z(i) - self.z(u)) ** 2); if dist < vdW_diameter[self.symbol(u)] + vdW_diameter[self.symbol(i)]:; Queue.append(i) # if you find you, put in the queue; White.remove(i) # and remove it from the untouched list; Queue.remove(u) # remove focus from Queue; Black.append(u); Fragment[-1].append(int(u)) # add to group (0-indexed); Fragment[-1].sort() # preserve original atom ordering. if len(White) != 0: # can't move White -> Queue if no",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/molutil.html:5209,Queue,Queue,5209,psi4manual/4.0b4/_modules/molutil.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/molutil.html,1,['Queue'],['Queue']
Performance,"cted.cols(irrep ^ symmetry) != computed.cols(irrep ^ symmetry)):; print(""\t%s has %d columns in irrep, but %s has %d\n."" % (expected.name(), expected.cols(irrep), irrep, computed.name(), computed.cols(irrep))); sys.exit(1); rows = expected.rows(irrep); cols = expected.cols(irrep ^ symmetry); failed = 0; for row in range(rows):; for col in range(cols):; if(abs(expected.get(irrep, row, col) - computed.get(irrep, row, col)) > 10 ** (-digits)):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, expected.get(irrep, row, col), computed.get(irrep, row, col))); failed = 1; break. if(failed):; PsiMod.print_out(""The Failed Test Matrices\n""); computed.print_out(); expected.print_out(); sys.exit(1); success(label). [docs]def compare_vectors(expected, computed, digits, label):; """"""Function to compare two vectors. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; print(""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); sys.exit(1); nirreps = expected.nirrep(); for irrep in range(nirreps):; if(expected.dim(irrep) != computed.dim(irrep)):; print(""\tThe reference has %d entries in irrep %d, but the computed vector has %d\n."" % (expected.dim(irrep), irrep, computed.dim(irrep))); sys.exit(1); dim = expected.dim(irrep); failed = 0; for entry in range(dim):; if(abs(expected.get(irrep, entry) - computed.get(irrep, entry)) > 10 ** (-digits)):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed.get(irrep, entry), expected.get(irrep, entry))); failed = 1; break. if(failed):; PsiMod.print_out(""The computed vector\n""); computed.print_out(); PsiMod.print_out(""The reference vector\n""); expected.print_out(); sys.exit(1); success(label). [",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/util.html:4626,Perform,Performs,4626,psi4manual/4.0b3/_modules/util.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/util.html,1,['Perform'],['Performs']
Performance,"ction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. RESTART¶. Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. NUM_AMPS_PRINT¶. Number of important and amplitudes to print. Type: integer; Default: 10. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. Larger Calculations¶; Here",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/cc-1.html:4991,cache,cache,4991,psi4manual/4.0b4/cc-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/cc-1.html,8,['cache'],['cache']
Performance,"ction algorithms for composite Fock matrix construction by using the keyword DFDIRJ as the Coulomb construction; algorithm when specifying SCF_TYPE to use a composite algorithm combination (DFDIRJ+K_alg in general,; or DFDIRJ for DFT with non-hybrid functionals).; DFDIRJ supports multiple capabilities to improve performance. Specifically, DFDIRJ allows for a combination of density-matrix based ERI; screening (set SCREENING to DENSITY) and incremental Fock matrix construction (set INCFOCK to TRUE). These two, when combined,; enable more aggressive screening of ERI contributions to the Coulomb matrix and thus greatly improve performance. COSX Exchange¶; The semi-numerical COSX algorithm described in [Neese:2009:98] evaluates; two-electron ERIs analytically over one electron coordinate and numerically; over the other electron coordinate, and belongs to the family of pseudospectral; methods originally suggested by Friesner. In COSX, numerical integration is performed on standard; DFT quadrature grids, which are described in DFT: Density Functional Theory.; Both the accuracy of the COSX algorithm and also the computational; cost are directly determined by the size of the integration grid, so selection; of the grid is important. This COSX implementation uses two separate grids.; By default, the SCF algorithm is first converged on a smaller grid, followed by a; number of SCF iterations up to a maximum value (controlled by the COSX_MAXITER_FINAL keyword); on a larger grid. By default, COSX_MAXITER_FINAL is set to 1, a single; SCF iteration, which results in numerical errors comparable to; performing the entire SCF on the expensive larger grid at a computational cost; much closer to the smaller grid. Setting COSX_MAXITER_FINAL to 0 disables the; larger grid entirely. Setting COSX_MAXITER_FINAL to -1 allows; for the SCF to fully converge on the larger grid, useful for the study of wavefunction; properties such as gradients. The size of the initial grid is controlled by the ke",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/scf.html:36728,perform,performed,36728,psi4manual/master/scf.html,https://psicode.org,https://psicode.org/psi4manual/master/scf.html,2,['perform'],['performed']
Performance,"ction energy is not going to be used. Type: boolean; Default: false. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for evaluating the triples contribution to dispersion. Type: conv double; Default: 1.0e-6. PRINT¶. The amount of information to print to the output file for the sapt module. For 0, only the header and final results are printed. For 1, (recommended for large calculations) some intermediate quantities are also printed. Type: integer; Default: 1. SAPT_LEVEL¶. The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK¶. Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_SAFETY¶. Memory safety. Type: double; Default: 0.9. SAPT_OS_SCALE¶. The scale factor used for opposite-spin pairs in SCS computations. SS/OS decomposition performed for and terms. Type: double; Default: 6.0/5.0. SAPT_SS_SCALE¶. The scale factor used for same-spin pairs in SCS computations. SS/OS decomposition performed for and terms. Type: double; Default: 1.0/3.0. Expert¶. DO_THIRD_ORDER¶. Do compute third-order corrections?. Type: boolean; Default: false. Table Of Contents. SAPT; General; AIO_CPHF; AIO_DF_INTS; BASIS; DENOMINATOR_ALGORITHM; DENOMINATOR_DELTA; DF_BASIS_ELST; DF_BASIS_SAPT; D_CONVERGENCE; E_CONVERGENCE; FREEZE_CORE; INTS_TOLERANCE; MAXITER; NAT_ORBS; NAT_ORBS_T2; NO_RESPONSE; OCC_TOLERANCE; PRINT; SAPT_LEVEL; SAPT_MEM_CHECK; SAPT_MEM_SAFETY; SAPT_OS_SCALE; SAPT_SS_SCALE. Expert; DO_THIRD_ORDER. Previous topic; REFERENCE; Next topic; AIO_CPHF; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices »; Keywords by Module ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__sapt-1.html:4207,perform,performed,4207,psi4manual/4.0b3/autodir_options_c/module__sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodir_options_c/module__sapt-1.html,2,['perform'],['performed']
Performance,"ction in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cc52; CCSD Response for H2O2. pywrap-db2; Database calculation, run in sow/reap mode. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. omp2-2; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc12; Single point energies of multiple excited states with EOM-CCSD. cisd-sp; 6-31G** H2O Test CISD Energy Point. mrcc4; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). fci-dipole; 6-31G H2O Test FCI Energy Point. tu4-h2o-freq; Frequencies for H2O HF/cc-pVDZ at optimized geometry. dcft3; DCFT-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. mints3; Test individual integral objects for correctness. omp3-2; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. psimrcc-ccsd_t-2; Mk-MRCCSD(T) sin",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/testsuite-1.html:12242,perform,performs,12242,psi4manual/4.0b3/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/testsuite-1.html,4,['perform'],['performs']
Performance,"ction selecting the algorithm for a MP2 gradient call; and directing to specified or best-performance default modules. """"""; reference = psi4.get_option('SCF', 'REFERENCE'); mtd_type = psi4.get_global_option('MP2_TYPE'); module = psi4.get_global_option('QC_MODULE'); # Considering only [df]occ/dfmp2. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc_gradient; elif module in ['', 'DFMP2']:; func = run_dfmp2_gradient; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient. if func is None:; raise ManagedMethodError(['select_mp2_gradient', name, 'MP2_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). [docs]def select_mp2_property(name, **kwargs):; """"""Function selecting the algorithm for a MP2 property call; and directing to specified or best-performance default modules. """"""; reference = psi4.get_option('SCF', 'REFERENCE'); mtd_type = psi4.get_global_option('MP2_TYPE'); module = psi4.get_global_option('QC_MODULE'); # Considering only dfmp2 for now. func = None; if reference == 'RHF':; if mtd_type == 'DF':; #if module == 'OCC':; # func = run_dfocc_property; if module in ['', 'DFMP2']:; func = run_dfmp2_property; #elif reference == 'UHF':; # if mtd_type == 'DF':; # if module in ['', 'OCC']:; # func = run_dfocc_property. if func is None:; raise ManagedMethodError(['select_mp2_property', name, 'MP2_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). [docs]def select_omp2(name, **kwargs):; """"""Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. """"""; reference = psi4.get_option('SCF', 'REFERENCE'); mtd_type = psi4.get_global_option('MP2_TYPE');",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/procedures/proc.html:4822,perform,performance,4822,psi4manual/1.0.0/_modules/procedures/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/procedures/proc.html,1,['perform'],['performance']
Performance,"ction to return the total memory allocation. gradient(name, **kwargs); Function complementary to optimize(). hessian(name, **kwargs); Function complementary to frequency(). ipi_broker(LOT[, molecule, serverdata, options]); Run IPIBroker to connect to i-pi. join_path(prefix, *args). levenshtein(seq1, seq2); Compute the Levenshtein distance between two strings. mdi_run(scf_method, **kwargs); Begin functioning as an MDI engine. message_box([message, max_width, min_width]); put a message string into a box for extra attention. molden(wfn[, filename, density_a, ...]); Function to write wavefunction information in wfn to filename in molden format. molecule_get_attr(self, name); Function to redefine __getattr__ method of molecule class. molecule_set_attr(self, name, value); Function to redefine __setattr__ method of molecule class. oeprop(wfn, *args, **kwargs); Evaluate one-electron properties. opt(name, **kwargs); Function to perform a geometry optimization. optimize(name, **kwargs); Function to perform a geometry optimization. optimize_geometric(name, **kwargs). pcm_helper(block); Passes multiline string block to PCMSolver parser. print_stderr(stuff); Function to print stuff to standard error stream. print_stdout(stuff); Function to print stuff to standard output stream. process_input(raw_input[, print_level]); Function to preprocess raw input, the text of the input file, then parse it, validate it for format, and convert it into legitimate Python. prop(*args, **kwargs); Function to compute various properties. properties(*args, **kwargs); Function to compute various properties. sanitize_name(name); Function to return name in coded form, stripped of characters that confuse filenames, characters into lowercase, + into p, * into s, and (, ), -, & , into _. scf_helper(name[, post_scf]); Function serving as helper to SCF, choosing whether to cast up or just run SCF with a standard guess. scf_wavefunction_factory(name, ref_wfn, ...); Builds the correct (R/U/RO/CU HF/KS) wavefunc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/psi4api-1.html:19887,optimiz,optimize,19887,psi4manual/1.5.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/psi4api-1.html,9,"['optimiz', 'perform']","['optimization', 'optimize', 'perform']"
Performance,"ction()¶; Python Library Documentation: built-in function new_wavefunction in module psi4; new_wavefunction(...). new_wavefunction( (Molecule)arg1, (str)arg2) -> Wavefunction :. Builds a new wavefunction from scratch.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE new_wavefunction(N5boost10shared_ptrIN3psi8MoleculeEEE,Ss). psi4.nthread()¶; Python Library Documentation: built-in function nthread in module psi4; nthread(...). nthread() -> int :. Returns the number of threads to use in SMP parallel computations.; C++ signature :. i nthread(). psi4.nuclear_dipole()¶; Python Library Documentation: built-in function nuclear_dipole in module psi4; nuclear_dipole(...). nuclear_dipole( (Molecule)arg1) -> Vector :. docstring; C++ signature :. N5boost10shared_ptrIN3psi6VectorEEE nuclear_dipole(N5boost10shared_ptrIN3psi8MoleculeEEE). psi4.occ()¶; Python Library Documentation: built-in function occ in module psi4; occ(...). occ( (Wavefunction)arg1) -> Wavefunction :. Runs the orbital optimized CC codes.; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE occ(N5boost10shared_ptrIN3psi12WavefunctionEEE). psi4.opt_clean()¶; Python Library Documentation: built-in function opt_clean in module psi4; opt_clean(...). opt_clean() -> None :. Cleans up the optimizer’s scratch files.; C++ signature :. void opt_clean(). psi4.optking()¶; Python Library Documentation: built-in function optking in module psi4; optking(...). optking() -> int :. Runs the geometry optimization / frequency analysis code.; C++ signature :. i optking(). psi4.outfile_name()¶; Python Library Documentation: built-in function outfile_name in module psi4; outfile_name(...). outfile_name() -> str :. Returns the name of the output file.; C++ signature :. Ss outfile_name(). psi4.plugin()¶; Python Library Documentation: built-in function plugin in module psi4; plugin(...). plugin( (str)arg1, (Wavefunction)arg2) -> Wavefunction :. docstring; C++ signature :. N5boost10shared_ptrIN3psi12WavefunctionEEE plug",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html:34753,optimiz,optimized,34753,psi4manual/1.0.0/autodoc_psimod-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_psimod-1.html,2,['optimiz'],['optimized']
Performance,"ction) → float¶; Runs the coupled cluster (T) energy code. psi4.core.clean() → None¶; Function to remove scratch files. Call between independent jobs. psi4.core.clean_options() → None¶; Function to reset options to clean state. psi4.core.clean_variables() → None¶; Empties all PSI scalar and array variables that have been set internally. psi4.core.close_outfile() → None¶; Closes the output file. psi4.core.dcft(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the density cumulant functional theory code. psi4.core.del_array_variable(arg0: str) → None¶; Removes the requested (case-insensitive) Matrix QC variable. psi4.core.del_scalar_variable(arg0: str) → None¶; Removes the requested (case-insensitive) double QC variable. psi4.core.detci(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the determinant-based configuration interaction code. psi4.core.dfmp2(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the DF-MP2 code. psi4.core.dfocc(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the density-fitted orbital optimized CC codes. psi4.core.dmrg(arg0: psi::Wavefunction) → float¶; Runs the DMRG code. psi4.core.doublet(A: psi4.core.Matrix, B: psi4.core.Matrix, transA: bool=False, transB: bool=False) → psi4.core.Matrix¶; Returns the multiplication of two matrices A and B, with options to transpose each beforehand. psi4.core.fcidump_tei_helper(nirrep: int, restricted: bool, DPD_info: Dict[str, int], ints_tolerance: float, fname: str='INTDUMP') → None¶; Write integrals to file in FCIDUMP format. psi4.core.finalize() → None¶. psi4.core.flush_outfile() → None¶; Flushes the output file. psi4.core.fnocc(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the fno-ccsd(t)/qcisd(t)/mp4/cepa energy code. psi4.core.get_active_molecule() → psi::Molecule¶; Returns the currently active molecule object. psi4.core.get_atomic_point_charges() → psi::Vector¶; Returns the most recently computed atomic point charges, as a double * object. psi4.core.get_datadir() → str¶; Sets the path",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/psi4api-1.html:279582,optimiz,optimized,279582,psi4manual/1.3.2/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psi4api-1.html,2,['optimiz'],['optimized']
Performance,"ction) → psi4.core.Matrix¶; Returns the Alpha Density Matrix. Da_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the requested Alpha Density subset. Db(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Density Matrix. Db_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the requested Beta Density subset. Fa(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Fock Matrix. Fa_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the Alpha Fock Matrix in the requested basis (AO,SO). Fb(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Fock Matrix. Fb_subset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns the Beta Fock Matrix in the requested basis (AO,SO). H(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the ‘Core’ Matrix (Potential + Kinetic) Integrals. MOM_excited_¶; Are we to do excited-state MOM?. MOM_performed_¶; MOM performed current iteration?. PCM_enabled(self: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. V_potential(self: psi4.core.HF) → psi4.core.VBase¶; Returns the internal DFT V object. Va(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Alpha Kohn-Sham Potential Matrix. Vb(self: psi4.core.HF) → psi4.core.Matrix¶; Returns the Beta Kohn-Sham Potential Matrix. X(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self: psi4.core.Wavefunction) → Dict[str, p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html:1990,perform,performed,1990,psi4manual/1.3.2/api/psi4.core.cuhf.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.cuhf.html,14,['perform'],['performed']
Performance,"ction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). scf-ecp2; Water-Argon complex with ECP present; check of RHF Hessian. pywrap-align; apply linear fragmentation algorithm to a water cluster. scf-level-shift-rks; SCF level shift on an RKS computation. fci-coverage; 6-31G H2O Test for coverage. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mints-helper; A general test of the MintsHelper function. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. fnocc7; Test fnocc with linear dependencies. sapt5; SAPT0 aug-cc-pVTZ computation of th",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:44892,perform,performed,44892,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['perform'],['performed']
Performance,"ction. set_psi_file_prefix(). Deprecated since version 1.4. set_scalar_variable(key, value); Sets the double QCVariable key (case-insensitive); prefer set_variable(). set_variable(key, val); Sets scalar or array QCVariable key to val in global memory. timer_off(label); Stop timer with label. timer_on(label); Start timer with label. triplet(A, B, C, transA, transB, transC); Returns the multiplication of three matrices, with options to transpose each beforehand. tstart(); Start module-level timer. tstop(); Stop module-level timer. variable(key); Return copy of scalar or array QCVariable key from global memory. variables([include_deprecated_keys]); Return all scalar or array QCVariables from global memory. version(). Deprecated since version 1.4. Classes¶. AOShellCombinationsIterator. AngularMomentumInt; Computes angular momentum integrals. BSVec. BasisExtents; docstring. BasisFunctions; docstring. BasisSet; Contains basis set information. BlockOPoints; docstring. BoysLocalizer; Performs Boys orbital localization. CCWavefunction; Specialized Wavefunction used by the ccenergy, cceom, ccgradient, etc. CIVector; docstring. CIWavefunction; docstring. CUHF; docstring. CdSalc; Cartesian displacement SALC. CdSalcList; Class for generating symmetry adapted linear combinations of Cartesian displacements. CharacterTable; Contains the character table of the point group. CorrelationFactor; docstring. CorrelationTable; Provides a correlation table between two point groups. CubeProperties; docstring. DFEP2Wavefunction; A density-fitted second-order Electron Propagator Wavefunction. DFHelper; docstring. DFSOMCSCF; docstring. DFTGrid; docstring. DFTensor; docstring. DIISManager; docstring. Deriv; Computes gradients of wavefunctions. DerivCalcType; Members:. DiagonalizeOrder; Defines ordering of eigenvalues after diagonalization. Dimension; Initializes and defines Dimension Objects. DipoleInt; Computes dipole integrals. DiskSOMCSCF; docstring. Dispersion; docstring. ERI; Computes normal",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/psi4api-1.html:11402,Perform,Performs,11402,psi4manual/1.4.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/psi4api-1.html,2,['Perform'],['Performs']
Performance,"ctional. sym_label() LibmintsMolecule method. symbol() CoordEntry method. LibmintsMolecule method. symmetrize() LibmintsMolecule method. symmetry. molecule. symmetry_frame() LibmintsMolecule method. symmetry_from_input() LibmintsMolecule method. T. T (THERMO). T2_COUPLED (CCENERGY). T3_WS_INCORE (CCENERGY). (CCEOM). T_AMPS (CCHBAR). Table class in p4util.text. tblhead() in module wrappers. TDHF_MEM_SAFETY_FACTOR (CPHF). TDM (DETCI). TDM_PRINT (DETCI). TDM_WRITE (DETCI). test() in module pcmgetkw. TEST_B (OPTKING). test_ccl_functional() in module functional. TEST_DERIVATIVE_B (OPTKING). theory; . ADC. CC. CI. DCFT. DF-MP2. DFT. OCEPA. OEProp. OMP2. OMP3. Orbital-Optimized Methods. SAPT. SCF. cbs(), [1]. THETA_POINTS (SCF). THICKNESS (SCF). threading. TIKHONOW_MAX (PSIMRCC). TIKHONOW_OMEGA (DCFT). (PSIMRCC). TIKHONOW_TRIPLES (PSIMRCC). TILE_SZ (SCF). TPDM (DCFT). (DETCI). TPDM_ABCD_TYPE (OCC). TPDM_ADD_REF (TRANSQT). TPDM_FILE (TRANSQT). TPDM_PRINT (DETCI). transition state; . geometry optimization. translate() LibmintsMolecule method. transpose() in module qcdb.vecutil. TRIPLES_ALGORITHM (PSIMRCC). TRIPLES_DIIS (PSIMRCC). TRIPLES_LOW_MEMORY (FNOCC). TURN_ON_ACTV (MCSCF). TWO-ELECTRONENERGY. type() CartesianEntry method. NumberValue method. VariableValue method. ZMatrixEntry method. typecheck() Keyword method. U. UNCP-CORRECTED2-BODYINTERACTIONENERGY. unique() LibmintsMolecule method. units; . molecule. UNITS (GLOBALS). units() LibmintsMolecule method. UPDATE (DETCI). update_geometry() LibmintsMolecule method. USE_DF_INTS (FNOCC). USE_SPIN_SYM (PSIMRCC). USE_SPIN_SYMMETRY (PSIMRCC). useful() in module qcdb.dbproc. V. VAL_EX_LEVEL (DETCI). valid_atom_map() LibmintsMolecule method. validate_bracketed_basis() in module wrappers. validate_scheme_args() in module wrappers. ValidationError, [1]. variable_to_string() NumberValue method. VariableValue method. VariableValue class in qcdb.libmintscoordentry. VECS_CC3 (CCEOM). VECS_PER_ROOT (CCEOM). VECS_WRITE (DETCI). verify_cav",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/genindex.html:48050,optimiz,optimization,48050,psi4manual/4.0b5/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/genindex.html,1,['optimiz'],['optimization']
Performance,"ctions known to PSI4. psi4.driver.driver_cbs_helper.register_xtpl_function(func)[source]¶; Register a user-defined extrapolation function to use like an built-in one. Parameters; func (Callable) – A Python function that applies a basis set extrapolation formula to scalars and optionally to; NumPy arrays. See psi4/psi4/driver/driver_cbs_helper.py and pywrap-cbs1 for; examples. The name of the function should follow the pattern <scf|corl>_xtpl_<scientist>_<#basis>. Aliases¶; When a particular composite method or its functional form is going to be; reused often, it is convenient to define an alias to it. A convenient; place for such Python code to reside is in psi4/psi4/driver/aliases.py; Some existing examples are below. psi4.driver.aliases.sherrill_gold_standard(**kwargs)[source]¶; Function to call the quantum chemical method known as ‘Gold Standard’; in the Sherrill group. Uses the composite wrapper to evaluate; the following expression. Two-point extrapolation of the correlation energy; performed according to corl_xtpl_helgaker_2(). \[E_{total}^{\text{Au\_std}} = E_{total,\; \text{SCF}}^{\text{aug-cc-pVQZ}} \; + E_{corl,\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}} \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\big\vert_{\text{aug-cc-pVTZ}}\]; >>> # [1] single-point energy by this composite method; >>> energy('sherrill_gold_standard'). >>> # [2] finite-difference geometry optimization; >>> optimize('sherrill_gold_standard'). >>> # [3] finite-difference geometry optimization, overwriting some pre-defined sherrill_gold_standard options; >>> optimize('sherrill_gold_standard', corl_basis='cc-pV[DT]Z', delta_basis='3-21g'). Return type; List[Dict[str, Any]]. psi4.driver.aliases.allen_focal_point(**kwargs)[source]¶; Function to call Wes Allen-style Focal; Point Analysis. JCP 127 014306. Uses; the composite wrapper to evaluate the following; expression. SCF employs a three-point extrapolation according; to scf_xtpl_helgaker_3(). MP2, CCSD, and; CCSD(T) employ two-point extrapolation ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/cbs.html:30565,perform,performed,30565,psi4manual/1.6.x/cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/cbs.html,1,['perform'],['performed']
Performance,"ctions like the above looked like; energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; psi4.driver.cbs() and extrapolation schemes like; psi4.driver.driver_cbs_helper.xtpl_highest_1() and; psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2() and composite; aliases like psi4.driver.aliases.sherrill_gold_standard(); and psi4.driver.aliases.allen_focal_point() in the old way; passed the Python function directly, whereas the new way uses the; string of the function name. A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can also be accessed through the first item below more; conveniently than the equivalent second and third items. optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz'); optimize(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz'); optimize(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvqz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvdz""}]). Many examples can be found at cbs-xtpl-energy,; cbs-xtpl-gradient, cbs-xtpl-opt,; cbs-xtpl-freq, cbs-xtpl-func,; cbs-xtpl-wrapper, cbs-xtpl-dict. psi4.cbs(name[, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, cbs_metadata])[source]; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a cof",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/cbs.html:1836,optimiz,optimize,1836,psi4manual/master/cbs.html,https://psicode.org,https://psicode.org/psi4manual/master/cbs.html,12,['optimiz'],['optimize']
Performance,"ction¶; Runs the MCSCF code, (N.B. restricted to certain active spaces). psi4.core.mrcc_generate_input(arg0: psi::Wavefunction, arg1: dict) → psi4.core.PsiReturnType¶; Generates an input for Kallay’s MRCC code. psi4.core.mrcc_load_densities(arg0: psi::Wavefunction, arg1: dict) → psi4.core.PsiReturnType¶; Reads in the density matrices from Kallay’s MRCC code. psi4.core.occ(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the orbital optimized CC codes. psi4.core.opt_clean() → None¶; Cleans up the optimizer’s scratch files. psi4.core.optking() → int¶; Runs the geometry optimization / frequency analysis code. psi4.core.outfile_name() → str¶; Returns the name of the output file. psi4.core.plugin(arg0: str, arg1: psi::Wavefunction) → psi::Wavefunction¶; Call the plugin of name arg0. Returns the plugin code result. psi4.core.plugin_close(arg0: str) → None¶; Close the plugin of name arg0. psi4.core.plugin_close_all() → None¶; Close all open plugins. psi4.core.plugin_load(arg0: str) → int¶; Load the plugin of name arg0. Returns 0 if not loaded, 1 if loaded, 2 if already loaded. psi4.core.prepare_options_for_module(arg0: str) → None¶; Sets the options module up to return options pertaining to the named argument (e.g. SCF). psi4.core.print_global_options() → None¶; Prints the currently set global (all modules) options to the output file. psi4.core.print_options() → None¶; Prints the currently set options (to the output file) for the current module. psi4.core.print_out(arg0: str) → None¶; Prints a string (using sprintf-like notation) to the output file. psi4.core.print_variables() → None¶; Prints all PSI variables that have been set internally. psi4.core.psi_top_srcdir() → str¶; Returns the location of the source code. psi4.core.psimrcc(arg0: psi::Wavefunction) → float¶; Runs the multireference coupled cluster code. psi4.core.reopen_outfile() → None¶; Reopens the output file. psi4.core.revoke_global_option_changed(arg0: str) → None¶; Given a string of a keyword name arg1, s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/psi4api-1.html:154140,Load,Load,154140,psi4manual/1.1.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/psi4api-1.html,2,['Load'],['Load']
Performance,"ctor for allocating JK. Type: double; Default: 0.75. CIS_NO_STATES (CPHF); CPHF — Which states to save AO Natural Orbitals for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_OPDM_STATES (CPHF); CPHF — Which states to save AO OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CIS_TOPDM_STATES (CPHF); CPHF — Which states to save AO transition OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. COLLAPSE_SIZE (DETCI); DETCI — Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM); CCEOM — Do ?. Type: boolean; Default: true. COMPLEX_TOLERANCE (CCEOM); CCEOM —. Type: conv double; Default: 1e-12. CONSECUTIVE_BACKSTEPS (OPTKING); OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC); PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC); PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC); PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC); PSIMRCC — The multiplicity, , of the target state. Must be specified if different from the reference . Type: integer; Default: 1. CORR_REFERENCE (PSIMRCC); PSIMRCC — Reference wavefunction type used in MRCC computations. Type: string; Possible Values: RHF, ROHF, TCSCF, MCSCF, GENERAL; Default: GENERAL. CORR_WFN (PSIMRCC); PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLING (PSIMRCC); PSIMRCC — The order of coupling terms to inclu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html:13286,optimiz,optimization,13286,psi4manual/4.0b2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimization']
Performance,"ctors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC); OCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_MAXITER (DFOCC); DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC); OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF); MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC); OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_RELAX (DCFT); DCFT (Expert) — Controls whether to relax the orbitals during the energy computation or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: true. MO_STEP_MAX (DFOCC); DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC); OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC); OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF); CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. MOGRAD_DAMPING (OCC); OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WITH_VIRTUAL (GLOBALS); GLOBALS — Write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs (false). Type: boolean; Default: true. MOLDEN_WRITE (DCFT); DCFT — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (DFOCC); DFOCC — Do write a MOLDEN output file? If so, the filename will end i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:161042,optimiz,optimization,161042,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,6,['optimiz'],['optimization']
Performance,"ctors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC); OCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_MAXITER (DFOCC); DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC); OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF); MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC); OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_RELAX (DCFT); DCFT (Expert) — Controls whether to relax the orbitals during the energy computation or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: true. MO_STEP_MAX (DFOCC); DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC); OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC); OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF); CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. MOGRAD_DAMPING (OCC); OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WRITE (DCFT); DCFT — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (DFOCC); DFOCC — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type:",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:161524,optimiz,optimization,161524,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimization']
Performance,"ctors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly.; References; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, “An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules.” J. Chem. Phys.,; 109, 8218 (1998). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; hamiltonian_solver. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html:2987,perform,performed,2987,psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html,3,['perform'],['performed']
Performance,"ctron properties are computed. Type: array; Default: No Default. PROPERTY (CCENERGY); CCENERGY — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity, and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, MAGNETIZABILITY, ROA, ALL; Default: POLARIZABILITY. PROPERTY (CCRESPONSE); CCRESPONSE — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. PROPERTY (CCSORT); CCSORT — The response property desired. The unique acceptable values is POLARIZABILITY for dipole-polarizabilitie. Type: string; Default: POLARIZABILITY. PT_ENERGY (PSIMRCC); PSIMRCC — The type of perturbation theory computation to perform. Type: string; Possible Values: SECOND_ORDER, SCS_SECOND_ORDER, PSEUDO_SECOND_ORDER, SCS_PSEUDO_SECOND_ORDER; Default: SECOND_ORDER. PUREAM (GLOBALS); GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCFT); DCFT — Controls whether to include the coupling terms in the DCFT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS); GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC; Default: No Default. QC_TYPE (DCFT); DCFT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:186766,perform,perform,186766,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['perform'],['perform']
Performance,"ctrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a do",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html:20326,optimiz,optimization,20326,psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_testsuite_corepsi4-1.html,4,['optimiz'],['optimization']
Performance,"cts the program to read these integrals from disk instead of recomputing; them. For each SCF computation, we use psi4.IO.set_default_namespace to uniquely; name scratch files. In the following SCF step, only file 97 is renamed using; psi4.IO.change_file_namespace so that integrals can be read from it.; For more information on stability analysis, see the stability; documentation. SAPT0¶; Generally speaking, SAPT0 should be applied to large systems or large data; sets. The performance of closed-shell SAPT0 relies entirely on error cancellation, which; seems to be optimal with a truncated aug-cc-pVDZ basis, namely,; jun-cc-pVDZ (which we have referred to in previous work as; aug-cc-pVDZ’). We do not recommend using SAPT0 with large basis sets; like aug-cc-pVTZ. A systematic study of the accuracy of closed-shell SAPT0 and other SAPT; truncations, using different basis sets, is reported in; [Parker:2014:094106]. In particular, an empirical recipe for scaled SAPT0; can yield improved performance and has been included in the output file as; the sSAPT0 interaction energy. sSAPT0 is a free by-product and is automatically; computed when SAPT0 is requested (see above for more details).; The SAPT module has been used to perform SAPT0 computations with over; 200 atoms and 2800 basis functions; this code should be scalable to 4000; basis functions. Publications resulting from the use of the SAPT0 code; should cite the following publications: [Hohenstein:2010:184111] and; [Hohenstein:2011:174107]. If the open-shell SAPT0 code is used,; [Gonthier:2016:134106] should be additionally cited. Basic SAPT0 Keywords¶. SAPT_LEVEL¶. The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/sapt.html:18559,perform,performance,18559,psi4manual/master/sapt.html,https://psicode.org,https://psicode.org/psi4manual/master/sapt.html,15,['perform'],['performance']
Performance,"cular geometry can be got and set and manipulated as a; Matrix object. Below shows how to access; coordinates in an input file in Python.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms as Python array. geom2psi = psi4.Matrix(4, 3) # initialize psi4.Matrix; geom2psi.set(geom2py) # load Python array into psi4.Matrix; geom2psi.scale(1.0/psi_bohr2angstroms) # scale into bohr; geom2psi.print_out() # print alternate coord array to output file. formaldehyde.set_geometry(geom2psi) # load alternate coordinates into molecule; formaldehyde.update_geometry() # update the molecule internals; formaldehyde.print_out() # print new molecule to output file; compare_values(28.9950517332, formaldehyde.nuclear_repulsion_energy(), 4, ""geom2 took""). Molecules can be initiated from XYZ files and fragmented for SAPT computations.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39# >>> cat mol1.xyz; #7; #; #O 0.00000000 -0.05786571 -1.47979303; #N 0.00000000 0.01436394 1.46454628; #H 0.00000000 0.82293384 -1.85541474; #H 0.81348351 0.39876776 1.92934049; #H 0.00000000 0.07949567 -0.51934253; #H 0.00000000 -0.98104857 1.65344779; #H -0.81348351 0.39876776 1.92934049. # >>> cat mol2.xyz; # 6 au; # stu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/psithonmol-1.html:18084,load,load,18084,psi4manual/1.1.0/psithonmol-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/psithonmol-1.html,6,['load'],['load']
Performance,"cular root. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc12; Single point energies of multiple excited states with EOM-CCSD. cisd-sp; 6-31G** H2O Test CISD Energy Point. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. mrcc4; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). omp2_5-1; OMP2 cc-pVDZ energy for the H2O molecule. fci-dipole; 6-31G H2O Test FCI Energy Point. fnocc3; Test FNO-QCISD(T) computation. tu4-h2o-freq; Frequencies for H2O HF/cc-pVDZ at optimized geometry. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. mints3; Test individual integral objects for correctness. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html:13528,perform,performs,13528,psi4manual/4.0b4/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html,4,['perform'],['performs']
Performance,"culation)' +; r'(?:.*?)' +; #r'^\s+\d+\s+' + NUMBER + r'\s+' + NUMBER + r'\s+' + 'Convergence criterion met' + r'\s*' +; #r'(?:.*?)' +; # need a not ""Hartree-Fock SCF calculation"" here so DFT @@@ MP2 not caught?; r'^\s*' + r'(?:Total RIMP2 correlation energy =)' + r'\s+' + NUMBER + r'\s+' + r'au' + r'\s*' +; r'^\s+' + r'(?:RIMP2 total energy =)' + r'\s+' + NUMBER + r'\s+' + r'au' + r'\s*$',; outtext, re.MULTILINE | re.DOTALL | re.IGNORECASE); if mobj:; print('matched mp2'); #psivar['NUCLEAR REPULSION ENERGY'] = mobj.group(1); #psivar['DFT TOTAL ENERGY'] = mobj.group(2); #psivar['DFT FUNCTIONAL TOTAL ENERGY'] = mobj.group(2); psivar['MP2 CORRELATION ENERGY'] = mobj.group(1); #psivar['DOUBLE-HYBRID CORRECTION ENERGY'] = mobj.group(1); print(psivar). # TODO: need to split on 'Q-Chem begins' or 'Quantum Leap' or something. # # Process DFT no-D or internal-D WORKS BUT LOOKAHEAD VERY SLOW; # mobj = re.search(; # r'((?!grimme3).)*' + r'\s*' + # severe negative performance impact; # TODO note neg lookahead insufficient since option could be negated; # r'(?:.*?)' +; # r'^\s+' + r'(?:Nuclear Repulsion Energy =)' + r'\s+' + NUMBER + r'\s+hartrees\s*' +; # r'(?:.*?)' +; # r'(?:HF-DFT SCF calculation)' +; # r'(?:.*?)' +; # r'^\s+\d+\s+' + NUMBER + r'\s+' + NUMBER + r'\s+' + 'Convergence criterion met' + r'\s*$',; # outtext, re.MULTILINE | re.DOTALL | re.IGNORECASE); # if mobj:; # print('matched dft'); # psivar['NUCLEAR REPULSION ENERGY'] = mobj.group(2); # psivar['DFT TOTAL ENERGY'] = mobj.group(3); # psivar['DFT FUNCTIONAL TOTAL ENERGY'] = mobj.group(3). # # Process PsiVariables; # mobj = re.search(r'^(?: Variable Map:)\s*' +; # r'^\s*(?:-+)\s*' +; # r'^(.*?)' +; # r'^(?:\s*?)$',; # outtext, re.MULTILINE | re.DOTALL); #; # if mobj:; # for pv in mobj.group(1).split('\n'):; # submobj = re.search(r'^\s+' + r'""(.+?)""' + r'\s+=>\s+' + NUMBER + r'\s*$', pv); # if submobj:; # psivar['%s' % (submobj.group(1))] = submobj.group(2). # Process Completion; mobj = re.search(r'Thank you very m",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/qchem.html:6280,perform,performance,6280,psi4manual/1.0.0/_modules/qcdb/qchem.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/qchem.html,1,['perform'],['performance']
Performance,"culations) some intermediate quantities are also printed. Type: integer; Default: 1. Advanced SAPT0 Keywords¶. AIO_CPHF¶. Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS¶. Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. NO_RESPONSE¶. Don’t solve the CPHF equations? Evaluate \(E_{ind}^{(20)}\) and \(E_{exch-ind}^{(20)}\) instead of their response-including counterparts. Only turn on this option if the induction energy is not going to be used. Type: boolean; Default: false. EXCH_SCALE_ALPHA¶. Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. INTS_TOLERANCE¶. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Specific open-shell SAPT0 keywords¶. SAPT_MEM_SAFETY¶. Memory safety. Type: double; Default: 0.9. COUPLED_INDUCTION¶. Whether",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/sapt-1.html:16977,perform,performs,16977,psi4manual/1.1.0/sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/sapt-1.html,2,['perform'],['performs']
Performance,"culations. The reduction in ERI tensor rank also makes DF an appealing option for conventional SCF calculations, where the ERIs are stored; in core or on disk. However, even when using DF, I/O becomes a significant bottleneck for systems of a sufficient size when performing conventional SCF; calculations. In principle, though, DF approaches can be utilized in an integral-direct context, gaining the benefits of DF methods without suffering the; I/O bottlenecks that conventional DF methods will eventually run into. One such approach, outlined by Weigend in [Weigend:2002:4285],; is available for use in Psi4 for the separate construction of the Coulomb contribution to the Fock matrix. This implementation can be used alongside; Psi4’s separate Exchange construction algorithms for composite Fock matrix construction by using the keyword DFDIRJ as the Coulomb construction; algorithm when specifying SCF_TYPE to use a composite algorithm combination (DFDIRJ+K_alg).; DFDIRJ supports multiple capabilities to improve performance. Specifically, DFDIRJ allows for a combination of density-matrix based ERI; screening (set SCREENING to DENSITY) and incremental Fock matrix construction (set INCFOCK to TRUE). These two, when combined,; enable more aggressive screening of ERI contributions to the Coulomb matrix and thus greatly improve performance. COSX Exchange¶; The semi-numerical COSX algorithm described in [Neese:2009:98] evaluates; two-electron ERIs analytically over one electron coordinate and numerically; over the other electron coordinate, and belongs to the family of pseudospectral; methods originally suggested by Friesner. In COSX, numerical integration is performed on standard; DFT quadrature grids, which are described in DFT: Density Functional Theory.; Both the accuracy of the COSX algorithm and also the computational; cost are directly determined by the size of the integration grid, so selection; of the grid is important. This COSX implementation uses two separate grids.; T",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/scf.html:35050,perform,performance,35050,psi4manual/1.8.x/scf.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/scf.html,1,['perform'],['performance']
Performance,"cule is specified in Z-matrix format ; with dummy atoms will result in the geometry being converted to a Cartesian representation. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; driver.energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses``’gradient’`` or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp3 optimization; >>> opt('mp3'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). For further discussion of geometry optimization, see; Sec. Geometry Optimization. Previous topic; Counterpoise Correct; Next topic; Frequency; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, The Psi4 Project.; Last updated on Nov 02, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/opt-1.html:8097,optimiz,optimization,8097,psi4manual/4.0b3/opt-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/opt-1.html,18,"['Optimiz', 'optimiz', 'perform']","['Optimization', 'optimization', 'optimize', 'performed']"
Performance,"cule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. dcft1; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. Previous topic; Test Suite and Sample Inputs; Next topic; Basis Sets by Element; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_testsuite-1.html:23832,perform,performs,23832,psi4manual/4.0b5/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_testsuite-1.html,2,['perform'],['performs']
Performance,"cule_for_input(molecule)); fmaster.write(p4util.format_options_for_input()); p4util.format_kwargs_for_input(fmaster, 2, **kwargs); fmaster.write(""""""%s('%s', **kwargs)\n\n"""""" % (frequency.__name__, lowername)); fmaster.write(instructionsM); fmaster.close(); psi4.print_out(instructionsM). for n, displacement in enumerate(displacements):; rfile = 'FREQ-%s' % (n + 1). # Build string of title banner; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""p4util.banner(' Hessian Computation: Energy Displacement %d ')\n"""""" % (n + 1); banners += """"""psi4.print_out('\\n')\n\n"""""". if (freq_mode.lower() == 'continuous'):; # Print information to output.dat; psi4.print_out('\n'); p4util.banner('Loading displacement %d of %d' % (n + 1, ndisp)). # Print information to the screen; print(' %d' % (n + 1), end=""""); if (n + 1) == ndisp:; print('\n', end=''); sys.stdout.flush(). # Load in displacement into the active molecule; molecule.set_geometry(displacement). # Perform the energy calculation; func(lowername, **kwargs). # Save the energy; energies.append(psi4.get_variable('CURRENT ENERGY')). # clean may be necessary when changing irreps of displacements; psi4.clean(). # S/R: Write each displaced geometry to an input file; elif (freq_mode.lower() == 'sow'):; molecule.set_geometry(displacement). # S/R: Prepare molecule, options, and kwargs; freagent = open('%s.in' % (rfile), 'w'); freagent.write('# This is a psi4 input file auto-generated from the gradient() wrapper.\n\n'); freagent.write(p4util.format_molecule_for_input(molecule)); freagent.write(p4util.format_options_for_input()); p4util.format_kwargs_for_input(freagent, **kwargs). # S/R: Prepare function call and energy save; freagent.write(""""""electronic_energy = %s('%s', **kwargs)\n\n"""""" % (func.__name__, lowername)); freagent.write(""""""psi4.print_out('\\nHESSIAN RESULT: computation %d for item %d """""" % (os.getpid(), n + 1)); freagent.write(""""""yields electronic energy %20.12f\\n' % (electronic_energy))\n\n""""""); freagent",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/driver.html:69044,Perform,Perform,69044,psi4manual/4.0b5/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/driver.html,1,['Perform'],['Perform']
Performance,cumentation; CCSORT — PSI4 [beta3] documentation; CCTRIPLES — PSI4 [beta3] documentation; CEPA — PSI4 [beta3] documentation; CIS — PSI4 [beta3] documentation; CLAG — PSI4 [beta3] documentation; CPHF — PSI4 [beta3] documentation; DCFT — PSI4 [beta3] documentation; DETCI — PSI4 [beta3] documentation; DFMP2 — PSI4 [beta3] documentation; FINDIF — PSI4 [beta3] documentation; GLOBALS — PSI4 [beta3] documentation; LMP2 — PSI4 [beta3] documentation; MCSCF — PSI4 [beta3] documentation; MINTS — PSI4 [beta3] documentation; MP2 — PSI4 [beta3] documentation; MRCC — PSI4 [beta3] documentation; OMP2 — PSI4 [beta3] documentation; OMP3 — PSI4 [beta3] documentation; OPTKING — PSI4 [beta3] documentation; PSIMRCC — PSI4 [beta3] documentation; RESPONSE — PSI4 [beta3] documentation; SAPT — PSI4 [beta3] documentation; SCF — PSI4 [beta3] documentation; STABILITY — PSI4 [beta3] documentation; THERMO — PSI4 [beta3] documentation; TRANSQT — PSI4 [beta3] documentation; TRANSQT2 — PSI4 [beta3] documentation; CACHELEVEL — PSI4 [beta3] documentation; CACHETYPE — PSI4 [beta3] documentation; JOBTYPE — PSI4 [beta3] documentation; MP2_OS_SCALE — PSI4 [beta3] documentation; MP2_SS_SCALE — PSI4 [beta3] documentation; MP2_TYPE — PSI4 [beta3] documentation; OPDM — PSI4 [beta3] documentation; OPDM_RELAX — PSI4 [beta3] documentation; REFERENCE — PSI4 [beta3] documentation; SCS — PSI4 [beta3] documentation; SCS_N — PSI4 [beta3] documentation; WFN — PSI4 [beta3] documentation; E_CONVERGENCE — PSI4 [beta3] documentation; INTS_TOLERANCE — PSI4 [beta3] documentation; MRCC_LEVEL — PSI4 [beta3] documentation; MRCC_METHOD — PSI4 [beta3] documentation; MRCC_NUM_SINGLET_ROOTS — PSI4 [beta3] documentation; MRCC_NUM_TRIPLET_ROOTS — PSI4 [beta3] documentation; MRCC_OMP_NUM_THREADS — PSI4 [beta3] documentation; MRCC_RESTART — PSI4 [beta3] documentation; CACHELEVEL — PSI4 [beta3] documentation; CC_MAXITER — PSI4 [beta3] documentation; CUTOFF — PSI4 [beta3] documentation; DIIS_MAX_VECS — PSI4 [beta3] documentation; DO_LEVE,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1133258,CACHE,CACHELEVEL,1133258,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,4,['CACHE'],['CACHELEVEL']
Performance,"cumulant functional theory code. psi4.core.detci(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the determinant-based configuration interaction code. psi4.core.dfmp2(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the DF-MP2 code. psi4.core.dfocc(arg0: psi::Wavefunction) → psi::Wavefunction¶; Runs the density-fitted orbital optimized CC codes. psi4.core.displace_atom(arg0: psi::Matrix, arg1: int, arg2: int, arg3: int, arg4: float) → None¶; Displaces one coordinate of single atom. psi4.core.dmrg(arg0: psi::Wavefunction) → float¶; Runs the DMRG code. psi4.core.efp_init() → psi4.core.EFP¶; Initializes the EFP library and returns an EFP object. psi4.core.efp_set_options() → None¶; Set EFP options from environment options object. psi4.core.fcidump_tei_helper(nirrep: int, restricted: bool, DPD_info: Dict[str, int], ints_tolerance: float, fname: str='INTDUMP') → None¶; Write integrals to file in FCIDUMP format. psi4.core.fd_1_0(arg0: psi::Molecule, arg1: list) → psi::Matrix¶; Performs a finite difference gradient computation, from energy points. psi4.core.fd_freq_0(arg0: psi::Molecule, arg1: list, arg2: int) → psi::Matrix¶; Performs a finite difference frequency computation, from energy points, for a given irrep. psi4.core.fd_freq_1(arg0: psi::Molecule, arg1: list, arg2: int) → psi::Matrix¶; Performs a finite difference frequency computation, from gradients, for a given irrep. psi4.core.fd_geoms_1_0(arg0: psi::Molecule) → List[psi::Matrix]¶; Gets list of displacements needed for a finite difference gradient computation, from energy points. psi4.core.fd_geoms_freq_0(arg0: psi::Molecule, arg1: int) → List[psi::Matrix]¶; Gets list of displacements needed for a finite difference frequency computation, from energy points, for a given irrep. psi4.core.fd_geoms_freq_1(arg0: psi::Molecule, arg1: int) → List[psi::Matrix]¶; Gets list of displacements needed fof a finite difference frequency computation, from gradients, for a given irrep. psi4.core.finalize() → None¶. psi4.c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/psi4api-1.html:226914,Perform,Performs,226914,psi4manual/1.2.1/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/psi4api-1.html,2,['Perform'],['Performs']
Performance,"cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods.; QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/dcft-1.html:10291,perform,performed,10291,psi4manual/1.1.0/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/dcft-1.html,6,['perform'],['performed']
Performance,"custom = 'Custom'; guessbasis = cast. # Hack to ensure cartesian or pure are used throughout; # This touches the option, as if the user set it; puream = PsiMod.get_global_option('PUREAM'); PsiMod.set_global_option('PUREAM', puream). # Switch to the guess namespace; namespace = PsiMod.IO.get_default_namespace(); PsiMod.IO.set_default_namespace((namespace + '.guess')). # Are we in a DF algorithm here?; scf_type = PsiMod.get_option('SCF_TYPE'); guess_type = PsiMod.get_option('GUESS'); df_basis_scf = PsiMod.get_option('DF_BASIS_SCF'); df_ints = PsiMod.get_option('DF_INTS_IO'). # Which basis is the final one; basis = PsiMod.get_option('BASIS'). # Setup initial SCF; PsiMod.set_local_option('SCF', 'BASIS', guessbasis); if (scf_type == 'DF'):; PsiMod.set_local_option('SCF', 'DF_BASIS_SCF', 'cc-pvdz-ri'); PsiMod.set_global_option('DF_INTS_IO', 'none'). # Print some info about the guess; PsiMod.print_out('\n'); banner('Guess SCF, %s Basis' % (guessbasis)); PsiMod.print_out('\n'). # Perform the guess scf; PsiMod.scf(). # Move files to proper namespace; PsiMod.IO.change_file_namespace(180, (namespace + '.guess'), namespace); PsiMod.IO.set_default_namespace(namespace). # Set to read and project, and reset bases; PsiMod.set_local_option('SCF', 'GUESS', 'READ'); PsiMod.set_local_option('SCF', 'BASIS', basis); if (scf_type == 'DF'):; PsiMod.set_local_option('SCF', 'DF_BASIS_SCF', df_basis_scf); PsiMod.set_global_option('DF_INTS_IO', df_ints). # Print the banner for the standard operation; PsiMod.print_out('\n'); banner(name.upper()); PsiMod.print_out('\n'). # Do the full scf; e_scf = PsiMod.scf(precallback, postcallback). PsiMod.set_local_option('SCF', 'GUESS', guess_type). else:. e_scf = PsiMod.scf(precallback, postcallback). return e_scf. [docs]def run_mp2(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a MP2 calculation. """"""; PsiMod.set_global_option('WFN', 'MP2'). # Bypass routine scf if user did something special to get it to converge; if not (('bypass_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/proc.html:6205,Perform,Perform,6205,psi4manual/4.0b2/_modules/proc.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/proc.html,1,['Perform'],['Perform']
Performance,"cz Dispersion Correction. dldf+d09; Dispersionless Hybrid Meta-GGA XC Functional w/ Podeszwa and Szalewicz Dispersion Correction. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Parameters:; name (string) – 'scf' || 'df-mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; energy(). func (function) – gradient || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. mode (string) – 'continuous' || 'sow' || 'reap'; For a finite difference of energies optimization, indicates whether; the calculations required to complete the; optimization are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples :. >>> # [1] Analytic scf optimization; >>> optimize('scf'). >>> # [2] Finite difference mp5 optimization; >>> opt('mp5'). >>> # [3] Forced finite difference ccsd optimization; >>> optimize('ccsd', dertype=1). For further discussion of geometry optimization, see; Sec. Geometry Optimization. Previous topic; Counterpoise Correct; Next topic; Frequency; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/opt-1.html:7064,optimiz,optimization,7064,psi4manual/4.0b5/opt-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/opt-1.html,4,['optimiz'],['optimization']
Performance,"d 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects).; PSI4 1.3 supports Python 3.6 and 3.7.; PSI4 1.4 supports Python 3.6, 3.7, 3.8, and 3.9.; PSI4 1.5 supports Python 3.7, 3.8, and 3.9.; PSI4 1.6 supports Python 3.8, 3.9, and 3.10.; PSI4 1.7 supports Python 3.8, 3.9, 3.10, and 3.11 (no binary packages for 3.11).; PSI4 1.8 supports Python 3.8, 3.9, 3.10, and 3.11.; The future plan is to (1) be compatible with 3.8 and above until there is a good reason to drop; older versions but (2) only build and test for versions conda-forge supports.; The current master supports 3.8, 3.9, 3.10, and 3.11. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; General GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; PSI4 can also compute an extensive list of one-electron properties.; For more tables with capabilities details:. Full Capabilities (first below) lists all methods; Capabilities Breakdown (second below) lists selected methods by reference, etc.; Module Capabilities lists selected methods by implementation; Energy, Energy (DFT), Energy (MRCC), Energy (CFOUR) fully list energy target methods; Gradient, Gradient (CFOUR) fully list gradient target methods; Frequency fully lists",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/introduction.html:23351,perform,perform,23351,psi4manual/1.8.x/introduction.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/introduction.html,1,['perform'],['perform']
Performance,"d CCSD(T) energies, converted from; atomic units (Hartree) to kcal mol-1 by multiplying by the; automatically-defined conversion factor psi_hartree2kcalmol. PSI4; provides several built-in physical constants and conversion factors, as; described in section Physical Constants.; Notice the loop over \(R\) to create; the table looks just like the loop over R to run the different; computations, and the CP-corrected energies ecp[R] are accessed the same; way they were stored. The print line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section).; Our table is printed at the very end of the output file, and looks like; this; CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies. R (Ang) E_int (kcal/mol); -----------------------------------------------------; 2.5 0.757718; 3.0 0.015687; 4.0 -0.016264. The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easily in PSI4. table of contents. Psithon Tutorial: Using PSI4 as an Executable; Basic Input File Structure; Sample Input Files; Running a Basic Hartree–Fock Calculation; Geometry Optimization and Vibrational Frequency Analysis; Analysis of Intermolecular Interactions; Potential Surface Scans and Counterpoise Correction Made Easy with Psithon. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. A PSI4 Tutorial; Psithon Tutorial: Using PSI4 as an Executable. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/tutorial.html:23325,Optimiz,Optimization,23325,psi4manual/master/tutorial.html,https://psicode.org,https://psicode.org/psi4manual/master/tutorial.html,1,['Optimiz'],['Optimization']
Performance,"d HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)¶MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC)¶MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC)¶MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC)¶MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC)¶MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC)¶MRCC (Expert) —",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:181204,perform,performed,181204,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,9,['perform'],['performed']
Performance,"d I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbita",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:6878,cache,cache,6878,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['cache'],['cache']
Performance,"d I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM); CCEOM —. Type: integer; Default: 2. CACHELEVEL (CCHBAR); CCHBAR —. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA); CCLAMBDA —. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE); CCRESPONSE — Cacheing level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCSORT); CCSORT —. Type: integer; Default: 2. CACHELEVEL (DCFT); DCFT — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (MP2); MP2 — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (OMP2); OMP2 —. Type: integer; Default: 2. CACHELEVEL (STABILITY); STABILITY —. Type: integer; Default: 2. CACHELEVEL (TRANSQT2); TRANSQT2 —. Type: integer; Default: 2. CACHETYPE (CCENERGY); CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-progra",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html:6269,cache,cache,6269,psi4manual/4.0b2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html,2,['cache'],['cache']
Performance,"d INTERNAL are synonyms and the default. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. CUSTOM is not fully implemented yet - expected optking 0.3.1. Type: string; Possible Values: REDUNDANT, INTERNAL, CARTESIAN, BOTH, CUSTOM; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_RESTART (OPTKING)¶OPTKING — Restart the optimization from optking’s written history. Type: double; Default: 0. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC)¶OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simul",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:190968,optimiz,optimization,190968,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,1,['optimiz'],['optimization']
Performance,"d Python; opt. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases; opt(). Returns; float – Total electronic energy of optimized structure in Hartrees. Returns; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises; psi4.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables. CURRENT ENERGY. Parameters. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Options passed to the GeomeTRIC optimizer; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessia",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.opt-1.html:1187,optimiz,optimization,1187,psi4manual/1.4.0/api/psi4.driver.opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.driver.opt-1.html,5,['optimiz'],['optimization']
Performance,"d a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. fnocc4; Test FNO-DF-CCSD(T) energy. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). nbody-he-4b; MP2/aug-cc-pvDZ many body energies of an arbitrary Helium complex, addressing 4-body formulas. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. remp-energy2; integral conventional unrestricted REMP/cc-pVDZ energies for the H2O+ molecule. results were independently verified against the initial wavels implementation. omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. scf-auto-cholesky; Cholesky filter a complete basis. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. opt11; Transition-state optimizations of HOOH to both torsional transition states. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:48982,optimiz,optimizations,48982,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,1,['optimiz'],['optimizations']
Performance,"d an algorithm error and reset.; if not opt_object.HX:; n += 1; continue; else:; raise ConvergenceError(; ""Psi4 caught an AlgError. This should only happen after optking resets the history""; ""and needs another Hessian"",; n,; wfn; ). core.print_out(opt_object.post_step_str()) # print convergence and step info. # Update psi4's molecule with new step. (Psi4 can rotate this molecule); molecule.set_geometry(core.Matrix.from_array(opt_object.molsys.geom)); molecule.update_geometry(). opt_status = opt_object.status() # Query optking for convergence, failure or continuing opt.; if opt_status == 'CONVERGED':. # Last geom is normally last in history. For IRC last geom is last in IRC trajectory; # Not sure how to handle ensuring that wfn corresponds to last point.; final_energy, final_geom = opt_object.summarize_result(). # Changing environment to optimized geometry as expected by user; molecule.set_geometry(core.Matrix.from_array(final_geom)); molecule.update_geometry(). print('Optimizer: Optimization complete!'); core.print_out('\n Final optimized geometry and variables:\n'); molecule.print_in_input_format(). for postcallback in hooks['optimize']['post']:; postcallback(lowername, wfn=wfn, **kwargs); core.clean(). optstash.restore(). if return_history:; history = {; 'energy': [step.E for step in opt_object.history.steps],; 'gradient': [step.cart_grad for step in opt_object.history.steps],; 'coordinates': [step.geom for step in opt_object.history.steps],; }. # Create OptimizationResult like Schema. Not validated since optimize() does not pass AtomicResults.; opt_data = opt_object.close(); if core.get_option('OPTKING', 'WRITE_OPT_HISTORY'):; with open(f""{core.get_writer_file_prefix(molecule.name())}.opt.json"", 'w+') as f:; json.dump(opt_data, f, indent=2). if return_wfn and return_history:; return (thisenergy, wfn, history); elif return_wfn and not return_history:; return (thisenergy, wfn); elif return_history and not return_wfn:; return (thisenergy, history); else:; return thi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver.html:75836,Optimiz,Optimizer,75836,psi4manual/1.7.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver.html,8,['Optimiz'],"['Optimization', 'Optimizer']"
Performance,"d as non-interacting; to a good approximation. Thus, when working with localized orbitals, the number; of interacting orbital pairs (and triples, quadruples, etc.) scales linearly; with system size. If carefully implemented, programs that exploit this sparsity; can be made to scale linearly (or else with lower order than their canonical; counterparts) at the cost of of modest, controllable errors. This is the; defining insight of DLPNO-MP2 and all related “local correlation” methods.; The DLPNO-MP2 code is a linear-scaling alternative to the DF-MP2; code, and is intended for use with large systems for which DF-MP2 is intractable.; When running DLPNO-MP2 with default settings, approximately 99.9% of the DF-MP2; correlation energy is recovered. The general outline of the method is as follows:. Localize the active occupied MOs (with the Foster-Boys method); Construct projected AOs (PAOs) from the virtual MOs; Calculate three-index integrals in the (sparse) LMO/PAO basis; Perform local density fitting to construct (sparse) exchange integrals; Transform local virtuals from PAOs to pair natural orbitals (PNOs), and truncate; Solve the iterative local MP2 equations in the LMO/PNO basis. An example input file is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c1; }. set basis cc-pvdz; set scf_type df; set freeze_core True; set pno_convergence normal. energy('dlpno-mp2'). The main difference between this input and a DF-MP2 input is the energy('dlpno-mp2'); call to energy(). The only other addition is the PNO_CONVERGENCE; keyword, which determines the accuracy of the local approximations underlying; the DLPNO-MP2 method. Note that the water molecule in this example is not large; enough for DLPNO-MP2 to be of any benefit relative to DF-MP2.; The theory of the DLPNO-MP2 method and practical recommendations for using the; code are presented below. Theory¶; See DF-MP2 for background on the theory of (non-local); density-fitted MP2. PSI4‘s DLPNO-MP2 implementation is ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/dlpnomp2.html:1879,Perform,Perform,1879,psi4manual/master/dlpnomp2.html,https://psicode.org,https://psicode.org/psi4manual/master/dlpnomp2.html,7,['Perform'],['Perform']
Performance,"d be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [3,1,0,2]. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR); CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR); CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR); CFOUR — Specifies the strength of a Fermi-Contact perturbation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The va",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:38865,optimiz,optimizations,38865,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,8,['optimiz'],"['optimizations', 'optimizer']"
Performance,"d by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF); SCF — The type of guess orbitals. Defaults to READ for geometry optimizations after the first step, to CORE for single atoms, and to SAD otherwise. The HUCKEL guess employs on-the-fly calculations like SAD, as described in doi:10.1021/acs.jctc.8b01089. Type: string; Possible Values: AUTO, CORE, GWH, SAD, HUCKEL, READ; Default: AUTO. GUESS_MIX (SCF); SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF); SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCFT); DCFT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DCFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI); DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI); DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI); DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI); DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:137340,optimiz,optimized,137340,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimized']
Performance,"d by adding an asterisk after the letter of the coordinate.; To optimize with the bond lengths fixed at their initial values, it is currently necessary to; generate and then modify the internal coordinate definitions as follows:; F 1 3; R* 1 2; R* 1 3; B 2 1 3. Convergence Criteria¶; Optking monitors five quantities to evaluate the progress of a geometry; optimization. These are (with their keywords) the change in energy; (MAX_ENERGY_G_CONVERGENCE), the maximum element of; the gradient (MAX_FORCE_G_CONVERGENCE), the root-mean-square; of the gradient (RMS_FORCE_G_CONVERGENCE), the maximum element; of displacement (MAX_DISP_G_CONVERGENCE), and the; root-mean-square of displacement (RMS_DISP_G_CONVERGENCE),; all in internal coordinates and atomic units. Usually, these options will not; be set directly. Primary control for geometry convergence lies with the keyword; G_CONVERGENCE which sets the aforementioned in accordance; with Table Geometry Convergence. Summary of sets of geometry optimization criteria available in PSI4. G_CONVERGENCE; Max Energy; Max Force; RMS Force; Max Disp; RMS Disp. NWCHEM_LOOSE [4];  . GAU_LOOSE [6];  . TURBOMOLE [4]. GAU [3] [6];  . CFOUR [4];  ;  .  ;  . QCHEM [1] [5].  .  . MOLPRO [2] [5].  .  . GAU_TIGHT [3] [6];  . GAU_VERYTIGHT [6];  . Footnotes. [1]Default. [2]Baker convergence criteria are the same. [3](1, 2) Counterpart NWCHEM convergence criteria are the same. [4](1, 2, 3) Convergence achieved when all active criteria are fulfilled. [5](1, 2, 3) Convergence achieved when Max Force and one of Max Energy or Max Disp are fulfilled. [6](1, 2, 3, 4, 5) Normal convergence achieved when all four criteria (Max Force, RMS Force,; Max Disp, and RMS Disp) are fulfilled. To help with flat; potential surfaces, alternate convergence achieved when 100rms force is less; than RMS Force criterion. For ultimate control, specifying a value for any of the five monitored options activates that; criterium and overwrites/appends it to the criteria set by G_C",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/optking-1.html:8188,optimiz,optimization,8188,psi4manual/4.0b3/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/optking-1.html,8,['optimiz'],['optimization']
Performance,"d by adding; extra calls to addCharge to describe the full MM region.; To run a computation in a constant dipole field, the PERTURB_H,; PERTURB_WITH and PERTURB_DIPOLE keywords can be used. As an; example, to add a dipole field of magnitude 0.05 a.u. in the y direction and; 0.1 a.u. in the z direction, we can use the following keywords:; set perturb_h true; set perturb_with dipole; set perturb_dipole [ 0, 0.05, 0.1 ]. Note that if any specified fields do not fall along a symmetry axis, the; symmetry of the calculation should be reduced accordingly; if in doubt run the; calculation in C1 symmetry. For examples of SCF and MP2 calculations in an; external field, see scf7 and dfmp2-grad5. Convergence and Algorithm Defaults¶. SCF algorithm and convergence criteria defaults by calculation type 1¶. Ab Initio Method; Calculation Type; E_CONVERGENCE; D_CONVERGENCE; SCF_TYPE. SCF of HF or DFT; energy; 6; 6; DF. optimization; 8; 8. frequency 7; 8; 8. SCF of post-HF; energy; 8; 8; PK 3. optimization; 10; 10. frequency 7; 10; 10. CC property 2; 10; 10. Post-SCF convergence criteria defaults by calculation type 4¶. Ab Initio Method; Calculation Type; E_CONVERGENCE 5; R_CONVERGENCE 6. post-HF of post-HF; energy; 6. optimization; 8. frequency 7; 8. CC property 2; 8. Footnotes. 1; Note that this table applies only the SCF module,; not to the final convergence criteria for post-HF methods or to methods; that use an alternate starting point, like MCSCF. SAPT computations, too,; set tighter values. 2(1,2); This applies to properties computed through the properties() function. 3; Post-HF methods that do not rely upon the usual 4-index AO integrals use a; density-fitted SCF reference. That is, for DF-MP2 and SAPT, the default SCF_TYPE is DF. 4; Note that this table applies to the final convergence criteria for; all the post-SCF modules that define a E_CONVERGENCE keyword. 5; The E_CONVERGENCE keyword is implemented for most post-SCF modules.; See a list beginning at E_CONVERGENCE. 6; The",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/scf-1.html:39849,optimiz,optimization,39849,psi4manual/1.4.0/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/scf-1.html,4,['optimiz'],['optimization']
Performance,d can be controlled through OCC (conventional integrals CONV); and DFOCC (density-fitted DF and Cholesky-decomposed CD); keywords. Switching between the integrals treatments is controlled; through “type select” values in the rightmost Table column. Orbital-Optimized MP and LCCD capabilities of OCC/DFOCC modules¶. name; calls method; Energy; Gradient; type select. omp2; Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP2_TYPE CONV. Density-Fitted Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP2_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP2; RHF/UHF/ROHF/RKS/UKS; —; MP2_TYPE CD. omp3; Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE CONV. Density-Fitted Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —; MP_TYPE CD. omp2.5; Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE CONV. Density-Fitted Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; MP_TYPE DF. Cholesky-Decomposed Orbital-Optimized MP2.5; RHF/UHF/ROHF/RKS/UKS; —; MP_TYPE CD. olccd; Orbital-Optimized Linear CCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE CONV. Density-Fitted Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; RHF/UHF/ROHF/RKS/UKS; CC_TYPE DF. Cholesky-Decomposed Orbital-Optimized LCCD; RHF/UHF/ROHF/RKS/UKS; —; CC_TYPE CD. Spin-Component-Scaled Orbital-Optimized MP capabilities of OCC/DFOCC modules¶. name; calls method; Energy; Gradient. scs-omp3; Spin-Component Scaled Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —. sos-omp3; Spin-Opposite Scaled Orbital-Optimized MP3; RHF/UHF/ROHF/RKS/UKS; —. scs(n)-omp3; A special version of SCS-OMP3 for nucleobase interactions; RHF/UHF/ROHF/RKS/UKS; —. scs-omp3-vdw; A special version of SCS-OMP3 (from ethene dimers); RHF/UHF/ROHF/RKS/UKS; —. sos-pi-omp3; A special version of SOS-OMP3 for \(\pi\)-systems; RHF/UHF/ROHF/RKS/UKS; —. scs-omp2; Spin-C,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/occ-1.html:10229,Optimiz,Optimized,10229,psi4manual/1.1.0/occ-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/occ-1.html,11,['Optimiz'],['Optimized']
Performance,"d cluster energies. Called as part of any coupled cluster computation. General¶. ABCD¶. Type of ABCD algorithm will be used. Type: string; Possible Values: NEW, OLD; Default: NEW. ANALYZE¶. Do analyze T2 amplitudes. Type: boolean; Default: false. BCCD_MAXITER¶. Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL¶. Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantites with up to two virtual-orbital indices (e.g., integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CC_NUM_THREADS¶. Number of threads. Type: integer; Default: 1. CC_OS_SCALE¶. Coupled-cluster opposite-spin scaling value. Type: double; Default: 1.27. CC_SS_SCALE¶. Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. DIIS¶. Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. LOCAL¶. Do simulate the effec",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__ccenergy-1.html:1206,cache,cache,1206,psi4manual/1.0.0/autodir_options_c/module__ccenergy-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__ccenergy-1.html,2,['cache'],['cache']
Performance,"d efficiency in the rest of the; code).; DFMP2 likes disk. At a minimum, doubles are required for; RHF-MP2, and doubles are required for UHF-MP2.; DFMP2 likes threads. Some of the formation of the tensor; relies on threaded BLAS (such as MKL) for efficiency. The main; step is done via small/medium-sized DGEMMs inside of; OpenMP, so make sure to set the OMP_NESTED environment variable; to FALSE to prevent thread thrash (or just as well, do not define; OMP_NESTED at all).; Freezing core is good for both efficiency and correctness purposes.; Freezing virtuals is not recommended. The DFMP2 module will remind you how; many frozen/active orbitals it is using in a section just below the title.; ROHF-MBPT(2) may be preferred to UHF-MP2, as the latter can suffer from; severe spin contamination in some cases.; MP2 is not suitable for systems with multireference character. The; orbital energies will come together and an explosion will occur. Conventional MP2¶; Module: Keywords, PSI Variables, MP2; PSI4 also has a non-density-fitted MP2 algorithm for RHF, UHF, and; ROHF energies and RHF gradients. This code is not highly optimized, so the; density-fitted module DFMP2 is always the default. To access the; conventional MP2 code, set MP2_TYPE to conv and call; energy('mp2')/optimize('mp2'). MP2_TYPE¶. What algorithm to use for the MP2 computation. Type: string; Possible Values: DF, CONV; Default: DF. Table Of Contents. DF-MP2: Density-Fitted Second-Order Møller-Plesset Perturbation Theory; Introduction; Theory; Recommendations; Conventional MP2; MP2_TYPE. Previous topic; DFT: Density Functional Theory; Next topic; OMPn: Orbital-Optimized Møller–Plesset Perturbation Theory; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/dfmp2-1.html:7775,optimiz,optimized,7775,psi4manual/4.0b3/dfmp2-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/dfmp2-1.html,6,"['Optimiz', 'optimiz']","['Optimized', 'optimize', 'optimized']"
Performance,"d environment by merging PSIPATH and PATH environment variables; lenv = {; 'PATH': ':'.join([os.path.abspath(x) for x in os.environ.get('PSIPATH', '').split(':') if x != '']) +; ':' + os.environ.get('PATH'),; 'LD_LIBRARY_PATH': os.environ.get('LD_LIBRARY_PATH'); }; # Filter out None values as subprocess will fault on them; lenv = {k: v for k, v in lenv.items() if v is not None}. # Need to move to the scratch directory, perferrably into a separate directory in that location; psi_io = core.IOManager.shared_object(); os.chdir(psi_io.get_default_path()). # Make new directory specifically for mrcc; mrcc_tmpdir = 'mrcc_' + str(os.getpid()); if 'path' in kwargs:; mrcc_tmpdir = kwargs['path']. # Check to see if directory already exists, if not, create.; if os.path.exists(mrcc_tmpdir) is False:; os.mkdir(mrcc_tmpdir). # Move into the new directory; os.chdir(mrcc_tmpdir). # Generate integrals and input file (dumps files to the current directory); core.mrcc_generate_input(ref_wfn, level). # Load the fort.56 file; # and dump a copy into the outfile; core.print_out('\n===== Begin fort.56 input for MRCC ======\n'); core.print_out(open('fort.56', 'r').read()); core.print_out('===== End fort.56 input for MRCC ======\n'). # Modify the environment:; # PGI Fortan prints warning to screen if STOP is used; lenv['NO_STOP_MESSAGE'] = '1'. # Obtain the number of threads MRCC should use; lenv['OMP_NUM_THREADS'] = str(core.get_num_threads()). # If the user provided MRCC_OMP_NUM_THREADS set the environ to it; if core.has_option_changed('MRCC', 'MRCC_OMP_NUM_THREADS'):; lenv['OMP_NUM_THREADS'] = str(core.get_option('MRCC', 'MRCC_OMP_NUM_THREADS')). # Call dmrcc, directing all screen output to the output file; external_exe = 'dmrcc'; try:; retcode = subprocess.Popen([external_exe], bufsize=0, stdout=subprocess.PIPE, env=lenv); except OSError as e:; sys.stderr.write('Program %s not found in path or execution failed: %s\n' % (external_exe, e.strerror)); core.print_out('Program %s not found in path",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html:158058,Load,Load,158058,psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html,1,['Load'],['Load']
Performance,"d for same-spin pairs in SCS computations. SS/OS decomposition performed for and terms. Type: double; Default: 1.0/3.0. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies. Publications resulting; from the use of the higher-order SAPT code should cite the following:; [Hohenstein:2010:014101].; A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold arrays in core. With this requirement; computations on the adenine-thymine complex can be performed with an; aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the higly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAPT¶. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to BASIS-RI. Type: string; Possible Values: basis string; Default: No Default. FREEZE_CORE¶. Specifies how many core orbitals to freeze in correlated computations. TRUE will default to freezing the standard default number of core orbitals. For heavier elements, there can be some ambiguity in how many core orbitals to freeze; in such cases, SMALL picks the most conservative standard setting (freezes fewer orbitals), and LARGE picks the least conservative standard setting (freezes more orbitals). More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/sapt-1.html:8594,optimiz,optimized,8594,psi4manual/4.0b2/sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sapt-1.html,2,['optimiz'],['optimized']
Performance,"d for same-spin pairs in SCS computations. SS/OS decomposition performed for and terms. Type: double; Default: 1.0/3.0. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies. Publications resulting; from the use of the higher-order SAPT code should cite the following:; [Hohenstein:2010:014101].; A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold arrays in core. With this requirement; computations on the adenine-thymine complex can be performed with an; aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the higly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAPT¶. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. FREEZE_CORE¶. Specifies how many core orbitals to freeze in correlated computations. TRUE will default to freezing the standard default number of core orbitals. For PSI, the standard number of core orbitals is the number of orbitals in the nearest previous noble gas atom. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/sapt-1.html:8614,optimiz,optimized,8614,psi4manual/4.0b4/sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/sapt-1.html,4,['optimiz'],['optimized']
Performance,"d for same-spin pairs in SCS computations. SS/OS decomposition performed for and terms. Type: double; Default: 1.0/3.0. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies. Publications resulting; from the use of the higher-order SAPT code should cite the following:; [Hohenstein:2010:014101].; A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold arrays in core. With this requirement; computations on the adenine-thymine complex can be performed with an; aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the higly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAPT¶. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. FREEZE_CORE¶. Specifies how many core orbitals to freeze in correlated computations. TRUE will default to freezing the standard default number of core orbitals. For heavier elements, there can be some ambiguity in how many core orbitals to freeze; in such cases, SMALL picks the most conservative standard setting (freezes fewer orbitals), and LARGE picks the least conservative standard setting (freezes more orbitals). More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/sapt-1.html:8628,optimiz,optimized,8628,psi4manual/4.0b3/sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/sapt-1.html,2,['optimiz'],['optimized']
Performance,"d identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization (with MSVC, it enables AVX2 instructions)"" ON; ""-xHost"" ""-march=native"" ""/arch:AVX2""); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer""); option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2). Note that external projects will have their own sets of build; configuration o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:16619,optimiz,optimization,16619,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['optimiz'],['optimization']
Performance,"d in oe_ints; # Orbital energies; core.print_out('Writing orbital energies in FCIDUMP format to ' + fname + '\n'); if 'EIGENVALUES' in oe_ints:; eigs_dump = write_eigenvalues(wfn.epsilon_a().get_block(mo_slice).to_array(), mo_idx); intdump.write(eigs_dump); else:; PSIF_MO_A_FZC = 'MO-basis Alpha Frozen-Core Oper'; moH_A = core.Matrix(PSIF_MO_A_FZC, wfn.nmopi(), wfn.nmopi()); moH_A.load(core.IO.shared_object(), psif.PSIF_OEI); mo_slice = core.Slice(frzcpi, active_mopi); MO_FZC_A = moH_A.get_block(mo_slice, mo_slice); offset = 0; for h, block in enumerate(MO_FZC_A.nph):; il = np.tril_indices(block.shape[0]); for index, x in np.ndenumerate(block[il]):; row = alpha_mo_idx(il[0][index] + offset); col = alpha_mo_idx(il[1][index] + offset); if (abs(x) > ints_tolerance):; intdump.write('{:28.20E}{:4d}{:4d}{:4d}{:4d}\n'.format(x, row, col, 0, 0)); offset += block.shape[0]; PSIF_MO_B_FZC = 'MO-basis Beta Frozen-Core Oper'; moH_B = core.Matrix(PSIF_MO_B_FZC, wfn.nmopi(), wfn.nmopi()); moH_B.load(core.IO.shared_object(), psif.PSIF_OEI); mo_slice = core.Slice(frzcpi, active_mopi); MO_FZC_B = moH_B.get_block(mo_slice, mo_slice); offset = 0; for h, block in enumerate(MO_FZC_B.nph):; il = np.tril_indices(block.shape[0]); for index, x in np.ndenumerate(block[il]):; row = beta_mo_idx(il[0][index] + offset); col = beta_mo_idx(il[1][index] + offset); if (abs(x) > ints_tolerance):; intdump.write('{:28.20E}{:4d}{:4d}{:4d}{:4d}\n'.format(x, row, col, 0, 0)); offset += block.shape[0]; # Additional one-electron integrals as requested in oe_ints; # Orbital energies; core.print_out('Writing orbital energies in FCIDUMP format to ' + fname + '\n'); if 'EIGENVALUES' in oe_ints:; alpha_eigs_dump = write_eigenvalues(wfn.epsilon_a().get_block(mo_slice).to_array(), alpha_mo_idx); beta_eigs_dump = write_eigenvalues(wfn.epsilon_b().get_block(mo_slice).to_array(), beta_mo_idx); intdump.write(alpha_eigs_dump + beta_eigs_dump); # Dipole integrals; #core.print_out('Writing dipole moment OEI in FCIDUMP for",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/fcidump.html:6852,load,load,6852,psi4manual/1.6.x/_modules/psi4/driver/p4util/fcidump.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/fcidump.html,5,['load'],['load']
Performance,"d in oe_ints; # Orbital energies; core.print_out('Writing orbital energies in FCIDUMP format to ' + fname + '\n'); if 'EIGENVALUES' in oe_ints:; eigs_dump = write_eigenvalues(wfn.epsilon_a().get_block(mo_slice).to_array(), mo_idx); intdump.write(eigs_dump); else:; PSIF_MO_A_FZC = 'MO-basis Alpha Frozen-Core Oper'; moH_A = core.Matrix(PSIF_MO_A_FZC, wfn.nmopi(), wfn.nmopi()); moH_A.load(core.IO.shared_object(), psif.PSIF_OEI); mo_slice = core.Slice(frzcpi, active_mopi); MO_FZC_A = moH_A.get_block(mo_slice, mo_slice); offset = 0; for h, block in enumerate(MO_FZC_A.nph):; il = np.tril_indices(block.shape[0]); for index, x in np.ndenumerate(block[il]):; row = alpha_mo_idx(il[0][index] + offset); col = alpha_mo_idx(il[1][index] + offset); if (abs(x) > ints_tolerance):; intdump.write('{:29.20E}{:4d}{:4d}{:4d}{:4d}\n'.format(x, row, col, 0, 0)); offset += block.shape[0]; PSIF_MO_B_FZC = 'MO-basis Beta Frozen-Core Oper'; moH_B = core.Matrix(PSIF_MO_B_FZC, wfn.nmopi(), wfn.nmopi()); moH_B.load(core.IO.shared_object(), psif.PSIF_OEI); mo_slice = core.Slice(frzcpi, active_mopi); MO_FZC_B = moH_B.get_block(mo_slice, mo_slice); offset = 0; for h, block in enumerate(MO_FZC_B.nph):; il = np.tril_indices(block.shape[0]); for index, x in np.ndenumerate(block[il]):; row = beta_mo_idx(il[0][index] + offset); col = beta_mo_idx(il[1][index] + offset); if (abs(x) > ints_tolerance):; intdump.write('{:29.20E}{:4d}{:4d}{:4d}{:4d}\n'.format(x, row, col, 0, 0)); offset += block.shape[0]; # Additional one-electron integrals as requested in oe_ints; # Orbital energies; core.print_out('Writing orbital energies in FCIDUMP format to ' + fname + '\n'); if 'EIGENVALUES' in oe_ints:; alpha_eigs_dump = write_eigenvalues(wfn.epsilon_a().get_block(mo_slice).to_array(), alpha_mo_idx); beta_eigs_dump = write_eigenvalues(wfn.epsilon_b().get_block(mo_slice).to_array(), beta_mo_idx); intdump.write(alpha_eigs_dump + beta_eigs_dump); # Dipole integrals; #core.print_out('Writing dipole moment OEI in FCIDUMP for",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/p4util/fcidump.html:6845,load,load,6845,psi4manual/1.5.0/_modules/psi4/driver/p4util/fcidump.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/p4util/fcidump.html,1,['load'],['load']
Performance,"d in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e-02 8.82e-03 o ~; 2 -76.33226097 -1.81e-05 4.84e-04 4.03e-0",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/cfour-1.html:7671,optimiz,optimizations,7671,psi4manual/1.1.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/cfour-1.html,12,['optimiz'],"['optimization', 'optimizations']"
Performance,"d in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION. For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR); CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR); CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR); CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR); CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR); CFOUR — Specifies ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html:38518,optimiz,optimization,38518,psi4manual/1.1.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_glossary_options_c-1.html,4,['optimiz'],['optimization']
Performance,"d interaction energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY <CP-CORRECTED2-BODYINTERACTIONENERGY>`; * :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY <UNCP-CORRECTED2-BODYINTERACTIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No values of func besides energy have been tested. - Table print-out needs improving. Add some PSI variables. :type name: string; :param name: ``'scf'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; :py:func:`~driver.energy`; however, SAPT is not appropriate. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms a geometry optimization; on each system, and ``cbs`` performs a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('cp_func' in kwargs):; if ('func' in kwargs):; kwargs['cp_func'] = k",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html:17472,perform,performs,17472,psi4manual/4.0b3/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html,8,"['optimiz', 'perform']","['optimization', 'optimize', 'performs']"
Performance,"d interaction energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY <CP-CORRECTED2-BODYINTERACTIONENERGY>`; * :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY <UNCP-CORRECTED2-BODYINTERACTIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No values of func besides energy have been tested. - Table print-out needs improving. Add some PSI variables. :type name: string; :param name: ``'scf'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; :py:func:`~driver.energy`; however, SAPT is not appropriate. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms a geometry optimization; on each system, and ``cbs`` performs a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('df-mp2'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('cp_func' in kwargs):; if ('func' in kwargs):; kwargs['cp_fun",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:18099,perform,performs,18099,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,4,"['optimiz', 'perform']","['optimization', 'optimize', 'performs']"
Performance,"d interaction energy in kcal/mol. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY <CP-CORRECTED2-BODYINTERACTIONENERGY>`; * :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY <UNCP-CORRECTED2-BODYINTERACTIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No values of func besides energy have been tested. - Table print-out needs improving. Add some PSI variables. :type name: string; :param name: ``'scf'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; :py:func:`~driver.energy`; however, SAPT is not appropriate. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms a geometry optimization; on each system, and ``cbs`` performs a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-counterpoise corrected; monomers and thus obtain an estimate for the basis set superposition error. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] counterpoise-corrected mp2 interaction energy; >>> cp('dfmp2'). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(). # Establish function to call; if not('cp_func' in kwargs):; if ('func' in kwargs):; kwargs['cp_func'] = kw",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html:17465,perform,performs,17465,psi4manual/4.0b2/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html,4,"['optimiz', 'perform']","['optimization', 'optimize', 'performs']"
Performance,"d on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``freq_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies or gradients frequency, indicates; whether the calculations required to complete the frequency are to be run; in one file (``'continuous'``) or are to be farmed out in an; embarrassingly parallel fashion (``'sow'``/``'reap'``)/ For the latter,; run an initial job with ``'sow'`` and follow instructions in its output file.; For maximum flexibility, ``return_wfn`` is always on in ``'reap'`` mode. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: |dl| ``'hessian'`` |dr| || ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available- they're not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. :type irrep: int or string; :param irrep: |dl| ``-1`` |dr| || ``1`` || ``'b2'`` || ``'App'`` || etc. Indicates which symmetry block (:ref:`Cotton <table:irrepOrdering>` ordering) of vibrational; frequencies to be computed. ``1``, ``'1'``, or ``'a1'`` represents; :math:`a_1`, requesting only the totally symmetric modes.; ``-1`` indicates a full frequency calculation. .. note:: Analytic hessians are not available. Frequencies will proceed through; finite differences according to availability of gradients or energies. .. _`table:freq_gen`:. :examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver.html:80854,perform,performed,80854,psi4manual/1.0.0/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver.html,1,['perform'],['performed']
Performance,"d on the molecule.; The default dertype accesses ``'gradient'`` or ``'energy'``, while; ``'cbs'`` performs a multistage finite difference calculation.; If a nested series of python functions is intended (see :ref:`sec:intercalls`),; use keyword ``freq_func`` instead of ``func``. :type mode: string; :param mode: |dl| ``'continuous'`` |dr| || ``'sow'`` || ``'reap'``. For a finite difference of energies or gradients frequency, indicates; whether the calculations required to complete the frequency are to be run; in one file (``'continuous'``) or are to be farmed out in an; embarrassingly parallel fashion (``'sow'``/``'reap'``)/ For the latter,; run an initial job with ``'sow'`` and follow instructions in its output file.; For maximum flexibility, ``return_wfn`` is always on in ``'reap'`` mode. :type dertype: :ref:`dertype <op_py_dertype>`; :param dertype: |dl| ``'hessian'`` |dr| || ``'gradient'`` || ``'energy'``. Indicates whether analytic (if available- they're not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. :type irrep: int or string; :param irrep: |dl| ``-1`` |dr| || ``1`` || ``'b2'`` || ``'App'`` || etc. Indicates which symmetry block (:ref:`Cotton <table:irrepOrdering>` ordering) of vibrational; frequencies to be computed. ``1``, ``'1'``, or ``'a1'`` represents; :math:`a_1`, requesting only the totally symmetric modes.; ``-1`` indicates a full frequency calculation. .. note:: Analytic hessians are only available for RHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. .. _`table:freq_gen`:. +-------------------------+---------------------------------------------------------------------------------------------------------------+; | name | calls method |; +=========================+===============================================================================================================+; | scf | Hartree--Fock (HF) :ref:`[manu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html:82820,perform,performed,82820,psi4manual/1.1.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html,2,['perform'],['performed']
Performance,"d options. Used to capture C++; options information for distributed (sow/reap) input files. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Does not cover local (as opposed to global) options. - Does not work with array-type options. """"""; commands = ''; commands += """"""\nPsiMod.set_memory(%s)\n\n"""""" % (PsiMod.get_memory()); for chgdopt in PsiMod.get_global_option_list():; if PsiMod.has_option_changed(chgdopt):; chgdoptval = PsiMod.get_global_option(chgdopt); if isinstance(chgdoptval, basestring):; commands += """"""PsiMod.set_global_option('%s', '%s')\n"""""" % (chgdopt, chgdoptval); elif isinstance(chgdoptval, int) or isinstance(chgdoptval, float):; commands += """"""PsiMod.set_global_option('%s', %s)\n"""""" % (chgdopt, chgdoptval); else:; raise ValidationError('Option \'%s\' is not of a type (string, int, float, bool) that can be processed.' % (chgdopt)); return commands. [docs]def format_kwargs_for_input(filename, lmode=1, **kwargs):; """"""Function to pickle to file *filename* the options dictionary; *kwargs*. Mode *lmode* =2 pickles appropriate settings for; reap mode. Used to capture Python options information for; distributed (sow/reap) input files. """"""; if lmode == 2:; kwargs['mode'] = 'reap'; kwargs['linkage'] = os.getpid(); filename.write('''\npickle_kw = (""""""'''); pickle.dump(kwargs, filename); filename.write('''"""""")\n'''); filename.write(""""""\nkwargs = pickle.loads(pickle_kw)\n""""""); if lmode == 2:; kwargs['mode'] = 'sow'; del kwargs['linkage']. [docs]def drop_duplicates(seq):; """"""Function that given an array *seq*, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. """"""; noDupes = []; [noDupes.append(i) for i in seq if not noDupes.count(i)]; return noDupes. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |; PSI4 [beta2] » ; Module code ». © Copyright 2012, Psi4 Project.; Last updated on Aug 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/procutil.html:3036,load,loads,3036,psi4manual/4.0b2/_modules/procutil.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/procutil.html,1,['load'],['loads']
Performance,"d or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CC_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/fnocc. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'OCC':; func = run_occ; elif module in ['', 'FNOCC']:; func = run_cepa; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc. if func is None:; raise ManagedMethodError(['select_lccd', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_lccd_gradient(name, **kwargs):; """"""Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CC_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ. func = None; if reference in ['RHF', 'UHF']:; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient. if func is None:; raise ManagedMethodError(['select_lccd_gradient', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_olccd(name, **kwargs):; """"""Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CC_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ. func = None; i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html:15739,perform,performance,15739,psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/procrouting/proc.html,3,['perform'],['performance']
Performance,"d or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CC_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/fnocc. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'OCC':; func = run_occ; elif module in ['', 'FNOCC']:; func = run_cepa; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc. if func is None:; raise ManagedMethodError(['select_lccd', name, 'CC_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_lccd_gradient(name, **kwargs):; """"""Function selecting the algorithm for a LCCD gradient call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('CC_TYPE'); module = core.get_global_option('QC_MODULE'); all_electron = (core.get_global_option('FREEZE_CORE') == ""FALSE""); # Considering only [df]occ. func = None; if reference in ['RHF', 'UHF']:; if mtd_type == 'CONV':; if all_electron:; if module in ['', 'OCC']:; func = run_occ_gradient; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc_gradient. if func is None:; raise ManagedMethodError(['select_lccd_gradient', name, 'CC_TYPE', mtd_type, reference, module, all_electron]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def select_olccd(name, **kwargs):; """"""Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html:18786,perform,performance,18786,psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,3,['perform'],['performance']
Performance,"d or best-performance default modules. select_olccd(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD energy call; and directing to specified or best-performance default modules. select_olccd_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OLCCD gradient call; and directing to specified or best-performance default modules. select_omp2(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 energy call; and directing to specified or best-performance default modules. select_omp2_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 gradient call; and directing to specified or best-performance default modules. select_omp2_property(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2 property call; and directing to specified or best-performance default modules. select_omp2p5(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 energy call; and directing to specified or best-performance default modules. select_omp2p5_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP2.5 gradient call; and directing to specified or best-performance default modules. select_omp3(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 energy call; and directing to specified or best-performance default modules. select_omp3_gradient(name, **kwargs)[source]¶; Function selecting the algorithm for an OMP3 gradient call; and directing to specified or best-performance default modules. check_iwl_file_from_scf_type(scf_type, wfn)[source]¶; Ensures that a IWL file has been written based on input SCF type. check_non_symmetric_jk_density(name)[source]¶; Ensure non-symmetric density matrices are supported for the selected JK routine. dft_set_reference_local(name)[source]¶; Figures out the correct DFT reference to set locally. oeprop_validator(prop_list)[source]¶; Validations a list of OEProp computations. Throws if not found. scf_set_re",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:170226,perform,performance,170226,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['perform'],['performance']
Performance,"d or if the; orbital basis is not found. corresponding_jfit(name)[source]¶; Function to return an appropriate J fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_jkfit(name)[source]¶; Function to return an appropriate JK fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. corresponding_orbital(name)[source]¶; Function to validate if the orbital basis name in coded or; ornate form is in Psi4’s standard installed bases list. None; is returned if the orbital basis is not found. corresponding_rifit(name)[source]¶; Function to return an appropriate RI fitting basis for; the orbital basis name in coded or ornate form. None; is returned if no fitting basis is defined or if the; orbital basis is not found. load_basis_families()[source]¶; Function to load into the array basisfamily_list; BasisFamily objects for all Psi4’s standard installed bases. print_basis_families()[source]¶; Function to print to the output file a formatted summary; of all the BasisFamily objects in basisfamily_list, by; default all Psi4’s standard installed bases. sanitize_basisname(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), & ,; into _. array_to_matrix¶; classmethod(function) -> method; Convert a function to be a class method.; A class method receives the class as implicit first argument,; just like an instance method receives the instance.; To declare a class method, use this idiom:. class C:; def f(cls, arg1, arg2, ...): ...; f = classmethod(f). It can be called either on the class (e.g. C.f()) or on an instance; (e.g. C().f()). The instance is ignored except for its class.; If a class method is called for a derived class, the derived class; object is passed as the im",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:144537,load,load,144537,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['load'],['load']
Performance,"d psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files and Elementary Restart) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands¶. Update to latest Psi4 version; >>> conda update psi4. Install into a conda environment “p4env” instead of “root”. Second command only works on bash; for csh/tsch, setenv PATH /path/to/miniconda/envs/p4env/bin:$PATH instead. This creates a sandbox with just Psi4 and python (loaded as dependency).; >>> conda create -y -n p4env psi4; >>> source activate p4env. Install a particular Psi4 version; >>> conda install psi4=0.1.12. Uninstall Psi4 from current environment; >>> conda remove psi4. Troubleshooting¶. If the target computer doesn’t have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the Psi4 conda package won’t work.; # unsuitable computer; >>> ldd --version; ldd (GNU libc) 2.5; # suitable computer; >>> ldd --version; ldd (GNU libc) 2.17. It is of greatest importance that the Psi4 executable be linked against conda libpython.so not against any system libpython.so. This is arranged by setting RPATH to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda Psi4 executable is not vulnerable to interference from your LD_LIBRARY_PATH settings. Below shows a well-linked executable. no libraries “not ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/conda-1.html:13758,load,loaded,13758,psi4manual/1.0.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/conda-1.html,2,['load'],['loaded']
Performance,"d second-order; Møller–Plesset perturbation theory,” U. Bozkaya and; C. D. Sherrill, J. Chem. Phys. 138, 184103 (2013).; (doi: 10.1063/1.4803662).; “Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,”; U. Bozkaya, J. Chem. Theory Comput. 10, 2371 (2014).; (doi: 10.1021/ct500231c). Orbital-optimized third-order perturbation theory (OMP3). “Orbital-Optimized Third-Order Møller–Plesset Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134).; “Assessment of Orbital-Optimized Third-Order Møller–Plesset; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,” E. Soydas and U. Bozkaya,; J. Chem. Theory Comput. 9, 1452 (2013).; (doi: 10.1021/ct301078q).; “Analytic energy gradients for the orbital-optimized third-order Møller–Plesset; Perturbation Theory,” U. Bozkaya,; J. Chem. Phys. 139, 104116 (2013).; (doi: 10.1063/1.4820877). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). “Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 139, 054104 (2013).; (doi: 10.1063/1.4816628). Orbital-optimized MP2.5 (OMP2.5). “Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,” U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 141, 204105 (2014).; (doi: 10.1063/1.4902226). Extended Koopmans’ Theorem. “The extended Koopmans’ theorem for orbital-optimized methods: Accurate; computation of ionization potentials,” U. Bozkaya, J. Chem. Phys.; 139, 154105 (2013).; (doi: 10.1063/1.4825041).; “Accurate Electron Affinities from the Extended Koopmans’ Theorem Based on ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/introduction.html:17845,optimiz,optimized,17845,psi4manual/master/introduction.html,https://psicode.org,https://psicode.org/psi4manual/master/introduction.html,17,['optimiz'],['optimized']
Performance,"d status (revoke_changed), can only be done for a specific; scope, either global or local to the specified module. Querying, either a; value (get) or a changed status (has_changed), can be done in the global; scope, in a specified local scope, or in the context of “What will the; specified module use?”. Note; “Global” in the sense of the discussion has nothing; to do with the globals section at the top of psi4/psi4/src/read_options.cc. That; section is just a convenient place for options and associated values; that are used by most, if not all, modules. There are two primary purposes for interacting with options in the python driver. Preserving User Options (Enforcing definition [a] of has_changed); The first, less-interesting, use of retrieving user option values has; been to preserve them so that they may be restored at the end after the; procedure itself has clobbered them. By decoupling global_option and; local_option commands, this can now be performed neatly by saving at the; beginning the global and local values and the global and local; has_changed values, then restoring them at the end. Below is an example; of this procedure; don’t actually do this.; from psi4 import core. g_user_scftype = core.get_global_option('SCF_TYPE'); l_user_scftype_scf = core.get_local_option('SCF', 'SCF_TYPE'); bg_user_scftype = core.has_global_option_changed('SCF_TYPE'); bl_user_scftype_scf = core.has_local_option_changed('SCF', 'SCF_TYPE'). g_user_wfn = core.get_global_option('WFN'); l_user_wfn = core.get_local_option('MP2', 'WFN'); bg_user_wfn = core.has_global_option_changed('WFN'); bl_user_wfn = core.has_local_option_changed('MP2', 'WFN'). # body of function; # scf_type and wfn are freely changed, LOCALLY; # core.scf() and core.mp2() are run. core.set_global_option('SCF_TYPE', g_user_scftype); if not bg_user_scftype:; core.revoke_global_option_changed('SCF_TYPE'); core.set_local_option('SCF', 'SCF_TYPE', l_user_scftype_scf); if not bl_user_scftype_scf:; core.revoke_local_option",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/optionshandling.html:7973,perform,performed,7973,psi4manual/master/optionshandling.html,https://psicode.org,https://psicode.org/psi4manual/master/optionshandling.html,9,['perform'],['performed']
Performance,"d the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac or Windows with Ubuntu Bash Shell. I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on y",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_obtaining-1.html:1370,perform,performance,1370,psi4manual/1.4.0/build_obtaining-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_obtaining-1.html,6,['perform'],['performance']
Performance,"d then place two; dashes between nonbonded fragements. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; molecule{; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible value. Job Control¶; PSI4 comprises a number of modules, written in C++, that each perform; specific tasks and are callable directly from the Python front end. Each module; recognizes specific keywords in the input file, detailed in Appendix Keywords by Module, which; control its function. The keywords can be made global, or scoped to apply to; certain specific modules. The following examples demonstrate some of the ways; that global keywords can be specified:; set globals basis cc-pVDZ. or. set basis cc-pVDZ. or. set globals basis = cc-pVDZ. or. set basis = cc-pVDZ. or. set globals{; basis cc-pVDZ; }. or. set {; basis cc-pVDZ; }. or. set {; basis = cc-pVDZ; }. Note the lack of quotes around cc-pVDZ, even though it is a string. The; Psithon preprocessor automatically wraps any string values in set commands in; strings. The last three examples provide a more convenient way for specifying; multiple keywords:; set {; basis = cc-pVDZ; print = 1; reference = rhf; }. For arguments that require an array input, standard Python list syntax should; be used, viz.:; set {; docc ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/psithoninput-1.html:14968,perform,perform,14968,psi4manual/4.0b3/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/psithoninput-1.html,2,['perform'],['perform']
Performance,"d then place two; dashes between nonbonded fragements. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; molecule{; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible value. Job Control¶; PSI4 comprises a number of modules, written in C++, that each perform; specific tasks and are callable directly from the Python front end. Each module; recognizes specific keywords in the input file, detailed in Appendix Keywords by Module, which; control its function. The keywords can be made global, or scoped to apply to; certain specific modules. The following examples demonstrate some of the ways; that global keywords can be specified:; set globals basis cc-pVDZ. or. set basis cc-pVDZ. or. set globals basis = cc-pVDZ. or. set basis = cc-pVDZ. or. set globals{; basis cc-pVDZ; }. or. set{; basis cc-pVDZ; }. or. set{; basis = cc-pVDZ; }. Note the lack of quotes around cc-pVDZ, even though it is a string. The; Psithon preprocessor automatically wraps any string values in set commands in; strings. The last three examples provide a more convenient way for specifying; multiple keywords:; set{; basis = cc-pVDZ; print = 1; reference = rhf; }. For arguments that require an array input, standard Python list syntax should; be used, viz.:; set{; docc = [3",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/psithoninput-1.html:14398,perform,perform,14398,psi4manual/4.0b2/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/psithoninput-1.html,2,['perform'],['perform']
Performance,"d this revokation, turn on keyword FLEXIBLE_G_CONVERGENCE. Output¶; The progress of a geometry optimization can be monitored by grepping the output file for the; tilde character (~). This produces a table like the one below that shows; for each iteration the value for each of the five quantities and whether the criterion; is active and fulfilled (*), active and unfulfilled ( ), or inactive (o).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -38.91591820 -3.89e+01 6.91e-02 5.72e-02 o 1.42e-01 1.19e-01 o ~; 2 -38.92529543 -9.38e-03 6.21e-03 3.91e-03 o 2.00e-02 1.18e-02 o ~; 3 -38.92540669 -1.11e-04 4.04e-03 2.46e-03 o 3.63e-02 2.12e-02 o ~; 4 -38.92548668 -8.00e-05 2.30e-04 * 1.92e-04 o 1.99e-03 1.17e-03 o ~; 5 -38.92548698 -2.98e-07 * 3.95e-05 * 3.35e-05 o 1.37e-04 * 1.05e-04 o ~. The full list of keywords for optking is provided in Appendix OPTKING.; Information on the Psithon function that drives geometry optimizations is provided; at optimize(). Table Of Contents. Geometry Optimization; Basic Keywords; OPT_TYPE; STEP_TYPE; GEOM_MAXITER; G_CONVERGENCE; FULL_HESS_EVERY; INTCOS_GENERATE_EXIT. Optimizing Minima; Hessian; Transition States, Reaction Paths, and Constrained Optimizations; Convergence Criteria; Output. Previous topic; Configuration Interaction; Next topic; Psithon Functions: Invoking a Calculation; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Theoretical Methods: SCF to FCI ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/optking-1.html:10150,optimiz,optimizations,10150,psi4manual/4.0b2/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/optking-1.html,10,"['Optimiz', 'optimiz']","['Optimization', 'Optimizations', 'Optimizing', 'optimizations', 'optimize']"
Performance,"d to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2¶. This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3¶. This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4¶. This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV¶. Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below Hartree/bohr, where is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC¶. Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP¶. Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optk",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:29554,optimiz,optimization,29554,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,2,['optimiz'],['optimization']
Performance,"d to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2¶. This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3¶. This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4¶. This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV¶. Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC¶. Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP¶. Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has n",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html:29813,optimiz,optimization,29813,psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cfour-1.html,15,['optimiz'],['optimization']
Performance,"d triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). psi4.gradient(name[, molecule, return_wfn, func, dertype])[source]; Function complementary to optimize(). Carries out one gradient pass,; deciding analytic or finite difference. Returns; Matrix – Total electronic gradient in Hartrees/Bohr. Returns; (Matrix, Wavefunction) – gradient and wavefunction when return_wfn specified. Examples. >>> # [1] Single-point dft gradient getting the gradient; >>> # in file, core.Matrix, and np.array forms; >>> set gradient_write on; >>> G, wfn = gradient('b3lyp-d', return_wfn=True); >>> wfn.gradient().print_out(); >>> np.array(G). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Geometry Optimization — opt",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/opt-1.html:14222,optimiz,optimization,14222,psi4manual/1.4.0/opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/opt-1.html,4,['optimiz'],['optimization']
Performance,"d triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). psi4.gradient(name[, molecule, return_wfn, func, dertype])[source]; Function complementary to optimize(). Carries out one gradient pass,; deciding analytic or finite difference. Returns; Matrix – Total electronic gradient in Hartrees/Bohr. Returns; (Matrix, Wavefunction) – gradient and wavefunction when return_wfn specified. Examples. >>> # [1] Single-point dft gradient getting the gradient; >>> # in file, core.Matrix, and np.array forms; >>> set gradient_write on; >>> G, wfn = gradient('b3lyp-d', return_wfn=True); >>> wfn.gradient().print_out(); >>> np.array(G). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Psithon Functions: Invoking a Calculation; Geometry Optimization — opt",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/opt-1.html:14222,optimiz,optimization,14222,psi4manual/1.5.0/opt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/opt-1.html,4,['optimiz'],['optimization']
Performance,"d triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). psi4.gradient(name[, molecule, return_wfn, func, dertype])[source]; Function complementary to optimize(). Carries out one gradient pass,; deciding analytic or finite difference. Returns; Matrix – Total electronic gradient in Hartrees/Bohr. Returns; (Matrix, Wavefunction) – gradient and wavefunction when return_wfn specified. Examples. >>> # [1] Single-point dft gradient getting the gradient; >>> # in file, core.Matrix, and np.array forms; >>> set gradient_write on; >>> G, wfn = gradient('b3lyp-d', return_wfn=True); >>> wfn.gradient().print_out(); >>> np.array(G). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Psithon Functions: Invoking a Calculation; Geometry Optimization — opt",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/opt.html:14222,optimiz,optimization,14222,psi4manual/1.6.x/opt.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/opt.html,2,['optimiz'],['optimization']
Performance,"d unless either absolute accuracy is required; [\(\gtrsim\)CCSD(T)] or a -JKFIT auxiliary basis is unavailable; for the orbital basis/atoms involved.; CD; A threaded algorithm using approximate ERIs obtained by Cholesky; decomposition of the ERI tensor. The accuracy of the Cholesky; decomposition is controlled by the keyword CHOLESKY_TOLERANCE.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4’s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation.; For some of these algorithms, Schwarz and/or density sieving can be used to; identify negligible integral contributions in extended systems. To activate; sieving, set the IN",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/scf-1.html:22887,optimiz,optimized,22887,psi4manual/1.2.1/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/scf-1.html,4,['optimiz'],['optimized']
Performance,"d with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:32265,perform,performed,32265,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['perform'],['performed']
Performance,"d(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; >>> matrix = psi4.core.Matrix.from_array(irrep_data); >>> print(matrix.rowdim().to_tuple()); (2, 0, 4). classmethod from_list(x)¶. classmethod from_serial()¶; Converts serialized data to the correct Psi4 data type. Parameters:. self – Pointer to which class to be constructed.; json_data (Dict[str, Any]) – Serialization of class. See to_serial() for data layout. Return type:; Union[Matrix, Vector]. get(*args, **kwargs)¶; Overloaded function. get(self: psi4.core.Vector, m: int) -> float. Returns a single element value located at m. get(self: psi4.core.Vector, h: int, m: int) -> float. Returns a single element value located at m in irrep h. get_block(self: psi4.core.Vector, slice: psi4.core.Slice) → psi4.core.Vector¶; Get a vector block. init(self: psi4.core.Vector, arg0: psi4.core.Dimension) → None¶; Reallocate the data of the Vector. Consider making a new object. load(self: psi4.core.Vector, psio: psi4.core.IO, file: int) → None¶; Load the vector from disk. nirrep(self: psi4.core.Vector) → int¶; Returns the number of irreps. classmethod np_read(prefix='')¶; Reads the data from a NumPy compressed or uncompressed file using numpy.load(). Parameters:. self – Pointer to which class to be constructed.; filename (str) – File name to read.; prefix (str) – Name under which array was saved for NumPy. Return type:; Union[Matrix, Vector]. np_write(filename=None, prefix='')¶; Writes the irrepped matrix to a NumPy uncompressed file using numpy.savez().; Can return the packed data for saving many matrices into the same file. Parameters:. self (Union[Matrix, Vector]) – Instance to be serialized.; filename (Optional[str]) – File name where the data will be saved.; prefix (str) – Name of instance prepared for NumPy. Returns:; When filename given, it and dict serialization passed to; numpy.savez(), so .npz file saved and None returned.; When filename None, dict serialization returned. Return type:; None or Dict[str, Any]. print_ou",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.core.Vector.html:5210,Load,Load,5210,psi4manual/master/api/psi4.core.Vector.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.core.Vector.html,1,['Load'],['Load']
Performance,"d(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; >>> matrix = psi4.core.Matrix.from_array(irrep_data); >>> print(matrix.rowdim().to_tuple()); (2, 0, 4). classmethod from_list(x)¶. classmethod from_serial()¶; Converts serialized data to the correct Psi4 data type. Parameters:. self – Pointer to which class to be constructed.; json_data (Dict[str, Any]) – Serialization of class. See to_serial() for data layout. Return type:; Union[Matrix, Vector]. get(*args, **kwargs)¶; Overloaded function. get(self: psi4.core.Vector, m: int) -> float. Returns a single element value located at m. get(self: psi4.core.Vector, h: int, m: int) -> float. Returns a single element value located at m in irrep h. get_block(self: psi4.core.Vector, slice: psi4.core.Slice) → psi4.core.Vector¶; Get a vector block. init(self: psi4.core.Vector, arg0: psi4.core.Dimension) → None¶; Reallocate the data of the Vector. Consider making a new object. load(self: psi4.core.Vector, psio: psi4.core.IO, file: int) → None¶; Load the vector from disk. nirrep(self: psi4.core.Vector) → int¶; Returns the number of irreps. classmethod np_read(prefix='')¶; Reads the data from a NumPy compressed or uncompressed file using; numpy.load(). Parameters:. self (Union[Matrix, Vector]) – Pointer to which class to be constructed.; filename (str) – File name to read.; prefix (str) – Name under which array was saved for NumPy. Return type:; Union[Matrix, Vector]. np_write(filename=None, prefix='')¶; Writes the irrepped matrix to a NumPy uncompressed file using numpy.savez().; Can return the packed data for saving many matrices into the same file. Parameters:. self (Union[Matrix, Vector]) – Instance to be serialized.; filename (Optional[str]) – File name where the data will be saved.; prefix (str) – Name of instance prepared for NumPy. Returns:; When filename given, it and dict serialization passed to; numpy.savez(), so .npz file saved and None returned.; When filename None, dict serialization returned. Return type:; None or",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html:4861,Load,Load,4861,psi4manual/1.7.x/api/psi4.core.Vector.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html,1,['Load'],['Load']
Performance,"d(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; >>> matrix = psi4.core.Matrix.from_array(irrep_data); >>> print(matrix.rowdim().to_tuple()); (2, 0, 4). classmethod from_list(x)¶. classmethod from_serial()¶; Converts serialized data to the correct Psi4 data type. Parameters:. self – Pointer to which class to be constructed.; json_data (Dict[str, Any]) – Serialization of class. See to_serial() for data layout. Return type:; Union[Matrix, Vector]. get(*args, **kwargs)¶; Overloaded function. get(self: psi4.core.Vector, m: int) -> float. Returns a single element value located at m. get(self: psi4.core.Vector, h: int, m: int) -> float. Returns a single element value located at m in irrep h. get_block(self: psi4.core.Vector, slice: psi4.core.Slice) → psi4.core.Vector¶; Get a vector block. init(self: psi4.core.Vector, arg0: psi4.core.Dimension) → None¶; Reallocate the data of the Vector. Consider making a new object. load(self: psi4.core.Vector, psio: psi4.core.IO, file: int) → None¶; Load the vector from disk. nirrep(self: psi4.core.Vector) → int¶; Returns the number of irreps. classmethod np_read(prefix='')¶; Reads the data from a NumPy compressed or uncompressed file using; numpy.load(). Parameters:. self – Pointer to which class to be constructed.; filename (str) – File name to read.; prefix (str) – Name under which array was saved for NumPy. Return type:; Union[Matrix, Vector]. np_write(filename=None, prefix='')¶; Writes the irrepped matrix to a NumPy uncompressed file using numpy.savez().; Can return the packed data for saving many matrices into the same file. Parameters:. self (Union[Matrix, Vector]) – Instance to be serialized.; filename (Optional[str]) – File name where the data will be saved.; prefix (str) – Name of instance prepared for NumPy. Returns:; When filename given, it and dict serialization passed to; numpy.savez(), so .npz file saved and None returned.; When filename None, dict serialization returned. Return type:; None or Dict[str, Any]. print_o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html:5203,Load,Load,5203,psi4manual/1.8.x/api/psi4.core.Vector.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.Vector.html,1,['Load'],['Load']
Performance,"d). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING); OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS); GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_DOCC (PSIMRCC); PSIMRCC — The number of frozen occupied orbitals per irrep. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS); GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FROZEN_UOCC (PSIMRCC); PSIMRCC — The number of frozen virtual orbitals per irrep. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING); OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM); CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. FZC_A_FILE (TRANSQT); TRANSQT — Alpha-spin frozen-core file. Type: integer; Default: PSIF_OEI. FZC_B_FILE (TRANSQT); TRANSQT — Beta-spin frozen-core file. Type: integer; Default: PSIF_OEI. FZC_FILE (TRANSQT); TRANSQT — Frozen-core file. Type: integer; Default: PSIF_OEI. G_CONVERGENCE (OPTKING); OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOL",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html:50701,optimiz,optimization,50701,psi4manual/4.0b5/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html,2,['optimiz'],['optimization']
Performance,"d* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; # Grab grid points. Skip the first nine lines and the last one; evec = np.genfromtxt(expected, skip_header=9, skip_footer=1); cvec = np.genfromtxt(computed, skip_header=9, skip_footer=1); if evec.size == cvec.size:; if not np.allclose(cvec, evec, rtol=5e-05, atol=1e-10):; message = (""\t%s: computed cube file does not match expected cube file."" % label); raise TestComparisonError(message); else:; message = (""\t%s: computed cube file does not match size of expected cube file."" % label); raise TestComparisonError(message); success(label); return True. # Uncomment and use if compare_arrays above is inadequate; #def compare_lists(expected, computed, digits, label):; # """"""Function to compare two Python lists. Prints :py:func:`util.success`; # when elements of vector *computed* match elements of vector *expected* to; # number of *digits*. Performs a system exit on failure to match symmetry; # structure, dimension, or element values. Used in input files in the test suite.; #; # """"""; # if len(expected) != len(computed):; # message = (""\tThe reference has %d entries, but the computed vector has %d\n."" % (len(expected), len(computed))); # raise TestComparisonError(message); # dim = len(expected); # failed = 0; # for entry in range(dim):; # if(abs(expected[entry] - computed[entry]) > 10 ** (-digits)):; # print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed[entry], expected[entry])); # failed = 1; # break; #; # if(failed):; # core.print_out(""The computed vector\n""); # computed.print_out(); # core.print_out(""The reference vector\n""); # expected.print_out(); # message = (""\t%s: computed list does not match expected list."" % (label, computed, expected)); # raise TestComparisonError(message); # success(label). [docs]def copy_file_to_scratch(filename, prefix, namespace, unit, move=False):; """"""Function to move file into scratch with correct naming; conventi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html:13674,Perform,Performs,13674,psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,1,['Perform'],['Performs']
Performance,"d, set reference uhf, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree–Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree–Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis¶; The above examples were simple single-point energy computations; (as specified by the energy() function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; energy() with optimize() or frequency(), respectively.; Here’s an example of optimizing the H2O molecule using Hartree–Fock with; a cc-pVDZ basis set (located in; tu3-h2o-opt).; #! Optimize H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'). This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like Optimization is complete!. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ~), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not).; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.010",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/tutorial-1.html:5452,perform,perform,5452,psi4manual/1.0.0/tutorial-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/tutorial-1.html,6,['perform'],['perform']
Performance,d-order MP perturbation theory :ref:`[manual] <sec:occ_oo>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | omp2.5 | orbital-optimized MP2.5 :ref:`[manual] <sec:occ_oo>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | lccd | Linear CCD :ref:`[manual] <sec:occ_nonoo>` :ref:`[details] <tllccd>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | olccd | orbital optimized LCCD :ref:`[manual] <sec:occ_oo>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | ccd | coupled cluster doubles (CCD) :ref:`[manual] <sec:occ_nonoo>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | ccsd | coupled cluster singles and doubles (CCSD) :ref:`[manual] <sec:cc>` :ref:`[details] <tlccsd>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | ccsd(t) | CCSD with perturbative triples (CCSD(T)) :ref:`[manual] <sec:cc>` :ref:`[details] <tlccsdt>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | eom-ccsd | equation of motion (EOM) CCSD :ref:`[manual] <sec:eomcc>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+. .. _`table:grad_scf`:. .. include:: ../autodoc_dft_opt.rst. .. include:: ../cfour_table_grad.rst. :examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # prin,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html:54719,optimiz,optimized,54719,psi4manual/1.1.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html,3,['optimiz'],['optimized']
Performance,d-order MP perturbation theory :ref:`[manual] <sec:occ_oo>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | omp2.5 | orbital-optimized MP2.5 :ref:`[manual] <sec:occ_oo>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | lccd | Linear CCD :ref:`[manual] <sec:occ_nonoo>` :ref:`[details] <tllccd>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | olccd | orbital optimized LCCD :ref:`[manual] <sec:occ_oo>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | ccd | coupled cluster doubles (CCD) :ref:`[manual] <sec:occ_nonoo>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | ccsd | coupled cluster singles and doubles (CCSD) :ref:`[manual] <sec:cc>` :ref:`[details] <tlccsd>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | ccsd(t) | CCSD with perturbative triples (CCSD(T)) :ref:`[manual] <sec:cc>` :ref:`[details] <tlccsdt>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | eom-ccsd | equation of motion (EOM) CCSD :ref:`[manual] <sec:eomcc>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+. .. _`table:grad_scf`:. .. include:: /autodoc_dft_opt.rst. .. include:: /cfour_table_grad.rst. :examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed ,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html:64899,optimiz,optimized,64899,psi4manual/1.4.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html,3,['optimiz'],['optimized']
Performance,d-order MP perturbation theory :ref:`[manual] <sec:occ_oo>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | omp2.5 | orbital-optimized MP2.5 :ref:`[manual] <sec:occ_oo>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | lccd | Linear CCD :ref:`[manual] <sec:occ_nonoo>` :ref:`[details] <tllccd>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | olccd | orbital optimized LCCD :ref:`[manual] <sec:occ_oo>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | ccd | coupled cluster doubles (CCD) :ref:`[manual] <sec:occ_nonoo>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | ccsd | coupled cluster singles and doubles (CCSD) :ref:`[manual] <sec:cc>` :ref:`[details] <tlccsd>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | ccsd(t) | CCSD with perturbative triples (CCSD(T)) :ref:`[manual] <sec:cc>` :ref:`[details] <tlccsdt>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+; | eom-ccsd | equation of motion (EOM) CCSD :ref:`[manual] <sec:eomcc>` |; +-------------------------+---------------------------------------------------------------------------------------------------------------+. .. _`table:grad_scf`:. .. include:: autodoc_dft_opt.rst. .. include:: cfour_table_grad.rst. :examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver.html:53293,optimiz,optimized,53293,psi4manual/1.0.0/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver.html,1,['optimiz'],['optimized']
