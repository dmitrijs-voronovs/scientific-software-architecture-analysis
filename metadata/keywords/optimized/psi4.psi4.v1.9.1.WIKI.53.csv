quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Testability,"; indextitle = title if indextitle is None else indextitle; opttarget = {'default': ['']} if opttarget is None else opttarget. def unify_options(orequired, opossible):; """"""Perform a merge of options tags in *orequired* and *opossible* so; that the result is free of duplication and has the mode at the end. """"""; opt_combos = []; for oreq in orequired:; for opos in opossible:; pieces = sorted(set(oreq.split('_') + opos.split('_'))); if '' in pieces:; pieces.remove(''); for mode in ['CP', 'unCP', 'SA']:; if mode in pieces:; pieces.remove(mode); pieces.append(mode); pieces = '_'.join(pieces); opt_combos.append(pieces); return opt_combos. # gather list of model chemistries for table; mcs = ['-'.join(prod) for prod in itertools.product(mtd, opt, bas)]; mc_translator = {}; for m, o, b in itertools.product(mtd, opt, bas):; nominal_mc = '-'.join([m, o, b]); for oo in unify_options([o], opttarget['default']):; trial_mc = '-'.join([m, oo, b]); try:; perr = self.compute_statistics(trial_mc, benchmark=benchmark, sset='default', # prob. too restrictive by choosing subset; failoninc=False, verbose=False, returnindiv=False); except KeyError as e:; continue; else:; mc_translator[nominal_mc] = trial_mc; break; else:; mc_translator[nominal_mc] = None. # compute errors; serrors = {}; for mc in mcs:; serrors[mc] = {}; for ss in self.sset.keys():; serrors[mc][ss] = {}; if mc_translator[mc] in self.mcs:; # Note: not handling when one component Wdb has one translated pattern and another another; perr = self.compute_statistics(mc_translator[mc], benchmark=benchmark, sset=ss,; failoninc=failoninc, verbose=False, returnindiv=False); serrors[mc][ss][self.dbse] = format_errors(perr[self.dbse], mode=3); if not failoninc:; mcsscounts = self.get_missing_reactions(mc_translator[mc], sset=ss); serrors[mc][ss][self.dbse]['tgtcnt'] = mcsscounts[self.dbse][0]; serrors[mc][ss][self.dbse]['misscnt'] = len(mcsscounts[self.dbse][1]); if autothread:; if ('sset' in autothread and ss in autothread['sset']) or (",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:97467,benchmark,benchmark,97467,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,2,['benchmark'],['benchmark']
Testability,"; ipi_available = True; except ImportError:; ipi_available = False. # Define Client to enable testing of the Broker in the unittests; class Client():; pass. [docs]; class IPIBroker(Client):; """"""Interface implementation between i-PI (https://ipi-code.org/) and |PSIfour|."""""". def __init__(self, LOT, options=None, serverdata=False, molecule=None):; self.serverdata = serverdata; if not ipi_available:; psi4.core.print_out(""i-pi is not available for import: ""); psi4.core.print_out(""The broker infrastructure will not be available!\n""); super(IPIBroker, self).__init__(); elif serverdata:; mode, address, port = serverdata.split("":""); mode = mode.lower(); super(IPIBroker, self).__init__(address=address, port=port, mode=mode); else:; super(IPIBroker, self).__init__(_socket=False); self.LOT = LOT; self.options = options if options else {}. if molecule is None:; molecule = psi4.core.get_active_molecule(); self.initial_molecule = molecule; assert self.initial_molecule.orientation_fixed(), ""Orientation must be fixed!""; assert self.initial_molecule.point_group().symbol() == ""c1"", ""Symmetry must be 'c1'!"". names = [self.initial_molecule.symbol(i) for i in range(self.initial_molecule.natom())]; psi4.core.print_out(""Initial atoms %s\n"" % names); self.atoms_list = names. psi4.core.print_out(""Psi4 options:\n""); for item, value in self.options.items():; psi4.core.print_out(""%s %s\n"" % (item, value)); psi4.core.set_global_option(item, value); psi4.core.IO.set_default_namespace(""xwrapper""). self.timing = {}. atoms = np.array(self.initial_molecule.geometry()); psi4.core.print_out(""Initial atoms %s\n"" % atoms); psi4.core.print_out(""Force:\n""); self._positions = atoms; self._callback = self.callback; self._nat = np.int32(len(atoms)). def calculate_force(self, pos=None, **kwargs):; """"""Fetch force, energy of PSI. Arguments:; - pos: positions of the atoms as array. If None, the positions of the current active; molecule is used.; """"""; if pos is None:; molecule = psi4.core.get_active_molecule(); po",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/ipi_broker.html:2315,assert,assert,2315,psi4manual/1.8.x/_modules/psi4/driver/ipi_broker.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/ipi_broker.html,6,['assert'],['assert']
Testability,"; library for the linker e.g.,; --with-boost-system=boost_system-gcc-mt. --with-boost-thread[=special-lib] —; Use the Thread library from boost. It is possible to specify a certain; library for the linker e.g.,; --with-boost-thread=boost_thread-gcc-mt. Step 2: Compilation; Running make (which must be GNU’s ‘make’ utility) in $objdir will compile; the PSI4 libraries and executable modules. Step 3: Testing; To execute automatically the ever-growing number of test cases after; compilation, simply execute make tests in the $objdir directory.; This will run each (relatively small) test case and report the results.; Failure of any of the test cases should be reported to the developers.; By default, any such failure will stop the testing process. If you desire; to run the entire testing suit without interruption, execute make tests; TESTFLAGS='-u -q'. Note that you must do a make testsclean in $objdir; to run the test suite again. Step 4: Installation; Once testing is complete, installation into $prefix is accomplished by; running make install in $objdir. Executable modules are installed in; $prefix/bin, include files in $prefix/include, libraries in $prefix/lib, and; basis set data and various control structures in $prefix/share. Step 5: Building Documentation; This is not recommended because all of the documentation should be; available at http://sirius.chem.vt.edu/psi4manual/latest/index.html; (link “docs” off http://www.psicode.org), and it is automatically updated. However,; if your system has the appropriate utilities (notably the sphinx package; and LaTeX), you may build the package documentation from the top-level; $objdir by running make doc. The resulting files will appear in the; $prefix/doc area. Step 6: Cleaning; All object files and libraries can be removed to save disk space by running; make clean in $objdir. Step 7: User Configuration; After the PSI4 package has been successfully installed, the user will need; to add the installation directory into his/her p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/installfile.html:17647,test,testing,17647,psi4manual/4.0b3/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html,3,['test'],['testing']
Testability,"; mc['f_dipder'] = task.extras['qcvars']['CURRENT DIPOLE GRADIENT']. # Fill in energies for subsumed methods; if self.metameta['ptype'] == 'energy':; for wfn in VARH[mc['f_wfn']]:; for job in self.trove:; if ((wfn == job['f_wfn']) and (mc['f_basis'] == job['f_basis']); and (mc['f_options'] == job['f_options'])):; job['f_energy'] = task.extras['qcvars'][VARH[wfn][wfn]]. # Copy data from 'run' to 'obtained' table; for mce in self.trove:; if ((mc['f_wfn'] == mce['f_wfn']) and (mc['f_basis'] == mce['f_basis']); and (mc['f_options'] == mce['f_options'])):; mce['f_energy'] = mc['f_energy']; mce['f_gradient'] = mc['f_gradient']; mce['f_hessian'] = mc['f_hessian']; mce['f_dipole'] = mc['f_dipole']; mce['f_dipder'] = mc['f_dipder']. # logger.debug(""MC\n"" + pp.pformat(mc)). cbs_results, self.cbsrec = _assemble_cbs_components(self.metameta, self.trove, self.cbsrec). instructions = _summary_table(self.metadata, self.trove, self.cbsrec); core.print_out(instructions); logger.info(instructions). # logger.debug('CBS_RESULTS\n' + pp.pformat(cbs_results)); # logger.debug('GRAND_NEED\n' + pp.pformat(self.cbsrec)). cbs_results[""module""] = modules; return cbs_results. [docs]; def get_results(self, client: Optional[""qcportal.FractalClient""] = None) -> AtomicResult:; """"""Return results as Composite-flavored QCSchema."""""". assembled_results = self._prepare_results(client=client); E0 = assembled_results[""energy""]. # load QCVariables & properties; qcvars = {; 'CBS NUMBER': len(self.compute_list),; 'NUCLEAR REPULSION ENERGY': self.molecule.nuclear_repulsion_energy(),; }. properties = {; ""calcinfo_natom"": self.molecule.natom(),; ""nuclear_repulsion_energy"": self.molecule.nuclear_repulsion_energy(),; ""return_energy"": E0,; }. for qcv in ['CBS', 'CURRENT']:; qcvars[qcv + ' REFERENCE ENERGY'] = self.cbsrec[0]['d_energy']; qcvars[qcv + ' CORRELATION ENERGY'] = E0 - self.cbsrec[0]['d_energy']; qcvars[qcv + ('' if qcv == 'CURRENT' else ' TOTAL') + ' ENERGY'] = E0. for idelta in range(int(len(self.cbsrec",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs.html:58415,log,logger,58415,psi4manual/1.8.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs.html,6,['log'],['logger']
Testability,"; mc['f_dipder'] = task.extras['qcvars']['CURRENT DIPOLE GRADIENT']. # Fill in energies for subsumed methods; if self.metameta['ptype'] == 'energy':; for wfn in VARH[mc['f_wfn']]:; for job in self.trove:; if ((wfn == job['f_wfn']) and (mc['f_basis'] == job['f_basis']); and (mc['f_options'] == job['f_options'])):; job['f_energy'] = task.extras['qcvars'][VARH[wfn][wfn]]. # Copy data from 'run' to 'obtained' table; for mce in self.trove:; if ((mc['f_wfn'] == mce['f_wfn']) and (mc['f_basis'] == mce['f_basis']); and (mc['f_options'] == mce['f_options'])):; mce['f_energy'] = mc['f_energy']; mce['f_gradient'] = mc['f_gradient']; mce['f_hessian'] = mc['f_hessian']; mce['f_dipole'] = mc['f_dipole']; mce['f_dipder'] = mc['f_dipder']. # logger.debug(""MC\n"" + pp.pformat(mc)). cbs_results, self.cbsrec = _assemble_cbs_components(self.metameta, self.trove, self.cbsrec). instructions = _summary_table(self.metadata, self.trove, self.cbsrec); core.print_out(instructions); logger.info(instructions). # logger.debug('CBS_RESULTS\n' + pp.pformat(cbs_results)); # logger.debug('GRAND_NEED\n' + pp.pformat(self.cbsrec)). cbs_results[""module""] = modules; return cbs_results. def get_results(self, client: Optional[""FractalClient""] = None) -> AtomicResult:; """"""Return results as Composite-flavored QCSchema."""""". assembled_results = self._prepare_results(client=client); E0 = assembled_results[""energy""]. # load QCVariables & properties; qcvars = {; 'CBS NUMBER': len(self.compute_list),; 'NUCLEAR REPULSION ENERGY': self.molecule.nuclear_repulsion_energy(),; }. properties = {; ""calcinfo_natom"": self.molecule.natom(),; ""nuclear_repulsion_energy"": self.molecule.nuclear_repulsion_energy(),; ""return_energy"": E0,; }. for qcv in ['CBS', 'CURRENT']:; qcvars[qcv + ' REFERENCE ENERGY'] = self.cbsrec[0]['d_energy']; qcvars[qcv + ' CORRELATION ENERGY'] = E0 - self.cbsrec[0]['d_energy']; qcvars[qcv + ('' if qcv == 'CURRENT' else ' TOTAL') + ' ENERGY'] = E0. for idelta in range(int(len(self.cbsrec) / 2)):; if idel",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html:57983,log,logger,57983,psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,2,['log'],['logger']
Testability,"; oe.add(prop); oe.compute(). [docs]def set_memory(bytes):; """"""Function to reset the total memory allocation.""""""; PsiMod.set_memory(bytes). [docs]def get_memory():; """"""Function to return the total memory allocation.""""""; return PsiMod.get_memory(). [docs]def set_num_threads(nthread):; """"""Function to reset the number of threads to parallelize across.""""""; PsiMod.set_nthread(nthread). [docs]def get_num_threads():; """"""Function to return the number of threads to parallelize across.""""""; return PsiMod.nthread(). [docs]def success(label):; """"""Function to print a '*label*...PASSED' line to screen.; Used by :py:func:`util.compare_values` family when functions pass. """"""; print('\t{0:.<66}PASSED'.format(label)); sys.stdout.flush(). # Test functions; [docs]def compare_values(expected, computed, digits, label):; """"""Function to compare two values. Prints :py:func:`util.success`; when value *computed* matches value *expected* to number of *digits*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (abs(expected - computed) > 10 ** (-digits)):; print(""\t%s: computed value (%f) does not match (%f) to %d digits."" % (label, computed, expected, digits)); sys.exit(1); if ( math.isnan(computed) ):; print(""\t%s: computed value (%f) does not match (%f) to %d digits.\n"" % (label, computed, expected, digits)); print(""\tprobably because the computed value is nan.""); sys.exit(1); success(label). [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; print(""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); sys.exit(1); success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/util.html:1412,test,test,1412,psi4manual/4.0b3/_modules/util.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/util.html,2,['test'],['test']
Testability,"; oe.add(prop); oe.compute(). [docs]def set_memory(bytes):; """"""Function to reset the total memory allocation.""""""; PsiMod.set_memory(bytes). [docs]def get_memory():; """"""Function to return the total memory allocation.""""""; return PsiMod.get_memory(). [docs]def set_num_threads(nthread):; """"""Function to reset the number of threads to parallelize across.""""""; PsiMod.set_nthread(nthread). [docs]def get_num_threads():; """"""Function to return the number of threads to parallelize across.""""""; return PsiMod.nthread(). [docs]def success(label):; """"""Function to print a '*label*...PASSED' line to screen.; Used by :py:func:`util.compare_values` family when functions pass. """"""; print('\t{0:.<66}PASSED'.format(label)); sys.stdout.flush(). # Test functions; [docs]def compare_values(expected, computed, digits, label):; """"""Function to compare two values. Prints :py:func:`util.success`; when value *computed* matches value *expected* to number of *digits*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (abs(expected - computed) > 10 ** (-digits)):; print((""\t%s: computed value (%."" + str(digits+1) + ""f) does not match (%."" + str(digits+1) + ""f) to %d decimal places."") % (label, computed, expected, digits)); sys.exit(1); if ( math.isnan(computed) ):; print(""\t%s: computed value (%f) does not match (%f) to %d decimal places.\n"" % (label, computed, expected, digits)); print(""\tprobably because the computed value is nan.""); sys.exit(1); success(label). [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; print(""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); sys.exit(1); success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/util.html:1412,test,test,1412,psi4manual/4.0b4/_modules/util.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/util.html,2,['test'],['test']
Testability,"; print ""\t%s has %d columns in irrep, but %s has %d\n."" % (expected.name(), expected.cols(irrep), irrep, computed.name(), computed.cols(irrep)); sys.exit(1); rows = expected.rows(irrep); cols = expected.cols(irrep ^ symmetry); failed = 0; for row in range(rows):; for col in range(cols):; if(abs(expected.get(irrep, row, col) - computed.get(irrep, row, col)) > 10 ** (-digits)):; print ""\t%s: computed value (%s) does not match (%s)."" % (label, expected.get(irrep, row, col), computed.get(irrep, row, col)); failed = 1; break. if(failed):; PsiMod.print_out(""The Failed Test Matrices\n""); computed.print_out(); expected.print_out(); sys.exit(1); success(label). [docs]def compare_vectors(expected, computed, digits, label):; """"""Function to compare two vectors. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; print ""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep()); sys.exit(1); nirreps = expected.nirrep(); for irrep in range(nirreps):; if(expected.dim(irrep) != computed.dim(irrep)):; print ""\tThe reference has %d entries in irrep %d, but the computed vector has %d\n."" % (expected.dim(irrep), irrep, computed.dim(irrep)); sys.exit(1); dim = expected.dim(irrep); failed = 0; for entry in range(dim):; if(abs(expected.get(irrep, entry) - computed.get(irrep, entry)) > 10 ** (-digits)):; print ""\t%s: computed value (%s) does not match (%s)."" % (label, computed.get(irrep, entry), expected.get(irrep, entry)); failed = 1; break. if(failed):; PsiMod.print_out(""The computed vector\n""); computed.print_out(); PsiMod.print_out(""The reference vector\n""); expected.print_out(); sys.exit(1); success(label). [docs]def copy_file_to_scratch(filename, prefix, namespace, unit, move ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/util.html:4346,test,test,4346,psi4manual/4.0b2/_modules/util.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/util.html,2,['test'],['test']
Testability,"; psi4.core.Molecule. Employs the Kabsch, Hungarian, and; Uno algorithms to exhaustively locate the best alignment for; non-oriented, non-ordered structures. Parameters:; concern_mol (qcdb.Molecule or psi4.core.Molecule) – Molecule of concern, to be shifted, rotated, and reordered into; best coincidence with ref_mol.; ref_mol (qcdb.Molecule or psi4.core.Molecule) – Molecule to match.; atoms_map (bool, optional) – Whether atom1 of ref_mol corresponds to atom1 of concern_mol, etc.; If true, specifying True can save much time.; mols_align (bool, optional) – Whether ref_mol and concern_mol have identical geometries by eye; (barring orientation or atom mapping) and expected final RMSD = 0.; If True, procedure is truncated when RMSD condition met, saving time.; do_plot (bool, optional) – Pops up a mpl plot showing before, after, and ref geometries.; run_to_completion (bool, optional) – Run reorderings to completion (past RMSD = 0) even if unnecessary because; mols_align=True. Used to test worst-case timings.; run_resorting (bool, optional) – Run the resorting machinery even if unnecessary because atoms_map=True.; uno_cutoff (float, optional) – TODO; run_mirror (bool, optional) – Run alternate geometries potentially allowing best match to ref_mol; from mirror image of concern_mol. Only run if system confirmed to; be nonsuperimposable upon mirror reflection. Returns:First item is RMSD [A] between ref_mol and the optimally aligned; geometry computed.; Second item is a AlignmentMill namedtuple with fields; (shift, rotation, atommap, mirror) that prescribe the transformation; from concern_mol and the optimally aligned geometry.; Third item is a crude charge-, multiplicity-, fragment-less Molecule; at optimally aligned (and atom-ordered) geometry. Return type; determined by concern_mol type. Return type:float, tuple, qcdb.Molecule or psi4.core.Molecule. BFS(seed_atoms=None, bond_threshold=1.2, return_arrays=False, return_molecules=False, return_molecule=False); Detect fragments ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.molecule.html:34264,test,test,34264,psi4manual/1.2.1/api/psi4.core.molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.molecule.html,1,['test'],['test']
Testability,"; psi4.core.Molecule. Employs the Kabsch, Hungarian, and; Uno algorithms to exhaustively locate the best alignment for; non-oriented, non-ordered structures. Parameters:; concern_mol (qcdb.Molecule or psi4.core.Molecule) – Molecule of concern, to be shifted, rotated, and reordered into; best coincidence with ref_mol.; ref_mol (qcdb.Molecule or psi4.core.Molecule) – Molecule to match.; atoms_map (bool, optional) – Whether atom1 of ref_mol corresponds to atom1 of concern_mol, etc.; If true, specifying True can save much time.; mols_align (bool, optional) – Whether ref_mol and concern_mol have identical geometries by eye; (barring orientation or atom mapping) and expected final RMSD = 0.; If True, procedure is truncated when RMSD condition met, saving time.; do_plot (bool, optional) – Pops up a mpl plot showing before, after, and ref geometries.; run_to_completion (bool, optional) – Run reorderings to completion (past RMSD = 0) even if unnecessary because; mols_align=True. Used to test worst-case timings.; run_resorting (bool, optional) – Run the resorting machinery even if unnecessary because atoms_map=True.; uno_cutoff (float, optional) – TODO; run_mirror (bool, optional) – Run alternate geometries potentially allowing best match to ref_mol; from mirror image of concern_mol. Only run if system confirmed to; be nonsuperimposable upon mirror reflection. Returns:First item is RMSD [A] between ref_mol and the optimally aligned; geometry computed.; Second item is a AlignmentMill namedtuple with fields; (shift, rotation, atommap, mirror) that prescribe the transformation; from concern_mol and the optimally aligned geometry.; Third item is a crude charge-, multiplicity-, fragment-less Molecule; at optimally aligned (and atom-ordered) geometry. Return type; determined by concern_mol type. Return type:float, tuple, qcdb.Molecule or psi4.core.Molecule. BFS(seed_atoms=None, bond_threshold=1.2, return_arrays=False, return_molecules=False, return_molecule=False)[source]; Detect fr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:38111,test,test,38111,psi4manual/1.3.2/api/psi4.core.molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html,1,['test'],['test']
Testability,"; psi4.core.Molecule. Employs the Kabsch, Hungarian, and; Uno algorithms to exhaustively locate the best alignment for; non-oriented, non-ordered structures. Parameters:; concern_mol (qcdb.Molecule or psi4.core.Molecule) – Molecule of concern, to be shifted, rotated, and reordered into; best coincidence with ref_mol.; ref_mol (qcdb.Molecule or psi4.core.Molecule) – Molecule to match.; atoms_map (bool, optional) – Whether atom1 of ref_mol corresponds to atom1 of concern_mol, etc.; If true, specifying True can save much time.; mols_align (bool, optional) – Whether ref_mol and concern_mol have identical geometries by eye; (barring orientation or atom mapping) and expected final RMSD = 0.; If True, procedure is truncated when RMSD condition met, saving time.; do_plot (bool, optional) – Pops up a mpl plot showing before, after, and ref geometries.; run_to_completion (bool, optional) – Run reorderings to completion (past RMSD = 0) even if unnecessary because; mols_align=True. Used to test worst-case timings.; run_resorting (bool, optional) – Run the resorting machinery even if unnecessary because atoms_map=True.; uno_cutoff (float, optional) – TODO; run_mirror (bool, optional) – Run alternate geometries potentially allowing best match to ref_mol; from mirror image of concern_mol. Only run if system confirmed to; be nonsuperimposable upon mirror reflection. Returns:First item is RMSD [A] between ref_mol and the optimally aligned; geometry computed.; Second item is a AlignmentMill namedtuple with fields; (shift, rotation, atommap, mirror) that prescribe the transformation; from concern_mol and the optimally aligned geometry.; Third item is a crude charge-, multiplicity-, fragment-less Molecule; at optimally aligned (and atom-ordered) geometry. Return type; determined by concern_mol type. Return type:float, tuple, qcdb.Molecule or psi4.core.Molecule. BFS(seed_atoms=None, bond_threshold=1.2, return_arrays=False, return_molecules=False, return_molecule=False)[source]¶; Detect f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html:12356,test,test,12356,psi4manual/1.3.2/api/psi4.core.molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.molecule.html,3,['test'],['test']
Testability,"; psi4.core.Molecule. Employs the Kabsch, Hungarian, and; Uno algorithms to exhaustively locate the best alignment for; non-oriented, non-ordered structures. Parameters:; concern_mol (qcdb.Molecule or psi4.core.Molecule) – Molecule of concern, to be shifted, rotated, and reordered into; best coincidence with ref_mol.; ref_mol (qcdb.Molecule or psi4.core.Molecule) – Molecule to match.; atoms_map (bool, optional) – Whether atom1 of ref_mol corresponds to atom1 of concern_mol, etc.; If true, specifying True can save much time.; mols_align (bool, optional) – Whether ref_mol and concern_mol have identical geometries by eye; (barring orientation or atom mapping) and expected final RMSD = 0.; If True, procedure is truncated when RMSD condition met, saving time.; do_plot (bool, optional) – Pops up a mpl plot showing before, after, and ref geometries.; run_to_completion (bool, optional) – Run reorderings to completion (past RMSD = 0) even if unnecessary because; mols_align=True. Used to test worst-case timings.; run_resorting (bool, optional) – Run the resorting machinery even if unnecessary because atoms_map=True.; uno_cutoff (float, optional) – TODO; run_mirror (bool, optional) – Run alternate geometries potentially allowing best match to ref_mol; from mirror image of concern_mol. Only run if system confirmed to; be nonsuperimposable upon mirror reflection. Returns:First item is RMSD [A] between ref_mol and the optimally aligned; geometry computed.; Second item is a AlignmentMill namedtuple with fields; (shift, rotation, atommap, mirror) that prescribe the transformation; from concern_mol and the optimally aligned geometry.; Third item is a crude charge-, multiplicity-, fragment-less Molecule; at optimally aligned (and atom-ordered) geometry. Return type; determined by concern_mol type. Return type:float, tuple, qcdb.Molecule or psi4.core.Molecule. BFS(seed_atoms=None, bond_threshold=1.2, return_arrays=False, return_molecules=False, return_molecule=False)¶; Detect fragments",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/psi4api-1.html:125191,test,test,125191,psi4manual/1.2.1/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/psi4api-1.html,3,['test'],['test']
Testability,"; single-point HF/qz2p on NH2. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/kw-1; testing best practices options, part i. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_cfour.html:3629,test,testing,3629,psi4manual/1.6.x/autodoc_testsuite_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_cfour.html,1,['test'],['testing']
Testability,"; sm[('S', 'rot')] = 3 / 2 + math.log(q_rot); sm[('Cv', 'rot')] = 3 / 2; sm[('Cp', 'rot')] = 3 / 2; sm[('E', 'rot')] = 3 / 2 * T; sm[('H', 'rot')] = sm[('E', 'rot')]. # vibrational; vibonly = filter_nonvib(vibinfo); ZPE_cm_1 = 1 / 2 * np.sum(vibonly['omega'].data.real); omega_str = _format_omega(vibonly['omega'].data, decimals=4). imagfreqidx = np.where(vibonly['omega'].data.imag > vibonly['omega'].data.real)[0]; if len(imagfreqidx):; print(""Warning: thermodynamics relations excluded imaginary frequencies: {}"".format(omega_str[imagfreqidx])). filtered_theta_vib = np.delete(vibonly['theta_vib'].data, imagfreqidx, None); filtered_omega_str = np.delete(omega_str, imagfreqidx, None); rT = filtered_theta_vib / T # reduced temperature. lowfreqidx = np.where(filtered_theta_vib < 900.)[0]; if len(lowfreqidx):; print(""Warning: used thermodynamics relations inappropriate for low-frequency modes: {}"".format(; filtered_omega_str[lowfreqidx])). sm[('S', 'vib')] = np.sum(rT / np.expm1(rT) - np.log(1 - np.exp(-rT))); sm[('Cv', 'vib')] = np.sum(np.exp(rT) * (rT / np.expm1(rT))**2); sm[('Cp', 'vib')] = sm[('Cv', 'vib')]; sm[('ZPE', 'vib')] = np.sum(rT) * T / 2; sm[('E', 'vib')] = sm[('ZPE', 'vib')] + np.sum(rT * T / np.expm1(rT)); sm[('H', 'vib')] = sm[('E', 'vib')]. assert (abs(ZPE_cm_1 - sm[('ZPE', 'vib')] * constants.R * constants.hartree2wavenumbers * 0.001 /; constants.hartree2kJmol) < 0.1). #real_vibs = np.ma.masked_where(vibinfo['omega'].data.imag > vibinfo['omega'].data.real, vibinfo['omega'].data). # compute Gibbs; for term in ['elec', 'trans', 'rot', 'vib']:; sm[('G', term)] = sm[('H', term)] - T * sm[('S', term)]. # convert to atomic units; for term in ['elec', 'trans', 'rot', 'vib']:; # terms above are unitless (S, Cv, Cp) or in units of temperature (ZPE, E, H, G) as expressions are divided by R.; # R [Eh/K], computed as below, slightly diff in 7th sigfig from 3.1668114e-6 (k_B in [Eh/K]); # value listed https://en.wikipedia.org/wiki/Boltzmann_constant; uconv_R_EhK = cons",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/qcdb/vib.html:33678,log,log,33678,psi4manual/1.9.x/_modules/qcdb/vib.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/qcdb/vib.html,8,['log'],['log']
Testability,"; sm[('S', 'rot')] = 3 / 2 + math.log(q_rot); sm[('Cv', 'rot')] = 3 / 2; sm[('Cp', 'rot')] = 3 / 2; sm[('E', 'rot')] = 3 / 2 * T; sm[('H', 'rot')] = sm[('E', 'rot')]. # vibrational; vibonly = filter_nonvib(vibinfo); ZPE_cm_1 = 1 / 2 * np.sum(vibonly['omega'].data.real); omega_str = _format_omega(vibonly['omega'].data, decimals=4). imagfreqidx = np.where(vibonly['omega'].data.imag > vibonly['omega'].data.real)[0]; if len(imagfreqidx):; print(""Warning: thermodynamics relations excluded imaginary frequencies: {}"".format(omega_str[imagfreqidx])). filtered_theta_vib = np.delete(vibonly['theta_vib'].data, imagfreqidx, None); filtered_omega_str = np.delete(omega_str, imagfreqidx, None); rT = filtered_theta_vib / T # reduced temperature. lowfreqidx = np.where(filtered_theta_vib < 900.)[0]; if len(lowfreqidx):; print(""Warning: used thermodynamics relations inappropriate for low-frequency modes: {}"".format(; filtered_omega_str[lowfreqidx])). sm[('S', 'vib')] = np.sum(rT / np.expm1(rT) - np.log(1 - np.exp(-rT))); sm[('Cv', 'vib')] = np.sum(np.exp(rT) * (rT / np.expm1(rT))**2); sm[('Cp', 'vib')] = sm[('Cv', 'vib')]; sm[('ZPE', 'vib')] = np.sum(rT) * T / 2; sm[('E', 'vib')] = sm[('ZPE', 'vib')] + np.sum(rT * T / np.expm1(rT)); sm[('H', 'vib')] = sm[('E', 'vib')]. assert (abs(ZPE_cm_1 - sm[('ZPE', 'vib')] * qcel.constants.R * qcel.constants.hartree2wavenumbers * 0.001 /; qcel.constants.hartree2kJmol) < 0.1). #real_vibs = np.ma.masked_where(vibinfo['omega'].data.imag > vibinfo['omega'].data.real, vibinfo['omega'].data). # compute Gibbs; for term in ['elec', 'trans', 'rot', 'vib']:; sm[('G', term)] = sm[('H', term)] - T * sm[('S', term)]. # convert to atomic units; for term in ['elec', 'trans', 'rot', 'vib']:; # terms above are unitless (S, Cv, Cp) or in units of temperature (ZPE, E, H, G) as expressions are divided by R.; # R [Eh/K], computed as below, slightly diff in 7th sigfig from 3.1668114e-6 (k_B in [Eh/K]); # value listed https://en.wikipedia.org/wiki/Boltzmann_constant; uco",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html:33909,log,log,33909,psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html,16,['log'],['log']
Testability,"; storage, the decision to write in Python is less clear cut. It is certainly; possible to write these out-of-core routines using Numpy primitives, but there; are a number of tools in PSI4 already to perform tasks like these that are; required, e.g., for cluster. In this case, a good design would be to write a; simple piece of code in the C++ layer that performs the matrix operation on a; given input, using the I/O routines available in PSI4 and the parallelism; afforded by OpenMP, and to make that code available to the front end as; described in Exposing C++ code to Python. The Python layer could then be; responsible for obtaining the input data and calling this C++ code to do the; manipulations, allowing each language layer to handle the subset of the work; that caters to their individual strengths.; A number of concrete examples of this workflow exist in the code already. For; finite difference computations of energy derivatives, the logic to determine; the type of stencil and which displacements are needed is not going to be rate; limiting for any reasonable quantum mechanical energy function. Therefore,; doing that work in the Python layer is a good idea, as it allows the many; Python tools for farming out embarrassingly parallel workloads to be used,; while the C++ layer can be used to implement the energy function to be; differentiated.; In SCF, we have a number of sources of external embedding potentials that could; enter the calculation. Allowing Python to handle only the details of driving; the SCF iterations, such as external potentials and convergence acceleration; methods, but deferring to C++ to do the heavy lifting for building and; diagonalizing the Fock matrix also takes advantage of the two languages’; strengths and improves maintainability of the code. table of contents. Ways to Add Code: Psi4NumPy, Plugins, Full Integration; Easier and more rapid development; Rapid initial development using Psi4NumPy; Avoiding the need to modify Psi4, using plugin",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/prog_ways_to_add-1.html:5520,log,logic,5520,psi4manual/1.4.0/prog_ways_to_add-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/prog_ways_to_add-1.html,9,['log'],['logic']
Testability,"; td-camb3lyp with DiskDF and method/basis specification. cubeprop; RHF orbitals and density for water. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-level-shift-uhf; SCF level shift on a UHF computation. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. cbs-parser; mtd/basis syntax examples. options1; check all variety of options parsing. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. dfccsdat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:14521,test,testing,14521,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['testing']
Testability,"; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. How to refer to Psi4¶; Ways to refer to PSI4 in text, in order of decreasing goodness:. as Psi4 in Optima regular font with “si” in custom (82%) small caps; according to psi4/media/README.md.; html: <span style=""font-family: Optima, sans-serif; color: #273896;"">P<span style=""font-size: 82%;"">SI</span>4</span>. as Psi4 with “si” in generated small caps; html: <span style=""font-variant: small-caps;"">Psi4</span>. as Psi4 with “si” in lowercase; as psi4 in code; NOT PSI4 or PSI. How to get a Psi4 logo file¶; All image files are stored in https://github.com/psi4/psi4media. How to use a local Add-On repository in the Psi4 build¶; For each Add-On, PSI4 pulls source from a specific online Git; repository and a specific tag/branch/commit in it. This ensures success; of the PSI4 build, reproducibility of the runtime results, and; freedom for continued upstream development. Sometimes, you’re the one; doing that development, and you need the CMake superbuild to pull source; from a local path rather than the approved codeset.; Find the CMakeLists.txt governing the target Add-On in; psi4/external and make changes analogous to the below:; 1; 2; 3; 4#GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you’re changing the PSI4 repo codebase between compiles, there’s; nothing more to do as CMake will handle the code rebuild deps for you.; If you’re changing the local Add-On repo codebase between compiles,; CMake does not know when liba",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:52523,log,logo,52523,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['log'],['logo']
Testability,"; try:; database.ACTV_RLX; except AttributeError:; raise ValidationError('Deformation correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_RLX; elif db_rlxd is False:; #elif no.match(str(db_rlxd)):; pass; else:; raise ValidationError('Deformation correction mode \'%s\' not valid.' % (db_rlxd)). # Option zero-point-correction- whether for thermochem databases jobs are corrected by zpe; db_zpe = kwargs.get('zpe', False). if db_zpe is True:; raise ValidationError('Zero-point-correction mode \'yes\' not yet implemented.'); elif db_zpe is False:; pass; else:; raise ValidationError('Zero-point-correction \'mode\' %s not valid.' % (db_zpe)). # Option benchmark- whether error statistics computed wrt alternate reference energies; db_benchmark = 'default'; if 'benchmark' in kwargs:; db_benchmark = kwargs['benchmark']. if db_benchmark.lower() == 'default':; pass; else:; BIND = p4util.getattr_ignorecase(database, 'BIND_' + db_benchmark); if BIND is None:; raise ValidationError('Special benchmark \'%s\' not available for database %s.' % (db_benchmark, db_name)). # Option tabulate- whether tables of variables other than primary energy method are formed; # TODO db(func=cbs,tabulate=[non-current-energy]) # broken; db_tabulate = []; if 'tabulate' in kwargs:; db_tabulate = kwargs['tabulate']. # Option subset- whether all of the database or just a portion is run; db_subset = HRXN; if 'subset' in kwargs:; db_subset = kwargs['subset']. if isinstance(db_subset, (str, bytes)):; if db_subset.lower() == 'small':; try:; database.HRXN_SM; except AttributeError:; raise ValidationError(""""""Special subset 'small' not available for database %s."""""" % (db_name)); else:; HRXN = database.HRXN_SM; elif db_subset.lower() == 'large':; try:; database.HRXN_LG; except AttributeError:; raise ValidationError(""""""Special subset 'large' not available for database %s."""""" % (db_name)); else:; HRXN = database.HRXN_LG; elif db_subset.lower() == 'equilibrium':; try:; database.HR",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html:13663,benchmark,benchmark,13663,psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html,15,['benchmark'],['benchmark']
Testability,"; try:; database.ACTV_RLX; except AttributeError:; raise ValidationError('Deformation correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_RLX; elif db_rlxd is False:; #elif no.match(str(db_rlxd)):; pass; else:; raise ValidationError('Deformation correction mode \'%s\' not valid.' % (db_rlxd)). # Option zero-point-correction- whether for thermochem databases jobs are corrected by zpe; db_zpe = kwargs.get('zpe', False). if db_zpe is True:; raise ValidationError('Zero-point-correction mode \'yes\' not yet implemented.'); elif db_zpe is False:; pass; else:; raise ValidationError('Zero-point-correction \'mode\' %s not valid.' % (db_zpe)). # Option benchmark- whether error statistics computed wrt alternate reference energies; db_benchmark = 'default'; if 'benchmark' in kwargs:; db_benchmark = kwargs['benchmark']. if db_benchmark.lower() == 'default':; pass; else:; BIND = p4util.getattr_ignorecase(database, 'BIND_' + db_benchmark); if BIND is None:; raise ValidationError('Special benchmark \'%s\' not available for database %s.' % (db_benchmark, db_name)). # Option tabulate- whether tables of variables other than primary energy method are formed; # TODO db(func=cbs,tabulate=[non-current-energy]) # broken; db_tabulate = []; if 'tabulate' in kwargs:; db_tabulate = kwargs['tabulate']. # Option subset- whether all of the database or just a portion is run; db_subset = HRXN; if 'subset' in kwargs:; db_subset = kwargs['subset']. if isinstance(db_subset, basestring):; if db_subset.lower() == 'small':; try:; database.HRXN_SM; except AttributeError:; raise ValidationError(""""""Special subset 'small' not available for database %s."""""" % (db_name)); else:; HRXN = database.HRXN_SM; elif db_subset.lower() == 'large':; try:; database.HRXN_LG; except AttributeError:; raise ValidationError(""""""Special subset 'large' not available for database %s."""""" % (db_name)); else:; HRXN = database.HRXN_LG; elif db_subset.lower() == 'equilibrium':; try:; database.HRXN",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html:13777,benchmark,benchmark,13777,psi4manual/1.0.0/_modules/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html,3,['benchmark'],['benchmark']
Testability,";  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5];  ;  ;  . aug-pcseg-N;  ; 01234;  ;  . pcSseg-N;  ;  ; 01234;  . aug-pcSseg-N;  ;  ;  ; 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6, 7) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. [5]N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/basissets_tables-1.html:6640,stub,stub,6640,psi4manual/1.3.2/basissets_tables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/basissets_tables-1.html,8,['stub'],"['stub', 'stubXZ-JKFIT']"
Testability,"<mark>) rather than just by name (pytest -k <name_fragment>; vs. ctest -R <name_fragment>). Far more complicated logic is allowed than for; CTest: pytest -m ""dftd3 and not api and not long"".; The most important marks are “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging¶; There are many ways to run pytest, How to test a Psi4 installation, and three different copies of the test file; (i.e., psi4/tests/pytests/test_mp2.py, <objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py,; CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running cmake --build after each change. Easiest is from <objdir>, run pytest ../tests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> or -n auto if pytest-xdist; installed) or print test names (-v) or print warnings (-rws).; An important point is that because they’re PsiAPI, import psi4 is happening,; so the <objdir> PSI4 module must be in PYTHONPATH. Also, any call; to QCEngine is using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi.; To see stdout output from an otherwise passing test, easiest to add assert 0; at its end to trigger failure.; If stdout printing is insufficient, and you really need to see output.dat or other files,; comment out their deletion in psi4/tests/pytests/conftest.py and run the single test, deleting; the file each time (since it appends). Comparison Functions¶. Plain Old Data¶. ps",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:13411,test,test,13411,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['test'],['test']
Testability,"= 'cbs_wrapper':; cbs_methods = driver_cbs._cbs_wrapper_methods(**kwargs); dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); if dertype == 1:; # Bounce to CBS (directly) in pure-gradient mode if name is CBS and all parts have analytic grad. avail.; return name(gradient, kwargs.pop('label', 'custom function'), ptype='gradient', **kwargs); else:; optstash = driver_util._set_convergence_criterion('energy', cbs_methods[0], 8, 10, 8, 10, 8); lowername = name; # Pass through to G by E. elif gradient_type == 'cbs_gufunc':; cbs_methods = driver_cbs._parse_cbs_gufunc_string(name.lower())[0]; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); lowername = name.lower(); if dertype == 1:; # Bounce to CBS in pure-gradient mode if ""method/basis"" name and all parts have analytic grad. avail.; return driver_cbs._cbs_gufunc(gradient, name, ptype='gradient', **kwargs); else:; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util._set_convergence_criterion('energy', cbs_methods[0], 8, 10, 8, 10, 8). else:; # Allow specification of methods to arbitrary order; lowername = name.lower(); lowername, level = driver_util.parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # Prevent methods that do not have associated gradients; if lowername in energy_only_methods:; raise ValidationError(""gradient('%s') does not have an associated gradient"" % name). dertype = _find_derivative_type('gradient', lowername, user_dertype). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util._set_convergence_criterion('energy', lowername, 8, 10, 8, 10, 8). # Commit to procedures[] call hereafter; return_wfn = kwargs.pop('return_wfn', False); core.clean_variables(). # no analytic derivatives for scf_type cd; if core.get_global_option('SCF_TYPE') == 'CD':; if",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html:39336,test,test,39336,psi4manual/1.3.2/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html,2,['test'],['test']
Testability,"= 'cbs_wrapper':; cbs_methods = driver_cbs._cbs_wrapper_methods(**kwargs); dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); if dertype == 1:; # Bounce to CBS (directly) in pure-gradient mode if name is CBS and all parts have analytic grad. avail.; return name(gradient, kwargs.pop('label', 'custom function'), ptype='gradient', **kwargs); else:; optstash = driver_util._set_convergence_criterion('energy', cbs_methods[0], 8, 10, 8, 10, 8); lowername = name; # Pass through to G by E. elif gradient_type == 'cbs_gufunc':; cbs_methods = driver_cbs._parse_cbs_gufunc_string(name.lower())[0]; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); lowername = name.lower(); if dertype == 1:; # Bounce to CBS in pure-gradient mode if ""method/basis"" name and all parts have analytic grad. avail.; return driver_cbs._cbs_gufunc(gradient, name, ptype='gradient', **kwargs); else:; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util._set_convergence_criterion('energy', cbs_methods[0], 8, 10, 8, 10, 8). else:; # Allow specification of methods to arbitrary order; lowername = name.lower(); lowername, level = driver_util.parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # Prevent methods that do not have associated gradients; if lowername in energy_only_methods:; raise ValidationError(""gradient('%s') does not have an associated gradient"" % name). dertype = _find_derivative_type('gradient', lowername, user_dertype). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util._set_convergence_criterion('energy', lowername, 8, 10, 8, 10, 8). # Commit to procedures[] call hereafter; return_wfn = kwargs.pop('return_wfn', False); core.clean_variables(). # no analytic derivatives for scf_type cd; if core.get_option('SCF', 'SCF_TYPE') == 'CD':; if",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html:35901,test,test,35901,psi4manual/1.1.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html,1,['test'],['test']
Testability,"= 'cbs_wrapper':; cbs_methods = driver_cbs._cbs_wrapper_methods(**kwargs); dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); if dertype == 1:; # Bounce to CBS (directly) in pure-gradient mode if name is CBS and all parts have analytic grad. avail.; return name(gradient, kwargs.pop('label', 'custom function'), ptype='gradient', **kwargs); else:; optstash = driver_util._set_convergence_criterion('energy', cbs_methods[0], 8, 10, 8, 10, 8); lowername = name; # Pass through to G by E. elif gradient_type == 'cbs_gufunc':; cbs_methods = driver_cbs._parse_cbs_gufunc_string(name.lower())[0]; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); lowername = name.lower(); if dertype == 1:; # Bounce to CBS in pure-gradient mode if ""method/basis"" name and all parts have analytic grad. avail.; return driver_cbs._cbs_gufunc(gradient, name, ptype='gradient', **kwargs); else:; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util._set_convergence_criterion('energy', cbs_methods[0], 8, 10, 8, 10, 8). else:; # Allow specification of methods to arbitrary order; lowername = name.lower(); lowername, level = driver_util.parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # Prevent methods that do not have associated gradients; if lowername in energy_only_methods:; raise ValidationError(""gradient('%s') does not have an associated gradient"" % name). dertype = _find_derivative_type('gradient', lowername, user_dertype). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util._set_convergence_criterion('energy', lowername, 8, 10, 8, 10, 8). # Commit to procedures[] call hereafter; return_wfn = kwargs.pop('return_wfn', False); psi4.clean_variables(). # no analytic derivatives for scf_type cd; if psi4.get_option('SCF', 'SCF_TYPE') == 'CD':; if",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver.html:34670,test,test,34670,psi4manual/1.0.0/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver.html,1,['test'],['test']
Testability,"= (589 355 nm). dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. scf6; Tests RHF/ROHF/UHF SCF gradients. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. pywrap-align; apply linear fragmentation algorithm to a water cluster. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. cc13c; Tests RHF CCSD(T)gradients. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc9; UHF-CCSD(T) cc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:19459,test,test,19459,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"= BSET[1][indx]):; zetaindx = indx; indx += 1; for basis in BSET:; ZSET[ZETA[basis[zetaindx]] - 2] = basis[zetaindx]. pre = BSET[0][:zetaindx]; post = BSET[0][zetaindx + 1:]; basisstring = pre + '[' + ''.join(ZSET) + ']' + post. return basisstring. [docs]def highest_1(**largs):; r""""""Scheme for total or correlation energies with a single basis or the highest; zeta-level among an array of bases. Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^X. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) == 0):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; if (wfnname == 'scf'):; portion = 'tot'; else:; portion = 'corl'; NEED = {'HI': dict(zip(f_fields, [wfnname, portion, BSET[len(ZSET) - 1], ZSET[len(ZSET) - 1], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; # Compute extrapolated energy; energypiece = NEED['HI']['f_energy']. # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); if (NEED['HI']['f_wfn'] == 'scf'):; cbsscheme += """""" HI-zeta (%s) Total Energy: %16.8f\n"""""" % (str(NEED['HI']['f_zeta']), energypiece); else:; cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(NEED['HI']['f_zeta']), energypiece); PsiMod.print_out(cbsscheme). return energypiece. # Solution equation in LaTeX: $E_{corl}^{\infty} = \frac{E_{corl}^{X} X^3 - E_{corl}^{X-1} (X-1)^3}{X^3 - (X-1)^3}$; # Solution equation in LaTeX: $\beta = \frac{E_{corl}^{X} - E_{corl}^{X-1}}{X^{-3} - (X-1)^{-3}}$; [docs]def corl_xtpl_helgaker_2(**largs):; r""""""Extrapolation scheme for correlation energi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html:77857,log,logs,77857,psi4manual/4.0b2/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html,6,['log'],['logs']
Testability,"= BSET[1][indx]):; zetaindx = indx; indx += 1; for basis in BSET:; ZSET[ZETA[basis[zetaindx]] - 2] = basis[zetaindx]. pre = BSET[0][:zetaindx]; post = BSET[0][zetaindx + 1:]; basisstring = pre + '[' + ''.join(ZSET) + ']' + post. return basisstring. [docs]def highest_1(**largs):; r""""""Scheme for total or correlation energies with a single basis or the highest; zeta-level among an array of bases. Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^X. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) == 0):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; if (wfnname == 'scf'):; portion = 'tot'; else:; portion = 'corl'; NEED = {'HI': dict(zip(f_fields, [wfnname, portion, BSET[len(ZSET) - 1], ZSET[len(ZSET) - 1], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; # Compute extrapolated energy; energypiece = NEED['HI']['f_energy']. # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); if (NEED['HI']['f_wfn'] == 'scf'):; cbsscheme += """""" HI-zeta (%s) Total Energy: %16.8f\n"""""" % (str(NEED['HI']['f_zeta']), energypiece); else:; cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(NEED['HI']['f_zeta']), energypiece); psi4.print_out(cbsscheme). return energypiece. # Solution equation in LaTeX: $E_{corl}^{\infty} = \frac{E_{corl}^{X} X^3 - E_{corl}^{X-1} (X-1)^3}{X^3 - (X-1)^3}$; # Solution equation in LaTeX: $\beta = \frac{E_{corl}^{X} - E_{corl}^{X-1}}{X^{-3} - (X-1)^{-3}}$; [docs]def corl_xtpl_helgaker_2(**largs):; r""""""Extrapolation scheme for correlation energies",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:93640,log,logs,93640,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,2,['log'],['logs']
Testability,"= color. def __str__(self):; text = ''; text += """""" ==> %s Reaction <==\n\n"""""" % (self.name); text += """""" Database reaction: %s\n"""""" % (self.dbrxn); text += """""" Index: %s\n"""""" % (self.indx); text += """""" LaTeX representation: %s\n"""""" % (self.latex); text += """""" Tagline: %s\n"""""" % (self.tagl); text += """""" Comment: %s\n"""""" % (self.comment); if self.benchmark is None:; text += """""" Benchmark: %s\n"""""" % ('UNDEFINED'); else:; text += """""" Benchmark: %f\n"""""" % (self.data[self.benchmark].value); text += """""" Color: %s\n"""""" % (str(self.color)); text += """""" Reaction matrix:\n""""""; for mode, rxnm in self.rxnm.iteritems():; text += """""" %s\n"""""" % (mode); for rgt, coeff in rxnm.iteritems():; text += """""" %3d %s\n"""""" % (coeff, rgt.name); text += """""" Data:\n""""""; for label, datum in sorted(self.data.iteritems()):; text += """""" %8.2f %s\n"""""" % (datum.value, label); text += """"""\n""""""; return text. [docs] def compute_errors(self, benchmark='default', mcset='default', failoninc=True, verbose=False):; """"""For all data or modelchem subset *mcset*, computes raw reaction; errors between *modelchem* and *benchmark* model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless *failoninc* set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. """"""; if mcset == 'default':; lsslist = self.data.keys(); elif callable(mcset):; # mcset is function that will generate subset of HRXN from sset(self); lsslist = [mc for mc in self.data.keys() if mc in mcset(self)] # untested; else:; # mcset is array containing modelchemistries; lsslist = [mc for mc in self.data.keys() if mc in mcset]; # assemble dict of qcdb.Reaction objects from array of reaction names; lsset = OrderedDict(); for mc in lsslist:; lsset[mc] = self.data[mc]. lbench = self.benchmark if benchmark == 'default' else benchmark; try:; mcGreater = self.data[lbench].value; except KeyError as e:; raise ValidationError(""""""Reaction %s missing benchmark datum %s."""""" % (self.name,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:15708,benchmark,benchmark,15708,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,2,['benchmark'],['benchmark']
Testability,"= {}. for R in Rvals:; dimer.R = R; ecp[R] = cp('ccsd(t)'). print ""\n""; print ""CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies\n\n""; print "" R (Ang) E_int (kcal/mol) \n""; print ""-----------------------------------------------------\n""; for R in Rvals:; e = ecp[R] * 627.5095; print "" %3.1f %10.6f\n"" % (R, e). First, you can see the molecule block has a couple dashes to; separate the monomers from each other. Also note we’ve used a Z-matrix to; specify the geometry, and we’ve used a variable (R) as the; interatomic distance. We have not specified the value of R in; the molecule block like we normally would. That’s because we’re; going to vary it during the scan across the potential energy surface.; Below the molecule block, you can see the Rvals array; specified. This is a Python array holding the interatomic distances we; want to consider. In Python, arrays are surrounded by square brackets, and; elements are separated by commas.; The next lines, set basis aug-cc-pVDZ and set freeze_core True,; are familiar from previous test cases. Next comes a slightly; unusual-looking line, ecp = {}. This is Python’s way of initializing; a “dictionary.” We’re going to use this dictionary to store the; counterpoise-corrected energies as they become available. A dictionary is; like an array, but we can index it using strings or floating-point numbers; instead of integers if we want. Here, we will index it using; floating-point numbers, namely, the R values. This winds up being; slightly more elegant than a regular array in later parts of the input; file.; The next section, beginning with for R in Rvals:, loops over the; interatomic distances, R, in our array Rvals. In Python,; loops need to be indented, and each line in the loop has to be indented; by the same amount. The first line in the loop, dimer.R = R,; sets the Z-matrix variable R of the molecule called dimer; to the R value extracted from the Rvals array. The next line,; ecp[R] = cp('ccsd(t)'), computes the counterpoise",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/tutorial-1.html:17461,test,test,17461,psi4manual/4.0b2/tutorial-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/tutorial-1.html,2,['test'],['test']
Testability,"= {}; ptype_dict = {}; intermediates_dict = {}; for n in compute_list.keys():; core.print_out(""\n ==> N-Body: Now computing %d-body complexes <==\n\n"" % n); total = len(compute_list[n]); for num, pair in enumerate(compute_list[n]):; core.print_out(""\n N-Body: Computing complex (%d/%d) with fragments %s in the basis of fragments %s.\n\n"" %; (num + 1, total, str(pair[0]), str(pair[1]))); ghost = list(set(pair[1]) - set(pair[0])). current_mol = molecule.extract_subsets(list(pair[0]), ghost); # Save energies info; ptype_dict[pair] = func(method_string, molecule=current_mol, **kwargs); energies_dict[pair] = core.get_variable(""CURRENT ENERGY""); var_key = ""N-BODY (%s)@(%s) TOTAL ENERGY"" % (', '.join([str(i) for i in pair[0]]), ; ', '.join([str(i) for i in pair[1]])); intermediates_dict[var_key] = core.get_variable(""CURRENT ENERGY""); core.print_out(""\n N-Body: Complex Energy (fragments = %s, basis = %s: %20.14f)\n"" %; (str(pair[0]), str(pair[1]), energies_dict[pair])); # Flip this off for now, needs more testing; #if 'cp' in bsse_type_list and (len(bsse_type_list) == 1):; # core.set_global_option('DF_INTS_IO', 'LOAD'). core.clean(). return {'energies': energies_dict, 'ptype': ptype_dict, 'intermediates': intermediates_dict}. def assemble_nbody_components(metadata, component_results):; """"""Assembles N-body components into interaction quantities according to requested BSSE procedure(s). Parameters; -----------; metadata : dict of str; Dictionary of N-body metadata. Required ``'key': value`` pairs:; ``'ptype'``: {'energy', 'gradient', 'hessian'}; Procedure which has generated the N-body components to be combined.; ``'bsse_type_list'``: list of str; List of requested BSSE treatments. Possible values include lowercase ``'cp'``, ``'nocp'``,; and ``'vmfc'``.; ``'max_nbody'``: int; Maximum number of bodies to include in the N-Body treatment.; Possible: `max_nbody` <= `max_frag`; Default: `max_nbody` = `max_frag`; ``'max_frag'``: int; Number of distinct fragments comprising full molec",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver_nbody.html:15177,test,testing,15177,psi4manual/1.2.1/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver_nbody.html,1,['test'],['testing']
Testability,"=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an exis",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/conda-1.html:5734,test,test,5734,psi4manual/1.4.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html,5,['test'],['test']
Testability,"=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; resp etc. instead of psi4-rt.; As of PSI4 v1.7, the psi4-rt package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environment spec files like psi4/devtools/conda-envs .; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/conda.html:5725,test,test,5725,psi4manual/1.7.x/conda.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/conda.html,4,['test'],['test']
Testability,"=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"". Build with specific (Intel) compilers from PATH based on GCC not in PATH and also building Fortran Add-Ons. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"" \; -DCMAKE_Fortran_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"". What C and C++ compilers and versions are approved¶; On Linux, the following work nicely. GNU: gcc, g++; Intel: icc, icpc; Clang: clang, clang++. On Mac, the following work nicely. Apple Clang: clang, clang++; Intel: icc, icpc. PSI4 requires full C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; psi4/cmake/custom_cxxstandard.cmake, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers also rely on GCC, so both icpc and gcc versions are checked. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package man",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:26608,test,test,26608,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,2,['test'],['test']
Testability,"=self.result_id); logger.info(""Resubmitting Errored Job {}"".format(self.result_id)); elif ret[0].status == ""COMPLETE"":; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Submitting AtomicResult {}"".format(self.result_id)). else:; # QCFractal `next`. meta, ids = client.add_singlepoints(; molecules=mol,; program=""psi4"",; driver=self.driver,; method=self.method,; basis=self.basis,; keywords=self.keywords,; # protocols,; ); self.result_id = ids[0]; # NOTE: The following will re-run errored jobs by default; if meta.existing_idx:; rec = client.get_singlepoints(self.result_id); if rec.status == ""error"":; client.reset_records(self.result_id); logger.info(""Resubmitting Errored Job {}"".format(self.result_id)); elif rec.status == ""complete"":; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Submitting AtomicResult {}"".format(self.result_id)). return. logger.info(f'<<< JSON launch ... {self.molecule.schoenflies_symbol()} {self.molecule.nuclear_repulsion_energy()}'); gof = core.get_output_file(). # EITHER ...; # from psi4.driver import schema_wrapper; # self.result = schema_wrapper.run_qcschema(self.plan()); # ... OR ...; self.result = qcng.compute(; self.plan(),; ""psi4"",; raise_error=True,; # local_options below suitable for serial mode where each job takes all the resources of the parent Psi4 job.; # distributed runs through QCFractal will likely need a different setup.; task_config={; # B -> GiB; ""memory"": core.get_memory() / (2 ** 30),; ""ncores"": core.get_num_threads(),; },; ); # ... END. #pp.pprint(self.result.dict()); #print(""... JSON returns >>>""); core.set_output_file(gof, True); core.reopen_outfile(); logger.debug(pp.pformat(self.result.dict())); core.print_out(_drink_filter(self.result.dict()[""stdout""])); self.computed = True. [docs] def get_results(self, client: Optional[""qcportal.FractalClient""] = None) -> AtomicResult:; """"""",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_base.html:5785,log,logger,5785,psi4manual/1.7.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_base.html,2,['log'],['logger']
Testability,"> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Con",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/conda.html:3843,log,log,3843,psi4manual/1.6.x/conda.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/conda.html,15,"['log', 'test']","['log', 'test']"
Testability,">> git fetch upstream 'refs/tags/*:refs/tags/*'; >>> make; # version healed. How to fix “cannot import name ‘core’ from {top-level-psi4-dir}¶; First, what’s happening? sys.path (where modules can be imported from in python) starts with ''. If you export PYTHONPATH={objdir}/stage/{prefix}/lib/{pymod_lib_dir}:$PYTHONPATH to make PsiAPI easy, that inserts starting in pos’n 1 (0-indexed), so '' still at the head of sys.path. Now, if you try to run a psiapi/python file from {top-level-psi4-dir} that contains import psi4, it will find the source tree psi4/__init__.py and fail because there’s no core.so around. That is, it’s finding what looks to be the psi4 module dir structure . when the one it wants is what you inserted into PYTHONPATH at pos’n 1.; The way around this is to move the python file you’re running to any other directory. Or, within the file, do sys.path.insert(0, {objdir}/stage/{prefix}/lib/{pymod_lib_dir}. How to find tests without output.ref¶; Ideally, each new test or much-altered test should add its own; output.ref. When that doesn’t happen, this command helps.; find tests/ -mindepth 1 -maxdepth 1 -type d '!' -exec test -e ""{}/output.ref"" "";"" -print. How to do GitHub issue management and code review¶. Anyone, core-dev or not, is encouraged to review PRs. It’s actually good practice for interacting with other open-source projects, where you don’t have the advantage of knowing or working with the contributors. Before venturing into projects on GitHub where you don’t know the maintainers, it doesn’t hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ .; Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged.; Approving before CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn’t.; All main branches (master and 1.N.x maintenance) are protected by GitHub, including administrators, so even w",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_git-1.html:8084,test,test,8084,psi4manual/1.4.0/manage_git-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_git-1.html,18,['test'],['test']
Testability,">> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/conda-1.html:4818,log,log,4818,psi4manual/1.4.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html,18,['log'],['log']
Testability,">>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file is written by reap-DB and so has been largely; validated. load_qcdata_hrxn_byproject(project, path=None)[source]¶. load_saptdata_frombfdb(sset='default', pythonpath='/Users/loriab/linux/bfdb/sapt_punt', failoninc=True)[source]¶; This",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:32393,benchmark,benchmark,32393,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,6,['benchmark'],['benchmark']
Testability,">>> source activate p4env. Quick Installation¶; Sequence of commands to get you to a working Psi4 on Linux. Installs; Miniconda into $HOME/miniconda and the Psi4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac: select between next two lines; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files and Elementary Restart) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; Get bzip2. You’ll need this slightly exotic command so run which to test for availability, and install from yum, source, etc. if unavailable. You’ll also need an internet connection for downloading; computers behind a firewall or with restricte",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/conda-1.html:5768,test,tested,5768,psi4manual/1.0.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/conda-1.html,2,['test'],['tested']
Testability,"?. Type: boolean; Default: false. TRIPLES_LOW_MEMORY¶. Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. Expert¶. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. USE_DF_INTS¶. Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. table of contents. FNOCC; General; ACTIVE_NAT_ORBS; BRUECKNER_MAXITER; CC_SCALE_OS; CC_SCALE_SS; CC_TIMINGS; CEPA_NO_SINGLES; CHOLESKY_TOLERANCE; DFCC; DF_BASIS_CC; DIIS_MAX_VECS; DIPMOM; E_CONVERGENCE; MAXITER; MP2_SCALE_OS; MP2_SCALE_SS; NAT_ORBS; OCC_PERCENTAGE; OCC_TOLERANCE; R_CONVERGENCE; SCS_CCSD; SCS_CEPA; SCS_MP2; TRIPLES_LOW_MEMORY. Expert; CEPA_LEVEL; COMPUTE_MP4_TRIPLES; COMPUTE_TRIPLES; RUN_CCSD; RUN_CEPA; RUN_MP2; RUN_MP3; RUN_MP4; USE_DF_INTS. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices; Keywords by Module. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__fnocc-1.html:4383,test,testing,4383,psi4manual/1.1.0/autodir_options_c/module__fnocc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__fnocc-1.html,2,['test'],['testing']
Testability,"A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. __all__ = [; ""AtomicComputer"",; ""BaseComputer"",; ""EnergyGradientHessianWfnReturn"",; ]. import abc; import copy; import logging; from typing import TYPE_CHECKING, Any, Dict, Optional, Tuple, Union. try:; from pydantic.v1 import Field, validator; except ImportError:; from pydantic import Field, validator. import qcelemental as qcel; from qcelemental.models import AtomicInput, AtomicResult, DriverEnum; from qcelemental.models.results import AtomicResultProtocols; qcel.models.molecule.GEOMETRY_NOISE = 13 # need more precision in geometries for high-res findif; import qcengine as qcng. from psi4 import core. from . import p4util. if TYPE_CHECKING:; import qcportal. logger = logging.getLogger(__name__). EnergyGradientHessianWfnReturn = Union[float, core.Matrix, Tuple[Union[float, core.Matrix], core.Wavefunction]]. [docs]; class BaseComputer(qcel.models.ProtoModel):; """"""Base class for ""computers"" that plan, run, and process QC tasks."""""". [docs]; @abc.abstractmethod; def compute(self):; pass. [docs]; @abc.abstractmethod; def plan(self):; pass. class Config(qcel.models.ProtoModel.Config):; extra = ""allow""; allow_mutation = True. [docs]; class AtomicComputer(BaseComputer):; """"""Computer for analytic single-geometry computations."""""". molecule: Any = Field(..., description=""The molecule to use in the computation.""); basis: str = Field(..., description=""The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, ...).""); method: str = Field(..., description=""The quantum chemistry method to evaluate (e.g., B3LYP, MP2, ...).""); driver: DriverEnum = Field(..., description=""The resulting type of computation: energy, gradient, hessian, properties.""; ""Note for f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/task_base.html:1769,log,logger,1769,psi4manual/1.9.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/task_base.html,8,['log'],"['logger', 'logging']"
Testability,"A and netlify now, not Conda.; Package psi4-rt used to be in “Psi4 stack”, but a maximum ecosystem package isn’t provided now, only a customizable env spec.; Package psi4-dev used to be in “Psi4 stack”, but now build environment and guidance is in-repo with psi4-path-advisor.py.; Other packages in the “ecosystem stack” (e.g., libint, gdma) should already be updated and; built on conda-forge. Survey them to check version tick PRs have been merged.; Conda-forge overwhelmingly handles the psi4 package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. High AM and multiarch psi4 builds for Linux. Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. restricted to only even python versions; c-f libint vs. psi4 libint2 packages (latter with high AM); smoke vs. full tests; no git rev-parse lines; load Intel compilers and specify them in compilers and flags CMake arguments. Prepare recipe, make sure psi4-cf is the only target uncommented in kitandkapoodle.py, set; crontab, view in kpd-anom.log.; Files will upload to psi4/label/dev. For releases and postreleases, on the anaconda.org site; (logged in as psi4), add, not replace, main label, so accessible from psi4/label/main. Build Psi4conda set¶; Installers are build using the project constructor to build binary bash or exe scripts, one per; OS per Python version. For example, there’s 16 installers when OSes are linux-64, win-64, osx-64,; osx-arm64 and pythons are 38, 39, 310, 311. In analogy to Miniconda, they’re called Psi4Conda. They; are built through GHA on the https://github.com/psi4/psi4meta repository and get served from vergil; (the cdsgroup webserver). If the previous release hasn’t had a snapshot saved, copy construct.yaml into a version-labeled; file and check it in.; Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/con",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:13803,test,tests,13803,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['test'],['tests']
Testability,"AG_COORDS¶. Dictionary to define a dimer. Contains “Natoms per frag”, “A Frag”, “A Ref Atoms”, “B Frag”, and “B Ref Atoms”. Type: string; Default: No Default. INTERFRAG_DIST_INV¶. Use 1/R for the interfragment stretching coordinate instead of R. Type: boolean; Default: false. INTERFRAG_HESS¶. Model Hessian to guess interfragment force constants. Type: string; Possible Values: DEFAULT, FISCHER_LIKE; Default: DEFAULT. INTERFRAG_MODE¶. When interfragment coordinates are present, use as reference points either principal axes or fixed linear combinations of atoms. Type: string; Possible Values: FIXED, PRINCIPAL_AXES; Default: FIXED. Misc.¶. OPT_RESTART¶. Restart the optimization from optking’s written history. Type: double; Default: 0. PRINT_TRAJECTORY_XYZ_FILE¶. Should an xyz trajectory file be kept (useful for visualization)?. Type: boolean; Default: false. SAVE_OPTIMIZATION¶. Save OptKing’s internal classes for possible restart upon error. Type: boolean; Default: false. TEST_B¶. Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B¶. Do test derivative B matrix?. Type: boolean; Default: false. WRITE_OPT_HISTORY¶. Write the full history to disk. Produces a non validated OptimizationResult. Type: boolean; Default: false. WRITE_OPT_RESULT¶. Write the optimization history / state to disc. Type: boolean; Default: false. WRITE_TRAJECTORY¶. Write Optimization Trajectory. Type: boolean; Default: false. table of contents. OPTKING; Optimization Algorithm; CARTESIAN_SYM_TOLERANCE; CONSECUTIVE_BACKSTEPS; CUSTOM_COORDS; DYNAMIC_LEVEL; ENSURE_BT_CONVERGENCE; EXT_FORCE_BEND; EXT_FORCE_CARTESIAN; EXT_FORCE_DIHEDRAL; EXT_FORCE_DISTANCE; EXT_FORCE_OOFP; FREEZE_ALL_DIHEDRALS; FROZEN_BEND; FROZEN_CARTESIAN; FROZEN_DIHEDRAL; FROZEN_DISTANCE; FROZEN_OOFP; GEOM_MAXITER; H_UPDATE_DEN_TOL; INTERFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT_MAX; INTRAFRAG_STEP_LIMIT_MIN; IRC_DIRECTION; IRC_POINTS; IRC_STEP_SIZE; OPT_COORDINATES; OPT_TYPE; PRINT_OPT_PARAMS; RANGED_BEN",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodir_options_c/module__optking.html:10824,test,test,10824,psi4manual/master/autodir_options_c/module__optking.html,https://psicode.org,https://psicode.org/psi4manual/master/autodir_options_c/module__optking.html,2,['test'],['test']
Testability,"AG_COORDS¶. Dictionary to define a dimer. Contains “Natoms per frag”, “A Frag”, “A Ref Atoms”, “B Frag”, and “B Ref Atoms”. Type: string; Default: No Default. INTERFRAG_DIST_INV¶. Use 1/R for the interfragment stretching coordinate instead of R. Type: boolean; Default: false. INTERFRAG_HESS¶. Model Hessian to guess interfragment force constants. Type: string; Possible Values: DEFAULT, FISCHER_LIKE; Default: DEFAULT. INTERFRAG_MODE¶. When interfragment coordinates are present, use as reference points either principal axes or fixed linear combinations of atoms. Type: string; Possible Values: FIXED, PRINCIPAL_AXES; Default: FIXED. Misc.¶. OPT_RESTART¶. Restart the optimization from optking’s written history. Type: double; Default: 0. PRINT_TRAJECTORY_XYZ_FILE¶. Should an xyz trajectory file be kept (useful for visualization)?. Type: boolean; Default: false. SAVE_OPTIMIZATION¶. Save OptKing’s internal classes for possible restart upon error. Type: boolean; Default: false. TEST_B¶. Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B¶. Do test derivative B matrix?. Type: boolean; Default: false. WRITE_OPT_HISTORY¶. Write the full history to disk. Produces a non validated OptimizationResult. Type: boolean; Default: false. WRITE_OPT_RESULT¶. Write the optimization history / state to disc. Type: boolean; Default: false. WRITE_TRAJECTORY¶. Write Optimization Trajectory. Type: boolean; Default: false. table of contents. OPTKING; Optimization Algorithm; CARTESIAN_SYM_TOLERANCE; CONSECUTIVE_BACKSTEPS; DYNAMIC_LEVEL; ENSURE_BT_CONVERGENCE; EXT_FORCE_BEND; EXT_FORCE_CARTESIAN; EXT_FORCE_DIHEDRAL; EXT_FORCE_DISTANCE; EXT_FORCE_OOFP; FROZEN_BEND; FROZEN_CARTESIAN; FROZEN_DIHEDRAL; FROZEN_DISTANCE; FROZEN_OOFP; GEOM_MAXITER; H_UPDATE_DEN_TOL; INTERFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT_MAX; INTRAFRAG_STEP_LIMIT_MIN; IRC_DIRECTION; IRC_POINTS; IRC_STEP_SIZE; OPT_COORDINATES; OPT_TYPE; PRINT_OPT_PARAMS; RANGED_BEND; RANGED_DIHEDRAL; RANGED_DISTANCE; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__optking.html:10301,test,test,10301,psi4manual/1.7.x/autodir_options_c/module__optking.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__optking.html,6,['test'],['test']
Testability,"AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. freq-masses; check nonphysical masses possible. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf6; Tests RHF/ROHF/UHF SCF gradients. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc13c; Tests RHF CCSD(T)gradients. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fix",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:6670,test,testing,6670,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['testing']
Testability,"API Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/add_tests-1.html:4362,test,tests,4362,psi4manual/1.4.0/add_tests-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html,4,['test'],['tests']
Testability,"ASSCF/6-31G** energy point. mbis-3; MBIS calculation on OH radical. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ao-casscf-sp; CASSCF/6-31G** energy point. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. fnocc6; Test method/basis with disk_df. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. sapt-compare; SAPT0 aug-cc-pVDZ computation of the water-water interaction energy, using the three SAPT codes. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. ao-dfcasscf-sp; CASSCF/6-31G** energy point. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:39399,test,tests,39399,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"AX_POINTS¶. The maximum number of grid points per evaluation block. Type: integer; Default: 256. DFT_BLOCK_MAX_RADIUS¶. The maximum radius to terminate subdivision of an octree block [au]. Type: double; Default: 3.0. DFT_BLOCK_MIN_POINTS¶. The minimum number of grid points per evaluation block. Type: integer; Default: 100. DFT_BLOCK_SCHEME¶. The blocking scheme for DFT. Type: string; Possible Values: NAIVE, OCTREE, ATOMIC; Default: OCTREE. DFT_DENSITY_TOLERANCE¶. density cutoff for LibXC. A negative value turns the feature off and LibXC defaults are used. Type: conv double; Default: -1.0. DFT_GRAC_C_FUNC¶. The gradient regularized asymptotic correction functional corr form. Type: string; Default: XC_LDA_C_VWN. DFT_GRAC_X_FUNC¶. The gradient regularized asymptotic correction functional exch form. Type: string; Default: XC_GGA_X_LB. DFT_GRID_NAME¶. The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_PRUNING_ALPHA¶. Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_REMOVE_DISTANT_POINTS¶. Remove points from the quadrature grid that exceed the spatial extend of the basis functions. Type: boolean; Default: true. DFT_VV10_RHO_CUTOFF¶. Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_WEIGHTS_TOLERANCE¶. grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. table of contents. SCF; General Wavefunction Info; BASIS; CHOLESKY_TOLERANCE; DF_BASIS_SCF; DF_SCF_GUESS; GUESS; GUESS_MIX; GUESS_PERSIST; INTS_TOLERANCE; MAX_MEM_BUF; MOLDEN_WRITE; ORBITALS_WRITE; PRINT_BASIS; PRINT_MOS; QCHF; REFERENCE; SAPGAU_BASIS; SAVE_JK; SCF_MEM_SAFETY_FACTOR; SCF_PROPERTIES; S_CHOLESKY_TOLERANCE; S_ORTHOGONALIZATION; S_TOLERANCE. Convergence Control/Stabilization; BASIS_GUESS; DAMPING_CONVERGENCE; DAMPING_PERCENTAGE; DF_BASIS_GUESS; DIIS; DIIS_MAX_VECS; DIIS_MIN_VECS; DIIS_RMS_ERROR; DIIS_START; D_CONVERGENCE; E_CONVERGENCE; FAIL_ON_MAXITER; INCFOCK; INCFOCK_CONVERGENCE; INCFOCK_F",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodir_options_c/module__scf.html:22834,log,logarithmic,22834,psi4manual/1.8.x/autodir_options_c/module__scf.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodir_options_c/module__scf.html,6,['log'],['logarithmic']
Testability,"AX_POINTS¶. The maximum number of grid points per evaluation block. Type: integer; Default: 256. DFT_BLOCK_MAX_RADIUS¶. The maximum radius to terminate subdivision of an octree block [au]. Type: double; Default: 3.0. DFT_BLOCK_MIN_POINTS¶. The minimum number of grid points per evaluation block. Type: integer; Default: 100. DFT_BLOCK_SCHEME¶. The blocking scheme for DFT. Type: string; Possible Values: NAIVE, OCTREE, ATOMIC; Default: OCTREE. DFT_DENSITY_TOLERANCE¶. density cutoff for LibXC. A negative value turns the feature off and LibXC defaults are used. Type: conv double; Default: -1.0. DFT_GRAC_C_FUNC¶. The gradient regularized asymptotic correction functional corr form. Type: string; Default: XC_LDA_C_VWN. DFT_GRAC_X_FUNC¶. The gradient regularized asymptotic correction functional exch form. Type: string; Default: XC_GGA_X_LB. DFT_GRID_NAME¶. The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_PRUNING_ALPHA¶. Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_REMOVE_DISTANT_POINTS¶. Remove points from the quadrature grid that exceed the spatial extend of the basis functions. Type: boolean; Default: true. DFT_VV10_RHO_CUTOFF¶. Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_WEIGHTS_TOLERANCE¶. grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. table of contents. SCF; General Wavefunction Info; BASIS; CHOLESKY_TOLERANCE; DF_BASIS_SCF; DF_SCF_GUESS; GUESS; GUESS_MIX; GUESS_PERSIST; INTS_TOLERANCE; MAX_MEM_BUF; MOLDEN_WRITE; ORBITALS_WRITE; PRINT_BASIS; PRINT_MOS; QCHF; REFERENCE; SAVE_JK; SCF_MEM_SAFETY_FACTOR; SCF_PROPERTIES; S_CHOLESKY_TOLERANCE; S_ORTHOGONALIZATION; S_TOLERANCE. Convergence Control/Stabilization; BASIS_GUESS; DAMPING_CONVERGENCE; DAMPING_PERCENTAGE; DF_BASIS_GUESS; DIIS; DIIS_MAX_VECS; DIIS_MIN_VECS; DIIS_RMS_ERROR; DIIS_START; DO_LINK; D_CONVERGENCE; E_CONVERGENCE; FAIL_ON_MAXITER; INCFOCK; INCFOCK_CONVERGENCE; INCFOCK_FULL_F",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__scf.html:22093,log,logarithmic,22093,psi4manual/1.6.x/autodir_options_c/module__scf.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__scf.html,2,['log'],['logarithmic']
Testability,"AX_POINTS¶. The maximum number of grid points per evaluation block. Type: integer; Default: 256. DFT_BLOCK_MAX_RADIUS¶. The maximum radius to terminate subdivision of an octree block [au]. Type: double; Default: 3.0. DFT_BLOCK_MIN_POINTS¶. The minimum number of grid points per evaluation block. Type: integer; Default: 100. DFT_BLOCK_SCHEME¶. The blocking scheme for DFT. Type: string; Possible Values: NAIVE, OCTREE, ATOMIC; Default: OCTREE. DFT_DENSITY_TOLERANCE¶. density cutoff for LibXC. A negative value turns the feature off and LibXC defaults are used. Type: conv double; Default: -1.0. DFT_GRAC_C_FUNC¶. The gradient regularized asymptotic correction functional corr form. Type: string; Default: XC_LDA_C_VWN. DFT_GRAC_X_FUNC¶. The gradient regularized asymptotic correction functional exch form. Type: string; Default: XC_GGA_X_LB. DFT_GRID_NAME¶. The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_PRUNING_ALPHA¶. Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_REMOVE_DISTANT_POINTS¶. Remove points from the quadrature grid that exceed the spatial extend of the basis functions. Type: boolean; Default: true. DFT_VV10_RHO_CUTOFF¶. Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_WEIGHTS_TOLERANCE¶. grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. table of contents. SCF; General Wavefunction Info; BASIS; CHOLESKY_TOLERANCE; DF_BASIS_SCF; DF_SCF_GUESS; GUESS; GUESS_MIX; GUESS_PERSIST; INTS_TOLERANCE; MAX_MEM_BUF; MOLDEN_WRITE; ORBITALS_WRITE; PRINT_BASIS; PRINT_MOS; QCHF; REFERENCE; SAVE_JK; SCF_MEM_SAFETY_FACTOR; SCF_PROPERTIES; S_CHOLESKY_TOLERANCE; S_ORTHOGONALIZATION; S_TOLERANCE. Convergence Control/Stabilization; BASIS_GUESS; DAMPING_CONVERGENCE; DAMPING_PERCENTAGE; DF_BASIS_GUESS; DIIS; DIIS_MAX_VECS; DIIS_MIN_VECS; DIIS_RMS_ERROR; DIIS_START; D_CONVERGENCE; E_CONVERGENCE; FAIL_ON_MAXITER; INCFOCK; INCFOCK_CONVERGENCE; INCFOCK_FULL_FOCK_EVERY",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__scf.html:22479,log,logarithmic,22479,psi4manual/1.7.x/autodir_options_c/module__scf.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__scf.html,2,['log'],['logarithmic']
Testability,"BBI, but SSI-only neutral is not accessible.; """"""; # compute errors; mc = modelchem; errors = {}; for ss in self.sset.keys():; errors[ss] = self.compute_statistics(mc, benchmark=benchmark, sset=ss,; failoninc=failoninc, verbose=False, returnindiv=False). # repackage; dbdat = []; ssarray = ['pospos', 'posneg', 'pospolar', 'posaliph', 'posaryl',; None, 'negneg', 'negpolar', 'negaliph', 'negaryl',; None, None, 'polarpolar', 'polaraliph', 'polararyl',; None, None, None, 'aliphaliph', 'alipharyl',; None, None, None, None, 'arylaryl']; for ss in ssarray:; dbdat.append(0.0 if ss is None else errors[ss][self.dbse]['mae']). # generate matplotlib instructions and call or print; try:; from . import mpl; import matplotlib.pyplot as plt; except ImportError:; print('Matplotlib not avail'); else:; filedict = mpl.liliowa(dbdat, xlimit=xlimit, view=view,; saveas=saveas, relpath=relpath, graphicsformat=graphicsformat); return filedict. [docs] def plot_iowa(self, modelchem, benchmark='default', sset='default',; failoninc=True, verbose=False,; title='', xtitle='', xlimit=2.0,; view=True,; saveas=None, relpath=False, graphicsformat=['pdf']):; """"""Computes individual errors for single *modelchem* versus; *benchmark* over subset *sset*. Coloring green-to-purple with; maximum intensity at *xlimit*. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. """"""; title = self.dbse + ' ' + modelchem; # compute errors; mc = modelchem; errors, indiv = self.compute_statistics(mc, benchmark=benchmark, sset=sset,; failoninc=failoninc, verbose=verbose, returnindiv=True); # repackage; dbdat = []; dblbl = []; for db in self.dbdict.keys():; if indiv[db] is not None:; for rxn in indiv[db].keys():; dbdat.append(indiv[db][rxn][0]); dblbl.append(str(rxn)); title = """"""%s vs %s for %s subset %s"""""" % (mc, benchmark, self.dbse, sset); me = errors[self.dbse]['me']; # generate matplotlib instructions and call or print; try:; from . import mpl; import matplotlib.pypl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:82167,benchmark,benchmark,82167,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"BOTH; Default: INTERNAL. OPT_TYPE¶. Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. PRINT_OPT_PARAMS¶. Print all optking parameters. Type: boolean; Default: false. PRINT_TRAJECTORY_XYZ_FILE¶. Should an xyz trajectory file be kept (useful for visualization)?. Type: boolean; Default: false. RFO_FOLLOW_ROOT¶. Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_NORMALIZATION_MAX¶. Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT¶. Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RSRFO_ALPHA_MAX¶. Absolute maximum value of RS-RFO. Type: double; Default: 1e8. STEP_TYPE¶. Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SYMM_TOL¶. Symmetry tolerance for testing whether a mode is symmetric. Type: conv double; Default: 0.05. Convergence Control¶. FLEXIBLE_G_CONVERGENCE¶. Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. G_CONVERGENCE¶. Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. MAX_DISP_G_CONVERGENCE¶. Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE¶. Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE¶. Convergence criterion for geometry optmization: maxi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__optking-1.html:3720,test,testing,3720,psi4manual/1.1.0/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__optking-1.html,2,['test'],['testing']
Testability,"BOTH; Default: INTERNAL. OPT_TYPE¶. Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. PRINT_OPT_PARAMS¶. Print all optking parameters. Type: boolean; Default: false. PRINT_TRAJECTORY_XYZ_FILE¶. Should an xyz trajectory file be kept (useful for visualization)?. Type: boolean; Default: false. RFO_FOLLOW_ROOT¶. Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_NORMALIZATION_MAX¶. Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT¶. Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RSRFO_ALPHA_MAX¶. Absolute maximum value of RS-RFO. Type: double; Default: 1e8. STEP_TYPE¶. Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SYMM_TOL¶. Symmetry tolerance for testing whether a mode is symmetric. Type: conv double; Default: 0.05. Convergence Control¶. FLEXIBLE_G_CONVERGENCE¶. Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. G_CONVERGENCE¶. Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. MAX_DISP_G_CONVERGENCE¶. Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE¶. Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE¶. Convergence criterion for geometry ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__optking-1.html:3720,test,testing,3720,psi4manual/1.3.2/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__optking-1.html,14,['test'],['testing']
Testability,"BraggSlater radii. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. cc12; Single point energies of multiple excited states with EOM-CCSD. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. scf-ecp2; Water-Argon complex with ECP present; check of RHF Hessian. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. mbis-3; MBIS calculation on OH radical. dfccsdat2; DF-A-CCSD(T) cc-pVDZ energy for the NH molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. dfccsdt2; DF-CCSD(T) cc-pVDZ energy for the NH molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfremp-2; density fitted REMP/cc-pVDZ energies for the CH3 radical. mints-helper; A general test of the MintsHelper function. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. mp2-h; check that methods can act on single atom. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. cdremp-1; Cholesky decomposed REMP/cc-pVDZ energies for the CO2 molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). tdscf-6; td-camb3lyp with DiskDF and method/basis specification. cdomp2-2; OMP2 cc-pVDZ energy",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:33390,test,test,33390,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. casscf-sp; CASSCF/6-31G** energy point. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfccsdt2; DF-CCSD(T) cc-pVDZ energy for the NH molecule. dft-reference; MP2 with a PBE0 reference computation. options1; check all variety of options parsing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc5; Test FNO-DF-CCSD(T) energy. omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. nbody-multi-level-2; many-body different levels of theory on each body of helium tetramer. oremp-grad1; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. scf-occ; force occupations in scf. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. oremp-grad2; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. single point energies were independently checked using the original wavels code. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad sin",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:33009,test,test,33009,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"Burns et al. JCP 134 084107 (2011).; 'NBC10A' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 22. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction e",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_available_databases-1.html:2464,benchmark,benchmark,2464,psi4manual/4.0b5/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_available_databases-1.html,4,['benchmark'],['benchmark']
Testability,"C); OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF); MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC); OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_RELAX (DCFT); DCFT (Expert) — Controls whether to relax the orbitals during the energy computation or not (for debug puproses only). For practical applications only the default must be used. Type: boolean; Default: true. MO_STEP_MAX (OCC); OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC); OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODE (TRANSQT); TRANSQT — The way of transformation, from ao basis to mo basis or vice versa. Type: string; Possible Values: TO_MO, TO_AO; Default: TO_MO. MODULE (CPHF); CPHF — What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. MOGRAD_DAMPING (OCC); OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WRITE (SCF); SCF — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOM_OCC (SCF); SCF — The absolute indices of orbitals to excite from in MOM (+/- for alpha/beta). Type: array; Default: No Default. MOM_START (SCF); SCF — The iteration to start MOM on (or 0 for no MOM). Type: integer; Default: 0. MOM_VIR (SCF); SCF — The absolute indices of orbitals to excite to in MOM (+/- for alpha/beta). Type: array; Default: No Default. MOORDER (TRANSQT); TRANSQT — Numbering of MOs for reordering requests?. Type: array; Default: No Default. MP2_AMPS_PRINT",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:78648,test,test,78648,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,4,['test'],['test']
Testability,"C-hybrid GKS functional has the; generic form,. \[E_{\mathrm{xc}} = (1-\alpha) \int_{\mathrm{R}^3}; f_{\mathrm{xc}}; \left(; \rho_{\alpha} (\vec r_1),; \rho_{\beta} (\vec r_1),; \gamma_{\alpha\alpha} (\vec r_1),; \gamma_{\alpha\beta} (\vec r_1),; \gamma_{\beta\beta} (\vec r_1),; \tau_{\alpha} (\vec r_1),; \tau_{\beta} (\vec r_1); ; \omega \right) \ \mathrm{d} ^3 r_1\]. \[-\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} \alpha \iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{1}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2\]. \[-\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} (1-\alpha)\iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{\mathrm{erf}(\omega r_{12})}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2\]; For LRC functionals, the choice of range-separation parameter \(\omega\) has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of “gap; fitting” or “optimal tuning” or simply “tuning.” The most popular tuned-LRC; approach is IP-fitting, in which the \(\omega\) is varied until the; Koopman’s IP (the opposite of the HOMO energy) matches the true IP (the; difference between \(N-1\)-electron and \(N\)-electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. \[\lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{tuned-LRC}} (r) = -; \frac{1}{r} + I_{\mathrm{IP}} +; \epsilon_{\mathrm{HOMO}}\]; Note that LRC functionals with default \(\omega\) only capture the; \(-1/r\) dependence,. \[\lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{LRC}} (r) = -; \frac{1}{r},\]; hybrid functionals only capture part of the \(-1/r\) dependence,. \[\lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Hybrid}} (r) = -; \frac{\alpha}{r}",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/dft-1.html:10345,test,test,10345,psi4manual/1.2.1/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/dft-1.html,15,['test'],['test']
Testability,"C; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. dft-freq-analytic2; Analytic UKS SVWN frequencies, compared to finite difference values. numpy-array-interface; Numpy interface testing. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_super",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/testsuite.html:1696,test,test,1696,psi4manual/master/testsuite.html,https://psicode.org,https://psicode.org/psi4manual/master/testsuite.html,1,['test'],['test']
Testability,"CASSCF/6-31G** energy point. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. scf-upcast-custom-basis; test scf castup with custom basis sets. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. mbis-4; MBIS calculation on NaCl. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cisd-sp; 6-31G** H2O Test CISD Energy Point. cbs-xtpl-dict; Extrapolated water energies.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:41273,test,tests,41273,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 com",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/testsuite-1.html:1739,test,test,1739,psi4manual/1.1.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/testsuite-1.html,4,['test'],['test']
Testability,"CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc1; ADC/6-31G** on H2O. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, at the UHF an ROHF levels of theory. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html:18249,test,testing,18249,psi4manual/4.0b4/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html,8,['test'],['testing']
Testability,"CCSD cc-pVDZ energy for the H2O molecule. mbis-2; MBIS calculation on OH- (Expanded Arrays). scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. fnocc3; Test FNO-QCISD(T) computation. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. cepa-module; routing check on lccd, lccsd, cepa(0). opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. aediis-2; EDIIS test case from 10.1063/1.1470195. cc56; EOM-CCSD/6-31g excited state transition data for water cation. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. scf-response2; Compute the dipole polarizability for water with custom basis set. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:23031,test,test,23031,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mom-h2o-3; MOM excitation from LUMO HOMO+3. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. sapt10; usapt example with empty beta due to frozen core. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:12261,test,test,12261,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"CCSD/qz2p on NH2 with aobasis. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/psi-mp4; MP4 energy co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_cfour.html:1327,test,tests,1327,psi4manual/1.6.x/autodoc_testsuite_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_cfour.html,1,['test'],['tests']
Testability,"CF); SCF — The gradient regularized asymptotic correction beta value. Type: double; Default: 40.0. DFT_GRAC_C_FUNC (SCF); SCF (Expert) — The gradient regularized asymptotic correction functional corr form. Type: string; Default: XC_LDA_C_VWN. DFT_GRAC_SHIFT (SCF); SCF — The gradient regularized asymptotic correction shift value. Type: double; Default: 0.0. DFT_GRAC_X_FUNC (SCF); SCF (Expert) — The gradient regularized asymptotic correction functional exch form. Type: string; Default: XC_GGA_X_LB. DFT_GRID_NAME (SCF); SCF (Expert) — The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_NUCLEAR_SCHEME (SCF); SCF — Nuclear Scheme. Type: string; Possible Values: TREUTLER, BECKE, NAIVE, STRATMANN; Default: TREUTLER. DFT_OMEGA (SCF); SCF — The DFT Range-separation parameter. Type: double; Default: 0.0. DFT_OMEGA_C (SCF); SCF — The DFT Correlation Range-separation parameter. Type: double; Default: 0.0. DFT_PRUNING_ALPHA (SCF); SCF (Expert) — Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_PRUNING_SCHEME (SCF); SCF (Expert) — Pruning Scheme. Type: string; Default: FLAT. DFT_RADIAL_POINTS (SCF); SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF); SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF); SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF); SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF); SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF); SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF); SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF); SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF); SCF — Number of radial po",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:101760,log,logarithmic,101760,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,2,['log'],['logarithmic']
Testability,"CF); SCF — The gradient regularized asymptotic correction beta value. Type: double; Default: 40.0. DFT_GRAC_C_FUNC (SCF); SCF (Expert) — The gradient regularized asymptotic correction functional corr form. Type: string; Default: XC_LDA_C_VWN. DFT_GRAC_SHIFT (SCF); SCF — The gradient regularized asymptotic correction shift value. Type: double; Default: 0.0. DFT_GRAC_X_FUNC (SCF); SCF (Expert) — The gradient regularized asymptotic correction functional exch form. Type: string; Default: XC_GGA_X_LB. DFT_GRID_NAME (SCF); SCF (Expert) — The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_NUCLEAR_SCHEME (SCF); SCF — Nuclear Scheme. Type: string; Possible Values: TREUTLER, BECKE, NAIVE, STRATMANN; Default: TREUTLER. DFT_OMEGA (SCF); SCF — The DFT Range-separation parameter. Type: double; Default: 0.0. DFT_OMEGA_C (SCF); SCF — The DFT Correlation Range-separation parameter. Type: double; Default: 0.0. DFT_PRUNING_ALPHA (SCF); SCF (Expert) — Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_PRUNING_SCHEME (SCF); SCF (Expert) — Pruning Scheme. Type: string; Possible Values: FLAT, P_GAUSSIAN, D_GAUSSIAN, P_SLATER, D_SLATER, LOG_GAUSSIAN, LOG_SLATER; Default: FLAT. DFT_RADIAL_POINTS (SCF); SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF); SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF); SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF); SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF); SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF); SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF); SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF); SCF — post-scf VV10 corre",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:102887,log,logarithmic,102887,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,2,['log'],['logarithmic']
Testability,"COMPLETE"":; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Submitting AtomicResult {}"".format(self.result_id)). return. logger.info(f'<<< JSON launch ... {self.molecule.schoenflies_symbol()} {self.molecule.nuclear_repulsion_energy()}'); gof = core.get_output_file(). # EITHER ...; # from psi4.driver import schema_wrapper; # self.result = schema_wrapper.run_qcschema(self.plan()); # ... OR ...; self.result = qcng.compute(; self.plan(),; ""psi4"",; raise_error=True,; # local_options below suitable for serial mode where each job takes all the resources of the parent Psi4 job.; # distributed runs through QCFractal will likely need a different setup.; local_options={; # B -> GiB; ""memory"": core.get_memory() / (2 ** 30),; ""ncores"": core.get_num_threads(),; },; ); # ... END. #pp.pprint(self.result.dict()); #print(""... JSON returns >>>""); core.set_output_file(gof, True); core.reopen_outfile(); logger.debug(pp.pformat(self.result.dict())); core.print_out(_drink_filter(self.result.dict()[""stdout""])); self.computed = True. [docs] def get_results(self, client: Optional[""FractalClient""] = None) -> AtomicResult:; """"""Return results as Atomic-flavored QCSchema."""""". if self.result:; return self.result. if client:; result = client.query_results(id=self.result_id); logger.debug(f""Querying AtomicResult {self.result_id}""); if len(result) == 0:; return self.result. self.result = result[0]; return self.result. def _drink_filter(stdout: str) -> str:; """"""Don't mess up the widespread ``grep beer`` test of Psi4 doneness by printing multiple drinks per outfile."""""". stdout = stdout.replace(""\n*** Psi4 exiting successfully. Buy a developer a beer!"", """"); stdout = stdout.replace(""\n*** Psi4 encountered an error. Buy a developer more coffee!"", """"); return stdout. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.6;  · . PSI4. Module code; psi4.driver.task_base. © Co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/task_base.html:5511,log,logger,5511,psi4manual/1.6.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/task_base.html,2,['log'],['logger']
Testability,"CSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. freq-masses; check nonphysical masses possible. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf6; Tests RHF/ROHF/UHF SCF gradients. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc13c; Tests RHF CCSD(T)gradients. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF T",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:6021,test,test,6021,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"CSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc12; Single point energies of multiple excited states with EOM-CCSD. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cbs-xtpl-func; optimization with method defined via cbs. fcidump; test FCIDUMP functionality for rhf/uhf. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. scf-level-shift-rohf; SCF level shift on an ROHF computation. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. scf3; File retention, docc, socc, and bond distances specified explicitly. opt16; SCF 6-31G(d) optimization of TS for HCN to HNC Performs finite difference hessian calculation. Then optimizes using previous orbitals for scf guess, in subsequent calculations. The last two displacements of the hessian break the plane of symemtry, This test confirms that only the reference geometry, with the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. nbo; Generation of NBO file. fno",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:34001,test,test,34001,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"CSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI); DETCI — Do use the component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_ORBS (FNOCC); FNOCC — Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. NAT_ORBS (OCC); OCC — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS (SAPT); SAPT — Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: false. NAT_ORBS_T2 (SAPT); SAPT — Do use MP2 natural orbital approximations for the block of two-electron integrals in the evaluation of second-order T2 amplitudes? This approximation is promising for accuracy and computational savings, but it has not been rigorously tested. Type: boolean; Default: false. NAT_ORBS_WRITE (DETCI); DETCI — Do write the natural orbitals?. Type: boolean; Default: false. NAT_ORBS_WRITE_ROOT (DETCI); DETCI — Sets the root number for which CI natural orbitals are written to PSIF_CHKPT. The default value is 1 (lowest root). Type: integer; Default: 1. NEGLECT_DISTANT_PAIR (LMP2); LMP2 — Do neglect distant pairs?. Type: boolean; Default: true. NEW_TRIPLES (CCENERGY); CCENERGY — Do use new triples?. Type: boolean; Default: true. NEW_TRIPLES (CCEOM); CCEOM — Do use new triples?. Type: boolean; Default: true. NEWTON_CONVERGENCE (ADC); ADC — The convergence criterion for pole searching step. Type: conv double; Default: 1e-7. NO_DFILE (DETCI); DETCI (Expert) — Do use the last vector space in the BVEC file to write scratch DVEC rather than using a separate DVEC file? (Only possible if NUM_ROOTS = 1.). Type:",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:86035,test,tested,86035,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,2,['test'],['tested']
Testability,"CSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ grad",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:8306,test,test,8306,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"CTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. S66by8¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference interaction energies from Rezac et al. JCTC 7 2427 (2011).; Note that the S66by8-N-1.0 members are not quite the same geometries as S66-N. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HB' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve hydrogen-bonded systems; 'MX' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve mixed-influence systems; 'DD' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve dispersion-dominated systems. BAKERJCC96¶. Geometrie",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_available_databases.html:6029,benchmark,benchmark,6029,psi4manual/master/autodoc_available_databases.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_available_databases.html,2,['benchmark'],['benchmark']
Testability,"CTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/testsuite-1.html:34686,test,test,34686,psi4manual/1.1.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/testsuite-1.html,4,['test'],['test']
Testability,"CTest “labels” are called “marks” in pytest.; Any new marks should be added to psi4/pytest.ini. Running for Debugging¶. PSIthon tests that don’t need extra files to run are easily run from <objdir> via stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out.; All PSIthon tests are runable through CTest, and output files appear in <objdir>/tests/<test-name>/output.dat and stdout results appear in <objdir>/Testing/Temporary/LastTest.log*. Adding PsiAPI Test Cases¶; To create a new test case, either create a new file or add to an existing file under psi4/tests/pytests. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; A test file may contain many tests, each of which is an ordinary Python function with name starting test_. This is how pytest knows to collect it.; No registration required to bring a test to pytest’s attention.; No registration required to bring a test to CMake’s attention. If a test needs additional files, register them in psi4/psi4/CMakeLists.txt. A few notes on test contents:. Import testing functions from utils and use Python assert: assert compare_values(expected, computed, ...).; Don’t worry about cleaning up files or resetting options. A function in psi4/tests/pytests/conftest.py does this automatically between every test.; Especially if using data or functions from outside a test, run a variety of tests at different pytest -n <N> levels to mix up test ordering. If tests fail that pass when run alone, you’ve got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. For every new test file, add pytestmark = [pytest.mark.psi, pytest.mark.api] at the top.; This ensures that every test has the psi mark and every PsiAPI test has the api mark to contrast with PSIthon tests with cli mark.; There are individual “marks” that can be added to whole tests or parts; of pa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:11376,test,test,11376,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['test'],['test']
Testability,"CUSTOM_FUNCTIONAL (SCF); SCF — A custom DFT functional object (built by Python or NULL/None). Type: python; Default: No Default. DFT_DISPERSION_PARAMETERS (SCF); SCF — Parameters defining the dispersion correction. See Table -D Functionals for default values and Table Dispersion Corrections for the order in which parameters are to be specified in this array option. Type: array; Default: No Default. DFT_FUNCTIONAL (SCF); SCF — The DFT combined functional name, e.g. B3LYP, or GEN to use a python reference to a custom functional specified by DFT_CUSTOM_FUNCTIONAL. Type: string; Default: No Default. DFT_GRID_NAME (SCF); SCF (Expert) — The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_NUCLEAR_SCHEME (SCF); SCF — Nuclear Scheme. Type: string; Possible Values: TREUTLER, BECKE, NAIVE, STRATMANN; Default: TREUTLER. DFT_OMEGA (SCF); SCF — The DFT Range-separation parameter. Type: double; Default: 0.0. DFT_PRUNING_ALPHA (SCF); SCF (Expert) — Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_PRUNING_SCHEME (SCF); SCF (Expert) — Pruning Scheme. Type: string; Possible Values: FLAT, P_GAUSSIAN, D_GAUSSIAN, P_SLATER, D_SLATER, LOG_GAUSSIAN, LOG_SLATER; Default: FLAT. DFT_RADIAL_POINTS (SCF); SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF); SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF); SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF); SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DIAG_METHOD (CCENERGY); CCENERGY — Diagonalization method for the CI matrix. Type: string; Possible Values: DAVIDSON, FULL; Default: DAVIDSON. DIAG_METHOD (DETCI); DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and d",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html:29720,log,logarithmic,29720,psi4manual/4.0b5/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html,2,['log'],['logarithmic']
Testability,"Can reconstruct CBS. Keys are d_fields. Formerly GRAND_NEED.; cbsrec: List[Dict[str, Any]] = []. # Maximal list of model chemistries extractable from running `compute_list`. Keys are _f_fields. Formerly JOBS_EXT.; trove: List[Dict[str, Any]] = []. # Minimal (enlightened) list of jobs to run to satisfy full CBS. Keys are _f_fields. Formerly JOBS.; compute_list: List[Dict[str, Any]] = []. # One-to-One list of AtomicComputer-s corresponding to `compute_list`.; task_list: List[AtomicComputer] = []. # One-to-One list of QCSchema corresponding to `task_list`.; results_list: List[Any] = []. @validator('molecule'); def set_molecule(cls, mol):; mol.update_geometry(); mol.fix_com(True); mol.fix_orientation(True); return mol. def __init__(self, **data):; data = p4util.kwargs_lower(data); data[""metadata""] = _process_cbs_kwargs(data); BaseComputer.__init__(self, **data). self.metameta = {; 'kwargs': data,; 'ptype': self.driver,; 'verbose': self.verbose,; 'label': None,; 'molecule': self.molecule,; }; # logger.debug(""METAMETA\n"" + pp.pformat(self.metameta)). if data['metadata']:; if data['metadata'][0][""wfn""] not in VARH.keys():; raise ValidationError(; """"""Requested SCF method '%s' is not recognized. Add it to VARH in driver_cbs.py to proceed."""""" %; (metadata[0][""wfn""])). if len(self.metadata) > 1:; for delta in self.metadata[1:]:; if delta[""wfn""] not in VARH.keys():; raise ValidationError(; f""""""Requested higher {delta[""treatment""]} method '{delta[""wfn""]}' is not recognized. Add it to VARH in driver_cbs.py to proceed.""""""; ); if delta[""wfn_lo""] not in VARH.keys():; raise ValidationError(; f""""""Requested lesser {delta[""treament""]} method '{delta[""wfn_lo""]}' is not recognized. Add it to VARH in driver_cbs.py to proceed.""""""; ). self.cbsrec, self.compute_list, self.trove = _build_cbs_compute(self.metameta, self.metadata). for job in self.compute_list:; keywords = copy.deepcopy(self.metameta['kwargs']['keywords']); if job[""f_options""] is not False:; stage_keywords = dict(job[""f_options""]",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html:53744,log,logger,53744,psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,2,['log'],['logger']
Testability,"Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:15571,test,testing,15571,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,8,['test'],['testing']
Testability,"Cartesians. mp2-1; All-electron MP2 6-31G** geometry optimization of water. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. freq-masses; check nonphysical masses possible. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf6; Tests RHF/ROHF/UHF SCF gradients. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:5794,test,testing,5794,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['testing']
Testability,"CompilersPSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. Compiler requirements are primarily; C++20 compliance (now GCC version 10.0 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details. PythonPSI4 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects).; PSI4 1.3 supports Python 3.6 and 3.7.; PSI4 1.4 supports Python 3.6, 3.7, 3.8, and 3.9.; PSI4 1.5 supports Python 3.7, 3.8, and 3.9.; PSI4 1.6 supports Python 3.8, 3.9, and 3.10.; PSI4 1.7 supports Python 3.8, 3.9, 3.10, and 3.11 (no binary packages for 3.11).; PSI4 1.8 supports Python 3.8, 3.9, 3.10, and 3.11.; PSI4 1.9 supports Python 3.8, 3.9, 3.10, 3.11, and 3.12.; PSI4 1.10 is anticipated to support Python 3.8, 3.9, 3.10, 3.11, and 3.12.; The future plan is to (1) be compatible with 3.8 and above until there is a good reason to drop; older versions but (2) only build and test for versions conda-forge supports.; The current master supports 3.8, 3.9, 3.10, 3.11, and 3.12. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; General GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; PSI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/introduction.html:23496,test,test,23496,psi4manual/master/introduction.html,https://psicode.org,https://psicode.org/psi4manual/master/introduction.html,1,['test'],['test']
Testability,"Control Keywords, setting keywords is flexible in; format. The previous example translates to:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23# UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_B",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/cfour-1.html:6024,test,tests,6024,psi4manual/1.2.1/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html,6,['test'],['tests']
Testability,"D. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. mom-h2o-4; MOM excitation from LUMO HOMO+4. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. scf-response3; UHF Dipole Polarizability Test. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt10; usapt example with empty beta due to frozen core. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cc51; EOM-CC3/cc-pVTZ on H2O. opt7; Various c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:4581,test,test,4581,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"D/6-31G** Optimize Geometry by Energies. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. aediis-1; ADIIS test case, from 10.1063/1.3304922. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. sapt11; sapt example with orbital freezing with alkali metal and dMP2. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. mbis-2; MBIS calculation on OH- (Expanded Arrays). phi-ao; Test computing values of basis functions (puream and non-puream) at points. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. rasci-ne; Ne atom RASCI/cc-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:1829,test,test,1829,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"D; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. How to refer to Psi4¶; Ways to refer to PSI4 in text, in order of decreasing goodness:. as Psi4 in Optima regular font with “si” in custom (82%) small caps; according to psi4/media/README.md. html: <span style=""font-family: Optima, sans-serif; color: #273896;"">P<span style=""font-size: 82%;"">SI</span>4</span>. as Psi4 with “si” in generated small caps. html: <span style=""font-variant: small-caps;"">Psi4</span>. as Psi4 with “si” in lowercase; as psi4 in code; NOT PSI4 or PSI. How to get a Psi4 logo file¶; All image files are stored in https://github.com/psi4/psi4media. How to use a local Add-On repository in the Psi4 build¶; For each Add-On, PSI4 pulls source from a specific online Git; repository and a specific tag/branch/commit in it. This ensures success; of the PSI4 build, reproducibility of the runtime results, and; freedom for continued upstream development. Sometimes, you’re the one; doing that development, and you need the CMake superbuild to pull source; from a local path rather than the approved codeset.; Find the CMakeLists.txt governing the target Add-On in; psi4/external and make changes analogous to the below:; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you’re changing the PSI4 repo codebase between compiles, there’s; nothing more to do as CMake will handle the code rebuild deps for you.; If you’re changing the local Add-On repo codebase between compiles,; CMake does not know when libaddon.[a|so",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:57034,log,logo,57034,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,8,['log'],['logo']
Testability,"DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:59582,test,test,59582,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['test'],['test']
Testability,"DC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:1992,test,test,1992,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. scf-response2; Compute the dipole polarizability for water with custom basis set. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. cisd-sp; 6-31G** H2O Test CISD Energy Point. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. casscf-fzc-sp; CASSCF/6-31G** energy point. sapt-sf1; Tests the Psi4 SF-SAPT code. sad-scf-type; Test SAD SCF guesses on noble gas atom. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cc13d; Tests analytic CC2 gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:19624,test,tests,19624,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"DETCI); DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 1. Type: array; Default: No Default. AVG_WEIGHTS (DETCI); DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BB_M_FILE (TRANSQT); TRANSQT —. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html:4976,benchmark,benchmarking,4976,psi4manual/4.0b2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html,2,['benchmark'],['benchmarking']
Testability,"DF_INTS_IO', ri_ints_io); psioh.set_specific_retention(97, False); psi4.clean(); activate(molecule). if bsse == 'on' or bsse == 'both':; return energies_n_full[Ns[0]]; else:; return energies_n_mon[Ns[0]]. ## Aliases ##; nbody = n_body. #####################; ## End of n_body ##; #####################. ###################; ## Start of cp ##; ###################. [docs]def cp(name, **kwargs):; r""""""The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. :aliases: counterpoise_correct(), counterpoise_correction(). :returns: (*float*) Counterpoise-corrected interaction energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY <CP-CORRECTED2-BODYINTERACTIONENERGY>`; * :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY <UNCP-CORRECTED2-BODYINTERACTIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No values of func besides energy have been tested. - Table print-out needs improving. Add some PSI variables. :type name: string; :param name: ``'scf'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; :py:func:`~driver.energy`; however, SAPT is not appropriate. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms a geometry optimization; on each system, and ``cbs`` performs a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:17558,test,tested,17558,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,2,['test'],['tested']
Testability,"DIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; >>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/lib/psi4/core.cpython-{ext_will_vary}.so ../psi4/core.cpython-{ext_will_vary}.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always n",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:30943,test,test,30943,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,9,['test'],['test']
Testability,"DZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. options1; check all variety of options parsing. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. isapt-charged; This test case shows an example of running the I-SAPT0/aug-cc-pVDZ computation for a positively charged system, illustrating the cation-pi interaction. The SIAO1 link partitioning algorithm is used. The system is taken from http://dx.doi.org/10.1016/j.comptc.2014.02.008. fnocc7; Test fnocc with linear dependencies. fnocc6; Test method/basis with disk_df. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. sapt-ecp; sapt0 of charged system in ECP basis set. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. oremp-grad2; integra",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:39268,test,test,39268,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"DZ engrad single points for the H2O+ molecule. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. aediis-2; EDIIS test case from 10.1063/1.1470195. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). fci-coverage; 6-31G H2O Test for coverage. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. mbis-4; MBIS calculation on NaCl. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dct10; The multiple guesses for DCT amplitudes for ODC-12. mom-h2o-3; MOM excitation from LUMO HOMO+3. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfccsdat1; DF-CCS",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:35924,test,testing,35924,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['testing']
Testability,"D_SPIN_AVERAGE¶. Do use spin-averaged occupations instead of atomic ground spin state in fractional SAD?. Type: boolean; Default: true. Expert DFT¶. DFT_BLOCK_MAX_POINTS¶. The maximum number of grid points per evaluation block. Type: integer; Default: 256. DFT_BLOCK_MAX_RADIUS¶. The maximum radius to terminate subdivision of an octree block [au]. Type: double; Default: 3.0. DFT_BLOCK_MIN_POINTS¶. The minimum number of grid points per evaluation block. Type: integer; Default: 100. DFT_BLOCK_SCHEME¶. The blocking scheme for DFT. Type: string; Possible Values: NAIVE, OCTREE; Default: OCTREE. DFT_GRAC_C_FUNC¶. The gradient regularized asymptotic correction functional corr form. Type: string; Default: XC_LDA_C_VWN. DFT_GRAC_X_FUNC¶. The gradient regularized asymptotic correction functional exch form. Type: string; Default: XC_GGA_X_LB. DFT_GRID_NAME¶. The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_PRUNING_ALPHA¶. Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_PRUNING_SCHEME¶. Pruning Scheme. Type: string; Default: FLAT. DFT_VV10_RHO_CUTOFF¶. Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. table of contents. SCF; General Wavefunction Info; BASIS; CHOLESKY_TOLERANCE; DF_BASIS_SCF; DF_SCF_GUESS; GUESS; GUESS_MIX; GUESS_PERSIST; INTS_TOLERANCE; MAX_MEM_BUF; MOLDEN_WRITE; PRINT_BASIS; PRINT_MOS; QCHF; REFERENCE; SAVE_JK; SCF_MEM_SAFETY_FACTOR; SCF_PROPERTIES; S_ORTHOGONALIZATION; S_TOLERANCE. Convergence Control/Stabilization; BASIS_GUESS; DAMPING_CONVERGENCE; DAMPING_PERCENTAGE; DF_BASIS_GUESS; DIIS; DIIS_MAX_VECS; DIIS_MIN_VECS; DIIS_RMS_ERROR; DIIS_START; D_CONVERGENCE; E_CONVERGENCE; FAIL_ON_MAXITER; MAXITER; MOM_OCC; MOM_START; MOM_VIR; SOSCF; SOSCF_CONV; SOSCF_MAX_ITER; SOSCF_MIN_ITER; SOSCF_PRINT; SOSCF_START_CONVERGENCE; STABILITY_ANALYSIS. Fractional Occupation UHF/UKS; FRAC_DIIS; FRAC_LOAD; FRAC_OCC; FRAC_RENORMALIZE; FRAC_START; FRAC_VAL. Environmental Effects; EXTE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__scf-1.html:16290,log,logarithmic,16290,psi4manual/1.3.2/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__scf-1.html,2,['log'],['logarithmic']
Testability,"Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Available basis sets. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BCCD_MAXITER (CCENERGY); CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: integer; Default: 50. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:5983,benchmark,benchmarking,5983,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['benchmark'],['benchmarking']
Testability,"Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""; out = Path(ofile); log = out.with_suffix("".log""). # Get the custom logger; import logging. from psi4 import logger; if not inherit_loglevel:; logger.setLevel(loglevel). # Create formatters; # * detailed: example: 2019-11-20:01:13:46,811 DEBUG [psi4.driver.task_base:156]; f_format_detailed = logging.Formatter(""%(asctime)s,%(msecs)d %(levelname)-8s [%(name)s:%(lineno)d] %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""); # * light: example: 2019-11-20:10:45:21 FINDIFREC CLASS INIT DATA; f_format_light = logging.Formatter(""%(asctime)s %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""). # Create handlers, add formatters to handlers, and add handlers to logger (StreamHandler() also available); filemode = ""a"" if append else ""w""; f_handler = logging.FileHandler(log, filemode); f_handler.setLevel(logging.DEBUG); f_handler.setFormatter(f_format_detailed). if execute:; core.set_output_file(str(out), append); if print_header is True or (print_header is None and not append):; _print_header(); # Warning: baseFilename is not part of the documented API for the logging module and could change.; filenames = [handle.baseFilename for han",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html:9017,log,logger,9017,psi4manual/1.9.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html,8,['log'],['logger']
Testability,"Do use DIIS for non-1.0-occupied points?; neutral_guess (Optional[bool]) – Do use neutral orbitals as guess for the anion?; hf_guess (Optional[bool]) – Do use UHF guess before UKS?; continuous_guess (Optional[bool]) – Do carry along guess rather than reguessing at each occupation?; filename (Optional[str]) – Result filename, if not name of molecule. Returns:; Dictionary associating SCF energies with occupations. Return type:; Dict[float, float]. psi4.driver.frac.frac_nuke(name, **kwargs)[source]¶; Pull all the electrons out, one at a time. Return type:; Dict[float, float]. Parameters:; name (str | Callable). psi4.set_output_file(ofile, append=False, *, loglevel=20, execute=True, print_header=None, inherit_loglevel=False)[source]¶; Set the name for output and logging files. Parameters:. ofile (str) – Name of ASCII output file including extension. The logging file is set from this string with a .log extension.; append (bool) – Do append to the output and logging files rather than (the default) truncating them?; loglevel (int) – The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute (bool) – Do set ofile via psi4.core.set_output_file() and add the logger, rather than just returning ofile path.; print_header (Optional[bool]) – Whether to write the Psi4 header to the ASCII output file. (Only applicable if execute=True.) By default,; writes if file is truncated (append=False) but not if appended.; inherit_loglevel (bool) – If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns:; Path(ofile). Return type:; Path. Notes; This psi4.set_output_file() command calls psi4.core.set_output_file() and should be used in; preference to it as this additionally sets up logging. pydantic model psi4.driver.task_base.BaseComputer[source]¶; Base class for “computers” that plan, run, and process QC tasks. Show JSON schema{; ""title"": ""BaseComputer"",; ""description"": ""Base class for \",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/external_apis.html:5757,log,logging,5757,psi4manual/master/external_apis.html,https://psicode.org,https://psicode.org/psi4manual/master/external_apis.html,3,['log'],"['log', 'logging', 'loglevel']"
Testability,"E, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/testsuite-1.html:9946,test,test,9946,psi4manual/1.1.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/testsuite-1.html,4,['test'],['test']
Testability,"ENT GRADIENT' in task.extras['qcvars']:; mc['f_gradient'] = task.extras['qcvars']['CURRENT GRADIENT']. if 'CURRENT DIPOLE' in task.extras['qcvars']:; mc['f_dipole'] = task.extras['qcvars']['CURRENT DIPOLE']. if 'CURRENT DIPOLE GRADIENT' in task.extras['qcvars']:; mc['f_dipder'] = task.extras['qcvars']['CURRENT DIPOLE GRADIENT']. # Fill in energies for subsumed methods; if self.metameta['ptype'] == 'energy':; for wfn in VARH[mc['f_wfn']]:; for job in self.trove:; if ((wfn == job['f_wfn']) and (mc['f_basis'] == job['f_basis']); and (mc['f_options'] == job['f_options'])):; job['f_energy'] = task.extras['qcvars'][VARH[wfn][wfn]]. # Copy data from 'run' to 'obtained' table; for mce in self.trove:; if ((mc['f_wfn'] == mce['f_wfn']) and (mc['f_basis'] == mce['f_basis']); and (mc['f_options'] == mce['f_options'])):; mce['f_energy'] = mc['f_energy']; mce['f_gradient'] = mc['f_gradient']; mce['f_hessian'] = mc['f_hessian']; mce['f_dipole'] = mc['f_dipole']; mce['f_dipder'] = mc['f_dipder']. # logger.debug(""MC\n"" + pp.pformat(mc)). cbs_results, self.cbsrec = _assemble_cbs_components(self.metameta, self.trove, self.cbsrec). instructions = _summary_table(self.metadata, self.trove, self.cbsrec); core.print_out(instructions); logger.info(instructions). # logger.debug('CBS_RESULTS\n' + pp.pformat(cbs_results)); # logger.debug('GRAND_NEED\n' + pp.pformat(self.cbsrec)). cbs_results[""module""] = modules; return cbs_results. [docs]; def get_results(self, client: Optional[""qcportal.FractalClient""] = None) -> AtomicResult:; """"""Return results as Composite-flavored QCSchema."""""". assembled_results = self._prepare_results(client=client); E0 = assembled_results[""energy""]. # load QCVariables & properties; qcvars = {; 'CBS NUMBER': len(self.compute_list),; 'NUCLEAR REPULSION ENERGY': self.molecule.nuclear_repulsion_energy(),; }. properties = {; ""calcinfo_natom"": self.molecule.natom(),; ""nuclear_repulsion_energy"": self.molecule.nuclear_repulsion_energy(),; ""return_energy"": E0,; }. for qcv in ['CB",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs.html:58153,log,logger,58153,psi4manual/1.8.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs.html,6,['log'],['logger']
Testability,"ENT GRADIENT' in task.extras['qcvars']:; mc['f_gradient'] = task.extras['qcvars']['CURRENT GRADIENT']. if 'CURRENT DIPOLE' in task.extras['qcvars']:; mc['f_dipole'] = task.extras['qcvars']['CURRENT DIPOLE']. if 'CURRENT DIPOLE GRADIENT' in task.extras['qcvars']:; mc['f_dipder'] = task.extras['qcvars']['CURRENT DIPOLE GRADIENT']. # Fill in energies for subsumed methods; if self.metameta['ptype'] == 'energy':; for wfn in VARH[mc['f_wfn']]:; for job in self.trove:; if ((wfn == job['f_wfn']) and (mc['f_basis'] == job['f_basis']); and (mc['f_options'] == job['f_options'])):; job['f_energy'] = task.extras['qcvars'][VARH[wfn][wfn]]. # Copy data from 'run' to 'obtained' table; for mce in self.trove:; if ((mc['f_wfn'] == mce['f_wfn']) and (mc['f_basis'] == mce['f_basis']); and (mc['f_options'] == mce['f_options'])):; mce['f_energy'] = mc['f_energy']; mce['f_gradient'] = mc['f_gradient']; mce['f_hessian'] = mc['f_hessian']; mce['f_dipole'] = mc['f_dipole']; mce['f_dipder'] = mc['f_dipder']. # logger.debug(""MC\n"" + pp.pformat(mc)). cbs_results, self.cbsrec = _assemble_cbs_components(self.metameta, self.trove, self.cbsrec). instructions = _summary_table(self.metadata, self.trove, self.cbsrec); core.print_out(instructions); logger.info(instructions). # logger.debug('CBS_RESULTS\n' + pp.pformat(cbs_results)); # logger.debug('GRAND_NEED\n' + pp.pformat(self.cbsrec)). cbs_results[""module""] = modules; return cbs_results. def get_results(self, client: Optional[""FractalClient""] = None) -> AtomicResult:; """"""Return results as Composite-flavored QCSchema."""""". assembled_results = self._prepare_results(client=client); E0 = assembled_results[""energy""]. # load QCVariables & properties; qcvars = {; 'CBS NUMBER': len(self.compute_list),; 'NUCLEAR REPULSION ENERGY': self.molecule.nuclear_repulsion_energy(),; }. properties = {; ""calcinfo_natom"": self.molecule.natom(),; ""nuclear_repulsion_energy"": self.molecule.nuclear_repulsion_energy(),; ""return_energy"": E0,; }. for qcv in ['CBS', 'CURRENT']:; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html:57721,log,logger,57721,psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,2,['log'],['logger']
Testability,"ENT' in task.extras['qcvars']:; mc['f_dipder'] = np.array(task.extras['qcvars']['CURRENT DIPOLE GRADIENT']). # Fill in energies for subsumed methods; if self.metameta['ptype'] == 'energy':; for wfn in VARH[mc['f_wfn']]:; for job in self.trove:; if ((wfn == job['f_wfn']) and (mc['f_basis'] == job['f_basis']); and (mc['f_options'] == job['f_options'])):; job['f_energy'] = task.extras['qcvars'][VARH[wfn][wfn]]. # Copy data from 'run' to 'obtained' table; for mce in self.trove:; if ((mc['f_wfn'] == mce['f_wfn']) and (mc['f_basis'] == mce['f_basis']); and (mc['f_options'] == mce['f_options'])):; mce['f_energy'] = mc['f_energy']; mce['f_gradient'] = mc['f_gradient']; mce['f_hessian'] = mc['f_hessian']; mce['f_dipole'] = mc['f_dipole']; mce['f_dipder'] = mc['f_dipder']. # logger.debug(""MC\n"" + pp.pformat(mc)). cbs_results, self.cbsrec = _assemble_cbs_components(self.metameta, self.trove, self.cbsrec). instructions = _summary_table(self.metadata, self.trove, self.cbsrec); core.print_out(instructions); logger.info(instructions). # logger.debug('CBS_RESULTS\n' + pp.pformat(cbs_results)); # logger.debug('GRAND_NEED\n' + pp.pformat(self.cbsrec)). cbs_results[""module""] = modules; return cbs_results. [docs] def get_results(self, client: Optional[""qcportal.FractalClient""] = None) -> AtomicResult:; """"""Return results as Composite-flavored QCSchema."""""". assembled_results = self._prepare_results(client=client); E0 = assembled_results[""energy""]. # load QCVariables & properties; qcvars = {; 'CBS NUMBER': len(self.compute_list),; 'NUCLEAR REPULSION ENERGY': self.molecule.nuclear_repulsion_energy(),; }. properties = {; ""calcinfo_natom"": self.molecule.natom(),; ""nuclear_repulsion_energy"": self.molecule.nuclear_repulsion_energy(),; ""return_energy"": E0,; }. for qcv in ['CBS', 'CURRENT']:; qcvars[qcv + ' REFERENCE ENERGY'] = self.cbsrec[0]['d_energy']; qcvars[qcv + ' CORRELATION ENERGY'] = E0 - self.cbsrec[0]['d_energy']; qcvars[qcv + ('' if qcv == 'CURRENT' else ' TOTAL') + ' ENERGY'] = E0. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs.html:58225,log,logger,58225,psi4manual/1.7.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs.html,2,['log'],['logger']
Testability,"EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc52; CCSD Response for H2O2. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. dft-reference; MP2 with a PBE0 reference computation. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. linK-1; RHF Linear Exchange Algorithm test for water. omp3-5; SOS-OMP3 cc-pV",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:26986,test,test,26986,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"E_PREFIX_PATH part) and telling it to; do an in-source build (the . part). Then just run make in; your plugin directory. After any change to the plugin C++ code,; make must be run in the plugin directory to recompile the; myplugin.so executable, but recompiling the main PSI4 code; is not necessary. Should you add additional (non-header) files to; the plugin or need to link to additional external libraries, add that; information here.; input.dat — Sample input file for the plugin.; Since the __init__.py file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be included in PYTHONPATH,; either externally in the calling shell or defined in the input file.; This is usually done by manipulating PSIPATH. Then,; the plugin can be loaded as import myplugin and executed as; energy('myplugin'). Any other Python functions are also available from; the input file, e.g. myplugin.testfunction(), note the namespace; protection.; pymodule.py — Python component of the plugin.; By encoding the sequence of PSI4 module; calls needed to run the plugin in the run_myplugin() function in this; file, the plugin is hooked into the main PSI4 driver function; energy() and so can be accessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file.; __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section). doc.rst — Documentation file. Place in this file any notes,; equations, warnings to users, todo lists, etc.. Plain text is fine,; though reStructuredText is the u",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/plugins-1.html:6737,test,testfunction,6737,psi4manual/1.1.0/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/plugins-1.html,15,['test'],['testfunction']
Testability,"Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:40248,test,test,40248,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"F Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. mints-benchmark; run some BLAS benchmarks. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. linK-1; RHF Linear Exchange Algorithm test for water. fci-h2o-2; 6-31G H2O Test FCI Energy Point. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. mom-h2o-4; MOM excitation from LUMO HOMO+4. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. scf-response3; UHF Dipole Polarizability Test. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt10; usapt example",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:3336,test,test,3336,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"F convergence and to target excited Slater determinants directly. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. pywrap-cbs1; Various basis set extrapolation tests. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. opt2; SCF DZ allene geometry optimzation, with Cartesian input. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc54; CCSD dipole with user-specified basis set. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. cc16; UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html:10692,test,testing,10692,psi4manual/4.0b4/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html,8,['test'],['testing']
Testability,"F gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and sim",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:10784,test,test,10784,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"F. For “fixed” coordinates, the final value is provided by the user. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet or",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:7899,test,test,7899,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"FINDIF"", ""PRINT""); kwargs['findif_stencil_size'] = core.get_option(""FINDIF"", ""POINTS""); kwargs['findif_step_size'] = core.get_option(""FINDIF"", ""DISP_SIZE""). ## Pre-planning interventions. # * Trip on function or alias as name; lowername = driver_util.upgrade_interventions(name); _filter_renamed_methods(""gradient"", lowername). # * Allow specification of methods to arbitrary order; lowername, level = driver_util.parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # * Prevent methods that do not have associated derivatives; if lowername in energy_only_methods:; raise ValidationError(f""`gradient('{name}')` does not have an associated gradient.""). # * Avert pydantic anger at incomplete modelchem spec; userbas = core.get_global_option('BASIS') or kwargs.get('basis'); if lowername in integrated_basis_methods and userbas is None:; kwargs['basis'] = '(auto)'. # Are we planning?; plan = task_planner.task_planner(""gradient"", lowername, molecule, **kwargs); logger.debug('GRADIENT PLAN'); logger.debug(pp.pformat(plan.dict())). if kwargs.get(""return_plan"", False):; # Plan-only requested; return plan. elif not isinstance(plan, AtomicComputer):; # Advanced ""Computer"" active; plan.compute(); return plan.get_psi_results(return_wfn=return_wfn). else:; # We have unpacked to an AtomicInput; lowername = plan.method; basis = plan.basis; core.set_global_option(""BASIS"", basis). ## Second half of this fn -- entry means program running exactly analytic 1st derivative. # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util.negotiate_convergence_criterion((1, 1), lowername, return_optstash=True). # Commit to procedures[] call hereafter; core.clean_variables(). # no analytic derivatives for scf_type cd; if core.get_global_option('SCF_TYPE') == 'CD':; raise ValidationError(""""""No analytic derivatives for SCF_TYPE CD.""""""). core.print_out(""""""gradient() will perform analytic gradient computation.\n""""""). # Perform",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html:37110,log,logger,37110,psi4manual/1.6.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html,2,['log'],['logger']
Testability,"FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with functions to parse the input file and convert; Psithon into standard Python. Particularly, forms psi4; module calls that access the C++ side of Psi4. """""". __all__ = [""process_input""]. import os; import re; import sys; import uuid. from psi4 import core; from psi4.driver.p4util.util import set_memory; from psi4.driver.p4util.exceptions import *. # inputfile contents to be preserved from the processor; literals = {}. # experimental - whether to run py statements as they're parsed from psithon; runalso = False. def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; message = ('Unsupported syntax:\n\n%s\n\n' % (line)); raise TestComparisonError(message). def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if dollar:; # This is a python variable, make sure that it starts with a letter; if re.match(r'^[A-Za-z][\w]*', val):; return val; else:; message = (""Invalid Python variable: %s"" % (val)); raise TestComparisonError(message); elif re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val):; # This must be a number, don't wrap it in quotes; return val; elif re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % (val). def quotify(string, isbasis=False):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When *basis*; is True, allows commas, since basis sets may have commas and are assured to; not involve a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/inputparser.html:1787,Test,TestComparisonError,1787,psi4manual/1.7.x/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/inputparser.html,2,['Test'],['TestComparisonError']
Testability,"FT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfep2-2; Compute three IP and 2 EA’s for ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:23517,test,testing,23517,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['testing']
Testability,"FX2C-1e with a static electric field on He aug-cc-pVTZ. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. matrix2; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. psithon2; Accesses basis sets, databases, plugins, and executab",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:20203,test,test,20203,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"FX2C-1e with a static electric field on He aug-cc-pVTZ. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. soscf-large; Second-order SCF convergnece: Benzene. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. mom-h2o-3; MOM excitation from LUMO HOMO+3. dfccsdt2; DF-CCSD(T) cc-pVDZ energy for the NH molecule. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. pywrap-cbs1; Various basis set extrapolation tests. fnocc2; Test G2 method for H2O. cbs-xtpl-dict; Extrapolated water energies. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:19243,test,test,19243,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,4,['test'],['test']
Testability,"Finite difference of energies frequency, run in sow/reap mode. pywrap-db2; Database calculation, run in sow/reap mode. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dft-custom; DFT custom functional test. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cubeprop-esp; RHF orbitals and density for water. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/testsuite-1.html:44672,test,test,44672,psi4manual/1.4.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/testsuite-1.html,2,['test'],['test']
Testability,"G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. scf-auto-cholesky; Cholesky filter a complete basis. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. fnocc7; Test fnocc with linear dependencies. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. linK-1; RHF Linear Exchange Algorithm test for water. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. mbis-5; MBIS calculation on ZnO. cc13d; Tests analytic CC2 gradients. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. scf-level-shift-uhf; SCF level shift on a UHF computation. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to m",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:45329,test,tests,45329,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"G** H2O CCSD optimization by energies, with Z-Matrix input. fd-gradient; SCF STO-3G finite-difference tests. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. options1; check all variety of options parsing. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. isapt-charged; This test case shows an example of running the I-SAPT0/aug-cc-pVDZ computation for a positively charged system, illustrating the cation-pi interaction. The SIAO1 link partitioning algorithm is used. The system is taken from http://dx.doi.org/10.1016/j.comptc.2014.02.008. fnocc7; Test fnocc with linear dependencies. fnocc6; Test method/basis with disk_df. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. dct3; DC-06 calculation for the He dimer. This performs a simultaneou",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:38731,test,testing,38731,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['testing']
Testability,"G0):; qcvars[""CURRENT GRADIENT""] = G0; qcvars[""CBS TOTAL GRADIENT""] = G0; properties[""return_gradient""] = G0. H0 = assembled_results[""hessian""]; if np.count_nonzero(H0):; qcvars[""CURRENT HESSIAN""] = H0; qcvars[""CBS TOTAL HESSIAN""] = H0; properties[""return_hessian""] = H0. D0 = assembled_results[""dipole""]; if np.count_nonzero(D0):; qcvars[""CURRENT DIPOLE""] = D0; qcvars[""CBS DIPOLE""] = D0. DD0 = assembled_results[""dipole gradient""]; if np.count_nonzero(DD0):; qcvars[""CURRENT DIPOLE GRADIENT""] = DD0; qcvars[""CBS DIPOLE GRADIENT""] = DD0. cbs_model = AtomicResult(; **{; 'driver': self.driver,; #'keywords': self.keywords,; 'model': {; 'method': self.method,; 'basis': self.basis,; },; 'molecule': self.molecule.to_schema(dtype=2),; 'properties': properties,; 'provenance': p4util.provenance_stamp(__name__, module=assembled_results[""module""]),; 'extras': {; 'qcvars': qcvars,; 'cbs_record': copy.deepcopy(self.cbsrec),; },; 'return_result': assembled_results['ret_ptype'],; 'success': True,; }). logger.debug('CBS QCSchema\n' + pp.pformat(cbs_model.dict())). return cbs_model. def get_psi_results(self, return_wfn: bool = False) -> EnergyGradientHessianWfnReturn:; """"""Called by driver to assemble results into Composite-flavored QCSchema,; then reshape and return them in the customary Psi4 driver interface: ``(e/g/h, wfn)``. Parameters; ----------; return_wfn; Whether to additionally return the dummy :py:class:`~psi4.core.Wavefunction`; calculation result as the second element of a tuple. Contents are:. - molecule; - dummy basis, def2-svp; - e/g/h member data; - QCVariables; - module if simple. Returns; -------; ret; Energy, gradient, or Hessian according to self.driver.; wfn; Wavefunction described above when *return_wfn* specified. """"""; cbs_model = self.get_results(). if cbs_model.driver == 'energy':; ret_ptype = cbs_model.return_result; else:; ret_ptype = core.Matrix.from_array(cbs_model.return_result); wfn = _cbs_schema_to_wfn(cbs_model). if return_wfn:; return (ret_ptype, wfn); e",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html:60209,log,logger,60209,psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,2,['log'],['logger']
Testability,"GNU make, GNU install, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-only capabilities:. cf",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:5332,test,tests,5332,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['test'],['tests']
Testability,"Geometries and reference interaction energies from Rezac et al. JCTC 7 2427 (2011).; Note that the S66by8-N-1.0 members are not quite the same geometries as S66-N. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HB' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve hydrogen-bonded systems; 'MX' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve mixed-influence systems; 'DD' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve dispersion-dominated systems. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; \(\Rightarrow\) 'S22B' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22; 'WATER' water dimer. table of contents. Database — database(); Output; Available Databases; JSCH; O24by5; S22by5; HTBH; HBC6; S66; NCB31; ACENES; HTR40; A24; NHTBH; BAKERJCC96; SSI; HSG; A24alt; NBC10; RSE42; BAKERJCC93; BBI; BASIC; RGC10; O24by5mb; BENCH12; S66by8; CORE; S22. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(). © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/db-1.html:25410,benchmark,benchmark,25410,psi4manual/1.5.0/db-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/db-1.html,2,['benchmark'],['benchmark']
Testability,"H2 Energy Point, with n=2-25. cubeprop; RHF orbitals and density for water. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega= (589 355 nm). cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. mints3; Test individual integral objects for correctness. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc13d; Tests analytic CC2 gradients. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cubeprop-esp; RHF orbitals and density for water. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). omp2p5-grad2; OMP2.5 cc-pVDZ grad",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:1897,test,testing,1897,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['testing']
Testability,"H4. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc54; CCSD dipole with user-specified basis set. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. soscf-large; Second-order SCF convergnece: Benzene. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVD",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:11168,test,test,11168,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"HF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. DEBUG¶. The amount of debug information printed to the output file. Type: integer; Default: 0. DF_BASIS_SCF¶. Auxiliary basis for SCF. Type: string; Possible Values: basis string; Default: No Default. DO_QQR_SIEVE¶. Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SINGLETS¶. Do singlet states? Default true. Type: boolean; Default: true. DO_TRIPLETS¶. Do triplet states? Default true. Type: boolean; Default: true. EXPLICIT_HAMILTONIAN¶. Do explicit hamiltonian only?. Type: boolean; Default: false. FITTING_ALGORITHM¶. Fitting algorithm (0 for old, 1 for new). Type: integer; Default: 0. FITTING_CONDITION¶. The maximum reciprocal condition allowed in the fitting metric. Type: double; Default: 1.0e-12. INDEPENDENT_J_TYPE¶. JK Independent options. Type: string; Possible Values: DIRECT_SCREENING; Default: DIRECT_SCREENING. MODULE¶. What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. OMP_N_THREAD¶. The maximum number of integral threads (0 for Process::environment.get_n_threads()). Type: integer; Default: 0. PRINT¶. The amount of information printed to the output file. Type: integer; Default: 1. SCF_TYPE¶. SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDENT, GTFOCK; Default: DIRECT. SCHWARZ_CUTOFF¶. The Schwarz cutoff value. Type: double; Default: 1.0e-12. SOLVER_CONVERGENCE¶. Solver convergence threshold (max 2-norm). Type: conv double; Default: 1.0e-6. SOLVER_EXACT_DIAGONAL¶. Solver exact diagonal or eigenvalue difference?. Type: boolean; Default: false. SOLVER_MAXITER¶. Solver maximum iterations. Type: integer; Default: 100. SOLVER_MAX_SUBSPACE¶. DL Solver maximum number of subspace vectors. Type: integer; Default: 6. SOLVER_MIN_SUBSPACE¶. DL Solver number of subspace vectors to collapse to. Type: integer; Default: 2. SOLVER_NORM¶. D",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cphf-1.html:2159,test,test,2159,psi4manual/1.1.0/autodir_options_c/module__cphf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__cphf-1.html,4,['test'],['test']
Testability,"HF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. DEBUG¶. The amount of debug information printed to the output file. Type: integer; Default: 0. DF_BASIS_SCF¶. Auxiliary basis for SCF. Type: string; Possible Values: basis string; Default: No Default. DO_QQR_SIEVE¶. Do we do the QQR integral sieve of Maurer et al. When false, just uses * the Schwarz sieve. Type: boolean; Default: false. DO_SINGLETS¶. Do singlet states? Default true. Type: boolean; Default: true. DO_TRIPLETS¶. Do triplet states? Default true. Type: boolean; Default: true. EXPLICIT_HAMILTONIAN¶. Do explicit hamiltonian only?. Type: boolean; Default: false. FITTING_ALGORITHM¶. Fitting algorithm (0 for old, 1 for new). Type: integer; Default: 0. FITTING_CONDITION¶. The maximum reciprocal condition allowed in the fitting metric. Type: double; Default: 1.0e-12. INDEPENDENT_J_TYPE¶. JK Independent options. Type: string; Possible Values: DIRECT_SCREENING; Default: DIRECT_SCREENING. MODULE¶. What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. OMP_N_THREAD¶. The maximum number of integral threads (0 for omp_get_max_threads()). Type: integer; Default: 0. PRINT¶. The amount of information printed to the output file. Type: integer; Default: 1. SCF_TYPE¶. SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDENT, GTFOCK; Default: DIRECT. SCHWARZ_CUTOFF¶. The schwarz cutoff value. Type: double; Default: 1.0e-12. SOLVER_CONVERGENCE¶. Solver convergence threshold (max 2-norm). Type: conv double; Default: 1.0e-6. SOLVER_EXACT_DIAGONAL¶. Solver exact diagonal or eigenvalue difference?. Type: boolean; Default: false. SOLVER_MAXITER¶. Solver maximum iterations. Type: integer; Default: 100. SOLVER_MAX_SUBSPACE¶. DL Solver maximum number of subspace vectors. Type: integer; Default: 6. SOLVER_MIN_SUBSPACE¶. DL Solver number of subspace vectors to collapse to. Type: integer; Default: 2. SOLVER_NORM¶. DL Solver minimu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cphf-1.html:2213,test,test,2213,psi4manual/1.0.0/autodir_options_c/module__cphf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cphf-1.html,2,['test'],['test']
Testability,"HF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. fnocc7; Test fnocc with linear dependencies. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. fsapt-ext-abc; FSAPT with external charge on trimer. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. scf-level-shift-uhf; SCF level shift on a UHF computation. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/testsuite.html:46746,test,test,46746,psi4manual/1.6.x/testsuite.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/testsuite.html,2,['test'],['test']
Testability,"HF/cc-pVDZ H2O computation all derivatives. scf-auto-cholesky; Cholesky filter a complete basis. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. pywrap-cbs1; Various basis set extrapolation tests. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. dct10; The multiple guesses for DCT amplitudes for ODC-12. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). props4; Electrostatic potential and electric field evaluated on a grid around water. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. cc5;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:10489,test,test,10489,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"HI']['f_zeta']), energypiece); psi4.print_out(cbsscheme). return energypiece. # Solution equation in LaTeX: $E_{corl}^{\infty} = \frac{E_{corl}^{X} X^3 - E_{corl}^{X-1} (X-1)^3}{X^3 - (X-1)^3}$; # Solution equation in LaTeX: $\beta = \frac{E_{corl}^{X} - E_{corl}^{X-1}}{X^{-3} - (X-1)^{-3}}$; [docs]def corl_xtpl_helgaker_2(**largs):; r""""""Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{corl}^X = E_{corl}^{\infty} + \beta X^{-3}. """"""; energypiece = 0.0; functionname = sys._getframe().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 2):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'corl', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'corl', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; zHI = NEED['HI']['f_zeta']; eLO = NEED['LO']['f_energy']; zLO = NEED['LO']['f_zeta']. # Compute extrapolated energy; energypiece = (eHI * zHI ** 3 - eLO * zLO ** 3) / (zHI ** 3 - zLO ** 3); beta = (eHI - eLO) / (zHI ** (-3) - zLO ** (-3)). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); psi4.print_out(cbsscheme). return energypiece. [docs]def scf_xtpl_helgak",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:95301,log,logs,95301,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,2,['log'],['logs']
Testability,"H_SINF¶. For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-dispersion term. Type: boolean; Default: false. DO_IND30_EXCH_SINF¶. For SAPT2+3, compute the non-approximated third-order exchange-induction term. Type: boolean; Default: false. SAPT0-D¶; In SAPT0, the computation of \(E_{disp}^{(20)} + E_{exch-disp}^{(20)}\) represents; the computational bottleneck. One can avoid this bottleneck by replacing these; dispersion terms with the empirical D3 corrections developed by Grimme.; Grimme’s dispersion corrections are discussed here.; The corresponding method, termed SAPT0-D, thus relies on empirically fit parameters; specific to SAPT0/jun-cc-pVDZ. While SAPT0-D can be used with any of the -D; variants using default parameters optimized for Hartee–Fock interaction energies,; we recommend using the refit parameters with Becke-Johnson damping, as described in; [Schriber:2021:234107]. Again, use of SAPT0-D with a basis set other than; jun-cc-pVDZ is not tested and not guaranteed to give meaningful results without; refitting the dispersion parameters.; A simple water dimer computation using SAPT0-D may look like:; molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis jun-cc-pvdz. energy('sapt0-d3mbj') # runs the recommended dispersion correction; energy('sapt0-d3') # tests an alternative damping scheme/parameterization. Given the naturally pairwise-atomic nature of these empirical dispersion corrections,; integration with existing FSAPT functionality is also available simply by calling; energy(""fsapt0-d3mbj""). See FSAPT documentation for more details on using FSAPT; for functional group analyses. table of contents. SAPT: Symmetry-Adapted Perturbation Theory; The S2 approximation and scaling; A First Example; Advanced example; S",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/sapt.html:49085,test,tested,49085,psi4manual/1.7.x/sapt.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/sapt.html,4,['test'],['tested']
Testability,"H_SINF¶. For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-dispersion term. Type: boolean; Default: false. DO_IND30_EXCH_SINF¶. For SAPT2+3, compute the non-approximated third-order exchange-induction term. Type: boolean; Default: false. SAPT0-D¶; In SAPT0, the computation of \(E_{disp}^{(20)} + E_{exch-disp}^{(20)}\) represents; the computational bottleneck. One can avoid this bottleneck by replacing these; dispersion terms with the empirical D3 corrections developed by Grimme.; Grimme’s dispersion corrections are discussed here.; The corresponding method, termed SAPT0-D, thus relies on empirically fit parameters; specific to SAPT0/jun-cc-pVDZ. While SAPT0-D can be used with any of the -D; variants using default parameters optimized for Hartee–Fock interaction energies,; we recommend using the refit parameters with Becke-Johnson damping, as described in; [Schriber:2021:234107]. Again, use of SAPT0-D with a basis set other than; jun-cc-pVDZ is not tested and not guaranteed to give meaningful results without; refitting the dispersion parameters.; A simple water dimer computation using SAPT0-D may look like:; molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis jun-cc-pvdz. energy('sapt0-d3mbj') # runs the recommended dispersion correction; energy('sapt0-d3') # tests an alternative damping scheme/parameterization. Given the naturally pairwise-atomic nature of these empirical dispersion corrections,; integration with existing FSAPT functionality is also available simply by calling; energy(“fsapt0-d3mbj”). See FSAPT <fisapt> documentation for more details on using FSAPT; for functional group analyses. table of contents. SAPT: Symmetry-Adapted Perturbation Theory; The S2 approximation and scaling; A First Example; Advanced e",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/sapt.html:48000,test,tested,48000,psi4manual/1.6.x/sapt.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/sapt.html,1,['test'],['tested']
Testability,"Helgaker 3-point SCF extrapolation for method: %s <==\n\n"""""" % (; functionname.upper()); cbsscheme += """""" LO-zeta (%s) Energy: % 16.12f\n"""""" % (str(zLO), valueLO); cbsscheme += """""" MD-zeta (%s) Energy: % 16.12f\n"""""" % (str(zMD), valueMD); cbsscheme += """""" HI-zeta (%s) Energy: % 16.12f\n"""""" % (str(zHI), valueHI); cbsscheme += """""" Alpha (exponent) Value: % 16.12f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: % 16.12f\n\n"""""" % (beta). name_str = ""%s/(%s,%s,%s)"" % (functionname.upper(), _zeta_val2sym[zLO].upper(), _zeta_val2sym[zMD].upper(),; _zeta_val2sym[zHI].upper()); cbsscheme += """""" @Extrapolated """"""; cbsscheme += name_str + ':'; cbsscheme += "" "" * (18 - len(name_str)); cbsscheme += """"""% 16.12f\n\n"""""" % value; core.print_out(cbsscheme); logger.debug(cbsscheme). return value. elif isinstance(valueLO, np.ndarray):. nonzero_mask = np.abs(valueHI) > 1.e-14; top = (valueHI - valueMD)[nonzero_mask]; bot = (valueMD - valueLO)[nonzero_mask]. ratio = top / bot; alpha = -1 * np.log(np.abs(ratio)); beta = top / (np.exp(-1 * alpha * zMD) * (ratio - 1)); np_value = valueHI.copy(); np_value[nonzero_mask] -= beta * np.exp(-1 * alpha * zHI); np_value[~nonzero_mask] = 0.0. if verbose > 2:; cbsscheme = f""""""\n ==> Helgaker 3-point power SCF extrapolation for method: {functionname.upper()} <==\n""""""; cbsscheme += f""""""\n LO-zeta ({zLO}) Data\n""""""; cbsscheme += nppp(valueLO); cbsscheme += f""""""\n MD-zeta ({zMD}) Data\n""""""; cbsscheme += nppp(valueMD); cbsscheme += f""""""\n HI-zeta ({zHI}) Data\n""""""; cbsscheme += nppp(valueHI). cbsscheme += f""""""\n Alpha Data\n""""""; cbsscheme += nppp(alpha); cbsscheme += f""""""\n Beta Data\n""""""; cbsscheme += nppp(beta); cbsscheme += f""""""\n Extrapolated Data\n""""""; cbsscheme += nppp(np_value); cbsscheme += ""\n""; core.print_out(cbsscheme); logger.debug(cbsscheme). ## Build and set from numpy routines; #value = core.Matrix(*valueHI.shape); #value_view = np.asarray(value); #value_view[:] = np_value; #return value. return np_value. else:; raise ValidationEr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html:16410,log,log,16410,psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html,10,['log'],['log']
Testability,"How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory l",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/build_faq.html:3067,test,testing,3067,psi4manual/master/build_faq.html,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html,4,['test'],"['test', 'testing', 'tests']"
Testability,"I variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) doc/sphinxman and start from scratch.; Even ~10 minutes of build time can be annoying when developing; documentation and testing rst files. In that situation, use the target; below which builds only the written docs (not autodocs) in; psi4/doc/sphinxman/source quickly, though with a lot of warnings for; unresolved links:; >>> make sphinxmini. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. reStructuredText; links example; rendered test document; vs. source test document; Sphinx Docs. Math in the Codebase¶; It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the #! comment comments at the top of test case; input files, the /*- comment -*/ comments in; psi4/psi4/src/read_options.cc, and the r"""""" comment """"""; docstrings in python modules. (That r"""""" makes the string read; literally, so your LaTeX symbols aren’t confused with escape characters.); For the two former, math has traditionally; been written in LaTeX (with the special substitution @@ for; subscripting underscore). The autodoc script has been trained to convert; inline LaTeX math to reST math, provided the expression within dollar; signs is offset from other text. That is, expressions of the form; ^ $latex math$[., ]$ (pseudo-regex) are good, while H$_2$O and LaTeX tables; are not translated correctly. Python docstrings are absorbed as-is, so; please use reST math formatting (essentially $latex math$ \(\Rightarrow\); :math:`latex math`).; Starting around PSI4 1.1, MathJax is used for in-browser LaTeX; rendering in place of offline PNG generation of math images. Check the; online rendering, as occasionally there will be errors even",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/documentation.html:5726,test,test,5726,psi4manual/1.7.x/documentation.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/documentation.html,4,['test'],['test']
Testability,"I vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC)¶DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC)¶DFOCC — Do use regularized denominators?. Type: boolean; Default: false. RELATIVISTIC (GLOBALS)¶GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCT)¶DCT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAXED (OCC)¶OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI)¶DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCT)¶DCT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY)¶CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA)¶CCLAMBDA — Do restart the coupled-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:201115,test,tested,201115,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,5,['test'],['tested']
Testability,"I)})""). if alpha is None:; alpha = 3.40. beta_division = 1 / (zHI**(-1 * alpha) - zLO**(-1 * alpha)); beta_mult = zHI**(-1 * alpha). if isinstance(valueLO, float):; beta = (valueHI - valueLO) * beta_division; value = valueHI - beta * beta_mult. if verbose:; # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> Truhlar 2-point power form SCF extrapolation for method: %s <==\n\n"""""" % (; functionname.upper()); cbsscheme += """""" LO-zeta (%s) Energy: % 16.12f\n"""""" % (str(zLO), valueLO); cbsscheme += """""" HI-zeta (%s) Energy: % 16.12f\n"""""" % (str(zHI), valueHI); cbsscheme += """""" Alpha (exponent) Value: % 16.12f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: % 16.12f\n\n"""""" % (beta). name_str = ""%s/(%s,%s)"" % (functionname.upper(), _zeta_val2sym[zLO].upper(), _zeta_val2sym[zHI].upper()); cbsscheme += """""" @Extrapolated """"""; cbsscheme += name_str + ':'; cbsscheme += "" "" * (18 - len(name_str)); cbsscheme += """"""% 16.12f\n\n"""""" % value; core.print_out(cbsscheme); logger.debug(cbsscheme). return value. elif isinstance(valueLO, np.ndarray):. beta = (valueHI - valueLO) * beta_division; value = valueHI - beta * beta_mult. if verbose > 2:; cbsscheme = f""""""\n ==> Truhlar 2-point power SCF extrapolation for method: {functionname.upper()} <==\n""""""; cbsscheme += f""""""\n LO-zeta ({zLO}) Data\n""""""; cbsscheme += nppp(valueLO); cbsscheme += f""""""\n HI-zeta ({zHI}) Data\n""""""; cbsscheme += nppp(valueHI). cbsscheme += f""""""\n Alpha (exponent) Value: {alpha:16.8f}""""""; cbsscheme += f""""""\n Beta Data\n""""""; cbsscheme += nppp(beta); cbsscheme += f""""""\n Extrapolated Data\n""""""; cbsscheme += nppp(value); cbsscheme += ""\n""; core.print_out(cbsscheme); logger.debug(cbsscheme). return value. else:; raise ValidationError(f""scf_xtpl_truhlar_2: datatype is not recognized '{type(valueLO)}'.""). [docs]; def scf_xtpl_karton_2(functionname: str, zLO: int, valueLO: Extrapolatable, zHI: int, valueHI: Extrapolatable, verbose: int = 1, alpha: Optional[float] = None) -> Extrapolata",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs_helper.html:9065,log,logger,9065,psi4manual/1.8.x/_modules/psi4/driver/driver_cbs_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs_helper.html,6,['log'],['logger']
Testability,"I)})""). if alpha is None:; alpha = 3.40. beta_division = 1 / (zHI**(-1 * alpha) - zLO**(-1 * alpha)); beta_mult = zHI**(-1 * alpha). if isinstance(valueLO, float):; beta = (valueHI - valueLO) * beta_division; value = valueHI - beta * beta_mult. if verbose:; # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> Truhlar 2-point power form SCF extrapolation for method: %s <==\n\n"""""" % (; functionname.upper()); cbsscheme += """""" LO-zeta (%s) Energy: % 16.12f\n"""""" % (str(zLO), valueLO); cbsscheme += """""" HI-zeta (%s) Energy: % 16.12f\n"""""" % (str(zHI), valueHI); cbsscheme += """""" Alpha (exponent) Value: % 16.12f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: % 16.12f\n\n"""""" % (beta). name_str = ""%s/(%s,%s)"" % (functionname.upper(), _zeta_val2sym[zLO].upper(), _zeta_val2sym[zHI].upper()); cbsscheme += """""" @Extrapolated """"""; cbsscheme += name_str + ':'; cbsscheme += "" "" * (18 - len(name_str)); cbsscheme += """"""% 16.12f\n\n"""""" % value; core.print_out(cbsscheme); logger.debug(cbsscheme). return value. elif isinstance(valueLO, np.ndarray):. beta = (valueHI - valueLO) * beta_division; value = valueHI - beta * beta_mult. if verbose > 2:; cbsscheme = f""""""\n ==> Truhlar 2-point power SCF extrapolation for method: {functionname.upper()} <==\n""""""; cbsscheme += f""""""\n LO-zeta ({zLO}) Data\n""""""; cbsscheme += nppp(valueLO); cbsscheme += f""""""\n HI-zeta ({zHI}) Data\n""""""; cbsscheme += nppp(valueHI). cbsscheme += f""""""\n Alpha (exponent) Value: {alpha:16.8f}""""""; cbsscheme += f""""""\n Beta Data\n""""""; cbsscheme += nppp(beta); cbsscheme += f""""""\n Extrapolated Data\n""""""; cbsscheme += nppp(value); cbsscheme += ""\n""; core.print_out(cbsscheme); logger.debug(cbsscheme). return value. else:; raise ValidationError(f""scf_xtpl_truhlar_2: datatype is not recognized '{type(valueLO)}'.""). [docs]def scf_xtpl_karton_2(functionname: str, zLO: int, valueLO: Extrapolatable, zHI: int, valueHI: Extrapolatable, verbose: int = 1, alpha: Optional[float] = None) -> Extrapolatabl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html:9015,log,logger,9015,psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html,4,['log'],['logger']
Testability,"I4; Programmers FAQ. Programmers FAQ¶. C++ Style in PSI4¶. Prefer nullptr to 0 or NULL; Prefer std::make_shared to direct use of new; Prefer auto to explicit type declarations; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually. Modules in PSI4¶. How to name keywords in psi4/src/read_options.cc; How to call BLAS & LAPACK in ; How to use low-level BLAS/LAPACK with psi4.core.Matrix; How to name orbital bases (e.g., AO & SO); How to name orbital dimensions; How to name orbital spaces (e.g., docc). Interfacing with PSI4¶. How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs. Versioning PSI4¶. How to bump a version; How to create and remove an annotated Git tag on a remote; What is the suggested GitHub workflow; What Psi4 version is running. Releasing PSI4¶. Annual; Pre-Release (e.g., v1.3rc1); Release (e.g., v1.3); Post-Release (e.g., v1.3.1). Workflow¶. How to use a local Add-On repository in the Psi4 build; What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi; How to use gdb and lldb with Psi4; How to locate non-ascii characters in the codebase; How to Ignore the Bots. Miscellaneous¶. Test Suite; Adding PSIthon Test Cases; Adding PsiAPI Test Cases; How to set up PSIthon tests to run through pytest; How to find tests without output.ref; How to do GitHub issue management and code review. table of contents. Programmers FAQ; C++ Style in PSI4; Modules in PSI4; Interfacing with PSI4; Versioning PSI4; Releasing PSI4; Workflow; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Adding New Code to PSI4; Programmers FAQ. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/prog_faq.html:1568,test,tests,1568,psi4manual/1.8.x/prog_faq.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/prog_faq.html,2,['test'],['tests']
Testability,"I4; Programmers FAQ. Programmers FAQ¶. C++ Style in PSI4¶. Prefer nullptr to 0 or NULL; Prefer std::make_shared to direct use of new; Prefer auto to explicit type declarations; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually. Modules in PSI4¶. How to name keywords in psi4/src/read_options.cc; How to call BLAS & LAPACK in ; How to use low-level BLAS/LAPACK with psi4.core.Matrix; How to name orbital bases (e.g., AO & SO); How to name orbital dimensions; How to name orbital spaces (e.g., docc). Interfacing with PSI4¶. How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs. Versioning PSI4¶. How to bump a version; How to create and remove an annotated Git tag on a remote; What is the suggested GitHub workflow; What Psi4 version is running. Releasing PSI4¶. Annual; Pre-Release (e.g., v1.3rc1); Release (e.g., v1.3); Post-Release (e.g., v1.8.2). Workflow¶. How to use a local Add-On repository in the Psi4 build; What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi; How to use gdb and lldb with Psi4; How to locate non-ascii characters in the codebase; How to Ignore the Bots. Miscellaneous¶. Test Suite; Adding PSIthon Test Cases; Adding PsiAPI Test Cases; How to set up PSIthon tests to run through pytest; How to find tests without output.ref; How to do GitHub issue management and code review. table of contents. Programmers FAQ; C++ Style in PSI4; Modules in PSI4; Interfacing with PSI4; Versioning PSI4; Releasing PSI4; Workflow; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Adding New Code to PSI4; Programmers FAQ. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/prog_faq.html:1568,test,tests,1568,psi4manual/1.9.x/prog_faq.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/prog_faq.html,2,['test'],['tests']
Testability,"I:%M%p'))); if start_time is not None:; run_time = end_time - start_time; run_time = str(run_time).split('.'); # python ""helpfully"" truncates microseconds if zero. Undo that.; if len(run_time) == 1: run_time.append(""000000""); run_time = run_time[0] + '.' + run_time[1][:2]; core.print_out(""\n Psi4 wall time for execution: {}\n"".format(run_time)). if success is None:; success = _success_flag_. if success:; core.print_out(""\n*** Psi4 exiting successfully. Buy a developer a beer!\n""); else:; core.print_out(""\n*** Psi4 encountered an error. Buy a developer more coffee!\n""); core.print_out(""*** Resources and help at github.com/psi4/psi4.\n""). _success_flag_ = False. # Working directory; _input_dir_ = os.getcwd(). def get_input_directory():; return _input_dir_. # Add-Ons; def _CMake_to_Py_boolean(cmakevar):; if cmakevar.upper() in [""1"", ""ON"", ""YES"", ""TRUE"", ""Y""]:; return True; else:; return False. def psi4_which(command, *, return_bool: bool = False, raise_error: bool = False,; raise_msg: str = None) -> Union[bool, None, str]:; """"""Test to see if a command is available in Psi4 search path. Returns; -------; str or None; By default, returns command path if command found or `None` if not.; Environment is $PSIPATH:$PATH, less any None values.; bool; When `return_bool=True`, returns whether or not found. Raises; ------; ModuleNotFoundError; When `raises_error=True` and command not found. """"""; lenv = (os.pathsep.join([os.path.abspath(x) for x in os.environ.get('PSIPATH', '').split(os.pathsep) if x != '']) +; os.pathsep + os.environ.get('PATH', '')). return which(command=command, return_bool=return_bool, raise_error=raise_error, raise_msg=raise_msg, env=lenv). _addons_ = {; ""adcc"": which_import(""adcc"", return_bool=True),; ""ambit"": _CMake_to_Py_boolean(""OFF""),; ""chemps2"": _CMake_to_Py_boolean(""OFF""),; ""dkh"": _CMake_to_Py_boolean(""OFF""),; ""ecpint"": _CMake_to_Py_boolean(""OFF""),; ""libefp"": which_import(""pylibefp"", return_bool=True),; ""gdma"": which_import(""gdma"", return_bool=True), # p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/_modules/psi4/extras.html:3269,Test,Test,3269,psi4manual/master/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/master/_modules/psi4/extras.html,1,['Test'],['Test']
Testability,"IIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. cc12; Single point energies of multiple excited states with EOM-CCSD. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. mp2-1; All-electron MP2 6-31G** geometry optimization of water. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:32059,test,test,32059,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"INT, READ, and WRITE will usually; be the last words in an option name.; Use FOLLOW_ROOT for the state to be followed in geometry optimizations; WFN (not wavefunction); You’re welcome to use WFN and DERTYPE as internal options, but; plan to have these set by the python driver and mark them as !expert; options. Really avoid using JOBTYPE.; You’re not welcome to add CHARGE or MULTP options. Plan to get; these quantities from the molecule object. Since we frequently use subsets; of systems (with their own charge and multiplicity), this is safer.; Conform. Just grep 'add' psi4/src/read_options.cc to get a list of; all the option names in PSI4 and try to match any conventions you; find.; If you have a quantity you’d like to call a cutoff, a threshold, a; tolerance, or a convergence, consider the following guidelines in naming; it.; If its value is typically greater than ~0.001, give it a name with CUTOFF.; If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with larger values (e.g.,; integrals, occupations, eigenvectors), give it a name with TOLERANCE.; If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with smaller values (e.g., energy; changes, residual errors, gradients), give it a name with; CONVERGENCE. In deciding how to arrange words in an option name, place the context; first (e.g., MP2_AMPS_PRINT, TRIPLES_DIIS). This means PRINT; will generally be at the end of an option name.; Use INTS_TOLERANCE (not schwarz_cutoff); H in an option name is reserved for Hamiltonian (or hydrogen).; Hessian should be HESS.; All option names should be all caps and separated by underscores.; If you have an option that instructs your module to do something not too; computationally intensive and then quit, append _EXIT to the option; name.; Scaling terms (like for scs) should follow the pattern MP2_SS_SCALE; and SAPT_OS_SCALE.; FRAG for fragment.; AVG for average.; For le",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/manage_addon-1.html:8641,test,tested,8641,psi4manual/1.2.1/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/manage_addon-1.html,4,['test'],['tested']
Testability,"INTS — Primary basis set. Available basis sets. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT)¶SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF)¶SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF)¶SCF — Accelerate convergence by performing a preliminary SCF with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the Defaults small basis set 3-21G, pcseg-0, or def2-SV(P). Type: string; Default: FALSE. BASIS_RELATIVISTIC (GLOBALS)¶GLOBALS — Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. BCCD_MAXITER (CCENERGY)¶CCENERGY — Maximum number of iterations for Brueckner CCD. Type: integer; Default: 50. BENCH (GLOBALS)¶GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI)¶DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BORDER (PE)¶PE — Activate border options for sites in proximity to the QM/MM border. Type: boolean; Default: false. BORDER_N_REDIST (PE)¶PE — number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER (PE)¶PE — order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_REDIST_POL (PE)¶PE — redistribute polarizabilities? If false, polarizabilities are removed ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:6053,benchmark,benchmarking,6053,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,9,['benchmark'],['benchmarking']
Testability,"IPLES_LOW_MEMORY¶. Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. Expert¶. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. USE_DF_INTS¶. Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. table of contents. FNOCC; General; ACTIVE_NAT_ORBS; BRUECKNER_MAXITER; CC_SCALE_OS; CC_SCALE_SS; CC_TIMINGS; CEPA_NO_SINGLES; CHOLESKY_TOLERANCE; DFCC; DF_BASIS_CC; DIIS_MAX_VECS; DIPMOM; E_CONVERGENCE; MAXITER; MP2_SCALE_OS; MP2_SCALE_SS; NAT_ORBS; OCC_PERCENTAGE; OCC_TOLERANCE; R_CONVERGENCE; SCS_CCSD; SCS_CEPA; SCS_MP2; TRIPLES_LOW_MEMORY. Expert; CEPA_LEVEL; COMPUTE_MP4_TRIPLES; COMPUTE_TRIPLES; RUN_CCSD; RUN_CEPA; RUN_MP2; RUN_MP3; RUN_MP4; USE_DF_INTS. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices; Keywords by Module. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__fnocc-1.html:4381,test,testing,4381,psi4manual/1.3.2/autodir_options_c/module__fnocc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__fnocc-1.html,2,['test'],['testing']
Testability,"IR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories (disabled at the moment); PSI Files: scratch file names and numbers in psi4/include/psifiles.h. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py; BasisFamily: fitting basis sets for each orbital basis as encoded in psi4/lib/python/basislistdunning.py and psi4/lib/python/basislistother.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, ru",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/documentation-1.html:2667,test,tests,2667,psi4manual/4.0b4/documentation-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/documentation-1.html,2,['test'],['tests']
Testability,"IR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories (disabled at the moment); PSI Files: scratch file names and numbers in psi4/include/psifiles.h. Some documentation is even extracted from Psi4 objects at runtime. psi4: docstrings for the psi4 built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py; BasisFamily: fitting basis sets for each orbital basis as encoded in psi4/lib/python/basislistdunning.py and psi4/lib/python/basislistother.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, run ma",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/documentation-1.html:2667,test,tests,2667,psi4manual/4.0b5/documentation-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/documentation-1.html,2,['test'],['tests']
Testability,"Initialize skeleton wfn to receive grad for reap; if freq_mode == 'sow':; optstash.restore(); optstash_conv.restore(); if return_wfn:; return (None, None); else:; return None; elif freq_mode == 'reap':; wfn = core.Wavefunction.build(molecule, core.get_global_option('BASIS')). # Assemble Hessian from gradients; # Final disp is undisp, so wfn has mol, G, H general to freq calc; H = core.fd_freq_1(molecule, gradients, irrep) # TODO or moleculeclone?; wfn.set_hessian(H); wfn.set_gradient(G0); wfn.set_frequencies(core.get_frequencies()). # The last item in the list is the reference energy, return it; core.set_variable('CURRENT ENERGY', energies[-1]). core.set_parent_symmetry(''); optstash.restore(); optstash_conv.restore(). _hessian_write(wfn). if return_wfn:; return (wfn.hessian(), wfn); else:; return wfn.hessian(). else:; core.print_out(""""""hessian() will perform frequency computation by finite difference of analytic energies.\n""""""). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash.restore(); optstash_conv.restore(); optstash_conv = driver_util._set_convergence_criterion('energy', lowername, 10, 11, 10, 11, 10). # Shifting the geometry so need to copy the active molecule; moleculeclone = molecule.clone(). # Obtain list of displacements; displacements = core.fd_geoms_freq_0(moleculeclone, irrep); moleculeclone.fix_orientation(True); moleculeclone.reinterpret_coordentry(False). # Record undisplaced symmetry for projection of diplaced point groups; core.set_parent_symmetry(molecule.schoenflies_symbol()). ndisp = len(displacements). # This version is pretty dependent on the reference geometry being last (as it is now); print(' %d displacements needed.' % ndisp); energies = []. # S/R: Write instructions for sow/reap procedure to output file and reap input file; if freq_mode == 'sow':; instructionsO = """"""\n# The frequency sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html:78025,test,test,78025,psi4manual/1.2.1/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver.html,1,['test'],['test']
Testability,"Internal-coordinate constraints in internal-coordinate optimizations. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. dft-reference; MP2 with a PBE0 reference computation. dft-custom; DFT custom functional test. dct10; The multiple guesses for DCT amplitudes for ODC-12. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mbis-4; MBIS calculation on NaCl. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. fsapt-ext-abc; FSAPT with external charge on trimer. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. stability3; Test LDA stability analysis against QChem. scf-level-shift-cuhf; SCF level shift on a CUHF computation. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. isapt1; This test case shows an",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:40856,test,test,40856,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"K(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DSYSV(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DTBMV(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DTBSV(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DTRMM(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DTRMV(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DTRSM(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DTRSV(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. IDAMAX(arg0, arg1, arg2, arg3); docstring. adc(ref_wfn); Runs the ADC propagator code, for excited states. array_variable(key); Returns copy of the Matrix QCVariable key (case-insensitive); prefer variable(). array_variables(); Returns dictionary of all Matrix QCVariables; prefer variables(). be_quiet(); Redirects output to /dev/null. benchmark_blas1(max_dim, min_time); Perform benchmark traverse of BLAS 1 routines. benchmark_blas2(max_dim, min_time); Perform benchmark traverse of BLAS 2 routines. benchmark_blas3(max_dim, min_time, nthread); Perform benchmark traverse of BLAS 3 routines. benchmark_disk(max_dim, min_time); Perform benchmark of PSIO disk performance. benchmark_integrals(max_am, min_time); Perform benchmark of psi integrals (of libmints type). benchmark_math(min_time); Perform benchmark of common double floating point operations including most of cmath. ccdensity(ref_wfn); Runs the code to compute coupled cluster density matrices. ccenergy(ref_wfn); Runs the coupled cluster energy code. cceom(ref_wfn); Runs the equation of motion coupled cluster code for excited states. cchbar(ref_wfn); Runs the code to generate the similarity transformed Hamiltonian. cclambda(ref_wfn); Runs the coupled cluster lambda equations code. ccresponse(ref_wfn); Runs the coupled cluster response theory code. cctransort(ref_wfn); Runs cctransort that transforms and reorders integrals for use in the coupled cluster codes. cctriples(ref_wfn); Runs the coupled cluster (T) energy code. clean(); Remove scratch files. clean_options(); Reset",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/psi4api-1.html:2691,benchmark,benchmark,2691,psi4manual/1.4.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/psi4api-1.html,2,['benchmark'],['benchmark']
Testability,"KFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. sapt-sf1; Tests the Psi4 SF-SAPT code. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. scf-guess-read2; Test if the the guess read in the same basis converges. cc13d; Tests analytic CC2 gradients. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. mp2-h; check that methods can act on single atom. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. fnocc3; Test FNO-QCISD(T) computation. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. pubchem2; Superficial test of PubChem interface. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:4976,test,test,4976,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"L_POINTS option, which is any positive; integer (typically 50-100). The radial grids are “centered” on the Bragg-Slater; radius of each atom, as described in Becke’s 1988 paper. If inaccurate; integration is suspected in systems with anions or very diffuse basis functions,; the DFT_BS_RADIUS_ALPHA option may be increased from 1.0 to a larger value to force the radial grid to span a larger extent in space.; The atomic weighting scheme is controlled by the DFT_NUCLEAR_SCHEME; option, which may be one of TREUTLER, BECKE, STRATMANN, NAIVE,; or SBECKE. The last is a smoother variant of the BECKE scheme recently introduced; by Laqua [Laqua:2018:204111] that should behave better for weak interactions.; Pruning of the quadrature grid is controlled by the DFT_PRUNING_SCHEME; option. The options ROBUST and TREUTLER divide the grid into spherical regions; based on the Bragg-Slater radius of each atom and apply different orders to them.; The ROBUST scheme is a less aggressive variant of the TREUTLER approach and; suitable for benchmark-level quality (MAD < 0.002 kcal/mol for the S22 with PBE/aug-cc-pVTZ; for pruned versus unpruned grid). Our implementation of the TREUTLER scheme shows an; error of 0.02 kcal/mol for the same benchmark. Both also reduce the grid order by 1 for H; and He atoms and avoid any pruning of heavy atoms (Z >= 36) Other schemes mentioned in; the keyword documentation (e.g. P_SLATER) are experimental and should be considered expert-only.; Once the molecular quadrature grid is built, the points are partitioned into; blocks of points which are spatially close to each other. We use an octree; algorithm for this procedure, which produces a good balance between spatial; compactness of each block (which helps achieve linear scaling due to the; exponential decay of the basis functions), and retaining a large number of; points in each block (which helps keep the FLOP rate up by allowing for a; reasonably large amount of BLAS3/BLAS2 work to form the densities and po",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/dft-1.html:21334,benchmark,benchmark-level,21334,psi4manual/1.4.0/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dft-1.html,9,['benchmark'],['benchmark-level']
Testability,"Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. b",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_available_databases.html:6104,benchmark,benchmark,6104,psi4manual/1.7.x/autodoc_available_databases.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_available_databases.html,2,['benchmark'],['benchmark']
Testability,"List, np.ndarray],; label: str = None,; *,; atol: float = 1.0e-6,; rtol: float = 1.0e-16,; equal_nan: bool = False,; equal_phase: bool = False,; passnone: bool = False,; quiet: bool = False,; return_message: bool = False,; return_handler: Callable = None,; ) -> Union[bool, Tuple[bool, str]]:; r""""""Returns True if two floats or float arrays are element-wise equal within a tolerance. Parameters; ----------; expected; float or float array-like; Reference value against which `computed` is compared.; computed; float or float array-like; Input value to compare against `expected`.; atol; Absolute tolerance (see formula below).; label; Label for passed and error messages. Defaults to calling function name.; rtol; Relative tolerance (see formula below). By default set to zero so `atol` dominates.; equal_nan; Passed to np.isclose. Compare NaN's as equal.; equal_phase; Compare computed *or its opposite* as equal.; passnone; Return True when both expected and computed are None.; quiet; Whether to log the return message.; return_message; Whether to return tuple. See below. Returns; -------; allclose : bool; Returns True if `expected` and `computed` are equal within tolerance; False otherwise.; message : str; When return_message=True, also return passed or error message. Other Parameters; ----------------; return_handler; Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Notes; -----; * Akin to np.allclose.; * For scalar float-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; float-comparable types. For mixed types, use :py:func:`compare_recursive`.; * Sets rtol to zero to match expected Psi4 behaviour, otherwise measured as:. .. code-block:: python. absolute(computed - expected) <= (atol + rtol * absolute(expected)). """"""; label = label or sys._getframe().f_back.f_code.co_name; pass_message = f""\t{label:.<66}PASSED""; if return_handler is None:; return_handler = _handle_return. if",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html:1970,log,log,1970,psi4manual/1.6.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html,2,['log'],['log']
Testability,"M); CCEOM — Do ?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TAU_SQUARED (DCFT); DCFT — Controls whether to compute the DCFT energy with the Tau^2 correction to Tau. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDM_PRINT (DETCI); DETCI — Do print the transition density?. Type: boolean; Default: false. TDM_WRITE (DETCI); DETCI — Do write the transition density?. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF); SCF (Expert) — The tile size for the distributed matrices. Type: integer; Default: 512. TPDM (DCFT); DCFT — Controls whether to compute unrelaxed two-particle density matrix at the end of the energy computation. Type: boolean; Default: false. TPDM (DETCI); DETCI — Do compute two-particle density matrix if not otherw",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html:96440,test,test,96440,psi4manual/4.0b2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html,2,['test'],['test']
Testability,"M; package, do the below. The channel/subchannel(s) containing the am8; metapackage and the high-AM libint package must be supplied (or in; .condarc).; 1conda install am8 -c psi4. To go back to the default libint package, do the below. The; channel/subchannel containing the default libint package must be supplied; (or in .condarc); otherwise, it’ll just remove libint and every package; depending on libint.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:. ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ LICENSE psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - PYTHON_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python2.7)""; # - PYTHON_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python2.7.so)""; # - PYTHON_INCLUDE_DIR ""Path to the python include files (e.g., /pat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:8151,test,tests,8151,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,2,['test'],['tests']
Testability,"METERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. cbs-xtpl-func; optimization with method defined via cbs. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. mints-helper; A general test of the MintsHelper function. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. scf7; Tests SCF gradient in the presence of a dipole field. cc13c; Tests RHF CCSD(T)gradients. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. scf3; File retention, docc, socc, and bond distances specified explicitly. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite lin",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:25459,test,test,25459,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"METRY_NUMBER¶. Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. Examples¶; A thermochemical analysis is performed after any full (not just specific; symmetry subgroups). If the wavefunction is retained, it may be reused; at a different temperature, pressure, rotational symmetry number, or; isotopic substitution through the function psi4.driver.qcdb.vib.thermo(); as is shown in freq-isotope2.; A few summary psivars are set: “ZPVE”, “THERMAL ENERGY CORRECTION”,; “ENTHALPY CORRECTION”, “GIBBS FREE ENERGY CORRECTION”, “ZERO K; ENTHALPHY”, “THERMAL ENERGY”, “ENTHALPY”, “GIBBS FREE ENERGY”.; But additionally, every valid combination of {S, Cv, Cp, ZPE, E, H, G}; with {elec, trans, rot, vib, corr, tot} (e.g., vibrational entropy,; S_vib, and enthalpy correction, H_corr) is returned by dictionary; from the thermo function. See psi4/tests/pytests/test_vibanalysis.py; (near the end) for an example. Output¶; The full list of keywords for thermo is provided in Appendix THERMO.; Information on the Psithon function that drives frequency analyses is provided; at frequency(). table of contents. Vibrational and Thermochemical Analysis; Keywords; T; P; ROTATIONAL_SYMMETRY_NUMBER. Examples; Output. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Theoretical Methods: SCF to FCI; Vibrational and Thermochemical Analysis. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/thermo.html:2985,test,tests,2985,psi4manual/master/thermo.html,https://psicode.org,https://psicode.org/psi4manual/master/thermo.html,1,['test'],['tests']
Testability,"MO.; frac_diis (Optional[bool]) – Do use DIIS for non-1.0-occupied points?; neutral_guess (Optional[bool]) – Do use neutral orbitals as guess for the anion?; hf_guess (Optional[bool]) – Do use UHF guess before UKS?; continuous_guess (Optional[bool]) – Do carry along guess rather than reguessing at each occupation?; filename (Optional[str]) – Result filename, if not name of molecule. Returns:; Dictionary associating SCF energies with occupations. Return type:; Dict[float, float]. psi4.driver.frac.frac_nuke(name, **kwargs)[source]¶; Pull all the electrons out, one at a time. Return type:; Dict[float, float]. Parameters:; name (Union[str, Callable]) – . psi4.set_output_file(ofile, append=False, *, loglevel=20, execute=True)[source]¶; Set the name for output and logging files. Parameters:. ofile (str) – Name of ASCII output file including extension. The logging file is set from this string with a .log extension.; append (bool) – Do append to the output and logging files rather than (the default) truncating them?; loglevel (int) – The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute (bool) – Do set ofile via psi4.core.set_output_file() and add the logger, rather than just returning ofile path. Returns:; Path(ofile). Return type:; Path. Notes; This psi4.set_output_file() command calls psi4.core.set_output_file() and should be used in; preference to it as this additionally sets up logging. pydantic model psi4.driver.task_base.BaseComputer[source]¶; Base class for “computers” that plan, run, and process QC tasks. Show JSON schema{; ""title"": ""BaseComputer"",; ""description"": ""Base class for \""computers\"" that plan, run, and process QC tasks."",; ""type"": ""object"",; ""properties"": {}; }. abstract compute()[source]¶. abstract plan()[source]¶. psi4.driver.task_planner.TaskComputers¶; alias of Union[AtomicComputer, CompositeComputer, FiniteDifferenceComputer, ManyBodyComputer]. psi4.driver.driver_nbody.SubTaskComputers¶; alias of Unio",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/external_apis.html:5715,log,logging,5715,psi4manual/1.7.x/external_apis.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/external_apis.html,3,['log'],"['log', 'logging', 'loglevel']"
Testability,"MP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:25424,test,test,25424,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-meta; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:25079,test,test,25079,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-meta; meta-GGA gradients of water and ssh molecules. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-3",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:26048,test,test,26048,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"Moment. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfremp-1; density fitted REMP/cc-pVDZ energies for the CO2 molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. aediis-2; EDIIS test case from 10.1063/1.1470195. scf-response3; UHF Dipole Polarizability Test. mom-h2o-3; MOM excitation from LUMO HOMO+3. extern3; External potential calculation with one Ghost atom and one point charge at the same position. pywrap-cbs1; Various basis set extrapolation tests. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. numpy-array-interface; Numpy interface testing. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. mom-h2o-4; MOM excitation from LUMO HOMO+4. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cbs-xtpl-dict; Extrapolated wat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:35024,test,tests,35024,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"N frequencies, compared to finite difference values. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. dft-reference; MP2 with a PBE0 reference computation. dft-custom; DFT custom functional test. dct10; The multiple guesses for DCT amplitudes for ODC-12. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mbis-4; MBIS calculation on NaCl. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. fsapt-ext-abc; FSAPT with external charge on trimer. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. stability3; Test LDA stability analysis against QChem. scf-level-shift-cuhf; SCF level shift on a CUHF computation. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:40987,test,test,40987,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"N radical, with Z-matrix input. dfremp-1; density fitted REMP/cc-pVDZ energies for the CO2 molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. aediis-2; EDIIS test case from 10.1063/1.1470195. scf-response3; UHF Dipole Polarizability Test. mom-h2o-3; MOM excitation from LUMO HOMO+3. extern3; External potential calculation with one Ghost atom and one point charge at the same position. pywrap-cbs1; Various basis set extrapolation tests. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. numpy-array-interface; Numpy interface testing. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. mom-h2o-4; MOM excitation from LUMO HOMO+4. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cbs-xtpl-dict; Extrapolated water energies. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. linK-2; RKS ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:35250,test,testing,35250,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['testing']
Testability,"NAL_SYMMETRY_NUMBER¶. Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. Examples¶; A thermochemical analysis is performed after any full (not just specific; symmetry subgroups). If the wavefunction is retained, it may be reused; at a different temperature, pressure, rotational symmetry number, or; isotopic substitution through the function psi4.driver.qcdb.vib.thermo(); as is shown in freq-isotope2.; A few summary psivars are set: “ZPVE”, “THERMAL ENERGY CORRECTION”,; “ENTHALPY CORRECTION”, “GIBBS FREE ENERGY CORRECTION”, “ZERO K; ENTHALPHY”, “THERMAL ENERGY”, “ENTHALPY”, “GIBBS FREE ENERGY”.; But additionally, every valid combination of {S, Cv, Cp, ZPE, E, H, G}; with {elec, trans, rot, vib, corr, tot} (e.g., vibrational entropy,; S_vib, and enthalpy correction, H_corr) is returned by dictionary; from the thermo function. See psi4/tests/pytests/test_vibanalysis.py; (near the end) for an example. Output¶; The full list of keywords for thermo is provided in Appendix THERMO.; Information on the Psithon function that drives frequency analyses is provided; at frequency(). table of contents. Vibrational and Thermochemical Analysis; Keywords; T; P; ROTATIONAL_SYMMETRY_NUMBER. Examples; Output. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Theoretical Methods: SCF to FCI; Vibrational and Thermochemical Analysis. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/thermo.html:2978,test,tests,2978,psi4manual/1.8.x/thermo.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/thermo.html,1,['test'],['tests']
Testability,"NAL_SYMMETRY_NUMBER¶. Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. Examples¶; A thermochemical analysis is performed after any full (not just specific; symmetry subgroups). If the wavefunction is retained, it may be reused; at a different temperature, pressure, rotational symmetry number, or; isotopic substitution through the function psi4.driver.qcdb.vib.thermo(); as is shown in freq-isotope2.; A few summary psivars are set: “ZPVE”, “THERMAL ENERGY CORRECTION”,; “ENTHALPY CORRECTION”, “GIBBS FREE ENERGY CORRECTION”, “ZERO K; ENTHALPHY”, “THERMAL ENERGY”, “ENTHALPY”, “GIBBS FREE ENERGY”.; But additionally, every valid combination of {S, Cv, Cp, ZPE, E, H, G}; with {elec, trans, rot, vib, corr, tot} (e.g., vibrational entropy,; S_vib, and enthalpy correction, H_corr) is returned by dictionary; from the thermo function. See psi4/tests/pytests/test_vibanalysis.py; (near the end) for an example. Output¶; The full list of keywords for thermo is provided in Appendix THERMO.; Information on the Psithon function that drives frequency analyses is provided; at frequency(). table of contents. Vibrational and Thermochemical Analysis; Keywords; T; P; ROTATIONAL_SYMMETRY_NUMBER. Examples; Output. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Theoretical Methods: SCF to FCI; Vibrational and Thermochemical Analysis. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/thermo.html:2978,test,tests,2978,psi4manual/1.9.x/thermo.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/thermo.html,1,['test'],['tests']
Testability,"NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'NBC100' Burns et al. JCP 134 084107 (2011).; \(\Rightarrow\) 'NBC10A' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. HTR40¶. Database of Hydrogen transfer reactions.; Geometries from Bozkaya and Sherrill.; Reference energies from Bozkaya and Sherrill. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm (broken link). cp 'off'; rlxd 'off'; subset. 'small'; 'large'. O24by5¶. Database (O24) of interaction energies for small open-shell high-spin bimolecular complexes.; Geometries taken from https://gitlab.com/piotr.zuchowski/o24x5/-/tree/4ec3cae0546b6ae4f4f2cf28482cd164c8",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html:6637,benchmark,benchmark,6637,psi4manual/1.4.0/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html,4,['benchmark'],['benchmark']
Testability,"NH molecule. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). nbody-multi-level-2; many-body different levels of theory on each body of helium tetramer. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. fci-h2o-2; 6-31G H2O Test FCI Energy Point. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. nbody-he-4b; MP2/aug-cc-pvDZ many body energies of an arbitrary Helium complex, addressing 4-body formulas. sapt10; usapt example with empty beta due to frozen core. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. omp2-3; OMP2 cc-pVDZ energy for the NO radical. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). opt1-fd; SCF STO-3G geometry optimzation, wi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:7279,test,test,7279,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dft-grac; Gradient regularized asymptotic correction (GRAC) test. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:44738,test,test,44738,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],"['test', 'tested']"
Testability,"No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html:5858,benchmark,benchmarking,5858,psi4manual/4.0b5/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_glossary_options_c-1.html,2,['benchmark'],['benchmarking']
Testability,"No Default. B_RAS3_MAX (DETCI); DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2); DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS); MINTS — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY); CCENERGY — Cacheing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:5585,benchmark,benchmarking,5585,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['benchmark'],['benchmarking']
Testability,"None, relpath=False, graphicsformat=['pdf']):; """"""Computes individual errors and summary statistics for single; model chemistry *modelchem* versus *benchmark* over; subset *sset* over all component databases. Thread *color* can be; 'rgb' for old coloring, a color name or 'sapt' for spectrum coloring. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. asdf.plot_flat('CCSD-CP-atqzadz', failoninc=False); """"""; # compute errors; mc = modelchem; errors, indiv = self.compute_statistics(mc, benchmark=benchmark, sset=sset,; failoninc=failoninc, verbose=verbose, returnindiv=True); # repackage; dbdat = []; for db, odb in self.dbdict.items():; if indiv[db] is not None:; for rxn in indiv[db].keys():; dbdat.append({'db': db,; 'sys': str(rxn),; 'color': odb.hrxn[rxn].color,; 'data': [indiv[db][rxn][0]]}); pre, suf, mid = string_contrast(mc); title = self.dbse + '-' + sset + ' ' + pre + '[]' + suf; mae = errors[self.dbse]['mae']; mape = None; # mape = 100 * errors[self.dbse]['mape']; mapbe = None; # generate matplotlib instructions and call or print; try:; from . import mpl; import matplotlib.pyplot as plt; except ImportError:; # if not running from Canopy, print line to execute from Canopy; print(""""""filedict = mpl.flat(%s,\n color='%s',\n title='%s',\n mae=%s,\n mape=%s,\n xlimit=%s,\n xlines=%s,\n view=%s\n saveas=%s\n relpath=%s\n graphicsformat=%s)\n\n"""""" %; (dbdat, color, mc, mae, mape, xlimit, repr(xlines), view, repr(saveas), repr(relpath), repr(graphicsformat))); else:; # if running from Canopy, call mpl directly; filedict = m",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:68565,benchmark,benchmark,68565,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,2,['benchmark'],['benchmark']
Testability,"O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). nbody-hessian; Computation of VMFC-corrected HF dimer Hessian. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. opt11; Transition-state optimizations of HOOH to both torsional transition states. dft-dsd; DSD S22 Ammonia test. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dft2; DFT Functional Test. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. aediis-1; ADIIS test case, from 10.1063/1.3304922. mints-benchmark; run some BLAS benchmarks. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. sapt-exch-ind30-inf; SAPT2+3 with S^inf exch-ind30 Geometries taken from the S66x10 database, the shortest-range point (R = 0.7 R_e). frac-sym; Fractional occupation with symmetry. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. options1; check all variety of options parsing. dfccsd1; DF-CC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:21032,test,test,21032,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"O molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. fcidump; test FCIDUMP functionality for rhf/uhf. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:47103,test,test,47103,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (b",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:7720,test,tested,7720,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['test'],['tested']
Testability,"O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O mo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/testsuite-1.html:7134,test,tested,7134,psi4manual/1.1.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/testsuite-1.html,4,['test'],['tested']
Testability,"O molecule. pywrap-cbs1; Various basis set extrapolation tests. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dct10; The multiple guesses for DCT amplitudes for ODC-12. mom-h2o-3; MOM excitation from LUMO HOMO+3. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. nbo; Generation of NBO file. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. mbis-5; MBIS calculation on ZnO. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. fd-gradient; SCF STO-3G finite-difference tests. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf3; Fil",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:37308,test,test,37308,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"O with EOM-CCSD. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. mp2-h; check that methods can act on single atom. linK-2; RKS Linear Exchange Algorithm test for benzene. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. fsapt-ext-abc2; FSAPT with external charge on dimer. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. dft-jk; DFT JK on-disk test. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. cc13b; Tests RHF CCSD(T)gradients. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. omp2-3; OMP2 cc-pVDZ energy for the NO radical. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver aut",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:29218,test,test,29218,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** ener",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:41172,test,test,41172,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"O. cc13d; Tests analytic CC2 gradients. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. scf-level-shift-uhf; SCF level shift on a UHF computation. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. omp2-3; OMP2 cc-pVDZ energy for the NO radical. isapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cepa1; cc-pvdz H2O Test CEPA(1) Energy. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:46728,test,test,46728,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega= (589 355 nm). nbo; Generation of NBO file. cc54; CCSD dipole with user-specified basis set. scf-guess-read3; Test if the the guess read in the same basis converges. scf-upcast-custom-basis; test scf castup with custom basis sets. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. fci-dipole; 6-31G H2O Test FCI Energy Point. mints6; Patch of a glycine with a methyl ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:22040,test,test,22040,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"OLCCD cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. mbis-6; MBIS calculation on H2O. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cbs-parser; mtd/basis syntax examples. scf-occ; force occupations in scf. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. mints9",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:28668,test,test,28668,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"OMP2.5 cc-pVDZ energy for the H2O+ cation. scf-level-shift-cuhf; SCF level shift on a CUHF computation. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. rasci-h2o; RASCI/6-31G** H2O Energy Point. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mbis-3; MBIS calculation on OH radical. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. fnocc4; Test FNO-DF-CCSD(T) energy. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:44478,test,test,44478,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"OMP3 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). sad-scf-type; Test SAD SCF guesses on noble gas atom. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. props4; Electrostatic potential and electric field evaluated on a grid around water. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. mbis-6; MBIS c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:25968,test,test,25968,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"ONLN`. If you have pytest installed, very similar coverage is obtained through:; >>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 5 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. Pytest has similar commands; * Run tests in parallel with -n flag (if extenstion pytest-xdist installed). For maximum parallelism: pytest -n`getconf _NPROCESSORS_ONLN`; * Run full test suite: pytest; * Run the quick tests: pytest -m quick; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: pytest -m smoke; * Run tests matching by name: pytest -k testname; * Run tests excluding those by name: pytest -k ""not testname""; * Run tests matching by label: pytest -m testlabel; * Run tests excluding those by label: pytest -m ""not testlabel"". How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test wa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:53202,test,tests,53202,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['test'],['tests']
Testability,"On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4‘s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. How to use logging in Psi4¶; A log file is generated alongside the output file and has extension; .log. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don’t start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low.; To change the logging level to DEBUG from the command-line:; >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI:; >>> psi4.set_output_file(<filebase>, loglevel=10). How to find the Psi4 module from the executable and vice versa¶; Because of the different conventions of C++/Linux and Python installation; layouts, the PSI4 executable and the PSI4 Python module aren’t; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to bu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:60304,log,log,60304,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,5,['log'],['log']
Testability,"Oxygen energy SOSCF, also tests non-symmetric density matrices. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. scf6; Tests RHF/ROHF/UHF SCF gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. cbs-xtpl-alpha; Extrapolated water energies. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom; DFT custom functional test. dft2; DFT Functional Test. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cepa-module; routing check on lccd, lccsd, cepa(0). dct12; Spin-restricted DC-06 counterpart of dct1. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. ddd-function-kwargs; check distributed driver",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:15105,test,test,15105,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"P 134 084107 (2011).; \(\Rightarrow\) 'NBC10A' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark. 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. BBI¶. Database (Merz) of protein backbone-backbone interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from Sherrill group, Georgia Tech.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp '",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_available_databases-1.html:9306,benchmark,benchmark,9306,psi4manual/1.5.0/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_available_databases-1.html,4,['benchmark'],['benchmark']
Testability,"P level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cc34; R",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/testsuite-1.html:21888,test,tested,21888,psi4manual/1.1.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/testsuite-1.html,4,['test'],['tested']
Testability,"P-adz', 'PBE02-CP-adz', 'PBE02-unCP-atz', 'PBE02-CP-atz', None,; 'WB97X2-unCP-adz', 'WB97X2-CP-adz', 'WB97X2-unCP-atz', 'WB97X2-CP-atz', None,; 'B2PLYPD3-unCP-adz', 'B2PLYPD3-CP-adz', 'B2PLYPD3-unCP-atz', 'B2PLYPD3-CP-atz', None,; 'DSDPBEP86D2OPT-unCP-adz', 'DSDPBEP86D2OPT-CP-adz', 'DSDPBEP86D2OPT-unCP-atz', 'DSDPBEP86D2OPT-CP-atz'],; sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). # Fig. bars (e); self.plot_bars([; 'MP2-unCP-adz', 'MP2-CP-adz', 'MP2-unCP-atz', 'MP2-CP-atz'],; sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). [docs] def make_dhdft_Figure_2(self):; """"""Plot all the graphics needed for the SAPT/DFT/WFN; comparison plot in Fig. 2 of DHDFT. Note that benchmark set as reminder, not necessity, since default. """"""; self.plot_bars([; 'SAPT0S-CP-jadz', 'SAPTDFT-CP-atz', 'SAPT2P-CP-adz', 'SAPT3M-CP-atz',; 'SAPT2PCM-CP-atz', None, 'B97D3-unCP-atz', 'B3LYPD3-CP-adz',; 'M052X-unCP-adz', 'WB97XD-CP-atz', 'WB97XV-CP-adz', 'WB97X2-CP-atz',; 'DSDPBEP86D2OPT-CP-atz', 'B2PLYPD3-CP-atz', None, 'MP2-CP-atz',; 'SCSMP2-CP-atz', 'SCSMIMP2-CP-qz', 'MP2C-CP-atqzadz',; 'MP2CF12-CP-adz', 'SCMICCSDAF12-CP-adz', 'CCSDT-CP-atz',; 'CCSDT-CP-atqzatz', 'DWCCSDTF12-CP-adz'],; sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min'],; benchmark='C2011BENCH'). [docs] def plot_dhdft_modelchems(self):; self.plot_modelchems(; ['B97D3-CP-adz', 'PBED3-CP-adz', 'M11L-CP-adz', 'DLDFD-CP-adz', 'B3LYPD3-CP-adz', 'PBE0D3-CP-adz',; 'WB97XD-CP-adz', 'M052X-CP-adz', 'M062X-CP-adz', 'M08HX-CP-adz', 'M08SO-CP-adz', 'M11-CP-adz',; 'VV10-CP-adz',; 'LCVV10-CP-adz', 'WB97XV-CP-adz', 'PBE02-CP-adz', 'WB97X2-CP-adz', 'B2PLYPD3-CP-adz',; 'DSDPBEP86D2OPT-CP-adz', 'MP2-CP-adz'], sset='tt-5min'); self.plot_modelchems(['B97D3-unCP-adz', 'PBED3-unCP-adz', 'M11L-unCP-adz', 'DLDFD-unCP-adz', 'B3LYPD3-unCP-adz',; 'PBE0D3-unCP-adz',; 'WB97XD-unCP-adz', 'M052X-unCP-adz', 'M062X-unCP-adz', 'M08HX-unCP-adz', 'M08SO-unCP-adz',; 'M11-unCP-adz', 'VV10-unCP-adz',; 'LCVV10-unCP-adz', 'WB97XV-unCP-adz', 'PBE02-unCP-adz', 'WB97X2",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:125976,benchmark,benchmark,125976,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"P/cc-pVDZ energies for the CO2 molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. dlpnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. scf-level-shift-cuhf; SCF level shift on a CUHF computation. cubeprop; RHF orbitals and density for water. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) wat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:10182,test,test,10182,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"P2 cc-pvDZ properties for Nitrogen oxide. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. casscf-sp; CASSCF/6-31G** energy point. extern3; External potential calculation with one Ghost atom and one point charge at the same position. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. cbs-xtpl-dict; Extrapolated water energies. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cbs-delta-energy; Extrapolated energies with delta correction. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyw",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:8273,test,test,8273,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"P2/qz2p on NH2. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/psi-uh",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_cfour.html:1704,test,tests,1704,psi4manual/1.8.x/autodoc_testsuite_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_cfour.html,1,['test'],['tests']
Testability,"PI helpers for PSIthon `{...}` syntax.; Also, many Python extensions to core classes:. - core (variable-related, gradient, python option),; - Wavefunction (variable-related, freq, Lagrangian, constructor, scratch file, serialization),; - Matrix (doublet, triplet),; - BasisSet (constructor); - JK (constructor); - VBase (grid); - OEProp (avail prop); - ERISieve (constructor); """""". __all__ = [; ""basis_helper"",; ""pcm_helper"",; ""plump_qcvar"",; ""set_options"",; ""set_module_options"",; ""temp_circular_import_blocker"", # retire ASAP; ]. import os; import re; import sys; import math; import uuid; import warnings; from collections import Counter; from itertools import product; from pathlib import Path; from tempfile import NamedTemporaryFile; from typing import Any, Callable, Dict, List, Optional, Tuple, Union. import numpy as np. import qcelemental as qcel; from psi4 import core; from psi4 import extras; from psi4.driver import qcdb. from . import optproc; from .exceptions import TestComparisonError, ValidationError, UpgradeHelper. ## Python basis helps. @staticmethod; def _pybuild_basis(; mol: core.Molecule,; key: Optional[str] = None,; target: Optional[Union[str, Callable]] = None,; fitrole: str = ""ORBITAL"",; other: Optional[Union[str, Callable]] = None,; puream: int = -1,; return_atomlist: bool = False,; *,; quiet: bool = False,; ) -> Union[core.BasisSet, List[core.BasisSet]]:; """"""Build a primary or auxiliary basis set. Parameters; ----------; mol; Molecule for which to build the basis set instance.; key; {'BASIS', 'ORBITAL', 'DF_BASIS_SCF', 'DF_BASIS_MP2', 'DF_BASIS_CC', 'BASIS_RELATIVISTIC', 'DF_BASIS_SAD'}; Label (effectively Psi4 keyword) to append the basis on the molecule.; The primary basis set is indicated by any of values None or; ``""ORBITAL""`` or ``""BASIS""``.; target; Defines the basis set to be constructed. Can be a string (naming a; basis file) or a callable (providing shells or multiple basis files).; For auxiliary bases to be built entirely from primary default",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/python_helpers.html:2140,Test,TestComparisonError,2140,psi4manual/1.8.x/_modules/psi4/driver/p4util/python_helpers.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/python_helpers.html,1,['Test'],['TestComparisonError']
Testability,"PLES_LOW_MEMORY¶. Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. Expert¶. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. USE_DF_INTS¶. Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. table of contents. FNOCC; General; ACTIVE_NAT_ORBS; BRUECKNER_MAXITER; CC_SCALE_OS; CC_SCALE_SS; CC_TIMINGS; CEPA_NO_SINGLES; CHOLESKY_TOLERANCE; DFCC; DF_BASIS_CC; DIIS_MAX_VECS; DIPMOM; E_CONVERGENCE; MAXITER; MP2_SCALE_OS; MP2_SCALE_SS; NAT_ORBS; OCC_PERCENTAGE; OCC_TOLERANCE; R_CONVERGENCE; SCS_CCSD; SCS_CEPA; SCS_MP2; TRIPLES_LOW_MEMORY. Expert; CEPA_LEVEL; COMPUTE_MP4_TRIPLES; COMPUTE_TRIPLES; RUN_CCSD; RUN_CEPA; RUN_MP2; RUN_MP3; RUN_MP4; USE_DF_INTS. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Appendices; Keywords by Module. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodir_options_c/module__fnocc-1.html:4385,test,testing,4385,psi4manual/1.2.1/autodir_options_c/module__fnocc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodir_options_c/module__fnocc-1.html,2,['test'],['testing']
Testability,"POLE GRADIENT' in task.extras['qcvars']:; mc['f_dipder'] = task.extras['qcvars']['CURRENT DIPOLE GRADIENT']. # Fill in energies for subsumed methods; if self.metameta['ptype'] == 'energy':; for wfn in VARH[mc['f_wfn']]:; for job in self.trove:; if ((wfn == job['f_wfn']) and (mc['f_basis'] == job['f_basis']); and (mc['f_options'] == job['f_options'])):; job['f_energy'] = task.extras['qcvars'][VARH[wfn][wfn]]. # Copy data from 'run' to 'obtained' table; for mce in self.trove:; if ((mc['f_wfn'] == mce['f_wfn']) and (mc['f_basis'] == mce['f_basis']); and (mc['f_options'] == mce['f_options'])):; mce['f_energy'] = mc['f_energy']; mce['f_gradient'] = mc['f_gradient']; mce['f_hessian'] = mc['f_hessian']; mce['f_dipole'] = mc['f_dipole']; mce['f_dipder'] = mc['f_dipder']. # logger.debug(""MC\n"" + pp.pformat(mc)). cbs_results, self.cbsrec = _assemble_cbs_components(self.metameta, self.trove, self.cbsrec). instructions = _summary_table(self.metadata, self.trove, self.cbsrec); core.print_out(instructions); logger.info(instructions). # logger.debug('CBS_RESULTS\n' + pp.pformat(cbs_results)); # logger.debug('GRAND_NEED\n' + pp.pformat(self.cbsrec)). cbs_results[""module""] = modules; return cbs_results. [docs]; def get_results(self, client: Optional[""qcportal.FractalClient""] = None) -> AtomicResult:; """"""Return results as Composite-flavored QCSchema."""""". assembled_results = self._prepare_results(client=client); E0 = assembled_results[""energy""]. # load QCVariables & properties; qcvars = {; 'CBS NUMBER': len(self.compute_list),; 'NUCLEAR REPULSION ENERGY': self.molecule.nuclear_repulsion_energy(),; }. properties = {; ""calcinfo_natom"": self.molecule.natom(),; ""nuclear_repulsion_energy"": self.molecule.nuclear_repulsion_energy(),; ""return_energy"": E0,; }. for qcv in ['CBS', 'CURRENT']:; qcvars[qcv + ' REFERENCE ENERGY'] = self.cbsrec[0]['d_energy']; qcvars[qcv + ' CORRELATION ENERGY'] = E0 - self.cbsrec[0]['d_energy']; qcvars[qcv + ('' if qcv == 'CURRENT' else ' TOTAL') + ' ENERGY'] = E0.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs.html:58386,log,logger,58386,psi4manual/1.8.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs.html,6,['log'],['logger']
Testability,"POLE GRADIENT' in task.extras['qcvars']:; mc['f_dipder'] = task.extras['qcvars']['CURRENT DIPOLE GRADIENT']. # Fill in energies for subsumed methods; if self.metameta['ptype'] == 'energy':; for wfn in VARH[mc['f_wfn']]:; for job in self.trove:; if ((wfn == job['f_wfn']) and (mc['f_basis'] == job['f_basis']); and (mc['f_options'] == job['f_options'])):; job['f_energy'] = task.extras['qcvars'][VARH[wfn][wfn]]. # Copy data from 'run' to 'obtained' table; for mce in self.trove:; if ((mc['f_wfn'] == mce['f_wfn']) and (mc['f_basis'] == mce['f_basis']); and (mc['f_options'] == mce['f_options'])):; mce['f_energy'] = mc['f_energy']; mce['f_gradient'] = mc['f_gradient']; mce['f_hessian'] = mc['f_hessian']; mce['f_dipole'] = mc['f_dipole']; mce['f_dipder'] = mc['f_dipder']. # logger.debug(""MC\n"" + pp.pformat(mc)). cbs_results, self.cbsrec = _assemble_cbs_components(self.metameta, self.trove, self.cbsrec). instructions = _summary_table(self.metadata, self.trove, self.cbsrec); core.print_out(instructions); logger.info(instructions). # logger.debug('CBS_RESULTS\n' + pp.pformat(cbs_results)); # logger.debug('GRAND_NEED\n' + pp.pformat(self.cbsrec)). cbs_results[""module""] = modules; return cbs_results. def get_results(self, client: Optional[""FractalClient""] = None) -> AtomicResult:; """"""Return results as Composite-flavored QCSchema."""""". assembled_results = self._prepare_results(client=client); E0 = assembled_results[""energy""]. # load QCVariables & properties; qcvars = {; 'CBS NUMBER': len(self.compute_list),; 'NUCLEAR REPULSION ENERGY': self.molecule.nuclear_repulsion_energy(),; }. properties = {; ""calcinfo_natom"": self.molecule.natom(),; ""nuclear_repulsion_energy"": self.molecule.nuclear_repulsion_energy(),; ""return_energy"": E0,; }. for qcv in ['CBS', 'CURRENT']:; qcvars[qcv + ' REFERENCE ENERGY'] = self.cbsrec[0]['d_energy']; qcvars[qcv + ' CORRELATION ENERGY'] = E0 - self.cbsrec[0]['d_energy']; qcvars[qcv + ('' if qcv == 'CURRENT' else ' TOTAL') + ' ENERGY'] = E0. for idelta in ra",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html:57954,log,logger,57954,psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,2,['log'],['logger']
Testability,"PS2; COOKBOOK; DFTD3; DFTD4; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. fd-gradient; SCF STO-3G finite-difference tests. cc36; CC2(RHF)/cc-pVDZ energy of H2O. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc32; CC3/cc-pVDZ H2O \(R_e",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/testsuite.html:1647,test,test,1647,psi4manual/1.9.x/testsuite.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/testsuite.html,1,['test'],['test']
Testability,"PSI4; executable. That is, the top line of bin/psi4 is something like; #!/path/to/miniconda/envs/p4deps/bin/python3.5, and that’s the Python; through which PSI4 is running, rather than the Python of which python.; To use a different Python with PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; 1; 2; 3>>> cd {objdir}; >>> lldb -- python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. 1; 2; 3>>> cd {objdir}; >>> gdb --args python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPYTHON_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:45530,test,tests,45530,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['test'],['tests']
Testability,"PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Addi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/add_tests-1.html:5132,test,tests,5132,psi4manual/1.4.0/add_tests-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html,2,['test'],['tests']
Testability,"PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Addi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/add_tests-1.html:5132,test,tests,5132,psi4manual/1.5.0/add_tests-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/add_tests-1.html,2,['test'],['tests']
Testability,"Point. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. dft-reference; MP2 with a PBE0 reference computation. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. cubeprop-esp; RHF orbitals and density for water. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. linK-2; RKS Linear Exchange Algorithm test for benzene. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. tdscf-1; td-uhf test on triplet states of methylene (rpa). dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. fnocc4; Test FNO-DF-CCSD(T) energy. cdremp-1; Cholesky decomposed REMP/cc-pVDZ energies for the CO2 molecule. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. dft-gra",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:31358,test,test,31358,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"Psi library. cc36; CC2(RHF)/cc-pVDZ energy of H2O. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. dcft1; DCFT-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. Previous t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html:19506,test,tests,19506,psi4manual/4.0b3/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html,4,['test'],['tests']
Testability,"Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:63408,test,tests,63408,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,6,"['log', 'test']","['logging', 'logo', 'test', 'testing', 'tests']"
Testability,"Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/build_faq.html:4041,log,logo,4041,psi4manual/1.7.x/build_faq.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/build_faq.html,1,['log'],['logo']
Testability,"Psi; directory. The samples and a brief description are provided below.; Sample inputs accessible through interfaced executables are bulleted below. BRIANQC; CFOUR; CHEMPS2; COOKBOOK; DFTD3; DFTD4; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). mp2-1; All-electron MP2 6-31G** geometry optimization of water. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. pubchem2; Superficial test of PubChem interface. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. aediis-1; ADIIS test case, from 10.1063/1.3304922. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. sapt11; sapt example with orbital freezing with alkali metal and dMP",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/testsuite.html:1500,test,test,1500,psi4manual/1.7.x/testsuite.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/testsuite.html,1,['test'],['test']
Testability,"PsiMod.print_out(""\n""); PsiMod.print_out(""CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies\n\n""); PsiMod.print_out("" R (Ang) E_int (kcal/mol) \n""); PsiMod.print_out(""-----------------------------------------------------\n""); for R in Rvals:; e = ecp[R] * 627.5095; PsiMod.print_out("" %3.1f %10.6f\n"" % (R, e)). First, you can see the molecule block has a couple dashes to; separate the monomers from each other. Also note we’ve used a Z-matrix to; specify the geometry, and we’ve used a variable (R) as the; interatomic distance. We have not specified the value of R in; the molecule block like we normally would. That’s because we’re; going to vary it during the scan across the potential energy surface.; Below the molecule block, you can see the Rvals array; specified. This is a Python array holding the interatomic distances we; want to consider. In Python, arrays are surrounded by square brackets, and; elements are separated by commas.; The next lines, set basis aug-cc-pVDZ and set freeze_core True,; are familiar from previous test cases. Next comes a slightly; unusual-looking line, ecp = {}. This is Python’s way of initializing; a “dictionary”. We’re going to use this dictionary to store the; counterpoise-corrected energies as they become available. A dictionary is; like an array, but we can index it using strings or floating-point numbers; instead of integers if we want. Here, we will index it using; floating-point numbers, namely, the R values. This winds up being; slightly more elegant than a regular array in later parts of the input; file.; The next section, beginning with for R in Rvals:, loops over the; interatomic distances, R, in our array Rvals. In Python,; loops need to be indented, and each line in the loop has to be indented; by the same amount. The first line in the loop, dimer.R = R,; sets the Z-matrix variable R of the molecule called dimer; to the R value extracted from the Rvals array. The next line,; ecp[R] = cp('ccsd(t)'), computes the counterpoise",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/tutorial-1.html:17547,test,test,17547,psi4manual/4.0b3/tutorial-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/tutorial-1.html,4,['test'],['test']
Testability,"RINT, READ, and WRITE will usually; be the last words in an option name.; Use FOLLOW_ROOT for the state to be followed in geometry optimizations; WFN (not wavefunction); You’re welcome to use WFN and DERTYPE as internal options, but; plan to have these set by the python driver and mark them as !expert; options. Really avoid using JOBTYPE.; You’re not welcome to add CHARGE or MULTP options. Plan to get; these quantities from the molecule object. Since we frequently use subsets; of systems (with their own charge and multiplicity), this is safer.; Conform. Just grep 'add' psi4/src/read_options.cc to get a list of; all the option names in PSI4 and try to match any conventions you; find.; If you have a quantity you’d like to call a cutoff, a threshold, a; tolerance, or a convergence, consider the following guidelines in naming; it. If its value is typically greater than ~0.001, give it a name with CUTOFF.; If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with larger values (e.g.,; integrals, occupations, eigenvectors), give it a name with TOLERANCE.; If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with smaller values (e.g., energy; changes, residual errors, gradients), give it a name with; CONVERGENCE. In deciding how to arrange words in an option name, place the context; first (e.g., MP2_AMPS_PRINT, TRIPLES_DIIS). This means PRINT; will generally be at the end of an option name.; Use INTS_TOLERANCE (not schwarz_cutoff); H in an option name is reserved for Hamiltonian (or hydrogen).; Hessian should be HESS.; All option names should be all caps and separated by underscores.; If you have an option that instructs your module to do something not too; computationally intensive and then quit, append _EXIT to the option; name.; Scaling terms (like for scs) should follow the pattern MP2_SS_SCALE; and SAPT_OS_SCALE.; FRAG for fragment.; AVG for average.; For le",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html:8647,test,tested,8647,psi4manual/1.4.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html,9,['test'],['tested']
Testability,"RMO); THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY); CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:216336,test,test,216336,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,4,['test'],['test']
Testability,"RMV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRSM(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRSV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. IDAMAX(arg0, arg1, arg2, arg3); docstring. adc(ref_wfn); Runs the ADC propagator code, for excited states. array_variable(key); Returns copy of the Matrix QCVariable key (case-insensitive); prefer variable(). array_variables(); Returns dictionary of all Matrix QCVariables; prefer variables(). be_quiet(); Redirects output to /dev/null. benchmark_blas1(max_dim, min_time); Perform benchmark traverse of BLAS 1 routines. benchmark_blas2(max_dim, min_time); Perform benchmark traverse of BLAS 2 routines. benchmark_blas3(max_dim, min_time[, nthread]); Perform benchmark traverse of BLAS 3 routines. benchmark_disk(max_dim, min_time); Perform benchmark of PSIO disk performance. benchmark_integrals(max_am, min_time); Perform benchmark of psi integrals (of libmints type). benchmark_math(min_time); Perform benchmark of common double floating point operations including most of cmath. ccdensity(ref_wfn); Runs the code to compute coupled cluster density matrices. ccenergy(ref_wfn); Runs the coupled cluster energy code. cceom(ref_wfn); Runs the equation of motion coupled cluster code for excited states. cchbar(ref_wfn); Runs the code to generate the similarity transformed Hamiltonian. cclambda(ref_wfn); Runs the coupled cluster lambda equations code. ccresponse(ref_wfn); Runs the coupled cluster response theory code. cctransort(ref_wfn); Runs cctransort that transforms and reorders integrals for use in the coupled cluster codes. cctriples(ref_wfn); Runs the coupled cluster (T) energy code. clean(); Remove scratch files. clean_options(); Reset options to clean state. clean_timers(); Reinitialize timers for independent timer.dat entries. clean_variables(); Empties all double and Matrix QCVariables that have been set in global memory. close_outfile(); Closes the output file. dct(ref_wfn); Runs the density cumulant ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/psi4api-1.html:2985,benchmark,benchmark,2985,psi4manual/1.5.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/psi4api-1.html,3,['benchmark'],['benchmark']
Testability,"ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:20718,test,test,20718,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:40790,test,test,40790,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,8,['test'],['test']
Testability,"RT_ATOM, RT_LINEAR, other.; T; Temperature in [K]. Psi default 298.15. Note that 273.15 is IUPAC STP.; P; Pressure in [Pa]. Psi default 101325. Note that 100000 is IUPAC STP. Returns; -------; dict, str; First is every thermochemistry component in atomic units along with input conditions.; Second is formatted presentation of analysis. """"""; sm = collections.defaultdict(float). # conditions; therminfo = {}; therminfo['E0'] = Datum('E0', 'Eh', E0); therminfo['B'] = Datum('rotational constants', 'cm^-1', rot_const); therminfo['sigma'] = Datum('external symmetry number', '', sigma); therminfo['T'] = Datum('temperature', 'K', T); therminfo['P'] = Datum('pressure', 'Pa', P). # electronic; q_elec = multiplicity; sm[('S', 'elec')] = math.log(q_elec). # translational; beta = 1 / (qcel.constants.kb * T); q_trans = (2.0 * np.pi * molecular_mass * qcel.constants.amu2kg /; (beta * qcel.constants.h * qcel.constants.h))**1.5 * qcel.constants.na / (beta * P); sm[('S', 'trans')] = 5 / 2 + math.log(q_trans / qcel.constants.na); sm[('Cv', 'trans')] = 3 / 2; sm[('Cp', 'trans')] = 5 / 2; sm[('E', 'trans')] = 3 / 2 * T; sm[('H', 'trans')] = 5 / 2 * T. # rotational; if rotor_type == ""RT_ATOM"":; pass; elif rotor_type == ""RT_LINEAR"":; q_rot = 1. / (beta * sigma * 100 * qcel.constants.c * qcel.constants.h * rot_const[1]); sm[('S', 'rot')] = 1.0 + math.log(q_rot); sm[('Cv', 'rot')] = 1; sm[('Cp', 'rot')] = 1; sm[('E', 'rot')] = T; else:; phi_A, phi_B, phi_C = rot_const * 100 * qcel.constants.c * qcel.constants.h / qcel.constants.kb; q_rot = math.sqrt(math.pi) * T**1.5 / (sigma * math.sqrt(phi_A * phi_B * phi_C)); sm[('S', 'rot')] = 3 / 2 + math.log(q_rot); sm[('Cv', 'rot')] = 3 / 2; sm[('Cp', 'rot')] = 3 / 2; sm[('E', 'rot')] = 3 / 2 * T; sm[('H', 'rot')] = sm[('E', 'rot')]. # vibrational; vibonly = filter_nonvib(vibinfo); ZPE_cm_1 = 1 / 2 * np.sum(vibonly['omega'].data.real); omega_str = _format_omega(vibonly['omega'].data, decimals=4). imagfreqidx = np.where(vibonly['omega'].data.imag > vibon",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html:32294,log,log,32294,psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html,16,['log'],['log']
Testability,"R_e). pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. freq-masses; check nonphysical masses possible. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. dft1; DFT Functional Test all values update for new BraggSlater radii. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. scf-level-shift-rks; SCF level shift on an RKS computation. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. mints3; Test individual integral objects for correctness. dft-smoke; DFT Functional Smoke Test. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. linK-1; RHF Linear Exchange Algorithm te",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:30834,test,test,30834,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,4,['test'],['test']
Testability,"Resubmitting Errored Job {}"".format(self.result_id)); elif rec.status == ""complete"":; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Submitting AtomicResult {}"".format(self.result_id)). return. logger.info(f'<<< JSON launch ... {self.molecule.schoenflies_symbol()} {self.molecule.nuclear_repulsion_energy()}'); gof = core.get_output_file(). # EITHER ...; # from psi4.driver import schema_wrapper; # self.result = schema_wrapper.run_qcschema(self.plan()); # ... OR ...; self.result = qcng.compute(; self.plan(),; ""psi4"",; raise_error=True,; # local_options below suitable for serial mode where each job takes all the resources of the parent Psi4 job.; # distributed runs through QCFractal will likely need a different setup.; task_config={; # B -> GiB; ""memory"": core.get_memory() / (2 ** 30),; ""ncores"": core.get_num_threads(),; },; ); # ... END. #pp.pprint(self.result.dict()); #print(""... JSON returns >>>""); core.set_output_file(gof, True); core.reopen_outfile(); logger.debug(pp.pformat(self.result.dict())); core.print_out(_drink_filter(self.result.dict()[""stdout""])); self.computed = True. [docs] def get_results(self, client: Optional[""qcportal.FractalClient""] = None) -> AtomicResult:; """"""Return results as Atomic-flavored QCSchema."""""". if self.result:; return self.result. if client:; try:; # QCFractal/QCPortal v0.15.8; result = client.query_results(id=self.result_id); qca_next_branch = False; except AttributeError:; # QCFractal/QCPortal `next`; record = client.get_singlepoints(record_ids=self.result_id); qca_next_branch = True. logger.debug(f""Querying AtomicResult {self.result_id}""). if not qca_next_branch:; # QCFractal v0.15.8; if len(result) == 0:; return self.result. self.result = result[0]. else:; # QCFractal `next`; if record.status != ""complete"":; return self.result. self.result = _singlepointrecord_to_atomicresult(record). return self.result. def _singlepointrecord_to_atomicresult(spr) -> AtomicResult:; extras = spr.raw_data.extras;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_base.html:6558,log,logger,6558,psi4manual/1.7.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_base.html,2,['log'],['logger']
Testability,"Resubmitting Errored Job {}"".format(self.result_id)); elif rec.status == ""complete"":; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Submitting AtomicResult {}"".format(self.result_id)). return. logger.info(f'<<< JSON launch ... {self.molecule.schoenflies_symbol()} {self.molecule.nuclear_repulsion_energy()}'); gof = core.get_output_file(). # EITHER ...; # from psi4.driver import schema_wrapper; # self.result = schema_wrapper.run_qcschema(self.plan()); # ... OR ...; self.result = qcng.compute(; self.plan(),; ""psi4"",; raise_error=True,; # local_options below suitable for serial mode where each job takes all the resources of the parent Psi4 job.; # distributed runs through QCFractal will likely need a different setup.; task_config={; # B -> GiB; ""memory"": core.get_memory() / (2 ** 30),; ""ncores"": core.get_num_threads(),; },; ); # ... END. #pp.pprint(self.result.dict()); #print(""... JSON returns >>>""); core.set_output_file(gof, True); core.reopen_outfile(); logger.debug(pp.pformat(self.result.dict())); if stdout := self.result.dict()[""stdout""]:; core.print_out(_drink_filter(stdout)); self.computed = True. [docs]; def get_results(self, client: Optional[""qcportal.FractalClient""] = None) -> AtomicResult:; """"""Return results as Atomic-flavored QCSchema."""""". if self.result:; return self.result. if client:; record = client.get_singlepoints(record_ids=self.result_id). logger.debug(f""Querying AtomicResult {self.result_id}""). if record.status != ""complete"":; return self.result. self.result = _singlepointrecord_to_atomicresult(record). return self.result. def _singlepointrecord_to_atomicresult(spr: ""qcportal.singlepoint.SinglepointRecord"") -> AtomicResult:; atres = spr.to_qcschema_result(). # QCFractal `next` database stores return_result, properties, and extras[""qcvars""] merged; # together and with lowercase keys. `to_qcschema_result` partitions properties back out,; # but we need to restore qcvars keys, types, and dimensions.; # QCFractal v0.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/task_base.html:6215,log,logger,6215,psi4manual/1.9.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/task_base.html,4,['log'],['logger']
Testability,"Resubmitting Errored Job {}"".format(self.result_id)); elif rec.status == ""complete"":; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Submitting AtomicResult {}"".format(self.result_id)). return. logger.info(f'<<< JSON launch ... {self.molecule.schoenflies_symbol()} {self.molecule.nuclear_repulsion_energy()}'); gof = core.get_output_file(). # EITHER ...; # from psi4.driver import schema_wrapper; # self.result = schema_wrapper.run_qcschema(self.plan()); # ... OR ...; self.result = qcng.compute(; self.plan(),; ""psi4"",; raise_error=True,; # local_options below suitable for serial mode where each job takes all the resources of the parent Psi4 job.; # distributed runs through QCFractal will likely need a different setup.; task_config={; # B -> GiB; ""memory"": core.get_memory() / (2 ** 30),; ""ncores"": core.get_num_threads(),; },; ); # ... END. #pp.pprint(self.result.dict()); #print(""... JSON returns >>>""); core.set_output_file(gof, True); core.reopen_outfile(); logger.debug(pp.pformat(self.result.dict())); if stdout := self.result.dict()[""stdout""]:; core.print_out(_drink_filter(stdout)); self.computed = True. [docs]; def get_results(self, client: Optional[""qcportal.FractalClient""] = None) -> AtomicResult:; """"""Return results as Atomic-flavored QCSchema."""""". if self.result:; return self.result. if client:; try:; # QCFractal/QCPortal v0.15.8; result = client.query_results(id=self.result_id); qca_next_branch = False; except AttributeError:; # QCFractal/QCPortal `next`; record = client.get_singlepoints(record_ids=self.result_id); qca_next_branch = True. logger.debug(f""Querying AtomicResult {self.result_id}""). if not qca_next_branch:; # QCFractal v0.15.8; if len(result) == 0:; return self.result. self.result = result[0]. else:; # QCFractal `next`; if record.status != ""complete"":; return self.result. self.result = _singlepointrecord_to_atomicresult(record). return self.result. def _singlepointrecord_to_atomicresult(spr: ""qcportal.singlepoint.Si",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/task_base.html:7250,log,logger,7250,psi4manual/1.8.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/task_base.html,2,['log'],['logger']
Testability,"Run with Tamm-Dancoff approximation (TDA), uses random-phase approximation (RPA) when false. Type: boolean; Default: false. TDSCF_TDM_PRINT (SCF)¶SCF — Which transition dipole moments to print out: - E_TDM_LEN : electric transition dipole moments, length representation - E_TDM_VEL : electric transition dipole moments, velocity representation - M_TDM : magnetic transition dipole moments. Type: array; Default: No Default. TDSCF_TRIPLETS (SCF)¶SCF — Controls inclusion of triplet states, which is only valid for restricted references. Valid options: - none : No triplets computed (default) - also : lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCT)¶DCT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC)¶PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC)¶PSIMRCC (Expert) — Do use Tikhonow regularization ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:225067,test,test,225067,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,9,['test'],['test']
Testability,"S-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new Bragg",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:31586,test,test,31586,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"S22_DD'. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark; 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset; 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. HTR40¶. Database of Hydrogen transfer reactions.; Geometries from Bozkaya and Sherrill.; Reference energies from Bozkaya and Sherrill. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. RGC10¶. Database (Sherrill) of interaction energies for dissociation curves of rare-gas biatomic complexes.; Geometries and reference interaction energies from Tang et al. JCP 118 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'HeHe' 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_available_databases-1.html:4625,benchmark,benchmark,4625,psi4manual/4.0b5/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_available_databases-1.html,4,['benchmark'],['benchmark']
Testability,"S; elif method == ""cbs"":; kwargs.update(cbsmeta); # This CompositeComputer is discarded after being used for dermode. Could have used directly for analytic except for excess printing with FD; simplekwargs = copy.deepcopy(kwargs); simplekwargs['verbose'] = 0; dummyplan = CompositeComputer(**packet, **simplekwargs). methods = [sr.method for sr in dummyplan.task_list]; # TODO: pass more info, so fn can use for managed_methods -- ref, qc_module, fc/ae, conv/df; dermode = negotiate_derivative_type(driver, methods, kwargs.pop('dertype', None), verbose=1). if dermode[0] == dermode[1]: # analytic; logger.info('PLANNING CBS: packet={packet} kw={kwargs}'); plan = CompositeComputer(**packet, **kwargs); return plan; else:; # For FD(CBS(Atomic)), the CompositeComputer above is discarded after being used for dermode.; logger.info(; f'PLANNING FD(CBS): dermode={dermode} packet={packet} findif_kw={current_findif_kwargs} kw={kwargs}'); plan = FiniteDifferenceComputer(**packet,; findif_mode=dermode,; computer=CompositeComputer,; **current_findif_kwargs,; **kwargs); return plan. # Done with Wrappers -- know we want E, G, or H -- but may still be FD or AtomicComputer; else:; dermode = negotiate_derivative_type(driver, method, kwargs.pop('dertype', None), verbose=1); convcrit = negotiate_convergence_criterion(dermode, method, return_optstash=False). if dermode[0] == dermode[1]: # analytic; logger.info(f'PLANNING Atomic: keywords={keywords}'); return AtomicComputer(**packet, **kwargs); else:; keywords.update(convcrit); logger.info(; f'PLANNING FD: dermode={dermode} keywords={keywords} findif_kw={current_findif_kwargs} kw={kwargs}'); return FiniteDifferenceComputer(**packet,; findif_mode=dermode,; **current_findif_kwargs,; **kwargs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.8.2;  · . PSI4. Module code; psi4.driver.task_planner. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:04AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/task_planner.html:10467,log,logger,10467,psi4manual/1.8.x/_modules/psi4/driver/task_planner.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/task_planner.html,4,['log'],['logger']
Testability,"S; elif method == ""cbs"":; kwargs.update(cbsmeta); # This CompositeComputer is discarded after being used for dermode. Could have used directly for analytic except for excess printing with FD; simplekwargs = copy.deepcopy(kwargs); simplekwargs['verbose'] = 0; dummyplan = CompositeComputer(**packet, **simplekwargs). methods = [sr.method for sr in dummyplan.task_list]; # TODO: pass more info, so fn can use for managed_methods -- ref, qc_module, fc/ae, conv/df; dermode = negotiate_derivative_type(driver, methods, kwargs.pop('dertype', None), verbose=1). if dermode[0] == dermode[1]: # analytic; logger.info('PLANNING CBS: packet={packet} kw={kwargs}'); plan = CompositeComputer(**packet, **kwargs); return plan; else:; # For FD(CBS(Atomic)), the CompositeComputer above is discarded after being used for dermode.; logger.info(; f'PLANNING FD(CBS): dermode={dermode} packet={packet} findif_kw={current_findif_kwargs} kw={kwargs}'); plan = FiniteDifferenceComputer(**packet,; findif_mode=dermode,; computer=CompositeComputer,; **current_findif_kwargs,; **kwargs); return plan. # Done with Wrappers -- know we want E, G, or H -- but may still be FD or AtomicComputer; else:; dermode = negotiate_derivative_type(driver, method, kwargs.pop('dertype', None), verbose=1); convcrit = negotiate_convergence_criterion(dermode, method, return_optstash=False). if dermode[0] == dermode[1]: # analytic; logger.info(f'PLANNING Atomic: keywords={keywords}'); return AtomicComputer(**packet, **kwargs); else:; keywords.update(convcrit); logger.info(; f'PLANNING FD: dermode={dermode} keywords={keywords} findif_kw={current_findif_kwargs} kw={kwargs}'); return FiniteDifferenceComputer(**packet,; findif_mode=dermode,; **current_findif_kwargs,; **kwargs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.9.1;  · . PSI4. Module code; psi4.driver.task_planner. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/task_planner.html:10424,log,logger,10424,psi4manual/1.9.x/_modules/psi4/driver/task_planner.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/task_planner.html,4,['log'],['logger']
Testability,"S=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, an",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/testsuite-1.html:10011,test,testing,10011,psi4manual/1.1.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/testsuite-1.html,4,['test'],['testing']
Testability,"SAPT term during solution of the CPHF equations. Type: conv double; Default: 1e-10. FREEZE_CORE¶. The scope of core orbitals to freeze in evaluation of SAPT and terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE, SMALL, LARGE; Default: FALSE. INTS_TOLERANCE¶. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. MAXITER¶. Maxmum number of CPHF iterations. Type: integer; Default: 50. NAT_ORBS¶. Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: false. NAT_ORBS_T2¶. Do use MP2 natural orbital approximations for the block of two-electron integrals in the evaluation of second-order T2 amplitudes? This approximation is promising for accuracy and computational savings, but it has not been rigorously tested. Type: boolean; Default: false. NO_RESPONSE¶. Don’t solve the CPHF equations? Evaluate and instead of their response-including coupterparts. Only turn on this option if the induction energy is not going to be used. Type: boolean; Default: false. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for evaluating the triples contribution to dispersion. Type: conv double; Default: 1.0e-6. PRINT¶. The amount of information to print to the output file for the sapt module. For 0, only the header and final results are printed. For 1, (recommended for large calculations) some intermediate quantities are also printed. Type: integer; Default: 1. SAPT_LEVEL¶. The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK¶. Do force SAPT2 and higher to die ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__sapt-1.html:2876,test,tested,2876,psi4manual/4.0b2/autodir_options_c/module__sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__sapt-1.html,8,['test'],['tested']
Testability,"SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-guess-read2; Test if the the guess read in the same basis converges. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-ext-abc; FSAPT with external charge on trimer. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft1; DFT Functional Test all values update for new BraggSlater radii. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-all; Intercalls among python wrappers- database, cbs,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:37088,test,test,37088,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"SCF)¶SCF — The gradient regularized asymptotic correction beta value. Type: double; Default: 40.0. DFT_GRAC_C_FUNC (SCF)¶SCF (Expert) — The gradient regularized asymptotic correction functional corr form. Type: string; Default: XC_LDA_C_VWN. DFT_GRAC_SHIFT (SCF)¶SCF — The gradient regularized asymptotic correction shift value. Type: double; Default: 0.0. DFT_GRAC_X_FUNC (SCF)¶SCF (Expert) — The gradient regularized asymptotic correction functional exch form. Type: string; Default: XC_GGA_X_LB. DFT_GRID_NAME (SCF)¶SCF (Expert) — The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_NUCLEAR_SCHEME (SCF)¶SCF — Nuclear Scheme. Type: string; Possible Values: TREUTLER, BECKE, NAIVE, STRATMANN, SBECKE; Default: TREUTLER. DFT_OMEGA (SCF)¶SCF — The DFT Range-separation parameter. Type: double; Default: 0.0. DFT_OMEGA_C (SCF)¶SCF — The DFT Correlation Range-separation parameter. Type: double; Default: 0.0. DFT_PRUNING_ALPHA (SCF)¶SCF (Expert) — Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_PRUNING_SCHEME (SCF)¶SCF — Select approach for pruning. Options ROBUST and TREUTLER prune based on regions (proximity to nucleus) while FLAT P_GAUSSIAN D_GAUSSIAN P_SLATER D_SLATER LOG_GAUSSIAN LOG_SLATER prune based on decaying functions (experts only!). The recommended scheme is ROBUST. Type: string; Default: NONE. DFT_RADIAL_POINTS (SCF)¶SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF)¶SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_REMOVE_DISTANT_POINTS (SCF)¶SCF (Expert) — Remove points from the quadrature grid that exceed the spatial extend of the basis functions. Type: boolean; Default: true. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html:105003,log,logarithmic,105003,psi4manual/1.6.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html,5,['log'],['logarithmic']
Testability,"SCF)¶SCF — The gradient regularized asymptotic correction beta value. Type: double; Default: 40.0. DFT_GRAC_C_FUNC (SCF)¶SCF (Expert) — The gradient regularized asymptotic correction functional corr form. Type: string; Default: XC_LDA_C_VWN. DFT_GRAC_SHIFT (SCF)¶SCF — The gradient regularized asymptotic correction shift value. Type: double; Default: 0.0. DFT_GRAC_X_FUNC (SCF)¶SCF (Expert) — The gradient regularized asymptotic correction functional exch form. Type: string; Default: XC_GGA_X_LB. DFT_GRID_NAME (SCF)¶SCF (Expert) — The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_NUCLEAR_SCHEME (SCF)¶SCF — Nuclear Scheme. Type: string; Possible Values: TREUTLER, BECKE, NAIVE, STRATMANN, SBECKE; Default: TREUTLER. DFT_OMEGA (SCF)¶SCF — The DFT Range-separation parameter. Type: double; Default: 0.0. DFT_OMEGA_C (SCF)¶SCF — The DFT Correlation Range-separation parameter. Type: double; Default: 0.0. DFT_PRUNING_ALPHA (SCF)¶SCF (Expert) — Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_PRUNING_SCHEME (SCF)¶SCF — Select approach for pruning. Options ROBUST and TREUTLER prune based on regions (proximity to nucleus) while FLAT P_GAUSSIAN D_GAUSSIAN P_SLATER D_SLATER LOG_GAUSSIAN LOG_SLATER prune based on decaying functions (experts only!). The recommended scheme is ROBUST. Type: string; Default: NONE. DFT_RADIAL_POINTS (SCF)¶SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF)¶SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Def",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:103818,log,logarithmic,103818,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,4,['log'],['logarithmic']
Testability,"SD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. scf-cholesky-basis; incremental Cholesky filtered SCF. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. soscf-large; Second-order SCF convergnece: Benzene. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft1-alt; DFT Functional Test. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. nbody-vmfc-hessian; Computation of VMFC-corrected water trimer Hessian (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. frac-ip-fitting; Omega optimization for LRC functiona",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:32503,test,test,32503,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"SD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test individual integral objects for correctness. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASS",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:28995,test,test,28995,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"SI4CONDA/bin/g++; $PSI4CONDA/bin/gfortran; /usr/bin/clang++. >>> which cmake; $PSI4CONDA/bin/cmake; # if above empty, ``conda install cmake``. Create and compile plugin; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36>>> psi4 --plugin-name testplugin; -- Creating ""testplugin"" with ""basic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testplugin.so; [100%] Built target testplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in $PATH or the; conda enviroment must be activated before compilation and execution of; plugins created using this procedure. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directory contains the following files. CMakeLists.txt — CMake fil",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/plugins-1.html:4107,test,testplugin,4107,psi4manual/1.1.0/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/plugins-1.html,6,['test'],['testplugin']
Testability,"SQT2); TRANSQT2 — Reference wavefunction type. Type: string; Default: RHF. REFERENCE_SYM (DETCI); DETCI (Expert) — Irrep for CI vectors; -1 = find automatically. This option allows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. REORDER (TRANSQT); TRANSQT — Do reorder MOs?. Type: boolean; Default: false. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — The algorithm to use for the solution of the response equations for the analytic gradients and properties. Two-step algorithm is generally more efficient than simultaneous and is used by default. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:103350,test,tested,103350,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['test'],['tested']
Testability,"SQT2); TRANSQT2 — Reference wavefunction type. Type: string; Default: RHF. REFERENCE_SYM (DETCI); DETCI (Expert) — Irrep for CI vectors; -1 = find automatically. This option allows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. REORDER (TRANSQT); TRANSQT — Do reorder MOs?. Type: boolean; Default: false. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — The algorithm to use for the solution of the response equations for the analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coupled-cluster iterations f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:108924,test,tested,108924,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,4,['test'],['tested']
Testability,"SSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). mp2-1; All-electron MP2 6-31G** geometry optimization of water. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. pubchem2; Superficial test of PubChem interface. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. aediis-1; ADIIS test case, from 10.1063/1.3304922. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. sapt11; sapt example with orbital freezing with alkali metal and dMP2. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/testsuite.html:1803,test,test,1803,psi4manual/1.7.x/testsuite.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/testsuite.html,1,['test'],['test']
Testability,"SSCF/6-31G** energy point. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. tdscf-6; td-camb3lyp with DiskDF and method/basis specification. cubeprop; RHF orbitals and density for water. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-level-shift-uhf; SCF level shift on a UHF computation. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. cbs-parser; mtd/basis syntax examples. options1; check all variety of options parsing. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to on",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:14356,test,test,14356,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnoc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/testsuite-1.html:20153,test,test,20153,psi4manual/1.1.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/testsuite-1.html,8,['test'],['test']
Testability,"Sample Inputs; <no title>. Input File; Description. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. fd-gradient; SCF STO-3G finite-difference tests. cc36; CC2(RHF)/cc-pVDZ energy of H2O. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-response2; Compute the dipole polarizability for water with custom basis set. dct5; DC-06 calculation for th",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:1122,test,tests,1122,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,1,['test'],['tests']
Testability,"So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. psi4.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. psi4.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters:. expected (str) – Path to reference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error message",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:26733,test,test,26733,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,4,['test'],['test']
Testability,"SuperFunctional citation. set_density_tolerance(self, arg0); Sets the density threshold for LibXC. set_deriv(self, arg0); Sets the derivative level. set_description(self, arg0); Sets the SuperFunctional description. set_do_vv10(self, arg0); Sets whether to do VV10 correction. set_grac_alpha(self, arg0); Sets the GRAC alpha parameter. set_grac_beta(self, arg0); Sets the GRAC beta parameter. set_grac_shift(self, arg0); Sets the GRAC bulk shift value. set_lock(self, arg0); Locks the functional to prevent changes. set_max_points(self, arg0); Sets the maximum number of points. set_name(self, arg0); Sets the SuperFunctional name. set_vv10_b(self, arg0); Sets the VV10 b parameter. set_vv10_c(self, arg0); Sets the VV10 c parameter. set_x_alpha(self, arg0); Sets the amount of exact global HF exchange. set_x_beta(self, arg0); Sets how much more long-range exchange than short-range exchange. set_x_omega(self, arg0); Sets the range-seperation exchange parameter. test_functional(self, arg0, arg1, arg2, …); Quick testing capabilities. value(self, arg0); Returns a given internal value. values(self); Return all internal values. vv10_b(self); The VV10 b parameter. vv10_c(self); The VV10 c parameter. x_alpha(self); Amount of exact HF exchange. x_beta(self); Amount of exact HF exchange. x_functional(self, arg0); Returns the desired X Functional. x_functionals(self); Returns all X Functionals. x_omega(self); Range-seperated exchange parameter. Methods Documentation. static XC_build(arg0: str, arg1: bool) → psi4.core.SuperFunctional¶; Builds a SuperFunctional from a XC string. add_c_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Functional) → None¶; Add a correlation Functional. add_x_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Functional) → None¶; Add a exchange Functional. allocate(self: psi4.core.SuperFunctional) → None¶; Allocates the vectors, should be called after ansatz or npoint changes. ansatz(self: psi4.core.SuperFunctional) → int¶; SuperFunctional",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.superfunctional.html:3463,test,testing,3463,psi4manual/1.4.0/api/psi4.core.superfunctional.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.superfunctional.html,2,['test'],['testing']
Testability,"S¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani et al. PCCP 9 6106 (2007).; Pyridine Dimers from Hohenstein et al. JPCA 113 878 (2009).; Collection into NBC10 from Burns et al. JCP 134 084107 (2011).; Revised reference interaction energies (NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'NBC100' Burns et al. JCP 134 084107 (2011).; 'NBC10A' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; r",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_available_databases-1.html:1387,benchmark,benchmark,1387,psi4manual/4.0b5/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_available_databases-1.html,4,['benchmark'],['benchmark']
Testability,"S¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani et al. PCCP 9 6106 (2007).; Pyridine Dimers from Hohenstein et al. JPCA 113 878 (2009).; Collection into NBC10 from Burns et al. JCP 134 084107 (2011).; Revised reference interaction energies (NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'NBC100' Burns et al. JCP 134 084107 (2011).; 'NBC10A' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geome",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_available_databases-1.html:1372,benchmark,benchmark,1372,psi4manual/4.0b2/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_available_databases-1.html,12,['benchmark'],['benchmark']
Testability,"S¶. Which states to save AO transition OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CPHF_MEM_SAFETY_FACTOR¶. Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS¶. Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. DEBUG¶. The amount of debug information printed to the output file. Type: integer; Default: 0. DF_BASIS_SCF¶. Auxiliary basis for SCF. Type: string; Possible Values: basis string; Default: No Default. DO_SINGLETS¶. Do singlet states? Default true. Type: boolean; Default: true. DO_TRIPLETS¶. Do triplet states? Default true. Type: boolean; Default: true. EXPLICIT_HAMILTONIAN¶. Do explicit hamiltonian only?. Type: boolean; Default: false. FITTING_ALGORITHM¶. Fitting algorithm (0 for old, 1 for new). Type: integer; Default: 0. FITTING_CONDITION¶. The maximum reciprocal condition allowed in the fitting metric. Type: double; Default: 1.0e-12. MODULE¶. What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. MP2_OS_SCALE¶. The scale factor used for opposite-spin pairs in SCS computations. Type: double; Default: 6.0/5.0. MP2_SS_SCALE¶. The scale factor used for same-spin pairs in SCS computations. Type: double; Default: 1.0/3.0. MP2_TYPE¶. What algorithm to use for the MP2 computation. Type: string; Possible Values: DF, CONV; Default: DF. OMP_N_THREAD¶. The maximum number of integral threads (0 for omp_get_max_threads()). Type: integer; Default: 0. OPDM¶. Do compute the one particle density matrix, for properties?. Type: boolean; Default: false. OPDM_RELAX¶. Do add relaxation terms to the one particle density matrix, for properties?. Type: boolean; Default: false. PRINT¶. The amount of information printed to the output file. Type: integer; Default: 1. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF, ROHF; Default: RHF. SCF_TYPE¶. SCF Type. Type: string; Possible ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__cphf-1.html:2449,test,test,2449,psi4manual/4.0b5/autodir_options_c/module__cphf-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__cphf-1.html,4,['test'],['test']
Testability,"S¶. Which states to save AO transition OPDMs for? * Positive - Singlets * Negative - Triplets *. Type: array; Default: No Default. CPHF_MEM_SAFETY_FACTOR¶. Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS¶. Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. DEBUG¶. The amount of debug information printed to the output file. Type: integer; Default: 0. DF_BASIS_SCF¶. Auxiliary basis for SCF. Type: string; Possible Values: basis string; Default: No Default. DO_SINGLETS¶. Do singlet states? Default true. Type: boolean; Default: true. DO_TRIPLETS¶. Do triplet states? Default true. Type: boolean; Default: true. EXPLICIT_HAMILTONIAN¶. Do explicit hamiltonian only?. Type: boolean; Default: false. FITTING_ALGORITHM¶. Fitting algorithm (0 for old, 1 for new). Type: integer; Default: 0. FITTING_CONDITION¶. The maximum reciprocal condition allowed in the fitting metric. Type: double; Default: 1.0e-12. MODULE¶. What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF, RCPKS, RTDA, RTDDFT; Default: RCIS. OMP_N_THREAD¶. The maximum number of integral threads (0 for omp_get_max_threads()). Type: integer; Default: 0. PRINT¶. The amount of information printed to the output file. Type: integer; Default: 1. SCF_TYPE¶. SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS; Default: DIRECT. SCHWARZ_CUTOFF¶. The schwarz cutoff value. Type: double; Default: 1.0e-12. SOLVER_CONVERGENCE¶. Solver convergence threshold (max 2-norm). Type: conv double; Default: 1.0e-6. SOLVER_EXACT_DIAGONAL¶. Solver exact diagonal or eigenvalue difference?. Type: boolean; Default: false. SOLVER_MAXITER¶. Solver maximum iterations. Type: integer; Default: 100. SOLVER_MAX_SUBSPACE¶. DL Solver maximum number of subspace vectors. Type: integer; Default: 6. SOLVER_MIN_SUBSPACE¶. DL Solver number of subspace vectors to collapse to. Type: integer; Default: 2. SOLVER_NORM¶. DL Solver minimum corrector norm to a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__cphf-1.html:1932,test,test,1932,psi4manual/4.0b2/autodir_options_c/module__cphf-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodir_options_c/module__cphf-1.html,12,['test'],['test']
Testability,"T DIPOLE GRADIENT']. # Fill in energies for subsumed methods; if self.metameta['ptype'] == 'energy':; for wfn in VARH[mc['f_wfn']]:; for job in self.trove:; if ((wfn == job['f_wfn']) and (mc['f_basis'] == job['f_basis']); and (mc['f_options'] == job['f_options'])):; job['f_energy'] = task.extras['qcvars'][VARH[wfn][wfn]]. # Copy data from 'run' to 'obtained' table; for mce in self.trove:; if ((mc['f_wfn'] == mce['f_wfn']) and (mc['f_basis'] == mce['f_basis']); and (mc['f_options'] == mce['f_options'])):; mce['f_energy'] = mc['f_energy']; mce['f_gradient'] = mc['f_gradient']; mce['f_hessian'] = mc['f_hessian']; mce['f_dipole'] = mc['f_dipole']; mce['f_dipder'] = mc['f_dipder']. # logger.debug(""MC\n"" + pp.pformat(mc)). cbs_results, self.cbsrec = _assemble_cbs_components(self.metameta, self.trove, self.cbsrec). instructions = _summary_table(self.metadata, self.trove, self.cbsrec); core.print_out(instructions); logger.info(instructions). # logger.debug('CBS_RESULTS\n' + pp.pformat(cbs_results)); # logger.debug('GRAND_NEED\n' + pp.pformat(self.cbsrec)). cbs_results[""module""] = modules; return cbs_results. [docs]; def get_results(self, client: Optional[""qcportal.FractalClient""] = None) -> AtomicResult:; """"""Return results as Composite-flavored QCSchema."""""". assembled_results = self._prepare_results(client=client); E0 = assembled_results[""energy""]. # load QCVariables & properties; qcvars = {; 'CBS NUMBER': len(self.compute_list),; 'NUCLEAR REPULSION ENERGY': self.molecule.nuclear_repulsion_energy(),; }. properties = {; ""calcinfo_natom"": self.molecule.natom(),; ""nuclear_repulsion_energy"": self.molecule.nuclear_repulsion_energy(),; ""return_energy"": E0,; }. for qcv in ['CBS', 'CURRENT']:; qcvars[qcv + ' REFERENCE ENERGY'] = self.cbsrec[0]['d_energy']; qcvars[qcv + ' CORRELATION ENERGY'] = E0 - self.cbsrec[0]['d_energy']; qcvars[qcv + ('' if qcv == 'CURRENT' else ' TOTAL') + ' ENERGY'] = E0. for idelta in range(int(len(self.cbsrec) / 2)):; if idelta == 0:; continue; dc = idelta",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs.html:58474,log,logger,58474,psi4manual/1.8.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs.html,6,['log'],['logger']
Testability,"T DIPOLE GRADIENT']. # Fill in energies for subsumed methods; if self.metameta['ptype'] == 'energy':; for wfn in VARH[mc['f_wfn']]:; for job in self.trove:; if ((wfn == job['f_wfn']) and (mc['f_basis'] == job['f_basis']); and (mc['f_options'] == job['f_options'])):; job['f_energy'] = task.extras['qcvars'][VARH[wfn][wfn]]. # Copy data from 'run' to 'obtained' table; for mce in self.trove:; if ((mc['f_wfn'] == mce['f_wfn']) and (mc['f_basis'] == mce['f_basis']); and (mc['f_options'] == mce['f_options'])):; mce['f_energy'] = mc['f_energy']; mce['f_gradient'] = mc['f_gradient']; mce['f_hessian'] = mc['f_hessian']; mce['f_dipole'] = mc['f_dipole']; mce['f_dipder'] = mc['f_dipder']. # logger.debug(""MC\n"" + pp.pformat(mc)). cbs_results, self.cbsrec = _assemble_cbs_components(self.metameta, self.trove, self.cbsrec). instructions = _summary_table(self.metadata, self.trove, self.cbsrec); core.print_out(instructions); logger.info(instructions). # logger.debug('CBS_RESULTS\n' + pp.pformat(cbs_results)); # logger.debug('GRAND_NEED\n' + pp.pformat(self.cbsrec)). cbs_results[""module""] = modules; return cbs_results. def get_results(self, client: Optional[""FractalClient""] = None) -> AtomicResult:; """"""Return results as Composite-flavored QCSchema."""""". assembled_results = self._prepare_results(client=client); E0 = assembled_results[""energy""]. # load QCVariables & properties; qcvars = {; 'CBS NUMBER': len(self.compute_list),; 'NUCLEAR REPULSION ENERGY': self.molecule.nuclear_repulsion_energy(),; }. properties = {; ""calcinfo_natom"": self.molecule.natom(),; ""nuclear_repulsion_energy"": self.molecule.nuclear_repulsion_energy(),; ""return_energy"": E0,; }. for qcv in ['CBS', 'CURRENT']:; qcvars[qcv + ' REFERENCE ENERGY'] = self.cbsrec[0]['d_energy']; qcvars[qcv + ' CORRELATION ENERGY'] = E0 - self.cbsrec[0]['d_energy']; qcvars[qcv + ('' if qcv == 'CURRENT' else ' TOTAL') + ' ENERGY'] = E0. for idelta in range(int(len(self.cbsrec) / 2)):; if idelta == 0:; continue; dc = idelta * 2 + 1; qcvars[",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html:58042,log,logger,58042,psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,2,['log'],['logger']
Testability,"T(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. sad-scf-type; Test SAD SCF guesses on noble gas atom. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. extern3; External potential calculation with one Ghost atom and one point charge at the same position. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dct12; Spin-restricted DC-06 counterpart of dct1. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherril",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:46190,test,test,46190,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various b",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:31414,test,test,31414,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with functions to parse the input file and convert; Psithon into standard Python. Particularly, forms psi4; module calls that access the C++ side of Psi4. """""". __all__ = [""process_input""]. import os; import re; import uuid. from psi4 import core; from psi4.driver.p4util.exceptions import *; from psi4.driver.p4util.util import set_memory. # inputfile contents to be preserved from the processor; literals = {}. # experimental - whether to run py statements as they're parsed from psithon; runalso = False. def bad_option_syntax(line):; """"""Function to report bad syntax to screen and output file.""""""; message = ('Unsupported syntax:\n\n%s\n\n' % (line)); raise TestComparisonError(message). def process_word_quotes(matchobj):; """"""Function to determine if argument needs wrapping in quotes as string.""""""; dollar = matchobj.group(2); val = matchobj.group(3); if dollar:; # This is a python variable, make sure that it starts with a letter; if re.match(r'^[A-Za-z][\w]*', val):; return val; else:; message = (""Invalid Python variable: %s"" % (val)); raise TestComparisonError(message); elif re.match(r'^-?\d+\.?\d*(?:[Ee]-?\d+)?$', val):; # This must be a number, don't wrap it in quotes; return val; elif re.match(r'^\'.*\'$', val) or re.match(r'^\"".*\""$', val):; # This is already wrapped in quotes, do nothing; return val; else:; # This must be a string; return ""\""%s\"""" % (val). def quotify(string, isbasis=False):; """"""Function to wrap anything that looks like a string in quotes; and to remove leading dollar signs from python variables. When *basis*; is True, allows commas, since basis sets may have commas and are assured to; not involve a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/inputparser.html:1777,Test,TestComparisonError,1777,psi4manual/1.9.x/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/inputparser.html,2,['Test'],['TestComparisonError']
Testability,"TIONAL_SYMMETRY_NUMBER¶. Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. Examples¶; A thermochemical analysis is performed after any full (not just specific; symmetry subgroups). If the wavefunction is retained, it may be reused; at a different temperature, pressure, rotational symmetry number, or; isotopic substitution through the function psi4.driver.qcdb.vib.thermo(); as is shown in freq-isotope2.; A few summary psivars are set: “ZPVE”, “THERMAL ENERGY CORRECTION”,; “ENTHALPY CORRECTION”, “GIBBS FREE ENERGY CORRECTION”, “ZERO K; ENTHALPHY”, “THERMAL ENERGY”, “ENTHALPY”, “GIBBS FREE ENERGY”.; But additionally, every valid combination of {S, Cv, Cp, ZPE, E, H, G}; with {elec, trans, rot, vib, corr, tot} (e.g., vibrational entropy,; S_vib, and enthalpy correction, H_corr) is returned by dictionary; from the thermo function. See psi4/tests/pytests/test_vibanalysis.py; (near the end) for an example. Output¶; The full list of keywords for thermo is provided in Appendix THERMO.; Information on the Psithon function that drives frequency analyses is provided; at frequency(). table of contents. Vibrational and Thermochemical Analysis; Keywords; T; P; ROTATIONAL_SYMMETRY_NUMBER. Examples; Output. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Theoretical Methods: SCF to FCI; Vibrational and Thermochemical Analysis. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/thermo.html:2976,test,tests,2976,psi4manual/1.7.x/thermo.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/thermo.html,1,['test'],['tests']
Testability,"TO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). mp2-1; All-electron MP2 6-31G** geometry optimization of water. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. pubchem2; Superficial test of PubChem interface. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. aediis-1; ADIIS test case, from 10.1063/1.3304922. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. sapt11; sapt example with orbital freezing with alkali metal and dMP2. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. mbis-2; MBIS calculation on OH- (Expanded Arrays). phi-ao; Test computing values of basis functions (puream and non-pu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:1472,test,test,1472,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:55488,test,test,55488,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,8,['test'],"['test', 'tests']"
Testability,"Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addon",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/build_planning.html:56732,test,test,56732,psi4manual/master/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html,2,['test'],"['test', 'tests']"
Testability,"Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n`getconf _NPROCESSORS_ONLN`; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n`getconf _NPROCESSORS_ONLN`. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; tes",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:55098,test,test,55098,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,8,['test'],"['test', 'tests']"
Testability,"Test Gibbs free energies at 298 K of N2, H2O, and CH4. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dft-reference; MP2 with a PBE0 reference computation. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test th",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:14331,test,test,14331,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"Test Suite and Sample Inputs. Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can; be found in psi4/tests. After building the source code, these; can automatically be run by running ctest in the compilation; directory. More info on ctest options can be found; here. Sample input files; can be found in the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below.; Sample inputs accessible through interfaced executables are bulleted below. BRIANQC; CFOUR; CHEMPS2; COOKBOOK; DFTD3; DFTD4; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. fci-h2o-2; 6-31G H2O Test FCI Energy Point. fd-gradient; SCF STO-3G finite-difference tests. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. phi-ao; Test computing values of basis functions (puream and non-puream) at points. dfcasscf-sp; CASSCF/6-31G** energy point. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/testsuite.html:1105,test,test,1105,psi4manual/1.8.x/testsuite.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/testsuite.html,1,['test'],['test']
Testability,"Tests DF UHF hessian code for Ca = Cb. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. sapt-ecp; sapt0 of charged system in ECP basis set. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). sapt10; usapt example with empty beta due to frozen core. scf-hess1; RHF ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:33637,test,tests,33637,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['tests']
Testability,"These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. It's toast (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s n",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/build_planning.html:21827,test,tested,21827,psi4manual/1.7.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/build_planning.html,1,['test'],['tested']
Testability,"These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. It's toast (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:20927,test,tested,20927,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,1,['test'],['tested']
Testability,"These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. It's toast (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_print(ENABLE_CYTHONIZE ""Compile each python file rather than plaintext (requires cython) !experimental!"" OFF). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation di",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:20450,test,tested,20450,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['test'],['tested']
Testability,"This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. freq-isotope; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G g",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/testsuite-1.html:27824,test,test,27824,psi4manual/1.1.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/testsuite-1.html,4,['test'],['test']
Testability,"True)). # S/R: Quit sow after writing files. Initialize skeleton wfn to receive grad for reap; if freq_mode == 'sow':; optstash.restore(); optstash_conv.restore(); if return_wfn:; return (None, None); else:; return None; elif freq_mode == 'reap':; wfn = psi4.new_wavefunction(molecule, psi4.get_global_option('BASIS')). # Assemble Hessian from gradients; # Final disp is undisp, so wfn has mol, G, H general to freq calc; H = psi4.fd_freq_1(molecule, gradients, irrep) # TODO or moleculeclone?; wfn.set_hessian(H); wfn.set_frequencies(psi4.get_frequencies()). # The last item in the list is the reference energy, return it; psi4.set_variable('CURRENT ENERGY', energies[-1]). psi4.set_parent_symmetry(''); optstash.restore(); optstash_conv.restore(). if return_wfn:; return (wfn.hessian(), wfn); else:; return wfn.hessian(). else:; psi4.print_out(""""""hessian() will perform frequency computation by finite difference of analytic energies.\n""""""). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash.restore(); optstash_conv.restore(); optstash_conv = driver_util._set_convergence_criterion('energy', lowername, 10, 11, 10, 11, 10). # Shifting the geometry so need to copy the active molecule; moleculeclone = molecule.clone(). # Obtain list of displacements; displacements = psi4.fd_geoms_freq_0(moleculeclone, irrep); moleculeclone.fix_orientation(True); moleculeclone.reinterpret_coordentry(False). # Record undisplaced symmetry for projection of diplaced point groups; psi4.set_parent_symmetry(molecule.schoenflies_symbol()). ndisp = len(displacements). # This version is pretty dependent on the reference geometry being last (as it is now); print(' %d displacements needed.' % ndisp); energies = []. # S/R: Write instructions for sow/reap procedure to output file and reap input file; if freq_mode == 'sow':; instructionsO = """"""\n# The frequency sow/reap procedure has been selected through mode='sow'. In addition\n""""""; instructionsO += ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver.html:72492,test,test,72492,psi4manual/1.0.0/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver.html,1,['test'],['test']
Testability,"U decomposition. These operations are performed on vectors and matrices provided from the Psi library. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. fnocc5; Test FNO-DF-CCSD(T) energy. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cbs-xtpl-energy; Extrapolated water energies. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. dft-reference; MP2 with a PBE0 reference computation. mbis-1; MBIS calculation on H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry op",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:40043,test,testing,40043,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['testing']
Testability,"Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; objdir/CMakeCache.txt. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; >>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 5 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. Pytest has similar commands; * Run tests in parallel with -n flag (if extenstion pytest-xdist installed). For maximum parallelism: pytest -n`getconf _NPROCESSORS_ONLN`; * Run full test suite: pytest; * Run the quick tests: pytest -m quick; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: pytest -m smoke; * Run tests matching by name: pytest -k testname; * Run tests excluding those by name: pytest -k ""not testname""; * Run tests matching by label: pytest -m testlabel; * Run tests excluding those by label: pytest -m ""not testlabel"". How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:52664,test,test,52664,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,52,['test'],"['test', 'testlabel', 'testname', 'tests']"
Testability,"V(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 5. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. 1; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. 2(1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. 3(1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. 4; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. 5; N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Appendices; Basis Sets by Family. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/basissets_tables.html:5866,stub,stub,5866,psi4manual/1.6.x/basissets_tables.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/basissets_tables.html,4,['stub'],"['stub', 'stubXZ-JKFIT']"
Testability,"VDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-meta; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:24857,test,test,24857,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"VDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-meta; meta-GGA gradients of water and ssh molecules. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 ele",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:25826,test,test,25826,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"VDZ energy for the \(^2\Sigma^+\) state of the CN radical. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. fnocc7; Test fnocc with linear dependencies. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. fsapt-ext-abc; FSAPT with external charge on trimer. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. scf-level-shift-uhf; SCF level shift on a UHF computation. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:46024,test,test,46024,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"VDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and bro",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:40093,test,test,40093,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"VDZ. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. freq-masses; check nonphysical masses possible. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf6; Tests RHF/ROHF/UHF SCF gradients. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc13c; Tests RHF CCSD(T)gradients. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri den",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:6147,test,tests,6147,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"VECS_PER_ROOT (CCEOM). STABILITY_ADD_VECTORS (DCFT). STABILITY_ANALYSIS (SCF). STABILITY_AUGMENT_SPACE_TOL (DCFT). STABILITY_CHECK (DCFT). STABILITY_CONVERGENCE (DCFT). STABILITY_MAX_SPACE_SIZE (DCFT). STABILITY_N_EIGENVALUES (DCFT). STABILITY_N_GUESS_VECTORS (DCFT). status() Section method. STEP_TYPE (OPTKING). store_data() GetkwParser method. store_key() GetkwParser method. store_vector() GetkwParser method. sub() in module qcdb.vecutil. success() in module p4util.util. superfunctional_list() in module functional. sym_label() LibmintsMolecule method. symbol() CoordEntry method. LibmintsMolecule method. symmetrize() LibmintsMolecule method. symmetry. molecule. symmetry_frame() LibmintsMolecule method. symmetry_from_input() LibmintsMolecule method. T. T (THERMO). T2_COUPLED (CCENERGY). T3_WS_INCORE (CCENERGY). (CCEOM). T_AMPS (CCHBAR). Table class in p4util.text. tblhead() in module wrappers. TDHF_MEM_SAFETY_FACTOR (CPHF). TDM (DETCI). TDM_PRINT (DETCI). TDM_WRITE (DETCI). test() in module pcmgetkw. TEST_B (OPTKING). test_ccl_functional() in module functional. TEST_DERIVATIVE_B (OPTKING). theory; . ADC. CC. CI. DCFT. DF-MP2. DFT. OCEPA. OEProp. OMP2. OMP3. Orbital-Optimized Methods. SAPT. SCF. cbs(), [1]. THETA_POINTS (SCF). THICKNESS (SCF). threading. TIKHONOW_MAX (PSIMRCC). TIKHONOW_OMEGA (DCFT). (PSIMRCC). TIKHONOW_TRIPLES (PSIMRCC). TILE_SZ (SCF). TPDM (DCFT). (DETCI). TPDM_ABCD_TYPE (OCC). TPDM_ADD_REF (TRANSQT). TPDM_FILE (TRANSQT). TPDM_PRINT (DETCI). transition state; . geometry optimization. translate() LibmintsMolecule method. transpose() in module qcdb.vecutil. TRIPLES_ALGORITHM (PSIMRCC). TRIPLES_DIIS (PSIMRCC). TRIPLES_LOW_MEMORY (FNOCC). TURN_ON_ACTV (MCSCF). TWO-ELECTRONENERGY. type() CartesianEntry method. NumberValue method. VariableValue method. ZMatrixEntry method. typecheck() Keyword method. U. UNCP-CORRECTED2-BODYINTERACTIONENERGY. unique() LibmintsMolecule method. units; . molecule. UNITS (GLOBALS). units() LibmintsMolecule method. UPDATE (DETCI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/genindex.html:47526,test,test,47526,psi4manual/4.0b5/genindex.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/genindex.html,1,['test'],['test']
Testability,"VTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Appendices. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/testsuite-1.html:40013,benchmark,benchmark,40013,psi4manual/1.2.1/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/testsuite-1.html,4,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"Various DCT analytic gradients for the O2 molecule with 6-31G basis set. sapt-compare; SAPT0 aug-cc-pVDZ computation of the water-water interaction energy, using the three SAPT codes. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. ao-dfcasscf-sp; CASSCF/6-31G** energy point. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. scf-upcast-custom-basis; test scf castup with custom basis sets. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. mbis-4; MBIS calculation on NaCl. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizab",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:40743,test,test,40743,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"X and HOST are defined upon; activation). >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${CONDA_PREFIX}/bin/${HOST} --sysroot=${CONDA_PREFIX}/${HOST}/sysroot"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${CONDA_PREFIX}/bin/${HOST} --sysroot=${CONDA_PREFIX}/${HOST}/sysroot"". Build on Linux with specific (GCC) compilers from; from conda in activated environment; (CONDA_PREFIX and HOST are defined upon; activation). >>> cmake -DCMAKE_C_COMPILER=${GCC} \; -DCMAKE_CXX_COMPILER=${GXX} \; -DCMAKE_Fortran_COMPILER=${GFORTRAN}. What C and C++ compilers and versions are approved¶; On Linux, the following work nicely. GNU: gcc, g++; Intel: icc, icpc; Clang: clang, clang++. On Mac, the following work nicely. Apple Clang: clang, clang++; Intel: icc, icpc. PSI4 requires full C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; psi4/cmake/custom_cxxstandard.cmake, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both icpc and gcc versions are checked. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; pa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:30964,test,test,30964,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['test'],['test']
Testability,"X and HOST are defined upon; activation). >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${CONDA_PREFIX}/bin/${HOST} --sysroot=${CONDA_PREFIX}/${HOST}/sysroot"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${CONDA_PREFIX}/bin/${HOST} --sysroot=${CONDA_PREFIX}/${HOST}/sysroot"". Build on Linux with specific (GCC) compilers from; from conda in activated environment; (CONDA_PREFIX and HOST are defined upon; activation). >>> cmake -DCMAKE_C_COMPILER=${GCC} \; -DCMAKE_CXX_COMPILER=${GXX} \; -DCMAKE_Fortran_COMPILER=${GFORTRAN}. What C and C++ compilers and versions are approved¶; On Linux, the following work nicely. GNU: gcc, g++; Intel: icc, icpc; Clang: clang, clang++. On Mac, the following work nicely. Apple Clang: clang, clang++; Intel: icc, icpc. PSI4 requires full C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; psi4/cmake/custom_cxxstandard.cmake, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both icpc and gcc versions are checked. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. Note that this “AppleClang” will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives.; Another route to obtaining clang compilers without the above limitations; is through conda.; # Install Clang 4.0.1 into a non-primary conda environment; >>> conda create -n clang401 clangxx_osx-64 clang_osx-64 llvm-openmp intel-openmp. # To Build, activate environment ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:32327,test,test,32327,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['test'],['test']
Testability,"X and HOST are defined upon; activation). >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${CONDA_PREFIX}/bin/${HOST} --sysroot=${CONDA_PREFIX}/${HOST}/sysroot"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${CONDA_PREFIX}/bin/${HOST} --sysroot=${CONDA_PREFIX}/${HOST}/sysroot"". Build on Linux with specific (GCC) compilers from; from conda in activated environment; (CONDA_PREFIX and HOST are defined upon; activation). >>> cmake -DCMAKE_C_COMPILER=${GCC} \; -DCMAKE_CXX_COMPILER=${GXX} \; -DCMAKE_Fortran_COMPILER=${GFORTRAN}. What C and C++ compilers and versions are approved¶; On Linux, the following work nicely. GNU: gcc, g++; Intel: icc, icpc; Clang: clang, clang++. On Mac, the following work nicely. Apple Clang: clang, clang++; Intel: icc, icpc. PSI4 requires full C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; psi4/cmake/custom_cxxstandard.cmake, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both icpc and gcc versions are checked.; Intel OneAPI Classic compilers work fine. OneAPI beta compilers build but have; been only minimally tested. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. Note that this “AppleClang” will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives.; Another route to obtaining clang compilers without the above limitations; is through conda.; # Install Clang 4.0.1 into a non-primary conda environment; >>> con",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:35245,test,test,35245,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,8,['test'],['test']
Testability,"XED, INTERFRAGMENT; Default: FIXED. Misc.¶. FINAL_GEOM_WRITE¶. Do save and print the geometry from the last projected step at the end of a geometry optimization? Otherwise (and by default), save and print the previous geometry at which was computed the gradient that satisfied the convergence criteria. Type: boolean; Default: false. KEEP_INTCOS¶. Keep internal coordinate definition file. Type: boolean; Default: false. LINESEARCH_STATIC_MAX¶. If doing a static line search, this fixes the largest step, whose largest change in an internal coordinate is set to this value (in au). Type: double; Default: 0.100. LINESEARCH_STATIC_MIN¶. If doing a static line search, this fixes the shortest step, whose largest change in an internal coordinate is set to this value (in au). Type: double; Default: 0.001. LINESEARCH_STATIC_N¶. If doing a static line search, scan this many points. Type: integer; Default: 8. TEST_B¶. Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B¶. Do test derivative B matrix?. Type: boolean; Default: false. Table Of Contents. OPTKING; Optimization Algorithm; CONSECUTIVE_BACKSTEPS; FIXED_BEND; FIXED_DIHEDRAL; FIXED_DISTANCE; FROZEN_BEND; FROZEN_DIHEDRAL; FROZEN_DISTANCE; GEOM_MAXITER; INTERFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT_MAX; INTRAFRAG_STEP_LIMIT_MIN; IRC_DIRECTION; IRC_STEP_SIZE; IRC_STOP; OPT_TYPE; RFO_FOLLOW_ROOT; RFO_ROOT; STEP_TYPE. Convergence Control; FLEXIBLE_G_CONVERGENCE; G_CONVERGENCE; MAX_DISP_G_CONVERGENCE; MAX_ENERGY_G_CONVERGENCE; MAX_FORCE_G_CONVERGENCE; RMS_DISP_G_CONVERGENCE; RMS_FORCE_G_CONVERGENCE. Hessian Update; CART_HESS_READ; FULL_HESS_EVERY; HESS_UPDATE; HESS_UPDATE_LIMIT; HESS_UPDATE_LIMIT_MAX; HESS_UPDATE_LIMIT_SCALE; HESS_UPDATE_USE_LAST; INTRAFRAG_HESS. Fragment/Internal Coordinate Control; ADD_AUXILIARY_BONDS; COVALENT_CONNECT; FRAG_MODE; FREEZE_INTERFRAG; FREEZE_INTRAFRAG; H_BOND_CONNECT; INTCOS_GENERATE_EXIT; INTERFRAGMENT_CONNECT; INTERFRAG_DIST_INV; INTERFRAG_HESS; INTERFRAG_MODE. M",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__optking-1.html:7885,test,test,7885,psi4manual/4.0b5/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodir_options_c/module__optking-1.html,4,['test'],['test']
Testability,"XX_FLAGS=""-gnu-prefix=${CONDA_PREFIX}/bin/${HOST} --sysroot=${CONDA_PREFIX}/${HOST}/sysroot"". Build on Linux with specific (GCC) compilers from; from conda in activated environment; (CONDA_PREFIX and HOST are defined upon; activation). >>> cmake -DCMAKE_C_COMPILER=${GCC} \; -DCMAKE_CXX_COMPILER=${GXX} \; -DCMAKE_Fortran_COMPILER=${GFORTRAN}. What C and C++ compilers and versions are approved¶; On Linux, the following work nicely. GNU: gcc, g++; Intel: icc, icpc; Clang: clang, clang++. On Mac, the following work nicely. Apple Clang: clang, clang++; Intel: icc, icpc. PSI4 requires full C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; psi4/cmake/custom_cxxstandard.cmake, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both icpc and gcc versions are checked.; Intel OneAPI Classic compilers work fine. OneAPI beta compilers build but have; been only minimally tested. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. Note that this “AppleClang” will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives.; Another route to obtaining clang compilers without the above limitations; is through conda.; # Install Clang 4.0.1 into a non-primary conda environment; >>> conda create -n clang401 clangxx_osx-64 clang_osx-64 llvm-openmp intel-openmp. # To Build, activate environment (prepends PATH and defines environment variables CLANG, CLANGXX, HOST, etc):; >>> conda activate clang401; >>>",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:35491,test,tested,35491,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,8,['test'],['tested']
Testability,"Z Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. mbis-1; MBIS calculation on H2O. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-grac; Gradient regularized asymptotic correction (GRAC) test. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. scf-auto-cholesky; Cholesky filter a complete basis. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. dft-pruning; Tests all grid pruning options available and screening of small wei",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:3856,test,test,3856,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"Z energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:38915,test,test,38915,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"[""all""]:; for pair in compute_dict[""all""][nb]:; lbl = labeler(pair); if lbl in self.task_list:; continue. data = template; ghost = list(set(pair[1]) - set(pair[0])); data[""molecule""] = self.molecule.extract_subsets(list(pair[0]), ghost); if self.embedding_charges:; embedding_frags = list(set(range(1, self.nfragments + 1)) - set(pair[1])); charges = []; for frag in embedding_frags:; positions = self.molecule.extract_subsets(frag).geometry().np.tolist(); charges.extend([[chg, i] for i, chg in zip(positions, self.embedding_charges[frag])]); data['keywords']['function_kwargs'].update({'external_potentials': charges}). self.task_list[lbl] = mb_computer(**data); count += 1. return count. [docs]; def plan(self):; # uncalled function; return [t.plan() for t in self.task_list.values()]. [docs]; def compute(self, client: Optional[""qcportal.FractalClient""] = None):; """"""Run quantum chemistry."""""". info = ""\n"" + p4util.banner(f"" ManyBody Computations "", strNotOutfile=True) + ""\n""; #core.print_out(info); logger.info(info). with p4util.hold_options_state():; for t in self.task_list.values():; t.compute(client=client). [docs]; def prepare_results(; self,; results: Optional[Dict[str, SubTaskComputers]] = None,; client: Optional[""qcportal.FractalClient""] = None,; ) -> Dict[str, Any]:; """"""Process the results from all n-body component molecular systems and model chemistry levels into final quantities. Parameters; ----------; results; A set of tasks to process instead of self.task_list. Used in multilevel processing to pass a subset of; self.task_list filtered to only one modelchem level.; client; QCFractal client if using QCArchive for distributed compute. Returns; -------; nbody_results; When the ManyBodyComputer specifies a single model chemistry level (see self.nbodies_per_mc_level), the; return is a dictionary, nbody_results, described in the table below. Many of the items are actually filled; by successive calls to assemble_nbody_components(). When multiple model chemistry levels a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_nbody.html:39569,log,logger,39569,psi4manual/1.8.x/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_nbody.html,6,['log'],['logger']
Testability,"['l', r""""""Method \& Basis Set"""""", '', textables.label, {}],; # ['d', r'MAE', 'HB', textables.val, {'sset': 'hb'}],; # ['d', r'MAE', 'MX', textables.val, {'sset': 'mx'}],; # ['d', r'MAE', 'DD', textables.val, {'sset': 'dd'}],; # ['d', r'MAE', 'TT', textables.val, {'sset': 'default'}],; # ['d', r'MA\%E', 'HB', textables.val, {'sset': 'hb', 'err': 'mape'}],; # ['d', r'MA\%E', 'MX', textables.val, {'sset': 'mx', 'err': 'mape'}],; # ['d', r'MA\%E', 'DD', textables.val, {'sset': 'dd', 'err': 'mape'}],; # ['d', r'MA\%E', 'TT', textables.val, {'sset': 'default', 'err': 'mape'}],; # ['d', r'maxE', 'TT ', textables.val, {'sset': 'default', 'err': 'maxe'}],; # ['d', r'min\%E', ' TT', textables.val, {'sset': 'default', 'err': 'minpe'}],; # ['d', r'rmsE', 'TT ', textables.val, {'sset': 'default', 'err': 'rmse'}],; # ['d', r'devE', ' TT', textables.val, {'sset': 'default', 'err': 'stde'}],; # ]; #; # def table_simple3(self, mtd, bas, opt=['CP'], err=['mae'], benchmark='default', failoninc=True,; # plotpath='analysis/flats/flat_', theme='smmerge'):; # rowplan = ['err', 'bas', 'mtd']; # columnplan = [; # ['l', r""""""Method \& Basis Set"""""", '', textables.label, {}],; # ['d', r'MAE', 'HB', textables.val, {'sset': 'hb'}],; # ['d', r'MAE', 'MX', textables.val, {'sset': 'mx'}],; # ['d', r'MAE', 'DD', textables.val, {'sset': 'dd'}],; # ['d', r'MAE', 'TT', textables.val, {'sset': 'default'}],; # ]; #; # def table_simple4(self, mtd, bas, opt=['CP'], err=['mae'], benchmark='default', failoninc=True,; # plotpath='analysis/flats/flat_', theme='smmerge'):; # plotpath = 'autogen' # TODO handle better; # rowplan = ['bas', 'mtd']; # columnplan = [; # ['l', r""""""Method \& Basis Set"""""", '', textables.label, {}],; # ['d', r'S22', 'HB', textables.val, {'sset': 'hb'}],; # ['d', r'S22', 'MX', textables.val, {'sset': 'mx'}],; # ['d', r'S22', 'DD', textables.val, {'sset': 'dd'}],; # ['d', r'S22', 'TT', textables.val, {'sset': 'default'}],; # # ['l', r""""""Error Distribution\footnotemark[1]"""""", r""""""\includegrap",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:45204,benchmark,benchmark,45204,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"['verbose'] = 0; dummyplan = CompositeComputer(**packet, **simplecbsmeta, molecule=original_molecule, **simplekwargs). methods = [sr.method for sr in dummyplan.task_list]; # TODO: pass more info, so fn can use for managed_methods -- ref, qc_module, fc/ae, conv/df; dermode = negotiate_derivative_type(driver, methods, kwargs.pop('dertype', None), verbose=1). if dermode[0] == dermode[1]: # analytic; logger.info(""PLANNING MB(CBS): {mc_level_idx=} {packet=} {cbsmeta=} kw={kwargs}""); plan.build_tasks(CompositeComputer, **packet, mc_level_idx=mc_level_idx, **cbsmeta, **kwargs). else:; logger.info(; f""PLANNING MB(FD(CBS): {mc_level_idx=} {packet=} {cbsmeta=} findif_kw={current_findif_kwargs} kw={kwargs}""; ); plan.build_tasks(FiniteDifferenceComputer,; **packet,; mc_level_idx=mc_level_idx,; findif_mode=dermode,; computer=CompositeComputer,; **cbsmeta,; **current_findif_kwargs,; **kwargs). else:; dermode = negotiate_derivative_type(driver, method, kwargs.pop('dertype', None), verbose=1); if dermode[0] == dermode[1]: # analytic; logger.info(f""PLANNING MB: {mc_level_idx=} {packet=}""); plan.build_tasks(AtomicComputer, **packet, mc_level_idx=mc_level_idx, **kwargs); else:; logger.info(; f""PLANNING MB(FD): {mc_level_idx=} {packet=} findif_kw={current_findif_kwargs} kw={kwargs}""; ); plan.build_tasks(FiniteDifferenceComputer,; **packet,; mc_level_idx=mc_level_idx,; findif_mode=dermode,; **current_findif_kwargs,; **kwargs). return plan. # Check for CBS; elif method == ""cbs"":; kwargs.update(cbsmeta); # This CompositeComputer is discarded after being used for dermode. Could have used directly for analytic except for excess printing with FD; simplekwargs = copy.deepcopy(kwargs); simplekwargs['verbose'] = 0; dummyplan = CompositeComputer(**packet, **simplekwargs). methods = [sr.method for sr in dummyplan.task_list]; # TODO: pass more info, so fn can use for managed_methods -- ref, qc_module, fc/ae, conv/df; dermode = negotiate_derivative_type(driver, methods, kwargs.pop('dertype', None),",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_planner.html:8646,log,logger,8646,psi4manual/1.7.x/_modules/psi4/driver/task_planner.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_planner.html,8,['log'],['logger']
Testability,"[(s if s is None else int(s)) for s in dicary[""fragment_separators""]]; # forgive generator version changes; if ""provenance"" in dicary:; dicary[""provenance""].pop(""version""); # regularize connectivity ordering; if ""connectivity"" in dicary:; conn = [(min(at1, at2), max(at1, at2), bo) for (at1, at2, bo) in dicary[""connectivity""]]; conn.sort(key=lambda tup: tup[0]); dicary[""connectivity""] = conn. return dicary. xptd = massage_dicts(xptd); cptd = massage_dicts(cptd). if relative_geoms == ""exact"":; pass; elif relative_geoms == ""align"":; # can't just expect geometries to match, so we'll align them, check that; # they overlap and that the translation/rotation arrays jibe with; # fix_com/orientation, then attach the oriented geom to computed before the; # recursive dict comparison.; from .molutil.align import B787. cgeom = np.array(cptd[""geom""]).reshape((-1, 3)); rgeom = np.array(xptd[""geom""]).reshape((-1, 3)); rmsd, mill = B787(; rgeom=rgeom,; cgeom=cgeom,; runiq=None,; cuniq=None,; atoms_map=True,; mols_align=True,; run_mirror=False,; verbose=0,; ); if cptd[""fix_com""]:; return compare(; True,; np.allclose(np.zeros((3)), mill.shift, atol=atol),; ""null shift"",; quiet=(verbose == 0),; return_message=return_message,; return_handler=return_handler,; ); if cptd[""fix_orientation""]:; return compare(; True,; np.allclose(np.identity(3), mill.rotation, atol=atol),; ""null rotation"",; quiet=(verbose == 0),; return_message=return_message,; return_handler=return_handler,; ); ageom = mill.align_coordinates(cgeom); cptd[""geom""] = ageom.reshape((-1)). return compare_recursive(; xptd,; cptd,; atol=atol,; rtol=rtol,; label=label,; forgive=forgive,; quiet=(verbose == 0),; return_message=return_message,; return_handler=return_handler,; ). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.10a1.dev61;  · . PSI4. Module code; qcelemental.testing. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/_modules/qcelemental/testing.html:17443,test,testing,17443,psi4manual/master/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/master/_modules/qcelemental/testing.html,2,['test'],['testing']
Testability,"[docs]def compare_arrays(expected, computed, digits, label):; """"""Function to compare two numpy arrays. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. """""". try:; shape1 = expected.shape; shape2 = computed.shape; except:; raise TestComparisonError(""Input objects do not have a shape attribute.""). if shape1 != shape2: ; TestComparisonError(""Input shapes do not match.""). if not np.allclose(expected, computed, atol=digits):; message = ""\tArray difference norm is %12.6f."" % np.linalg.norm(expected - computed); raise TestComparisonError(message); success(label). [docs]def compare_cubes(expected, computed, label):; """"""Function to compare two cube files. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; # Skip the first six elemets which are just labels; evec = [float(k) for k in expected.split()[6:]]; cvec = [float(k) for k in computed.split()[6:]]; if len(evec) == len(cvec):; for n in range(len(evec)):; if (math.fabs(evec[n]-cvec[n]) > 1.0e-4):; message = (""\t%s: computed cube file does not match expected cube file."" % label); raise TestComparisonError(message); else:; message = (""\t%s: computed cube file does not match expected cube file."" % (label, computed, expected)); raise TestComparisonError(message); success(label). [docs]def copy_file_to_scratch(filename, prefix, namespace, unit, move = False):. """"""Function to move file into scratch with correct naming; convention. Arguments:. @arg filename full path to file; @arg prefix computation prefix, usually 'psi'; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy). Example:. Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html:9547,test,test,9547,psi4manual/1.0.0/_modules/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html,1,['test'],['test']
Testability,"[here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:46903,test,tests,46903,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,4,['test'],['tests']
Testability,"[here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable; psi4 --test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed,. can run in parallel, though final file cleanup may not exit cleanly. pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n`getconf _NPROCESSORS_ONLN",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:49852,test,tests,49852,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,4,['test'],['tests']
Testability,"[poodle](https://github.com/psi4/psi4meta/blob/master/psinet-nightly/kitandkapoodle.py); A couple weeks before the first “rc” is planned, start going through L/LT in poodle, checking with upstream to see if new versions have been released. If good changes present, rebuild the packages, changing the version numbers in the respective recipes; When L/LT all built and passed, edit the individual package version numbers in cbcy and increment to a new ltrtver with updated version numbers and/or build numbers (only if code changes); Build L/PSI4. If any trouble, edit psi4 code. Iterate until builds and passes. This stage is the only full ctest & pytest on Psi4+upstream; Build L/RT-MP. If any trouble, edit code in L/RT and rebuild those package(s). Iterate until builds and passes. This stage is the only full ctest & pytest of Psi4+downstream; Build L/DEV. If any trouble, edit psi4 build system, plugin system, or OpenMP setup. Iterate until builds and passes; Build L/DOCS. If any trouble, edit the docs or the tests. Iterate until builds and passes; Results of last should upload to psicode.org (docs) and codecov.io (coverage); Changes to targets’ “source” and “version” in individual recipes should be edited in psi4 external/*/*/CMakeLists.txt files; Once everything’s working on Linux, repeat on Mac; At this point, ready to fine-tune builds of “Psi4 stack”. Assemble postrelease changes¶. Collect PRs with “backport” label, and request other backport suggestions on upcoming RN issue; Cherry-pick backport PRs and commits, apply other changes manually, not forgetting CI files; Do the draft parts of Publish GitHub postrelease; Test thoroughly locally, including psi4-rt (may have to step back for dependency versions or builds); Note that while can’t change maintenance branch’s history, can push to it directly on upstream; If want to do trial conda builds, requires source/git_tag: 1.3.x and fake package/version: v1.3.1rc1. Tweak Conda for postrelease¶. In psi4-* recipes, find the bes",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_release-1.html:3745,test,tests,3745,psi4manual/1.4.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_release-1.html,7,['test'],['tests']
Testability,"[sl, 0], idxs[sl, 1])] = ints[sl]; Hcore[(idxs[sl, 1], idxs[sl, 0])] = ints[sl]; intdump['hcore'] = Hcore. # Extract ERIs; sl = slice(0, sl.start); eri = np.zeros((nbf, nbf, nbf, nbf)); eri[(idxs[sl, 0], idxs[sl, 1], idxs[sl, 2], idxs[sl, 3])] = ints[sl]; eri[(idxs[sl, 0], idxs[sl, 1], idxs[sl, 3], idxs[sl, 2])] = ints[sl]; eri[(idxs[sl, 1], idxs[sl, 0], idxs[sl, 2], idxs[sl, 3])] = ints[sl]; eri[(idxs[sl, 1], idxs[sl, 0], idxs[sl, 3], idxs[sl, 2])] = ints[sl]; eri[(idxs[sl, 2], idxs[sl, 3], idxs[sl, 0], idxs[sl, 1])] = ints[sl]; eri[(idxs[sl, 3], idxs[sl, 2], idxs[sl, 0], idxs[sl, 1])] = ints[sl]; eri[(idxs[sl, 2], idxs[sl, 3], idxs[sl, 1], idxs[sl, 0])] = ints[sl]; eri[(idxs[sl, 3], idxs[sl, 2], idxs[sl, 1], idxs[sl, 0])] = ints[sl]; intdump['eri'] = eri. return intdump. [docs]def compare_fcidumps(expected, computed, label):; """"""Function to compare two FCIDUMP files. Prints success; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. :returns: a dictionary of energies computed from the MO integrals.; - 'NUCLEAR REPULSION ENERGY' : nuclear repulsion plus frozen core energy; - 'ONE-ELECTRON ENERGY' : SCF one-electron energy; - 'TWO-ELECTRON ENERGY' : SCF two-electron energy; - 'SCF TOTAL ENERGY' : SCF total energy; - 'MP2 CORRELATION ENERGY' : MP2 correlation energy. :param expected: reference FCIDUMP file; :param computed: computed FCIDUMP file; :param label: string labelling the test; """""". # Grab expected header and integrals; ref_intdump = fcidump_from_file(expected); intdump = fcidump_from_file(computed). # Compare headers; compare_recursive(; ref_intdump,; intdump,; 'FCIDUMP header',; forgive=['enuc', 'hcore', 'eri', 'epsilon']). ref_energies = energies_from_fcidump(ref_intdump); energies = energies_from_fcidump(intdump). pass_1el = compare_values(ref_energies['ONE-ELECTRON ENERGY'], energies['ONE-ELECTRON ENERGY'], 7,; label + '. 1-electron energy'); pass_2el = compare_values(ref_energies['T",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/fcidump.html:12121,test,test,12121,psi4manual/1.4.0/_modules/psi4/driver/p4util/fcidump.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/fcidump.html,4,['test'],['test']
Testability,"[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file out of scratch with correct naming; convention.; Arguments:; @arg filename full path to target file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32 ; @arg move copy or move? (default copy); Example:; Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch(‘temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 .temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 /tmp/temp; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_driver-1.html:20115,test,test,20115,psi4manual/4.0b2/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_driver-1.html,4,['test'],['test']
Testability,"[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file out of scratch with correct naming; convention.; Arguments:; @arg filename full path to target file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy); Example:; Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch(‘temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 .temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 /tmp/temp; c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:133369,test,test,133369,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,6,['test'],['test']
Testability,"\n', end=""""); sys.stdout.flush(). # Load in displacement into the active molecule (xyz coordinates only); molecule.set_geometry(displacement). # Perform the gradient calculation; func(lowername, **kwargs). # Save the gradient; G = psi4.get_gradient(); gradients.append(G). # clean may be necessary when changing irreps of displacements; psi4.clean(). psi4.fd_freq_1(gradients, irrep). print(' Computation complete.'). # Clear the ""parent"" symmetry now; psi4.set_parent_symmetry(""""). # TODO: These need to be restored to the user specified setting; psi4.get_active_molecule().fix_orientation(False); # But not this one, it always goes back to True; psi4.get_active_molecule().reinterpret_coordentry(True). optstash.restore(); # TODO: add return statement of hessian matrix; # TODO: set current energy to un-displaced energy. else:; # If not, perform finite difference of energies; print('Performing finite difference calculations by energies'). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash.restore(); if not psi4.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; psi4.set_local_option('SCF', 'E_CONVERGENCE', 10); else:; psi4.set_local_option('SCF', 'E_CONVERGENCE', 11); if not psi4.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; psi4.set_local_option('SCF', 'D_CONVERGENCE', 10); else:; psi4.set_local_option('SCF', 'D_CONVERGENCE', 11). # Set post-scf convergence criteria (global will cover all correlated modules); if not psi4.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; psi4.set_global_option('E_CONVERGENCE', 10). # Obtain list of displacements; displacements = psi4.fd_geoms_freq_0(irrep); molecule.fix_orientation(True); molecule.reinterpr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/driver.html:64622,test,test,64622,psi4manual/4.0b5/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/driver.html,2,['test'],['test']
Testability,"\tThe reference has %d entries in irrep %d, but the computed vector has %d\n."" % (expected.dim(irrep), irrep, computed.dim(irrep))); raise TestComparisonError(message); dim = expected.dim(irrep); failed = 0; for entry in range(dim):; if(abs(expected.get(irrep, entry) - computed.get(irrep, entry)) > 10 ** (-digits)):; failed = 1; break. if(failed):; psi4.print_out(""The computed vector\n""); computed.print_out(); psi4.print_out(""The reference vector\n""); expected.print_out(); message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed.get(irrep, entry), expected.get(irrep, entry))); raise TestComparisonError(message); success(label). [docs]def compare_arrays(expected, computed, digits, label):; """"""Function to compare two numpy arrays. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. """""". try:; shape1 = expected.shape; shape2 = computed.shape; except:; raise TestComparisonError(""Input objects do not have a shape attribute.""). if shape1 != shape2: ; TestComparisonError(""Input shapes do not match.""). if not np.allclose(expected, computed, atol=digits):; message = ""\tArray difference norm is %12.6f."" % np.linalg.norm(expected - computed); raise TestComparisonError(message); success(label). [docs]def compare_cubes(expected, computed, label):; """"""Function to compare two cube files. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; # Skip the first six elemets which are just labels; evec = [float(k) for k in expected.split()[6:]]; cvec = [float(k) for k in computed.split()[6:]]; if len(evec) == len(cvec):; for n in range(len(evec)):; if (math.fabs(evec[n]-cvec[n]) > 1.0e-4):; message = (""\t%s: computed cube file does not match expected cube fi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html:8889,test,test,8889,psi4manual/1.0.0/_modules/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html,1,['test'],['test']
Testability,"] for {sset} $\\subset$ {dbse} with {mc}', indextitle='Detailed results for {sset} $\\subset$ {dbse} with {mc}', plotpath='analysis/mols/', standalone=True, theme='rxns', filename=None)[source]¶; Prepare single LaTeX table to filename or return lines if None showing; the per-reaction results for reactions in sset for single or array; or ‘all’ modelchem, where the last uses self.mcs(), model chemistries; versus benchmark. Use failoninc to toggle between command failing; or blank lines in table. Use standalone to toggle between full; compilable document and suitable for inclusion in another LaTeX document.; Use columnplan to customize column (from among columnreservoir, below); layout. Use title and indextitle to customize table caption and; table-of-contents caption, respectively; variables in curly braces will; be substituted. Use theme to customize the ref{tbl:} code. table_scrunch(plotpath, subjoin)[source]¶. table_wrapper(mtd, bas, tableplan, benchmark='default', opt=['CP'], err=['mae'], sset=['default'], dbse=None, opttarget=None, failoninc=True, xlimit=4.0, xlines=[0.0, 0.3, 1.0], ialimit=2.0, plotpath='autogen', subjoin=True, title=None, indextitle=None, suppressblanks=False, standalone=True, theme=None, filename=None)[source]¶; Prepares dictionary of errors for all combinations of mtd, opt,; bas with respect to model chemistry benchmark, mindful of failoninc.; The general plan for the table, as well as defaults for landscape,; footnotes, title, indextitle, and *theme are got from function; tableplan. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless filename is given,; in which case they’re written to file and a filedict returned. write_xyz_files(path=None)[source]¶; Writes xyz files for every reagent in the Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:42065,benchmark,benchmark,42065,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['benchmark'],['benchmark']
Testability,"]; eri[(idxs[sl, 2], idxs[sl, 3], idxs[sl, 0], idxs[sl, 1])] = ints[sl]; eri[(idxs[sl, 3], idxs[sl, 2], idxs[sl, 0], idxs[sl, 1])] = ints[sl]; eri[(idxs[sl, 2], idxs[sl, 3], idxs[sl, 1], idxs[sl, 0])] = ints[sl]; eri[(idxs[sl, 3], idxs[sl, 2], idxs[sl, 1], idxs[sl, 0])] = ints[sl]; intdump['eri'] = eri. return intdump. [docs]def compare_fcidumps(expected, computed, label):; """"""Function to compare two FCIDUMP files. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. :returns: a dictionary of energies computed from the MO integrals.; The key-value pairs are:; - 'NUCLEAR REPULSION ENERGY' : nuclear repulsion plus frozen core energy; - 'ONE-ELECTRON ENERGY' : SCF one-electron energy; - 'TWO-ELECTRON ENERGY' : SCF two-electron energy; - 'SCF TOTAL ENERGY' : SCF total energy; - 'MP2 CORRELATION ENERGY' : MP2 correlation energy. :param expected: reference FCIDUMP file; :param computed: computed FCIDUMP file; :param label: string labelling the test; """""". try:; from deepdiff import DeepDiff; except ImportError:; raise ImportError(""""""Install deepdiff. `conda install deepdiff -c conda-forge` or `pip install deepdiff`""""""). # Grab expected header and integrals; ref_intdump = fcidump_from_file(expected); intdump = fcidump_from_file(computed). # Compare headers; header_diff = DeepDiff(; ref_intdump,; intdump,; ignore_order=True,; exclude_paths={""root['enuc']"", ""root['hcore']"", ""root['eri']"", ""root['epsilon']""}); if header_diff:; message = (""\tComputed FCIDUMP file header does not match expected header.\n""); raise TestComparisonError(header_diff). ref_energies = _energies_from_fcidump(ref_intdump); energies = _energies_from_fcidump(intdump). pass_1el = compare_values(ref_energies['ONE-ELECTRON ENERGY'], energies['ONE-ELECTRON ENERGY'], 7, label + '. 1-electron energy'); pass_2el = compare_values(ref_energies['TWO-ELECTRON ENERGY'], energies['TWO-ELECTRON ENERGY'], 7, label + '. 2-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/fcidump.html:11908,test,test,11908,psi4manual/1.2.1/_modules/psi4/driver/p4util/fcidump.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/fcidump.html,1,['test'],['test']
Testability,"]; eri[(idxs[sl, 2], idxs[sl, 3], idxs[sl, 0], idxs[sl, 1])] = ints[sl]; eri[(idxs[sl, 3], idxs[sl, 2], idxs[sl, 0], idxs[sl, 1])] = ints[sl]; eri[(idxs[sl, 2], idxs[sl, 3], idxs[sl, 1], idxs[sl, 0])] = ints[sl]; eri[(idxs[sl, 3], idxs[sl, 2], idxs[sl, 1], idxs[sl, 0])] = ints[sl]; intdump['eri'] = eri. return intdump. [docs]def compare_fcidumps(expected, computed, label):; """"""Function to compare two FCIDUMP files. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. :returns: a dictionary of energies computed from the MO integrals.; The key-value pairs are:; - 'NUCLEAR REPULSION ENERGY' : nuclear repulsion plus frozen core energy; - 'ONE-ELECTRON ENERGY' : SCF one-electron energy; - 'TWO-ELECTRON ENERGY' : SCF two-electron energy; - 'SCF TOTAL ENERGY' : SCF total energy; - 'MP2 CORRELATION ENERGY' : MP2 correlation energy. :param expected: reference FCIDUMP file; :param computed: computed FCIDUMP file; :param label: string labelling the test; """""". try:; from deepdiff import DeepDiff; except ImportError:; raise ImportError(; """"""Python module deepdiff not found. Solve by installing it: `conda install deepdiff -c conda-forge` or `pip install deepdiff`""""""; ). # Grab expected header and integrals; ref_intdump = fcidump_from_file(expected); intdump = fcidump_from_file(computed). # Compare headers; header_diff = DeepDiff(; ref_intdump,; intdump,; ignore_order=True,; exclude_paths={""root['enuc']"", ""root['hcore']"", ""root['eri']"", ""root['epsilon']""}); if header_diff:; message = (""\tComputed FCIDUMP file header does not match expected header.\n""); raise TestComparisonError(header_diff). ref_energies = energies_from_fcidump(ref_intdump); energies = energies_from_fcidump(intdump). pass_1el = compare_values(ref_energies['ONE-ELECTRON ENERGY'], energies['ONE-ELECTRON ENERGY'], 7,; label + '. 1-electron energy'); pass_2el = compare_values(ref_energies['TWO-ELECTRON ENERGY'], energi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/fcidump.html:12633,test,test,12633,psi4manual/1.3.2/_modules/psi4/driver/p4util/fcidump.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/fcidump.html,1,['test'],['test']
Testability,"]def set_output_file(ofile: str, append: bool = False, *, loglevel: int = 20, execute: bool = True) -> Path:; """"""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""; out = Path(ofile); log = out.with_suffix("".log""). # Get the custom logger; import logging; from psi4 import logger; logger.setLevel(loglevel). # Create formatters; # * detailed: example: 2019-11-20:01:13:46,811 DEBUG [psi4.driver.task_base:156]; f_format_detailed = logging.Formatter(""%(asctime)s,%(msecs)d %(levelname)-8s [%(name)s:%(lineno)d] %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""); # * light: example: 2019-11-20:10:45:21 FINDIFREC CLASS INIT DATA; f_format_light = logging.Formatter(""%(asctime)s %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""). # Create handlers, add formatters to handlers, and add handlers to logger (StreamHandler() also available); filemode = ""a"" if append else ""w""; f_handler = logging.FileHandler(log, filemode); f_handler.setLevel(logging.DEBUG); f_handler.setFormatter(f_format_detailed). if execute:; core.set_output_file(str(out), append); # Warning: baseFilename is not part of the documented API for the logging module and could change.; filenames = [handle.baseFilename for handle in logger.handlers]; if not f_handler.baseFilename in filenames:; logger.addHandler(f_handler); return out. «; hide men",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/extras.html:8067,log,loglevel,8067,psi4manual/1.7.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/extras.html,2,['log'],['loglevel']
Testability,"_BLOCK_MAX_POINTS¶. The maximum number of grid points per evaluation block. Type: integer; Default: 256. DFT_BLOCK_MAX_RADIUS¶. The maximum radius to terminate subdivision of an octree block [au]. Type: double; Default: 3.0. DFT_BLOCK_MIN_POINTS¶. The minimum number of grid points per evaluation block. Type: integer; Default: 100. DFT_BLOCK_SCHEME¶. The blocking scheme for DFT. Type: string; Possible Values: NAIVE, OCTREE; Default: OCTREE. DFT_DENSITY_TOLERANCE¶. density cutoff for LibXC. A negative value turns the feature off and LibXC defaults are used. Type: conv double; Default: -1.0. DFT_GRAC_C_FUNC¶. The gradient regularized asymptotic correction functional corr form. Type: string; Default: XC_LDA_C_VWN. DFT_GRAC_X_FUNC¶. The gradient regularized asymptotic correction functional exch form. Type: string; Default: XC_GGA_X_LB. DFT_GRID_NAME¶. The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_PRUNING_ALPHA¶. Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_VV10_RHO_CUTOFF¶. Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_WEIGHTS_TOLERANCE¶. grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. table of contents. SCF; General Wavefunction Info; BASIS; CHOLESKY_TOLERANCE; DF_BASIS_SCF; DF_SCF_GUESS; GUESS; GUESS_MIX; GUESS_PERSIST; INTS_TOLERANCE; MAX_MEM_BUF; MOLDEN_WRITE; ORBITALS_WRITE; PRINT_BASIS; PRINT_MOS; QCHF; REFERENCE; SAVE_JK; SCF_MEM_SAFETY_FACTOR; SCF_PROPERTIES; S_CHOLESKY_TOLERANCE; S_ORTHOGONALIZATION; S_TOLERANCE. Convergence Control/Stabilization; BASIS_GUESS; DAMPING_CONVERGENCE; DAMPING_PERCENTAGE; DF_BASIS_GUESS; DIIS; DIIS_MAX_VECS; DIIS_MIN_VECS; DIIS_RMS_ERROR; DIIS_START; D_CONVERGENCE; E_CONVERGENCE; FAIL_ON_MAXITER; INCFOCK; INCFOCK_FULL_FOCK_EVERY; LEVEL_SHIFT; LEVEL_SHIFT_CUTOFF; MAXITER; MOM_OCC; MOM_START; MOM_VIR; SOSCF; SOSCF_CONV; SOSCF_MAX_ITER; SOSCF_MIN_ITER; SOSCF_PRINT; SOSCF_START_CONVERGENCE; STABILITY_A",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__scf-1.html:19640,log,logarithmic,19640,psi4manual/1.5.0/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__scf-1.html,4,['log'],['logarithmic']
Testability,"_BLOCK_MAX_POINTS¶. The maximum number of grid points per evaluation block. Type: integer; Default: 256. DFT_BLOCK_MAX_RADIUS¶. The maximum radius to terminate subdivision of an octree block [au]. Type: double; Default: 3.0. DFT_BLOCK_MIN_POINTS¶. The minimum number of grid points per evaluation block. Type: integer; Default: 100. DFT_BLOCK_SCHEME¶. The blocking scheme for DFT. Type: string; Possible Values: NAIVE, OCTREE; Default: OCTREE. DFT_DENSITY_TOLERANCE¶. density cutoff for LibXC. A negative value turns the feature off and LibXC defaults are used. Type: conv double; Default: -1.0. DFT_GRAC_C_FUNC¶. The gradient regularized asymptotic correction functional corr form. Type: string; Default: XC_LDA_C_VWN. DFT_GRAC_X_FUNC¶. The gradient regularized asymptotic correction functional exch form. Type: string; Default: XC_GGA_X_LB. DFT_GRID_NAME¶. The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_PRUNING_ALPHA¶. Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_VV10_RHO_CUTOFF¶. Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_WEIGHTS_TOLERANCE¶. grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. table of contents. SCF; General Wavefunction Info; BASIS; CHOLESKY_TOLERANCE; DF_BASIS_SCF; DF_SCF_GUESS; GUESS; GUESS_MIX; GUESS_PERSIST; INTS_TOLERANCE; MAX_MEM_BUF; MOLDEN_WRITE; ORBITALS_WRITE; PRINT_BASIS; PRINT_MOS; QCHF; REFERENCE; SAVE_JK; SCF_MEM_SAFETY_FACTOR; SCF_PROPERTIES; S_CHOLESKY_TOLERANCE; S_ORTHOGONALIZATION; S_TOLERANCE. Convergence Control/Stabilization; BASIS_GUESS; DAMPING_CONVERGENCE; DAMPING_PERCENTAGE; DF_BASIS_GUESS; DIIS; DIIS_MAX_VECS; DIIS_MIN_VECS; DIIS_RMS_ERROR; DIIS_START; D_CONVERGENCE; E_CONVERGENCE; FAIL_ON_MAXITER; LEVEL_SHIFT; LEVEL_SHIFT_CUTOFF; MAXITER; MOM_OCC; MOM_START; MOM_VIR; SOSCF; SOSCF_CONV; SOSCF_MAX_ITER; SOSCF_MIN_ITER; SOSCF_PRINT; SOSCF_START_CONVERGENCE; STABILITY_ANALYSIS. Fractional Occupation UHF",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__scf-1.html:19383,log,logarithmic,19383,psi4manual/1.4.0/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__scf-1.html,4,['log'],['logarithmic']
Testability,"_CPRLX; except AttributeError:; raise ValidationError('Deformation and counterpoise correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_CPRLX; RXNM = database.RXNM_CPRLX; elif db_cp is False:; try:; database.ACTV_RLX; except AttributeError:; raise ValidationError('Deformation correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_RLX; elif db_rlxd is False:; #elif no.match(str(db_rlxd)):; pass; else:; raise ValidationError('Deformation correction mode \'%s\' not valid.' % (db_rlxd)). # Option zero-point-correction- whether for thermochem databases jobs are corrected by zpe; db_zpe = kwargs.get('zpe', False). if db_zpe is True:; raise ValidationError('Zero-point-correction mode \'yes\' not yet implemented.'); elif db_zpe is False:; pass; else:; raise ValidationError('Zero-point-correction \'mode\' %s not valid.' % (db_zpe)). # Option benchmark- whether error statistics computed wrt alternate reference energies; db_benchmark = 'default'; if 'benchmark' in kwargs:; db_benchmark = kwargs['benchmark']. if db_benchmark.lower() == 'default':; pass; else:; BIND = p4util.getattr_ignorecase(database, 'BIND_' + db_benchmark); if BIND is None:; raise ValidationError('Special benchmark \'%s\' not available for database %s.' % (db_benchmark, db_name)). # Option tabulate- whether tables of variables other than primary energy method are formed; # TODO db(func=cbs,tabulate=[non-current-energy]) # broken; db_tabulate = []; if 'tabulate' in kwargs:; db_tabulate = kwargs['tabulate']. # Option subset- whether all of the database or just a portion is run; db_subset = HRXN; if 'subset' in kwargs:; db_subset = kwargs['subset']. if isinstance(db_subset, (str, bytes)):; if db_subset.lower() == 'small':; try:; database.HRXN_SM; except AttributeError:; raise ValidationError(""""""Special subset 'small' not available for database %s."""""" % (db_name)); else:; HRXN = database.HRXN_SM; elif db_subset.lower() == 'large':; try:;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html:13326,benchmark,benchmark,13326,psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html,45,['benchmark'],['benchmark']
Testability,"_CPRLX; except AttributeError:; raise ValidationError('Deformation and counterpoise correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_CPRLX; RXNM = database.RXNM_CPRLX; elif db_cp is False:; try:; database.ACTV_RLX; except AttributeError:; raise ValidationError('Deformation correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_RLX; elif db_rlxd is False:; #elif no.match(str(db_rlxd)):; pass; else:; raise ValidationError('Deformation correction mode \'%s\' not valid.' % (db_rlxd)). # Option zero-point-correction- whether for thermochem databases jobs are corrected by zpe; db_zpe = kwargs.get('zpe', False). if db_zpe is True:; raise ValidationError('Zero-point-correction mode \'yes\' not yet implemented.'); elif db_zpe is False:; pass; else:; raise ValidationError('Zero-point-correction \'mode\' %s not valid.' % (db_zpe)). # Option benchmark- whether error statistics computed wrt alternate reference energies; db_benchmark = 'default'; if 'benchmark' in kwargs:; db_benchmark = kwargs['benchmark']. if db_benchmark.lower() == 'default':; pass; else:; BIND = p4util.getattr_ignorecase(database, 'BIND_' + db_benchmark); if BIND is None:; raise ValidationError('Special benchmark \'%s\' not available for database %s.' % (db_benchmark, db_name)). # Option tabulate- whether tables of variables other than primary energy method are formed; # TODO db(func=cbs,tabulate=[non-current-energy]) # broken; db_tabulate = []; if 'tabulate' in kwargs:; db_tabulate = kwargs['tabulate']. # Option subset- whether all of the database or just a portion is run; db_subset = HRXN; if 'subset' in kwargs:; db_subset = kwargs['subset']. if isinstance(db_subset, basestring):; if db_subset.lower() == 'small':; try:; database.HRXN_SM; except AttributeError:; raise ValidationError(""""""Special subset 'small' not available for database %s."""""" % (db_name)); else:; HRXN = database.HRXN_SM; elif db_subset.lower() == 'large':; try:; d",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html:13440,benchmark,benchmark,13440,psi4manual/1.0.0/_modules/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html,9,['benchmark'],['benchmark']
Testability,"_INTS_IO', ri_ints_io); psioh.set_specific_retention(97, False); PsiMod.clean(); activate(molecule). if bsse == 'on' or bsse == 'both':; return energies_n_full[Ns[0]]; else:; return energies_n_mon[Ns[0]]. ## Aliases ##; nbody = n_body. #####################; ## End of n_body ##; #####################. ###################; ## Start of cp ##; ###################. [docs]def cp(name, **kwargs):; r""""""The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. :aliases: counterpoise_correct(), counterpoise_correction(). :returns: (*float*) Counterpoise-corrected interaction energy in Hartrees. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY <CP-CORRECTED2-BODYINTERACTIONENERGY>`; * :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY <UNCP-CORRECTED2-BODYINTERACTIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No values of func besides energy have been tested. - Table print-out needs improving. Add some PSI variables. :type name: string; :param name: ``'scf'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; :py:func:`~driver.energy`; however, SAPT is not appropriate. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms a geometry optimization; on each system, and ``cbs`` performs a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html:16931,test,tested,16931,psi4manual/4.0b3/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html,4,['test'],['tested']
Testability,"_INTS_IO', ri_ints_io); psioh.set_specific_retention(97, False); PsiMod.clean(); activate(molecule). if bsse == 'on' or bsse == 'both':; return energies_n_full[Ns[0]]; else:; return energies_n_mon[Ns[0]]. ## Aliases ##; nbody = n_body. #####################; ## End of n_body ##; #####################. ###################; ## Start of cp ##; ###################. [docs]def cp(name, **kwargs):; r""""""The cp function computes counterpoise-corrected two-body interaction energies; for complexes composed of arbitrary numbers of monomers. :aliases: counterpoise_correct(), counterpoise_correction(). :returns: (*float*) Counterpoise-corrected interaction energy in kcal/mol. :PSI variables:. .. hlist::; :columns: 1. * :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY <CP-CORRECTED2-BODYINTERACTIONENERGY>`; * :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY <UNCP-CORRECTED2-BODYINTERACTIONENERGY>`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No values of func besides energy have been tested. - Table print-out needs improving. Add some PSI variables. :type name: string; :param name: ``'scf'`` || ``'ccsd(t)'`` || etc. First argument, usually unlabeled. Indicates the computational method; to be applied to the molecule. May be any valid argument to; :py:func:`~driver.energy`; however, SAPT is not appropriate. :type func: :ref:`function <op_py_function>`; :param func: |dl| ``energy`` |dr| || ``optimize`` || ``cbs``. Indicates the type of calculation to be performed on the molecule; and each of its monomers. The default performs a single-point; ``energy('name')``, while ``optimize`` perfoms a geometry optimization; on each system, and ``cbs`` performs a compound single-point energy.; If a nested series of python functions is intended; (see :ref:`sec:intercalls`), use keyword ``cp_func`` instead of ``func``. :type check_bsse: :ref:`boolean <op_py_boolean>`; :param check_bsse: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether to additionally compute un-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html:16924,test,tested,16924,psi4manual/4.0b2/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html,2,['test'],['tested']
Testability,"_LEVEL and CFOUR_CALC_LEVEL,; are set to complain if contradicted (‘clobber’ set to True), other; ‘recommended’ settings, like CFOUR_CC_PROGRAM, can be; countermanded by keywords in input file (‘clobber’ set to False).; Occasionally, want these pieces to actually overcome keywords in; input file (‘superclobber’ set to True). muster_psi4options(opt)[source]¶; Translate psi4 keywords opt that have been explicitly set into; their Cfour counterparts. Since explicitly set Cfour module keyword; values will always be used preferentially to these inferred from; psi4, the ‘clobber’ property is set to False. class DB4(pythonpath=None, loadfrompickle=False, path=None)[source]¶. define_supermodelchems()[source]¶. define_supersubsets()[source]¶. make_dhdft_Figure_1()[source]¶; Plot all the graphics needed for the grey bars plot; in Fig. 1 of DHDFT. make_dhdft_Figure_2()[source]¶; Plot all the graphics needed for the SAPT/DFT/WFN; comparison plot in Fig. 2 of DHDFT.; Note that benchmark set as reminder, not necessity, since default. make_dhdft_Table_I()[source]¶; Generate the in-manuscript summary slat table for DHDFT. make_dhdft_Table_II()[source]¶; Generate the in-manuscript CP slat table for DHDFT. make_dhdft_Table_III()[source]¶; Generate the in-manuscript unCP slat table for DHDFT. make_dhdft_Tables_SII()[source]¶; Generate the subset details suppmat Part II tables and their indices for DHDFT. make_dhdft_Tables_SIII()[source]¶; Generate the per-reaction suppmat Part III tables and their indices for DHDFT. make_pt2_Figure_2()[source]¶; Plot all the graphics needed for the diffuse augmented grey; bars plot in Fig. 2 of PT2.; Note that in the modern implementation of class DB4, would need to; pass sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min'] to get; published figure. make_pt2_Figure_3()[source]¶; Plot all the graphics needed for the calendar grey bars plot; in Fig. 3 of PT2.; Note that in the modern implementation of class DB4, would need to; pass sset=['tt-5min', 'hb-5min",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:28341,benchmark,benchmark,28341,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['benchmark'],['benchmark']
Testability,"_NPROCESSORS_ONLN`; * Run full test suite: pytest; * Run the quick tests: pytest -m quick; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: pytest -m smoke; * Run tests matching by name: pytest -k testname; * Run tests excluding those by name: pytest -k ""not testname""; * Run tests matching by label: pytest -m testlabel; * Run tests excluding those by label: pytest -m ""not testlabel"". How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:54304,test,testing,54304,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['test'],['testing']
Testability,"_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/lib/psi4/core.cpython-{ext_will_vary}.so ../psi4/core.cpython-{ext_will_vary}.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:28018,test,test,28018,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['test'],['test']
Testability,"_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/{prefix}/lib/psi4/core.so ../psi4/core.so; >>> python ../psi4/run_psi4.py --inplace input.dat. How to set PSIDATADIR and why¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set w",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:23319,test,test,23319,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,2,['test'],['test']
Testability,"_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; 1; 2; 3; 4; 5; 6; 7; 8>>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; 1; 2; 3; 4; 5; 6; 7; 8; 9>>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; 1; 2; 3>>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/{prefix}/lib/psi4/core.so ../psi4/core.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:26694,test,test,26694,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['test'],['test']
Testability,"_WS_INCORE (CCENERGY); CCENERGY — Do ?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do ?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TAU_SQUARED (DCFT); DCFT — Controls whether to compute the DCFT energy with the Tau^2 correction to Tau. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDM_PRINT (DETCI); DETCI — Do print the transition density?. Type: boolean; Default: false. TDM_WRITE (DETCI); DETCI — Do write the transition density?. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF); SCF (Expert) — The tile size for the distributed matrices. Type: integer; Default: 512. TPDM (DCFT); DCFT — Controls whether to compute unrelaxed two-particle density matrix at the end of the energy computation. Type: boolean; D",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html:96351,test,test,96351,psi4manual/4.0b2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html,2,['test'],['test']
Testability,"_adc2(name, **kwargs):; """"""Function selecting the algorithm for ADC(2) excited state energy; call and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only adcc/adc. # TODO Actually one should do selection on a couple of other options here; # as well, e.g. adcc supports frozen-core and frozen-virtual,; # spin-specific states or spin-flip methods.; # But as far as I (mfherbst) know the BUILTIN ADC routine only supports; # singlet states and without freezing some core or some virtual orbitals. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'ADCC' and extras.addons(""adcc""):; func = run_adcc; elif module in ['', 'BUILTIN']:; func = run_adc. if reference == 'UHF':; if mtd_type == 'CONV':; if module in ['ADCC', ''] and extras.addons(""adcc""):; func = run_adcc. # Note: ROHF is theoretically available in adcc, but are not fully tested; # ... so will be added later. if func is None:; raise ManagedMethodError(['select_adc2', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def build_disp_functor(name, restricted, save_pairwise_disp=False, **kwargs):. if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None. # Figure out functional; superfunc, disp_type = dft.build_superfunctional(name, restricted). if disp_type:; if isinstance(name, dict):; # user dft_functional={} spec - type for lookup, dict val for param defs,; # name & citation discarded so only param matches to existing defs will print labels; _disp_functor = empirical_dispersion.EmpiricalDispersion(name_hint='',; level_hint=disp_type[""type""],; param_tweaks=disp_type[""params""],; save_pairwise_disp=save_pairwise_disp,; engine=kwargs.get('e",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html:30559,test,tested,30559,psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,4,['test'],['tested']
Testability,"_counter); offset = lines + 1 if extra > 0 else lines; string = ''; for j in range(lines):; string += """".join(str(x) for x in input_list[index + 1 + j]); if extra > 0:; string += """".join(str(x) for x in input_list[index + 1 + lines]); field = np.fromiter(string.split(), dtype=dtype); return offset + 1, field. [docs]def fchkfile_to_string(fname):; """""" Load FCHK file into a string""""""; with open(fname, 'r') as handle:; fchk_string = handle.read(); return fchk_string. [docs]def compare_fchkfiles(expected, computed, atol_exponent, label):; """"""Comparison function for output data in FCHK (formatted checkpoint) file format.; Compares many fields including number of electrons, highest angular momentum, basis; set exponents, densities, final gradient. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4's FCHK files. Parameters; ----------; expected : file; Reference FCHK file against which `computed` is compared.; computed : file; Input FCHK file to compare against `expected`.; atol_exponent : int or float; Absolute tolerance for high accuracy fields -- 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; label : str; Label for passed and error messages. """"""; fchk_ref = fchkfile_to_string(expected).splitlines(); fchk_calc = fchkfile_to_string(computed).splitlines(). high_accuracy = atol_exponent; low_accuracy = 3. # Those listed below need super high scf convergence (d_conv 1e-12) and might; # show machine dependence. They wil",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html:2884,log,logical,2884,psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html,4,"['log', 'test']","['logical', 'test']"
Testability,"_deriv(self, arg0); Sets the derivative level. set_description(self, arg0); Sets the SuperFunctional description. set_do_vv10(self, arg0); Sets whether to do VV10 correction. set_grac_alpha(self, arg0); Sets the GRAC alpha parameter. set_grac_beta(self, arg0); Sets the GRAC beta parameter. set_grac_shift(self, arg0); Sets the GRAC bulk shift value. set_lock(self, arg0); Locks the functional to prevent changes. set_max_points(self, arg0); Sets the maximum number of points. set_name(self, arg0); Sets the SuperFunctional name. set_vv10_b(self, arg0); Sets the VV10 b parameter. set_vv10_c(self, arg0); Sets the VV10 c parameter. set_x_alpha(self, arg0); Sets the amount of exact global HF exchange. set_x_beta(self, arg0); Sets how much more long-range exchange than short-range exchange. set_x_omega(self, arg0); Sets the range-seperation exchange parameter. set_xclib_description(self, arg0); Sets the LibXC version and citation string. test_functional(self, arg0, arg1, arg2, ...); Quick testing capabilities. value(self, arg0); Returns a given internal value. values(self); Return all internal values. vv10_b(self); The VV10 b parameter. vv10_c(self); The VV10 c parameter. x_alpha(self); Amount of exact HF exchange. x_beta(self); Amount of exact HF exchange. x_functional(self, arg0); Returns the desired X Functional. x_functionals(self); Returns all X Functionals. x_omega(self); Range-seperated exchange parameter. xclib_description(self); LibXC version and citation string. Methods Documentation. static XC_build(arg0: str, arg1: bool) → psi4.core.SuperFunctional¶; Builds a SuperFunctional from a XC string. add_c_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Functional) → None¶; Add a correlation Functional. add_x_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Functional) → None¶; Add a exchange Functional. allocate(self: psi4.core.SuperFunctional) → None¶; Allocates the vectors, should be called after ansatz or npoint changes. ansatz(self: psi4.core.S",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SuperFunctional.html:3541,test,testing,3541,psi4manual/1.8.x/api/psi4.core.SuperFunctional.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SuperFunctional.html,2,['test'],['testing']
Testability,"_deriv(self, arg0); Sets the derivative level. set_description(self, arg0); Sets the SuperFunctional description. set_do_vv10(self, arg0); Sets whether to do VV10 correction. set_grac_alpha(self, arg0); Sets the GRAC alpha parameter. set_grac_beta(self, arg0); Sets the GRAC beta parameter. set_grac_shift(self, arg0); Sets the GRAC bulk shift value. set_lock(self, arg0); Locks the functional to prevent changes. set_max_points(self, arg0); Sets the maximum number of points. set_name(self, arg0); Sets the SuperFunctional name. set_vv10_b(self, arg0); Sets the VV10 b parameter. set_vv10_c(self, arg0); Sets the VV10 c parameter. set_x_alpha(self, arg0); Sets the amount of exact global HF exchange. set_x_beta(self, arg0); Sets how much more long-range exchange than short-range exchange. set_x_omega(self, arg0); Sets the range-seperation exchange parameter. set_xclib_description(self, arg0); Sets the LibXC version and citation string. test_functional(self, arg0, arg1, arg2, ...); Quick testing capabilities. value(self, arg0); Returns a given internal value. values(self); Return all internal values. vv10_b(self); The VV10 b parameter. vv10_c(self); The VV10 c parameter. x_alpha(self); Amount of exact HF exchange. x_beta(self); Amount of exact HF exchange. x_functional(self, arg0); Returns the desired X Functional. x_functionals(self); Returns all X Functionals. x_omega(self); Range-seperated exchange parameter. xclib_description(self); LibXC version and citation string. Methods Documentation. static XC_build(name: str, unpolarized: bool, tweak: Dict[str, float] | None = {}) → psi4.core.SuperFunctional¶; Builds a SuperFunctional from a XC string. add_c_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Functional) → None¶; Add a correlation Functional. add_x_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Functional) → None¶; Add a exchange Functional. allocate(self: psi4.core.SuperFunctional) → None¶; Allocates the vectors, should be called after ansatz",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/api/psi4.core.SuperFunctional.html:3557,test,testing,3557,psi4manual/1.9.x/api/psi4.core.SuperFunctional.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/api/psi4.core.SuperFunctional.html,2,['test'],['testing']
Testability,"_deriv(self, arg0); Sets the derivative level. set_description(self, arg0); Sets the SuperFunctional description. set_do_vv10(self, arg0); Sets whether to do VV10 correction. set_grac_alpha(self, arg0); Sets the GRAC alpha parameter. set_grac_beta(self, arg0); Sets the GRAC beta parameter. set_grac_shift(self, arg0); Sets the GRAC bulk shift value. set_lock(self, arg0); Locks the functional to prevent changes. set_max_points(self, arg0); Sets the maximum number of points. set_name(self, arg0); Sets the SuperFunctional name. set_vv10_b(self, arg0); Sets the VV10 b parameter. set_vv10_c(self, arg0); Sets the VV10 c parameter. set_x_alpha(self, arg0); Sets the amount of exact global HF exchange. set_x_beta(self, arg0); Sets how much more long-range exchange than short-range exchange. set_x_omega(self, arg0); Sets the range-seperation exchange parameter. set_xclib_description(self, arg0); Sets the LibXC version and citation string. test_functional(self, arg0, arg1, arg2, ...); Quick testing capabilities. value(self, arg0); Returns a given internal value. values(self); Return all internal values. vv10_b(self); The VV10 b parameter. vv10_c(self); The VV10 c parameter. x_alpha(self); Amount of exact HF exchange. x_beta(self); Amount of exact HF exchange. x_functional(self, arg0); Returns the desired X Functional. x_functionals(self); Returns all X Functionals. x_omega(self); Range-seperated exchange parameter. xclib_description(self); LibXC version and citation string. Methods Documentation. static XC_build(name: str, unpolarized: bool, tweak: dict[str, float] | None = {}) → psi4.core.SuperFunctional¶; Builds a SuperFunctional from a XC string. add_c_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Functional) → None¶; Add a correlation Functional. add_x_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Functional) → None¶; Add a exchange Functional. allocate(self: psi4.core.SuperFunctional) → None¶; Allocates the vectors, should be called after ansatz",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.core.SuperFunctional.html:3564,test,testing,3564,psi4manual/master/api/psi4.core.SuperFunctional.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.core.SuperFunctional.html,2,['test'],['testing']
Testability,"_group.bits() & disp_group.bits(); new_symm_string = qcdb.PointGroup.bits_to_full_name(new_bits); clone.reset_point_group(new_symm_string). packet = {; ""molecule"": clone,; ""driver"": self.metameta['proxy_driver'],; ""method"": self.method,; ""basis"": data[""basis""],; ""keywords"": data[""keywords""] or {},; }; if 'cbs_metadata' in data:; packet['cbs_metadata'] = data['cbs_metadata']. self.task_list[label] = self.computer(**packet, **passalong). # for n, displacement in enumerate(findif_meta_dict[""displacements""].values(), start=2):; # _process_displacement(energy, lowername, molecule, displacement, n, ndisp, write_orbitals=False, **kwargs). [docs] def build_tasks(self, obj, **kwargs):; # permanently a dummy function; pass. [docs] def plan(self):; # uncalled function; return [t.plan() for t in self.task_list.values()]. [docs] def compute(self, client: Optional[""qcportal.FractalClient""] = None):; """"""Run each job in task list.""""""; instructions = ""\n"" + p4util.banner(f"" FiniteDifference Computations"", strNotOutfile=True) + ""\n""; logger.debug(instructions); core.print_out(instructions). with p4util.hold_options_state():; for t in self.task_list.values():; t.compute(client=client). def _prepare_results(self, client: Optional[""qcportal.FractalClient""] = None):; results_list = {k: v.get_results(client=client) for k, v in self.task_list.items()}. # load AtomicComputer results into findifrec[reference]; reference = self.findifrec[""reference""]; task = results_list[""reference""]; response = task.return_result; reference[""module""] = getattr(task.provenance, ""module"", None). if task.driver == 'energy':; reference['energy'] = response. elif task.driver == 'gradient':; reference['gradient'] = response; reference['energy'] = task.extras['qcvars']['CURRENT ENERGY']. elif task.driver == 'hessian':; reference['hessian'] = response; reference['energy'] = task.extras['qcvars']['CURRENT ENERGY']; if 'CURRENT GRADIENT' in task.extras['qcvars']:; reference['gradient'] = task.extras['qcvars']['CURRENT ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html:46293,log,logger,46293,psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,2,['log'],['logger']
Testability,"_handler (Optional[Callable]) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Return type:; Union[bool, Tuple[bool, str]]. Returns:. allclose (bool) – Returns True if expected and computed are equal within tolerance; False otherwise.; message (str) – When return_message=True, also return passed or error message. Notes. Akin to numpy.allclose().; For scalar float-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; float-comparable types. For mixed types, use compare_recursive().; Sets rtol to zero to match expected Psi4 behaviour, otherwise measured as:. absolute(computed - expected) <= (atol + rtol * absolute(expected)). psi4.compare_integers(expected, computed[, label, *, **kwargs])¶; Comparison function for integers, strings, booleans, or integer array-like data structures.; See qcelemental.testing.compare() for details.; psi4.compare_strings is an alias to this. qcelemental.testing.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=None)[source]; Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters:. expected (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Reference value against which computed is compared.; computed (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Input value to compare against expected.; label (Optional[str]) – Label for passed and error messages. Defaults to calling function name.; equal_phase (bool) – Compare computed or its opposite as equal.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Optional[Callable]) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Return type:; Union[bool, Tuple[bool, str]]. Ret",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:17355,test,testing,17355,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,3,['test'],['testing']
Testability,"_helper; #; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2022 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. import math; from functools import partial; from typing import Callable, Optional, Union; import logging. import numpy as np. from psi4 import core; from psi4.driver.p4util.exceptions import ValidationError; nppp = partial(np.array_str, max_line_width=120, precision=8, suppress_small=True) # when safe, ""from psi4.driver import nppp""; from psi4.driver.aliases import sherrill_gold_standard, allen_focal_point. logger = logging.getLogger(__name__). _zeta_val2sym = {k + 2: v for k, v in enumerate('dtq5678')}; Extrapolatable = Union[float, core.Matrix, core.Vector]. [docs]def xtpl_highest_1(functionname: str, zHI: int, valueHI: Extrapolatable, verbose: int = 1, **kwargs) -> Extrapolatable:; r""""""Scheme for total or correlation energies with a single basis or the highest; zeta-level among an array of bases. Used by :py:func:`~psi4.cbs`. Parameters; ----------; functionname; Name of the CBS component (e.g., 'mp2') used in summary printing.; zHI; Zeta-level, only used for printing.; valueHI; Energy, gradient, or Hessian value at the basis set.; v",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html:1219,log,logging,1219,psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html,2,['log'],['logging']
Testability,"_helper; #; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2022 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. import math; from functools import partial; from typing import Callable, Optional, Union; import logging. import numpy as np. from psi4 import core; from psi4.driver.p4util.exceptions import ValidationError; nppp = partial(np.array_str, max_line_width=120, precision=8, suppress_small=True) # when safe, ""from psi4.driver import nppp""; from psi4.driver.aliases import sherrill_gold_standard, allen_focal_point. logger = logging.getLogger(__name__). _zeta_val2sym = {k + 2: v for k, v in enumerate('dtq5678')}; Extrapolatable = Union[float, core.Matrix, core.Vector]. [docs]def xtpl_highest_1(functionname: str, zHI: int, valueHI: Extrapolatable, verbose: int = 1, **kwargs) -> Extrapolatable:; r""""""Scheme for total or correlation energies with a single basis or the highest; zeta-level among an array of bases. Used by :py:func:`~psi4.driver.cbs`. Parameters; ----------; functionname; Name of the CBS component (e.g., 'mp2') used in summary printing.; zHI; Zeta-level, only used for printing.; valueHI; Energy, gradient, or Hessian value at the basis ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs_helper.html:1219,log,logging,1219,psi4manual/1.7.x/_modules/psi4/driver/driver_cbs_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs_helper.html,2,['log'],['logging']
Testability,"_helper; #; # @BEGIN LICENSE; #; # Psi4: an open-source quantum chemistry software package; #; # Copyright (c) 2007-2023 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. import math; from functools import partial; from typing import Callable, Optional, Union; import logging. import numpy as np. from psi4 import core; from psi4.driver.p4util.exceptions import ValidationError; nppp = partial(np.array_str, max_line_width=120, precision=8, suppress_small=True) # when safe, ""from psi4.driver import nppp""; from psi4.driver.aliases import sherrill_gold_standard, allen_focal_point. logger = logging.getLogger(__name__). _zeta_val2sym = {k + 2: v for k, v in enumerate('dtq5678')}; Extrapolatable = Union[float, core.Matrix, core.Vector]. [docs]; def xtpl_highest_1(functionname: str, zHI: int, valueHI: Extrapolatable, verbose: int = 1, **kwargs) -> Extrapolatable:; r""""""Scheme for total or correlation energies with a single basis or the highest; zeta-level among an array of bases. Used by :py:func:`~psi4.driver.cbs`. Parameters; ----------; functionname; Name of the CBS component (e.g., 'mp2') used in summary printing.; zHI; Zeta-level, only used for printing.; valueHI; Energy, gradient, or Hessian value at the basi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs_helper.html:1221,log,logging,1221,psi4manual/1.8.x/_modules/psi4/driver/driver_cbs_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs_helper.html,2,['log'],['logging']
Testability,"_on_error* =1,; otherwise 0. """"""; # This returns 1 if the string's all matched up, 0 otherwise; import collections. # create left to right parenthesis mappings; lrmap = {""("": "")"", ""["": ""]"", ""{"": ""}""}. # derive sets of left and right parentheses; lparens = set(lrmap.keys()); rparens = set(lrmap.values()). parenstack = collections.deque(); all_matched = 1; for ch in input_string:; if ch in lparens:; parenstack.append(ch); elif ch in rparens:; opench = """"; try:; opench = parenstack.pop(); except IndexError:; # Run out of opening parens; all_matched = 0; if exit_on_error:; message = (""Input error: extra %s"" % (ch)); raise TestComparisonError(message); if lrmap[opench] != ch:; # wrong type of parenthesis popped from stack; all_matched = 0; if exit_on_error:; message = (""Input error: %s closed with a %s"" % (opench, ch)); raise TestComparisonError(message); if len(parenstack) != 0:; all_matched = 0; if exit_on_error:; message = (""Input error: Unmatched %s"" % (parenstack.pop())); raise TestComparisonError(message). return all_matched. def parse_multiline_array(input_list):; """"""Function to squash multiline arrays into a single line; until all parentheses and brackets are fully paired. """"""; line = input_list.pop(0); # Keep adding lines to the current one, until all parens match up; while not check_parentheses_and_brackets(line, 0):; thisline = input_list.pop(0).strip(); line += thisline; return ""%s\n"" % (line). def process_multiline_arrays(inputfile):; """"""Function to find array inputs that are spread across multiple; lines and squash them into a single line. """"""; # This function takes multiline array inputs, and puts them on a single line; # Start by converting the input to a list, splitting at newlines; input_list = inputfile.split(""\n""); set_re = re.compile(r'^(\s*?)set\s+(?:([-,\w]+)\s+)?(\w+)[\s=]+\[.*', re.IGNORECASE); newinput = """"; while len(input_list):; line = input_list[0]; if set_re.match(line):; # We've found the start of a set matrix [ .... line - hand it off for",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/inputparser.html:16835,Test,TestComparisonError,16835,psi4manual/1.4.0/_modules/psi4/driver/inputparser.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/inputparser.html,7,['Test'],['TestComparisonError']
Testability,"_only, mode, stencil_size, step_size, init_string, t_project, r_project,; True, 1). # We can finally start generating displacements.; ref_geom = np.array(mol.geometry()). # Now we generate the metadata...; findifrec = {; ""step"": {; ""units"": ""bohr"",; ""size"": data[""step_size""]; },; ""stencil_size"": data[""stencil_size""],; ""displacement_space"": ""CdSALC"",; ""project_translations"": data[""project_translations""],; ""project_rotations"": data[""project_rotations""],; ""molecule"": mol.to_schema(dtype=2, units='Bohr'),; ""displacements"": {},; ""reference"": {}; }. def append_geoms(indices, steps):; """"""Given a list of indices and a list of steps to displace each, append the corresponding geometry to the list."""""". # Next, to make this salc/magnitude composite.; disp_geom, label = _displace_cart(findifrec['molecule']['masses'], ref_geom, data[""salc_list""],; zip(indices, steps), data[""step_size""]); if data[""print_lvl""] > 2:; info = ""\nDisplacement '{}'\n{}\n"".format(label, nppp10(disp_geom)); core.print_out(info); logger.info(info); findifrec[""displacements""][label] = {""geometry"": disp_geom}. for h in range(data[""n_irrep""]):; active_indices = data[""salc_indices_pi""][h]. for index in active_indices:; # Displace along the diagonal.; # Remember that the totally symmetric irrep has special displacements.; for val in data[""disps""][""sym_irr"" if h == 0 else ""asym_irr""]:; append_geoms((index, ), val). # Hessian from energies? We have off-diagonal displacements to worry about.; if mode == ""2_0"":; # i indexes SALC indices of the current irrep.; for i, index in enumerate(active_indices):; for index2 in active_indices[:i]:; for val in data[""disps""][""off""]:; append_geoms((index, index2), val). if data[""print_lvl""] > 2:; logger.info(""\nReference\n{}\n"".format(nppp10(ref_geom))); findifrec[""reference""][""geometry""] = ref_geom. if data[""print_lvl""] > 1:; logger.info(""\n-------------------------------------------------------------""). return findifrec. _der_from_lesser_docstring = """"""; Parameters; ----------;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html:17877,log,logger,17877,psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,8,['log'],['logger']
Testability,"_option(""BASIS"", basis). ## Second half of this fn -- entry means program running exactly analytic 1st derivative. # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util.negotiate_convergence_criterion((1, 1), lowername, return_optstash=True). # Commit to procedures[] call hereafter; core.clean_variables(). # no analytic derivatives for scf_type cd; if core.get_global_option('SCF_TYPE') == 'CD':; raise ValidationError(""""""No analytic derivatives for SCF_TYPE CD.""""""). core.print_out(""""""gradient() will perform analytic gradient computation.\n""""""). # Perform the gradient calculation; logger.info(f""Compute gradient(): method={lowername}, basis={core.get_global_option('BASIS').lower()}, molecule={molecule.name()}, nre={'w/EFP' if hasattr(molecule, 'EFP') else molecule.nuclear_repulsion_energy()}""); logger.debug(""w/EFP"" if hasattr(molecule, ""EFP"") else pp.pformat(molecule.to_dict())); wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); logger.info(f""Return gradient(): {core.variable('CURRENT ENERGY')}""); logger.info(nppp(wfn.gradient().np)). basisstash.restore(); optstash.restore(). driver_findif.gradient_write(wfn). if return_wfn:; return (wfn.gradient(), wfn); else:; return wfn.gradient(). [docs]; def properties(*args, **kwargs):; r""""""Function to compute various properties. :aliases: prop(). :returns: none. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - This function at present has a limited functionality.; Consult the keywords sections of other modules for further property capabilities. +--------------------+-----------------------------------------------+----------------+---------------------------------------------------------------+; | Name | Calls Method | Reference | Supported Properties |; +====================+===============================================+================+===========================================================",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver.html:45201,log,logger,45201,psi4manual/1.8.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver.html,6,['log'],['logger']
Testability,"_option(""BASIS"", basis). ## Second half of this fn -- entry means program running exactly analytic 1st derivative. # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util.negotiate_convergence_criterion((1, 1), lowername, return_optstash=True). # Commit to procedures[] call hereafter; core.clean_variables(). # no analytic derivatives for scf_type cd; if core.get_global_option('SCF_TYPE') == 'CD':; raise ValidationError(""""""No analytic derivatives for SCF_TYPE CD.""""""). core.print_out(""""""gradient() will perform analytic gradient computation.\n""""""). # Perform the gradient calculation; logger.info(f""Compute gradient(): method={lowername}, basis={core.get_global_option('BASIS').lower()}, molecule={molecule.name()}, nre={'w/EFP' if hasattr(molecule, 'EFP') else molecule.nuclear_repulsion_energy()}""); logger.debug(""w/EFP"" if hasattr(molecule, ""EFP"") else pp.pformat(molecule.to_dict())); wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); logger.info(f""Return gradient(): {core.variable('CURRENT ENERGY')}""); logger.info(nppp(wfn.gradient().np)). basisstash.restore(); optstash.restore(). driver_findif.gradient_write(wfn). if return_wfn:; return (wfn.gradient(), wfn); else:; return wfn.gradient(). [docs]def properties(*args, **kwargs):; r""""""Function to compute various properties. :aliases: prop(). :returns: none. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - This function at present has a limited functionality.; Consult the keywords sections of other modules for further property capabilities. +--------------------+-----------------------------------------------+----------------+---------------------------------------------------------------+; | Name | Calls Method | Reference | Supported Properties |; +====================+===============================================+================+=============================================================",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html:38514,log,logger,38514,psi4manual/1.6.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html,4,['log'],['logger']
Testability,"_regex-gcc-mt-d-1_33_1. --with-boost-serialization[=special-lib] —; Use the Serialization library from boost. It is possible to specify a; certain library for the linker e.g.,; --with-boost-serialization=boost_serialization-gcc-mt-d-1_33_1. --with-boost-system[=special-lib] —; Use the System library from boost. It is possible to specify a certain; library for the linker e.g.,; --with-boost-system=boost_system-gcc-mt. --with-boost-thread[=special-lib] —; Use the Thread library from boost. It is possible to specify a certain; library for the linker e.g.,; --with-boost-thread=boost_thread-gcc-mt. Step 2: Compilation; Running make (which must be GNU’s ‘make’ utility) in $objdir will compile; the PSI4 libraries and executable modules. Step 3: Testing; To execute automatically the ever-growing number of test cases after; compilation, simply execute make tests in the $objdir directory.; This will run each (relatively small) test case and report the results.; Failure of any of the test cases should be reported to the developers.; By default, any such failure will stop the testing process. If you desire; to run the entire testing suit without interruption, execute make tests; TESTFLAGS='-u -q'. Note that you must do a make testsclean in $objdir; to run the test suite again. Step 4: Installation; Once testing is complete, installation into $prefix is accomplished by; running make install in $objdir. Executable modules are installed in; $prefix/bin, include files in $prefix/include, libraries in $prefix/lib, and; basis set data and various control structures in $prefix/share. Step 5: Building Documentation; This is not recommended because all of the documentation should be; available at http://sirius.chem.vt.edu/psi4manual/latest/index.html; (link “docs” off http://www.psicode.org), and it is automatically updated. However,; if your system has the appropriate utilities (notably the sphinx package; and LaTeX), you may build the package documentation from the top-level; $objdir ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/installfile.html:17322,test,test,17322,psi4manual/4.0b3/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html,3,['test'],['test']
Testability,"_shift; Whether to generate a random atom shift on interval [-3, 3) in each; dimension (`True`) or leave at current origin. To shift by a specified; vector, supply a 3-element list.; do_rotate; Whether to generate a random 3D rotation according to algorithm of Arvo.; To rotate by a specified matrix, supply a 9-element list of lists.; do_resort; Whether to shuffle atoms (`True`) or leave 1st atom 1st, etc. (`False`).; To specify shuffle, supply a nat-element list of indices.; deflection; If `do_rotate`, how random a rotation: 0.0 is no change, 0.1 is small; perturbation, 1.0 is completely random.; do_mirror; Whether to construct the mirror image structure by inverting y-axis.; do_plot; Pops up a mpl plot showing before, after, and ref geometries.; run_to_completion; By construction, scrambled systems are fully alignable (final RMSD=0).; Even so, `True` turns off the mechanism to stop when RMSD reaches zero; and instead proceed to worst possible time.; run_resorting; Even if atoms not shuffled, test the resorting machinery.; verbose; Print level. Returns; -------; None. """"""; rgeom, rmass, relem, relez, runiq = ref_mol.to_arrays(); nat = rgeom.shape[0]. perturbation = qcel.molutil.compute_scramble(; rgeom.shape[0],; do_shift=do_shift,; do_rotate=do_rotate,; deflection=deflection,; do_resort=do_resort,; do_mirror=do_mirror); cgeom, cmass, celem, celez, cuniq = perturbation.align_system(rgeom, rmass, relem, relez, runiq, reverse=True); cmol = Molecule.from_arrays(; geom=cgeom,; mass=cmass,; elem=celem,; elez=celez,; units='Bohr',; molecular_charge=ref_mol.molecular_charge(),; molecular_multiplicity=ref_mol.multiplicity(),; fix_com=True,; fix_orientation=True). rmsd = np.linalg.norm(cgeom - rgeom) * constants.bohr2angstroms / np.sqrt(nat); if verbose >= 1:; print('Start RMSD = {:8.4f} [A]'.format(rmsd)). rmsd, solution, amol = cmol.B787(; ref_mol,; do_plot=do_plot,; atoms_map=(not do_resort),; run_resorting=run_resorting,; mols_align=True,; run_to_completion=run_to_comple",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/qcdb/molecule.html:65609,test,test,65609,psi4manual/1.9.x/_modules/psi4/driver/qcdb/molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/qcdb/molecule.html,4,['test'],['test']
Testability,"_shift; Whether to generate a random atom shift on interval [-3, 3) in each; dimension (`True`) or leave at current origin. To shift by a specified; vector, supply a 3-element list.; do_rotate; Whether to generate a random 3D rotation according to algorithm of Arvo.; To rotate by a specified matrix, supply a 9-element list of lists.; do_resort; Whether to shuffle atoms (`True`) or leave 1st atom 1st, etc. (`False`).; To specify shuffle, supply a nat-element list of indices.; deflection; If `do_rotate`, how random a rotation: 0.0 is no change, 0.1 is small; perturbation, 1.0 is completely random.; do_mirror; Whether to construct the mirror image structure by inverting y-axis.; do_plot; Pops up a mpl plot showing before, after, and ref geometries.; run_to_completion; By construction, scrambled systems are fully alignable (final RMSD=0).; Even so, `True` turns off the mechanism to stop when RMSD reaches zero; and instead proceed to worst possible time.; run_resorting; Even if atoms not shuffled, test the resorting machinery.; verbose; Print level. Returns; -------; None. """"""; rgeom, rmass, relem, relez, runiq = ref_mol.to_arrays(); nat = rgeom.shape[0]. perturbation = qcel.molutil.compute_scramble(; rgeom.shape[0],; do_shift=do_shift,; do_rotate=do_rotate,; deflection=deflection,; do_resort=do_resort,; do_mirror=do_mirror); cgeom, cmass, celem, celez, cuniq = perturbation.align_system(rgeom, rmass, relem, relez, runiq, reverse=True); cmol = Molecule.from_arrays(; geom=cgeom,; mass=cmass,; elem=celem,; elez=celez,; units='Bohr',; molecular_charge=ref_mol.molecular_charge(),; molecular_multiplicity=ref_mol.multiplicity(),; fix_com=True,; fix_orientation=True). rmsd = np.linalg.norm(cgeom - rgeom) * qcel.constants.bohr2angstroms / np.sqrt(nat); if verbose >= 1:; print('Start RMSD = {:8.4f} [A]'.format(rmsd)). rmsd, solution, amol = cmol.B787(; ref_mol,; do_plot=do_plot,; atoms_map=(not do_resort),; run_resorting=run_resorting,; mols_align=True,; run_to_completion=run_to_c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/molecule.html:62696,test,test,62696,psi4manual/1.4.0/_modules/psi4/driver/qcdb/molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/molecule.html,10,['test'],['test']
Testability,"_solution.mirror); print(hold_solution). # final presentation & plotting; if verbose >= 2:; print(""<<< Aligned:""); for at, hsh in enumerate(auniq):; print(atomfmt2.format(auniq[at][:6], *ageom[at])); print(""<<< Aligned Diff:""); for at, hsh in enumerate(auniq):; print(atomfmt2.format(auniq[at][:6], *[ageom[at][i] - rgeom[at][i] for i in range(3)])). if do_plot:; # TODO Missing import; plot_coord(ref=rgeom, cand=ageom, orig=cgeom, comment=""Final RMSD = {:8.4f}"".format(final_rmsd)). # sanity checks; assert compare_values(; _pseudo_nre(cuniq, cgeom),; _pseudo_nre(auniq, ageom),; ""D: concern_mol-->returned_mol pNRE uncorrupted"",; atol=1.0e-4,; quiet=(verbose < 2),; ). if mols_align is True:; assert compare_values(; _pseudo_nre(runiq, rgeom),; _pseudo_nre(auniq, ageom),; ""D: concern_mol-->returned_mol pNRE matches ref_mol"",; atol=1.0e-4,; quiet=(verbose < 2),; ); assert compare_values(; rgeom, ageom, ""D: concern_mol-->returned_mol geometry matches ref_mol"", atol=1.0e-4, quiet=(verbose < 2); ); assert compare_values(0.0, final_rmsd, ""D: null RMSD"", atol=1.0e-4, quiet=(verbose < 2)). return final_rmsd, hold_solution. def _plausible_atom_orderings(ref, current, rgeom, cgeom, algorithm=""hungarian_uno"", verbose=1, uno_cutoff=1.0e-3):; r"""""". Parameters; ----------; ref : list; Hashes encoding distinguishable non-coord characteristics of reference; molecule. Namely, atomic symbol, mass, basis sets?.; current : list; Hashes encoding distinguishable non-coord characteristics of trial; molecule. Namely, atomic symbol, mass, basis sets?. Returns; -------; iterator of tuples. """"""; if sorted(ref) != sorted(current):; raise ValidationError(; """"""ref and current can't map to each other.\n"""""" + ""R: "" + str(ref) + ""\nC: "" + str(current); ). where = collections.defaultdict(list); for iuq, uq in enumerate(ref):; where[uq].append(iuq). cwhere = collections.defaultdict(list); for iuq, uq in enumerate(current):; cwhere[uq].append(iuq). connect = collections.OrderedDict(); for k in where:; conne",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/qcelemental/molutil/align.html:9533,assert,assert,9533,psi4manual/1.4.0/_modules/qcelemental/molutil/align.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/qcelemental/molutil/align.html,6,['assert'],['assert']
Testability,"_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. mp2-h; check that methods can act on single atom. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. fnocc3; Test FNO-QCISD(T) computation. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. pubchem2; Superficial test of PubChem interface. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-smoke; DFT Functional Smoke Test. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. fci-coverage; 6-31G H2O Test for coverage. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. pywrap-opt-sowreap; Finite difference optimization, ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:5827,test,tests,5827,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['tests']
Testability,"`` block. """"""; import pcmsolver. with NamedTemporaryFile(mode=""w+t"", delete=True) as fl:; fl.write(block); fl.flush(); parsed_pcm = pcmsolver.parse_pcm_input(fl.name). with NamedTemporaryFile(mode=""w+t"", delete=False) as fl:; fl.write(parsed_pcm); core.set_local_option(""PCM"", ""PCMSOLVER_PARSED_FNAME"", fl.name). def _basname(name: str) -> str:; """"""Imitates :py:meth:`core.BasisSet.make_filename` without the gbs extension.""""""; return name.lower().replace('+', 'p').replace('*', 's').replace('(', '_').replace(')', '_').replace(',', '_'). [docs]def temp_circular_import_blocker():; pass. [docs]def basis_helper(block: str, name: str = '', key: str = 'BASIS', set_option: bool = True):; """"""Helper to specify a custom basis set in PsiAPI mode. This function forms a basis specification function from *block*; and associates it with keyword *key* under handle *name*. Registers; the basis spec with Psi4 so that it can be applied again to future; molecules. For usage, see :srcsample:`mints2`, :srcsample:`mints9`, and; :srcsample:`cc54` test cases. Parameters; ----------; block; Text that goes in a PSIthon ``basis {...}`` block.; name; Name label to associated with basis specified by `block`.; key; Basis keyword specified by `block`.; set_option; When True, execute the equivalent of ``set key name`` or ``set_option({key: name})``. When False, skip execution. """"""; key = key.upper(); name = ('anonymous' + str(uuid.uuid4())[:8]) if name == '' else name; cleanbas = _basname(name).replace('-', '') # further remove hyphens so can be function name; block = qcel.util.filter_comments(block); command_lines = re.split('\n', block). symbol_re = re.compile(r'^\s*assign\s+(?P<symbol>[A-Z]{1,3})\s+(?P<basis>[-+*\(\)\w]+)\s*$', re.IGNORECASE); label_re = re.compile(; r'^\s*assign\s+(?P<label>(?P<symbol>[A-Z]{1,3})(?:(_\w+)|(\d+))?)\s+(?P<basis>[-+*\(\)\w]+)\s*$',; re.IGNORECASE); all_re = re.compile(r'^\s*assign\s+(?P<basis>[-+*\(\)\w]+)\s*$', re.IGNORECASE); basislabel = re.compile(r'\s*\[\s*([-*\(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/python_helpers.html:19671,test,test,19671,psi4manual/1.7.x/_modules/psi4/driver/p4util/python_helpers.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/python_helpers.html,2,['test'],['test']
Testability,"`` || etc. Indicates which properties should be computed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Optical rotation calculation; >>> property('cc2', properties=['rotation']). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). optstash = OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = PsiMod.get_active_molecule(); molecule.update_geometry(); #PsiMod.set_global_option('BASIS', PsiMod.get_global_option('BASIS')). # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); # SCF properties have been set as 6/5 so as to match those ; # run normally through OEProp so subject to change; if not PsiMod.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'E_CONVERGENCE', 10); if not PsiMod.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; PsiMod.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not PsiMod.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; PsiMod.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/driver.html:43758,test,test,43758,psi4manual/4.0b4/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html,2,['test'],['test']
Testability,"a (coefficient) Value: % 16.12f\n\n"""""" % (beta). name_str = ""%s/(%s,%s)"" % (functionname.upper(), _zeta_val2sym[zLO].upper(), _zeta_val2sym[zHI].upper()); cbsscheme += """""" @Extrapolated """"""; cbsscheme += name_str + ':'; cbsscheme += "" "" * (18 - len(name_str)); cbsscheme += """"""% 16.12f\n\n"""""" % value; core.print_out(cbsscheme); logger.debug(cbsscheme). return value. elif isinstance(valueLO, np.ndarray):. beta = (valueHI - valueLO) * beta_division; value = valueHI - beta * beta_mult. if verbose > 2:; cbsscheme = f""""""\n ==> Helgaker 2-point exponential SCF extrapolation for method: {functionname.upper()} <==\n""""""; cbsscheme += f""""""\n LO-zeta ({zLO}) Data\n""""""; cbsscheme += nppp(valueLO); cbsscheme += f""""""\n HI-zeta ({zHI}) Data\n""""""; cbsscheme += nppp(valueHI). cbsscheme += f""""""\n Alpha (exponent) Value: {alpha:16.8f}""""""; cbsscheme += f""""""\n Beta Data\n""""""; cbsscheme += nppp(beta); cbsscheme += f""""""\n Extrapolated Data\n""""""; cbsscheme += nppp(value); cbsscheme += ""\n""; core.print_out(cbsscheme); logger.debug(cbsscheme). return value. else:; raise ValidationError(f""scf_xtpl_helgaker_2: datatype is not recognized '{type(valueLO)}'.""). [docs]; def scf_xtpl_truhlar_2(functionname: str, zLO: int, valueLO: Extrapolatable, zHI: int, valueHI: Extrapolatable, verbose: int = 1, alpha: Optional[float] = None) -> Extrapolatable:; r""""""Extrapolation scheme using power form for reference energies with two adjacent; zeta-level bases. Used by :py:func:`~psi4.driver.cbs`. Parameters; ----------; functionname; Name of the CBS component (e.g., 'HF') used in summary printing.; zLO; Zeta number of the smaller basis set in 2-point extrapolation.; valueLO; Energy, gradient, or Hessian value at the smaller basis set in 2-point; extrapolation.; zHI; Zeta number of the larger basis set in 2-point extrapolation; Must be `zLO + 1`.; valueHI; Energy, gradient, or Hessian value at the larger basis set in 2-point; extrapolation.; verbose; Controls volume of printing.; alpha; Overrides the default :mat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs_helper.html:6519,log,logger,6519,psi4manual/1.8.x/_modules/psi4/driver/driver_cbs_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs_helper.html,6,['log'],['logger']
Testability,"a (coefficient) Value: % 16.12f\n\n"""""" % (beta). name_str = ""%s/(%s,%s)"" % (functionname.upper(), _zeta_val2sym[zLO].upper(), _zeta_val2sym[zHI].upper()); cbsscheme += """""" @Extrapolated """"""; cbsscheme += name_str + ':'; cbsscheme += "" "" * (18 - len(name_str)); cbsscheme += """"""% 16.12f\n\n"""""" % value; core.print_out(cbsscheme); logger.debug(cbsscheme). return value. elif isinstance(valueLO, np.ndarray):. beta = (valueHI - valueLO) * beta_division; value = valueHI - beta * beta_mult. if verbose > 2:; cbsscheme = f""""""\n ==> Helgaker 2-point exponential SCF extrapolation for method: {functionname.upper()} <==\n""""""; cbsscheme += f""""""\n LO-zeta ({zLO}) Data\n""""""; cbsscheme += nppp(valueLO); cbsscheme += f""""""\n HI-zeta ({zHI}) Data\n""""""; cbsscheme += nppp(valueHI). cbsscheme += f""""""\n Alpha (exponent) Value: {alpha:16.8f}""""""; cbsscheme += f""""""\n Beta Data\n""""""; cbsscheme += nppp(beta); cbsscheme += f""""""\n Extrapolated Data\n""""""; cbsscheme += nppp(value); cbsscheme += ""\n""; core.print_out(cbsscheme); logger.debug(cbsscheme). return value. else:; raise ValidationError(f""scf_xtpl_helgaker_2: datatype is not recognized '{type(valueLO)}'.""). [docs]def scf_xtpl_truhlar_2(functionname: str, zLO: int, valueLO: Extrapolatable, zHI: int, valueHI: Extrapolatable, verbose: int = 1, alpha: Optional[float] = None) -> Extrapolatable:; r""""""Extrapolation scheme using power form for reference energies with two adjacent; zeta-level bases. Used by :py:func:`~psi4.cbs`. Parameters; ----------; functionname; Name of the CBS component (e.g., 'HF') used in summary printing.; zLO; Zeta number of the smaller basis set in 2-point extrapolation.; valueLO; Energy, gradient, or Hessian value at the smaller basis set in 2-point; extrapolation.; zHI; Zeta number of the larger basis set in 2-point extrapolation; Must be `zLO + 1`.; valueHI; Energy, gradient, or Hessian value at the larger basis set in 2-point; extrapolation.; verbose; Controls volume of printing.; alpha; Overrides the default :math:`\alpha",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html:6485,log,logger,6485,psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html,2,['log'],['logger']
Testability,"a (coefficient) Value: % 16.12f\n\n"""""" % (beta). name_str = ""%s/(%s,%s)"" % (functionname.upper(), _zeta_val2sym[zLO].upper(), _zeta_val2sym[zHI].upper()); cbsscheme += """""" @Extrapolated """"""; cbsscheme += name_str + ':'; cbsscheme += "" "" * (18 - len(name_str)); cbsscheme += """"""% 16.12f\n\n"""""" % value; core.print_out(cbsscheme); logger.debug(cbsscheme). return value. elif isinstance(valueLO, np.ndarray):. beta = (valueHI - valueLO) * beta_division; value = valueHI - beta * beta_mult. if verbose > 2:; cbsscheme = f""""""\n ==> Helgaker 2-point exponential SCF extrapolation for method: {functionname.upper()} <==\n""""""; cbsscheme += f""""""\n LO-zeta ({zLO}) Data\n""""""; cbsscheme += nppp(valueLO); cbsscheme += f""""""\n HI-zeta ({zHI}) Data\n""""""; cbsscheme += nppp(valueHI). cbsscheme += f""""""\n Alpha (exponent) Value: {alpha:16.8f}""""""; cbsscheme += f""""""\n Beta Data\n""""""; cbsscheme += nppp(beta); cbsscheme += f""""""\n Extrapolated Data\n""""""; cbsscheme += nppp(value); cbsscheme += ""\n""; core.print_out(cbsscheme); logger.debug(cbsscheme). return value. else:; raise ValidationError(f""scf_xtpl_helgaker_2: datatype is not recognized '{type(valueLO)}'.""). [docs]def scf_xtpl_truhlar_2(functionname: str, zLO: int, valueLO: Extrapolatable, zHI: int, valueHI: Extrapolatable, verbose: int = 1, alpha: Optional[float] = None) -> Extrapolatable:; r""""""Extrapolation scheme using power form for reference energies with two adjacent; zeta-level bases. Used by :py:func:`~psi4.driver.cbs`. Parameters; ----------; functionname; Name of the CBS component (e.g., 'HF') used in summary printing.; zLO; Zeta number of the smaller basis set in 2-point extrapolation.; valueLO; Energy, gradient, or Hessian value at the smaller basis set in 2-point; extrapolation.; zHI; Zeta number of the larger basis set in 2-point extrapolation; Must be `zLO + 1`.; valueHI; Energy, gradient, or Hessian value at the larger basis set in 2-point; extrapolation.; verbose; Controls volume of printing.; alpha; Overrides the default :math:",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs_helper.html:6513,log,logger,6513,psi4manual/1.7.x/_modules/psi4/driver/driver_cbs_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs_helper.html,2,['log'],['logger']
Testability,"a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:45737,test,tests,45737,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,8,['test'],"['test', 'tests']"
Testability,"a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invokes the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp). Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest rep",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:39357,test,tests,39357,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,4,['test'],"['test', 'tests']"
Testability,"a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAP",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:7783,test,tests,7783,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['tests']
Testability,"a install pytest`'); abs_test_dir = os.path.sep.join([os.path.abspath(os.path.dirname(__file__)), ""tests""]). command = ['-rws', '-v', '--color', 'yes']; if extent.lower() == 'smoke':; command.extend(['-m', 'smoke']); elif extent.lower() == 'quick':; command.extend(['-m', 'quick or smoke']); elif extent.lower() == 'full':; command.extend(['-m', 'not long']); elif extent.lower() == 'long':; pass; if extras is not None:; command.extend(extras); command.extend(['--capture=sys', abs_test_dir]). retcode = pytest.main(command); return retcode. [docs]; def set_output_file(; ofile: str,; append: bool = False,; *,; loglevel: int = 20,; execute: bool = True,; print_header: Optional[bool] = None,; inherit_loglevel: bool = False) -> Path:; """"""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""; out = Path(ofile); log = out.with_suffix("".log""). # Get the custom logger; import logging. from psi4 import logger; if not inherit_loglevel:; logger.setLevel(loglevel). # Create for",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html:8056,log,logging,8056,psi4manual/1.9.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html,12,['log'],"['log', 'logging', 'loglevel']"
Testability,"a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani et al. PCCP 9 6106 (2007).; Pyridine Dimers from Hohenstein et al. JPCA 113 878 (2009).; Collection into NBC10 from Burns et al. JCP 134 084107 (2011).; Revised reference interaction energies (NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'NBC100' Burns et al. JCP 134 084107 (2011).; \(\Rightarrow\) 'NBC10A' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_available_databases-1.html:8275,benchmark,benchmark,8275,psi4manual/1.5.0/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_available_databases-1.html,4,['benchmark'],['benchmark']
Testability,"a(vibonly['omega'].data, decimals=4). imagfreqidx = np.where(vibonly['omega'].data.imag > vibonly['omega'].data.real)[0]; if len(imagfreqidx):; print(""Warning: thermodynamics relations excluded imaginary frequencies: {}"".format(omega_str[imagfreqidx])). filtered_theta_vib = np.delete(vibonly['theta_vib'].data, imagfreqidx, None); filtered_omega_str = np.delete(omega_str, imagfreqidx, None); rT = filtered_theta_vib / T # reduced temperature. lowfreqidx = np.where(filtered_theta_vib < 900.)[0]; if len(lowfreqidx):; print(""Warning: used thermodynamics relations inappropriate for low-frequency modes: {}"".format(; filtered_omega_str[lowfreqidx])). sm[('S', 'vib')] = np.sum(rT / np.expm1(rT) - np.log(1 - np.exp(-rT))); sm[('Cv', 'vib')] = np.sum(np.exp(rT) * (rT / np.expm1(rT))**2); sm[('Cp', 'vib')] = sm[('Cv', 'vib')]; sm[('ZPE', 'vib')] = np.sum(rT) * T / 2; sm[('E', 'vib')] = sm[('ZPE', 'vib')] + np.sum(rT * T / np.expm1(rT)); sm[('H', 'vib')] = sm[('E', 'vib')]. assert (abs(ZPE_cm_1 - sm[('ZPE', 'vib')] * qcel.constants.R * qcel.constants.hartree2wavenumbers * 0.001 /; qcel.constants.hartree2kJmol) < 0.1). #real_vibs = np.ma.masked_where(vibinfo['omega'].data.imag > vibinfo['omega'].data.real, vibinfo['omega'].data). # compute Gibbs; for term in ['elec', 'trans', 'rot', 'vib']:; sm[('G', term)] = sm[('H', term)] - T * sm[('S', term)]. # convert to atomic units; for term in ['elec', 'trans', 'rot', 'vib']:; # terms above are unitless (S, Cv, Cp) or in units of temperature (ZPE, E, H, G) as expressions are divided by R.; # R [Eh/K], computed as below, slightly diff in 7th sigfig from 3.1668114e-6 (k_B in [Eh/K]); # value listed https://en.wikipedia.org/wiki/Boltzmann_constant; uconv_R_EhK = qcel.constants.R / qcel.constants.hartree2kJmol; for piece in ['S', 'Cv', 'Cp']:; sm[(piece, term)] *= uconv_R_EhK # [mEh/K] <-- []; for piece in ['ZPE', 'E', 'H', 'G']:; sm[(piece, term)] *= uconv_R_EhK * 0.001 # [Eh] <-- [K]. # sum corrections and totals; for piece in ['S', 'Cv', ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html:34185,assert,assert,34185,psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html,16,['assert'],['assert']
Testability,"a-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints15; check SP basis Fortran exponent parsing. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Functional Test. mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gra",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:34266,test,test,34266,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"a.; If non-required, be sure to conditionalize it with if(TARGET; AddOn::addon) in CMake files or #ifdef USING_AddOn in; source files.; If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. psi4/external/upstream/. Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; psi4/external/common are needed, be sure to add them to the; DEPENDS argument.; The usual practice to to get everything cohesive between; the CMake for the AddOn repository and PSI4 and then as a; last step, mint a tag in the former and add it to two places in; external/upstream/addon_name/CMakeLists.txt and one; place in psi4/psi4/CMakeLists.txt so that only that version; and later are acceptable to PSI4 for detecting pre-built. psi4/tests/. In psi4/tests/CMakeLists.txt, add a block adding a tests subdirectory if Add-On enabled; Create new subdirectory tests/addon_name with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. psi4/doc/sphinxman/. Create a new .rst page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; psi4/doc/sphinxman/source/interfacing.rst.; Add a bullet to psi4/doc/sphinxman/source/build_planning.rst; Add the new page to the long list in; psi4/doc/sphinxman/CMakeLists.txt. If there are any files or; images referred to, add them to the file, too, following precedent. else¶. Build conda packages. Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. PSI4 and Add-On Projects Wor",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html:4152,test,tests,4152,psi4manual/1.4.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html,9,['test'],['tests']
Testability,"a/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4’s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a PSI4 test case to check that all’s well.; >>> conda install psi4; Using Anaconda Cloud api site https://api.anaconda.org; Fetching package metadata: ......; Solving package specifications: ......... Package plan for installation in environment /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4:. The following packages will be downloaded:. package | build; ---------------------------|-----------------; psi4-0.4.322 | py27_g84b3aa1 44.4 MB http://conda.anaconda.org/psi4/linux-64/. The following NEW packages will be INSTALLED:. psi4: 0.4.322-py27_g84b3aa1 http://conda.anaconda.org/psi4/linux-64/. Proceed ([y]/n)? y. Fetching packages ...; psi4-0.4.322-p 100% |####################################################################################| Time: 0:00:08 5.77 MB/s; Extracting packages ...; [ COMPLETE ]|#######################################################################################################| 100%; Linking packages ... Thank",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:17417,test,test,17417,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,4,['test'],['test']
Testability,"a['ptype']). # Parse bsse_type, raise exception if not provided or unrecognized; metadata['bsse_type_list'] = kwargs.pop('bsse_type'); if metadata['bsse_type_list'] is None:; raise ValidationError(""N-Body GUFunc: Must pass a bsse_type""); if not isinstance(metadata['bsse_type_list'], list):; metadata['bsse_type_list'] = [metadata['bsse_type_list']]. for num, btype in enumerate(metadata['bsse_type_list']):; metadata['bsse_type_list'][num] = btype.lower(); if btype.lower() not in ['cp', 'nocp', 'vmfc']:; raise ValidationError(""N-Body GUFunc: bsse_type '%s' is not recognized"" % btype.lower()). metadata['max_nbody'] = kwargs.get('max_nbody', -1); metadata['max_frag'] = metadata['molecule'].nfragments(); if metadata['max_nbody'] == -1:; metadata['max_nbody'] = metadata['molecule'].nfragments(); else:; metadata['max_nbody'] = min(metadata['max_nbody'], metadata['max_frag']). # Flip this off for now, needs more testing; # If we are doing CP lets save them integrals; #if 'cp' in bsse_type_list and (len(bsse_type_list) == 1):; # # Set to save RI integrals for repeated full-basis computations; # ri_ints_io = core.get_global_option('DF_INTS_IO'). # # inquire if above at all applies to dfmp2 or just scf; # core.set_global_option('DF_INTS_IO', 'SAVE'); # psioh = core.IOManager.shared_object(); # psioh.set_specific_retention(97, True). bsse_str = metadata['bsse_type_list'][0]; if len(metadata['bsse_type_list']) > 1:; bsse_str = str(metadata['bsse_type_list']); core.print_out(""\n\n""); core.print_out("" ===> N-Body Interaction Abacus <===\n""); core.print_out("" BSSE Treatment: %s\n"" % bsse_str). # Get compute list; metadata = build_nbody_compute_list(metadata). # Compute N-Body components; component_results = compute_nbody_components(func, method_string, metadata). # Assemble N-Body quantities; nbody_results = assemble_nbody_components(metadata, component_results). # Build wfn and bind variables; wfn = core.Wavefunction.build(metadata['molecule'], 'def2-svp'); dicts = [; 'energies', '",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_nbody.html:8120,test,testing,8120,psi4manual/1.3.2/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_nbody.html,1,['test'],['testing']
Testability,"a['ptype']). # Parse bsse_type, raise exception if not provided or unrecognized; metadata['bsse_type_list'] = kwargs.pop('bsse_type'); if metadata['bsse_type_list'] is None:; raise ValidationError(""N-Body GUFunc: Must pass a bsse_type""); if not isinstance(metadata['bsse_type_list'], list):; metadata['bsse_type_list'] = [metadata['bsse_type_list']]. for num, btype in enumerate(metadata['bsse_type_list']):; metadata['bsse_type_list'][num] = btype.lower(); if btype.lower() not in ['cp', 'nocp', 'vmfc']:; raise ValidationError(""N-Body GUFunc: bsse_type '%s' is not recognized"" % btype.lower()). metadata['max_nbody'] = kwargs.get('max_nbody', -1); metadata['max_frag'] = metadata['molecule'].nfragments(); if metadata['max_nbody'] == -1:; metadata['max_nbody'] = metadata['molecule'].nfragments(); else:; metadata['max_nbody'] = min(metadata['max_nbody'], metadata['max_frag']). # Flip this off for now, needs more testing; # If we are doing CP lets save them integrals; #if 'cp' in bsse_type_list and (len(bsse_type_list) == 1):; # # Set to save RI integrals for repeated full-basis computations; # ri_ints_io = core.get_global_option('DF_INTS_IO'). # # inquire if above at all applies to dfmp2 or just scf; # core.set_global_option('DF_INTS_IO', 'SAVE'); # psioh = core.IOManager.shared_object(); # psioh.set_specific_retention(97, True). bsse_str = metadata['bsse_type_list'][0]; if len(metadata['bsse_type_list']) > 1:; bsse_str = str(metadata['bsse_type_list']); core.print_out(""\n\n""); core.print_out("" ===> N-Body Interaction Abacus <===\n""); core.print_out("" BSSE Treatment: %s\n"" % bsse_str). # Get compute list; metadata = build_nbody_compute_list(metadata). # Compute N-Body components; component_results = compute_nbody_components(func, method_string, metadata). # Assemble N-Body quantities; nbody_results = assemble_nbody_components(metadata, component_results). # Figure out returns; if metadata['ptype'] != 'energy':; if metadata['return_total_data']:; np_final_ptype = nbody_result",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver_nbody.html:7011,test,testing,7011,psi4manual/1.2.1/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver_nbody.html,1,['test'],['testing']
Testability,"a^+\) state of the CN radical, with Cartesian input. ao-dfcasscf-sp; CASSCF/6-31G** energy point. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. scf-response2; Compute the dipole polarizability for water with custom basis set. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. cisd-sp; 6-31G** H2O Test CISD Energy Point. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. casscf-fzc-sp; CASSCF/6-31G** energy point. sapt-sf1; Tests the Psi4 SF-SAPT code. sa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:19265,test,test,19265,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"a^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/testsuite-1.html:3220,test,test,3220,psi4manual/1.1.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/testsuite-1.html,4,['test'],['test']
Testability,"abled at the moment); PSI Files: scratch file names and numbers in psi4/include/psifiles.h. Some documentation is even extracted from Psi4 objects at runtime. psi4: docstrings for the psi4 built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/share/python/functional.py; BasisFamily: fitting basis sets for each orbital basis as encoded in psi4/share/python/basislistdunning.py and psi4/share/python/basislistother.py. Building all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/CMakeLists.txt; , so very long builds should be infrequent (unless you’re touching; psi4/src/bin/psi4/read_options.cc. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) doc/sphinxman and start from scratch.; Even ~10 minutes of build time can be annoying when developing; documentation and testing rst files. In that situation, use the target; below which builds only the written docs (not autodocs) in; psi4/doc/sphinxman/source quickly, though with a lot of warnings for; unresolved links:; >>> make sphinxmini. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re a; few resources on Sphinx formatting. reStructuredText; rendered test document; vs. source test document; Another reStructuredText; A third reStructuredText and Sphinx; LaTeX that Sphinx can handle; Sphinx Docs. Math in the Codebase¶; It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the #! comment comments at the top of test case; input files, the /*- comment -*/ comments in; psi4/src/bin/psi4/read_options.cc, and the r"""""" comment """"""; docstrings in python modules. (That r"""""" m",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/documentation-1.html:3475,test,testing,3475,psi4manual/1.0.0/documentation-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/documentation-1.html,2,['test'],['testing']
Testability,"ac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. BBI¶. Database (Merz) of protein backbone-backbone interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from Sherrill group, Georgia Tech.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. O24by5mb¶. Database (O24) of interaction energies for small open-shell high-spin bimolecular complexes.; Geometries taken from https://gitlab.com/piotr.zuchowski/o24x5/-/tree/4ec3cae0546b6ae4f4f2cf28482cd164c8323cc6.; Reference interaction energies taken from J. Chem. Phys. 154, 134106 (2021) https://doi.org/10.1063/5.0043793.; Variant with ghosted hydrogen as midbonds in the COM. no | name | subset. 1 | CN - He | DD; 2 | NH - He | DD; 3 | C2H3 - C2H4 | DD; 4 | O2 - H2 | DD; 5 | NH - Ar | DD; 6 | CN - Ar | DD; 7 | O2 - N2 | DD; 8 | H2O - O2(sp) | DD; 9 | O2 - O2 | DD. 10 | NH - NH | ED; 11 | CH2O - NH2 | ED; 12 | H2O - Na | ED; 13 | H2O - OH | ED; 14 | H2O - O2H | ED; 15 | Li - NH3(gm) | ED; 16 | Li - O2 | MX; 17 | CN - H2 | MX; 18 | Li - NH3(l",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_available_databases.html:1289,benchmark,benchmark,1289,psi4manual/1.9.x/autodoc_available_databases.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_available_databases.html,2,['benchmark'],['benchmark']
Testability,"ac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files and Elementary Restart) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; Get bzip2. You’ll need this slightly exotic command so run which to test for availability, and install from yum, source, etc. if unavailable. Yo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:12840,test,test,12840,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,6,['test'],['test']
Testability,"ac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.ana",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/conda-1.html:13638,test,test,13638,psi4manual/1.4.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html,9,['test'],['test']
Testability,"actor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (PLUGIN_FOCK); Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. DEBUG (JK); The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (PLUGIN_FOCK); The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (SOLVER); The amount of debug information printed to the output file. Type: integer; Default: 0. DO_SINGLETS (PLUGIN_FOCK); Do singlet states? Default true. Type: boolean; Default: true. DO_TRIPLETS (PLUGIN_FOCK); Do triplet states? Default true. Type: boolean; Default: true. EXPLICIT_HAMILTONIAN (PLUGIN_FOCK); Do explicit hamiltonian only?. Type: boolean; Default: false. FITTING_ALGORITHM (JK); Fitting algorithm (0 for old, 1 for new). Type: integer; Default: 0. FITTING_CONDITION (JK); The maximum reciprocal condition allowed in the fitting metric. Type: double; Default: 1.0e-12. MODULE (PLUGIN_FOCK); What app to test?. Type: string; Possible Values: RCIS, RCPHF, RTDHF; Default: RCIS. OMP_N_THREAD (JK); The maximum number of integral threads (0 for omp_get_max_threads()). Type: integer; Default: 0. PRINT (JK); The amount of information printed to the output file. Type: integer; Default: 1. PRINT (PLUGIN_FOCK); The amount of information printed to the output file. Type: integer; Default: 1. PRINT (SOLVER); The amount of information printed to the output file. Type: integer; Default: 1. RI_BASIS_SCF (JK); Auxiliary basis for SCF. Type: string; Default: No Default. SCF_TYPE (JK); SCF Type. Type: string; Possible Values: DIRECT, DF, GPUDF; Default: DIRECT. SCHWARZ_CUTOFF (JK); The schwarz cutoff value. Type: double; Default: 1.0e-12. SOLVER_CONVERGENCE (SOLVER); Solver convergence threshold (max 2-norm). See the note at the beginning of Section ref{keywords}. Type: conv double; Default: 1.0e-6. SOLVER_MAX_SUBSPACE (SOLVER); DL Solver maximum number of subspace vectors. Type: integer; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodir_plugins/glossary__plugin_libfock-1.html:2245,test,test,2245,psi4manual/4.0b2/autodir_plugins/glossary__plugin_libfock-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodir_plugins/glossary__plugin_libfock-1.html,8,['test'],['test']
Testability,"ad_subsets(modname='subsetgenerator', pythonpath=None)[source]¶; For each component database, loads subsets from all functions; in module modname. Default modname usues standard generators. mcs = None¶; assembly pattern for transspecies modelchems; >>> print asdf.mcs.keys(); XXXX. plot_all_flats(modelchem=None, sset='default', xlimit=4.0, failoninc=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Generate pieces for inclusion into tables. Supply list of; modelchemistries to plot from modelchem, otherwise defaults to; all those available. Can modify subset sset and plotting; range xlimit.; >>> asdf.plot_all_flats(sset='tt-5min', xlimit=4.0). plot_axis(axis, modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶. plot_bars(modelchem, benchmark='default', sset=['default', 'hb', 'mx', 'dd'], failoninc=True, verbose=False, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Prepares ‘grey bars’ diagram for each model chemistry in array; modelchem versus benchmark over all component databases. A wide bar; is plotted with three smaller bars, corresponding to the ‘mae’; summary statistic of the four subsets in sset.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares bars diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>> asdf.plot_bars(['MP2-CP-adz', 'MP2-CP-adtz'], sset=['tt-5min', 'hb-5min', 'mx-5min', 'dd-5min']). plot_disthist(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, xtitle='', view=True, save",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:34522,benchmark,benchmark,34522,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,4,['benchmark'],['benchmark']
Testability,"add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/add_tests-1.html:4568,test,test,4568,psi4manual/1.4.0/add_tests-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html,8,"['assert', 'test']","['assert', 'test']"
Testability,"adient for the NO molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. casscf-fzc-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. fnocc6; Test method/basis with disk_df. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fci-h2o-2; 6-31G H2O Test FCI Energy Point. dct10; The multiple guesses for DCT amplitudes for ODC-12. mints-benchmark; run some BLAS benchmarks. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. nbo; Generation of NBO file. frac-traverse; Scan fract",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:21389,benchmark,benchmark,21389,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,8,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/build_planning.html:64619,test,tests,64619,psi4manual/master/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html,6,"['log', 'test']","['logging', 'logo', 'test', 'testing', 'tests']"
Testability,"ailure. Used in input files in the test suite. """"""; # Skip the first six elemets which are just labels; evec = [float(k) for k in expected.split()[6:]]; cvec = [float(k) for k in computed.split()[6:]]; if len(evec) == len(cvec):; for n in range(len(evec)):; if (math.fabs(evec[n]-cvec[n]) > 1.0e-4):; message = (""\t%s: computed cube file does not match expected cube file."" % label); raise TestComparisonError(message); else:; message = (""\t%s: computed cube file does not match expected cube file."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. # Uncomment and use if compare_arrays above is inadequate; #def compare_lists(expected, computed, digits, label):; # """"""Function to compare two Python lists. Prints :py:func:`util.success`; # when elements of vector *computed* match elements of vector *expected* to; # number of *digits*. Performs a system exit on failure to match symmetry; # structure, dimension, or element values. Used in input files in the test suite.; #; # """"""; # if len(expected) != len(computed):; # message = (""\tThe reference has %d entries, but the computed vector has %d\n."" % (len(expected), len(computed))); # raise TestComparisonError(message); # dim = len(expected); # failed = 0; # for entry in range(dim):; # if(abs(expected[entry] - computed[entry]) > 10 ** (-digits)):; # print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed[entry], expected[entry])); # failed = 1; # break; #; # if(failed):; # core.print_out(""The computed vector\n""); # computed.print_out(); # core.print_out(""The reference vector\n""); # expected.print_out(); # message = (""\t%s: computed list does not match expected list."" % (label, computed, expected)); # raise TestComparisonError(message); # success(label). [docs]def copy_file_to_scratch(filename, prefix, namespace, unit, move = False):. """"""Function to move file into scratch with correct naming; convention. Arguments:. @arg filename full path to file; @arg prefix compu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html:13344,test,test,13344,psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,1,['test'],['test']
Testability,"ailure.; equal_phase (Union[bool, List]) – Compare computed or its opposite as equal.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Callable | None). Return type:; Union[bool, Tuple[bool, str]]. Returns:. allclose (bool) – Returns True if expected and computed are equal within tolerance; False otherwise.; message (str) – When return_message=True, also return passed or error message. Notes; absolute(computed - expected) <= (atol + rtol * absolute(expected)). psi4.compare_vectors(expected, computed, atol_exponent, label[, *, check_name=False, **kwargs]). psi4.compare_vectors(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Vector objects.; Compares Vector properties of name (optional through check_name), nirrep, and dimension of each irrep.; For comparing actual numerical contents, the vectors are serialized to NumPy array format and passed to qcelemental.testing.compare_recursive().; Handles both Psi4-style signatures ((expected, computed, atol_exponent, label); see atol_exponent parameter below) and QCA-style signatures ((expected, computed, label)). Parameters:; atol_exponent (int or float) – Absolute tolerance (see formula in qcelemental.testing.compare_values() notes).; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99. psi4.compare_wavefunctions(expected, computed, atol_exponent, label[, *, check_name=False, **kwargs]). psi4.compare_wavefunctions(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Wavefunction objects.; Compares over 30 Wavefunction properties, including nirrep, nso, molecule geometry, basis set nbf, density matrices, gradient results, etc.; Handles both Psi4-style signatures ((expected, computed, a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/add_tests.html:21749,test,testing,21749,psi4manual/master/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/master/add_tests.html,1,['test'],['testing']
Testability,"al in\n"""""" % (dbse); instructions += """""" length and give summary results for the database in its output file.\n\n""""""; instructions += """""" psi4 -i %-27s -o %-27s\n\n"""""" % (dbse + '-master.in', dbse + '-master.out'); instructions += """""" Alternatively, a single-job execution of the database may be accessed through\n""""""; instructions += """""" the database wrapper option mode='continuous'.\n\n""""""; PsiMod.print_out(instructions). fmaster = open('%s-master.in' % (dbse), 'w'); fmaster.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); fmaster.write(""database('%s', '%s', mode='reap', cp='%s', rlxd='%s', zpe='%s', benchmark='%s', linkage=%d, subset=%s, tabulate=%s)\n\n"" %; (name, db_name, db_cp, db_rlxd, db_zpe, db_benchmark, os.getpid(), HRXN, db_tabulate)); fmaster.close(). # Loop through chemical systems; ERGT = {}; ERXN = {}; VRGT = {}; VRXN = {}; for rgt in HSYS:; VRGT[rgt] = {}. # extra definition of molecule so that logic in building commands string has something to act on; exec(format_molecule_for_input(GEOS[rgt])); molecule = PsiMod.get_active_molecule(). # build string of title banner; banners = ''; banners += """"""PsiMod.print_out('\\n')\n""""""; banners += """"""banner(' Database %s Computation: Reagent %s \\n %s')\n"""""" % (db_name, rgt, TAGL[rgt]); banners += """"""PsiMod.print_out('\\n')\n\n"""""". # build string of lines that defines contribution of rgt to each rxn; actives = ''; actives += """"""PsiMod.print_out(' Database Contributions Map:\\n %s\\n')\n"""""" % ('-' * 75); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn); if rgt in ACTV[db_rxn]:; actives += """"""PsiMod.print_out(' reagent %s contributes by %.4f to reaction %s\\n')\n"""""" \; % (rgt, RXNM[db_rxn][rgt], db_rxn); actives += """"""PsiMod.print_out('\\n')\n\n"""""". # build string of commands for options from the input file TODO: handle local options too; commands = ''; commands += """"""\nPsiMod.set_memory(%s)\n\n"""""" % (user_memory); for chgdopt in PsiMod.get_global_option_list():; if PsiMod.has_glo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html:39589,log,logic,39589,psi4manual/4.0b3/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html,4,['log'],['logic']
Testability,"al integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fnocc4; Test FNO-DF-CCSD(T) energy. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradie",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:3390,test,test,3390,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,8,['test'],['test']
Testability,"al with user-specified basis and properties for particular root. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. pywrap-cbs1; Various basis set extrapolation tests. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. dct10; The multiple guesses for DCT amplitudes for ODC-12. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). props4; Electrostatic potential and electric field evaluated on a grid around water. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mom-h2o-3; MOM excitation from LUMO HOMO+3. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. sapt10;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:11103,test,test,11103,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; 'S22B' Marshall et al. JCP 135 194102 (2011). subset; 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22; 'WATER' water dimer. HTBH¶. Database (Truhlar) of hydrogen-transfer barrier height reactions.; Geometries from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/raw_geom.cgi .; Reference energies from Zhao et al. JPCA, 109 2012-2018 (2005) doi: 10.1021/jp045141s [in supporting information]. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). . cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. Table Of Contents. BAKERJCC96; ACENES; NBC10; A24; S22by5; BENCH12; RSE42; BAKERJCC93; HTR40; RGC10; S66; CORE; BASIC; NHTBH; HBC6; HSG; JSCH; S22; HTBH; NCB31. Previous topic; Database; Next topic; Complete Basis Set; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Psithon Functions: Invoking a Calculation »; Database ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_available_databases-1.html:9808,benchmark,benchmark,9808,psi4manual/4.0b5/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_available_databases-1.html,2,['benchmark'],['benchmark']
Testability,"al. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. mbis-2; MBIS calculation on OH- (Expanded Arrays). dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. pywrap-cbs1; Various basis set extrapolation tests. cc52; CCSD Response for H2O2. mints-benchmark; run some BLAS benchmarks. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. freq-masses; check nonphysical masses possible. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:30342,test,tests,30342,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"al[Dict[str, float]]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. Extra QCA Functions¶. psi4.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=<function _psi4_true_raise_handler>)¶; Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters:. expected – int, bool, str or array-like of same.; Reference value against which computed is compared.; computed – int, bool, str or array-like of same.; Input value to compare against expected.; label – Label for passed and error messages. Defaults to calling function name.; equal_phase – Compare computed or its opposite as equal.; quiet – Whether to log the return message.; return_message – Whether to return tuple. See below.; return_handler – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Returns:. allclose (bool) – Returns True if expected and computed are equal; False otherwise.; message (str) – When return_message=True, also return passed or error message. Return type:; bool | Tuple[bool, str]. Notes. Akin to numpy.array_equal().; For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use compare_recursive(). psi4.compare_recursive(expected, computed, *args, **kwargs)¶; Comparison function for recursively comparing mixed-type and nested structures such as dictionaries and lists.; See qcelemental.testing.compare_recursive() for details. table of contents. Test Suite; CTest and pytest, PSIthon and PsiAPI; Test Contents; Adding PSIthon Test Cases; CMakeLists.txt; input.dat; output.ref; test_input.py; Running for Debugging. Adding PsiAPI Test Cases; Running for Debugging. Comparison Functions; Plain Old Data; compare_values(); compare_integers(). Objects",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/add_tests.html:29527,test,testing,29527,psi4manual/1.9.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/add_tests.html,2,['test'],['testing']
Testability,"alculations. """"""; import os; import re; import sys; import json; import shutil. import numpy as np. from psi4.driver import driver_util; from psi4.driver import driver_cbs; from psi4.driver import driver_nbody; from psi4.driver import driver_findif; from psi4.driver import p4util; from psi4.driver import qcdb; from psi4.driver.procrouting import *; from psi4.driver.p4util.exceptions import *. # never import wrappers or aliases into this file. def _find_derivative_type(ptype, method_name, user_dertype):; r""""""; Figures out the derivative type (0, 1, 2) for a given method_name. Will; first use user default and then the highest available derivative type for; a given method.; """""". if ptype not in ['gradient', 'hessian']:; raise ValidationError(""_find_derivative_type: ptype must either be gradient or hessian.""). dertype = ""(auto)"". # If user type is None, try to find the highest derivative; if user_dertype is None:; if (ptype == 'hessian') and (method_name in procedures['hessian']):; dertype = 2; # Will need special logic if we ever have managed Hessians; elif method_name in procedures['gradient']:; dertype = 1; if procedures['gradient'][method_name].__name__.startswith('select_'):; try:; procedures['gradient'][method_name](method_name, probe=True); except ManagedMethodError:; dertype = 0; elif method_name in procedures['energy']:; dertype = 0; else:; # Quick sanity check. Only *should* be able to be None or int, but hey, kids today...; if not isinstance(user_dertype, int):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype. if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; raise ValidationError('INTEGRAL_PACKAGE ERD does not play nicely with derivatives, so stopping.'). if (core.get_global_option('PCM')) and (dertype != 0):; core.print_out('\nPCM analytic gradients are not implemented yet, re-routing to finite differences.\n'); dertype = 0. # Summary validation; if (dertype == 2) a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html:2343,log,logic,2343,psi4manual/1.3.2/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html,1,['log'],['logic']
Testability,"ally be run by running ctest in the compilation; directory. More info on ctest options can be found; here. Sample input files; can be found in the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below.; Sample inputs accessible through interfaced executables are bulleted below. CFOUR; CHEMPS2; COOKBOOK; DFTD3; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/testsuite-1.html:1301,test,test,1301,psi4manual/1.2.1/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/testsuite-1.html,2,['test'],['test']
Testability,"alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:15380,test,testing,15380,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['testing']
Testability,"alpy (H), entropy (S), and Gibbs free energy (G). Similarly, the; molecular geometry is used to obtain rotational constants, which are; then used to obtain rotational contributions to H, S, and G. Analysis of Intermolecular Interactions¶; Now let’s consider something a little more interesting. PSI4; contains code to analyze the nature of intermolecular interactions; between two molecules, via symmetry-adapted perturbation theory; (SAPT) [Jeziorski:1994:1887]. This kind of analysis gives a lot; of insight into the nature of intermolecular interactions, and PSI4; makes these computations easier than ever.; For a SAPT computation, the input needs to provide information on two; distinct molecules. This is very easy, we just give a Z-matrix or set of; Cartesian coordinates for each molecule, and separate the two with two; dashes, like this:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20# Example SAPT computation for ethene*ethine (*i.e.*, ethylene*acetylene),; # test case 16 from the S22 database. molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom. }. Here’s the second half of the input, where we specify the computation; options:; 1; 2; 3; 4; 5; 6; 7set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'). Before, we have been setting keywords individually with commands like; set basis cc-pVDZ. Because we have a few more options now, it’s; convenient to place them together into the set; block, bounded by {...}. This; will set all of these options as “global” options (meaning that they are; visible to all parts of the program). Most common PSI4 options can be; set in a globals section like this. If an option needs to be visible;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/tutorial-1.html:10887,test,test,10887,psi4manual/1.1.0/tutorial-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/tutorial-1.html,6,['test'],['test']
Testability,"als. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:17724,test,test,17724,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"alue (role of double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Managing: Git, Conda, CMake and all that; Adding Add-Ons. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/manage_addon.html:11486,test,testing,11486,psi4manual/1.6.x/manage_addon.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/manage_addon.html,1,['test'],['testing']
Testability,"alueHI; Energy, gradient, or Hessian value at the basis set.; verbose; Controls volume of printing. Returns; -------; float or ~numpy.ndarray; Returns :math:`E_{total}^{\infty}` which is equal to valueHI.; Eponymous function applied to input zetas and values; type from `valueHI`. Notes; -----; .. math:: E_{total}^X = E_{total}^{\infty}. Examples; --------; >>> # [1] Fancy way to get HF/cc-pCVQZ; >>> psi4.energy('cbs', scf_wfn='hf', scf_basis='cc-pcvqz', scf_scheme='xtpl_highest_1'). """"""; if isinstance(valueHI, float):. if verbose:; # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += f""""""\n ==> {functionname.upper()} <==\n\n""""""; cbsscheme += f"""""" HI-zeta ({zHI}) Energy: {valueHI: 16.12f}\n"""""". core.print_out(cbsscheme); logger.debug(cbsscheme). return valueHI. elif isinstance(valueHI, np.ndarray):. if verbose > 2:; cbsscheme = f""""""\n ==> {functionname.upper()} <==\n\n""""""; cbsscheme += f"""""" HI-zeta ({zHI}) Data\n""""""; cbsscheme += nppp(valueHI); core.print_out(cbsscheme); logger.debug(cbsscheme). return valueHI. [docs]; def scf_xtpl_helgaker_2(functionname: str, zLO: int, valueLO: Extrapolatable, zHI: int, valueHI: Extrapolatable, verbose: int = 1, alpha: Optional[float] = None) -> Extrapolatable:; r""""""Extrapolation scheme using exponential form for reference energies with two adjacent; zeta-level bases. Used by :py:func:`~psi4.driver.cbs`. Parameters; ----------; functionname; Name of the CBS component (e.g., 'HF') used in summary printing.; zLO; Zeta number of the smaller basis set in 2-point extrapolation.; valueLO; Energy, gradient, or Hessian value at the smaller basis set in 2-point; extrapolation.; zHI; Zeta number of the larger basis set in 2-point extrapolation.; Must be `zLO + 1`.; valueHI; Energy, gradient, or Hessian value at the larger basis set in 2-point; extrapolation.; verbose; Controls volume of printing.; alpha; Fitted 2-point parameter. Overrides the default :math:`\alpha = 1.63`. Returns; -------; float or ~numpy.ndarray; Epo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs_helper.html:3130,log,logger,3130,psi4manual/1.8.x/_modules/psi4/driver/driver_cbs_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs_helper.html,6,['log'],['logger']
Testability,"alueHI; Energy, gradient, or Hessian value at the basis set.; verbose; Controls volume of printing. Returns; -------; float or ~numpy.ndarray; Returns :math:`E_{total}^{\infty}` which is equal to valueHI.; Eponymous function applied to input zetas and values; type from `valueHI`. Notes; -----; .. math:: E_{total}^X = E_{total}^{\infty}. Examples; --------; >>> # [1] Fancy way to get HF/cc-pCVQZ; >>> psi4.energy('cbs', scf_wfn='hf', scf_basis='cc-pcvqz', scf_scheme='xtpl_highest_1'). """"""; if isinstance(valueHI, float):. if verbose:; # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += f""""""\n ==> {functionname.upper()} <==\n\n""""""; cbsscheme += f"""""" HI-zeta ({zHI}) Energy: {valueHI: 16.12f}\n"""""". core.print_out(cbsscheme); logger.debug(cbsscheme). return valueHI. elif isinstance(valueHI, np.ndarray):. if verbose > 2:; cbsscheme = f""""""\n ==> {functionname.upper()} <==\n\n""""""; cbsscheme += f"""""" HI-zeta ({zHI}) Data\n""""""; cbsscheme += nppp(valueHI); core.print_out(cbsscheme); logger.debug(cbsscheme). return valueHI. [docs]def scf_xtpl_helgaker_2(functionname: str, zLO: int, valueLO: Extrapolatable, zHI: int, valueHI: Extrapolatable, verbose: int = 1, alpha: Optional[float] = None) -> Extrapolatable:; r""""""Extrapolation scheme using exponential form for reference energies with two adjacent; zeta-level bases. Used by :py:func:`~psi4.driver.cbs`. Parameters; ----------; functionname; Name of the CBS component (e.g., 'HF') used in summary printing.; zLO; Zeta number of the smaller basis set in 2-point extrapolation.; valueLO; Energy, gradient, or Hessian value at the smaller basis set in 2-point; extrapolation.; zHI; Zeta number of the larger basis set in 2-point extrapolation.; Must be `zLO + 1`.; valueHI; Energy, gradient, or Hessian value at the larger basis set in 2-point; extrapolation.; verbose; Controls volume of printing.; alpha; Fitted 2-point parameter. Overrides the default :math:`\alpha = 1.63`. Returns; -------; float or ~numpy.ndarray; Epony",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs_helper.html:3126,log,logger,3126,psi4manual/1.7.x/_modules/psi4/driver/driver_cbs_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs_helper.html,2,['log'],['logger']
Testability,"ame for output and logging files. Parameters:. ofile (str) – Name of ASCII output file including extension. The logging file is set from this string with a .log extension.; append (bool) – Do append to the output and logging files rather than (the default) truncating them?; loglevel (int) – The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute (bool) – Do set ofile via psi4.core.set_output_file() and add the logger, rather than just returning ofile path.; print_header (Optional[bool]) – Whether to write the Psi4 header to the ASCII output file. (Only applicable if execute=True.) By default,; writes if file is truncated (append=False) but not if appended.; inherit_loglevel (bool) – If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns:; Path(ofile). Return type:; Path. Notes; This psi4.set_output_file() command calls psi4.core.set_output_file() and should be used in; preference to it as this additionally sets up logging. pydantic model psi4.driver.task_base.BaseComputer[source]¶; Base class for “computers” that plan, run, and process QC tasks. Show JSON schema{; ""title"": ""BaseComputer"",; ""description"": ""Base class for \""computers\"" that plan, run, and process QC tasks."",; ""type"": ""object"",; ""properties"": {}; }. abstract compute()[source]¶. abstract plan()[source]¶. psi4.driver.task_planner.TaskComputers¶; alias of AtomicComputer | CompositeComputer | FiniteDifferenceComputer | ManyBodyComputer. psi4.driver.driver_nbody.SubTaskComputers¶; alias of AtomicComputer | CompositeComputer | FiniteDifferenceComputer. psi4.driver.task_planner.expand_cbs_methods(method, basis, driver, **kwargs)[source]¶; Sort out the user input method string into recognized fields. Handles cases like:. ""mp2"" – passes through;; ""mp2/cc-pvdz"" – broken into method and basis fields;; ""mp2/cc-pv[d,t]z"" – processed into method=”cbs” & CBSMetadata spec;; method=""cbs"", cbsmeta=CBSMetadata –",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/external_apis.html:6580,log,logging,6580,psi4manual/master/external_apis.html,https://psicode.org,https://psicode.org/psi4manual/master/external_apis.html,1,['log'],['logging']
Testability,"ame for output and logging files. Parameters:. ofile (str) – Name of ASCII output file including extension. The logging file is set from this string with a .log extension.; append (bool) – Do append to the output and logging files rather than (the default) truncating them?; loglevel (int) – The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute (bool) – Do set ofile via psi4.core.set_output_file() and add the logger, rather than just returning ofile path.; print_header (Optional[bool]) – Whether to write the Psi4 header to the ASCII output file. (Only applicable if execute=True.) By default,; writes if file is truncated (append=False) but not if appended.; inherit_loglevel (bool) – If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns:; Path(ofile). Return type:; Path. Notes; This psi4.set_output_file() command calls psi4.core.set_output_file() and should be used in; preference to it as this additionally sets up logging. pydantic model psi4.driver.task_base.BaseComputer[source]¶; Base class for “computers” that plan, run, and process QC tasks. Show JSON schema{; ""title"": ""BaseComputer"",; ""description"": ""Base class for \""computers\"" that plan, run, and process QC tasks."",; ""type"": ""object"",; ""properties"": {}; }. abstract compute()[source]¶. abstract plan()[source]¶. psi4.driver.task_planner.TaskComputers¶; alias of Union[AtomicComputer, CompositeComputer, FiniteDifferenceComputer, ManyBodyComputer]. psi4.driver.driver_nbody.SubTaskComputers¶; alias of Union[AtomicComputer, CompositeComputer, FiniteDifferenceComputer]. psi4.driver.task_planner.expand_cbs_methods(method, basis, driver, **kwargs)[source]¶; Sort out the user input method string into recognized fields. Handles cases like:; :rtype: Tuple[str, str, Dict]. ""mp2"" – passes through;; ""mp2/cc-pvdz"" – broken into method and basis fields;; ""mp2/cc-pv[d,t]z"" – processed into method=”cbs” & CBSMetadata sp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/external_apis.html:6617,log,logging,6617,psi4manual/1.9.x/external_apis.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/external_apis.html,1,['log'],['logging']
Testability,"ame for output and logging files. Parameters:. ofile (str) – Name of ASCII output file including extension. The logging file is set from this string with a .log extension.; append (bool) – Do append to the output and logging files rather than (the default) truncating them?; loglevel (int) – The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute (bool) – Do set ofile via psi4.core.set_output_file() and add the logger, rather than just returning ofile path.; print_header (Optional[bool]) – Whether to write the Psi4 header to the ASCII output file. (Only applicable if execute=True.) By default,; writes if file is truncated (append=False) but not if appended.; inherit_loglevel (bool) – If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns:; Path(ofile). Return type:; Path. Notes; This psi4.set_output_file() command calls psi4.core.set_output_file() and should be used in; preference to it as this additionally sets up logging. pydantic model psi4.driver.task_base.BaseComputer[source]¶; Base class for “computers” that plan, run, and process QC tasks. Show JSON schema{; ""title"": ""BaseComputer"",; ""description"": ""Base class for \""computers\"" that plan, run, and process QC tasks."",; ""type"": ""object"",; ""properties"": {}; }. abstract compute()[source]¶. abstract plan()[source]¶. psi4.driver.task_planner.TaskComputers¶; alias of Union[AtomicComputer, CompositeComputer, FiniteDifferenceComputer, ManyBodyComputer]. psi4.driver.driver_nbody.SubTaskComputers¶; alias of Union[AtomicComputer, CompositeComputer, FiniteDifferenceComputer]. psi4.driver.task_planner.expand_cbs_methods(method, basis, driver, **kwargs)[source]¶; Sort out the user input method string into recognized fields.; Handles cases like:. ""mp2"" – passes through;; ""mp2/cc-pvdz"" – broken into method and basis fields;; ""mp2/cc-pv[d,t]z"" – processed into method=”cbs” & CBSMetadata spec;; method=""cbs"", cbsmeta=CBS",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/external_apis.html:6577,log,logging,6577,psi4manual/1.8.x/external_apis.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/external_apis.html,1,['log'],['logging']
Testability,"ame. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). Upon checking in a new python file, edit the file psi4/doc/userman/source/index.rst and follow the instructions therein that your file may be autodocumented here. Write docstrings! For a major function intended for use in input files, emulate any docstring in psi4/share/python/driver.py. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. A",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html:3811,test,test,3811,psi4manual/1.0.0/bestpractices_py-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/bestpractices_py-1.html,2,['test'],['test']
Testability,"ame.upper()); cbsscheme += """""" LO-zeta (%s) Energy: % 16.12f\n"""""" % (str(zLO), valueLO); cbsscheme += """""" MD-zeta (%s) Energy: % 16.12f\n"""""" % (str(zMD), valueMD); cbsscheme += """""" HI-zeta (%s) Energy: % 16.12f\n"""""" % (str(zHI), valueHI); cbsscheme += """""" Alpha (exponent) Value: % 16.12f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: % 16.12f\n\n"""""" % (beta). name_str = ""%s/(%s,%s,%s)"" % (functionname.upper(), zeta_val2sym[zLO].upper(), zeta_val2sym[zMD].upper(),; zeta_val2sym[zHI].upper()); cbsscheme += """""" @Extrapolated """"""; cbsscheme += name_str + ':'; cbsscheme += "" "" * (18 - len(name_str)); cbsscheme += """"""% 16.12f\n\n"""""" % value; core.print_out(cbsscheme). return value. elif isinstance(valueLO, (core.Matrix, core.Vector)):; valueLO = np.array(valueLO); valueMD = np.array(valueMD); valueHI = np.array(valueHI). nonzero_mask = np.abs(valueHI) > 1.e-14; top = (valueHI - valueMD)[nonzero_mask]; bot = (valueMD - valueLO)[nonzero_mask]. ratio = top / bot; alpha = -1 * np.log(np.abs(ratio)); beta = top / (np.exp(-1 * alpha * zMD) * (ratio - 1)); np_value = valueHI.copy(); np_value[nonzero_mask] -= beta * np.exp(-1 * alpha * zHI); np_value[~nonzero_mask] = 0.0. # Build and set from numpy routines; value = core.Matrix(*valueHI.shape); value_view = np.asarray(value); value_view[:] = np_value; return value. else:; raise ValidationError(""scf_xtpl_helgaker_3: datatype is not recognized '%s'."" % type(valueLO)). #def corl_xtpl_helgaker_2(functionname, valueSCF, zLO, valueLO, zHI, valueHI, verbose=True):; [docs]def corl_xtpl_helgaker_2(functionname, zLO, valueLO, zHI, valueHI, verbose=True):; r""""""Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by :py:func:`~psi4.cbs`.; Halkier, Helgaker, Jorgensen, Klopper, Koch, Olsen, & Wilson, Chem. Phys. Lett. 286 (1998) 243-252. .. math:: E_{corl}^X = E_{corl}^{\infty} + \beta X^{-3}. """"""; if type(valueLO) != type(valueHI):; raise ValidationError(""corl_xtpl_helgaker_2: Inputs must be of t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver_cbs.html:9652,log,log,9652,psi4manual/1.1.0/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver_cbs.html,1,['log'],['log']
Testability,"ame.upper()); cbsscheme += """""" LO-zeta (%s) Energy: % 16.12f\n"""""" % (str(zLO), valueLO); cbsscheme += """""" MD-zeta (%s) Energy: % 16.12f\n"""""" % (str(zMD), valueMD); cbsscheme += """""" HI-zeta (%s) Energy: % 16.12f\n"""""" % (str(zHI), valueHI); cbsscheme += """""" Alpha (exponent) Value: % 16.12f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: % 16.12f\n\n"""""" % (beta). name_str = ""%s/(%s,%s,%s)"" % (functionname.upper(), zeta_val2sym[zLO].upper(), zeta_val2sym[zMD].upper(),; zeta_val2sym[zHI].upper()); cbsscheme += """""" @Extrapolated """"""; cbsscheme += name_str + ':'; cbsscheme += "" "" * (18 - len(name_str)); cbsscheme += """"""% 16.12f\n\n"""""" % value; core.print_out(cbsscheme). return value. elif isinstance(valueLO, (core.Matrix, core.Vector)):; valueLO = np.array(valueLO); valueMD = np.array(valueMD); valueHI = np.array(valueHI). nonzero_mask = np.abs(valueHI) > 1.e-14; top = (valueHI - valueMD)[nonzero_mask]; bot = (valueMD - valueLO)[nonzero_mask]. ratio = top / bot; alpha = -1 * np.log(np.abs(ratio)); beta = top / (np.exp(-1 * alpha * zMD) * (ratio - 1)); np_value = valueHI.copy(); np_value[nonzero_mask] -= beta * np.exp(-1 * alpha * zHI); np_value[~nonzero_mask] = 0.0. # Build and set from numpy routines; value = core.Matrix(*valueHI.shape); value_view = np.asarray(value); value_view[:] = np_value; return value. else:; raise ValidationError(""scf_xtpl_helgaker_3: datatype is not recognized '%s'."" % type(valueLO)). #def corl_xtpl_helgaker_2(functionname, valueSCF, zLO, valueLO, zHI, valueHI, verbose=True):; [docs]def corl_xtpl_helgaker_2(functionname, zLO, valueLO, zHI, valueHI, verbose=True, alpha=None):; r""""""Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by :py:func:`~psi4.cbs`. Parameters; ----------; functionname : str; Name of the CBS component.; zLO : int; Lower zeta level.; valueLO : float; Lower value used for extrapolation.; zHI : int; Higher zeta level. Should be equal to zLO + 1.; valueHI : float; Higher value used f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_cbs.html:19004,log,log,19004,psi4manual/1.3.2/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_cbs.html,1,['log'],['log']
Testability,"ame.upper()); cbsscheme += """""" LO-zeta (%s) Energy: % 16.12f\n"""""" % (str(zLO), valueLO); cbsscheme += """""" MD-zeta (%s) Energy: % 16.12f\n"""""" % (str(zMD), valueMD); cbsscheme += """""" HI-zeta (%s) Energy: % 16.12f\n"""""" % (str(zHI), valueHI); cbsscheme += """""" Alpha (exponent) Value: % 16.12f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: % 16.12f\n\n"""""" % (beta). name_str = ""%s/(%s,%s,%s)"" % (functionname.upper(), zeta_val2sym[zLO].upper(), zeta_val2sym[zMD].upper(),; zeta_val2sym[zHI].upper()); cbsscheme += """""" @Extrapolated """"""; cbsscheme += name_str + ':'; cbsscheme += "" "" * (18 - len(name_str)); cbsscheme += """"""% 16.12f\n\n"""""" % value; core.print_out(cbsscheme). return value. elif isinstance(valueLO, (core.Matrix, core.Vector)):; valueLO = np.array(valueLO); valueMD = np.array(valueMD); valueHI = np.array(valueHI). nonzero_mask = np.abs(valueHI) > 1.e-14; top = (valueHI - valueMD)[nonzero_mask]; bot = (valueMD - valueLO)[nonzero_mask]. ratio = top / bot; alpha = -1 * np.log(np.abs(ratio)); beta = top / (np.exp(-1 * alpha * zMD) * (ratio - 1)); np_value = valueHI.copy(); np_value[nonzero_mask] -= beta * np.exp(-1 * alpha * zHI); np_value[~nonzero_mask] = 0.0. # Build and set from numpy routines; value = core.Matrix(*valueHI.shape); value_view = np.asarray(value); value_view[:] = np_value; return value. else:; raise ValidationError(""scf_xtpl_helgaker_3: datatype is not recognized '%s'."" % type(valueLO)). #def corl_xtpl_helgaker_2(functionname, valueSCF, zLO, valueLO, zHI, valueHI, verbose=True):; [docs]def corl_xtpl_helgaker_2(functionname, zLO, valueLO, zHI, valueHI, verbose=True, alpha=None):; r""""""Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by :py:func:`~psi4.cbs`.; Halkier, Helgaker, Jorgensen, Klopper, Koch, Olsen, & Wilson, Chem. Phys. Lett. 286 (1998) 243-252,; DOI: 10.1016/S0009-2614(99)00179-7. .. math:: E_{corl}^X = E_{corl}^{\infty} + \beta X^{-alpha}. """"""; if type(valueLO) != type(valueHI):; raise Valid",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver_cbs.html:15850,log,log,15850,psi4manual/1.2.1/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver_cbs.html,1,['log'],['log']
Testability,"ame.upper()); cbsscheme += """""" LO-zeta (%s) Energy: % 16.12f\n"""""" % (str(zLO), valueLO); cbsscheme += """""" MD-zeta (%s) Energy: % 16.12f\n"""""" % (str(zMD), valueMD); cbsscheme += """""" HI-zeta (%s) Energy: % 16.12f\n"""""" % (str(zHI), valueHI); cbsscheme += """""" Alpha (exponent) Value: % 16.12f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: % 16.12f\n\n"""""" % (beta). name_str = ""%s/(%s,%s,%s)"" % (functionname.upper(), zeta_val2sym[zLO].upper(), zeta_val2sym[zMD].upper(),; zeta_val2sym[zHI].upper()); cbsscheme += """""" @Extrapolated """"""; cbsscheme += name_str + ':'; cbsscheme += "" "" * (18 - len(name_str)); cbsscheme += """"""% 16.12f\n\n"""""" % value; psi4.print_out(cbsscheme). return value. elif isinstance(valueLO, (psi4.Matrix, psi4.Vector)):; valueLO = np.array(valueLO); valueMD = np.array(valueMD); valueHI = np.array(valueHI). nonzero_mask = np.abs(valueHI) > 1.e-14; top = (valueHI - valueMD)[nonzero_mask]; bot = (valueMD - valueLO)[nonzero_mask]. ratio = top / bot; alpha = -1 * np.log(np.abs(ratio)); beta = top / (np.exp(-1 * alpha * zMD) * (ratio - 1)); np_value = valueHI.copy(); np_value[nonzero_mask] -= beta * np.exp(-1 * alpha * zHI); np_value[~nonzero_mask] = 0.0. # Build and set from numpy routines; value = psi4.Matrix(*valueHI.shape); value_view = np.asarray(value); value_view[:] = np_value; return value. else:; raise ValidationError(""scf_xtpl_helgaker_2: datatype is not recognized '%s'."" % type(valueLO)). #def corl_xtpl_helgaker_2(functionname, valueSCF, zLO, valueLO, zHI, valueHI, verbose=True):; [docs]def corl_xtpl_helgaker_2(functionname, zLO, valueLO, zHI, valueHI, verbose=True):; r""""""Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by :py:func:`~driver_cbs.complete_basis_set`. .. math:: E_{corl}^X = E_{corl}^{\infty} + \beta X^{-3}. """"""; if type(valueLO) != type(valueHI):; raise ValidationError(""corl_xtpl_helgaker_2: Inputs must be of the same datatype! (%s, %s)""; % (type(valueLO), type(valueHI))). if isinstance(va",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver_cbs.html:9308,log,log,9308,psi4manual/1.0.0/_modules/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver_cbs.html,1,['log'],['log']
Testability,"ameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. scf7; Tests SCF gradient in the presence of a dipole field. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. frac-sym; Fractional occupation with symmetry. sapt-compare; SAPT0 aug-cc-pVDZ computation of the water-water interaction energy, using the three SAPT codes. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. dft-jk; DFT JK on-disk test. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. cbs-delta-energy; Extrapolated energies with delta correction. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, whe",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:23354,test,test,23354,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"an automatically be run by running ctest in the compilation; directory. More info on ctest options can be found; here. Sample input files; can be found in the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below.; Sample inputs accessible through interfaced executables are bulleted below. ADCC; BRIANQC; CFOUR; CHEMPS2; COOKBOOK; DFTD3; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cubeprop; RHF orbitals and density for water. dft1-alt; DFT Functional Test. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. scf3; File retention, docc, socc, and bond distances specified explicitly. options1; check all variety of options parsing. nbody-vmfc-gradient; Computation of VMF",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/testsuite-1.html:1268,test,test,1268,psi4manual/1.4.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/testsuite-1.html,2,['test'],['test']
Testability,"an redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with utility function for dumping the Hamiltonian to file in FCIDUMP format."""""". __all__ = [; ""compare_fcidumps"",; ""energies_from_fcidump"",; ""fcidump"",; ""fcidump_from_file"",; ]. from typing import Any, Dict, List, Optional. import numpy as np. from psi4.driver import psifiles as psif; from psi4.driver.p4util.testing import compare_integers, compare_values, compare_recursive; from psi4.driver.procrouting.proc_util import check_iwl_file_from_scf_type. from psi4 import core; from .exceptions import ValidationError, TestComparisonError. [docs]; def fcidump(wfn: core.Wavefunction, fname: str = 'INTDUMP', oe_ints: Optional[List] = None):; """"""Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989),; https://doi.org/10.1016/0010-4655(89)90033-7 .; Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Parameters; ----------; wfn; Set of molecule, basis, orbitals from which to generate FCIDUMP file.; fname; Name of the integrals file, defaults to INTDUMP.; oe_ints; List of additional one-electron integrals to save to file. So far only; EIGENVALUES is a valid option. Raises; ------; ValidationError; When SCF wavefunction is not RHF. Examples; --------. >>> # [1] Save one- and two-electron integrals to st",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/fcidump.html:1435,test,testing,1435,psi4manual/1.8.x/_modules/psi4/driver/p4util/fcidump.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/fcidump.html,2,['test'],['testing']
Testability,"an redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with utility function for dumping the Hamiltonian to file in FCIDUMP format."""""". __all__ = [; ""compare_fcidumps"",; ""energies_from_fcidump"",; ""fcidump"",; ""fcidump_from_file"",; ]. from typing import Any, Dict, List, Optional. import numpy as np. from psi4.driver import psifiles as psif; from psi4.driver.p4util.testing import compare_integers, compare_values, compare_recursive; from psi4.driver.procrouting.proc_util import check_iwl_file_from_scf_type. from psi4 import core; from .exceptions import ValidationError, TestComparisonError. [docs]def fcidump(wfn: core.Wavefunction, fname: str = 'INTDUMP', oe_ints: Optional[List] = None):; """"""Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989),; https://doi.org/10.1016/0010-4655(89)90033-7 .; Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Parameters; ----------; wfn; Set of molecule, basis, orbitals from which to generate FCIDUMP file.; fname; Name of the integrals file, defaults to INTDUMP.; oe_ints; List of additional one-electron integrals to save to file. So far only; EIGENVALUES is a valid option. Raises; ------; ValidationError; When SCF wavefunction is not RHF. Examples; --------. >>> # [1] Save one- and two-electron integrals to stan",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/fcidump.html:1433,test,testing,1433,psi4manual/1.7.x/_modules/psi4/driver/p4util/fcidump.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/fcidump.html,2,['test'],['testing']
Testability,"an use the gcc; compiler installed alongside psi4 itself in the Conda distribution; or environment (below, $PSI4CONDA). On Mac, one must use; libc++.so (not libstdc++.so), and this can be accomplished by; installing XCode from the App Store that provides clang and; clang++ compilers. Check environment; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18# yes, the following returns a blank line. yes, LD_LIBRARY_PATH irrelevant; >>> echo $PYTHONHOME $PYTHONPATH $DYLD_LIBRARY_PATH $PSIDATADIR. >>> which python psi4 g++ gfortran # Linux; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/gcc++; $PSI4CONDA/bin/gfortran; >>> which python psi4 g++ gfortran clang++ # Mac; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/g++; $PSI4CONDA/bin/gfortran; /usr/bin/clang++. >>> which cmake; $PSI4CONDA/bin/cmake; # if above empty, ``conda install cmake``. Create and compile plugin; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36>>> psi4 --plugin-name testplugin; -- Creating ""testplugin"" with ""basic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/plugins-1.html:3462,test,testplugin,3462,psi4manual/1.1.0/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/plugins-1.html,12,['test'],['testplugin']
Testability,"an) if the value (role of double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Managing: Git, Conda, CMake and all that. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/manage_addon-1.html:11480,test,testing,11480,psi4manual/1.2.1/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/manage_addon-1.html,2,['test'],['testing']
Testability,"analytic, finite difference of gradients, or; finite difference of energies. Returns; Matrix – Total non-mass-weighted electronic Hessian in Hartrees/Bohr/Bohr. Returns; (Matrix, Wavefunction) – Hessian and wavefunction when return_wfn specified. Examples. >>> # [1] Frequency calculation without thermochemical analysis; >>> hessian('mp3'). >>> # [2] Frequency calc w/o thermo analysis getting the Hessian; >>> # in file, core.Matrix, and np.array forms; >>> set hessian_write on; >>> H, wfn = hessian('ccsd', return_wfn=True); >>> wfn.hessian().print_out(); >>> np.array(H). It’s handy to collect the wavefunction after a frequency; calculation through e, wfn = psi4.frequency(...,; return_wfn=True) as the frequencies can be accessed through; psi4.core.Wavefunction.frequencies(), the Hessian through; psi4.core.Wavefunction.hessian(), and much other computation; info through psi4.core.Wavefunction.frequency_analysis; (note no parentheses). Examples of using this data; structure can be found fd-freq-gradient and; psi4/tests/pytests/test_vibanalysis.py. Formatted printing of vibrational; results is available through psi4.driver.qcdb.vib.print_vibs(). Results accessible through psi4.core.Wavefunction.frequency_analysis¶. key; description (lbl & comment); units; data (real/imaginary modes). omega; frequency; cm^-1; ndarray(ndof) complex (real/imag). q; normal mode, normalized mass-weighted; a0 u^1/2; ndarray(ndof, ndof) float. w; normal mode, un-mass-weighted; a0; ndarray(ndof, ndof) float. x; normal mode, normalized un-mass-weighted; a0; ndarray(ndof, ndof) float. degeneracy; degree of degeneracy. ndarray(ndof) int. TRV; translation/rotation/vibration. ndarray(ndof) str ‘TR’ or ‘V’ or ‘-’ for partial. gamma; irreducible representation. ndarray(ndof) str irrep or None if unclassifiable. mu; reduced mass; u; ndarray(ndof) float (+/+). k; force constant; mDyne/A; ndarray(ndof) float (+/-). DQ0; RMS deviation v=0; a0 u^1/2; ndarray(ndof) float (+/0). Qtp0; Turning point v=0; a0 u^1",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/freq-1.html:4745,test,tests,4745,psi4manual/1.4.0/freq-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/freq-1.html,5,['test'],['tests']
Testability,"analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model.; Double-Hybrid Functionals; Double hybrids are percolating into PSI4. Note that these are; only available with density-fitted, not conventional, mp2 algorithms.; -D Functionals; We have several -D2 functionals implemented. -D3 functionls are available; with the installation of Grimme’s DFTD3 program.; For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in PSI4 for both numerical stability and correctness. If you; observe any unexpected results, please email Rob Parrish (robparrish@gmail.com); for immediate assistance. Additionally, if you have a request for a new; functional, please let us know. Grid Selection¶; PSI4 uses the standard Lebedev-Laikov spherical quadratures in concert with a; number of radial quadratures and atomic partitioning schemes. Pruned grids are; not yet available, but we have plans.; The default grid in PSI4 is a Lebedev-Treutler (75,302) grid with a Treutler; partition of the atomic weights.; Spherical grids are all of the extremely efficient Lebedev-Laikov type.; Spherical grid resolution is controlled by the DFT_SPHERICAL_POINTS; option, which may take one of the following values:. DFT_SPHERICAL_POINTS; Order. 6; 3. 14; 5. 26; 7. 38; 9. 50; 11. 74; 13. 86; 15. 110; 17. 146; 19. 170; 21. 194; 23. 230; 25. 266; 27. 302; 29. 350; 31. 434; 35. 590; 41. 770; 47. 974; 53. 1202; 59. 1454; 65. 1730; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/dft-1.html:18390,test,test,18390,psi4manual/1.2.1/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/dft-1.html,4,['test'],['test']
Testability,"and a QM water. Finite different test of the gradient is performed to validate forces. fnocc4; Test FNO-DF-CCSD(T) energy. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. cc54; CCSD dipole with user-specified basis set. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. rasci-h2o; RASCI/6-31G** H2O Energy Point. ddd-deriv; Sample HF/cc-pVDZ H2O computation all derivatives. scf-auto-cholesky; Cholesky filter a complete basis. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properti",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:9143,test,test,9143,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"and any add-ons in working order: pytest -m smoke; * Run tests matching by name: pytest -k testname; * Run tests excluding those by name: pytest -k ""not testname""; * Run tests matching by label: pytest -m testlabel; * Run tests excluding those by label: pytest -m ""not testlabel"". How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n`getconf _NPROCESSORS_ONLN`; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n`getconf _NPROCESSORS_O",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:54382,test,test,54382,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['test'],['test']
Testability,"and maintenance).; PR owners who also have maintainer status can merge their PRs as GitHub enforces two external reviews.; Unless there’s been a lot of discussion on core-dev about merge order, generally the 2nd positive reviewer merges the PR. Also fine to add review and leave merge for later.; Presently only Azure is set up as a required-to-merge service. Incomplete GHA Ecosystem or Docs won’t block merging, but we do usually let it complete before merging unless it’s a trivial PR.; We don’t enforce branches to be up to date before merging since that’d be a lot of extra CI time and coordination when merging several PRs in a day. So, if a PR hasn’t been updated in a while, and a reviewer is nervous about PR interference, fine to ask submitter to rebase. Or, there’s an update button on the PR – but if this is used, warn the submitted that their remote and local branches will be out of sync. For this reason, we try to merge newer contributors first so the rebase falls on more experienced contributors.; Ideally a PR consists of atomic, compilable commits. It almost never happens, so unless there’s been discussion, squash merge all PRs.; When discussion on issue has overcome the original problem and settled on needing long-term work, fine to move the long-term item to Wish List and close issue. table of contents. Git, Versioning; How to bump a version; How to create and remove an annotated Git tag on a remote; What Psi4 version is running; How to locate non-ascii characters in the codebase; How to fix “Psi4 undefined” version; How to fix “cannot import name ‘core’ from {top-level-psi4-dir}; How to find tests without output.ref; How to do GitHub issue management and code review. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Managing: Git, Conda, CMake and all that; Git, Versioning. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/manage_git.html:10822,test,tests,10822,psi4manual/master/manage_git.html,https://psicode.org,https://psicode.org/psi4manual/master/manage_git.html,1,['test'],['tests']
Testability,"and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3'; -__version_long = '1.3+zzzzzzz'; +__version__ = '1.3.1'; +__version_long = '1.3.1+zzzzzzz'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3.1""; [1.3.x 2ce1c29] v1.3.1. >>> git log --oneline | head -1; 786fb2b v1.3.1; >>> git tag -a v1.3.1 2ce1c29 -m ""v1.3.1"". # skipping the hash recording and ""upcoming"" step b/c only tags matter on maintenance branch. # free pushing to maintenance branches at present so GitHub interface steps not needed. # see note at ""Tag (pre)release"" for why atomic commit needed. Collect docs from GHA artifacts. >>> git push --atomic upstream 1.3.x v1.3.1. Initialize release branch¶. follow tagging procedure; before re-engaging the admins “Do not allow …” button, push a branch at the tag commit (not the records commit); >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build extra Conda packages for Psi4 channel¶; Once upon a time, “Psi4 stack”, meant packages psi4, psi4-rt, psi4-dev, and psi4-docs.; Package psi4-docs used to be in “Psi4 stack”, but it’s handled by GHA and netlify now, not Conda.; Package psi4-rt used to be in “Psi4 stack”, but a maximum ecosystem package isn’t provided now, only a customizable env spec.; Package psi4-dev used to be in “Psi4 stack”, but now build environment and guidance is in-repo with psi4-path-advisor.py.; Other packages in the “ecosystem stack” (e.g., libint, gdma) should already be updated and; built on conda-forge. Survey them to check version tick PRs have been merged.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:12352,log,log,12352,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['log'],['log']
Testability,"and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,. PSIthonPsiAPI# all equivalent. energy('mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). energy('mp2/cc-pv[dt]z'). # all equivalent. psi4.energy('mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). psi4.energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; be configured behind-the-scenes with explicit arguments, as in the; first example, or the convenience syntax of the equivalent second; example can be used.; Another very useful and powerful feature of PSI4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,. PSIthonPsiAPIdatabase('mp2', 'S22', cp=1, benchmark='S22B'). psi4.wrapper_database.database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. table of contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. «; hide menu. menu; sidebar; »; . Navigation. Index. modules ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/psithoninput.html:17615,benchmark,benchmark,17615,psi4manual/master/psithoninput.html,https://psicode.org,https://psicode.org/psi4manual/master/psithoninput.html,1,['benchmark'],['benchmark']
Testability,"ander G. Heide, and Lori A. Burns; Module: Keywords, OPTKING; PSI4 carries out molecular optimizations using a Python module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives — both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update.; The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49].; The general approach employed in this code; is similar to the “model Hessian plus RF method” described and tested by Bakken and; Helgaker [Bakken:2002:9160]. However, for separated; fragments, we have chosen not to employ their “extra-redundant” coordinates.; The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; COVALENT_CONNECT. If the user finds that some; connectivity is lacking by default, then this value may be increased. Warning; The selection of a Z-matrix input, and in particular the inclusion; of dummy atoms, has no effect on the behavior of the optimizer, which begins; from a Cartesian representation of the system. Presently, by default, separate fragments are bonded by the; nearest atoms, and the whole system is treated as if it were part of one; molecule. However, with the option FRAG_MODE, fragments; may instead be related by a minimal set of interfragment coordinates defined by; reference points within each fragment. The reference points can be atomic; positions (current default) or linear combinations of atomic positions; (automatic use of principal axes is under development).; These dimer coordinates can be directly specified through INTERFRAG_COORDS); See here <DimerSection_> for two examples of their use. Basic Keywords¶",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/optking.html:1224,test,testing,1224,psi4manual/1.7.x/optking.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/optking.html,4,['test'],['testing']
Testability,"ansition Dipole Moment. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-db2; Database calculation, run in sow/reap mode. cbs-xtpl-func; optimization with method defined via cbs. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. adc1; ADC/6-31G** on H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft2; DFT Functional Test. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the po",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:29531,test,test,29531,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,8,['test'],['test']
Testability,"anslating psi4 options to cfour, part i. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_cfour-1.html:1265,test,testing,1265,psi4manual/1.4.0/autodoc_testsuite_cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_cfour-1.html,2,['test'],['testing']
Testability,"any reaction in; subset unless *failoninc* set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. """"""; if isinstance(sset, basestring):; # sset is normal subset name 'MX' corresponding to HRXN_MX or MX array in database module; try:; lsset = self.sset[sset.lower()]; except KeyError as e:; # raise ValidationError(""""""Subset named %s not available"""""" % (str(e))); lsset = OrderedDict(); else:; if callable(sset):; # sset is function that will generate subset of HRXN from sset(self); lsslist = [rxn for rxn in self.sset['default'].keys() if rxn in sset(self)]; else:; # sset is array containing reactions; lsslist = [rxn for rxn in self.sset['default'].keys() if rxn in sset]; # assemble dict of qcdb.Reaction objects from array of reaction names; lsset = OrderedDict(); for rxn in lsslist:; lsset[rxn] = self.hrxn[rxn]. # cureinfo = self.get_pec_weightinfo(); err = {}; for rxn, oRxn in lsset.iteritems():; lbench = oRxn.benchmark if benchmark == 'default' else benchmark; try:; mcLesser = oRxn.data[modelchem].value; except KeyError as e:; if failoninc:; raise ValidationError(""""""Reaction %s missing datum %s."""""" % (str(rxn), str(e))); else:; continue; try:; mcGreater = oRxn.data[lbench].value; except KeyError as e:; if lbench == 'ZEROS':; pass; else:; print(""""""Reaction %s missing benchmark"""""" % (str(rxn))); continue; # handle particulars of PEC error measures; # rxncureinfo = cureinfo[rxn]; # try:; # mcGreaterCrvmin = self.hrxn[rxncureinfo['eq']].data[lbench].value; # except KeyError as e:; # print """"""Reaction %s missing benchmark"""""" % (str(eqrxn)). # cure_denom = cure_weight(refrxn=mcGreater, refeq=mcGreaterCrvmin, rrat=rxncureinfo['Rrat']); # balanced_mask, balwt = balanced_error(refrxn=mcGreater, refeq=mcGreaterCrvmin, rrat=rxncureinfo['Rrat']). if lbench == 'ZEROS':; err[rxn] = [mcLesser,; 0.0, 0.0, 0.0, 1.0] # FAKE; else:; err[rxn] = [mcLesser - mcGreater,; (mcLesser - mcGreater) / abs(mcGreater),; (mcLesser - mcGreater) / abs(mcGreate",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:32876,benchmark,benchmark,32876,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,3,['benchmark'],['benchmark']
Testability,"any-body gradients of different BSSE schemes. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. scf-upcast-custom-basis; test scf castup with custom basis sets. aediis-2; EDIIS test case from 10.1063/1.1470195. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. mints2-bse; Similar to mints2, but using the BSE to specify the basis sets. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. soscf-large; Second-order SCF convergnece: Benzene. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, rest",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:18118,test,test,18118,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-1; testing best practices options, part i. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/puream; Basis set spherical/Cartesia",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_cfour-1.html:3245,test,testing,3245,psi4manual/1.4.0/autodoc_testsuite_cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_cfour-1.html,2,['test'],['testing']
Testability,"ar charge. Properties evaluated on a grid¶; Certain properties may be evaluated a user-specified grid points. The grid; points are completely arbitrary and are specified by providing a file called; grid.dat containing the x,y,z values separated with spaces for each point in order:; 1; 2; 3; 4x1 y1 z1; x2 y2 z2; ..........; xn yn zn. The grid.dat file is completely free form; any number of spaces and/or newlines; between entries is permitted. The units of the coordinates in grid.dat are the; same as those used to specify the molecule’s geometry, and the output; quantities are always in atomic units. The requested properties will be; written out in the same order as the grid point specification in grid.dat; see; the above table for the format and file name of the output.; The grid may be generated in the input file using standard Python loops. By; capturing the wavefunction used to evaluate the one-electron properties, the; values at each grid point may be captured as Python arrays in the input file:; 1; 2; 3; 4; 5E, wfn = prop('scf', properties=[""GRID_ESP"", ""GRID_FIELD""], return_wfn=True); Vvals = wfn.oeprop.Vvals(); Exvals = wfn.oeprop.Exvals(); Eyvals = wfn.oeprop.Eyvals(); Ezvals = wfn.oeprop.Ezvals(). In this example, the Vvals array contains the electrostatic potential at each; grid point, in the order that the grid was specified, while the Exvals,; Eyvals and Ezvals arrays contain the x, y and z components of the; electric field, respectively; all of these arrays can be iterated and; manipulated using standard Python syntax. For a complete demonstration of this; utility, see the props4 test case. table of contents. Evaluation of One-Electron Properties — oeprop(); Basic Keywords; Properties evaluated on a grid. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/oeprop-1.html:5348,test,test,5348,psi4manual/1.3.2/oeprop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/oeprop-1.html,2,['test'],['test']
Testability,"arallel with -n flag (if extenstion pytest-xdist installed). For maximum parallelism: pytest -n`getconf _NPROCESSORS_ONLN`; * Run full test suite: pytest; * Run the quick tests: pytest -m quick; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: pytest -m smoke; * Run tests matching by name: pytest -k testname; * Run tests excluding those by name: pytest -k ""not testname""; * Run tests matching by label: pytest -m testlabel; * Run tests excluding those by label: pytest -m ""not testlabel"". How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:54212,test,test,54212,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['test'],['test']
Testability,"are always in atomic units. The requested properties will be; written out in the same order as the grid point specification in grid.dat; see; the above table for the format and file name of the output.; The grid may be generated in the input file using standard Python loops. By; capturing the wavefunction used to evaluate the one-electron properties, the; values at each grid point may be captured as Python arrays in the input file:; E, wfn = prop('scf', properties=[""GRID_ESP"", ""GRID_FIELD""], return_wfn=True); Vvals = wfn.oeprop.Vvals(); Exvals = wfn.oeprop.Exvals(); Eyvals = wfn.oeprop.Eyvals(); Ezvals = wfn.oeprop.Ezvals(). In this example, the Vvals array contains the electrostatic potential at each; grid point, in the order that the grid was specified, while the Exvals,; Eyvals and Ezvals arrays contain the x, y and z components of the; electric field, respectively; all of these arrays can be iterated and; manipulated using standard Python syntax. For a complete demonstration of this; utility, see the props4 test case. Minimal Basis Iterative Stockholder¶; The Minimal Basis Iterative Stockholder (MBIS) method is one of many procedures; that partitions a molecular one-particle density matrix into atomic electron densities.; Running MBIS in PSI4 will calculate atomic valence charge widths, volume ratios,; atomic charges, as well as dipoles, quadrupoles, and octupoles.; Additionally, all expectation values of radial moments of n-th order (\(<r^n>\)); are computed up to fourth order. Higher moments can be computed by specifying MAX_RADIAL_MOMENT.; The volume ratios are computed as the ratio between the volume of the atomic density; (\(<r^3>\)) and the volume of the free atom computed using the same level; of theory, but with a potentially unrestricted reference.; The allowed number of iterations and convergence criteria for the stockholder; algorithm is controlled by MBIS_MAXITER and MBIS_D_CONVERGENCE. Note; that the density is partitioned on a molecular quadrature g",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/oeprop-1.html:5519,test,test,5519,psi4manual/1.4.0/oeprop-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/oeprop-1.html,9,['test'],['test']
Testability,"are an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database, database(); finite difference operation of Geometry Optimization, optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis, frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis, frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. Previous topic; Function Intercalls; Next topic; cubeprop() Generation of cube files. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/sowreap-1.html:2025,test,tested,2025,psi4manual/1.0.0/sowreap-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/sowreap-1.html,2,['test'],['tested']
Testability,"are desired this algorithm is preferable to; standard methods as uses on the order of N * k memory. One only needs to; have the ability to compute the product of a times a vector.; For non-hermitan A the basis of the algorithm breaks down. However in; practice, for strongly diagonally-dominant A such as the; similarity-transformed Hamiltonian in EOM-CC this algorithm is commonly still; used. Parameters:. engine (Type[SolverEngine]) – The engine drive all operations involving data structures that have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only (bool) – Should eigenpairs with eigenvalue < 0 be ignored?. Return type:; Dict[str, Any]. Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors (List[vector]) – (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver wil",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html:1485,log,logging,1485,psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html,8,['log'],['logging']
Testability,"are_values(expected, computed, label=None, *, atol=1e-06, rtol=1e-16, equal_nan=False, equal_phase=False, passnone=False, quiet=False, return_message=False, return_handler=None)[source]; Returns True if two floats or float arrays are element-wise equal within a tolerance. Parameters:. expected (Union[float, List, ndarray]) – float or float array-like; Reference value against which computed is compared.; computed (Union[float, List, ndarray]) – float or float array-like; Input value to compare against expected.; atol (float) – Absolute tolerance (see formula below).; label (Optional[str]) – Label for passed and error messages. Defaults to calling function name.; rtol (float) – Relative tolerance (see formula below). By default set to zero so atol dominates.; equal_nan (bool) – Passed to numpy.isclose(). Compare NaN’s as equal.; equal_phase (bool) – Compare computed or its opposite as equal.; passnone (bool) – Return True when both expected and computed are None.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Optional[Callable]) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Return type:; Union[bool, Tuple[bool, str]]. Returns:. allclose (bool) – Returns True if expected and computed are equal within tolerance; False otherwise.; message (str) – When return_message=True, also return passed or error message. Notes. Akin to numpy.allclose().; For scalar float-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; float-comparable types. For mixed types, use compare_recursive().; Sets rtol to zero to match expected Psi4 behaviour, otherwise measured as:. absolute(computed - expected) <= (atol + rtol * absolute(expected)). psi4.compare_integers(expected, computed[, label, *, **kwargs])¶; Comparison function for integers, strings, booleans, or integer array-like data structures.; See qcelemen",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:16267,log,log,16267,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,3,['log'],['log']
Testability,"arg0); Sets the amount of OS MP2 correlation. set_c_ss_alpha(self, arg0); Sets the amount of SS MP2 correlation. set_citation(self, arg0); Sets the SuperFunctional citation. set_deriv(self, arg0); Sets the derivative level. set_description(self, arg0); Sets the SuperFunctional description. set_grac_alpha(self, arg0); Sets the GRAC alpha parameter. set_grac_beta(self, arg0); Sets the GRAC beta parameter. set_grac_shift(self, arg0); Sets the GRAC bulk shift value. set_lock(self, arg0); Locks the functional to prevent changes. set_max_points(self, arg0); Sets the maximum number of points. set_name(self, arg0); Sets the SuperFunctional name. set_vv10_b(self, arg0); Sets the VV10 b parameter. set_vv10_c(self, arg0); Sets the VV10 c parameter. set_x_alpha(self, arg0); Sets the amount of exact global HF exchange. set_x_beta(self, arg0); Sets the amount of exact HF exchange at long range. set_x_omega(self, arg0); Sets the range-seperation exchange parameter. test_functional(self, arg0, arg1, arg2, …); Quick testing capabilities. value(self, arg0); Returns a given internal value. values(self); Return all internal values. vv10_b(self); The VV10 b parameter. vv10_c(self); The VV10 c parameter. x_alpha(self); Amount of exact HF exchange. x_beta(self); Amount of exact HF exchange. x_functional(self, arg0); Returns the desired X Functional. x_functionals(self); Returns all X Functionals. x_omega(self); Range-seperated exchange parameter. Methods Documentation. XC_build(arg0: str, arg1: bool) → psi4.core.SuperFunctional¶; Builds a SuperFunctional from a XC string. add_c_functional(self: psi4.core.SuperFunctional, arg0: psi::Functional) → None¶; Add a correlation Functional. add_x_functional(self: psi4.core.SuperFunctional, arg0: psi::Functional) → None¶; Add a exchange Functional. allocate(self: psi4.core.SuperFunctional) → None¶; Allocates the vectors, should be called after ansatz or npoint changes. ansatz(self: psi4.core.SuperFunctional) → int¶; SuperFunctional rung. blank() → ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.superfunctional.html:3150,test,testing,3150,psi4manual/1.2.1/api/psi4.core.superfunctional.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.superfunctional.html,1,['test'],['testing']
Testability,"arg1, arg2, arg3, arg4, arg5, ...); docstring. DTBSV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRMM(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRMV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRSM(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRSV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. IDAMAX(arg0, arg1, arg2, arg3); docstring. array_variable(key); Returns copy of the Matrix QCVariable key (case-insensitive); prefer variable(). array_variables(); Returns dictionary of all Matrix QCVariables; prefer variables(). be_quiet(); Redirects output to /dev/null. benchmark_blas1(max_dim, min_time); Perform benchmark traverse of BLAS 1 routines. benchmark_blas2(max_dim, min_time); Perform benchmark traverse of BLAS 2 routines. benchmark_blas3(max_dim, min_time[, nthread]); Perform benchmark traverse of BLAS 3 routines. benchmark_disk(max_dim, min_time); Perform benchmark of PSIO disk performance. benchmark_integrals(max_am, min_time); Perform benchmark of psi integrals (of libmints type). benchmark_math(min_time); Perform benchmark of common double floating point operations including most of cmath. ccdensity(ref_wfn); Runs the code to compute coupled cluster density matrices. ccenergy(ref_wfn); Runs the coupled cluster energy code. cceom(ref_wfn); Runs the equation of motion coupled cluster code for excited states. cchbar(ref_wfn); Runs the code to generate the similarity transformed Hamiltonian. cclambda(ref_wfn); Runs the coupled cluster lambda equations code. ccresponse(ref_wfn); Runs the coupled cluster response theory code. cctransort(ref_wfn); Runs cctransort that transforms and reorders integrals for use in the coupled cluster codes. cctriples(ref_wfn); Runs the coupled cluster (T) energy code. clean(); Remove scratch files. clean_options(); Reset options to clean state. clean_timers(); Reinitialize timers for independent timer.dat entries. clean_variables(); Empties all double and Matrix QCVariables that have been ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/psi4api.html:2840,benchmark,benchmark,2840,psi4manual/1.7.x/psi4api.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/psi4api.html,4,['benchmark'],['benchmark']
Testability,"arge'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; 'HBC6A' Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset; 'small'; 'large'; 'equilibrium' equilibrium points for the six systems; 'FaOOFaOO' dissociation curve for formic acid dimer; 'FaONFaON' dissociation curve for formamide dimer; 'FaNNFaNN' dissociation curve for formamidine dimer; 'FaOOFaON' dissociation curve for formic acid- formamide complex; 'FaONFaNN' dissociation curve for formamide- formamidine complex; 'FaOOFaNN' dissociation curve for formic acid- formamidine complex. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'HSG0' Faver et al. JCTC 7 790 (2011).; 'HSGA' Marshall et al. JCP 135 194102 (2011). su",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_available_databases-1.html:6849,benchmark,benchmark,6849,psi4manual/4.0b5/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_available_databases-1.html,4,['benchmark'],['benchmark']
Testability,"arge'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. CORE¶; Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; 'HBC6A' Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset; 'small'; 'large'; 'equilibrium' equilibrium points for the six systems; 'FaOOFaOO' dissociation curve for formic acid dimer; 'FaONFaON' dissociation curve for formamide dimer; 'FaNNFaNN' dissociation curve for formamidine dimer; 'FaOOFaON' dissociation curve for formic acid- formamide complex; 'FaONFaNN' dissociation curve for formamide- formamidine complex; 'FaOOFaNN' dissociation curve for formic acid- formamidine complex. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'HSG0' Faver et al. JCTC 7 790 (2011).; 'HSGA' Marshall et al. JCP 135 194102 (2011). su",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_available_databases-1.html:5481,benchmark,benchmark,5481,psi4manual/4.0b3/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_available_databases-1.html,8,['benchmark'],['benchmark']
Testability,"arge'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. CORE¶; Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; 'HBC6A' Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset; 'small'; 'large'; 'equilibrium'. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'HSG0' Faver et al. JCTC 7 790 (2011).; 'HSGA' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'. JSCH¶. Database (Hobza) of interaction energies for nucelobase pairs.; Geometries and reference interaction energies from Jurecka et al. PCCP 8 1985 (2006).; Corrections implemented from footnote 92 of Burns et al., JCP 134 084107 (2011). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'. S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Ge",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_available_databases-1.html:5092,benchmark,benchmark,5092,psi4manual/4.0b2/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_available_databases-1.html,4,['benchmark'],['benchmark']
Testability,"argest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || etc.; For databases composed of dissociation curves, individual; curves can be called by name. Consult the database python; files for available molecular systems. The choices for this; keyword are case sensitive and must match the database python file. [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.; Specify a list of database members to run. Consult the; database python files for available molecular systems. The; choices for this keyword are case sensitive and must match the; database python file. Examples :. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('dfmp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/db-1.html:5091,benchmark,benchmark,5091,psi4manual/4.0b2/db-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/db-1.html,4,['benchmark'],['benchmark']
Testability,"ariations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow Adding PsiAPI Test Cases to prepare as PsiAPI (import psi4) for, roughly speaking, running through pytest.; The PsiAPI/pytest test suite occupies psi4/tests/pytests.; The above description sounds as if there are two disjoint test suites, and you have to run both ctest and pytest to fully test PSI4.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don’t know to run both; and (2) there are important tests in the PSIthon suite that can’t be run on a PSI4 installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (test_input.py), PSIthon tests can also be run through pytest.; This hasn’t rolled out to all ~500 PSIthon tests (help wanted), but eventually PSI4 can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it’s a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents¶. Most PSI4 tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite.; Most tests should store reference results (from literature or another implementation or a carefully run PSI4 calculation),; run quantum chemistry, then apply one or more of the Comparison Functions so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, compare_matrices(refmat, mat, ...) while in the latter it’s asserted, like assert comp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:2591,test,tests,2591,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,10,['test'],"['tested', 'tests']"
Testability,"ark() for odb in self.dbdict.values()]; self._intersect_subsets(); self._intersect_modelchems(). # complex subsets; self.load_subsets(). # collection name; self.dbse = ''.join(self.dbdict.keys()) if dbse is None else dbse. # merge Reaction-s; self.hrxn = OrderedDict(); for db, odb in self.dbdict.iteritems():; for rxn, orxn in odb.hrxn.iteritems():; self.hrxn[orxn.dbrxn] = orxn. # merge Reagent-s; self.hrgt = OrderedDict(); for db, odb in self.dbdict.iteritems():; for rgt, orgt in odb.hrgt.iteritems():; self.hrgt[orgt.name] = orgt. print(""""""Database %s: %s"""""" % (self.dbse, ', '.join(self.dbdict.keys()))). def __str__(self):; text = ''; text += """""" ===> %s Database <===\n\n"""""" % (self.dbse); # text += """""" Reagents: %s\n"""""" % (self.hrgt.keys()); # text += """""" Reactions: %s\n"""""" % (self.hrxn.keys()); text += """""" Subsets: %s\n"""""" % (self.sset.keys()); # text += """""" Reference: %s\n"""""" % ('default: ' + ' + '.join(self.mcs['default'])); try:; text += """""" Reference: %s\n"""""" % (self.benchmark + ': ' + ' + '.join(self.mcs[self.benchmark])); except TypeError:; text += """""" Reference: %s\n"""""" % ('UNDEFINED'); text += """""" Model Chemistries: %s\n"""""" % (; ', '.join(sorted([mc for mc in self.mcs.keys() if mc is not None]))); text += """"""\n""""""; for db in self.dbdict.keys():; text += self.dbdict[db].__str__(); return text. # def benchmark(self):; # """"""Returns the model chemistry label for the database's benchmark.""""""; # return self.benchmark #TODO not sure if right way to go about this self.mcs['default']. [docs] def fancy_mcs(self, latex=False):; """""". """"""; fmcs = {}; for mc in self.mcs.keys():; try:; mtd, mod, bas = mc.split('-'); except ValueError:; fmcs[mc] = mc; else:; if latex:; tmp = """"""%s/%s, %s"""""" % \; (methods[mtd].latex, bases[bas].latex, mod.replace('_', '\\_')); fmcs[mc] = """"""%45s"""""" % (tmp); else:; fmcs[mc] = """"""%20s / %-20s, %s"""""" % \; (methods[mtd].fullname, bases[bas].fullname, mod); return fmcs. # def fancy_mcs_nested(self):; # """""". # """"""; # fmcs = defaultdict(lambda: de",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:49229,benchmark,benchmark,49229,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"ark.api] at the top.; This ensures that every test has the psi mark and every PsiAPI test has the api mark to contrast with PSIthon tests with cli mark.; There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m <mark>; vs. ctest -L <mark>) rather than just by name (pytest -k <name_fragment>; vs. ctest -R <name_fragment>). Far more complicated logic is allowed than for; CTest: pytest -m ""dftd3 and not api and not long"".; The most important marks are “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging¶; There are many ways to run pytest, How to test a Psi4 installation, and three different copies of the test file; (i.e., psi4/tests/pytests/test_mp2.py, <objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py,; CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running cmake --build after each change. Easiest is from <objdir>, run pytest ../tests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> or -n auto if pytest-xdist; installed) or print test names (-v) or print warnings (-rws).; An important point is that because they’re PsiAPI, import psi4 is happening,; so the <objdir> PSI4 module must be in PYTHONPATH. Also, any call; to QCEngine is using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi.; To see stdout output from an otherwise passing test, easiest ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:13136,test,test,13136,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,10,['test'],['test']
Testability,"array],; label: str = None,; *,; atol: float = 1.0e-6,; rtol: float = 1.0e-16,; equal_nan: bool = False,; equal_phase: bool = False,; passnone: bool = False,; quiet: bool = False,; return_message: bool = False,; return_handler: Callable = None,; ) -> Union[bool, Tuple[bool, str]]:; r""""""Returns True if two floats or float arrays are element-wise equal within a tolerance. Parameters; ----------; expected; float or float array-like; Reference value against which `computed` is compared.; computed; float or float array-like; Input value to compare against `expected`.; atol; Absolute tolerance (see formula below).; label; Label for passed and error messages. Defaults to calling function name.; rtol; Relative tolerance (see formula below). By default set to zero so `atol` dominates.; equal_nan; Passed to :func:`numpy.isclose`. Compare NaN's as equal.; equal_phase; Compare computed *or its opposite* as equal.; passnone; Return True when both expected and computed are None.; quiet; Whether to log the return message.; return_message; Whether to return tuple. See below. Returns; -------; allclose : bool; Returns True if `expected` and `computed` are equal within tolerance; False otherwise.; message : str; When return_message=True, also return passed or error message. Other Parameters; ----------------; return_handler; Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Notes; -----; * Akin to :func:`numpy.allclose`.; * For scalar float-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; float-comparable types. For mixed types, use :py:func:`compare_recursive`.; * Sets rtol to zero to match expected Psi4 behaviour, otherwise measured as:. .. code-block:: python. absolute(computed - expected) <= (atol + rtol * absolute(expected)). """"""; label = label or sys._getframe().f_back.f_code.co_name; pass_message = f""\t{label:.<66}PASSED""; if return_handler is None:; return_handler = _handle",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/qcelemental/testing.html:2035,log,log,2035,psi4manual/1.7.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/qcelemental/testing.html,8,['log'],['log']
Testability,"art """"""; """"""using the last geometry in the output, after """"""; """"""carefully making sure all symmetry-dependent """"""; """"""input, such as DOCC, is correct."""""" % (current_sym, initial_sym)); kwargs['opt_iter'] = n. # Use orbitals from previous iteration as a guess; # set within loop so that can be influenced by fns to optimize (e.g., cbs); if (n > 1) and (not core.get_option('SCF', 'GUESS_PERSIST')):; core.set_local_option('SCF', 'GUESS', 'READ'). # Before computing gradient, save previous molecule and wavefunction if this is an IRC optimization; if (n > 1) and (core.get_option('OPTKING', 'OPT_TYPE') == 'IRC'):; old_thisenergy = core.variable('CURRENT ENERGY'). # Compute the gradient - preserve opt data despite core.clean calls in gradient; core.IOManager.shared_object().set_specific_retention(1, True); G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); thisenergy = core.variable('CURRENT ENERGY'). # above, used to be getting energy as last of energy list from gradient(); # thisenergy below should ultimately be testing on wfn.energy(). # Record optimization steps; # Add wavefunctions later; if return_history:; step_energies.append(thisenergy); step_coordinates.append(moleculeclone.geometry()); step_gradients.append(G.clone()). core.set_legacy_gradient(G). # opt_func = kwargs.get('opt_func', kwargs.get('func', energy)); # if opt_func.__name__ == 'complete_basis_set':; # core.IOManager.shared_object().set_specific_retention(1, True). if full_hess_every > -1:; core.set_global_option('HESSIAN_WRITE', True). # compute Hessian as requested; frequency wipes out gradient so stash it; if ((full_hess_every > -1) and (n == 1)) or (steps_since_last_hessian + 1 == full_hess_every):; G = core.get_legacy_gradient() # TODO; core.IOManager.shared_object().set_specific_retention(1, True); core.IOManager.shared_object().set_specific_path(1, './'); frequencies(hessian_with_method, molecule=moleculeclone, **kwargs); steps_since_last_hessian = 0; core.set_legacy_gr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html:57750,test,testing,57750,psi4manual/1.3.2/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver.html,1,['test'],['testing']
Testability,"art """"""; """"""using the last geometry in the output, after """"""; """"""carefully making sure all symmetry-dependent """"""; """"""input, such as DOCC, is correct."""""" % (current_sym, initial_sym)); kwargs['opt_iter'] = n. # Use orbitals from previous iteration as a guess; # set within loop so that can be influenced by fns to optimize (e.g., cbs); if (n > 1) and (not core.get_option('SCF', 'GUESS_PERSIST')):; core.set_local_option('SCF', 'GUESS', 'READ'). # Before computing gradient, save previous molecule and wavefunction if this is an IRC optimization; if (n > 1) and (core.get_option('OPTKING', 'OPT_TYPE') == 'IRC'):; old_thisenergy = core.variable('CURRENT ENERGY'). # Compute the gradient - preserve opt data despite core.clean calls in gradient; core.IOManager.shared_object().set_specific_retention(1, True); G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); thisenergy = core.variable('CURRENT ENERGY'). # above, used to be getting energy as last of energy list from gradient(); # thisenergy below should ultimately be testing on wfn.energy(). # Record optimization steps; # Add wavefunctions later; if return_history:; step_energies.append(thisenergy); step_coordinates.append(moleculeclone.geometry()); step_gradients.append(G.clone()). core.set_legacy_gradient(G). # opt_func = kwargs.get('opt_func', kwargs.get('func', energy)); # if opt_func.__name__ == 'complete_basis_set':; # core.IOManager.shared_object().set_specific_retention(1, True). if full_hess_every > -1:; core.set_global_option('HESSIAN_WRITE', True). # compute Hessian as requested; frequency wipes out gradient so stash it; if ((full_hess_every > -1) and (n == 1)) or (steps_since_last_hessian + 1 == full_hess_every):; G = core.get_legacy_gradient() # TODO; core.IOManager.shared_object().set_specific_retention(1, True); core.IOManager.shared_object().set_specific_path(1, './'); frequencies(hessian_with_method, molecule=moleculeclone, ref_gradient = G, **kwargs); steps_since_last_hessian = 0; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html:70346,test,testing,70346,psi4manual/1.4.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html,4,['test'],['testing']
Testability,"art 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; test_addons.py::test_gdma PASSED; test_addo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:55173,test,tests,55173,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,30,['test'],"['test', 'tests']"
Testability,"art 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n`getconf _NPROCESSORS_ONLN`; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n`getconf _NPROCESSORS_ONLN`. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:54783,test,tests,54783,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,24,['test'],"['test', 'tests']"
Testability,"artesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf-ecp2; Water-Argon complex with ECP present; check of RHF Hessian. fnocc7; Test fnocc with linear dependencies. props4; Electrostatic potential and electric field evaluated on a grid around water. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. gibbs; Test Gibbs free energies at 298 K of N2, H2O",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:44309,test,test,44309,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ary point?; if 'ref_gradient' in kwargs:; core.print_out(""""""hessian() using ref_gradient to assess stationary point.\n""""""); G0 = kwargs['ref_gradient']; else:; tmpkwargs = copy.deepcopy(kwargs); tmpkwargs.pop('dertype', None); G0 = gradient(lowername, molecule=molecule, **tmpkwargs); translations_projection_sound, rotations_projection_sound = _energy_is_invariant(G0.rms()); core.print_out(; '\n Based on options and gradient (rms={:.2E}), recommend {}projecting translations and {}projecting rotations.\n'; .format(G0.rms(), '' if translations_projection_sound else 'not ',; '' if rotations_projection_sound else 'not ')); if not core.has_option_changed('FINDIF', 'FD_PROJECT'):; core.set_local_option('FINDIF', 'FD_PROJECT', rotations_projection_sound). # We have the desired method. Do it.; logger.info(f""Compute hessian(): method={lowername}, basis={core.get_global_option('BASIS').lower()}, molecule={molecule.name()}, nre={'w/EFP' if hasattr(molecule, 'EFP') else molecule.nuclear_repulsion_energy()}""); logger.debug(""w/EFP"" if hasattr(molecule, ""EFP"") else pp.pformat(molecule.to_dict())); core.print_out(""""""hessian() will perform analytic frequency computation.\n""""""); wfn = procedures['hessian'][lowername](lowername, molecule=molecule, **kwargs); logger.info(f""Return hessian(): {wfn.energy()}""); logger.info(nppp(wfn.hessian().np)). wfn.set_gradient(G0); basisstash.restore(); optstash.restore(); optstash_conv.restore(). #if isinstance(lowername, str) and lowername in procedures['energy']:; # # this correctly filters out cbs fn and ""hf/cc-pvtz""; # # it probably incorrectly filters out mp5, but reconsider in DDD; # core.set_variable(f""CURRENT HESSIAN"", H); # core.set_variable(f""{lowername.upper()} TOTAL HESSIAN"", H); # core.set_variable(f""{lowername.upper()} TOTAL GRADIENT"", G0); # wfn.set_variable(f""{lowername.upper()} TOTAL HESSIAN"", H); # wfn.set_variable(f""{lowername.upper()} TOTAL GRADIENT"", G0); # TODO: check that current energy's being set to the right figure when this ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html:73912,log,logger,73912,psi4manual/1.6.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html,10,['log'],['logger']
Testability,"as False (triggering coffee).""""""; extras._success_flag_ = False. [docs]; class ValidationError(PsiException):; """"""Input specification has problems. Error message *msg* directed both to standard output stream and to outfile. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. """"""; message: str. def __init__(self, msg: str):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]; class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. Only used by untested distributed CC response machinery. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. # PsiImportError ceased to be used by v1.1. Class removed by v1.7; # class PsiImportError(PsiException):. [docs]; class TestComparisonError(PsiException):; """"""Error called when a :func:`~psi4.compare_values` or other comparison; function fails. Error message *msg* directed both to standard output stream and to outfile. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. Example; -------; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. """"""; message: str. def __init__(self, msg: str):; PsiException.__init__(self, msg); self.m",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/p4util/exceptions.html:2635,Test,TestComparisonError,2635,psi4manual/1.9.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/p4util/exceptions.html,2,['Test'],['TestComparisonError']
Testability,"as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testplugin.so; [100%] Built target testplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in $PATH or the; conda enviroment must be activated before compilation and execution of; plugins created using this procedure. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directory contains the following files. CMakeLists.txt — CMake file governing project plugin.; The plugin source and CMakeLists.txt is independent of platform; and PSI4 installation. You use CMake (version 3.1 or later); to generate a Makefile for the plugin by pointing it to a specific; PSI4 installation. Run psi4 --plugin-compile to get a command; to execute to generate the Makefile. What that command is doing is; loading the compilers and options used to build the parent PSI4; (the -C psi4PluginCache pa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/plugins-1.html:4574,test,testplugin,4574,psi4manual/1.1.0/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/plugins-1.html,30,['test'],['testplugin']
Testability,"as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; label : str; Label for passed and error messages. """"""; fchk_ref = fchkfile_to_string(expected).splitlines(); fchk_calc = fchkfile_to_string(computed).splitlines(). high_accuracy = atol_exponent; low_accuracy = 3. # Those listed below need super high scf convergence (d_conv 1e-12) and might; # show machine dependence. They will be tested with low_accuracy.; sensitive = ['Current cartesian coordinates', 'MO coefficients']. if len(fchk_ref) != len(fchk_calc):; raise ValidationError('The two FCHK files to compare have a different file length! \n'). index = 0; max_length = len(fchk_calc); tests = []; for start in range(max_length):; if index >= max_length:; break; line = fchk_calc[index]; if ""N="" in line:; offset, calc = _consume_fchk_section(fchk_calc, index); _, ref = _consume_fchk_section(fchk_ref, index); if any(x in line for x in sensitive):; test = compare_arrays(ref, calc, low_accuracy, f"" matrix section: {line}""); else:; test = compare_arrays(ref, calc, high_accuracy, f"" matrix section: {line}""); index += offset; elif "" R "" in line and ""N="" not in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_values(ref, calc, high_accuracy, f"" float value: {line}""); index += 1; elif "" I "" in line and ""N="" not in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_integers(ref, calc, f"" int value: {line}""); index += 1; else:; test = compare_strings(line, fchk_ref[index], f""FCK text line {index+1}.""); index += 1; tests.append(test). return compare_integers(True, all(tests), label). [docs]def compare_moldenfiles(expected, computed, atol_exponent=7, label=""Compare Molden""):; """"""Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies. Note only Psi4-st",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html:4167,test,tests,4167,psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html,6,['test'],"['test', 'tests']"
Testability,"as internal options, but; plan to have these set by the python driver and mark them as !expert; options. Really avoid using JOBTYPE.; You’re not welcome to add CHARGE or MULTP options. Plan to get; these quantities from the molecule object. Since we frequently use subsets; of systems (with their own charge and multiplicity), this is safer.; Conform. Just grep 'add' psi4/src/read_options.cc to get a list of; all the option names in PSI4 and try to match any conventions you; find.; If you have a quantity you’d like to call a cutoff, a threshold, a; tolerance, or a convergence, consider the following guidelines in naming; it.; If its value is typically greater than ~0.001, give it a name with CUTOFF.; If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with larger values (e.g.,; integrals, occupations, eigenvectors), give it a name with TOLERANCE.; If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with smaller values (e.g., energy; changes, residual errors, gradients), give it a name with; CONVERGENCE. In deciding how to arrange words in an option name, place the context; first (e.g., MP2_AMPS_PRINT, TRIPLES_DIIS). This means PRINT; will generally be at the end of an option name.; Use INTS_TOLERANCE (not schwarz_cutoff); H in an option name is reserved for Hamiltonian (or hydrogen).; Hessian should be HESS.; All option names should be all caps and separated by underscores.; If you have an option that instructs your module to do something not too; computationally intensive and then quit, append _EXIT to the option; name.; Scaling terms (like for scs) should follow the pattern MP2_SS_SCALE; and SAPT_OS_SCALE.; FRAG for fragment.; AVG for average.; For level-shifting, let’s try to have it governed by (double); LEVEL_SHIFT only and not a boolean/double combo since the procedure; can be turned on (role of boolean) if the value (role of double) has; changed.; Fo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/manage_addon-1.html:8848,test,tested,8848,psi4manual/1.2.1/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/manage_addon-1.html,4,['test'],['tested']
Testability,"ase calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. dlpnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. dft1; DFT Functional Test all values update for new BraggSlater radii. cubeprop-esp; RHF orbitals and density for water. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom; DFT custom functional test. cc13b; Tests RHF CCSD(T)gradients. sad-scf-type; Test SAD SCF guesses on noble gas atom. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc51; EOM-CC3/cc-pVTZ on H2O. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). mints2-bse; Similar to mints2, but using the BSE to specify the basis sets. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. nbo; Generation of NBO file. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. dlp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:28036,test,test,28036,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ase members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples:. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted fr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/db.html:5691,benchmark,benchmark,5691,psi4manual/1.7.x/db.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/db.html,8,['benchmark'],['benchmark']
Testability,"ase; returns error message. Used in input files in the test suite. """"""; if digits > 1:; thresh = 10**-digits; message = """"""\t{}: computed value ({:.{digits1}f}) does not match ({:.{digits1}f}) to {digits} digits."""""".format(; label, computed, expected, digits1=int(digits) + 1, digits=digits); else:; thresh = digits; message = (""\t%s: computed value (%f) does not match (%f) to %f digits."" % (label, computed, expected, digits)); if abs(float(expected) - float(computed)) > thresh:; # float cast handles decimal.Decimal vars; print(message); if exitonfail:; raise TestComparisonError(message); if math.isnan(computed):; print(message); print(""\tprobably because the computed value is nan.""); if exitonfail:; raise TestComparisonError(message); success(label); return True. [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html:7683,test,test,7683,psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,1,['test'],['test']
Testability,"asic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testplugin.so; [100%] Built target testplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in $PATH or the; conda enviroment must be activated before compilation and execution of; plugins created using this procedure. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directory contains the following files. CMakeLists.txt — CMake file governing project plugin.; The plugin source and CMakeLists.txt is independent of platform; and PSI4 installation. You use CMake (version 3.1 or later); to generate a Makefile for the plugin by pointing it to a specific; PSI4 installation. Run psi4 --plugin-compile to get a command; to execute to generate the Makefile. What that command is doing is; loading the com",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/plugins-1.html:4517,test,testplugin,4517,psi4manual/1.1.0/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/plugins-1.html,15,['test'],['testplugin']
Testability,"asis, we can; throw away virtual orbitals that are expected to contribute little to the; dispersion energy. Speedups in excess of are possible. In; practice, this approximation is very good and should always be applied.; Publications resulting from the use of MP2 NO-based approximations should; cite the following: [Hohenstein:2010:104107]. Basic Keywords Controlling MP2 NO Approximations¶. NAT_ORBS¶. Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: false. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for evaluating the triples contribution to dispersion. Type: conv double; Default: 1.0e-6. Advanced Keywords Controlling MP2 NO Approximations¶. NAT_ORBS_T2¶. Do use MP2 natural orbital approximations for the block of two-electron integrals in the evaluation of second-order T2 amplitudes? This approximation is promising for accuracy and computational savings, but it has not been rigorously tested. Type: boolean; Default: false. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'). A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-trans",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/sapt-1.html:12029,test,tested,12029,psi4manual/4.0b2/sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sapt-1.html,6,['test'],['tested']
Testability,"ast-up (mainly not dying due to file weirdness). fcidump; test FCIDUMP functionality for rhf/uhf. fnocc5; Test FNO-DF-CCSD(T) energy. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc12; Single point energies of multiple excited states with EOM-CCSD. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. fnocc4; Test FNO-DF-CCSD(T) energy. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. cc54; CCSD dipole with user-specified basis set. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. rasci-h2o; RASCI/6-31G** H2O Energy Point. ddd-deriv; Sample HF/cc-pVDZ H2O computation all derivatives. scf-auto-cholesky; Cholesky filter a complete basis. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orb",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:8825,test,tests,8825,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"astup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. fnocc5; Test FNO-DF-CCSD(T) energy. mints-benchmark; run some BLAS benchmarks. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mbis-1; MBIS calculation on H2O. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. dft-reference; MP2 with a PBE0 reference computation. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. cubeprop-esp; RHF orbitals and density for water. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. linK-2; RKS Linear Exchange Algorithm test for benzene. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. freq-isotope1; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:30162,benchmark,benchmark,30162,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,4,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"atabase.dbse) of two elements, the first being the number; of reactions *sset* should contain and the second being a list of; the reaction names (dbrxn) not available for *modelchem*. Absence; of benchmark not considered. """"""; counts = OrderedDict(); counts[self.dbse] = [0, []]; soledb = True if (len(self.dbdict) == 1 and self.dbdict.items()[0][0] == self.dbse) else False; if not soledb:; for db in self.dbdict.keys():; counts[db] = [0, []]; for (lmc, lbm, orxn) in self.get_reactions(modelchem, benchmark='default',; sset=sset, failoninc=False):; db, rxn = orxn.dbrxn.split('-', 1); mcdatum = orxn.data[lmc].value if lmc else None; counts[self.dbse][0] += 1; if not soledb:; counts[db][0] += 1; if mcdatum is None:; counts[self.dbse][1].append(orxn.dbrxn); if not soledb:; counts[db][1].append(orxn.dbrxn); return counts. [docs] def plot_disthist(self, modelchem, benchmark='default', sset='default',; failoninc=True, verbose=False, xtitle='', view=True,; saveas=None, relpath=False, graphicsformat=['pdf']):; """"""Computes individual errors and summary statistics for single; model chemistry *modelchem* versus *benchmark* over; subset *sset* over all component databases. Computes histogram; of errors and gaussian distribution. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. >>>; """"""; # compute errors; mc = modelchem; errors, indiv = self.compute_statistics(mc, benchmark=benchmark, sset=sset,; failoninc=failoninc, verbose=verbose, returnindiv=True); # repackage; dbdat = []; for db in self.dbdict.keys():; if indiv[db] is not No",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:74553,benchmark,benchmark,74553,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,2,['benchmark'],['benchmark']
Testability,"atch supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:23999,test,test,23999,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,8,['test'],['test']
Testability,"ated using Conda for both PSI4; binary and development environment. On Linux (or Ubuntu shell on Windows), one can use the gcc; compiler installed alongside psi4 itself in the Conda distribution; or environment (below, $PSI4CONDA). On Mac, one must use; libc++.so (not libstdc++.so), and this can be accomplished by; installing XCode from the App Store that provides clang and; clang++ compilers. Check environment:. # yes, the following returns a blank line. yes, LD_LIBRARY_PATH irrelevant; >>> echo $PYTHONHOME $PYTHONPATH $DYLD_LIBRARY_PATH $PSIDATADIR. >>> which python psi4 g++ gfortran # Linux; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/gcc++; $PSI4CONDA/bin/gfortran; >>> which python psi4 g++ gfortran clang++ # Mac; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/g++; $PSI4CONDA/bin/gfortran; /usr/bin/clang++. >>> which cmake; $PSI4CONDA/bin/cmake; # if above empty, ``conda install cmake``. Create and compile plugin:. >>> psi4 --plugin-name testplugin; -- Creating ""testplugin"" with ""basic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/plugins-1.html:3203,test,testplugin,3203,psi4manual/1.4.0/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/plugins-1.html,18,['test'],['testplugin']
Testability,"ater radii. scf6; Tests RHF/ROHF/UHF SCF gradients. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. mints15; check SP basis Fortran exponent parsing. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. extern4; External potential calculation involving a TIP3P water and a QM water. Gradient on the external charges is compared to gradient on the QM atoms to validate the gradient on the charges. cdoremp-energy1; Cholesky decomposed OO-REMP/cc-pVDZ energy for the H2O molecule. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mbis-6; MBIS calculation on H2O. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. scf-level-shift-rohf; SCF level shift on an ROHF computation. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-checkrun-rohf; This checks that all en",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:42479,test,tests,42479,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"ates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. mp2-1; All-electron MP2 6-31G** geometry optimization of water. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. scf-hess5; DF SCF 6-31G analytical vs finite-dif",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:32626,test,test,32626,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"atically if the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020. Type: boolean; Default: true. Expert¶. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. USE_DF_INTS¶. Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. table of contents. FNOCC; General; ACTIVE_NAT_ORBS; BRUECKNER_MAXITER; CC_SCALE_OS; CC_SCALE_SS; CC_TIMINGS; CEPA_NO_SINGLES; CHOLESKY_TOLERANCE; DFCC; DF_BASIS_CC; DIIS_MAX_VECS; DIPMOM; E_CONVERGENCE; MAXITER; MP2_SCALE_OS; MP2_SCALE_SS; NAT_ORBS; OCC_PERCENTAGE; OCC_TOLERANCE; R_CONVERGENCE; SCS_CCSD; SCS_CEPA; SCS_MP2; TRIPLES_LOW_MEMORY. Expert; CEPA_LEVEL; COMPUTE_MP4_TRIPLES; COMPUTE_TRIPLES; RUN_CCSD; RUN_CEPA; RUN_MP2; RUN_MP3; RUN_MP4; USE_DF_INTS. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Appendices; Keywords by Module; FNOCC. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__fnocc.html:4490,test,testing,4490,psi4manual/1.6.x/autodir_options_c/module__fnocc.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodir_options_c/module__fnocc.html,2,['test'],['testing']
Testability,"atics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. sapt-exch-ind30-inf; SAPT2+3 with S^inf exch-ind30 Geometries taken from the S66x10 database, the shortest-range point (R = 0.7 R_e). cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega= (589 355 nm). fci-h2o; 6-31G H2O Test FCI Energy Point. dfremp-1; density fitted REMP/cc-pVDZ energies for the CO2 molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. scf-cholesky-basis; incremental Cholesky filtered SCF. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. ddd-function-kwargs; check distributed driver is correctly passing function kwargs. dct2; D",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:9016,test,test,9016,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 22. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. RGC10¶. Database (Sherrill) of interaction energies for dissociation curves of rare-gas biatomic complexes.; Geometries and reference interaction energies from Tang et al. JCP 118 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'HeHe' 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_available_databases-1.html:2917,benchmark,benchmark,2917,psi4manual/4.0b3/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_available_databases-1.html,4,['benchmark'],['benchmark']
Testability,"ation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 1; ...; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) dissociation curve for molecule 22. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark; 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset; 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlx",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_available_databases-1.html:2917,benchmark,benchmark,2917,psi4manual/4.0b4/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_available_databases-1.html,4,['benchmark'],['benchmark']
Testability,"ation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. fnocc4; Test FNO-DF-CCSD(T) energy. cdremp-1; Cholesky decomposed REMP/cc-pVDZ energies for the CO2 molecule. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. scf-ecp2; Water-Argon complex with ECP present; check of RHF Hessian. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geom",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:32417,test,test,32417,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZV",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:4047,test,test,4047,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,8,['test'],['test']
Testability,"ation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. casscf-fzc-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. fnocc6; Test method/basis with disk_df. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fci-h2o-2; 6-31G H2O Test FCI Energy Point. dct10; The multiple guesses for DCT amplitudes for ODC-12. mints-benchmark; run some BLAS benchmarks. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF ba",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:21102,test,tested,21102,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['tested']
Testability,"ation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/kw-1; testing best practices options, part i. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-uhf-mp3; UHF MP3 ene",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_cfour.html:3695,test,testing,3695,psi4manual/1.9.x/autodoc_testsuite_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_cfour.html,1,['test'],['testing']
Testability,"ation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » ; Appendices ». Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can be found in; psi4/tests. After building the source code, these can automatically be; run by running make tests in the compilation directory. Sample input; files can be found in the the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Input File; Description. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DCFT-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in th",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/testsuite-1.html:1086,test,tests,1086,psi4manual/4.0b3/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/testsuite-1.html,2,['test'],['tests']
Testability,"ationError(""Pickle file for loading database data from file %s does not exist"" % (; os.path.abspath(path) + os.sep + dbname + '.pickle')); # with open('/var/www/html/bfdb_devel/bfdb/scratch/ASDFlogfile.txt', 'a') as handle:; # handle.write('<!-- PICKLE %s\n' % (picklefile)); with open(picklefile, 'rb') as handle:; instance = pickle.load(handle); return instance. [docs] def available_modelchems(self, union=True):; """"""Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; *union* is True or all modelchems that have data for all reactions; if *union* is False. """"""; mcs = [set(v.data) for v in self.hrxn.itervalues()]; if union:; return sorted(set.union(*mcs)); else:; return sorted(set.intersection(*mcs)). [docs] def benchmark(self):; """"""Returns the model chemistry label for the database's benchmark.""""""; bm = None; rxns = self.hrxn.itervalues(); while bm is None:; try:; bm = next(rxns).benchmark; except StopIteration:; break; return bm; # return next(self.hrxn.itervalues()).benchmark; # TODO all rxns have same bench in db module so all have same here in obj; # but the way things stored in Reactions, this doesn't have to be so. [docs] def load_subsets(self, modname='subsetgenerator', pythonpath=None):; """"""Loads subsets from all functions in module *modname*. """"""; if pythonpath is not None:; sys.path.insert(1, pythonpath); else:; sys.path.append(os.path.dirname(__file__)); try:; ssmod = __import__(modname); except ImportError:; print(""""""\nPython module for database data %s failed to load\n\n"""""" % (modname)); print(""""""\nSearch path that was tried:\n""""""); print(', '.join(map(str, sys.path))); raise ValidationError(""Python module loading problem for database subset generator "" + str(modname)). for func in dir(ssmod):; if callable(getattr(ssmod, func)):; self.add_Subset(getattr(ssmod, func).__doc__, getattr(ssmod, func)). print(""""""WrappedDatabase %s: Defined subsets loaded"""""" % (self.dbse)). [docs] def get_p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:42139,benchmark,benchmark,42139,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"ations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega= (589 355 nm). fnocc2; Test G2 method for H2O. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. remp-energy2; integral conventional unrestricted REMP/cc-pVDZ energies for the H2O+ molecule. results were independently verified against the initial wavels implementation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. fcidump; test FCIDUMP functionality for rhf/uhf. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. dfccsdat2; DF-A-CCSD(T) cc-pVDZ energy for the NH molecule. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .  ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:48080,test,test,48080,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"atistics(self, modelchem, benchmark='default', sset='default',; failoninc=True, verbose=False, returnindiv=False):; """"""Computes summary statistics and, if *returnindiv* True,; individual errors for single model chemistry *modelchem* versus; *benchmark* over subset *sset* over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless *failoninc* set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. """"""; errors = OrderedDict(); indiv = OrderedDict(); actvdb = []; for db, odb in self.dbdict.items():; dbix = self.dbdict.keys().index(db); if self.sset[sset][dbix] is None:; errors[db], indiv[db] = (None, None); else:; errors[db], indiv[db] = odb.compute_statistics(self.mcs[modelchem][dbix],; sset=self.sset[sset][dbix],; benchmark='ZEROS' if benchmark == 'ZEROS' else self.mcs[benchmark][dbix],; failoninc=failoninc, verbose=verbose, returnindiv=True); actvdb.append(errors[db]); errors[self.dbse] = average_errors(*actvdb). if returnindiv:; return errors, indiv; else:; return errors. [docs] def analyze_modelchems(self, modelchem, benchmark='default', failoninc=True, verbose=False):; """"""For each component database, compute and print nicely formatted; summary error statistics for each model chemistry in array; *modelchem* versus *benchmark* for all available subsets. """"""; # compute errors; errors = {}; for mc in modelchem:; errors[mc] = {}; for ss in self.sset.keys():; errors[mc][ss] = self.compute_statistics(mc, benchmark=benchmark, sset=ss,; failoninc=failoninc, verbose=verbose, returnindiv=False); # present errors; pre, suf, mid = string_contrast(modelchem); text = """"""\n ==> %s %s[]%s Errors <==\n"""""" % (self.dbse, pre, suf); text += """"""%20s %44s"""""" % ('', '==> ' + self.dbse + ' <=='); for db, odb in self.dbdict.items():; text += """"""%44s"""""" % ('=> ' + odb.dbse + ' <='); text += '\n'. collabel = """""" ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:57657,benchmark,benchmark,57657,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"ative level determined from; displacements, and the second number is the level determined at.; stencil_size; {3, 5}; Number of points to evaluate for each displacement basis vector inclusive of central reference geometry.; step_size; [a0]; initialize_string; A function that returns the string to print to show the caller was entered.; The string is both caller-specific and dependent on values determined; in this function.; initialize; For printing, whether call is from generator or assembly stages.; verbose; Set to 0 to silence extra print information, regardless of the print level.; Used so the information is printed only during geometry generation, and not; during the derivative computation as well. Returns; -------; data; Miscellaneous information required by callers.; """""". info = """"""; ----------------------------------------------------------; FINDIF; R. A. King and Jonathon Misiewicz; ----------------------------------------------------------. """"""; if initialize:; core.print_out(info); logger.info(info). print_lvl = core.get_option(""FINDIF"", ""PRINT""). data = {""print_lvl"": print_lvl, ""stencil_size"": stencil_size, ""step_size"": step_size}. if print_lvl:; info = initialize_string(data); core.print_out(info); logger.info(info). # Get settings for CdSalcList, then get the CdSalcList.; method_allowed_irreps = 0x1 if mode == ""1_0"" else 0xFF; # core.get_option returns an int, but CdSalcList expect a bool, so re-cast; salc_list = core.CdSalcList(mol, method_allowed_irreps, t_project, r_project). n_atom = mol.natom(); n_irrep = salc_list.nirrep(); n_salc = salc_list.ncd(). if print_lvl and verbose:; info = f"" Number of atoms is {n_atom}.\n""; if method_allowed_irreps != 0x1:; info += f"" Number of irreps is {n_irrep}.\n""; info += "" Number of {!s}SALCs is {:d}.\n"".format("""" if method_allowed_irreps != 0x1 else ""symmetric "",; n_salc); info += f"" Translations projected? {t_project:d}. Rotations projected? {r_project:d}.\n""; core.print_out(info); logger.info(info). # TODO: Repla",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html:8194,log,logger,8194,psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,8,['log'],['logger']
Testability,"atomic_model. [docs] def compute(self, client: Optional[""qcportal.client.FractalClient""] = None):; """"""Run quantum chemistry.""""""; from psi4.driver import pp. if self.computed:; return. if client:; self.computed = True. try:; # QCFractal v0.15.8; from qcportal.models import KeywordSet, Molecule; qca_next_branch = False; except ImportError:; # QCFractal `next`; from qcelemental.models import Molecule; qca_next_branch = True. # Build the molecule; mol = Molecule(**self.molecule.to_schema(dtype=2)). if not qca_next_branch:; # QCFractal v0.15.8. # Build the keywords; keyword_id = client.add_keywords([KeywordSet(values=self.keywords)])[0]. r = client.add_compute(""psi4"", self.method, self.basis, self.driver, keyword_id, [mol]); self.result_id = r.ids[0]; # NOTE: The following will re-run errored jobs by default; if self.result_id in r.existing:; ret = client.query_tasks(base_result=self.result_id); if ret:; if ret[0].status == ""ERROR"":; client.modify_tasks(""restart"", base_result=self.result_id); logger.info(""Resubmitting Errored Job {}"".format(self.result_id)); elif ret[0].status == ""COMPLETE"":; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Submitting AtomicResult {}"".format(self.result_id)). else:; # QCFractal `next`. meta, ids = client.add_singlepoints(; molecules=mol,; program=""psi4"",; driver=self.driver,; method=self.method,; basis=self.basis,; keywords=self.keywords,; # protocols,; ); self.result_id = ids[0]; # NOTE: The following will re-run errored jobs by default; if meta.existing_idx:; rec = client.get_singlepoints(self.result_id); if rec.status == ""error"":; client.reset_records(self.result_id); logger.info(""Resubmitting Errored Job {}"".format(self.result_id)); elif rec.status == ""complete"":; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Submitting AtomicResult {}"".format(self.result_id)). return. logger.info(f'<<< J",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_base.html:4806,log,logger,4806,psi4manual/1.7.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_base.html,2,['log'],['logger']
Testability,"ators""] = [(s if s is None else int(s)) for s in dicary[""fragment_separators""]]; # forgive generator version changes; if ""provenance"" in dicary:; dicary[""provenance""].pop(""version""); # regularize connectivity ordering; if ""connectivity"" in dicary:; conn = [(min(at1, at2), max(at1, at2), bo) for (at1, at2, bo) in dicary[""connectivity""]]; conn.sort(key=lambda tup: tup[0]); dicary[""connectivity""] = conn. return dicary. xptd = massage_dicts(xptd); cptd = massage_dicts(cptd). if relative_geoms == ""exact"":; pass; elif relative_geoms == ""align"":; # can't just expect geometries to match, so we'll align them, check that; # they overlap and that the translation/rotation arrays jibe with; # fix_com/orientation, then attach the oriented geom to computed before the; # recursive dict comparison.; from .molutil.align import B787. cgeom = np.array(cptd[""geom""]).reshape((-1, 3)); rgeom = np.array(xptd[""geom""]).reshape((-1, 3)); rmsd, mill = B787(; rgeom=rgeom,; cgeom=cgeom,; runiq=None,; cuniq=None,; atoms_map=True,; mols_align=True,; run_mirror=False,; verbose=0,; ); if cptd[""fix_com""]:; return compare(; True,; np.allclose(np.zeros((3)), mill.shift, atol=atol),; ""null shift"",; quiet=(verbose == 0),; return_message=return_message,; return_handler=return_handler,; ); if cptd[""fix_orientation""]:; return compare(; True,; np.allclose(np.identity(3), mill.rotation, atol=atol),; ""null rotation"",; quiet=(verbose == 0),; return_message=return_message,; return_handler=return_handler,; ); ageom = mill.align_coordinates(cgeom); cptd[""geom""] = ageom.reshape((-1)). return compare_recursive(; xptd,; cptd,; atol=atol,; rtol=rtol,; label=label,; forgive=forgive,; quiet=(verbose == 0),; return_message=return_message,; return_handler=return_handler,; ). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.7;  · . PSI4. Module code; qcelemental.testing. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/qcelemental/testing.html:17344,test,testing,17344,psi4manual/1.7.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/qcelemental/testing.html,2,['test'],['testing']
Testability,"atter for the rotational symmetry number in thermodynamic computations. mbis-5; MBIS calculation on ZnO. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cbs-parser; mtd/basis syntax examples. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. fci-dipole; 6-31G H2O Test FCI Energy Point. scf-response3; UHF Dipole Polarizability Test. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. cbs-xtpl-alpha; Extrapolated water energies. extern3; External potential calculation with one Ghost atom and one point charge at the same position. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. cbs-delta-energy; Extrapolated energies with delta correction. dft1; DFT Functional Test all values update for new BraggSlater radii. scf-coverage; Lithium test for coverage. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density ma",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:35376,test,test,35376,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"atzadtz'] = ['CCSD-CP-atzadtz', 'CCSD-CP-atzhadtz', 'CCSD-CP-atzadtz']; self.mc['CCSD-CP-atqzadtz'] = ['CCSD-CP-atqzadtz', 'CCSD-CP-atqzhadtz', 'CCSD-CP-atqzadtz']; self.mc['CCSD-CP-atqzatz'] = ['CCSD-CP-atqzatz', 'CCSD-CP-atqzhatz', 'CCSD-CP-atqzatz']. self.mc['CCSDT-CP-adz'] = ['CCSDT-CP-adz', 'CCSDT-CP-hadz', 'CCSDT-CP-adz']; self.mc['CCSDT-CP-atz'] = ['CCSDT-CP-atz', 'CCSDT-CP-hatz', 'CCSDT-CP-atz']; self.mc['CCSDT-CP-adtz'] = ['CCSDT-CP-adtz', 'CCSDT-CP-hadtz', 'CCSDT-CP-adtz']; self.mc['CCSDT-CP-adtzadz'] = ['CCSDT-CP-adtzadz', 'CCSDT-CP-adtzhadz', 'CCSDT-CP-adtzadz']; self.mc['CCSDT-CP-atzadz'] = ['CCSDT-CP-atzadz', 'CCSDT-CP-atzhadz', 'CCSDT-CP-atzadz']; self.mc['CCSDT-CP-atqzadz'] = ['CCSDT-CP-atqzadz', 'CCSDT-CP-atqzhadz', 'CCSDT-CP-atqzadz']; self.mc['CCSDT-CP-atzadtz'] = ['CCSDT-CP-atzadtz', 'CCSDT-CP-atzhadtz', 'CCSDT-CP-atzadtz']; self.mc['CCSDT-CP-atqzadtz'] = ['CCSDT-CP-atqzadtz', 'CCSDT-CP-atqzhadtz', 'CCSDT-CP-atqzadtz']; self.mc['CCSDT-CP-atqzatz'] = ['CCSDT-CP-atqzatz', 'CCSDT-CP-atqzhatz', 'CCSDT-CP-atqzatz']. # print certain statistic for all 4 db and summary and indiv sys if min or max. fnreservoir = {}; fnreservoir['blankslat'] = r""""""Errors with respect to Benchmark. Guide lines are at 0, 0.3, and 1.0 kcal/mol overbound ($-$) and underbound ($+$).""""""; fnreservoir['5min'] = r""""""Only equilibrium and near-equilibrium systems included. (All S22 and HSG, 50/194 NBC10, 28/118 HBC6.)""""""; fnreservoir['liliowa'] = r""""""{0}MAE (dark by {1} kcal/mol) for subsets in residue classes cation, anion, polar, aliphatic, \& aromatic (L to R).""""""; fnreservoir['flat'] = r""""""{0}Errors with respect to benchmark within $\pm${1} kcal/mol. Guide lines are at {2} overbound ($-$) and underbound ($+$)."""""". Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    ; Psi4 [1.0.0 6a9a71b] » ; Module code ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:135612,benchmark,benchmark,135612,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"ault: true. T (THERMO); THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY); CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY); CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:215726,test,test,215726,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,2,['test'],['test']
Testability,"aulty for close (especially hydrogen-bonded) fragments. See` seed_atoms`.; Any existing fragmentation info/chgmult encoded in self is lost. Z(self: psi4.core.Molecule, arg0: int) → float¶; Nuclear charge of atom arg0 (0-indexed without dummies). activate_all_fragments(self: psi4.core.Molecule) → None¶; Sets all fragments in the molecule to be active. add_atom(self: psi4.core.Molecule, Z: float, x: float, y: float, z: float, symbol: str, mass: float, charge: float, label: str, A: int) → None¶; Adds to self Molecule an atom with atomic number Z, Cartesian coordinates in Bohr (x, y, z), atomic symbol, mass, and charge, extended atomic label, and mass number A. atom_at_position(*args, **kwargs)¶; Overloaded function. atom_at_position(self: psi4.core.Molecule, coord: float, tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. atom_at_position(self: psi4.core.Molecule, coord: List[float[3]], tol: float) -> int. Tests to see if an atom is at the position coord with a given tolerance tol. basis_on_atom(self: psi4.core.Molecule, arg0: int) → str¶; Gets the label of the orbital basis set on a given atom arg0. center_of_mass(self: psi4.core.Molecule) → psi4.core.Vector3¶; Computes center of mass of molecule (does not translate molecule). charge(self: psi4.core.Molecule, atom: int) → float¶; Gets charge of atom (0-indexed without dummies). clone(self: psi4.core.Molecule) → psi4.core.Molecule¶; Returns a new Molecule identical to arg1. com_fixed(self: psi4.core.Molecule) → bool¶; Gets whether or not center of mass is fixed. comment(self: psi4.core.Molecule) → str¶; Gets molecule comment. connectivity(self: psi4.core.Molecule) → List[Tuple[int, int, float]]¶; Gets molecule connectivity. create_psi4_string_from_molecule(self: psi4.core.Molecule) → str¶; Gets a string re-expressing in input format the current state of the molecule.Contains Cartesian geometry info, fragmentation, charges and multiplicities, and any frame restriction. deacti",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.molecule.html:15995,Test,Tests,15995,psi4manual/1.4.0/api/psi4.core.molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.molecule.html,2,['Test'],['Tests']
Testability,"auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_cfour-1.html:4222,test,testing,4222,psi4manual/1.2.1/autodoc_testsuite_cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_cfour-1.html,2,['test'],['testing']
Testability,"auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sph",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_cfour-1.html:4222,test,testing,4222,psi4manual/1.3.2/autodoc_testsuite_cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_cfour-1.html,2,['test'],['testing']
Testability,"automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. mrcc1; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html:6977,test,test,6977,psi4manual/4.0b4/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html,8,['test'],['test']
Testability,"automatically be detected and no further input is required to use the; ECP-containing basis set. See scf-ecp and dfmp2-ecp; for examples of computations with ECP-containing basis sets. Warning; Analytic derivatives of ECPs are not yet available. The HF and DFT derivatives are implemented in a semi-numerical scheme, where numerical ECP gradients are added to analytic SCF gradients. Analytic gradients for (DF)MP2 are not yet available, but the standard numerical gradients will work correctly. Fully analytic gradients will be implemented soon. Warning; ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the forum. External potentials and QM/MM¶; In addition to the implementation of EFP for accurate QM/MM; computations, PSI4 can perform more rudimentary QM/MM procedures via the; EXTERN keyword. The following snippet, extracted from the; extern1 test case, demonstrates its use for a TIP3P external potential:; 1; 2; 3; 4; 5Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834, 1.649232019048, 0.0, -2.356023604706); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -3.799961446760); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -0.912085762652); psi4.set_global_option_python('EXTERN', Chrgfield.extern). First a QMMM object is created, then three separate particles are added to this; object before the SCF code is told about its existence on the last line. The; calls to addCharge take the atomic charge, x coordinate, y coordinate, and; z coordinate in that order. The atomic charge is specified in atomic units,; and the coordinates always use the same units as the geometry specification in; the regular QM region. Additional MM molecules may be specified by adding; extra calls to addCharge to describe the full MM region.; To run a computation in a constant dipole field, the PERTURB_H,; PERTURB_WITH and PERTURB_DIPOLE keywords can be used. As an",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/scf-1.html:34267,test,test,34267,psi4manual/1.2.1/scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/scf-1.html,4,['test'],['test']
Testability,available_databases.txt; autodoc_available_plugins.txt; autodoc_dft_all.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contributing.txt; cp.txt; customizing.txt; db.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; documentation.txt; energy.txt; external.txt; freq.txt; glossary_psivariables.txt; index.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; mrcc.txt; notes_c.txt; notes_py.txt; opt.txt; optking.txt; plugins.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; sowreap.txt; testsuite.txt; tutorial.txt. /_static; ; basic.css; copybutton.js; doctools.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_sections.js; underscore.js. Ab Initio Polarization Propagator — PSI4 [beta2] documentation; Ab Initio Polarization Propagator — PSI4 [beta2] documentation; Appendices — PSI4 [beta2] documentation; Appendices — PSI4 [beta2] documentation. /autodir_options_c; ; CACHELEVEL — PSI4 [beta2] documentation; MEMORY — PSI4 [beta2] documentation; NEWTON_CONVERGENCE — PSI4 [beta2] documentation; NORM_TOLERANCE — PSI4 [beta2] documentation; NUM_AMPS_PRINT — PSI4 [beta2] documentation; POLE_MAXITER — PSI4 [beta2] documentation; PR — PSI4 [beta2] documentation; REFERENCE — PSI4 [beta2] documentation; ROOTS_PER_IRREP — PSI4 [beta2] documentation; SEM_MAXITER — PSI4 [beta2] documentation; AEL — PSI4 [beta2] documentation; AO_BASIS — PSI4 [beta2] documentation; CACHELEVEL — PSI4 [beta2] documentation; GAUGE — PSI4 [beta2] documentation; INTS_TOLERANCE — PSI4 [beta2] docu,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:1007331,test,testsuite,1007331,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,1,['test'],['testsuite']
Testability,available_databases.txt; autodoc_available_plugins.txt; autodoc_dft_all.txt; autodoc_dft_disp.txt; autodoc_dft_energy.txt; autodoc_dft_gga.txt; autodoc_dft_hybrid.txt; autodoc_dft_lrc.txt; autodoc_dft_meta.txt; autodoc_driver.txt; autodoc_glossary_options_c.txt; autodoc_options_c_bymodule.txt; autodoc_psi4bases.txt; autodoc_psivariables_bymodule.txt; autodoc_testsuite.txt; basissets.txt; basissets_byelement.txt; bestpractices_py.txt; bibliography.txt; cbs.txt; cbs_eqn.txt; cc.txt; contributing.txt; cp.txt; customizing.txt; db.txt; detci.txt; dfmp2.txt; dft.txt; dft_byfunctional.txt; documentation.txt; energy.txt; external.txt; freq.txt; glossary_psivariables.txt; index.txt; intercalls.txt; interfacing.txt; introduction.txt; methods.txt; mrcc.txt; notes_c.txt; notes_py.txt; opt.txt; optking.txt; plugins.txt; programming.txt; prop.txt; psimod.txt; psimrcc.txt; psithonfunc.txt; psithoninput.txt; quickaddalias.txt; quickaddbasis.txt; quickadddatabase.txt; sapt.txt; scf.txt; sowreap.txt; testsuite.txt; tutorial.txt. _static; ; basic.css; copybutton.js; doctools.js; jquery.js; psi4.css; pygments.css; searchtools.js; toggle_sections.js; underscore.js. <no title> — PSI4 [beta2] documentation; Ab Initio Polarization Propagator — PSI4 [beta2] documentation; Ab Initio Polarization Propagator — PSI4 [beta2] documentation; Appendices — PSI4 [beta2] documentation; Appendices — PSI4 [beta2] documentation. autodir_options_c; ; CACHELEVEL — PSI4 [beta2] documentation; MEMORY — PSI4 [beta2] documentation; NEWTON_CONVERGENCE — PSI4 [beta2] documentation; NORM_TOLERANCE — PSI4 [beta2] documentation; NUM_AMPS_PRINT — PSI4 [beta2] documentation; POLE_MAXITER — PSI4 [beta2] documentation; PR — PSI4 [beta2] documentation; REFERENCE — PSI4 [beta2] documentation; ROOTS_PER_IRREP — PSI4 [beta2] documentation; SEM_MAXITER — PSI4 [beta2] documentation; AEL — PSI4 [beta2] documentation; AO_BASIS — PSI4 [beta2] documentation; CACHELEVEL — PSI4 [beta2] documentation; GAUGE — PSI4 [beta2] documentat,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/index-wcopy.html:902721,test,testsuite,902721,index-wcopy.html,https://psicode.org,https://psicode.org/index-wcopy.html,1,['test'],['testsuite']
Testability,"ave been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; 1; 2energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/cfour-1.html:24388,test,tested,24388,psi4manual/1.2.1/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/cfour-1.html,6,['test'],['tested']
Testability,"ay be autodocumented here. Write docstrings! For a major function intended for use in input files, start with the skeleton docstring in psi4/lib/python/example_docstring and replace anything that looks like <this>. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case (make tests, NOT make longtests) from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; PsiMod.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); PsiMod.set_variable('MP2.5 TOTAL ENERGY', e_mp25); PsiMod.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user d",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/bestpractices_py-1.html:4085,test,test,4085,psi4manual/4.0b2/bestpractices_py-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/bestpractices_py-1.html,6,['test'],['test']
Testability,"ay be autodocumented here. Write docstrings! For a major function intended for use in input files, start with the skeleton docstring in psi4/lib/python/example_docstring and replace anything that looks like <this>. For a behind-the-scenes function or if you don’t want the bother of dealing with reStructuredText, just write an ordinary docstring. It will get slurped into the documentation in plain text. Your python function should follow PEP8 conventions (without the line-length restriction). I’m aiming for files to pass the line below, unless for good reason. The second line is for database Python files.; >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. Your python function should not prevent any test case (make tests, NOT make longtests) from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap_ is suggested. Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the ‘current energy’ variable. This last is needed to communicate with the optimizer.; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). Once your python function is fairly stable on its own, it’s potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no *_func arguments, then energy() gets called. If the user defines",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/bestpractices_py-1.html:4098,test,test,4098,psi4manual/4.0b5/bestpractices_py-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/bestpractices_py-1.html,2,['test'],['test']
Testability,"bal. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/testsuite-1.html:16685,test,test,16685,psi4manual/1.1.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/testsuite-1.html,4,['test'],['test']
Testability,"bal. freq-masses; check nonphysical masses possible. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. dft1; DFT Functional Test all values update for new BraggSlater radii. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. scf-level-shift-rks; SCF level shift on an RKS computation. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. mints3; Test individual integral objects for correctness. dft-smoke; DFT Functional Smoke Test. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. linK-1; RHF Linear Exchange Algorithm test for water. mbis-3; MBIS calculation on OH radical. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. dft2; DFT Functional Test. soscf-large; Second-order SCF convergnece: Benzene. cbs-xtpl-alpha; Extrapolated water energies. cc17; Single point energies of multiple excited states with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. mbis-6; MBIS calculation on H2O. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:31723,test,tests,31723,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"bas with respect to model chemistry benchmark, mindful of failoninc.; The general plan for the table, as well as defaults for landscape,; footnotes, title, indextitle, and *theme are got from function; tableplan. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless filename is given,; in which case they’re written to file and a filedict returned. write_xyz_files(path=None)[source]¶; Writes xyz files for every reagent in the Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', mcset='default', failoninc=True, verbose=False)[source]¶; For all data or modelchem subset mcset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. plot(benchmark='default', mcset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors over model chemistries in mcset (which; may be default or an array or a function generating an array) versus; benchmark. Thread color can be ‘rgb’ for old coloring, a color; name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:43334,benchmark,benchmark,43334,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,4,['benchmark'],['benchmark']
Testability,"base members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted fr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/db-1.html:5679,benchmark,benchmark,5679,psi4manual/1.4.0/db-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html,10,['benchmark'],['benchmark']
Testability,"basis set. shell(si, center=None)[source]¶; Return the si’th Gaussian shell on center; * @param i Shell number; * @return A shared pointer to the GaussianShell object for the i’th shell. shell_on_center(center, shell)[source]¶; Return the overall shell number. static shell_sorter_am(d1, d2)[source]¶. static shell_sorter_ncenter(d1, d2)[source]¶. shell_to_ao_function(i)[source]¶; Given a shell what is its first AO function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_basis_function(i)[source]¶; Given a shell what is its first basis function (spherical) function; * @param i Shell number; * @return The function number for the first function for the i’th shell. shell_to_center(i)[source]¶; Given a shell what is its atomic center; * @param i Shell number; * @return The atomic center for the i’th shell. static test_basis_set(max_am)[source]¶; Returns a shell-labeled test basis set object; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more de",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:66337,test,test,66337,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,8,"['benchmark', 'test']","['benchmark', 'benchmarking', 'test']"
Testability,"bbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:. Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Embarrassing Parallelism. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/sowreap-1.html:2071,test,tested,2071,psi4manual/1.4.0/sowreap-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/sowreap-1.html,2,['test'],['tested']
Testability,"bbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:. Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Psithon Functions: Invoking a Calculation; Embarrassing Parallelism. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/sowreap-1.html:2071,test,tested,2071,psi4manual/1.5.0/sowreap-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/sowreap-1.html,2,['test'],['tested']
Testability,"bbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. fnocc5; Test FNO-DF-CCSD(T) energy. mints-benchmark; run some BLAS benchmarks. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mbis-1; MBIS calculation on H2O. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. dft-reference; MP2 with a PBE0 reference computation. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. cubeprop-esp; RHF orbitals and density for water. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. linK-2; RKS Linear Exchange Algorithm test for benzene. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. tdscf-1; td-uhf test on triplet states of methylene (rpa). dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. sapt8; SAPT0(ROHF) open-shell comp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:30508,test,test,30508,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"be used in any publication utilizing the; Psi4 program package:. “Psi4: An open-source ab initio electronic structure program,”; J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein, F.; Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke, M. L.; Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl, W. D.; Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill, and T.; D. Crawford, WIREs Comput. Mol. Sci. 2, 556 (2012).; (doi: 10.1002/wcms.93). Depending on the particular modules used, the user may also wish to; cite some of the following references for theoretical, algorithmic,; or implementation contributions specific to Psi4 (in addition to; appropriate references for the underlying theory, which are not necessarily; included in the list below). Density Cumulant Functional Theory (DCFT)¶; Psi4 features several formulations of newly-developed density cumulant; functional theory (DCFT). The theory and benchmark of this theory are; discussed in the following papers:; DC-06 (also known as DCFT-06):. “Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,” A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, J. Chem. Phys.; 133, 174122 (2010).; (doi: 10.1063/1.3503657).; “Analytic gradients for density cumulant functional theory: The; DCFT-06 model,” A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, J. Chem. Phys. 137, 054105 (2012).; (doi: 10.1063/1.4739423). DC-12:. “Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,” A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, J. Chem. Phys. 138, 024107; (2013).; (doi: 10.1063/1.4773580). ODC-06 and ODC-12:. “Orbital-optimized density cumulant functional theory,” A. Yu. Sokolov, and; H. F. Schaefer, J. Chem. Phys. 139, 204110 (2013).; (doi: 10.1063/1.4833138). ODC-13:. “Density cumulant functional theory from a unitary transformation:; N-re",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/introduction-1.html:2859,benchmark,benchmark,2859,psi4manual/1.0.0/introduction-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/introduction-1.html,2,['benchmark'],['benchmark']
Testability,"bin/gcc++; $PSI4CONDA/bin/gfortran; >>> which python psi4 g++ gfortran clang++ # Mac; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/g++; $PSI4CONDA/bin/gfortran; /usr/bin/clang++. >>> which cmake; $PSI4CONDA/bin/cmake; # if above empty, ``conda install cmake``. Create and compile plugin:. >>> psi4 --plugin-name testplugin; -- Creating ""testplugin"" with ""basic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testplugin.so; [100%] Built target testplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in $PATH or the; conda enviroment must be activated before compilation and execution of; plugins created using this procedure. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directory contains the following files. CMakeLists.txt — CMake fil",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/plugins-1.html:3848,test,testplugin,3848,psi4manual/1.4.0/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/plugins-1.html,9,['test'],['testplugin']
Testability,"bitals are variationally optimized.; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [\(\mbox{ODC-13$(\lambda_3)$}\)] can be used (see below).; For the detailed comparison of the quality of these methods we refer; users to our publications.; The DCFT functional can be specified by the DCFT_FUNCTIONAL option. The; default choice is the ODC-12 functional. In addition to five methods listed; above, DCFT_FUNCTIONAL option can be set to CEPA0 (coupled electron; pair approximation zero, equivalent to linearized coupled cluster doubles; method, LCCD). CEPA0 can be considered as a particular case of the DC-06 and DC-12; methods in the limit of zero non-idempotency of \(\boldsymbol{\gamma_1}\). This option has a limited; functionality and should only be used for test purposes. For the production-level CEPA0 code, see the; OCC module. The DCFT code can also be used to; compute the \((\lambda_3)\) energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the \((\lambda_3)\) correction can be; requested by setting the THREE_PARTICLE option to PERTURBATIVE. A; combination of the ODC-13 functional with the \((\lambda_3)\) correction; [denoted as \(\mbox{ODC-13$(\lambda_3)$}\)] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries.; At the present moment, all of the DCFT methods support unrestricted reference; orbitals (REFERENCE UHF), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (REFERENCE RHF) for the energy and gradient compu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/dcft-1.html:7078,test,test,7078,psi4manual/1.2.1/dcft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/dcft-1.html,6,['test'],['test']
Testability,"bjdir and reissue make, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp). Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:39654,test,test,39654,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,22,['test'],"['test', 'testlabel', 'testname', 'tests']"
Testability,"bjdir> via stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out.; All PSIthon tests are runable through CTest, and output files appear in <objdir>/tests/<test-name>/output.dat and stdout results appear in <objdir>/Testing/Temporary/LastTest.log*. Adding PsiAPI Test Cases¶; To create a new test case, either create a new file or add to an existing file under psi4/tests/pytests. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; A test file may contain many tests, each of which is an ordinary Python function with name starting test_. This is how pytest knows to collect it.; No registration required to bring a test to pytest’s attention.; No registration required to bring a test to CMake’s attention. If a test needs additional files, register them in psi4/psi4/CMakeLists.txt. A few notes on test contents:. Import testing functions from utils and use Python assert: assert compare_values(expected, computed, ...).; Don’t worry about cleaning up files or resetting options. A function in psi4/tests/pytests/conftest.py does this automatically between every test.; Especially if using data or functions from outside a test, run a variety of tests at different pytest -n <N> levels to mix up test ordering. If tests fail that pass when run alone, you’ve got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. For every new test file, add pytestmark = [pytest.mark.psi, pytest.mark.api] at the top.; This ensures that every test has the psi mark and every PsiAPI test has the api mark to contrast with PSIthon tests with cli mark.; There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m <mark>; vs. ctest -L <mark>) rather than just by name (pytest -k <name_fragment>; vs. ctest -R <name_fragment>). Far more compl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:11518,test,testing,11518,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,15,"['assert', 'test']","['assert', 'testing']"
Testability,"bject; * @param max_am maximum angular momentum to build; * @return pair containing shell labels and four-center; * test basis for use in benchmarking; * See libmints/benchmark.cc for details; The libmints version seems not to have been updated along with the classes. static zero_ao_basis_set()[source]¶; Returns an empty basis set object.; Returns a BasisSet object that actually has a single s-function; at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty BasisSet object. zero_so_basis_set(factory)[source]¶; NYI Returns an empty SO basis set object.; * Returns an SOBasis object that actually has a single s-function; * at the origin with an exponent of 0.0 and contraction of 1.0.; * @return A new empty SOBasis object. class PreservingDict(*args, **kwargs)[source]¶; Class to store quantum chemical quantities extracted from output; files. Extends the dictionary object to (1) store key as all-caps; version of itself and (2) validate value for duplicate values for the; same key by testing which has more decimal places and whether value; the same within a plausing rounding error. Allows consistency checks; when parsing output files without loss of precision. setdefault(key, value=None)[source]¶. update(*args, **kwargs)[source]¶. class BasisSet(name, fullname=None, latex=None, citations=None, doi=None, comment=None, zeta=None, build=None)[source]¶; Specialization of QCEssential for basis sets. class Citation(doi, fullname=None, dsdbid=None, comment=None)[source]¶; Class to hold reference to a single published scientific work. class Error(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for measures of error. class Method(name, fullname=None, latex=None, citations=None, doi=None, comment=None)[source]¶; Specialization of QCEssential for quantum chemical methods. class Publication(name, fullname=None, latex=None, dsdbid=None, doi=None, comment=None, owner=None)[source]¶; Specializa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:67376,test,testing,67376,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['test'],['testing']
Testability,"bles into global space; for k, v in ref_wfn.variables().items():; core.set_variable(k, v). optstash.restore(); return ref_wfn. def run_scf_hessian(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an SCF hessian calculation. """"""; optstash = proc_util.scf_set_reference_local(name). # Bypass the scf call if a reference wavefunction is given; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = run_scf(name, **kwargs). badref = core.get_option('SCF', 'REFERENCE') in ['ROHF', 'CUHF', 'UKS']; badint = core.get_global_option('SCF_TYPE') in [ 'CD', 'OUT_OF_CORE']; if badref or badint:; raise ValidationError(""Only RHF/UHF Hessians are currently implemented. SCF_TYPE either CD or OUT_OF_CORE not supported""). if hasattr(ref_wfn, ""_disp_functor""):; disp_hess = ref_wfn._disp_functor.compute_hessian(ref_wfn.molecule(), ref_wfn); ref_wfn.set_variable(""-D Hessian"", disp_hess). H = core.scfhess(ref_wfn); ref_wfn.set_hessian(H). # Clearly, add some logic when the reach of this fn expands; ref_wfn.set_variable(""HF TOTAL HESSIAN"", H) # P::e SCF. optstash.restore(); return ref_wfn. def run_mcscf(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a multiconfigurational self-consistent-field calculation. """"""; # Make sure the molecule the user provided is the active one; mcscf_molecule = kwargs.get('molecule', core.get_active_molecule()); mcscf_molecule.update_geometry(); if 'ref_wfn' in kwargs:; raise ValidationError(""It is not possible to pass run_mcscf a reference wavefunction""); new_wfn = core.Wavefunction.build(mcscf_molecule, core.get_global_option('BASIS')). return core.mcscf(new_wfn). def run_dfmp2_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a DFMP2 gradient calculation. """"""; optstash = p4util.OptionsState(; ['DF_BASIS_SCF'],; ['DF_BASIS_MP2'],; ['SCF_TYPE']). # Alter default algorithm; if not core.has_global_option_changed('SCF_TYPE'):; core.set_global_option('SCF_TYPE', 'DF'); cor",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html:82309,log,logic,82309,psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/procrouting/proc.html,2,['log'],['logic']
Testability,"bles into global space; for k, v in ref_wfn.variables().items():; core.set_variable(k, v). optstash.restore(); return ref_wfn. def run_scf_hessian(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; an SCF hessian calculation. """"""; optstash = proc_util.scf_set_reference_local(name). # Bypass the scf call if a reference wavefunction is given; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = run_scf(name, **kwargs). badref = core.get_option('SCF', 'REFERENCE') in ['ROHF', 'CUHF', 'UKS']; badint = core.get_global_option('SCF_TYPE') in [ 'CD', 'OUT_OF_CORE']; if badref or badint:; raise ValidationError(""Only RHF/UHF Hessians are currently implemented. SCF_TYPE either CD or OUT_OF_CORE not supported""). if hasattr(ref_wfn, ""_disp_functor""):; disp_hess = ref_wfn._disp_functor.compute_hessian(ref_wfn.molecule(), ref_wfn); ref_wfn.set_variable(""-D Hessian"", disp_hess). H = core.scfhess(ref_wfn); ref_wfn.set_hessian(H). # Clearly, add some logic when the reach of this fn expands; ref_wfn.set_variable(""HF TOTAL HESSIAN"", H) # P::e SCF; ref_wfn.set_variable(""SCF TOTAL HESSIAN"", H) # P::e SCF; core.set_variable(""SCF TOTAL HESSIAN"", H) # P::e SCF. # Shove variables into global space; for k, v in ref_wfn.variables().items():; core.set_variable(k, v). optstash.restore(); return ref_wfn. def run_mcscf(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a multiconfigurational self-consistent-field calculation. """"""; # Make sure the molecule the user provided is the active one; mcscf_molecule = kwargs.get('molecule', core.get_active_molecule()); mcscf_molecule.update_geometry(); if 'ref_wfn' in kwargs:; raise ValidationError(""It is not possible to pass run_mcscf a reference wavefunction""); new_wfn = core.Wavefunction.build(mcscf_molecule, core.get_global_option('BASIS')). return core.mcscf(new_wfn). def run_dfmp2_gradient(name, **kwargs):; """"""Function encoding sequence of PSI module calls for; a DFMP2 gradient calculation. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/procrouting/proc.html:82389,log,logic,82389,psi4manual/1.5.0/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/procrouting/proc.html,2,['log'],['logic']
Testability,"bles of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, whi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:3960,test,test,3960,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"body-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. pywrap-cbs1; Various basis set extrapolation tests. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. freq-masses; check nonphysical masses possible. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. scf-cholesky-basis; incremental Cholesky filtered SCF. rasci-h2o; RASCI/6-31G** H2O Energy Point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. props4; Electrostatic potential and electric field evaluated on a grid around water. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cepa1; cc-pvdz H2O Test CEPA(1) Energy. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:2512,test,test,2512,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"bos); for interior_nbody in range(1, nb + 1):; for x in itertools.combinations(cp_combos, interior_nbody):; combo_tuple = (x, basis_tuple); vmfc_compute_list[nb].add(combo_tuple); vmfc_level_list[len(basis_tuple)].add(combo_tuple). # Build a comprehensive compute range; # * do not use list length to count number of {nb}-body computations; compute_list = {x: set() for x in nbodies}; for nb in nbodies:; compute_list[nb] |= cp_compute_list[nb]; compute_list[nb] |= nocp_compute_list[nb]; compute_list[nb] |= vmfc_compute_list[nb]. # Rearrange compute_list from key nb having values to compute all of that nb; # to key nb including values of that nb. Use for counting.; compute_list_count = {x: set() for x in nbodies}; for nb in nbodies:; for nbset in compute_list.values():; for item in nbset:; if len(item[0]) == nb:; compute_list_count[nb].add(item); if verbose >= 1:; info = ""\n"".join([f"" Number of {nb}-body computations: {len(compute_list_count[nb])}"" for nb in nbodies]); core.print_out(info + ""\n""); logger.info(info). compute_dict = {; 'all': compute_list,; 'cp': cp_compute_list,; 'nocp': nocp_compute_list,; 'vmfc_compute': vmfc_compute_list,; 'vmfc_levels': vmfc_level_list; }; return compute_dict. def assemble_nbody_components(; ptype: DriverEnum,; component_results: Dict[str, Union[float, np.ndarray]],; metadata: Dict[str, Any],; ) -> Dict[str, Any]:; """"""Assembles N-body components for a single derivative level and a single model chemistry level into interaction quantities according to requested BSSE treatment(s). Parameters; ----------; ptype; Derivative level of component results to assemble. Matters mostly for scalar vs. array and array dimensions.; component_results; Dictionary with keys ""mc_(frag, bas)"" and values e/g/H computed component results according to *ptype*.; metadata; Dictionary of N-body metadata. Items described below.; Later, assemble_nbody_components should become a class function and the below are simply class member data.; quiet : bool; See class fi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_nbody.html:19805,log,logger,19805,psi4manual/1.6.x/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_nbody.html,10,['log'],['logger']
Testability,"brary or suffix to use. --with-boost-regex[=special-lib] —; Use the Regex library from boost. It is possible to specify a certain; library for the linker e.g.,; --with-boost-regex=boost_regex-gcc-mt-d-1_33_1. --with-boost-serialization[=special-lib] —; Use the Serialization library from boost. It is possible to specify a; certain library for the linker e.g.,; --with-boost-serialization=boost_serialization-gcc-mt-d-1_33_1. --with-boost-system[=special-lib] —; Use the System library from boost. It is possible to specify a certain; library for the linker e.g.,; --with-boost-system=boost_system-gcc-mt. --with-boost-thread[=special-lib] —; Use the Thread library from boost. It is possible to specify a certain; library for the linker e.g.,; --with-boost-thread=boost_thread-gcc-mt. Step 2: Compilation; Running make (which must be GNU’s ‘make’ utility) in $objdir will compile; the PSI4 libraries and executable modules. Step 3: Testing; To execute automatically the ever-growing number of test cases after; compilation, simply execute make tests in the $objdir directory.; This will run each (relatively small) test case and report the results.; Failure of any of the test cases should be reported to the developers.; By default, any such failure will stop the testing process. If you desire; to run the entire testing suit without interruption, execute make tests; TESTFLAGS='-u -q'. Note that you must do a make testsclean in $objdir; to run the test suite again. Step 4: Installation; Once testing is complete, installation into $prefix is accomplished by; running make install in $objdir. Executable modules are installed in; $prefix/bin, include files in $prefix/include, libraries in $prefix/lib, and; basis set data and various control structures in $prefix/share. Step 5: Building Documentation; This is not recommended because all of the documentation should be; available at http://sirius.chem.vt.edu/psi4manual/latest/index.html; (link “docs” off http://www.psicode.org), and it is au",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/installfile.html:17143,test,test,17143,psi4manual/4.0b3/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html,6,['test'],"['test', 'tests']"
Testability,"bring a test to CMake’s attention. If a test needs additional files, register them in psi4/psi4/CMakeLists.txt. A few notes on test contents:. Import testing functions from utils and use Python assert: assert compare_values(expected, computed, ...).; Don’t worry about cleaning up files or resetting options. A function in psi4/tests/pytests/conftest.py does this automatically between every test.; Especially if using data or functions from outside a test, run a variety of tests at different pytest -n <N> levels to mix up test ordering. If tests fail that pass when run alone, you’ve got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. For every new test file, add pytestmark = [pytest.mark.psi, pytest.mark.api] at the top.; This ensures that every test has the psi mark and every PsiAPI test has the api mark to contrast with PSIthon tests with cli mark.; There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m <mark>; vs. ctest -L <mark>) rather than just by name (pytest -k <name_fragment>; vs. ctest -R <name_fragment>). Far more complicated logic is allowed than for; CTest: pytest -m ""dftd3 and not api and not long"".; The most important marks are “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging¶; There are many ways to run pytest, How to test a Psi4 installation, and three different copies of the test file; (i.e., psi4/tests/pytests/test_mp2.py, <objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py,; CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:12349,test,tests,12349,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,10,['test'],['tests']
Testability,"bs_components(); --------------------------; * fill in results from TROVE/trove into GRAND_NEED/cbsrec. _contract_scheme_orders(); -------------------------; * prepare arguments for xtpl fns based on desired E/D/G/H quantity. * form extrapolated values for all available E/D/G/H quantities; * return structure of extrapolated values and filled-in GRAND_NEED/cbsrec. _summary_table(); ----------------; * build string table of cbs results. * form cbs qcvars, inc'l number, E, DG, G, H as available; * form model, including detailed dict at atomicresult.extras[""cbs_record""]. * convert result to psi4.core.Matrix (non-energy). _cbs_schema_to_wfn(); --------------------; * build wfn from cbs mol and basis (always def2-svp) and module (if present); * push qcvars to P::e and wfn. * return e/g/h and wfn. """""". import math; import re; import sys; import copy; import pprint; from typing import Any, Callable, Dict, List, Optional, Tuple, Union, TYPE_CHECKING; pp = pprint.PrettyPrinter(width=120, compact=True, indent=1); import logging. import numpy as np; from pydantic import Field, validator; from qcelemental.models import AtomicResult, DriverEnum. from psi4 import core; from psi4.driver import driver_util, p4util, pp; from psi4.driver import qcdb; from psi4.driver.driver_cbs_helper import composite_procedures, register_composite_function, register_xtpl_function, xtpl_procedures # lgtm[py/unused-import]; from psi4.driver.driver_util import UpgradeHelper; from psi4.driver.p4util.exceptions import ValidationError; from psi4.driver.procrouting.interface_cfour import cfour_psivar_list; from psi4.driver.task_base import AtomicComputer, BaseComputer, EnergyGradientHessianWfnReturn. if TYPE_CHECKING:; import qcportal. logger = logging.getLogger(__name__). zeta_values = 'dtq5678'; _zeta_val2sym = {k + 2: v for k, v in enumerate(zeta_values)}; _zeta_sym2val = {v: k for k, v in _zeta_val2sym.items()}; _addlremark = {'energy': '', 'gradient': ', GRADIENT', 'hessian': ', HESSIAN'}; _f_fields = [",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs.html:4996,log,logging,4996,psi4manual/1.7.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs.html,2,['log'],['logging']
Testability,"bs_components(); --------------------------; * fill in results from TROVE/trove into GRAND_NEED/cbsrec. _contract_scheme_orders(); -------------------------; * prepare arguments for xtpl fns based on desired E/D/G/H quantity. * form extrapolated values for all available E/D/G/H quantities; * return structure of extrapolated values and filled-in GRAND_NEED/cbsrec. _summary_table(); ----------------; * build string table of cbs results. * form cbs qcvars, inc'l number, E, DG, G, H as available; * form model, including detailed dict at atomicresult.extras[""cbs_record""]. * convert result to psi4.core.Matrix (non-energy). _cbs_schema_to_wfn(); --------------------; * build wfn from cbs mol and basis (always def2-svp) and module (if present); * push qcvars to P::e and wfn. * return e/g/h and wfn. """""". import math; import re; import sys; import copy; import pprint; from typing import Any, Callable, Dict, List, Optional, Tuple, Union, TYPE_CHECKING; pp = pprint.PrettyPrinter(width=120, compact=True, indent=1); import logging. import numpy as np; try:; from pydantic.v1 import Field, validator; except ImportError:; from pydantic import Field, validator; from qcelemental.models import AtomicResult, DriverEnum. from psi4 import core; from psi4.driver import driver_util, p4util, pp; from psi4.driver import qcdb; from psi4.driver.driver_cbs_helper import composite_procedures, register_composite_function, register_xtpl_function, xtpl_procedures # lgtm[py/unused-import]; from psi4.driver.driver_util import UpgradeHelper; from psi4.driver.p4util.exceptions import ValidationError; from psi4.driver.procrouting.interface_cfour import cfour_psivar_list; from psi4.driver.task_base import AtomicComputer, BaseComputer, EnergyGradientHessianWfnReturn. if TYPE_CHECKING:; import qcportal. logger = logging.getLogger(__name__). zeta_values = 'dtq5678'; _zeta_val2sym = {k + 2: v for k, v in enumerate(zeta_values)}; _zeta_sym2val = {v: k for k, v in _zeta_val2sym.items()}; _addlremark = {'energy':",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs.html:4998,log,logging,4998,psi4manual/1.8.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs.html,2,['log'],['logging']
Testability,"bsscheme). return value. elif isinstance(valueLO, np.ndarray):. nonzero_mask = np.abs(valueHI) > 1.e-14; top = (valueHI - valueMD)[nonzero_mask]; bot = (valueMD - valueLO)[nonzero_mask]. ratio = top / bot; alpha = -1 * np.log(np.abs(ratio)); beta = top / (np.exp(-1 * alpha * zMD) * (ratio - 1)); np_value = valueHI.copy(); np_value[nonzero_mask] -= beta * np.exp(-1 * alpha * zHI); np_value[~nonzero_mask] = 0.0. if verbose > 2:; cbsscheme = f""""""\n ==> Helgaker 3-point power SCF extrapolation for method: {functionname.upper()} <==\n""""""; cbsscheme += f""""""\n LO-zeta ({zLO}) Data\n""""""; cbsscheme += nppp(valueLO); cbsscheme += f""""""\n MD-zeta ({zMD}) Data\n""""""; cbsscheme += nppp(valueMD); cbsscheme += f""""""\n HI-zeta ({zHI}) Data\n""""""; cbsscheme += nppp(valueHI). cbsscheme += f""""""\n Alpha Data\n""""""; cbsscheme += nppp(alpha); cbsscheme += f""""""\n Beta Data\n""""""; cbsscheme += nppp(beta); cbsscheme += f""""""\n Extrapolated Data\n""""""; cbsscheme += nppp(np_value); cbsscheme += ""\n""; core.print_out(cbsscheme); logger.debug(cbsscheme). ## Build and set from numpy routines; #value = core.Matrix(*valueHI.shape); #value_view = np.asarray(value); #value_view[:] = np_value; #return value. return np_value. else:; raise ValidationError(f""scf_xtpl_helgaker_3: datatype is not recognized '{type(valueLO)}'.""). [docs]; def corl_xtpl_helgaker_2(functionname: str, zLO: int, valueLO: Extrapolatable, zHI: int, valueHI: Extrapolatable, verbose: int = 1, alpha: Optional[float] = None) -> Extrapolatable:; r""""""Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by :py:func:`~psi4.driver.cbs`. Parameters; ----------; functionname; Name of the CBS component (e.g., 'MP2') used in summary printing.; zLO; Zeta number of the smaller basis set in 2-point extrapolation.; valueLO; Energy, gradient, or Hessian value at the smaller basis set in 2-point; extrapolation.; zHI; Zeta number of the larger basis set in 2-point extrapolation.; Must be `zLO + 1`.; valueHI; Energy, gradient",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs_helper.html:17278,log,logger,17278,psi4manual/1.8.x/_modules/psi4/driver/driver_cbs_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs_helper.html,6,['log'],['logger']
Testability,"bsscheme). return value. elif isinstance(valueLO, np.ndarray):. nonzero_mask = np.abs(valueHI) > 1.e-14; top = (valueHI - valueMD)[nonzero_mask]; bot = (valueMD - valueLO)[nonzero_mask]. ratio = top / bot; alpha = -1 * np.log(np.abs(ratio)); beta = top / (np.exp(-1 * alpha * zMD) * (ratio - 1)); np_value = valueHI.copy(); np_value[nonzero_mask] -= beta * np.exp(-1 * alpha * zHI); np_value[~nonzero_mask] = 0.0. if verbose > 2:; cbsscheme = f""""""\n ==> Helgaker 3-point power SCF extrapolation for method: {functionname.upper()} <==\n""""""; cbsscheme += f""""""\n LO-zeta ({zLO}) Data\n""""""; cbsscheme += nppp(valueLO); cbsscheme += f""""""\n MD-zeta ({zMD}) Data\n""""""; cbsscheme += nppp(valueMD); cbsscheme += f""""""\n HI-zeta ({zHI}) Data\n""""""; cbsscheme += nppp(valueHI). cbsscheme += f""""""\n Alpha Data\n""""""; cbsscheme += nppp(alpha); cbsscheme += f""""""\n Beta Data\n""""""; cbsscheme += nppp(beta); cbsscheme += f""""""\n Extrapolated Data\n""""""; cbsscheme += nppp(np_value); cbsscheme += ""\n""; core.print_out(cbsscheme); logger.debug(cbsscheme). ## Build and set from numpy routines; #value = core.Matrix(*valueHI.shape); #value_view = np.asarray(value); #value_view[:] = np_value; #return value. return np_value. else:; raise ValidationError(f""scf_xtpl_helgaker_3: datatype is not recognized '{type(valueLO)}'.""). [docs]def corl_xtpl_helgaker_2(functionname: str, zLO: int, valueLO: Extrapolatable, zHI: int, valueHI: Extrapolatable, verbose: int = 1, alpha: Optional[float] = None) -> Extrapolatable:; r""""""Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by :py:func:`~psi4.cbs`. Parameters; ----------; functionname; Name of the CBS component (e.g., 'MP2') used in summary printing.; zLO; Zeta number of the smaller basis set in 2-point extrapolation.; valueLO; Energy, gradient, or Hessian value at the smaller basis set in 2-point; extrapolation.; zHI; Zeta number of the larger basis set in 2-point extrapolation.; Must be `zLO + 1`.; valueHI; Energy, gradient, or Hess",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html:17196,log,logger,17196,psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html,2,['log'],['logger']
Testability,"bsscheme). return value. elif isinstance(valueLO, np.ndarray):. nonzero_mask = np.abs(valueHI) > 1.e-14; top = (valueHI - valueMD)[nonzero_mask]; bot = (valueMD - valueLO)[nonzero_mask]. ratio = top / bot; alpha = -1 * np.log(np.abs(ratio)); beta = top / (np.exp(-1 * alpha * zMD) * (ratio - 1)); np_value = valueHI.copy(); np_value[nonzero_mask] -= beta * np.exp(-1 * alpha * zHI); np_value[~nonzero_mask] = 0.0. if verbose > 2:; cbsscheme = f""""""\n ==> Helgaker 3-point power SCF extrapolation for method: {functionname.upper()} <==\n""""""; cbsscheme += f""""""\n LO-zeta ({zLO}) Data\n""""""; cbsscheme += nppp(valueLO); cbsscheme += f""""""\n MD-zeta ({zMD}) Data\n""""""; cbsscheme += nppp(valueMD); cbsscheme += f""""""\n HI-zeta ({zHI}) Data\n""""""; cbsscheme += nppp(valueHI). cbsscheme += f""""""\n Alpha Data\n""""""; cbsscheme += nppp(alpha); cbsscheme += f""""""\n Beta Data\n""""""; cbsscheme += nppp(beta); cbsscheme += f""""""\n Extrapolated Data\n""""""; cbsscheme += nppp(np_value); cbsscheme += ""\n""; core.print_out(cbsscheme); logger.debug(cbsscheme). ## Build and set from numpy routines; #value = core.Matrix(*valueHI.shape); #value_view = np.asarray(value); #value_view[:] = np_value; #return value. return np_value. else:; raise ValidationError(f""scf_xtpl_helgaker_3: datatype is not recognized '{type(valueLO)}'.""). [docs]def corl_xtpl_helgaker_2(functionname: str, zLO: int, valueLO: Extrapolatable, zHI: int, valueHI: Extrapolatable, verbose: int = 1, alpha: Optional[float] = None) -> Extrapolatable:; r""""""Extrapolation scheme for correlation energies with two adjacent zeta-level bases.; Used by :py:func:`~psi4.driver.cbs`. Parameters; ----------; functionname; Name of the CBS component (e.g., 'MP2') used in summary printing.; zLO; Zeta number of the smaller basis set in 2-point extrapolation.; valueLO; Energy, gradient, or Hessian value at the smaller basis set in 2-point; extrapolation.; zHI; Zeta number of the larger basis set in 2-point extrapolation.; Must be `zLO + 1`.; valueHI; Energy, gradient, ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs_helper.html:17266,log,logger,17266,psi4manual/1.7.x/_modules/psi4/driver/driver_cbs_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs_helper.html,2,['log'],['logger']
Testability,"building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_faq.html:4041,log,logo,4041,psi4manual/1.6.x/build_faq.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_faq.html,1,['log'],['logo']
Testability,"buntu shell on Windows), one can use the gcc; compiler installed alongside psi4 itself in the Conda distribution; or environment (below, $PSI4CONDA). On Mac, one must use; libc++.so (not libstdc++.so), and this can be accomplished by; installing XCode from the App Store that provides clang and; clang++ compilers. Check environment:. # yes, the following returns a blank line. yes, LD_LIBRARY_PATH irrelevant; >>> echo $PYTHONHOME $PYTHONPATH $DYLD_LIBRARY_PATH $PSIDATADIR. >>> which python psi4 g++ gfortran # Linux; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/gcc++; $PSI4CONDA/bin/gfortran; >>> which python psi4 g++ gfortran clang++ # Mac; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/g++; $PSI4CONDA/bin/gfortran; /usr/bin/clang++. >>> which cmake; $PSI4CONDA/bin/cmake; # if above empty, ``conda install cmake``. Create and compile plugin:. >>> psi4 --plugin-name testplugin; -- Creating ""testplugin"" with ""basic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencie",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/plugins-1.html:3311,test,testplugin,3311,psi4manual/1.4.0/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/plugins-1.html,9,['test'],['testplugin']
Testability,"but is sufficient to hold at least two copies of an oovv quantity in-core. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. sapt-ecp; sapt0 of charged system in ECP basis set. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. casscf-sp; CASSCF/6-31G** energy point. mbis-3; MBIS calculation on OH radical. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ao-casscf-sp; CASSCF/6-31G** energy point. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. fnocc6; Test method/basis with disk_df. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc36; CC2(RHF)/cc-pV",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:38738,test,test,38738,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make or cmake --build ., whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir based on changes to the PSI4 repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; objdir/CMakeCache.txt. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; >>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example] . Run tests in parallel with -j flag. For maximum parallelism (not Windows): ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 5 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that continuous integration checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. Pytest has similar commands:. Run tests in parallel with -n flag (if Python package pytest-xdist installed). For maximum parallelism: pytest -n auto; Run full test su",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:52526,test,tests,52526,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,10,['test'],"['test', 'tests']"
Testability,"but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make or cmake --build ., whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir based on changes to the PSI4 repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; objdir/CMakeCache.txt. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; >>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example]. Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 5 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. Pytest has similar commands; * Run tests in parallel with -n flag (if extenstion pytest-xdist installed). For maximum parallelism: pytest -n`getconf _NPROCESSORS_ONLN`; * Run full test suite: pyt",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:52340,test,tests,52340,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,8,['test'],"['test', 'tests']"
Testability,"buteError:; raise ValidationError('Deformation and counterpoise correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_CPRLX; RXNM = database.RXNM_CPRLX; elif no.match(str(db_cp)):; try:; database.ACTV_RLX; except AttributeError:; raise ValidationError('Deformation correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_RLX; elif no.match(str(db_rlxd)):; pass; else:; raise ValidationError('Deformation correction mode \'%s\' not valid.' % (db_rlxd)). # Option zero-point-correction- whether for thermochem databases jobs are corrected by zpe; db_zpe = 'no'; if 'zpe' in kwargs:; db_zpe = kwargs['zpe']. if yes.match(str(db_zpe)):; raise ValidationError('Zero-point-correction mode \'yes\' not yet implemented.'); elif no.match(str(db_zpe)):; pass; else:; raise ValidationError('Zero-point-correction \'mode\' %s not valid.' % (db_zpe)). # Option benchmark- whether error statistics computed wrt alternate reference energies; db_benchmark = 'default'; if 'benchmark' in kwargs:; db_benchmark = kwargs['benchmark']. if (db_benchmark.lower() == 'default'):; pass; else:; BIND = getattr_ignorecase(database, 'BIND_' + db_benchmark); if BIND is None:; raise ValidationError('Special benchmark \'%s\' not available for database %s.' % (db_benchmark, db_name)). # Option tabulate- whether tables of variables other than primary energy method are formed; db_tabulate = []; if 'tabulate' in kwargs:; db_tabulate = kwargs['tabulate']. # Option subset- whether all of the database or just a portion is run; db_subset = HRXN; if 'subset' in kwargs:; db_subset = kwargs['subset']. if isinstance(db_subset, basestring):; if (db_subset.lower() == 'small'):; try:; database.HRXN_SM; except AttributeError:; raise ValidationError('Special subset \'small\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_SM; elif (db_subset.lower() == 'large'):; try:; database.HRXN_LG; except AttributeError:; raise ValidationError(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html:34657,benchmark,benchmark,34657,psi4manual/4.0b3/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html,12,['benchmark'],['benchmark']
Testability,"buteError:; raise ValidationError('Deformation and counterpoise correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_CPRLX; RXNM = database.RXNM_CPRLX; elif no.match(str(db_cp)):; try:; database.ACTV_RLX; except AttributeError:; raise ValidationError('Deformation correction mode \'yes\' invalid for database %s.' % (db_name)); else:; ACTV = database.ACTV_RLX; elif no.match(str(db_rlxd)):; pass; else:; raise ValidationError('Deformation correction mode \'%s\' not valid.' % (db_rlxd)). # Option zero-point-correction- whether for thermochem databases jobs are corrected by zpe; db_zpe = 'no'; if 'zpe' in kwargs:; db_zpe = kwargs['zpe']. if yes.match(str(db_zpe)):; raise ValidationError('Zero-point-correction mode \'yes\' not yet implemented.'); elif no.match(str(db_zpe)):; pass; else:; raise ValidationError('Zero-point-correction \'mode\' %s not valid.' % (db_zpe)). # Option benchmark- whether error statistics computed wrt alternate reference energies; db_benchmark = 'default'; if 'benchmark' in kwargs:; db_benchmark = kwargs['benchmark']. if (db_benchmark.lower() == 'default'):; pass; else:; BIND = p4util.getattr_ignorecase(database, 'BIND_' + db_benchmark); if BIND is None:; raise ValidationError('Special benchmark \'%s\' not available for database %s.' % (db_benchmark, db_name)). # Option tabulate- whether tables of variables other than primary energy method are formed; db_tabulate = []; if 'tabulate' in kwargs:; db_tabulate = kwargs['tabulate']. # Option subset- whether all of the database or just a portion is run; db_subset = HRXN; if 'subset' in kwargs:; db_subset = kwargs['subset']. if isinstance(db_subset, basestring):; if (db_subset.lower() == 'small'):; try:; database.HRXN_SM; except AttributeError:; raise ValidationError('Special subset \'small\' not available for database %s.' % (db_name)); else:; HRXN = database.HRXN_SM; elif (db_subset.lower() == 'large'):; try:; database.HRXN_LG; except AttributeError:; raise Validatio",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:35374,benchmark,benchmark,35374,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,6,['benchmark'],['benchmark']
Testability,"by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-response2; Compute the dipole polarizability for water with custom basis set. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. nbody-he-4b; MP2/aug-cc-pvDZ many body energies of an arbitrary Helium complex, addressing 4-body formulas. dfremp-2; density fitted REMP/cc-pVDZ energies for the CH3 radical. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfcasscf-sp; CASSCF/6-31G** energy point. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. scf-level-shift-rohf; SCF level shift on an ROHF computation. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, m",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:2734,test,test,2734,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"by default [1 - 0.1 * x for x in range(11)].; LUMO_occs (Optional[List]) – Occupations to step through for anion, by default [1 - 0.1 * x for x in range(11)].; HOMO (Optional[int]) – Index of HOMO.; LUMO (Optional[int]) – Index of LUMO.; frac_diis (Optional[bool]) – Do use DIIS for non-1.0-occupied points?; neutral_guess (Optional[bool]) – Do use neutral orbitals as guess for the anion?; hf_guess (Optional[bool]) – Do use UHF guess before UKS?; continuous_guess (Optional[bool]) – Do carry along guess rather than reguessing at each occupation?; filename (Optional[str]) – Result filename, if not name of molecule. Returns:; Dictionary associating SCF energies with occupations. Return type:; Dict[float, float]. psi4.driver.frac.frac_nuke(name, **kwargs)[source]¶; Pull all the electrons out, one at a time; :rtype: Dict[float, float]. Parameters:; name (str | Callable) – . Return type:; Dict[float, float]. psi4.set_output_file(ofile, append=False, *, loglevel=20, execute=True, print_header=None, inherit_loglevel=False)[source]¶; Set the name for output and logging files. Parameters:. ofile (str) – Name of ASCII output file including extension. The logging file is set from this string with a .log extension.; append (bool) – Do append to the output and logging files rather than (the default) truncating them?; loglevel (int) – The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute (bool) – Do set ofile via psi4.core.set_output_file() and add the logger, rather than just returning ofile path.; print_header (Optional[bool]) – Whether to write the Psi4 header to the ASCII output file. (Only applicable if execute=True.) By default,; writes if file is truncated (append=False) but not if appended.; inherit_loglevel (bool) – If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns:; Path(ofile). Return type:; Path. Notes; This psi4.set_output_file() command calls psi4.core",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/external_apis.html:5488,log,loglevel,5488,psi4manual/1.9.x/external_apis.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/external_apis.html,2,['log'],"['logging', 'loglevel']"
Testability,"by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. Pytest has similar commands; * Run tests in parallel with -n flag (if extenstion pytest-xdist installed). For maximum parallelism: pytest -n`getconf _NPROCESSORS_ONLN`; * Run full test suite: pytest; * Run the quick tests: pytest -m quick; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: pytest -m smoke; * Run tests matching by name: pytest -k testname; * Run tests excluding those by name: pytest -k ""not testname""; * Run tests matching by label: pytest -m testlabel; * Run tests excluding those by label: pytest -m ""not testlabel"". How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c """,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:54053,test,tests,54053,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['test'],['tests']
Testability,"c densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfcasscf-sp; CASSCF/6-31G** energy point. cc35; CC3(ROHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the n",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:17250,test,testing,17250,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['testing']
Testability,"c gradients. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mp2_1; All-electron MP2 6-31G** geometry optimization of water. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. dcft1; DCFT-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. Previous topic; Test Suite and Sample Inputs; Next topic; Basis Sets by Element; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html:16516,test,test,16516,psi4manual/4.0b2/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html,2,['test'],['test']
Testability,"c single-geometry computations. CSXError(msg); Error called when CSX generation fails. ConvergenceError(eqn_description, iteration); Error called for problems with converging an iterative method. Dftd3Error(msg). EmpiricalDispersion(*[, name_hint, ...]); Lightweight unification of empirical dispersion calculation modes. ManagedMethodError(circs). MissingMethodError(msg); Error called when method not available. OptimizationConvergenceError(...); Error called for problems with geometry optimizer. ParsingError(msg); Error called for problems parsing a text file. PastureRequiredError(option); Error called when the specified value of option requires some module(s) from Psi4Pasture, but could not be imported. PsiException; Error class for Psi. PsiImportError(msg); Error called for problems import python dependencies. QMMM(); Hold charges and psi4.core.ExternalPotential. QMMMbohr(); Hold charges and psi4.core.ExternalPotential. SCFConvergenceError(eqn_description, ...); Error called for problems with SCF iterations. TDSCFConvergenceError(iteration, wfn, what, ...); Error called for problems with TDSCF iterations. Table([rows, row_label_width, ...]); Class defining a flexible Table object for storing data. TestComparisonError(msg); Error called when a test case fails due to a failed compare_values() call. UpgradeHelper(old, new, version, elaboration); Error called on previously valid syntax that now isn't and a simple syntax transition is possible. ValidationError(msg); Error called for problems with the input file. Class Inheritance Diagram¶. table of contents. PSI4 API: Linking C++ and Python; psi4.core Module; Functions; Classes; Class Inheritance Diagram. psi4.driver Package; Functions; Classes; Class Inheritance Diagram. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/psi4api.html:23062,test,test,23062,psi4manual/1.6.x/psi4api.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/psi4api.html,1,['test'],['test']
Testability,"c-pVDZ energy for the H2O molecule. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc54; CCSD dipole with user-specified basis set. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. fnocc7; Test fnocc with linear dependencies. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. scf7; Tests SCF gradient in the presence of a dipole field. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. mints-helper; A general test of the MintsHelper function. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). scf-upcast-custom-basis; test scf castup with custom basis sets. dct10; The multiple guesses for DC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:20516,test,test,20516,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"c-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. fci-coverage; 6-31G H2O Test for coverage. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. tdscf-7; TD-HF test variable access. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. remp-energy2; integral conventional unrestricted REMP/cc-pVDZ energies for the H2O+ molec",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:27378,test,test,27378,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"c-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G g",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:30774,test,test,30774,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"c-pVDZ gradients for the H2O molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy w",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/testsuite-1.html:9087,test,test,9087,psi4manual/1.1.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/testsuite-1.html,4,['test'],['test']
Testability,"c-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-grac; Gradient regularized asymptotic correction (GRAC) test. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. scf-auto-cholesky; Cholesky filter a complete basis. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). pywrap-db1; Database calculation, so",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:4692,test,test,4692,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"c.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""; Module with PsiAPI helpers for PSIthon `{...}` syntax.; Also, many Python extensions to core classes:. - core (variable-related, gradient, python option),; - Wavefunction (variable-related, freq, Lagrangian, constructor, scratch file, serialization),; - Matrix (doublet, triplet),; - BasisSet (constructor); - JK (constructor); - VBase (grid); - OEProp (avail prop); """""". __all__ = [; ""basis_helper"",; ""pcm_helper"",; ""plump_qcvar"",; ""set_options"",; ""set_module_options"",; ]. import math; import os; import re; import uuid; import warnings; from collections import Counter; from itertools import product; from pathlib import Path; from tempfile import NamedTemporaryFile; from typing import Any, Callable, Dict, List, Optional, Tuple, Union. import numpy as np; import qcelemental as qcel. from psi4 import core, extras. from .. import qcdb; from . import optproc; from .exceptions import TestComparisonError, UpgradeHelper, ValidationError. ## Python basis helps. @staticmethod; def _pybuild_basis(; mol: core.Molecule,; key: Optional[str] = None,; target: Optional[Union[str, Callable]] = None,; fitrole: str = ""ORBITAL"",; other: Optional[Union[str, Callable]] = None,; puream: int = -1,; return_atomlist: bool = False,; *,; quiet: bool = False,; ) -> Union[core.BasisSet, List[core.BasisSet]]:; """"""Build a primary or auxiliary basis set. Parameters; ----------; mol; Molecule for which to build the basis set instance.; key; {'BASIS', 'ORBITAL', 'DF_BASIS_SCF', 'DF_BASIS_MP2', 'DF_BASIS_CC', 'BASIS_RELATIVISTIC', 'DF_BASIS_SAD'}; Label (effectively Psi4 keyword) to append the basis on the molecule.; The primary basis set is indicated by any of values None or; ``""ORBITAL""`` or ``""BASIS""``.; target; Defines the basis set to be constructed. Can be a string (naming a; basis file) or a callable (providing shells or multiple basis files).; For auxiliary bases to be built entirely from primary default",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/_modules/psi4/driver/p4util/python_helpers.html:2036,Test,TestComparisonError,2036,psi4manual/master/_modules/psi4/driver/p4util/python_helpers.html,https://psicode.org,https://psicode.org/psi4manual/master/_modules/psi4/driver/p4util/python_helpers.html,1,['Test'],['TestComparisonError']
Testability,"c11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. cbs-xtpl-func; optimization with method defined via cbs. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. fci-h2o; 6-31G H2O Test FCI Energy Point. opt11; Transition-state optimizations of HOOH to both torsional transition states. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. fsap",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:41742,test,tests,41742,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['tests']
Testability,"c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:24519,test,test,24519,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"c4 and not stdsuite""; Run tests and see test names: pytest -v; Run tests and see test names and sometimes more verbose errors: pytest -vv. How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:54932,test,test,54932,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,10,['test'],['test']
Testability,"c51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cubeprop; RHF orbitals and density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:37609,test,tests,37609,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['tests']
Testability,"c[i]. if geom_re.match(line):; c1, c2, c3, c4, c5, c6 = geom_re.match(line).groups(); r1, r2, r3, r4, r5, r6 = geom_re.match(line).groups(); test = compare_strings(r1, c1) and compare_integers(r2, c2) and compare_integers(r3, c3) and compare_values(r4, c4, high_accuracy) and compare_values(r5, c5, high_accuracy) and compare_values(r6, c6, high_accuracy). elif basis_header_re.match(line):; c1, c2, c3 = basis_header_re.match(line).groups(); r1, r2, r3 = basis_header_re.match(ref[i]).groups(); test = compare_strings(r1,c1) and compare_integers(r2,c2) and compare_values(r3,c3,3). elif s1_re.match(line):; c1, c2 = s1_re.match(line).groups(); r1, r2 = s1_re.match(ref[i]).groups(); test = compare_values(r1, c1, high_accuracy) and compare_values(r2, c2, high_accuracy). elif sym_re.match(line):; c = sym_re.match(line).group(1); r = sym_re.match(ref[i]).group(1); test = compare_strings(r, c, f'text line: {line}'). elif energy_re.match(line):; c = energy_re.match(line).group(1); r = energy_re.match(ref[i]).group(1); test = compare_values(r, c, high_accuracy, f'float value: {line}'). elif spin_re.match(line):; c = spin_re.match(line).group(1); r = spin_re.match(ref[i]).group(1); test = compare_strings(r, c, f'text line: {line}'). elif occ_re.match(line):; c = occ_re.match(line).group(1); r = occ_re.match(ref[i]).group(1); test = compare_values(r, c, high_accuracy, f'float value: {line}'). elif s2_re.match(line):; c1, c2 = s2_re.match(line).groups(); r1, r2 = s2_re.match(line).groups(); test = compare_integers(r1, c1, f'int value: {line}') and compare_values(r2, c2, high_accuracy, f'float value: {line}'). else:; test = compare_strings(line, ref[i]). tests.append(test). return compare_integers(True, all(tests), label). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.10a1.dev61;  · . PSI4. Module code; psi4.driver.p4util.fchk. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/_modules/psi4/driver/p4util/fchk.html:8195,test,test,8195,psi4manual/master/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/master/_modules/psi4/driver/p4util/fchk.html,16,['test'],"['test', 'tests']"
Testability,"cae0546b6ae4f4f2cf28482cd164c8323cc6.; Reference interaction energies taken from J. Chem. Phys. 154, 134106 (2021) https://doi.org/10.1063/5.0043793.; Variant with ghosted hydrogen as midbonds in the COM. no | name | subset. 1 | CN - He | DD; 2 | NH - He | DD; 3 | C2H3 - C2H4 | DD; 4 | O2 - H2 | DD; 5 | NH - Ar | DD; 6 | CN - Ar | DD; 7 | O2 - N2 | DD; 8 | H2O - O2(sp) | DD; 9 | O2 - O2 | DD. 10 | NH - NH | ED; 11 | CH2O - NH2 | ED; 12 | H2O - Na | ED; 13 | H2O - OH | ED; 14 | H2O - O2H | ED; 15 | Li - NH3(gm) | ED; 16 | Li - O2 | MX; 17 | CN - H2 | MX; 18 | Li - NH3(lm) | MX; 19 | H2O - O2(gm) | MX; 20 | Na - Li | MX; 21 | CO2 - O2 | MX; 22 | C2H3 - CO2 | MX; 23 | He* - He* | MX; 24 | HF - CO+ | MX. cp 'on'; subset; - 'DD' dispersion-dominated systems; - 'ED' electrostatically-dominated systems; - 'MX' mixed-interaction systems. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. HTBH¶. Database (Truhlar) of hydrogen-transfer barrier height reactions.; Geometries from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/raw_geom.cgi (broken link).; Reference energies from Zhao et al. JPCA, 109 2012-2018 (2005) doi: 10.1021/jp045141s [in supporting information]. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'S220' Jurecka et al. PCCP 8 19",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_available_databases.html:3404,benchmark,benchmark,3404,psi4manual/1.8.x/autodoc_available_databases.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_available_databases.html,2,['benchmark'],['benchmark']
Testability,"cae0546b6ae4f4f2cf28482cd164c8323cc6.; Reference interaction energies taken from J. Chem. Phys. 154, 134106 (2021) https://doi.org/10.1063/5.0043793.; Variant with ghosted hydrogen as midbonds in the COM. no | name | subset. 1 | CN - He | DD; 2 | NH - He | DD; 3 | C2H3 - C2H4 | DD; 4 | O2 - H2 | DD; 5 | NH - Ar | DD; 6 | CN - Ar | DD; 7 | O2 - N2 | DD; 8 | H2O - O2(sp) | DD; 9 | O2 - O2 | DD. 10 | NH - NH | ED; 11 | CH2O - NH2 | ED; 12 | H2O - Na | ED; 13 | H2O - OH | ED; 14 | H2O - O2H | ED; 15 | Li - NH3(gm) | ED; 16 | Li - O2 | MX; 17 | CN - H2 | MX; 18 | Li - NH3(lm) | MX; 19 | H2O - O2(gm) | MX; 20 | Na - Li | MX; 21 | CO2 - O2 | MX; 22 | C2H3 - CO2 | MX; 23 | He* - He* | MX; 24 | HF - CO+ | MX. cp 'on'; subset; - 'DD' dispersion-dominated systems; - 'ED' electrostatically-dominated systems; - 'MX' mixed-interaction systems. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. S66by8¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference interaction energies from Rezac et al. JCTC 7 2427 (2011).; Note that the S66by8-N-1.0 members are not quite the same geometries as S66-N. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HB' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve hydrogen-bonded systems; 'MX' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve mixed-influence systems; 'DD' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve dispersion-dominated systems. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLO",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_available_databases-1.html:12374,benchmark,benchmark,12374,psi4manual/1.5.0/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_available_databases-1.html,4,['benchmark'],['benchmark']
Testability,"calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dft-bench-interaction; functionals + DFTD3 interaction energies vs. other programs. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. dfmp2-ecp; He-Ne dimer MP2 energies with ECP, Ne electrons correlated then frozen. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc7; Tests CCENERGY’s CCSD g",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:7179,test,tested,7179,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['test'],['tested']
Testability,"calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:19955,test,test,19955,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:19075,test,test,19075,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"cally if the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020. Type: boolean; Default: true. Expert¶. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. USE_DF_INTS¶. Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. table of contents. FNOCC; General; ACTIVE_NAT_ORBS; BRUECKNER_MAXITER; CC_SCALE_OS; CC_SCALE_SS; CC_TIMINGS; CEPA_NO_SINGLES; CHOLESKY_TOLERANCE; DFCC; DF_BASIS_CC; DIIS_MAX_VECS; DIPMOM; E_CONVERGENCE; MAXITER; MP2_SCALE_OS; MP2_SCALE_SS; NAT_ORBS; OCC_PERCENTAGE; OCC_TOLERANCE; R_CONVERGENCE; SCS_CCSD; SCS_CEPA; SCS_MP2; TRIPLES_LOW_MEMORY. Expert; CEPA_LEVEL; COMPUTE_MP4_TRIPLES; COMPUTE_TRIPLES; RUN_CCSD; RUN_CEPA; RUN_MP2; RUN_MP3; RUN_MP4; USE_DF_INTS. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Appendices; Keywords by Module; FNOCC. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__fnocc-1.html:4490,test,testing,4490,psi4manual/1.4.0/autodir_options_c/module__fnocc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodir_options_c/module__fnocc-1.html,4,['test'],['testing']
Testability,"cally if the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020. Type: boolean; Default: true. Expert¶. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. USE_DF_INTS¶. Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. table of contents. FNOCC; General; ACTIVE_NAT_ORBS; BRUECKNER_MAXITER; CC_SCALE_OS; CC_SCALE_SS; CC_TIMINGS; CEPA_NO_SINGLES; CHOLESKY_TOLERANCE; DFCC; DF_BASIS_CC; DIIS_MAX_VECS; DIPMOM; E_CONVERGENCE; MAXITER; MP2_SCALE_OS; MP2_SCALE_SS; NAT_ORBS; OCC_PERCENTAGE; OCC_TOLERANCE; R_CONVERGENCE; SCS_CCSD; SCS_CEPA; SCS_MP2; TRIPLES_LOW_MEMORY. Expert; CEPA_LEVEL; COMPUTE_MP4_TRIPLES; COMPUTE_TRIPLES; RUN_CCSD; RUN_CEPA; RUN_MP2; RUN_MP3; RUN_MP4; USE_DF_INTS. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Keywords by Module; FNOCC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__fnocc-1.html:4490,test,testing,4490,psi4manual/1.5.0/autodir_options_c/module__fnocc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodir_options_c/module__fnocc-1.html,4,['test'],['testing']
Testability,"can be input with explicit angular momentum format. mbis-3; MBIS calculation on OH radical. dfccsdat2; DF-A-CCSD(T) cc-pVDZ energy for the NH molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. dfccsdt2; DF-CCSD(T) cc-pVDZ energy for the NH molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfremp-2; density fitted REMP/cc-pVDZ energies for the CH3 radical. mints-helper; A general test of the MintsHelper function. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. mp2-h; check that methods can act on single atom. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. cdremp-1; Cholesky decomposed REMP/cc-pVDZ energies for the CO2 molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). tdscf-6; td-camb3lyp with DiskDF and method/basis specification. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. casscf-sp; CASSCF/6-31G** energy point. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-func; optimization with method defined via cbs. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. scf-occ; force occupations i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:33850,test,test,33850,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"can't encode character '\u0336' in position 3: character maps to <undefined>; return ""~"" + text + ""~""; else:; return ''.join(itertools.chain.from_iterable(zip(text, itertools.repeat('\u0336')))). if request is None:; return [(k if v else strike(k)) for k, v in sorted(_addons_.items())]; return _addons_[request.lower()]. # Testing; def test(extent: str = ""full"", extras: List = None) -> int:; """"""Runs a test suite through pytest. Parameters; ----------; extent; {'smoke', 'quick', 'full', 'long'}; All choices are defined, but choices may be redundant in some projects. * _smoke_ will be minimal ""is-working?"" test(s).; * _quick_ will be as much coverage as can be got quickly, approx. 1/3 tests.; * _full_ will be the whole test suite, less some exceedingly long outliers.; * _long_ will be the whole test suite.; extras; Additional arguments to pass to `pytest`. Returns; -------; int; Return code from `pytest.main()`. 0 for pass, 1 for fail. """"""; try:; import pytest; except ImportError:; raise RuntimeError('Testing module `pytest` is not installed. Run `conda install pytest`'); abs_test_dir = os.path.sep.join([os.path.abspath(os.path.dirname(__file__)), ""tests""]). command = ['-rws', '-v', '--color', 'yes']; if extent.lower() == 'smoke':; command.extend(['-m', 'smoke']); elif extent.lower() == 'quick':; command.extend(['-m', 'quick or smoke']); elif extent.lower() == 'full':; command.extend(['-m', 'not long']); elif extent.lower() == 'long':; pass; if extras is not None:; command.extend(extras); command.extend(['--capture=sys', abs_test_dir]). retcode = pytest.main(command); return retcode. [docs]; def set_output_file(; ofile: str,; append: bool = False,; *,; loglevel: int = 20,; execute: bool = True,; print_header: Optional[bool] = None,; inherit_loglevel: bool = False) -> Path:; """"""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html:7039,Test,Testing,7039,psi4manual/1.9.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html,2,['Test'],['Testing']
Testability,"can't encode character '\u0336' in position 3: character maps to <undefined>; return ""~"" + text + ""~""; else:; return ''.join(itertools.chain.from_iterable(zip(text, itertools.repeat('\u0336')))). if request is None:; return [(k if v else strike(k)) for k, v in sorted(_addons_.items())]; return _addons_[request.lower()]. # Testing; def test(extent: str = ""full"", extras: List = None) -> int:; """"""Runs a test suite through pytest. Parameters; ----------; extent; {'smoke', 'quick', 'full', 'long'}; All choices are defined, but choices may be redundant in some projects. * _smoke_ will be minimal ""is-working?"" test(s).; * _quick_ will be as much coverage as can be got quickly, approx. 1/3 tests.; * _full_ will be the whole test suite, less some exceedingly long outliers.; * _long_ will be the whole test suite.; extras; Additional arguments to pass to `pytest`. Returns; -------; int; Return code from `pytest.main()`. 0 for pass, 1 for fail. """"""; try:; import pytest; except ImportError:; raise RuntimeError('Testing module `pytest` is not installed. Run `conda install pytest`'); abs_test_dir = os.path.sep.join([os.path.abspath(os.path.dirname(__file__)), ""tests""]). command = ['-rws', '-v']; if extent.lower() == 'smoke':; command.extend(['-m', 'smoke']); elif extent.lower() == 'quick':; command.extend(['-m', 'quick or smoke']); elif extent.lower() == 'full':; command.extend(['-m', 'not long']); elif extent.lower() == 'long':; pass; if extras is not None:; command.extend(extras); command.extend(['--capture=sys', abs_test_dir]). retcode = pytest.main(command); return retcode. [docs]; def set_output_file(; ofile: str,; append: bool = False,; *,; loglevel: int = 20,; execute: bool = True,; print_header: Optional[bool] = None,; inherit_loglevel: bool = False) -> Path:; """"""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html:7006,Test,Testing,7006,psi4manual/1.8.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html,1,['Test'],['Testing']
Testability,"caps; according to psi4/media/README.md.; html: <span style=""font-family: Optima, sans-serif; color: #273896;"">P<span style=""font-size: 82%;"">SI</span>4</span>. as Psi4 with “si” in generated small caps; html: <span style=""font-variant: small-caps;"">Psi4</span>. as Psi4 with “si” in lowercase; as psi4 in code; NOT PSI4 or PSI. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI“; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set PSIDATADIR and why; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:41894,test,test,41894,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,2,['test'],['test']
Testability,"cartesian basis set. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. scf-level-shift-cuhf; SCF level shift on a CUHF computation. cubeprop; RHF orbitals and density for water. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. fsapt-ext-abc2; FSAPT with external charge on dimer. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. scf-response3; UHF Dipole Polarizability Test. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc36; CC2(RHF)/cc-pVDZ energy of H2O. opt11; Transition-state optimizations of HOOH to both torsional transition states. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. sapt11; sapt example with orbital freezing with",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:11765,test,test,11765,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"case is avoided. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-pt2; Mk-MRPT2 single point. F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. dft1-alt; DFT Functional Test. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. plugin_test_matrix; Plugin_test_matrix test input. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Z-matrix input. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. pywrap_cbs1; Various basis set extrapolatio",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html:2891,test,test,2891,psi4manual/4.0b2/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html,4,['test'],['test']
Testability,"case, from 10.1063/1.3304922. scf-response2; Compute the dipole polarizability for water with custom basis set. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. cisd-sp; 6-31G** H2O Test CISD Energy Point. tdscf-7; TD-HF test variable access. mbis-2; MBIS calculation on OH- (Expanded Arrays). sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. mints3; Test individual integral objects for correctness. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. pubchem2; Superficial test of PubChem interface. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. matrix2; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating. extern2; External potential calculation invo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:6063,test,test,6063,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"cation. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cisd-sp; 6-31G** H2O Test CISD Energy Point. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/testsuite-1.html:23687,test,test,23687,psi4manual/1.1.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/testsuite-1.html,4,['test'],['test']
Testability,"cations of ghost atoms in a manual counterpoise correction. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. sad-scf-type; Test SAD SCF guesses on noble gas atom. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. cc17; Single point energies of multiple excited states with EOM-CCSD. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, sc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:24245,test,test,24245,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,8,['test'],['test']
Testability,"cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:16005,test,test,16005,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,8,['test'],['test']
Testability,"cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. soscf1; Second-order SCF convergnece: Benzene. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cubeprop; RHF orbitals and density for water. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a mi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:16338,test,test,16338,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy('rhf'). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be very descriptive since it is inlined into the manual (unless !nosample is present in this comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/util.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/add_tests-1.html:2787,test,tests,2787,psi4manual/1.3.2/add_tests-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/add_tests-1.html,12,['test'],"['test', 'tests']"
Testability,"cc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. mrcc1; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. pywrap_db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. plugin_libfock; LibFock test input. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html:5015,test,test,5015,psi4manual/4.0b2/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html,4,['test'],['test']
Testability,"cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/testsuite-1.html:9345,test,test,9345,psi4manual/1.1.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/testsuite-1.html,4,['test'],['test']
Testability,"ccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc51; EOM-CC3/cc-pVTZ on H2O. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc54; CCSD dipole with user-specified basis set. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:10386,test,test,10386,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,8,['test'],['test']
Testability,"ce for iterative triples excitations?. Type: boolean; Default: false. TRIPLES_IABC_TYPE (DFOCC)¶DFOCC — The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC)¶FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020. Type: boolean; Default: true. TURN_ON_ACTV (MCSCF)¶MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF)¶SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UPDATE (DETCI)¶DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC)¶FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC)¶PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC)¶PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI)¶DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM)¶CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM)¶CCEOM — Vectors stored per root. Type: integer; Default: 12. WABEI_LOWDISK (CCHBAR)¶CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Default: fal",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:228346,test,testing,228346,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,8,['test'],['testing']
Testability,"ce has %d entries in irrep %d, but the computed vector has %d\n."" % (expected.dim(irrep), irrep, computed.dim(irrep))); raise TestComparisonError(message); dim = expected.dim(irrep); failed = 0; for entry in range(dim):; if(abs(expected.get(irrep, entry) - computed.get(irrep, entry)) > 10 ** (-digits)):; failed = 1; break. if(failed):; core.print_out(""The computed vector\n""); computed.print_out(); core.print_out(""The reference vector\n""); expected.print_out(); message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed.get(irrep, entry), expected.get(irrep, entry))); raise TestComparisonError(message); success(label); return True. [docs]def compare_arrays(expected, computed, digits, label):; """"""Function to compare two numpy arrays. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. """""". try:; shape1 = expected.shape; shape2 = computed.shape; except:; raise TestComparisonError(""Input objects do not have a shape attribute.""). if shape1 != shape2:; TestComparisonError(""Input shapes do not match.""). tol = 10 ** (-digits); if not np.allclose(expected, computed, atol=tol):; message = ""\tArray difference norm is %12.6f."" % np.linalg.norm(expected - computed); raise TestComparisonError(message); success(label); return True. [docs]def compare_cubes(expected, computed, label):; """"""Function to compare two cube files. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; # Skip the first six elemets which are just labels; evec = [float(k) for k in expected.split()[6:]]; cvec = [float(k) for k in computed.split()[6:]]; if len(evec) == len(cvec):; for n in range(len(evec)):; if (math.fabs(evec[n]-cvec[n]) > 1.0e-4):; message = (""\t%s: computed cube file",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html:11680,test,test,11680,psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,1,['test'],['test']
Testability,"ce it is inlined into the manual (unless !nosample in the comment) as a sample input.; Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory. output.ref¶; When your test case is in final form, run it locally, rename the output to output.ref, and check it into the repository alongside input.dat.; While this isn’t used for any testing machinery, it can be handy for users or developers to consult. test_input.py¶; Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest’s notice, add a file to the directory named test_input.py.; Below is an example for the psi4/tests/ci-property/test_input.py; from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the CMakeLists.txt.; The def test_ci_property contains the name of the test, now with underscores rather than hyphens.; def test_ identifies it to pytest as a test.; That part of the function name and the name of the file, test_input.py are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ctest_runner(__file__).; This uses QCEngine machinery to execute python psi4 input.dat.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input fil",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:8661,test,tests,8661,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,4,['test'],['tests']
Testability,"ce of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cisd-sp; 6-31G** H2O Test CISD Energy Point. cbs-xtpl-dict; Extrapolated water energies. scf-level-shift-cuhf; SCF level shift on a CUHF computation. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. fd-gradient; SCF STO-3G finite-difference tests. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. fnocc2; Test G2 method for H2O. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. scf-level-shift-rohf; SCF level shift on an ROHF computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. nbo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:43052,test,tests,43052,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"ce).; PR owners who also have maintainer status can merge their PRs as GitHub enforces three external reviews.; Unless there’s been a lot of discussion on core-dev about merge order, generally the 3rd positive reviewer merges the PR. Also fine to add review and leave merge for later.; Presently only Travis-CI is set up as a required-to-merge service. Incomplete Azure won’t block merging, but we do usually let it complete before merging unless it’s a trivial PR.; We don’t enforce branches to be up to date before merging since that’d be a lot of extra CI time and coordination when merging several PRs in a day. So, if a PR hasn’t been updated in a while, and a reviewer is nervous about PR interference, fine to ask submitter to rebase. For this reason, we try to merge newer contributors first so the rebase falls on more experienced contributors.; Ideally a PR consists of atomic, compilable commits. When the PR instead is many successive small changes toward a single goal, consider squashing the PR. For core-dev’s PRs, there’s implicit permission to squash (unless otherwise noted in PR intro), whereas for new contributors, we often let the commits be messy.; When discussion on issue has overcome the original problem and settled on needing long-term work, fine to move the long-term item to Wish List and close issue. table of contents. Git, Versioning; How to bump a version; How to create and remove an annotated Git tag on a remote; What Psi4 version is running; How to locate non-ascii characters in the codebase; How to fix “Psi4 undefined” version; How to fix “cannot import name ‘core’ from {top-level-psi4-dir}; How to find tests without output.ref; How to do GitHub issue management and code review. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Managing: Git, Conda, CMake and all that; Git, Versioning. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/manage_git.html:10845,test,tests,10845,psi4manual/1.6.x/manage_git.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/manage_git.html,1,['test'],['tests']
Testability,"ce, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) doc/sphinxman and start from scratch.; Even ~15 minutes of build time can be annoying when developing; documentation and testing rst files. In that situation, use the target; below which builds only the written docs (not autodocs) in; psi4/doc/sphinxman/source quickly, though with a lot of warnings for; unresolved links:; 1>>> make sphinxmini. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. reStructuredText; rendered test document; vs. source test document; A third reStructuredText and Sphinx; Sphinx Docs. Math in the Codebase¶; It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the #! comment comments at the top of test case; input files, the /*- comment -*/ comments in; psi4/psi4/src/read_options.cc, and the r"""""" comment """"""; docstrings in python modules. (That r"""""" makes the string read; literally, so your LaTeX symbols aren’t confused with escape characters.); For the two former, math has traditionally; been written in LaTeX (with the special substitution @@ for; subscripting underscore). The autodoc script has been trained to convert; inline LaTeX math to reST math, provided the expression within dollar; signs is offset from other text. That is, expressions of the form; ^ $latex math$[., ]$ (pseudo-regex) are good, while H$_2$O and LaTeX tables; are not translated correctly. Python docstrings are absorbed as-is, so; please use reST math formatting (essentially $latex math$ \(\Rightarrow\); :math:`latex math`).; Starting around PSI4 1.1, MathJax is used for in-browser LaTeX; rendering in place of offline PNG generation of math images. Check the; online rendering, as occasionally there will be errors even",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/documentation-1.html:4349,test,test,4349,psi4manual/1.2.1/documentation-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/documentation-1.html,6,['test'],['test']
Testability,"ces of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:3131,test,test,3131,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"ces, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory. output.ref¶; When your test case is in final form, run it locally, rename the output to output.ref, and check it into the repository alongside input.dat.; While this isn’t used for any testing machinery (except for the nearly decommissioned psi4/tests/psitest.pl for CC tests; full decommission expected by v1.6), it can be handy for users or developers to consult. test_input.py¶; Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest’s notice, add a file to the directory named test_input.py.; Below is an example for the psi4/tests/ci-property/test_input.py; from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the CMakeLists.txt.; The def test_ci_property contains the name of the test, now with underscores rather than hyphens.; def test_ identifies it to pytest as a test.; That part of the function name and the name of the file, test_input.py are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ctest_runner(__file__).; This uses QCEngine machinery to execute python psi4 input.dat.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files do need to be registered in psi4/psi4/CMakeLists.txt.; Finally, the label string passed to CTest is here handed to pytest, with a few changes:. psi added automatic",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:8943,test,tests,8943,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,1,['test'],['tests']
Testability,"cfour. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:1307,test,tests,1307,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,2,['test'],['tests']
Testability,"cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/kw-1; testing best practices options, part i. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:4645,test,testing,4645,psi4manual/master/autodoc_testsuite_cfour.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html,1,['test'],['testing']
Testability,"cft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SA",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/testsuite-1.html:9816,test,test,9816,psi4manual/1.1.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/testsuite-1.html,4,['test'],['test']
Testability,"ch irrep in \(^{3}B_1\) CH2. tdscf-1; td-uhf test on triplet states of methylene (rpa). omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. mbis-1; MBIS calculation on H2O. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with vari",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:28214,test,test,28214,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ch provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model.; Double-Hybrid Functionals; Double hybrids are percolating into PSI4. Note that these are; only available with density-fitted, not conventional, MP2 algorithms.; -D Functionals; We have several -D2 functionals implemented. -D3 functionls are available; with the installation of Grimme’s DFTD3 program.; For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in PSI4 for correctness. If you find an error in a DFT; functional or have a request for a new functional, please let us know on our; forum or GitHub page. Grid Selection¶; PSI4 uses the standard Lebedev-Laikov spherical quadratures in concert with a; number of radial quadratures and atomic partitioning schemes. Pruned grids are; not yet available, but we have plans.; The default grid in PSI4 is a Lebedev-Treutler (75,302) grid with a Treutler; partition of the atomic weights.; Spherical grids are all of the extremely efficient Lebedev-Laikov type.; Spherical grid resolution is controlled by the DFT_SPHERICAL_POINTS; option, which may take one of the following values:. DFT_SPHERICAL_POINTS; Order. 6; 3. 14; 5. 26; 7. 38; 9. 50; 11. 74; 13. 86; 15. 110; 17. 146; 19. 170; 21. 194; 23. 230; 25. 266; 27. 302; 29. 350; 31. 434; 35. 590; 41. 770; 47. 974; 53. 1202; 59. 1454; 65. 1730; 71. 2030; 77. 2354; 83. 2702; 89. 3074; 95. 3470; 101. 3890; 107. 4334; 113. 4",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/dft-1.html:18407,test,test,18407,psi4manual/1.3.2/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/dft-1.html,2,['test'],['test']
Testability,"chem spec; userbas = core.get_global_option('BASIS') or kwargs.get('basis'); if lowername in integrated_basis_methods and userbas is None:; kwargs['basis'] = '(auto)'. # Are we planning?; plan = task_planner.task_planner(""hessian"", lowername, molecule, **kwargs); logger.debug('HESSIAN PLAN'); logger.debug(pp.pformat(plan.dict())). if kwargs.get(""return_plan"", False):; # Plan-only requested; return plan. elif not isinstance(plan, AtomicComputer):; # Advanced ""Computer"" active; plan.compute(); return plan.get_psi_results(return_wfn=return_wfn). else:; # We have unpacked to an AtomicInput; lowername = plan.method; basis = plan.basis; core.set_global_option(""BASIS"", basis). ## Second half of this fn -- entry means program running exactly analytic 2nd derivative. _filter_renamed_methods(""frequency"", lowername); core.clean_variables(). optstash = p4util.OptionsState(; ['FINDIF', 'HESSIAN_WRITE'],; ['FINDIF', 'FD_PROJECT'],; ). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash_conv = driver_util.negotiate_convergence_criterion((2, 2), lowername, return_optstash=True). # At stationary point?; if 'ref_gradient' in kwargs:; core.print_out(""""""hessian() using ref_gradient to assess stationary point.\n""""""); G0 = kwargs['ref_gradient']; else:; tmpkwargs = copy.deepcopy(kwargs); tmpkwargs.pop('dertype', None); G0 = gradient(lowername, molecule=molecule, **tmpkwargs); translations_projection_sound, rotations_projection_sound = _energy_is_invariant(G0.rms()); core.print_out(; '\n Based on options and gradient (rms={:.2E}), recommend {}projecting translations and {}projecting rotations.\n'; .format(G0.rms(), '' if translations_projection_sound else 'not ',; '' if rotations_projection_sound else 'not ')); if not core.has_option_changed('FINDIF', 'FD_PROJECT'):; core.set_local_option('FINDIF', 'FD_PROJECT', rotations_projection_sound). # We have the desired method. Do it.; logger.info(f""Compute hessian(): method={lowername},",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html:72731,test,test,72731,psi4manual/1.6.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html,10,['test'],['test']
Testability,"ches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dft2; DFT Functional Test. scf6; Tests RHF/ROHF/UHF SCF gradients. scf-guess-read3; Test if the the guess read in the same basis converges. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. tdscf-1; td-uhf test on triplet states of methylene (rpa). mbis-4; MBIS calculation on NaCl. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. mom-h2o-4; MOM excitation from LUMO HOMO+4. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. matrix2; An exa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:14851,test,test,14851,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; check nonphysical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:11482,test,testing,11482,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['testing']
Testability,"cify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. pywrap-db2; Database calculation, run in sow/reap mode. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dft-custom; DFT custom functional test. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cubeprop-esp; RHF orbitals and density for water. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:43218,test,test,43218,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"ck if num holes in RAS I and II is \(>\) cc_ex_lvl and if any indices correspond to RAS I or IV (i.e., include only all-active higher excitations)?. Type: boolean; Default: true. CC_UPDATE_EPS¶. Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VARIATIONAL¶. Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. Expert Alternative Algorithms¶. BENDAZZOLI¶. Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. FCI_STRINGS¶. Do store strings specifically for FCI? (Defaults to TRUE for FCI.). Type: boolean; Default: false. REPL_OTF¶. Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. table of contents. DETCI; General Options; AVG_STATES; AVG_WEIGHTS; A_RAS3_MAX; B_RAS3_MAX; CALC_S_SQUARED; CIBLKS_PRINT; CI_MAXITER; DETCI_FREEZE_CORE; EX_LEVEL; E_CONVERGENCE; FCI; ICORE; ISTOP; MS0; NUM_DETS_PRINT; NUM_ROOTS; RAS34_MAX; RAS3_MAX; RAS4_MAX; REFERENCE; R_CONVERGENCE; S; VAL_EX_LEVEL. Diagonalization Methods; DIAG_METHOD; LSE; LSE_COLLAPSE; LSE_TOLERANCE; PRECONDITIONER; UPDATE. Density Matrices; DIPMOM; NAT_ORBS; OPDM; TDM. Root Following; FOLLOW_ROOT. Guess Vectors; RESTART. File Handling; COLLAPSE_SIZE; MAX_NUM_VECS. General-Order Perturbation Theory; MPN. General-Order Coupled-Cluster; CC; CC_A_RAS3_MAX; CC_B_RAS3_MAX; CC_EX_LEVEL; CC_RAS34_MAX; CC_RAS3_MAX; CC_RAS4_MAX; CC_VAL_EX_LEVEL; CC_VECS_READ; CC_VECS_WRITE; DIIS; DIIS_FRE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__detci-1.html:22094,test,tested,22094,psi4manual/1.3.2/autodir_options_c/module__detci-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__detci-1.html,24,['test'],['tested']
Testability,"ckage and the high-AM Libint package must be supplied (or in; .condarc).; 1conda install am8 -c psi4. This switch-out only works for rebuilding PSI4, not for the psi4; conda package.; To go back to the default Libint package, do the below. The; channel/subchannel containing the default Libint package must be supplied; (or in .condarc); otherwise, it’ll just remove Libint and every package; depending on it.; 1conda remove --features am8 -c psi4. The default package is AM6 because of its manageable file size (on Linux,; 10MB for libint and 40MB for libderiv). The AM7 are 20/100, respectively,; and the AM8 is 50/210. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:8815,test,tests,8815,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['test'],['tests']
Testability,"class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:32673,test,tests,32673,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['test'],['tests']
Testability,"class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/testsuite-1.html:29723,test,tests,29723,psi4manual/1.1.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/testsuite-1.html,4,['test'],['tests']
Testability,"class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer in",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:34260,test,tests,34260,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['test'],['tests']
Testability,"class processes geometry like psi4 Molecule class. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. scf-cholesky-basis; incremental Cholesky filtered SCF. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. soscf-large; Second-order SCF convergnece: Benzene. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft1-alt; DFT Functional Test. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. nbody-vmfc-hessian; Computation of VMFC-corrected water trimer Hessian (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while th",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:32461,test,test,32461,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"close (bool) – Returns True if expected and computed are equal within tolerance; False otherwise.; message (str) – When return_message=True, also return passed or error message. Notes; absolute(computed - expected) <= (atol + rtol * absolute(expected)). psi4.compare_vectors(expected, computed, atol_exponent, label[, *, check_name=False, **kwargs]). psi4.compare_vectors(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Vector objects.; Compares Vector properties of name (optional through check_name), nirrep, and dimension of each irrep.; For comparing actual numerical contents, the vectors are serialized to NumPy array format and passed to qcelemental.testing.compare_recursive().; Handles both Psi4-style signatures ((expected, computed, atol_exponent, label); see atol_exponent parameter below) and QCA-style signatures ((expected, computed, label)). Parameters; atol_exponent (int or float) – Absolute tolerance (see formula in qcelemental.testing.compare_values() notes).; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99. psi4.compare_wavefunctions(expected, computed, atol_exponent, label[, *, check_name=False, **kwargs]). psi4.compare_wavefunctions(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Wavefunction objects.; Compares over 30 Wavefunction properties, including nirrep, nso, molecule geometry, basis set nbf, density matrices, gradient results, etc.; Handles both Psi4-style signatures ((expected, computed, atol_exponent, label); see atol_exponent parameter below) and QCA-style signatures ((expected, computed, label)). Parameters; atol_exponent (int or float) – Absolute tolerance (see formula in qcelemental.testing.compare_values() notes).; Values less than one are taken literally; one or greate",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:22098,test,testing,22098,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,1,['test'],['testing']
Testability,"complex (%d/%d) with fragments %s in the basis of fragments %s.\n\n"" %; (num + 1, total, str(pair[0]), str(pair[1]))); ghost = list(set(pair[1]) - set(pair[0])). current_mol = molecule.extract_subsets(list(pair[0]), ghost); current_mol.set_name(""%s_%i_%i"" % (current_mol.name(), count, num)); if metadata['embedding_charges']: driver_nbody_helper.electrostatic_embedding(metadata, pair=pair); # Save energies info; ptype_dict[pair], wfn = func(method_string, molecule=current_mol, return_wfn=True, **kwargs); core.set_global_option_python('EXTERN', None); energies_dict[pair] = core.variable(""CURRENT ENERGY""); gradients_dict[pair] = wfn.gradient(); var_key = ""N-BODY (%s)@(%s) TOTAL ENERGY"" % (', '.join([str(i) for i in pair[0]]), ', '.join(; [str(i) for i in pair[1]])); intermediates_dict[var_key] = core.variable(""CURRENT ENERGY""); core.print_out(""\n N-Body: Complex Energy (fragments = %s, basis = %s: %20.14f)\n"" % (str(; pair[0]), str(pair[1]), energies_dict[pair])); # Flip this off for now, needs more testing; #if 'cp' in bsse_type_list and (len(bsse_type_list) == 1):; # core.set_global_option('DF_INTS_IO', 'LOAD'). core.clean(). return {; 'energies': energies_dict,; 'gradients': gradients_dict,; 'ptype': ptype_dict,; 'intermediates': intermediates_dict; }. def assemble_nbody_components(metadata, component_results):; """"""Assembles N-body components into interaction quantities according to requested BSSE procedure(s). Parameters; -----------; metadata : dict of str; Dictionary of N-body metadata. Required ``'key': value`` pairs:; ``'ptype'``: {'energy', 'gradient', 'hessian'}; Procedure which has generated the N-body components to be combined.; ``'bsse_type_list'``: list of str; List of requested BSSE treatments. Possible values include lowercase ``'cp'``, ``'nocp'``,; and ``'vmfc'``.; ``'max_nbody'``: int; Maximum number of bodies to include in the N-Body treatment.; Possible: `max_nbody` <= `max_frag`; Default: `max_nbody` = `max_frag`; ``'max_frag'``: int; Number of dis",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_nbody.html:17339,test,testing,17339,psi4manual/1.3.2/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_nbody.html,5,['test'],['testing']
Testability,"computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc13; UHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. mrcc1; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole po",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html:6197,test,test,6197,psi4manual/4.0b3/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html,4,['test'],['test']
Testability,"computed the gradient that satisfied the convergence criteria. Type: boolean; Default: false. FIXED_COORD_FORCE_CONSTANT¶. In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. KEEP_INTCOS¶. Keep internal coordinate definition file. Type: boolean; Default: false. LINESEARCH_STATIC_MAX¶. If doing a static line search, this fixes the largest step, whose largest change in an internal coordinate is set to this value (in au). Type: double; Default: 0.100. LINESEARCH_STATIC_MIN¶. If doing a static line search, this fixes the shortest step, whose largest change in an internal coordinate is set to this value (in au). Type: double; Default: 0.001. LINESEARCH_STATIC_N¶. If doing a static line search, scan this many points. Type: integer; Default: 8. TEST_B¶. Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B¶. Do test derivative B matrix?. Type: boolean; Default: false. Table Of Contents. OPTKING; Optimization Algorithm; CONSECUTIVE_BACKSTEPS; DYNAMIC_LEVEL; ENSURE_BT_CONVERGENCE; FIXED_BEND; FIXED_DIHEDRAL; FIXED_DISTANCE; FROZEN_BEND; FROZEN_CARTESIAN; FROZEN_DIHEDRAL; FROZEN_DISTANCE; GEOM_MAXITER; H_UPDATE_DEN_TOL; INTERFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT_MAX; INTRAFRAG_STEP_LIMIT_MIN; IRC_DIRECTION; IRC_STEP_SIZE; IRC_STOP; OPT_COORDINATES; OPT_TYPE; PRINT_OPT_PARAMS; PRINT_TRAJECTORY_XYZ_FILE; RFO_FOLLOW_ROOT; RFO_NORMALIZATION_MAX; RFO_ROOT; RSRFO_ALPHA_MAX; STEP_TYPE. Convergence Control; FLEXIBLE_G_CONVERGENCE; G_CONVERGENCE; MAX_DISP_G_CONVERGENCE; MAX_ENERGY_G_CONVERGENCE; MAX_FORCE_G_CONVERGENCE; RMS_DISP_G_CONVERGENCE; RMS_FORCE_G_CONVERGENCE. Hessian Update; CART_HESS_READ; FULL_HESS_EVERY; HESS_UPDATE; HESS_UPDATE_LIMIT; HESS_UPDATE_LIMIT_MAX; HESS_UPDATE_LIMIT_SCALE; HESS_UPDATE_USE_LAST; INTRAFRAG_HESS. Fragment/Internal Coordinate Control; ADD_AUXILIARY_BONDS; AUX",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__optking-1.html:9729,test,test,9729,psi4manual/1.0.0/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__optking-1.html,2,['test'],['test']
Testability,"computed the gradient that satisfied the convergence criteria. Type: boolean; Default: false. FIXED_COORD_FORCE_CONSTANT¶. In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. KEEP_INTCOS¶. Keep internal coordinate definition file. Type: boolean; Default: false. LINESEARCH_STATIC_MAX¶. If doing a static line search, this fixes the largest step, whose largest change in an internal coordinate is set to this value (in au). Type: double; Default: 0.100. LINESEARCH_STATIC_MIN¶. If doing a static line search, this fixes the shortest step, whose largest change in an internal coordinate is set to this value (in au). Type: double; Default: 0.001. LINESEARCH_STATIC_N¶. If doing a static line search, scan this many points. Type: integer; Default: 8. TEST_B¶. Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B¶. Do test derivative B matrix?. Type: boolean; Default: false. table of contents. OPTKING; Optimization Algorithm; CONSECUTIVE_BACKSTEPS; DYNAMIC_LEVEL; ENSURE_BT_CONVERGENCE; FIXED_BEND; FIXED_DIHEDRAL; FIXED_DISTANCE; FROZEN_BEND; FROZEN_CARTESIAN; FROZEN_DIHEDRAL; FROZEN_DISTANCE; GEOM_MAXITER; H_UPDATE_DEN_TOL; INTERFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT_MAX; INTRAFRAG_STEP_LIMIT_MIN; IRC_DIRECTION; IRC_STEP_SIZE; IRC_STOP; OPT_COORDINATES; OPT_TYPE; PRINT_OPT_PARAMS; PRINT_TRAJECTORY_XYZ_FILE; RFO_FOLLOW_ROOT; RFO_NORMALIZATION_MAX; RFO_ROOT; RSRFO_ALPHA_MAX; STEP_TYPE; SYMM_TOL. Convergence Control; FLEXIBLE_G_CONVERGENCE; G_CONVERGENCE; MAX_DISP_G_CONVERGENCE; MAX_ENERGY_G_CONVERGENCE; MAX_FORCE_G_CONVERGENCE; RMS_DISP_G_CONVERGENCE; RMS_FORCE_G_CONVERGENCE. Hessian Update; CART_HESS_READ; FULL_HESS_EVERY; HESS_UPDATE; HESS_UPDATE_LIMIT; HESS_UPDATE_LIMIT_MAX; HESS_UPDATE_LIMIT_SCALE; HESS_UPDATE_USE_LAST; INTRAFRAG_HESS. Fragment/Internal Coordinate Control; ADD_AUXILIARY_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__optking-1.html:9961,test,test,9961,psi4manual/1.3.2/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__optking-1.html,16,['test'],['test']
Testability,"conda environments, though, one should; make a new objdir since there are many full paths baked into; objdir/CMakeCache.txt. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; >>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example] . Run tests in parallel with -j flag. For maximum parallelism (not Windows): ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 5 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that continuous integration checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. Pytest has similar commands:. Run tests in parallel with -n flag (if Python package pytest-xdist installed). For maximum parallelism: pytest -n auto; Run full test suite: pytest; Run the quick tests: pytest -m quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: pytest -m smoke; Run tests matching by name: pytest -k testname; Run tests excluding those by name: pytest -k ""not testname""; Run tests matching by label: pytest -m testlabel; Run tests excluding those by label: pytest -m ""not testlabel""; Run tests with complicated filtering by name: pytest -k ""cc and not cc4 and not stdsuite""; Run tests and see test names: pytest -v; Run tests and see test names ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:52865,test,test,52865,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,65,['test'],"['test', 'testlabel', 'testname', 'tests']"
Testability,"coordinates. mints15; check SP basis Fortran exponent parsing. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. dft-dsd; DSD S22 Ammonia test. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. scf-auto-cholesky; Cholesky filter a complete basis. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 st",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:36195,test,test,36195,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"core. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. fnocc5; Test FNO-DF-CCSD(T) energy. mints-benchmark; run some BLAS benchmarks. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mbis-1; MBIS calculation on H2O. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. dft-reference; MP2 with a PBE0 reference computation. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. cubeprop-esp; RHF orbitals and density for water. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. linK-2; RKS Linear Exchange Algorithm test for benzene. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. tdscf-1; td-uhf test on triplet states of methylene (rpa). dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:30646,test,test,30646,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,4,['test'],['test']
Testability,"core.Matrix) → None; Computes the inverse of any nonsingular matrix using LU factorization. get(*args, **kwargs); Overloaded function. get(self: psi4.core.Matrix, h: int, m: int, n: int) -> float. Returns a single element of a matrix in subblock h, row m, col n. get(self: psi4.core.Matrix, m: int, n: int) -> float. Returns a single element of a matrix, row m, col n. get_block(self: psi4.core.Matrix, rows: psi4.core.Slice, cols: psi4.core.Slice) → psi4.core.Matrix; Get a matrix block. hermitivitize(self: psi4.core.Matrix) → None; Average off-diagonal element in-place. hermitize(self: psi4.core.Matrix) → None; Makes a real matrix symmetric by averaging the matrix and its transpose. identity(self: psi4.core.Matrix) → None; Sets the matrix to the identity. invert(self: psi4.core.Matrix) → None; Computes the inverse of a real symmetric positive definite matrix. load(*args, **kwargs); Overloaded function. load(self: psi4.core.Matrix, filename: str) -> None. Loads a block matrix from an ASCII file (see tests/mints3 for format). load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, tocentry: str, nso: int) -> bool. Load a matrix from a PSIO object from fileno with tocentry of size nso. load(self: psi4.core.Matrix, psio: psi4.core.IO, fileno: int, savetype: psi4.core.SaveType=SaveType.LowerTriangle) -> None. Load a matrix from a PSIO object from fileno and with toc position of the name of the matrix. load_mpqc(self: psi4.core.Matrix, filename: str) → None; Loads a matrix from an ASCII file in MPQC format. name; The name of the Matrix. Used in printing. nirrep(self: psi4.core.Matrix) → int; Returns the number of irreps. np; View without only one irrep. classmethod np_read(filename, prefix=''); Reads the data from a NumPy compress file. np_write(filename=None, prefix=''); Writes the irreped matrix to a NumPy zipped file.; Can return the packed data for saving many matrices into the same file. nph; View with irreps. partial_cholesky_factorize(self: psi4.core.Matrix, delt",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html:21475,test,tests,21475,psi4manual/1.3.2/api/psi4.core.matrix.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.matrix.html,1,['test'],['tests']
Testability,"corrected density-fitted MP2 interaction energy; between two molecules.; PSI4 also provides the cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; 1; 2; 3; 4; 5# all equivalent. cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; either be called directly, as in the first example, or the convenience; syntax of the equivalent second example can be used.; Another very useful and powerful feature of PSI4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; 1database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. table of contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. © Copyright 2017, The Psi4 Project.; Last updated on Wednesda",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/psithoninput-1.html:16179,benchmark,benchmark,16179,psi4manual/1.1.0/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/psithoninput-1.html,2,['benchmark'],['benchmark']
Testability,"corrected density-fitted MP2 interaction energy; between two molecules.; PSI4 also provides the cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; 1; 2; 3; 4; 5# all equivalent. cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; either be called directly, as in the first example, or the convenience; syntax of the equivalent second example can be used.; Another very useful and powerful feature of PSI4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; 1database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. table of contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. © Copyright 2018, The Psi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/psithoninput-1.html:17031,benchmark,benchmark,17031,psi4manual/1.2.1/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/psithoninput-1.html,2,['benchmark'],['benchmark']
Testability,"corrected density-fitted MP2 interaction energy; between two molecules.; PSI4 also provides the cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; 1; 2; 3; 4; 5# all equivalent. cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; either be called directly, as in the first example, or the convenience; syntax of the equivalent second example can be used.; Another very useful and powerful feature of PSI4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; 1database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. table of contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/psithoninput-1.html:15127,benchmark,benchmark,15127,psi4manual/1.3.2/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput-1.html,2,['benchmark'],['benchmark']
Testability,"corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. import os; import hashlib; import collections; from typing import Dict, List, Optional, Tuple, Union. import numpy as np. import qcelemental as qcel. import psi4; from .util import parse_dertype; from .libmintsmolecule import *; from .testing import compare_values, compare_integers, compare_molrecs; from .bfs import BFS. qcdbmol = ""psi4.driver.qcdb.molecule.Molecule"". [docs]; class Molecule(LibmintsMolecule):; """"""Class to store the elements, coordinates, fragmentation pattern,; charge, multiplicity of a molecule. Largely replicates psi4's libmints; Molecule class, developed by Justin M. Turney and Andy M. Simmonett; with incremental improvements by other psi4 developers. Major. This class extends `qcdb.LibmintsMolecule` and occasionally; `psi4.core.Molecule` itself. """""". def __init__(self,; molinit=None,; dtype=None,; geom=None,; elea=None,; elez=None,; elem=None,; mass=None,; real=None,; elbl=None,; name=None,; units='Angstrom',; input_units_to_au=None,; fix_com=None,; fix_orientation=None,; fix_symmetry=None,; fragment_separators=None,; fragment_charges=None,; fragment_multiplicities=None,; molecular_charge=None,; molecular_multiplicity=None,; comment=None,; provenance=None,; connectivity=None,; enable_qm=True,; enable_efp=True,; missing_enabled_ret",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/qcdb/molecule.html:1347,test,testing,1347,psi4manual/1.8.x/_modules/psi4/driver/qcdb/molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/qcdb/molecule.html,2,['test'],['testing']
Testability,"corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. import os; import hashlib; import collections; from typing import Dict, List, Optional, Tuple, Union. import numpy as np. import qcelemental as qcel. import psi4; from .util import parse_dertype; from .libmintsmolecule import *; from .testing import compare_values, compare_integers, compare_molrecs; from .bfs import BFS. qcdbmol = ""psi4.driver.qcdb.molecule.Molecule"". [docs]class Molecule(LibmintsMolecule):; """"""Class to store the elements, coordinates, fragmentation pattern,; charge, multiplicity of a molecule. Largely replicates psi4's libmints; Molecule class, developed by Justin M. Turney and Andy M. Simmonett; with incremental improvements by other psi4 developers. Major. This class extends `qcdb.LibmintsMolecule` and occasionally; `psi4.core.Molecule` itself. """""". def __init__(self,; molinit=None,; dtype=None,; geom=None,; elea=None,; elez=None,; elem=None,; mass=None,; real=None,; elbl=None,; name=None,; units='Angstrom',; input_units_to_au=None,; fix_com=None,; fix_orientation=None,; fix_symmetry=None,; fragment_separators=None,; fragment_charges=None,; fragment_multiplicities=None,; molecular_charge=None,; molecular_multiplicity=None,; comment=None,; provenance=None,; connectivity=None,; enable_qm=True,; enable_efp=True,; missing_enabled_retur",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/qcdb/molecule.html:1345,test,testing,1345,psi4manual/1.7.x/_modules/psi4/driver/qcdb/molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/qcdb/molecule.html,2,['test'],['testing']
Testability,"cp"", return_bool=True),; ""bse"": which_import(""basis_set_exchange"", return_bool=True),; ""einsums"": _CMake_to_Py_boolean(""OFF""),; }. def addons(request: str = None) -> Union[bool, List[str]]:; """"""Returns boolean of whether Add-On *request* is available to Psi4,; either compiled in or searchable in $PSIPATH:$PATH, as relevant. If; *request* not passed, returns list of available Add-Ons: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...` . """"""; def strike(text):; if os.name == ""nt"":; # Windows has a probably correctable problem with unicode, but I can't iterate it quickly, so use tilde for strike.; # UnicodeEncodeError: 'charmap' codec can't encode character '\u0336' in position 3: character maps to <undefined>; return ""~"" + text + ""~""; else:; return ''.join(itertools.chain.from_iterable(zip(text, itertools.repeat('\u0336')))). if request is None:; return [(k if v else strike(k)) for k, v in sorted(_addons_.items())]; return _addons_[request.lower()]. # Testing; def test(extent: str = ""full"", extras: List = None) -> int:; """"""Runs a test suite through pytest. Parameters; ----------; extent; {'smoke', 'quick', 'full', 'long'}; All choices are defined, but choices may be redundant in some projects. * _smoke_ will be minimal ""is-working?"" test(s).; * _quick_ will be as much coverage as can be got quickly, approx. 1/3 tests.; * _full_ will be the whole test suite, less some exceedingly long outliers.; * _long_ will be the whole test suite.; extras; Additional arguments to pass to `pytest`. Returns; -------; int; Return code from `pytest.main()`. 0 for pass, 1 for fail. """"""; try:; import pytest; except ImportError:; raise RuntimeError('Testing module `pytest` is not installed. Run `conda install pytest`'); abs_test_dir = os.path.sep.join([os.path.abspath(os.path.dirname(__file__)), ""tests""]). command = ['-rws', '-v', '--color', 'yes']; if extent.lower() == 'smoke':; command.extend(['-m', 'smoke']); elif extent.lower() == 'quick':; command.extend(['-m', 'quick or smoke']); elif extent.lower()",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html:6362,test,test,6362,psi4manual/1.9.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html,5,"['Test', 'test']","['Testing', 'test']"
Testability,"csd(t)'). psi4.print_out(""\n""); psi4.print_out(""CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies\n\n""); psi4.print_out("" R (Ang) E_int (kcal/mol) \n""); psi4.print_out(""-----------------------------------------------------\n""); for R in Rvals:; e = ecp[R] * 627.5095; psi4.print_out("" %3.1f %10.6f\n"" % (R, e)). First, you can see the molecule block has a couple dashes to; separate the monomers from each other. Also note we’ve used a Z-matrix to; specify the geometry, and we’ve used a variable (R) as the; interatomic distance. We have not specified the value of R in; the molecule block like we normally would. That’s because we’re; going to vary it during the scan across the potential energy surface.; Below the molecule block, you can see the Rvals array; specified. This is a Python array holding the interatomic distances we; want to consider. In Python, arrays are surrounded by square brackets, and; elements are separated by commas.; The next lines, set basis aug-cc-pVDZ and set freeze_core True,; are familiar from previous test cases. Next comes a slightly; unusual-looking line, ecp = {}. This is Python’s way of initializing; a “dictionary”. We’re going to use this dictionary to store the; counterpoise-corrected energies as they become available. A dictionary is; like an array, but we can index it using strings or floating-point numbers; instead of integers if we want. Here, we will index it using; floating-point numbers, namely, the R values. This winds up being; slightly more elegant than a regular array in later parts of the input; file.; The next section, beginning with for R in Rvals:, loops over the; interatomic distances, R, in our array Rvals. In Python,; loops need to be indented, and each line in the loop has to be indented; by the same amount. The first line in the loop, dimer.R = R,; sets the Z-matrix variable R of the molecule called dimer; to the R value extracted from the Rvals array. The next line,; ecp[R] = cp('ccsd(t)'), computes the counterpoise",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/tutorial-1.html:17385,test,test,17385,psi4manual/4.0b5/tutorial-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/tutorial-1.html,2,['test'],['test']
Testability,"csd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_cfour-1.html:1302,test,tests,1302,psi4manual/1.2.1/autodoc_testsuite_cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_cfour-1.html,6,['test'],['tests']
Testability,"csformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Computes histogram; of errors and gaussian distribution.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; >>>. plot_flat(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single model",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:36740,benchmark,benchmark,36740,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['benchmark'],['benchmark']
Testability,"ct (Dict[str, float]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. Extra QCA Functions¶. psi4.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=<function _psi4_true_raise_handler>)¶; Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters:. expected – int, bool, str or array-like of same.; Reference value against which computed is compared.; computed – int, bool, str or array-like of same.; Input value to compare against expected.; label – Label for passed and error messages. Defaults to calling function name.; equal_phase – Compare computed or its opposite as equal.; quiet – Whether to log the return message.; return_message – Whether to return tuple. See below.; return_handler – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Returns:. allclose (bool) – Returns True if expected and computed are equal; False otherwise.; message (str) – When return_message=True, also return passed or error message. Return type:; bool | Tuple[bool, str]. Notes. Akin to numpy.array_equal().; For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use compare_recursive(). psi4.compare_recursive(expected, computed, *args, **kwargs)¶; Comparison function for recursively comparing mixed-type and nested structures such as dictionaries and lists.; See qcelemental.testing.compare_recursive() for details. table of contents. Test Suite; CTest and pytest, PSIthon and PsiAPI; Test Contents; Adding PSIthon Test Cases; CMakeLists.txt; input.dat; output.ref; test_input.py; Running for Debugging. Adding PsiAPI Test Cases; Running for Debugging. Comparison Functions; Plain Old Data; compare_values(); compare_integers(). Objects",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/add_tests.html:29401,test,testing,29401,psi4manual/1.8.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/add_tests.html,1,['test'],['testing']
Testability,"ct[""all""]:; for pair in compute_dict[""all""][nb]:; lbl = labeler(pair); if lbl in self.task_list:; continue. data = template; ghost = list(set(pair[1]) - set(pair[0])); data[""molecule""] = self.molecule.extract_subsets(list(pair[0]), ghost); if self.embedding_charges:; embedding_frags = list(set(range(1, self.nfragments + 1)) - set(pair[1])); charges = []; for frag in embedding_frags:; positions = self.molecule.extract_subsets(frag).geometry().np.tolist(); charges.extend([[chg, i] for i, chg in zip(positions, self.embedding_charges[frag])]); data['keywords']['function_kwargs'].update({'external_potentials': charges}). self.task_list[lbl] = mb_computer(**data); count += 1. return count. [docs] def plan(self):; # uncalled function; return [t.plan() for t in self.task_list.values()]. [docs] def compute(self, client: Optional[""qcportal.FractalClient""] = None):; """"""Run quantum chemistry."""""". info = ""\n"" + p4util.banner(f"" ManyBody Computations "", strNotOutfile=True) + ""\n""; #core.print_out(info); logger.info(info). with p4util.hold_options_state():; for t in self.task_list.values():; t.compute(client=client). [docs] def prepare_results(; self,; results: Optional[Dict[str, SubTaskComputers]] = None,; client: Optional[""qcportal.FractalClient""] = None,; ) -> Dict[str, Any]:; """"""Process the results from all n-body component molecular systems and model chemistry levels into final quantities. Parameters; ----------; results; A set of tasks to process instead of self.task_list. Used in multilevel processing to pass a subset of; self.task_list filtered to only one modelchem level.; client; QCFractal client if using QCArchive for distributed compute. Returns; -------; nbody_results; When the ManyBodyComputer specifies a single model chemistry level (see self.nbodies_per_mc_level), the; return is a dictionary, nbody_results, described in the table below. Many of the items are actually filled; by successive calls to assemble_nbody_components(). When multiple model chemistry levels ar",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_nbody.html:39483,log,logger,39483,psi4manual/1.7.x/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_nbody.html,2,['log'],['logger']
Testability,"cted, computed, ...).; Don’t worry about cleaning up files or resetting options. A function in psi4/tests/pytests/conftest.py does this automatically between every test.; Especially if using data or functions from outside a test, run a variety of tests at different pytest -n <N> levels to mix up test ordering. If tests fail that pass when run alone, you’ve got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. For every new test file, add pytestmark = [pytest.mark.psi, pytest.mark.api] at the top.; This ensures that every test has the psi mark and every PsiAPI test has the api mark to contrast with PSIthon tests with cli mark.; There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m <mark>; vs. ctest -L <mark>) rather than just by name (pytest -k <name_fragment>; vs. ctest -R <name_fragment>). Far more complicated logic is allowed than for; CTest: pytest -m ""dftd3 and not api and not long"".; The most important marks are “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging¶; There are many ways to run pytest, How to test a Psi4 installation, and three different copies of the test file; (i.e., psi4/tests/pytests/test_mp2.py, <objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py,; CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running cmake --build after each change. Easiest is from <objdir>, run pytest ../tests. Add any filters (",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:12569,log,logic,12569,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['log'],['logic']
Testability,"cted, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file out of scratch with correct naming; convention.; Arguments:; @arg filename full path to target file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy); Example:",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:133115,test,test,133115,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['test'],['test']
Testability,"ctest options can be found on the; Wiki. Sample input files; can be found in the the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below.; Sample inputs accessible through interfaced executables are bulleted below. DFTD3; MRCC; CFOUR; LIBEFP; PCMSOLVER; DMRG. Sample inputs for Psi4 as distributed are below. Input File; Description. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 metho",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/testsuite-1.html:1405,test,test,1405,psi4manual/1.0.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/testsuite-1.html,2,['test'],['test']
Testability,"ction ({driver}) not among {egh}.""""""). return driver. [docs] @validator('molecule'); def set_molecule(cls, mol):; mol.update_geometry(); mol.fix_com(True); mol.fix_orientation(True); return mol. def __init__(self, **data):; """"""Initialize FiniteDifference class. data keywords include; * general AtomicInput keys like molecule, driver, method, basis, and keywords.; * specialized findif keys like findif_mode, findif_irrep, and those converted from keywords to kwargs:; findif_stencil_size, findif_step_size, and findif_verbose.; * TODO hangers-on keys present at class initiation get automatically attached to class since `extra = ""allow""` but should be pruned. """"""; findif_stencil_size = data.pop('findif_stencil_size'); findif_step_size = data.pop('findif_step_size'). BaseComputer.__init__(self, **data). translations_projection_sound = (not ""external_potentials"" in data['keywords']['function_kwargs']; and not core.get_option('SCF', 'PERTURB_H'); and not hasattr(self.molecule, 'EFP')); if 'ref_gradient' in data:; logger.info(""""""hessian() using ref_gradient to assess stationary point.""""""); stationary_criterion = 1.e-2 # pulled out of a hat; stationary_point = _rms(data['ref_gradient']) < stationary_criterion; else:; stationary_point = False # unknown, so F to be safe; rotations_projection_sound_grad = translations_projection_sound; rotations_projection_sound_hess = translations_projection_sound and stationary_point; if core.has_option_changed('FINDIF', 'FD_PROJECT'):; r_project_grad = core.get_option('FINDIF', 'FD_PROJECT'); r_project_hess = core.get_option('FINDIF', 'FD_PROJECT'); else:; r_project_grad = rotations_projection_sound_grad; r_project_hess = rotations_projection_sound_hess. for kwg in ['dft_functional']:; if kwg in data:; data['keywords']['function_kwargs'][kwg] = data.pop(kwg); # I have the feeling the keywords.function_kwargs should be all left over in data; # after the findif control ones are removed, not this by-name procedure; data['keywords']['PARENT_SYMMET",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html:41942,log,logger,41942,psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,2,['log'],['logger']
Testability,"ction for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (string) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (array of strings) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (string or array of strings) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'; Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' |",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/db-1.html:3717,benchmark,benchmark,3717,psi4manual/1.2.1/db-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/db-1.html,6,['benchmark'],['benchmark']
Testability,"ctions are the same in CTest and pytest, but in the former they are, for example, compare_matrices(refmat, mat, ...) while in the latter it’s asserted, like assert compare_matrices(refmat, mat, ...).; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they’re NumPy functions.; In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, etc..; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for compare_values() and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, etc.).; Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in psi4/tests/CMakeLists.txt or, for an addon, tests/<addon>/CMakeLists.txt.; The test directory will need at least two files, CMakeLists.txt and input.dat. CMakeLists.txt¶; This file adds the test case to the suite. It should have at least the following two uncommented lines:; include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:4489,test,test,4489,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['test'],['test']
Testability,"ctor guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC); DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC); DFOCC — Do use regularized denominators?. Type: boolean; Default: false. RELATIVISTIC (GLOBALS); GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html:195646,test,tested,195646,psi4manual/1.3.2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_glossary_options_c-1.html,2,['test'],['tested']
Testability,"ctor guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC); DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC); DFOCC — Do use regularized denominators?. Type: boolean; Default: false. RELATIVISTIC (GLOBALS); GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coup",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:196480,test,tested,196480,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,4,['test'],['tested']
Testability,"ctory. The samples and a brief description are provided below.; Sample inputs accessible through interfaced executables are bulleted below. CFOUR; CHEMPS2; COOKBOOK; DFTD3; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/testsuite-1.html:1500,test,test,1500,psi4manual/1.3.2/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html,2,['test'],['test']
Testability,"cular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; \(\Rightarrow\) 'HBC6A' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset. 'small'; 'large'; 'equilibrium' equilibrium points for the six systems; 'FaOOFaOO' dissociation curve for formic acid dimer; 'FaONFaON' dissociation curve for formamide dimer; 'FaNNFaNN' dissociation curve for formamidine dimer; 'FaOOFaON' dissociation curve for formic acid- formamide complex; 'FaONFaNN' dissociation curve for formamide- formamidine complex; 'FaOOFaNN' dissociation curve for formic acid- formamidine complex. HTR40¶. Database of Hydrogen transfer reactions.; Geometries from Bozkaya and Sherrill.; Reference energies from Bozkaya and Sherrill. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. O24by5mb¶. Database (O24) of interaction energies for small open-shell high-spin bimolecular complexes.; Geometries taken from https://gitlab.com/piotr.zuchowski/o24x5/-/tree/4ec3cae0546b6ae4f4f2cf28482cd164c8323cc6.; Reference interaction energies taken from J. Chem. Phys. 154, 134106 (2021) https://doi.org/10.1063/5.0043793.; Variant with ghosted hydrogen as midbonds in the CO",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_available_databases.html:10857,benchmark,benchmark,10857,psi4manual/master/autodoc_available_databases.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_available_databases.html,2,['benchmark'],['benchmark']
Testability,"cular root. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. cc13d; Tests analytic CC2 gradients. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. fsapt-ext-abc2; FSAPT with external charge on dimer. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. cbs-xtpl-energy; Extrapolated water energies - density-fitted version. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. nbody-vmfc-hessian; Computation of VMFC-corrected water trimer Hessian (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. nbody-hessian; Computation of VMFC-corrected HF dimer Hessian. cc13c; Tests RHF CCSD(T)gradients. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fci-dipole; 6-31G H2O Test FCI Energy Point. tdscf-5; td-camb3lyp ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:15991,test,test,15991,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"culation type (energy, gradient, etc.).; Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in psi4/tests/CMakeLists.txt or, for an addon, tests/<addon>/CMakeLists.txt.; The test directory will need at least two files, CMakeLists.txt and input.dat. CMakeLists.txt¶; This file adds the test case to the suite. It should have at least the following two uncommented lines:; include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ctest -L label purposes. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; If a test needs extra input files like grid.dat or extra reference files for checking against, like fchk, specify these in the CMakeLists.txt as shown above. Such tests must be run through ctest and don’t usually work when run “by hand” from the objdir via stage/bin/psi4 ../tests/directory_name/input.dat.; If a test ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:5523,test,tests,5523,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,10,['test'],"['test', 'tests']"
Testability,"cule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. dcft1; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. Previous topic; Test Suite and Sample Inputs; Next topic; Basis Sets by Element; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices »; Test Suite and Sample Inputs ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_testsuite-1.html:23748,test,test,23748,psi4manual/4.0b5/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_testsuite-1.html,2,['test'],['test']
Testability,"cumentation and Source.; e.g., v182 (edition string) is used for Image and Installers.; Use the id value in the shortcode call at the bottom near ghRN. Add a new release page to the psi4_release_fireworks.key Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., static/images/portfolio/fireworks_slide_v182.jpg.; Add it to the git index.; Edit data/portfolio.yml to add a new block for the release (order matters).; Include these changes in a PR. Check the generated preview if needed. Merge the PR yourself or ask; for it to be merged. Finalize release¶. Make new PR with; * edits to main README.md badges, python versions, etc.; Tweet about release. Misc.¶. Consider rebuilding the PSI4 binder image.; If you want to do trial conda builds from a maintenance branch w/o pushing the tag, requires; source/git_tag: 1.3.x and fake package/version: v1.3.1rc1. table of contents. Release Procedures; Annual; Pre-Release (e.g., v1.3rc1); Release (e.g., v1.3); Post-Release (e.g., v1.8.2); On January first; Update copyright year; Update counter scripts; Update samples; Collect new authors; Run long tests; Anticipate next release; Build Conda ecosystem stack; Assemble postrelease changes; Tweak Conda for postrelease; Do final pass before release tag; Tag (pre)release; Tag postrelease; Initialize release branch; Build extra Conda packages for Psi4 channel; Build Psi4conda set; Build Docker images; Generate download page for psicode.org; Collect documentation snapshot; Publish GitHub release; Publish GitHub postrelease; Publish psicode.org release; Finalize release; Misc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Managing: Git, Conda, CMake and all that; Release Procedures. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/manage_release.html:24716,test,tests,24716,psi4manual/master/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/master/manage_release.html,1,['test'],['tests']
Testability,"cumented for particular databases the availability of the generic; database function options cp, rlxd, benchmark, and the string; options for subset. The full reagent member list, which can also be used; in conjunction with subset, is not included here for consideration of space; and may be found in the database file. The database Python files are very; readable and should be consulted for more particular questions. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. BBI¶. Database (Merz) of protein backbone-backbone interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from Sherrill group, Georgia Tech.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. O24by5mb¶. Database (O24) of interaction energies for small open-shell high-spin bimolecular complexes.; Geometries taken from https://gitlab.com/piotr.zuchowski/o24x5/-/tree/4ec3cae0546b6a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/db.html:12419,test,testing,12419,psi4manual/1.9.x/db.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/db.html,1,['test'],['testing']
Testability,"cutable. That is, the top line of bin/psi4 is something like; #!/path/to/miniconda/envs/p4deps/bin/python3.5, and that’s the Python; through which PSI4 is running, rather than the Python of which python.; To use a different Python with PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct“¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; 1; 2; 3>>> cd {objdir}; >>> lldb -- python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. 1; 2; 3>>> cd {objdir}; >>> gdb --args python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPYTHON_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:36192,test,tests,36192,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,2,['test'],['tests']
Testability,"cutable. That is, the top line of bin/psi4 is something like; #!/path/to/miniconda/envs/p4deps/bin/python3.5, and that’s the Python; through which PSI4 is running, rather than the Python of which python.; To use a different Python with PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; 1; 2; 3>>> cd {objdir}; >>> lldb -- python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. 1; 2; 3>>> cd {objdir}; >>> gdb --args python stage/{prefix}/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPYTHON_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:42572,test,tests,42572,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['test'],['tests']
Testability,"d :math:`(A-B)`; (H2) in to the subspace defined by the trial vectors.; The subspace analog of the NxN hermitian EVP is diagonalized and left :math:`(X-Y)`; and right :math:`(X+Y)` eigenvectors of the NxN non-hermitian EVP are approximated.; Residual vectors are formed for both and the guess space is augmented with; two correction vectors per iteration. The advantages and properties of this; algorithm are described in the literature [stratmann:1998]_ . Parameters; ----------; engine; The engine drive all operations involving data structures that have at; least one ""large"" dimension. See :class:`SolverEngine` for requirements; guess; list {engine dependent}; At least `nroot` initial expansion vectors; nroot; Number of roots desired; r_convergence; Convergence tolerance for residual vectors; max_ss_size; The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter; The maximum number of iterations; verbose; The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns; -------; best_values : numpy.ndarray; (nroots, ) The best approximation of the eigenvalues of `w`, computed on the last iteration of the solver; best_R: List[`vector`]; (nroots) The best approximation of the right hand eigenvectors, :math:`X+Y`, computed on the last iteration of the solver.; best_L: List[`vector`]; (nroots) The best approximation of the left hand eigenvectors, :math:`X-Y`, computed on the last iteration of the solver.; stats : List[Dict]; Statistics collected on each iteration. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/solvers.html:25868,log,logging,25868,psi4manual/1.7.x/_modules/psi4/driver/p4util/solvers.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/solvers.html,8,['log'],['logging']
Testability,"d Psi3 reference values. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-ext-abc; FSAPT with external charge on trimer. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft1; DFT Functional Test all values update for new BraggSlater radii. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. nbody-multi-level-2; many-body different levels of theory on each body of helium tetramer. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:37616,test,tests,37616,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"d and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]; QCElemental — [what is this?]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff; pint https://pint.readthedocs.io/en/latest/; pydantic (depending on your QCElemental version) https://pydantic-docs.helpmanual.io/#. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-loaded capabilities:. PylibEFP & libefp — [what is this?] [min version]; cfour — [what is this?]; dftd3 — [what is th",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:5817,test,tests,5817,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['test'],['tests']
Testability,"d are below. Input File; Description. dft-freq-analytic2; Analytic UKS SVWN frequencies, compared to finite difference values. numpy-array-interface; Numpy interface testing. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. sapt11; sapt example with orbital freezing with alkali metal and dMP2. scf-guess-read2; T",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/testsuite.html:1867,test,test,1867,psi4manual/master/testsuite.html,https://psicode.org,https://psicode.org/psi4manual/master/testsuite.html,1,['test'],['test']
Testability,"d automatically, so exclude it when copying from CTest CMakeLists.txt; cli added automatically to distinguish CTest origin from deliberate pytest origin, which have api added; smoke used instead of CTest smoketests; quick used instead of CTest quicktests; long used instead of CTest longtests; addon and <name-of-addon> added automatically when @uusing(""<name-of-addon>"") decorates the test or marks=using(""<name-of-addon>"") marks the test. CTest “labels” are called “marks” in pytest.; Any new marks should be added to psi4/pytest.ini. Running for Debugging¶. PSIthon tests that don’t need extra files to run are easily run from <objdir> via stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out.; All PSIthon tests are runable through CTest, and output files appear in <objdir>/tests/<test-name>/output.dat and stdout results appear in <objdir>/Testing/Temporary/LastTest.log*. Adding PsiAPI Test Cases¶; To create a new test case, either create a new file or add to an existing file under psi4/tests/pytests. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; A test file may contain many tests, each of which is an ordinary Python function with name starting test_. This is how pytest knows to collect it.; No registration required to bring a test to pytest’s attention.; No registration required to bring a test to CMake’s attention. If a test needs additional files, register them in psi4/psi4/CMakeLists.txt. A few notes on test contents:. Import testing functions from utils and use Python assert: assert compare_values(expected, computed, ...).; Don’t worry about cleaning up files or resetting options. A function in psi4/tests/pytests/conftest.py does this automatically between every test.; Especially if using data or functions from outside a test, run a variety of tests at different pytest -n <N> levels to mix up test ordering. If tests fail that pa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:10907,test,test,10907,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,10,['test'],"['test', 'tests']"
Testability,"d below.; Sample inputs accessible through interfaced executables are bulleted below. DFTD3; MRCC; CFOUR; LIBEFP; PCMSOLVER; DMRG. Sample inputs for Psi4 as distributed are below. Input File; Description. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pubchem2; Superficial test of PubChem interface. cepa-module; routing check on lccd, lccsd, cepa(0). cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. pubchem1; Benzene vertical singlet-triplet ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/testsuite-1.html:1584,test,tests,1584,psi4manual/1.0.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/testsuite-1.html,2,['test'],['tests']
Testability,"d direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfcasscf-sa-sp; Example of state-averaged",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/testsuite-1.html:21599,test,test,21599,psi4manual/1.1.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/testsuite-1.html,4,['test'],['test']
Testability,"d logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""; out = Path(ofile); log = out.with_suffix("".log""). # Get the custom logger; import logging. from psi4 import logger; if not inherit_loglevel:; logger.setLevel(loglevel). # Create formatters; # * detailed: example: 2019-11-20:01:13:46,811 DEBUG [psi4.driver.task_base:156]; f_format_detailed = logging.Formatter(""%(asctime)s,%(msecs)d %(levelname)-8s [%(name)s:%(lineno)d] %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""); # * light: example: 2019-11-20:10:45:21 FINDIFREC CLASS INIT DATA; f_format_light = logging.Formatter(""%(asctime)s %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""). # Create handlers, add formatters to handlers, and add handlers to logger (StreamHandler() also available); filemode = ""a"" if append else ""w""; f_handler = logging.FileHandler(log, filemode); f_handler.setLevel(logging.DEBUG); f_handler.setFormatter(f_format_detailed). if execute:; core.set_output_file(str(out), append); if print_header is True or (print_header is None an",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html:8895,log,logging,8895,psi4manual/1.9.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html,4,['log'],['logging']
Testability,"d logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""; out = Path(ofile); log = out.with_suffix("".log""). # Get the custom logger; import logging; from psi4 import logger; if not inherit_loglevel:; logger.setLevel(loglevel). # Create formatters; # * detailed: example: 2019-11-20:01:13:46,811 DEBUG [psi4.driver.task_base:156]; f_format_detailed = logging.Formatter(""%(asctime)s,%(msecs)d %(levelname)-8s [%(name)s:%(lineno)d] %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""); # * light: example: 2019-11-20:10:45:21 FINDIFREC CLASS INIT DATA; f_format_light = logging.Formatter(""%(asctime)s %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""). # Create handlers, add formatters to handlers, and add handlers to logger (StreamHandler() also available); filemode = ""a"" if append else ""w""; f_handler = logging.FileHandler(log, filemode); f_handler.setLevel(logging.DEBUG); f_handler.setFormatter(f_format_detailed). if execute:; core.set_output_file(str(out), append); if print_header is True or (print_header is None an",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html:8844,log,logging,8844,psi4manual/1.8.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html,2,['log'],['logging']
Testability,"d only; a small number of roots, `k` are desired this algorithm is preferable to; standard methods as uses on the order of `N * k` memory. One only needs to; have the ability to compute the product of a times a vector. For non-hermitan `A` the basis of the algorithm breaks down. However in; practice, for strongly diagonally-dominant `A` such as the; similarity-transformed Hamiltonian in EOM-CC this algorithm is commonly still; used. Parameters; ----------; engine; The engine drive all operations involving data structures that have at; least one ""large"" dimension. See :class:`SolverEngine` for requirements; guess; list {engine dependent}; At least `nroot` initial expansion vectors; nroot; Number of roots desired; r_convergence; Convergence tolerance for residual vectors; max_ss_size; The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter; The maximum number of iterations; verbose; The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only; Should eigenpairs with eigenvalue < 0 be ignored?. Returns; -------; best_values : numpy.ndarray; (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors: List[`vector`]; (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats : List[Dict]; Statistics collected on each iteration. - count : int, iteration number; - res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; - val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; - delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; - collapse : bool, if a subspace collapse was performed; - product_count : int, the running total of product evaluations that was performed; - done : bool, if all roots were converged. Notes; -----; The solution vector is normalized to 1/2. The solver will return even ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/solvers.html:19745,log,logging,19745,psi4manual/1.7.x/_modules/psi4/driver/p4util/solvers.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/solvers.html,8,['log'],['logging']
Testability,"d parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI); DETCI — Do use the component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_ORBS (OMP2); OMP2 — Do ?. Type: boolean; Default: false. NAT_ORBS (SAPT); SAPT — Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: false. NAT_ORBS_T2 (SAPT); SAPT — Do use MP2 natural orbital approximations for the block of two-electron integrals in the evaluation of second-order T2 amplitudes? This approximation is promising for accuracy and computational savings, but it has not been rigorously tested. Type: boolean; Default: false. NAT_ORBS_WRITE (DETCI); DETCI — Do write the natural orbitals?. Type: boolean; Default: false. NAT_ORBS_WRITE_ROOT (DETCI); DETCI — Sets the root number for which CI natural orbitals are written to PSIF_CHKPT. The default value is 1 (lowest root). Type: integer; Default: 1. NEGLECT_DISTANT_PAIR (LMP2); LMP2 — Do neglect distant pairs?. Type: boolean; Default: true. NEW_TRIPLES (CCENERGY); CCENERGY — Do ?. Type: boolean; Default: true. NEW_TRIPLES (CCEOM); CCEOM — Do ?. Type: boolean; Default: true. NEWTON_CONVERGENCE (ADC); ADC — The convergence criterion for pole searching step. Type: conv double; Default: 1e-7. NO_DFILE (DETCI); DETCI (Expert) — Do use the last vector space in the BVEC file to write scratch DVEC rather than using a separate DVEC file? (Only possible if NUM_ROOTS = 1.). Type: boolean; Default: false. NO_R",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html:64901,test,tested,64901,psi4manual/4.0b2/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_glossary_options_c-1.html,2,['test'],['tested']
Testability,"d points?; neutral_guess (Optional[bool]) – Do use neutral orbitals as guess for the anion?; hf_guess (Optional[bool]) – Do use UHF guess before UKS?; continuous_guess (Optional[bool]) – Do carry along guess rather than reguessing at each occupation?; filename (Optional[str]) – Result filename, if not name of molecule. Returns:; Dictionary associating SCF energies with occupations. Return type:; Dict[float, float]. psi4.driver.frac.frac_nuke(name, **kwargs)[source]¶; Pull all the electrons out, one at a time; :rtype: Dict[float, float]. Parameters:; name (str | Callable) – . Return type:; Dict[float, float]. psi4.set_output_file(ofile, append=False, *, loglevel=20, execute=True, print_header=None, inherit_loglevel=False)[source]¶; Set the name for output and logging files. Parameters:. ofile (str) – Name of ASCII output file including extension. The logging file is set from this string with a .log extension.; append (bool) – Do append to the output and logging files rather than (the default) truncating them?; loglevel (int) – The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute (bool) – Do set ofile via psi4.core.set_output_file() and add the logger, rather than just returning ofile path.; print_header (Optional[bool]) – Whether to write the Psi4 header to the ASCII output file. (Only applicable if execute=True.) By default,; writes if file is truncated (append=False) but not if appended.; inherit_loglevel (bool) – If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns:; Path(ofile). Return type:; Path. Notes; This psi4.set_output_file() command calls psi4.core.set_output_file() and should be used in; preference to it as this additionally sets up logging. pydantic model psi4.driver.task_base.BaseComputer[source]¶; Base class for “computers” that plan, run, and process QC tasks. Show JSON schema{; ""title"": ""BaseComputer"",; ""description"": ""Base class for \",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/external_apis.html:5794,log,logging,5794,psi4manual/1.9.x/external_apis.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/external_apis.html,3,['log'],"['log', 'logging', 'loglevel']"
Testability,"d psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files and Elementary Restart) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands¶. Update to latest Psi4 version; >>> conda update psi4. Install into a conda environment “p4env” instead of “root”. Second command only works on bash; for csh/tsch, setenv PATH /path/to/miniconda/envs/p4env/bin:$PATH instead. This creates a sandbox with just Psi4 and python (loaded as dependency).; >>> conda create -y -n p4env psi4; >>> source activate p4env. Install a particular Psi4 version; >>> conda install psi4=0.1.12. Uninstall Psi4 from current environment; >>> conda remove psi4. Troubleshooting¶. If the target computer doesn’t have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the Psi4 conda package won’t work.; # unsuitable computer; >>> ldd --version; ldd (GNU libc) 2.5; # suitable computer; >>> ldd --version; ldd (GNU libc) 2.17. It is of greatest importance that the Psi4 executable be linked against conda libpython.so not against any system libpython.so. This is arranged by setting RPATH to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda Psi4 executable is not vulnerable to interference from your LD_LIBRARY_PATH settings. Below shows a well-linked executable. no libraries “not ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/conda-1.html:13723,sandbox,sandbox,13723,psi4manual/1.0.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/conda-1.html,2,['sandbox'],['sandbox']
Testability,"d to be in “Psi4 stack”, but now build environment and guidance is in-repo with psi4-path-advisor.py.; Other packages in the “ecosystem stack” (e.g., libint, gdma) should already be updated and; built on conda-forge. Survey them to check version tick PRs have been merged.; Conda-forge overwhelmingly handles the psi4 package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. High AM and multiarch psi4 builds for Linux. Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. restricted to only even python versions; c-f libint vs. psi4 libint2 packages (latter with high AM); smoke vs. full tests; no git rev-parse lines; load Intel compilers and specify them in compilers and flags CMake arguments. Prepare recipe, make sure psi4-cf is the only target uncommented in kitandkapoodle.py, set; crontab, view in kpd-anom.log.; Files will upload to psi4/label/dev. For releases and postreleases, on the anaconda.org site; (logged in as psi4), add, not replace, main label, so accessible from psi4/label/main. Build Psi4conda set¶; Installers are build using the project constructor to build binary bash or exe scripts, one per; OS per Python version. For example, there’s 16 installers when OSes are linux-64, win-64, osx-64,; osx-arm64 and pythons are 38, 39, 310, 311. In analogy to Miniconda, they’re called Psi4Conda. They; are built through GHA on the https://github.com/psi4/psi4meta repository and get served from vergil; (the cdsgroup webserver). If the previous release hasn’t had a snapshot saved, copy construct.yaml into a version-labeled; file and check it in.; Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. Edit the top matter for Configuration, mainly the release field. See snapshots in directory for examples.; Edit the packages and channels info if necessary. Probably",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:14030,log,log,14030,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['log'],['log']
Testability,"d to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. sapt11; sapt example with orbital freezing with alkali metal and dMP2. scf-guess-read2; Test if the the guess read in the same basis converges. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:1692,test,test,1692,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"d to validate forces. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cbs-parser; mtd/basis syntax examples. scf-occ; force occupations in scf. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft-grad-meta; meta-GGA gradients of water",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:29690,test,test,29690,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"d to; do the extrapolation). For example,. PSIthonPsiAPI# all equivalent. energy('mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). energy('mp2/cc-pv[dt]z'). # all equivalent. psi4.energy('mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). psi4.energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; be configured behind-the-scenes with explicit arguments, as in the; first example, or the convenience syntax of the equivalent second; example can be used.; Another very useful and powerful feature of PSI4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,. PSIthonPsiAPIdatabase('mp2', 'S22', cp=1, benchmark='S22B'). psi4.wrapper_database.database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. table of contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Psithon: Structuring an Inp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/psithoninput.html:17685,benchmark,benchmark,17685,psi4manual/master/psithoninput.html,https://psicode.org,https://psicode.org/psi4manual/master/psithoninput.html,1,['benchmark'],['benchmark']
Testability,"d various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. ddd-function-kwargs; check distributed driver is correctly passing function kwargs. sapt-compare; SAPT0 aug-cc-pVDZ computation of the water-water interaction energy, using the three SAPT codes. mints3; Test individual integral objects for correctness. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cepa1; cc-pvdz H2O Test CEPA(1) Energy. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. dft-grac; Gradient regularized asymptotic correction (GRAC) test. mbis-5; MBIS calc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:35703,test,test,35703,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,4,['test'],['test']
Testability,"d with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:32251,test,test,32251,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"d) <= (atol + rtol * absolute(expected)). psi4.compare_integers(expected, computed[, label, *, **kwargs])¶; Comparison function for integers, strings, booleans, or integer array-like data structures.; See qcelemental.testing.compare() for details.; psi4.compare_strings is an alias to this. qcelemental.testing.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=None)[source]; Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters:. expected (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Reference value against which computed is compared.; computed (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Input value to compare against expected.; label (str) – Label for passed and error messages. Defaults to calling function name.; equal_phase (bool) – Compare computed or its opposite as equal.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Callable) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Return type:; Union[bool, Tuple[bool, str]]. Returns:. allclose (bool) – Returns True if expected and computed are equal; False otherwise.; message (str) – When return_message=True, also return passed or error message. Notes. Akin to numpy.array_equal().; For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use compare_recursive(). Objects¶. psi4.compare_matrices(expected, computed, atol_exponent, label[, *, check_name=False, **kwargs]). psi4.compare_matrices(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Matrix objects.; Compares Matrix properties of name (optional through check_name), nirrep, symmetry, and number",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/add_tests.html:18037,log,log,18037,psi4manual/1.8.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/add_tests.html,1,['log'],['log']
Testability,"d); if ret:; if ret[0].status == ""ERROR"":; client.modify_tasks(""restart"", base_result=self.result_id); logger.info(""Resubmitting Errored Job {}"".format(self.result_id)); elif ret[0].status == ""COMPLETE"":; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Submitting AtomicResult {}"".format(self.result_id)). else:; # QCFractal `next`. meta, ids = client.add_singlepoints(; molecules=mol,; program=""psi4"",; driver=self.driver,; method=self.method,; basis=self.basis,; keywords=self.keywords,; # protocols,; ); self.result_id = ids[0]; # NOTE: The following will re-run errored jobs by default; if meta.existing_idx:; rec = client.get_singlepoints(self.result_id); if rec.status == ""error"":; client.reset_records(self.result_id); logger.info(""Resubmitting Errored Job {}"".format(self.result_id)); elif rec.status == ""complete"":; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Submitting AtomicResult {}"".format(self.result_id)). return. logger.info(f'<<< JSON launch ... {self.molecule.schoenflies_symbol()} {self.molecule.nuclear_repulsion_energy()}'); gof = core.get_output_file(). # EITHER ...; # from psi4.driver import schema_wrapper; # self.result = schema_wrapper.run_qcschema(self.plan()); # ... OR ...; self.result = qcng.compute(; self.plan(),; ""psi4"",; raise_error=True,; # local_options below suitable for serial mode where each job takes all the resources of the parent Psi4 job.; # distributed runs through QCFractal will likely need a different setup.; task_config={; # B -> GiB; ""memory"": core.get_memory() / (2 ** 30),; ""ncores"": core.get_num_threads(),; },; ); # ... END. #pp.pprint(self.result.dict()); #print(""... JSON returns >>>""); core.set_output_file(gof, True); core.reopen_outfile(); logger.debug(pp.pformat(self.result.dict())); core.print_out(_drink_filter(self.result.dict()[""stdout""])); self.computed = True. [docs] def get_re",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_base.html:5710,log,logger,5710,psi4manual/1.7.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_base.html,2,['log'],['logger']
Testability,"d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P);  . def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5];  ;  ;  . aug-pcseg-N;  ; 01234;  ;  . pcSseg-N;  ;  ; 01234;  . aug-pcSseg-N;  ;  ;  ; 01234. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. [5]N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Appendices. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html:6321,stub,stub,6321,psi4manual/1.1.0/basissets_tables-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/basissets_tables-1.html,8,['stub'],"['stub', 'stubXZ-JKFIT']"
Testability,"d* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; print(""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); sys.exit(1); _success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if(expected != computed):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); sys.exit(1); _success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; rows = len(expected); cols = len(expected[0]); failed = 0; for row in range(rows):; for col in range(cols):; if abs(expected[row][col] - computed[row][col]) > 10 ** (-digits):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, expected[row][col], computed[row][col])); failed = 1; break. if failed:; print(""The Failed Test Matrices\n""); show(computed); print('\n'); show(expected); sys.exit(1); _success(label). [docs]def query_yes_no(question, default=True):; """"""Ask a yes/no question via raw_input() and return their answer. *question* is a string that is presented to the user.; *default* is the presumed answer if the user just hits <Enter>.; It must be yes (the default), no or None (meaning; an answer is required of the user). The return value is one of True or False. """""". yes = re.compile(r'^(y|yes|true|on|1)', re.IGNORECASE); no = re.compile(r'^(n|no|false|off|0)', re.IGNORECASE). if default == None:; prompt = "" [y/n] ""; elif default == True:; pro",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/psiutil.html:3512,test,test,3512,psi4manual/1.0.0/_modules/qcdb/psiutil.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/psiutil.html,1,['test'],['test']
Testability,"d, computed, digits, label):; """"""Function to compare two numpy arrays. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. """""". try:; shape1 = expected.shape; shape2 = computed.shape; except:; raise TestComparisonError(""Input objects do not have a shape attribute.""). if shape1 != shape2:; TestComparisonError(""Input shapes do not match.""). tol = 10 ** (-digits); if not np.allclose(expected, computed, atol=tol):; message = ""\tArray difference norm is %12.6f."" % np.linalg.norm(expected - computed); raise TestComparisonError(message); success(label); return True. [docs]def compare_cubes(expected, computed, label):; """"""Function to compare two cube files. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; # Skip the first six elemets which are just labels; evec = [float(k) for k in expected.split()[6:]]; cvec = [float(k) for k in computed.split()[6:]]; if len(evec) == len(cvec):; for n in range(len(evec)):; if (math.fabs(evec[n]-cvec[n]) > 1.0e-4):; message = (""\t%s: computed cube file does not match expected cube file."" % label); raise TestComparisonError(message); else:; message = (""\t%s: computed cube file does not match expected cube file."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. # Uncomment and use if compare_arrays above is inadequate; #def compare_lists(expected, computed, digits, label):; # """"""Function to compare two Python lists. Prints :py:func:`util.success`; # when elements of vector *computed* match elements of vector *expected* to; # number of *digits*. Performs a system exit on failure to match symmetry; # structure, dimension, or element values. Used in input files in the test suite.; #; # ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html:12370,test,test,12370,psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,1,['test'],['test']
Testability,"d-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++14 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.6 or 3.7) https://www.python.org/; CMake (3.8+) http://www.cmake.org/download/; NumPy (needed at runtime and buildtime) http://www.numpy.org/; System utilities: GNU make, GNU install, POSIX",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:3651,test,tests,3651,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['test'],['tests']
Testability,"d-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/conda-1.html:2112,test,test,2112,psi4manual/1.4.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html,4,['test'],['test']
Testability,"d2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and sim",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:10094,test,test,10094,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"da Pre-compiled Binary. The Psi4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to Psi4conda Installer; or the psicode downloads page.; Users proficient with conda may prefer to consult Conda Proficients.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of Psi4. Psi4conda Installer¶; Sequence of commands to get you to a working Psi4 on Linux; or Mac. Installs Miniconda+Psi4 into $HOME/psi4conda and; the Psi4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux; >>> curl -o ""http://www.psicode.org/downloads/Psi4conda2-latest-Linux.sh"" --keepalive-time 2; >>> bash; >>> bash Psi4conda-latest-Linux.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda and psi4 in path; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. # Mac; >>> curl -o ""http://www.psicode.org/downloads/Psi4conda2-latest-MacOSX.sh"" --keepalive-time 2; >>> bash; >>> bash Psi4conda-latest-MacOSX.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bash_profile; # log out, log back in so conda and psi4 in path; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files and Elementary Restart) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/conda-1.html:2118,test,test,2118,psi4manual/1.0.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/conda-1.html,2,['test'],['test']
Testability,"da. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. If your main conda is not python=2.7, then PSI4 must be installed into a conda environment. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The activate command only works in bash, so csh/tcsh will need corresponding adjustments.; >>> conda create -n p4env psi4; >>> source activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a PSI4 test case to check that all’s well.; >>> conda install psi4; Using Anaconda Cloud api site https://api.anaconda.org; Fetching package metadata: ......; Solving package specifications: ......... Package plan for installation in environment /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4:. The following packages will be downloaded:. package | build; ---------------------------|-----------------; psi4-0.4.322 | py27_g84b3aa1 44.4 MB http://conda.anaconda.org/psi4/linux-64/. The following NEW packages will be INSTALLED:. psi4: 0.4.322-py27_g84b3aa1 http://conda.anaconda.org/psi4/linux-64/. Proceed ([y]/n)? y. Fetching packages ...; psi4-0.4.322-p 100% |####################################################################################| Time: 0:00:08 5.77 MB/s; Extracting packages ...; [ COMPLETE ]|#######################################################################################################| 100%; Linking packages ... Thank",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/conda-1.html:15003,test,test,15003,psi4manual/1.1.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/conda-1.html,2,['test'],['test']
Testability,"da. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. If your main conda is not python=2.7, then Psi4 must be installed into a conda environment. In practical terms, installing into a conda environment means you can turn Psi4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, Psi4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The activate command only works in bash, so csh/tcsh will need corresponding adjustments.; >>> conda create -n p4env psi4; >>> source activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a Psi4 test case to check that all’s well.; >>> conda install psi4; Using Anaconda Cloud api site https://api.anaconda.org; Fetching package metadata: ......; Solving package specifications: ......... Package plan for installation in environment /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4:. The following packages will be downloaded:. package | build; ---------------------------|-----------------; psi4-0.4.322 | py27_g84b3aa1 44.4 MB http://conda.anaconda.org/psi4/linux-64/. The following NEW packages will be INSTALLED:. psi4: 0.4.322-py27_g84b3aa1 http://conda.anaconda.org/psi4/linux-64/. Proceed ([y]/n)? y. Fetching packages ...; psi4-0.4.322-p 100% |####################################################################################| Time: 0:00:08 5.77 MB/s; Extracting packages ...; [ COMPLETE ]|#######################################################################################################| 100%; Linking packages ... Thank",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/conda-1.html:10277,test,test,10277,psi4manual/1.0.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/conda-1.html,2,['test'],['test']
Testability,"dc++.so), and this can be accomplished by; installing XCode from the App Store that provides clang and; clang++ compilers. Check environment; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18# yes, the following returns a blank line. yes, LD_LIBRARY_PATH irrelevant; >>> echo $PYTHONHOME $PYTHONPATH $DYLD_LIBRARY_PATH $PSIDATADIR. >>> which python psi4 g++ gfortran # Linux; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/gcc++; $PSI4CONDA/bin/gfortran; >>> which python psi4 g++ gfortran clang++ # Mac; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/g++; $PSI4CONDA/bin/gfortran; /usr/bin/clang++. >>> which cmake; $PSI4CONDA/bin/cmake; # if above empty, ``conda install cmake``. Create and compile plugin; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36>>> psi4 --plugin-name testplugin; -- Creating ""testplugin"" with ""basic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencie",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/plugins-1.html:3570,test,testplugin,3570,psi4manual/1.1.0/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/plugins-1.html,6,['test'],['testplugin']
Testability,"dd-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page .; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py38/39/310).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nco",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/conda.html:2111,test,test,2111,psi4manual/1.6.x/conda.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/conda.html,5,['test'],['test']
Testability,"dditional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section as modeled in; psi4/tests/plugin_libcim/__init__.py).; """"""Plugin docstring. """"""; __version__ = '0.1'; __author__ = 'Psi4 Developer'. # Load Python modules; from pymodule import *. # Load C++ plugin; import os; import PsiMod; plugdir = os.path.split(os.path.abspath(__file__))[0]; sofile = plugdir + '/' + os.path.split(plugdir)[1] + '.so'; PsiMod.plugin_load(sofile). inputalt.dat — Sample input file for the plugin (new style).; Since the __init__.py file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be included in PYTHONPATH,; either externally in the calling shell or defined in the input file. Then,; the plugin can be loaded as import myplugin and executed as; energy('myplugin'). Any other Python functions are also available from; the input file, e.g. myplugin.testfunction(), note the namespace; protection. doc.rst — Documentation file. Place in this file any notes,; equations, warnings to users, todo lists, etc.. Plain text is fine,; though reStructuredText is the ultimate goal. Remove the .. comment; text and build Sphinx documentation for samples of linking keywords,; sections, and math. This file is absorbed into the PSI4; documentation, along with any docstrings to Python functions, and the C++; keywords block in the myplugin.cc file. See Documentation; for building documentation and Available Plugins; for this file’s final destination. To create a purely Python plugin, create a new plugin directory, then; remove the Makefile, myplugin.cc, and input.dat files and; erase the shared object loading portion of __init__.py. Create as many .py; files as necessary (registering each one in __init__.py), use; inputalt.dat as a model for loading the plugin, no recompile ever; necessary. Table Of Contents. Plugins: Adding New Functionality to PSI4; Modular Approach to De",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/plugins-1.html:6796,test,testfunction,6796,psi4manual/4.0b2/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins-1.html,4,['test'],['testfunction']
Testability,"deleting; the file each time (since it appends). Comparison Functions¶. Plain Old Data¶. psi4.compare_values(expected, computed, atol_exponent, label[, *, **kwargs]). psi4.compare_values(expected, computed[, label, *, **kwargs])¶; Comparison function for float or float array-like data structures.; See qcelemental.testing.compare_values() for details.; psi4.compare_arrays is an old comparison function for float NumPy arrays that is now an alias to this.; Handles both Psi4-style signatures ((expected, computed, atol_exponent, label); see atol_exponent parameter below) and QCA-style signatures ((expected, computed, label)). Parameters:; atol_exponent (int or float) – Absolute tolerance (see formula in qcelemental.testing.compare_values() notes).; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99. qcelemental.testing.compare_values(expected, computed, label=None, *, atol=1e-06, rtol=1e-16, equal_nan=False, equal_phase=False, passnone=False, quiet=False, return_message=False, return_handler=None)[source]; Returns True if two floats or float arrays are element-wise equal within a tolerance. Parameters:. expected (Union[float, List, ndarray]) – float or float array-like; Reference value against which computed is compared.; computed (Union[float, List, ndarray]) – float or float array-like; Input value to compare against expected.; atol (float) – Absolute tolerance (see formula below).; label (Optional[str]) – Label for passed and error messages. Defaults to calling function name.; rtol (float) – Relative tolerance (see formula below). By default set to zero so atol dominates.; equal_nan (bool) – Passed to numpy.isclose(). Compare NaN’s as equal.; equal_phase (bool) – Compare computed or its opposite as equal.; passnone (bool) – Return True when both expected and computed are None.; quiet (bool) – ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:15252,test,testing,15252,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,3,['test'],['testing']
Testability,"deleting; the file each time (since it appends). Comparison Functions¶. Plain Old Data¶. psi4.compare_values(expected, computed, atol_exponent, label[, *, **kwargs]). psi4.compare_values(expected, computed[, label, *, **kwargs])¶; Comparison function for float or float array-like data structures.; See qcelemental.testing.compare_values() for details.; psi4.compare_arrays is an old comparison function for float NumPy arrays that is now an alias to this.; Handles both Psi4-style signatures ((expected, computed, atol_exponent, label); see atol_exponent parameter below) and QCA-style signatures ((expected, computed, label)). Parameters:; atol_exponent (int or float) – Absolute tolerance (see formula in qcelemental.testing.compare_values() notes).; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99. qcelemental.testing.compare_values(expected, computed, label=None, *, atol=1e-06, rtol=1e-16, equal_nan=False, equal_phase=False, passnone=False, quiet=False, return_message=False, return_handler=None)[source]; Returns True if two floats or float arrays are element-wise equal within a tolerance. Parameters:. expected (Union[float, List, ndarray]) – float or float array-like; Reference value against which computed is compared.; computed (Union[float, List, ndarray]) – float or float array-like; Input value to compare against expected.; atol (float) – Absolute tolerance (see formula below).; label (str) – Label for passed and error messages. Defaults to calling function name.; rtol (float) – Relative tolerance (see formula below). By default set to zero so atol dominates.; equal_nan (bool) – Passed to numpy.isclose(). Compare NaN’s as equal.; equal_phase (bool) – Compare computed or its opposite as equal.; passnone (bool) – Return True when both expected and computed are None.; quiet (bool) – Whether to",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/add_tests.html:15254,test,testing,15254,psi4manual/1.8.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/add_tests.html,1,['test'],['testing']
Testability,"dency structure built into the psi4/doc/sphinxman/CMakeLists.txt; , so very long builds should be infrequent (unless you’re touching; psi4/src/bin/psi4/read_options.cc. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) doc/sphinxman and start from scratch.; Even ~10 minutes of build time can be annoying when developing; documentation and testing rst files. In that situation, use the target; below which builds only the written docs (not autodocs) in; psi4/doc/sphinxman/source quickly, though with a lot of warnings for; unresolved links:; >>> make sphinxmini. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re a; few resources on Sphinx formatting. reStructuredText; rendered test document; vs. source test document; Another reStructuredText; A third reStructuredText and Sphinx; LaTeX that Sphinx can handle; Sphinx Docs. Math in the Codebase¶; It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the #! comment comments at the top of test case; input files, the /*- comment -*/ comments in; psi4/src/bin/psi4/read_options.cc, and the r"""""" comment """"""; docstrings in python modules. (That r"""""" makes the string read; literally, so your LaTeX symbols aren’t confused with escape characters.); For the two former, math has traditionally; been written in LaTeX (with the special substitution @@ for; subscripting underscore). The autodoc script has been trained to convert; inline LaTeX math to reST math, provided the expression within dollar; signs is offset from other text. That is, expressions of the form; ^ $latex math$[., ]$ (pseudo-regex) are good, while H$_2$O and LaTeX tables; are not translated correctly. Python docstrings are absorbed as-is",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/documentation-1.html:3943,test,test,3943,psi4manual/1.0.0/documentation-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/documentation-1.html,2,['test'],['test']
Testability,"density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:38508,test,test,38508,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,8,['test'],['test']
Testability,"dependently checked using the original wavels code. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. oremp-grad1; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. fnocc6; Test method/basis with disk_df. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. ddd-function-kwargs; check distributed driver is correctly passing function kwargs. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cbs-xtpl-energy; Extrapolated water energies - density-fitted version. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. mbis-5; MBIS calculation on ZnO. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:10623,test,test,10623,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"der to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""; out = Path(ofile); log = out.with_suffix("".log""). # Get the custom logger; import logging. from psi4 import logger; if not inherit_loglevel:; logger.setLevel(loglevel). # Create formatters; # * detailed: example: 2019-11-20:01:13:46,811 DEBUG [psi4.driver.task_base:156]; f_format_detailed = logging.Formatter(""%(asctime)s,%(msecs)d %(levelname)-8s [%(name)s:%(lineno)d] %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""); # * light: example: 2019-11-20:10:45:21 FINDIFREC CLASS INIT DATA; f_format_light = logging.Formatter(""%(asctime)s %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""). # Create handlers, add formatters to handlers, and add handlers to logger (StreamHandler() also available); filemode = ""a"" if append else ""w""; f_handler = logging.FileHandler(log, filemode); f_handler.setLevel(logging.DEBUG); f_handler.setFormatter(f_format_detailed). if execute:; core.set_output_file(str(out), append); if print_header is True or (print_header is None and not append):; _print_header(); # Warning: baseFilename is not part of the documented API for the logging module and could change.; filenames = [handle.baseFilename for handle in logger.handlers]; if not f_handler.baseFilename in filenames:; logger.addHandler(f_handler); return out. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.10a1.dev61;  · . PSI4. Module code; psi4.extras. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/_modules/psi4/extras.html:9674,log,logger,9674,psi4manual/master/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/master/_modules/psi4/extras.html,14,['log'],"['log', 'logger', 'logging']"
Testability,"der_re = re.compile(r'^\s*([s,p,d,f,g])\s*(\d*)\s*(\d*.\d*)\s*$'); s1_re = re.compile(r'^\s*(\d+.?\d*)\s+(\d+.?\d*)$'); s2_re = re.compile(r'^\s*(\d+)\s+(-?\d+.\d+[e,E][\+,-]\d+)\s*$'); sym_re = re.compile(r'^\s*Sym\s*=\s*(\w*)\s*$'); energy_re = re.compile(r'^\s*Ene\s*=\s*(-?\d*.?\d*[e,E]?\+?-?\d*)\s*$'); spin_re = re.compile(r'^\s*Spin\s*=\s*(\w*)\s*$'); occ_re = re.compile(r'^\s*Occup\s*=\s*(-?\d*.\d*[e,E]?-?\+?\d*)\s*$'). for i in range(max_len):; line = calc[i]. if geom_re.match(line):; c1, c2, c3, c4, c5, c6 = geom_re.match(line).groups(); r1, r2, r3, r4, r5, r6 = geom_re.match(line).groups(); test = compare_strings(r1, c1) and compare_integers(r2, c2) and compare_integers(r3, c3) and compare_values(r4, c4, high_accuracy) and compare_values(r5, c5, high_accuracy) and compare_values(r6, c6, high_accuracy). elif basis_header_re.match(line):; c1, c2, c3 = basis_header_re.match(line).groups(); r1, r2, r3 = basis_header_re.match(ref[i]).groups(); test = compare_strings(r1,c1) and compare_integers(r2,c2) and compare_values(r3,c3,3). elif s1_re.match(line):; c1, c2 = s1_re.match(line).groups(); r1, r2 = s1_re.match(ref[i]).groups(); test = compare_values(r1, c1, high_accuracy) and compare_values(r2, c2, high_accuracy). elif sym_re.match(line):; c = sym_re.match(line).group(1); r = sym_re.match(ref[i]).group(1); test = compare_strings(r, c, f'text line: {line}'). elif energy_re.match(line):; c = energy_re.match(line).group(1); r = energy_re.match(ref[i]).group(1); test = compare_values(r, c, high_accuracy, f'float value: {line}'). elif spin_re.match(line):; c = spin_re.match(line).group(1); r = spin_re.match(ref[i]).group(1); test = compare_strings(r, c, f'text line: {line}'). elif occ_re.match(line):; c = occ_re.match(line).group(1); r = occ_re.match(ref[i]).group(1); test = compare_values(r, c, high_accuracy, f'float value: {line}'). elif s2_re.match(line):; c1, c2 = s2_re.match(line).groups(); r1, r2 = s2_re.match(line).groups(); test = compare_integers(r1, c1, f'i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html:7604,test,test,7604,psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html,10,['test'],['test']
Testability,"detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; Since February 2019, the PSI4 conda package on Linux has been the; large AM8. Likewise, this is the package you get upon; 1conda install libint -c psi4. There is no need for the extra am8 argument previously documented here.; On Mac, the Libint conda package itself and the Libint compiled into; the PSI4 conda package remain AM6.; Beware this issue: https://github.com/psi4/psi4/issues/1533. How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:. ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; # >>> make install. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++11 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - deepdiff (runtime only; e.g., `conda install deepdiff -c conda-forge`); # - networkx (runtime only; e.g., `conda install networkx`); # - pint (runtime only; e.g., `conda install pint -c conda-forge`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compil",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:9908,test,tests,9908,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['test'],['tests']
Testability,"df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cisd-sp; 6-31G** H2O Test CISD Energy Point. cbs-xtpl-dict; Extrapolated water energies. scf-level-shift-cuhf; SCF level shift on a CUHF computation. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. fd-gradient; SCF STO-3G finite-difference tests. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. fnocc2; Test G2 method for H2O. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. scf-level-shift-rohf; SCF level shift on an ROHF computation. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:42935,test,test,42935,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. mbis-1; MBIS calculation on H2O. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-grac; Gradient regularized asymptotic correction (GRAC) test. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. scf-auto-cholesky; Cholesky filter a complete basis. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. tdscf-2; td",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:3656,test,test,3656,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. fsapt-ext-abc2; FSAPT with external charge on dimer. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. cbs-xtpl-energy; Extrapolated water energies - density-fitted version. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. nbody-vmfc-hessian; Computation of VMFC-corrected water trimer Hessian (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. nbody-hessian; Computation of VMFC-corrected HF dimer Hessian. cc13c; Tests RHF CCSD(T)gradients. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fci-dipole; 6-31G H2O Test FCI Energy Point. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. dft-grac; Gradient regularized asymptotic correction (GRAC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:16122,test,test,16122,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"diagram as suitable; for main paper. A single table is formed in sections by bas with; lines mtd within each section. table_merge_suppmat(plotpath, subjoin)[source]¶; Specialization of table_generic into table with as many statistics; as will fit (mostly fullcurve and a few 5min) plus embedded slat; diagram as suitable for supplementary material. Multiple tables are; formed, one for each in bas with lines mtd within each table. table_reactions(modelchem, benchmark='default', sset='default', failoninc=True, columnplan=['indx', 'tagl', 'bm', 'mc', 'e', 'pe'], title='Reaction energies [kcal/mol] for {sset} $\\subset$ {dbse} with {mc}', indextitle='Detailed results for {sset} $\\subset$ {dbse} with {mc}', plotpath='analysis/mols/', standalone=True, theme='rxns', filename=None)[source]¶; Prepare single LaTeX table to filename or return lines if None showing; the per-reaction results for reactions in sset for single or array; or ‘all’ modelchem, where the last uses self.mcs(), model chemistries; versus benchmark. Use failoninc to toggle between command failing; or blank lines in table. Use standalone to toggle between full; compilable document and suitable for inclusion in another LaTeX document.; Use columnplan to customize column (from among columnreservoir, below); layout. Use title and indextitle to customize table caption and; table-of-contents caption, respectively; variables in curly braces will; be substituted. Use theme to customize the ref{tbl:} code. table_scrunch(plotpath, subjoin)[source]¶. table_wrapper(mtd, bas, tableplan, benchmark='default', opt=['CP'], err=['mae'], sset=['default'], dbse=None, opttarget=None, failoninc=True, xlimit=4.0, xlines=[0.0, 0.3, 1.0], ialimit=2.0, plotpath='autogen', subjoin=True, title=None, indextitle=None, suppressblanks=False, standalone=True, theme=None, filename=None)[source]¶; Prepares dictionary of errors for all combinations of mtd, opt,; bas with respect to model chemistry benchmark, mindful of failoninc.; The general p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:41519,benchmark,benchmark,41519,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['benchmark'],['benchmark']
Testability,"dience. To this end, one can navigate to $(OBJDIR)/doc/sphinxman; and build the following targets.:; >>> make help # to see options; >>> make # to build html. >>> make html; >>> make html-user; >>> make html-prog; >>> make latexpdf-user; >>> make latexpdf-prog. This will build the following files, respectively.; build/html/index.html; build/html-user/index.html; build/html-prog/index.html; build/latex-prog/psi4_userman.pdf; build/latex-prog/psi4_progman.pdf. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/lib/python; Databases: docstrings from *.py files in psi4/lib/databases; Basis Sets: *.gbs files in psi4/lib/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories. Some documentation is even extracted from Psi4 objects at runtime. PsiMod: docstrings for the PsiMod built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/lib/python/functional.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, run make realclean and; start from scratch. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/documentation-1.html:2441,test,tests,2441,psi4manual/4.0b2/documentation-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/documentation-1.html,4,['test'],['tests']
Testability,"dient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-1; All-electron MP2 6-31G** geometry optimization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt11; Transition-state optimizations of HOOH to both torsional transition states. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. mints3; Test ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:27453,test,test,27453,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"differences will be used; regardless of the dertype passed to the optimize function.; See pcmsolver/opt-fd for a sample input. The PCM model and molecular cavity are specified in a pcm section that has; to be explicitly typed in by the user. This additional section follows a syntax; that is slightly different from that of PSI4 and is fully documented; here; A typical input for a Hartree–Fock calculation with PCM would look like the following:; molecule NH3 {; symmetry c1; N -0.0000000001 -0.1040380466 0.0000000000; H -0.9015844116 0.4818470201 -1.5615900098; H -0.9015844116 0.4818470201 1.5615900098; H 1.8031688251 0.4818470204 0.0000000000; units bohr; no_reorient; no_com; }. set {; basis STO-3G; scf_type pk; pcm true; pcm_scf_type total; }. pcm = {; Units = Angstrom; Medium {; SolverType = IEFPCM; Solvent = Water; }. Cavity {; RadiiSet = UFF; Type = GePol; Scaling = False; Area = 0.3; Mode = Implicit; }; }. More examples can be found in the directories with PCM tests; pcmsolver/ccsd-pte,; pcmsolver/scf,; pcmsolver/opt-fd,; pcmsolver/dft, and; pcmsolver/dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCM_CC_TYPE¶. PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, zlib. CMake Variables. ENABLE_PCMSolver — CMake variable toggling whether Psi4 builds with PCMSolver; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing include/PCMSolver/pcms",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/pcmsolver-1.html:3741,test,tests,3741,psi4manual/1.4.0/pcmsolver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/pcmsolver-1.html,9,['test'],['tests']
Testability,"difications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/add_tests-1.html:2834,test,test,2834,psi4manual/1.4.0/add_tests-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html,4,['test'],['test']
Testability,"digits+1) + ""f) does not match (%."" + str(digits+1) + ""f) to %d decimal places."") % (label, computed, expected, digits)); sys.exit(1); if ( math.isnan(computed) ):; print(""\t%s: computed value (%f) does not match (%f) to %d decimal places.\n"" % (label, computed, expected, digits)); print(""\tprobably because the computed value is nan.""); sys.exit(1); success(label). [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; print(""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); sys.exit(1); success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if(expected != computed):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); sys.exit(1); success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; print(""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); sys.exit(1); if (expected.symmetry() != computed.symmetry()):; print(""\t%s has %d symmetry, but %s has %d\n."" % (expected.name(), expected.symmetry(), computed.name(), computed.symmetry())); sys.exit(1); nirreps = expected.nirrep(); symmetry = expected.symmetry(); for irrep in range(nirreps):; if",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/util.html:2528,test,test,2528,psi4manual/4.0b4/_modules/util.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/util.html,4,['test'],['test']
Testability,"dipole moment computation, performed by applying a finite electric field and numerical differentiation. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. matrix2; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. opt16; SCF 6-31G(d) optimization of TS for HCN to HNC Performs finite difference hessian calculation. Then optimizes using previous orbitals for scf guess, in subsequent calculations. The last two displacements of the hessian break the plane of symemtry, This test confirms that only the reference geometry, with the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. nbody-vmfc-hessian; Computation of VMFC-corrected water trimer Hessian (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. extern4; External potential calculation involving a TIP3P water and a QM water. Gradient on the external charges is compared to gradient on the QM atoms to validate the gradient on the charges. tdscf-7; TD-HF test variable access. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mom-h2o-3; MOM excitation from LUMO HOMO+3. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. sapt2; SAPT0 aug-cc-pVDZ computation of the",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:16668,test,test,16668,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,4,['test'],['test']
Testability,"dir]). retcode = pytest.main(command); return retcode. [docs]; def set_output_file(; ofile: str,; append: bool = False,; *,; loglevel: int = 20,; execute: bool = True,; print_header: Optional[bool] = None,; inherit_loglevel: bool = False) -> Path:; """"""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""; out = Path(ofile); log = out.with_suffix("".log""). # Get the custom logger; import logging. from psi4 import logger; if not inherit_loglevel:; logger.setLevel(loglevel). # Create formatters; # * detailed: example: 2019-11-20:01:13:46,811 DEBUG [psi4.driver.task_base:156]; f_format_detailed = logging.Formatter(""%(asctime)s,%(msecs)d %(levelname)-8s [%(name)s:%(lineno)d] %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""); # * light: example: 2019-11-20:10:45:21 FINDIFREC CLASS INIT DATA; f_format_light = logging.Formatter(""%(asctime)s %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""). # Create handlers, add formatters to handlers, and add handlers to logger (StreamHandler() also ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html:8583,log,loglevel,8583,psi4manual/1.9.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html,4,['log'],['loglevel']
Testability,"dir]). retcode = pytest.main(command); return retcode. [docs]; def set_output_file(; ofile: str,; append: bool = False,; *,; loglevel: int = 20,; execute: bool = True,; print_header: Optional[bool] = None,; inherit_loglevel: bool = False) -> Path:; """"""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""; out = Path(ofile); log = out.with_suffix("".log""). # Get the custom logger; import logging; from psi4 import logger; if not inherit_loglevel:; logger.setLevel(loglevel). # Create formatters; # * detailed: example: 2019-11-20:01:13:46,811 DEBUG [psi4.driver.task_base:156]; f_format_detailed = logging.Formatter(""%(asctime)s,%(msecs)d %(levelname)-8s [%(name)s:%(lineno)d] %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""); # * light: example: 2019-11-20:10:45:21 FINDIFREC CLASS INIT DATA; f_format_light = logging.Formatter(""%(asctime)s %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""). # Create handlers, add formatters to handlers, and add handlers to logger (StreamHandler() also ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html:8532,log,loglevel,8532,psi4manual/1.8.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html,2,['log'],['loglevel']
Testability,"displaced ozone, with Z-matrix input. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. cepa1; cc-pvdz H2O Test CEPA(1) Energy. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. cc56; EOM-CCSD/6-31g excited state transition data for water cation. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. fnocc5; Test FNO-DF-CCSD(T) energy. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. dft-smoke; DFT Functional Smoke Test. ao-casscf-sp; CASSCF/6-31G** energy point. cepa-module; routing check on lccd, lccsd, cepa(0). dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. cbs-xtpl-alpha; Extrapolated water energies. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and di",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:6983,test,test,6983,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"dissociation curve for molecule 22. ACENES¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. table of contents. A24; RSE42; A24alt; BENCH12; CORE; SSI; BASIC; S66by8; O24by5mb; BBI; BAKERJCC93; NBC10; HTR40; S66; NHTBH; O24by5; BAKERJCC96; S22; RGC10; HBC6; HTBH; JSCH; S22by5; ACENES; HSG; NCB31. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(); A24. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html:13857,benchmark,benchmark,13857,psi4manual/1.4.0/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html,2,['benchmark'],['benchmark']
Testability,"dius set for cavity spheres. Ignored if RADII is set. Type: string; Possible Values: UFF, BONDI; Default: UFF. DDX_SOLUTE_RADIAL_POINTS¶. Number of radial points used to compute the integrals for DDX calculations. Type: integer; Default: 35. DDX_SOLUTE_SPHERICAL_POINTS¶. Number of spherical points used to compute the solute electric potential/field integrals for DDX calculations (A Lebedev Points number). Type: integer; Default: 110. DDX_SOLVATION_CONVERGENCE¶. Tolerance to which DDX linear systems are solved. Type: conv double; Default: 1e-8. DDX_SOLVENT¶. Solvent to use. Not case sensitive. Ignored if SOLVENT_EPSILON is set. Type: string; Default: No Default. DDX_SOLVENT_EPSILON¶. Dielectric constant of the solvent to use. Type: double; Default: 0. Expert¶. DDX_ETA¶. Regularization parameter for characteristic function of sphere overlap. Advanced parameter, which usually does not need to be modified. Valid values are within the range [0, 1]. Type: double; Default: 0.1. DDX_LOGFILE¶. Logfile to dump a full trace of the DDX solver history for debugging. Type: string; Default: No Default. DDX_SHIFT¶. Shift for characteristic function of sphere overlap. Advanced parameter, which usually does not need to be modified. Valid values are within the range [-1, 1] with -100 denoting an automatic selection of the best shift. Type: double; Default: -100.0. table of contents. DDX; General; DDX_DIIS_MAX_VECS; DDX_FMM; DDX_FMM_LOCAL_LMAX; DDX_FMM_MULTIPOLE_LMAX; DDX_INCORE; DDX_LMAX; DDX_MAXITER; DDX_MODEL; DDX_N_LEBEDEV; DDX_RADII; DDX_RADII_SCALING; DDX_RADII_SET; DDX_SOLUTE_RADIAL_POINTS; DDX_SOLUTE_SPHERICAL_POINTS; DDX_SOLVATION_CONVERGENCE; DDX_SOLVENT; DDX_SOLVENT_EPSILON. Expert; DDX_ETA; DDX_LOGFILE; DDX_SHIFT. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; DDX. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__ddx.html:2541,Log,Logfile,2541,psi4manual/1.7.x/autodir_options_c/module__ddx.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__ddx.html,1,['Log'],['Logfile']
Testability,"docs]def set_memory(bytes):; """"""Function to reset the total memory allocation.""""""; psi4.set_memory(bytes). [docs]def get_memory():; """"""Function to return the total memory allocation.""""""; return psi4.get_memory(). [docs]def set_num_threads(nthread):; """"""Function to reset the number of threads to parallelize across.""""""; psi4.set_nthread(nthread). [docs]def get_num_threads():; """"""Function to return the number of threads to parallelize across.""""""; return psi4.nthread(). [docs]def success(label):; """"""Function to print a '*label*...PASSED' line to screen.; Used by :py:func:`util.compare_values` family when functions pass. """"""; msg = '\t{0:.<66}PASSED'.format(label); print(msg); sys.stdout.flush(); psi4.print_out(msg + '\n'). # Test functions; [docs]def compare_values(expected, computed, digits, label):; """"""Function to compare two values. Prints :py:func:`util.success`; when value *computed* matches value *expected* to number of *digits*.; Performs a system exit on failure. Used in input files in the test suite. """"""; message = (""\t%s: computed value (%.*f) does not match (%.*f) to %d decimal places."" % (label, digits+1, computed, digits+1, expected, digits)); if (abs(expected - computed) > 10 ** (-digits)):; print(message); raise TestComparisonError(message); if ( math.isnan(computed) ):; print(message); print(""\tprobably because the computed value is nan.""); raise TestComparisonError(message); success(label). [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); raise TestComparisonError(message); success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html:3824,test,test,3824,psi4manual/1.0.0/_modules/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html,1,['test'],['test']
Testability,"docstring. DTBMV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTBSV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRMM(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRMV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRSM(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRSV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. IDAMAX(arg0, arg1, arg2, arg3); docstring. adc(ref_wfn); Runs the ADC propagator code, for excited states. array_variable(key); Returns copy of the Matrix QCVariable key (case-insensitive); prefer variable(). array_variables(); Returns dictionary of all Matrix QCVariables; prefer variables(). be_quiet(); Redirects output to /dev/null. benchmark_blas1(max_dim, min_time); Perform benchmark traverse of BLAS 1 routines. benchmark_blas2(max_dim, min_time); Perform benchmark traverse of BLAS 2 routines. benchmark_blas3(max_dim, min_time[, nthread]); Perform benchmark traverse of BLAS 3 routines. benchmark_disk(max_dim, min_time); Perform benchmark of PSIO disk performance. benchmark_integrals(max_am, min_time); Perform benchmark of psi integrals (of libmints type). benchmark_math(min_time); Perform benchmark of common double floating point operations including most of cmath. ccdensity(ref_wfn); Runs the code to compute coupled cluster density matrices. ccenergy(ref_wfn); Runs the coupled cluster energy code. cceom(ref_wfn); Runs the equation of motion coupled cluster code for excited states. cchbar(ref_wfn); Runs the code to generate the similarity transformed Hamiltonian. cclambda(ref_wfn); Runs the coupled cluster lambda equations code. ccresponse(ref_wfn); Runs the coupled cluster response theory code. cctransort(ref_wfn); Runs cctransort that transforms and reorders integrals for use in the coupled cluster codes. cctriples(ref_wfn); Runs the coupled cluster (T) energy code. clean(); Remove scratch files. clean_options(); Reset options to clean state. clean_timers(); Reinitialize timers for independent timer.dat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/psi4api-1.html:2821,benchmark,benchmark,2821,psi4manual/1.5.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/psi4api-1.html,3,['benchmark'],['benchmark']
Testability,"drop the '' in above command; Need to do psi4/ and docs/ dirs. Also, license in these files. tests/runtest.py; README.md. Also, in content of psi4/doc/sphinxman/source/conf.py.in#L130. Update counter scripts¶. Log onto vergil as cdsgroup.; Add new years, Python versions, and Psi4 versions as needed.; check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; check vergil if changing any download patterns. Update samples¶. Run make sphinxman at least once by hand; Check in resulting psifiles.py and all the updated and new samples/ files and dirs; Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors¶. Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; Figure out any new “Additional Contributors” authors since last release.; Get permission of new authors and their particulars for codemeta.json.; Edit psi4/header.py accordingly and make PR. Run long tests¶. Run the full test suite with threading parallelism on. There’s one CC test that’s a known fail; in parallel b/c it sets memory very low, iirc. CTest (CLI):; +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. Pytest (API):; +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timer",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:2822,test,tests,2822,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['test'],['tests']
Testability,"ds are subsumed in others. do_scf = True; do_corl = False; do_delta = False; do_delta2 = False; do_delta3 = False; do_delta4 = False; do_delta5 = False. user_writer_file_label = core.get_global_option('WRITER_FILE_LABEL'). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()); molecule.update_geometry(); molstr = molecule.create_psi4_string_from_molecule(); natom = molecule.natom(). # Establish method for correlation energy; cbs_corl_wfn = kwargs.pop('corl_wfn', '').lower(); if cbs_corl_wfn:; do_corl = True. # Establish method for reference energy; if do_corl and cbs_corl_wfn.startswith('c4-'):; default_scf = 'c4-hf'; else:; default_scf = 'hf'; cbs_scf_wfn = kwargs.pop('scf_wfn', default_scf).lower(). if do_scf:; if cbs_scf_wfn not in VARH.keys():; raise ValidationError(""""""Requested SCF method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_scf_wfn)). # ... resume correlation logic; if do_corl:; if cbs_corl_wfn not in VARH.keys():; raise ValidationError(""""""Requested CORL method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_corl_wfn)). cbs_corl_wfn_lesser = kwargs.get('corl_wfn_lesser', cbs_scf_wfn).lower(); if cbs_corl_wfn_lesser not in VARH.keys():; raise ValidationError(""""""Requested CORL method lesser '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta_wfn_lesser)). # Establish method for delta correction energy; if 'delta_wfn' in kwargs:; do_delta = True; cbs_delta_wfn = kwargs['delta_wfn'].lower(); if cbs_delta_wfn not in VARH.keys():; raise ValidationError(""""""Requested DELTA method '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" % (cbs_delta_wfn)). cbs_delta_wfn_lesser = kwargs.get('delta_wfn_lesser', cbs_corl_wfn).lower(); if cbs_delta_wfn_lesser not in VARH.keys():; raise ValidationError(""""""Requested DELTA method lesser '%s' is not recognized. Add it to VARH in wrapper.py to proceed."""""" ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver_cbs.html:39567,log,logic,39567,psi4manual/1.2.1/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/driver_cbs.html,1,['log'],['logic']
Testability,"dy for users or developers to consult. test_input.py¶; Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest’s notice, add a file to the directory named test_input.py.; Below is an example for the psi4/tests/ci-property/test_input.py; from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the CMakeLists.txt.; The def test_ci_property contains the name of the test, now with underscores rather than hyphens.; def test_ identifies it to pytest as a test.; That part of the function name and the name of the file, test_input.py are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ctest_runner(__file__).; This uses QCEngine machinery to execute python psi4 input.dat.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files do need to be registered in psi4/psi4/CMakeLists.txt.; Finally, the label string passed to CTest is here handed to pytest, with a few changes:. psi added automatically, so exclude it when copying from CTest CMakeLists.txt; cli added automatically to distinguish CTest origin from deliberate pytest origin, which have api added; smoke used instead of CTest smoketests; quick used instead of CTest quicktests; long used instead of CTest longtests; addon and <name-of-addon> added automatically when @uusing(""<name-of-addon>"") decorates the test or marks=using(""<name-of-addon>"") marks the test. CTest “labels” are called “marks” in pytest.; Any new marks should be added to psi4/pytest.ini. Running for Debugging¶. PSIthon tests that don’t need extra files to run are easily run from <objdir> via stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:9658,test,test,9658,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['test'],['test']
Testability,"dy-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega= (589 355 nm). nbo; Generation of NBO file. cc54; CCSD dipole with user-specified basis set. scf-guess-read3; Test if the the guess read in the same basis converges. scf-upcast-custom-basis; test scf castup with custom basis sets. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. fci-dipole; 6-31G H2O Test FCI Energy Point. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). fnocc5; Test FNO-DF-CCSD(T) energy. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. mints15; check SP basis Fortran exponent parsing. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:23238,test,test,23238,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"dy_gufunc() wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example,:; cp('mp2'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules.; Psi4 also provides the complete_basis_set() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2), and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ).; Another very useful and powerful feature of Psi4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; database('mp2','S22',cp=1,benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. Table Of Contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. Previous topic; A Psi4 Tutorial; Next topic; Molecule and Geometry Specification. This Page. Show Source. Quick search. Enter searc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/psithoninput-1.html:15023,benchmark,benchmark,15023,psi4manual/1.0.0/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/psithoninput-1.html,2,['benchmark'],['benchmark']
Testability,"dz Energy. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. scf-ecp2; Water-Argon complex with ECP present; check of RHF Hessian. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. mbis-3; MBIS calculation on OH radical. dfccsdat2; DF-A-CCSD(T) cc-pVDZ energy for the NH molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. dfccsdt2; DF-CCSD(T) cc-pVDZ energy for the NH molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfremp-2; density fitted REMP/cc-pVDZ energies for the CH3 radical. mints-helper; A general test of the MintsHelper function. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. mp2-h; check that methods can act on single atom. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. cdremp-1; Cholesky decomposed REMP/cc-pVDZ energies for the CO2 molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). tdscf-6; td-camb3lyp with DiskDF and method/basis specification. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. casscf-sp; CASSCF/6-31G** energy point. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-func; optimization with method defined via cbs.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:33668,test,test,33668,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"e (BFDb). cp 'off' || 'on'; rlxd 'off'. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm (broken link). cp 'off'; rlxd 'off'; subset. 'small'; 'large'. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani et al. PCCP 9 6106 (2007).; Pyridine Dimers from Hohenstein et al. JPCA 113 878 (2009).; Collection into NBC10 from Burns et al. JCP 134 084107 (2011).; Revised reference interaction energies (NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'NBC100' Burns et al. JCP 134 084107 (2011).; \(\Rightarrow\) 'NBC10A' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'HB' hyd",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_available_databases.html:4049,benchmark,benchmark,4049,psi4manual/master/autodoc_available_databases.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_available_databases.html,2,['benchmark'],['benchmark']
Testability,"e (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable; psi4 --test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed,. can run in parallel, though final file cleanup may not exit cleanly. pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n`getconf _NPROCESSORS_ONLN`. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:50847,test,tests,50847,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['test'],['tests']
Testability,"e (role of double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Managing: Git, Conda, CMake and all that; Adding Add-Ons. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html:11486,test,testing,11486,psi4manual/1.4.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html,2,['test'],['testing']
Testability,"e (role of double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Managing: Git, Conda, CMake and all that; Adding Add-Ons. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/manage_addon-1.html:11486,test,testing,11486,psi4manual/1.5.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/manage_addon-1.html,2,['test'],['testing']
Testability,"e = calc[i]. if geom_re.match(line):; c1, c2, c3, c4, c5, c6 = geom_re.match(line).groups(); r1, r2, r3, r4, r5, r6 = geom_re.match(line).groups(); test = compare_strings(r1, c1) and compare_integers(r2, c2) and compare_integers(r3, c3) and compare_values(r4, c4, high_accuracy) and compare_values(r5, c5, high_accuracy) and compare_values(r6, c6, high_accuracy). elif basis_header_re.match(line):; c1, c2, c3 = basis_header_re.match(line).groups(); r1, r2, r3 = basis_header_re.match(ref[i]).groups(); test = compare_strings(r1,c1) and compare_integers(r2,c2) and compare_values(r3,c3,3). elif s1_re.match(line):; c1, c2 = s1_re.match(line).groups(); r1, r2 = s1_re.match(ref[i]).groups(); test = compare_values(r1, c1, high_accuracy) and compare_values(r2, c2, high_accuracy). elif sym_re.match(line):; c = sym_re.match(line).group(1); r = sym_re.match(ref[i]).group(1); test = compare_strings(r, c, f'text line: {line}'). elif energy_re.match(line):; c = energy_re.match(line).group(1); r = energy_re.match(ref[i]).group(1); test = compare_values(r, c, high_accuracy, f'float value: {line}'). elif spin_re.match(line):; c = spin_re.match(line).group(1); r = spin_re.match(ref[i]).group(1); test = compare_strings(r, c, f'text line: {line}'). elif occ_re.match(line):; c = occ_re.match(line).group(1); r = occ_re.match(ref[i]).group(1); test = compare_values(r, c, high_accuracy, f'float value: {line}'). elif s2_re.match(line):; c1, c2 = s2_re.match(line).groups(); r1, r2 = s2_re.match(line).groups(); test = compare_integers(r1, c1, f'int value: {line}') and compare_values(r2, c2, high_accuracy, f'float value: {line}'). else:; test = compare_strings(line, ref[i]). tests.append(test). return compare_integers(True, all(tests), label). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.8.2;  · . PSI4. Module code; psi4.driver.p4util.fchk. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:04AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/fchk.html:8198,test,test,8198,psi4manual/1.8.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/fchk.html,16,['test'],"['test', 'tests']"
Testability,"e = calc[i]. if geom_re.match(line):; c1, c2, c3, c4, c5, c6 = geom_re.match(line).groups(); r1, r2, r3, r4, r5, r6 = geom_re.match(line).groups(); test = compare_strings(r1, c1) and compare_integers(r2, c2) and compare_integers(r3, c3) and compare_values(r4, c4, high_accuracy) and compare_values(r5, c5, high_accuracy) and compare_values(r6, c6, high_accuracy). elif basis_header_re.match(line):; c1, c2, c3 = basis_header_re.match(line).groups(); r1, r2, r3 = basis_header_re.match(ref[i]).groups(); test = compare_strings(r1,c1) and compare_integers(r2,c2) and compare_values(r3,c3,3). elif s1_re.match(line):; c1, c2 = s1_re.match(line).groups(); r1, r2 = s1_re.match(ref[i]).groups(); test = compare_values(r1, c1, high_accuracy) and compare_values(r2, c2, high_accuracy). elif sym_re.match(line):; c = sym_re.match(line).group(1); r = sym_re.match(ref[i]).group(1); test = compare_strings(r, c, f'text line: {line}'). elif energy_re.match(line):; c = energy_re.match(line).group(1); r = energy_re.match(ref[i]).group(1); test = compare_values(r, c, high_accuracy, f'float value: {line}'). elif spin_re.match(line):; c = spin_re.match(line).group(1); r = spin_re.match(ref[i]).group(1); test = compare_strings(r, c, f'text line: {line}'). elif occ_re.match(line):; c = occ_re.match(line).group(1); r = occ_re.match(ref[i]).group(1); test = compare_values(r, c, high_accuracy, f'float value: {line}'). elif s2_re.match(line):; c1, c2 = s2_re.match(line).groups(); r1, r2 = s2_re.match(line).groups(); test = compare_integers(r1, c1, f'int value: {line}') and compare_values(r2, c2, high_accuracy, f'float value: {line}'). else:; test = compare_strings(line, ref[i]). tests.append(test). return compare_integers(True, all(tests), label). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.9.1;  · . PSI4. Module code; psi4.driver.p4util.fchk. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/p4util/fchk.html:8188,test,test,8188,psi4manual/1.9.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/p4util/fchk.html,16,['test'],"['test', 'tests']"
Testability,"e DC-12 functional with the same algorithms. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. mints2-bse; Similar to mints2, but using the BSE to specify the basis sets. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. soscf-large; Second-order SCF convergnece: Benzene. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. mom-h2o-3; MOM excitation from LUMO HOMO+3. dfccsdt2; DF-CCSD(T) cc-pVDZ energy for the NH molecule. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. pywrap-cbs1; V",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:18982,test,tests,18982,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"e GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. import math; from functools import partial; from typing import Callable, Optional, Union; import logging. import numpy as np. from psi4 import core; from psi4.driver.p4util.exceptions import ValidationError; nppp = partial(np.array_str, max_line_width=120, precision=8, suppress_small=True) # when safe, ""from psi4.driver import nppp""; from psi4.driver.aliases import sherrill_gold_standard, allen_focal_point. logger = logging.getLogger(__name__). _zeta_val2sym = {k + 2: v for k, v in enumerate('dtq5678')}; Extrapolatable = Union[float, core.Matrix, core.Vector]. [docs]; def xtpl_highest_1(functionname: str, zHI: int, valueHI: Extrapolatable, verbose: int = 1, **kwargs) -> Extrapolatable:; r""""""Scheme for total or correlation energies with a single basis or the highest; zeta-level among an array of bases. Used by :py:func:`~psi4.driver.cbs`. Parameters; ----------; functionname; Name of the CBS component (e.g., 'mp2') used in summary printing.; zHI; Zeta-level, only used for printing.; valueHI; Energy, gradient, or Hessian value at the basis set.; verbose; Controls volume of printing. Returns; -------; float or ~numpy.ndarray; Returns :math:`E_{total}^{\infty}` which is equal to valueHI.; Eponymous function applied to input zetas and values; type from `valueHI`. Notes; -----; .. math:: E_{total}^X = E_{total}^{\infty}. Examples; --------; >>> # [1] Fancy way to get HF/cc-pCVQZ; >>> psi4.energy('cbs',",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs_helper.html:1535,log,logger,1535,psi4manual/1.8.x/_modules/psi4/driver/driver_cbs_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_cbs_helper.html,4,['log'],"['logger', 'logging']"
Testability,"e GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. import math; from functools import partial; from typing import Callable, Optional, Union; import logging. import numpy as np. from psi4 import core; from psi4.driver.p4util.exceptions import ValidationError; nppp = partial(np.array_str, max_line_width=120, precision=8, suppress_small=True) # when safe, ""from psi4.driver import nppp""; from psi4.driver.aliases import sherrill_gold_standard, allen_focal_point. logger = logging.getLogger(__name__). _zeta_val2sym = {k + 2: v for k, v in enumerate('dtq5678')}; Extrapolatable = Union[float, core.Matrix, core.Vector]. [docs]def xtpl_highest_1(functionname: str, zHI: int, valueHI: Extrapolatable, verbose: int = 1, **kwargs) -> Extrapolatable:; r""""""Scheme for total or correlation energies with a single basis or the highest; zeta-level among an array of bases. Used by :py:func:`~psi4.cbs`. Parameters; ----------; functionname; Name of the CBS component (e.g., 'mp2') used in summary printing.; zHI; Zeta-level, only used for printing.; valueHI; Energy, gradient, or Hessian value at the basis set.; verbose; Controls volume of printing. Returns; -------; float or ndarray; Returns :math:`E_{total}^{\infty}` which is equal to valueHI.; Eponymous function applied to input zetas and values; type from `valueHI`. Notes; -----; .. math:: E_{total}^X = E_{total}^{\infty}. Examples; --------; >>> # [1] Fancy way to get HF/cc-pCVQZ; >>> psi4.energy('cbs', scf_wfn='hf', s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html:1533,log,logger,1533,psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html,4,['log'],"['logger', 'logging']"
Testability,"e GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. import math; from functools import partial; from typing import Callable, Optional, Union; import logging. import numpy as np. from psi4 import core; from psi4.driver.p4util.exceptions import ValidationError; nppp = partial(np.array_str, max_line_width=120, precision=8, suppress_small=True) # when safe, ""from psi4.driver import nppp""; from psi4.driver.aliases import sherrill_gold_standard, allen_focal_point. logger = logging.getLogger(__name__). _zeta_val2sym = {k + 2: v for k, v in enumerate('dtq5678')}; Extrapolatable = Union[float, core.Matrix, core.Vector]. [docs]def xtpl_highest_1(functionname: str, zHI: int, valueHI: Extrapolatable, verbose: int = 1, **kwargs) -> Extrapolatable:; r""""""Scheme for total or correlation energies with a single basis or the highest; zeta-level among an array of bases. Used by :py:func:`~psi4.driver.cbs`. Parameters; ----------; functionname; Name of the CBS component (e.g., 'mp2') used in summary printing.; zHI; Zeta-level, only used for printing.; valueHI; Energy, gradient, or Hessian value at the basis set.; verbose; Controls volume of printing. Returns; -------; float or ~numpy.ndarray; Returns :math:`E_{total}^{\infty}` which is equal to valueHI.; Eponymous function applied to input zetas and values; type from `valueHI`. Notes; -----; .. math:: E_{total}^X = E_{total}^{\infty}. Examples; --------; >>> # [1] Fancy way to get HF/cc-pCVQZ; >>> psi4.energy('cbs', s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs_helper.html:1533,log,logger,1533,psi4manual/1.7.x/_modules/psi4/driver/driver_cbs_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs_helper.html,4,['log'],"['logger', 'logging']"
Testability,"e H2O+ cation. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. dft-reference; MP2 with a PBE0 reference computation. dft-custom; DFT custom functional test. dct10; The multiple guesses for DCT amplitudes for ODC-12. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mbis-4; MBIS calculation on NaCl. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. fsapt-ext-abc; FSAPT with external charge on trimer. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. stability3; Test LDA stability analysis against QChem. scf-level-shift-cuhf; SCF level shift on a CUHF computation. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only single",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:41099,test,test,41099,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"e MAX_AM_ERI=5 and can run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted.; Details about angular momentum settings are available here; psi4/external/upstream/libint2/CMakeLists.txt; . How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Li",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_planning.html:15077,test,tests,15077,psi4manual/1.8.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_planning.html,1,['test'],['tests']
Testability,"e NH molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cbs-xtpl-dict; Extrapolated water energies. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. linK-2; RKS Linear Exchange Algorithm test for benzene. cc36; CC2(RHF)/cc-pVDZ energy of H2O. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. mp2-h; check that methods can act on single atom. fnocc3; Test FNO-QCISD(T) computation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. dfremp-2; density fitted REMP/cc-pVDZ energies for the CH3 radical. fnocc4; Test FNO-DF-CCSD(T) energy. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cdremp-1; Cholesky decomposed REMP/cc-pVDZ energies for the CO2 molecule. cc52; CCSD Response for H2O2. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals store",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:36586,test,tests,36586,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"e \(^2\Sigma^+\) state of the CN radical, with Cartesian input. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. mbis-6; MBIS calculation on H2O. omp2-3; OMP2 cc-pVDZ energy for the NO radical. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cdoremp-energy1; Cholesky decomposed OO-REMP/cc-pVDZ energy for the H2O molecule. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. numpy-array-interface; Numpy interface testing. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. cc13d; Tests analytic CC2 gradients. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. scf3; File retention, docc, socc, and bond distances specified explicitly. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:41357,test,tests,41357,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"e a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addon",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:55547,test,test,55547,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,4,['test'],['test']
Testability,"e a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/build_planning.html:56791,test,test,56791,psi4manual/master/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html,1,['test'],['test']
Testability,"e a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n`getconf _NPROCESSORS_ONLN`; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n`getconf _NPROCESSORS_ONLN`. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; te",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:55157,test,test,55157,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['test'],['test']
Testability,"e absolute positions, while the latter are relative. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. mints-helper; A general test of the MintsHelper function. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). scf-upcast-custom-basis; test scf castup with custom basis sets. dct10; The multiple guesses for DCT amplitudes for ODC-12. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. sapt-ecp; sapt0 of charged system in ECP basis set. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cbs-xtpl-alpha; Extrapolated water energies. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. casscf-semi; CASSCF/6-31G** energy point",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:22017,test,test,22017,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"e added to psi4/pytest.ini. Running for Debugging¶. PSIthon tests that don’t need extra files to run are easily run from <objdir> via stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out.; All PSIthon tests are runable through CTest, and output files appear in <objdir>/tests/<test-name>/output.dat and stdout results appear in <objdir>/Testing/Temporary/LastTest.log*. Adding PsiAPI Test Cases¶; To create a new test case, either create a new file or add to an existing file under psi4/tests/pytests. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; A test file may contain many tests, each of which is an ordinary Python function with name starting test_. This is how pytest knows to collect it.; No registration required to bring a test to pytest’s attention.; No registration required to bring a test to CMake’s attention. If a test needs additional files, register them in psi4/psi4/CMakeLists.txt. A few notes on test contents:. Import testing functions from utils and use Python assert: assert compare_values(expected, computed, ...).; Don’t worry about cleaning up files or resetting options. A function in psi4/tests/pytests/conftest.py does this automatically between every test.; Especially if using data or functions from outside a test, run a variety of tests at different pytest -n <N> levels to mix up test ordering. If tests fail that pass when run alone, you’ve got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. For every new test file, add pytestmark = [pytest.mark.psi, pytest.mark.api] at the top.; This ensures that every test has the psi mark and every PsiAPI test has the api mark to contrast with PSIthon tests with cli mark.; There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m <mar",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:11408,test,test,11408,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['test'],['test']
Testability,"e analytic gradient. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. dlpnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. scf-level-shift-cuhf; SCF level shift on a CUHF computation. cubeprop; RHF orbitals and density for water. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. fsapt-ext-abc2; FSAPT with exte",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:10864,test,test,10864,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"e code (git repository or zipped archive from; https://github.com/psi4/psi4. CompilersPSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. Compiler requirements are primarily; C++17 compliance (now GCC version 7.0 or above).; For some architectures, a precompiled binary is available. See Compiling and Installing for details. PythonPSI4 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; in accordance with other scientific software projects).; PSI4 1.3 supports Python 3.6 and 3.7.; PSI4 1.4 supports Python 3.6, 3.7, 3.8, and 3.9.; PSI4 1.5 supports Python 3.7, 3.8, and 3.9.; PSI4 1.6 supports Python 3.8, 3.9, and 3.10.; PSI4 1.7 supports Python 3.8, 3.9, 3.10, and 3.11 (no binary packages for 3.11).; PSI4 1.8 supports Python 3.8, 3.9, 3.10, and 3.11.; PSI4 1.9 supports Python 3.8, 3.9, 3.10, 3.11, and 3.12.; The future plan is to (1) be compatible with 3.8 and above until there is a good reason to drop; older versions but (2) only build and test for versions conda-forge supports.; The current master supports 3.8, 3.9, 3.10, 3.11, and 3.12. License¶; PSI4 is distributed under the GNU Lesser General Public License; version 3, LGPL-3.0. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build PSI4 without any; General GPL dependencies. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; PSI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/introduction.html:23412,test,test,23412,psi4manual/1.9.x/introduction.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/introduction.html,1,['test'],['test']
Testability,"e continuum model¶; The inclusion of a PCM description of the solvent into your calculation; is achieved by setting pcm true in your input file.; Psi4 understands the additional option pcm_scf_type with possible values total; (the default) or separate.; The latter forces the separate handling of nuclear and electronic electrostatic potentials and; polarization charges. It is mainly useful for debugging. Note; At present PCM can only be used for energy calculations with SCF wavefunctions.; Moreover, the PCMSolver library cannot exploit molecular point group symmetry. The PCM model and molecular cavity are specified in a pcm section that has; to be explicitly typed in by the user. This additional section follows a syntax; that is slightly different from that of Psi4 and is fully documented; here; A typical input for a Hartree-Fock calculation with PCM would look like the following:; molecule NH3 {; symmetry c1; N -0.0000000001 -0.1040380466 0.0000000000; H -0.9015844116 0.4818470201 -1.5615900098; H -0.9015844116 0.4818470201 1.5615900098; H 1.8031688251 0.4818470204 0.0000000000; units bohr; no_reorient; no_com; }. set {; basis STO-3G; scf_type pk; pcm true; pcm_scf_type total; }. pcm = {; Units = Angstrom; Medium {; SolverType = IEFPCM; Solvent = Water; }. Cavity {; RadiiSet = UFF; Type = GePol; Scaling = False; Area = 0.3; Mode = Implicit; }; }. More examples can be found in the directories with PCM tests; pcmsolver/pcm_scf,; pcmsolver/pcm_dft, and; pcmsolver/pcm_dipole. Table Of Contents. Interface to PCMSolver; Using the polarizable continuum model. Previous topic; 2aminopyridine; Next topic; Interface to Molden, molden(). This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] » ; Interfaces: Enhancing Psi4 Capabilities ». © Copyright 2016, The Psi4 Project.; Last updated on Tuesday, 05 July 2016 02:54AM.; Created using Sphinx 1.3.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/pcmsolver-1.html:2479,test,tests,2479,psi4manual/1.0.0/pcmsolver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/pcmsolver-1.html,2,['test'],['tests']
Testability,"e convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. T",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/add_tests-1.html:3993,test,test,3993,psi4manual/1.4.0/add_tests-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html,4,['test'],['test']
Testability,"e end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found th",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/conda-1.html:15292,test,test,15292,psi4manual/1.4.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html,9,['test'],['test']
Testability,"e following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid <cmake:gau2grid — [what is this?] [min version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. libefp — [what is this?] [min version]; erd — [what is this?] [min version]; Fortran Compiler. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-only capabilities:. cfour — [what is this?]; dftd3 — [what is this?]; gcp — [what",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:5378,test,testing,5378,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['test'],['testing']
Testability,"e following command can be useful.; 1>>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; 1>>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp). Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See the setup note at How to run Ps",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:40085,test,testing,40085,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,4,['test'],"['testing', 'tests']"
Testability,"e for Ca != Cb. scf-response2; Compute the dipole polarizability for water with custom basis set. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. cisd-sp; 6-31G** H2O Test CISD Energy Point. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. casscf-fzc-sp; CASSCF/6-31G** energy point. sapt-sf1; Tests the Psi4 SF-SAPT code. sad-scf-type; Test SAD SCF guesses on noble gas atom. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cc13d; Tests analytic CC2 gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cubeprop-esp; RHF orbitals and density for water. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:20664,test,tested,20664,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['tested']
Testability,"e for serial mode where each job takes all the resources of the parent Psi4 job.; # distributed runs through QCFractal will likely need a different setup.; task_config={; # B -> GiB; ""memory"": core.get_memory() / (2 ** 30),; ""ncores"": core.get_num_threads(),; },; ); # ... END. #pp.pprint(self.result.dict()); #print(""... JSON returns >>>""); core.set_output_file(gof, True); core.reopen_outfile(); logger.debug(pp.pformat(self.result.dict())); if stdout := self.result.dict()[""stdout""]:; core.print_out(_drink_filter(stdout)); self.computed = True. [docs]; def get_results(self, client: Optional[""qcportal.FractalClient""] = None) -> AtomicResult:; """"""Return results as Atomic-flavored QCSchema."""""". if self.result:; return self.result. if client:; try:; # QCFractal/QCPortal v0.15.8; result = client.query_results(id=self.result_id); qca_next_branch = False; except AttributeError:; # QCFractal/QCPortal `next`; record = client.get_singlepoints(record_ids=self.result_id); qca_next_branch = True. logger.debug(f""Querying AtomicResult {self.result_id}""). if not qca_next_branch:; # QCFractal v0.15.8; if len(result) == 0:; return self.result. self.result = result[0]. else:; # QCFractal `next`; if record.status != ""complete"":; return self.result. self.result = _singlepointrecord_to_atomicresult(record). return self.result. def _singlepointrecord_to_atomicresult(spr: ""qcportal.singlepoint.SinglepointRecord"") -> AtomicResult:; atres = spr.to_qcschema_result(). # QCFractal `next` database stores return_result, properties, and extras[""qcvars""] merged; # together and with lowercase keys. `to_qcschema_result` partitions properties back out,; # but we need to restore qcvars keys, types, and dimensions.; qcvars = atres.extras.pop(""extra_properties""); qcvars.pop(""return_result""); qcvars = {k.upper(): p4util.plump_qcvar(k, v) for k, v in qcvars.items()}; atres.extras[""qcvars""] = qcvars. return atres. def _drink_filter(stdout: str) -> str:; """"""Don't mess up the widespread ``grep beer`` test of Ps",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/task_base.html:7849,log,logger,7849,psi4manual/1.8.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/task_base.html,2,['log'],['logger']
Testability,"e if two floats or float arrays are element-wise equal within a tolerance. Parameters:. expected (Union[float, List, ndarray]) – float or float array-like; Reference value against which computed is compared.; computed (Union[float, List, ndarray]) – float or float array-like; Input value to compare against expected.; atol (float) – Absolute tolerance (see formula below).; label (str) – Label for passed and error messages. Defaults to calling function name.; rtol (float) – Relative tolerance (see formula below). By default set to zero so atol dominates.; equal_nan (bool) – Passed to numpy.isclose(). Compare NaN’s as equal.; equal_phase (bool) – Compare computed or its opposite as equal.; passnone (bool) – Return True when both expected and computed are None.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Callable) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Return type:; Union[bool, Tuple[bool, str]]. Returns:. allclose (bool) – Returns True if expected and computed are equal within tolerance; False otherwise.; message (str) – When return_message=True, also return passed or error message. Notes. Akin to numpy.allclose().; For scalar float-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; float-comparable types. For mixed types, use compare_recursive().; Sets rtol to zero to match expected Psi4 behaviour, otherwise measured as:. absolute(computed - expected) <= (atol + rtol * absolute(expected)). psi4.compare_integers(expected, computed[, label, *, **kwargs])¶; Comparison function for integers, strings, booleans, or integer array-like data structures.; See qcelemental.testing.compare() for details.; psi4.compare_strings is an alias to this. qcelemental.testing.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=None)[so",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/add_tests.html:16478,test,testing,16478,psi4manual/1.8.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/add_tests.html,1,['test'],['testing']
Testability,"e implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. __all__ = [; ""expand_cbs_methods"",; ""task_planner"",; ""TaskComputers"",; ]. import os; import copy; import logging; from typing import Dict, Tuple, Union. from qcelemental.models import DriverEnum; from psi4.driver import p4util, pp; from psi4.driver.task_base import AtomicComputer; from psi4.driver.driver_findif import FiniteDifferenceComputer; from psi4.driver.driver_nbody import ManyBodyComputer; from psi4.driver.driver_cbs import CompositeComputer, composite_procedures, cbs_text_parser; from psi4.driver.driver_util import negotiate_derivative_type, negotiate_convergence_criterion; from psi4 import core. logger = logging.getLogger(__name__). TaskComputers = Union[AtomicComputer, CompositeComputer, FiniteDifferenceComputer, ManyBodyComputer]. [docs]; def expand_cbs_methods(method: str, basis: str, driver: DriverEnum, **kwargs) -> Tuple[str, str, Dict]:; """"""Sort out the user input method string into recognized fields.; Handles cases like:. (i) ``""mp2""`` -- passes through;; (ii) ``""mp2/cc-pvdz""`` -- broken into method and basis fields;; (iii) ``""mp2/cc-pv[d,t]z""`` -- processed into method=""cbs"" & CBSMetadata spec;; (iv) ``method=""cbs"", cbsmeta=CBSMetadata`` -- passes through. Parameters; ----------; method; User first argument to driver function. A string hint of the method --; see cases above.; basis; User basis hint.; driver; The calling driver function. Note for finite difference that this is; the target driver, not the means driver. """"""; if method == 'cbs' and kwargs.get('cbsmeta', False):; return method, basis, kwargs['cbsmeta']. # Expand CBS methods; if ""/"" in method:; kwargs[""ptype""] = dri",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/task_planner.html:1722,log,logger,1722,psi4manual/1.8.x/_modules/psi4/driver/task_planner.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/task_planner.html,4,['log'],"['logger', 'logging']"
Testability,"e implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. __all__ = [; ""expand_cbs_methods"",; ""task_planner"",; ""TaskComputers"",; ]. import os; import copy; import logging; from typing import Dict, Tuple, Union. from qcelemental.models import DriverEnum; from psi4.driver import p4util, pp; from psi4.driver.task_base import AtomicComputer; from psi4.driver.driver_findif import FiniteDifferenceComputer; from psi4.driver.driver_nbody import ManyBodyComputer; from psi4.driver.driver_cbs import CompositeComputer, composite_procedures, cbs_text_parser; from psi4.driver.driver_util import negotiate_derivative_type, negotiate_convergence_criterion; from psi4 import core. logger = logging.getLogger(__name__). TaskComputers = Union[AtomicComputer, CompositeComputer, FiniteDifferenceComputer, ManyBodyComputer]. [docs]def expand_cbs_methods(method: str, basis: str, driver: DriverEnum, **kwargs) -> Tuple[str, str, Dict]:; """"""Sort out the user input method string into recognized fields.; Handles cases like:. (i) ``""mp2""`` -- passes through;; (ii) ``""mp2/cc-pvdz""`` -- broken into method and basis fields;; (iii) ``""mp2/cc-pv[d,t]z""`` -- processed into method=""cbs"" & CBSMetadata spec;; (iv) ``method=""cbs"", cbsmeta=CBSMetadata`` -- passes through. Parameters; ----------; method; User first argument to driver function. A string hint of the method --; see cases above.; basis; User basis hint.; driver; The calling driver function. Note for finite difference that this is; the target driver, not the means driver. """"""; if method == 'cbs' and kwargs.get('cbsmeta', False):; return method, basis, kwargs['cbsmeta']. # Expand CBS methods; if ""/"" in method:; kwargs[""ptype""] = drive",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_planner.html:1720,log,logger,1720,psi4manual/1.7.x/_modules/psi4/driver/task_planner.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_planner.html,4,['log'],"['logger', 'logging']"
Testability,"e include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplugin +aointegrals; >>> psi4 --new-plugin myplugin +mointegrals; >>> psi4 --new-plugin myplugin +sointegrals; >>> psi4 --new-plugin myplugin +wavefunction. Several stable sample plugin directories are available to consult in the; psi4/tests directory. Other plugin directories can be used as models; but are in active development. For documentation on plugin modules, see; Available Plugins. psi4/tests/plugin_aointegrals/aointegrals.cc.in; An example that uses the LibMints library to generate and print AO basis (no symmetry) integrals.; psi4/tests/plugin_backtrans/backtrans.cc.in; A test of the one- and two-particle density matrix backtransformation code.; psi4/tests/plugin_ccsort/plugin_ccsort.cc.in; psi4/tests/plugin_mointegrals/mointegrals.cc.in; An example that uses the LibTrans library to generate and print MO basis integrals.; psi4/tests/plugin_mp2/plugin_mp2.cc.in; A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; psi4/tests/plugin_sointegrals/sointegrals.cc.in; An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directory contains the following files. Makefile — Makefile for the directory. As long as you are the; only user of the plugin, this should not need editing. After any change to; the plugin C++ code, make must be run in the plugin directory to; recompile the myplugin.so executable, but recompiling the main; PSI4 code is not necessary. (PSI4 must have originally been; compiled with configure directive --with-plugins.). input.dat — Sample input file for the plugin (old style).; Modifications to a standard input file needed to run the plugin are (1); the line plugin_load(""./myplugin.so"") before any keyword setting to; load the plugin’s options into PSI4’s o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/plugins-1.html:3827,test,tests,3827,psi4manual/4.0b2/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins-1.html,2,['test'],['tests']
Testability,"e initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. dft-jk; DFT JK on-disk test. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. scf-response2; Compute the dipole polarizability for water with custom basis set. fcidump; test FCIDUMP functionality for rhf/uhf. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. dft2; DFT Functional Test. fd-gradient; SCF STO-3G finite-difference tests. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc4; Test FNO-DF-CCSD(T) energy. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. mbis-6; MBIS calculation on H2O. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. pyw",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:27404,test,tests,27404,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['tests']
Testability,"e interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al.,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:24870,test,tests,24870,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['tests']
Testability,"e name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplugin +aointegrals; >>> psi4 --new-plugin myplugin +mointegrals; >>> psi4 --new-plugin myplugin +sointegrals; >>> psi4 --new-plugin myplugin +wavefunction. Several stable sample plugin directories are available to consult in the; psi4/tests directory. Other plugin directories can be used as models; but are in active development. For documentation on plugin modules, see; Available Plugins. psi4/tests/plugin_aointegrals/aointegrals.cc.in; An example that uses the LibMints library to generate and print AO basis (no symmetry) integrals.; psi4/tests/plugin_backtrans/backtrans.cc.in; A test of the one- and two-particle density matrix backtransformation code.; psi4/tests/plugin_ccsort/plugin_ccsort.cc.in; psi4/tests/plugin_mointegrals/mointegrals.cc.in; An example that uses the LibTrans library to generate and print MO basis integrals.; psi4/tests/plugin_mp2/plugin_mp2.cc.in; A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; psi4/tests/plugin_sointegrals/sointegrals.cc.in; An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directory contains the following files. Makefile — Makefile for the directory. As long as you are the; only user of the plugin, this should not need editing. After any change to; the plugin C++ code, make must be run in the plugin directory to; recompile the myplugin.so executable, but recompiling the main; PSI4 code is not necessary. (PSI4 must have originally been; compiled with configure directive --with-plugins.). inp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/plugins-1.html:3567,test,test,3567,psi4manual/4.0b2/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins-1.html,2,['test'],['test']
Testability,"e number of threads to parallelize across.""""""; return PsiMod.nthread(). [docs]def success(label):; """"""Function to print a '*label*...PASSED' line to screen.; Used by :py:func:`util.compare_values` family when functions pass. """"""; print '\t{0:.<66}PASSED'.format(label); sys.stdout.flush(). # Test functions; [docs]def compare_values(expected, computed, digits, label):; """"""Function to compare two values. Prints :py:func:`util.success`; when value *computed* matches value *expected* to number of *digits*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (abs(expected - computed) > 10 ** (-digits)):; print ""\t%s: computed value (%f) does not match (%f) to %d digits."" % (label, computed, expected, digits); sys.exit(1); success(label). [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; print ""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected); sys.exit(1); success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if(expected != computed):; print ""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected); sys.exit(1); success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; print ""\t%s has ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/util.html:1667,test,test,1667,psi4manual/4.0b2/_modules/util.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/util.html,2,['test'],['test']
Testability,"e of double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Managing: Git, Conda, CMake and all that; Adding Add-Ons. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/manage_addon.html:11486,test,testing,11486,psi4manual/1.7.x/manage_addon.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/manage_addon.html,1,['test'],['testing']
Testability,"e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dft2; DFT Functional Test. scf6; Tests RHF/ROHF/UHF SCF gradients. scf-guess-read3; Test if the the guess read in the same basis converges. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. tdscf-1; td-uhf test on triplet states of methylene (rpa). mbis-4; MBIS calculation on NaCl. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point w",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:14321,test,tests,14321,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"e only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. fci-coverage; 6-31G H2O Test for coverage. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). sad-scf-type; Test SAD SCF guesses on noble gas atom. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. props4; Electrostatic potential and electric field evaluated on a grid around water. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:25175,test,test,25175,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"e package; #; # Copyright (c) 2007-2022 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. __all__ = [; ""AtomicComputer"",; ""BaseComputer"",; ""EnergyGradientHessianWfnReturn"",; ]. import abc; import copy; import logging; from typing import Any, Dict, Optional, Tuple, Union. from pydantic import Field, validator; import qcelemental as qcel; from qcelemental.models import DriverEnum, AtomicInput, AtomicResult; qcel.models.molecule.GEOMETRY_NOISE = 13 # need more precision in geometries for high-res findif; import qcengine as qcng. from psi4 import core. logger = logging.getLogger(__name__). EnergyGradientHessianWfnReturn = Union[float, core.Matrix, Tuple[Union[float, core.Matrix], core.Wavefunction]]. class BaseComputer(qcel.models.ProtoModel):; @abc.abstractmethod; def compute(self):; pass. @abc.abstractmethod; def plan(self):; pass. class Config(qcel.models.ProtoModel.Config):; extra = ""allow""; allow_mutation = True. [docs]class AtomicComputer(BaseComputer):; """"""Computer for analytic single-geometry computations."""""". molecule: Any = Field(..., description=""The molecule to use in the computation.""); basis: str = Field(..., description=""The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, ...)."")",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/task_base.html:1217,log,logging,1217,psi4manual/1.6.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/task_base.html,2,['log'],['logging']
Testability,"e point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h metha",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:19043,test,test,19043,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"e published]. S^inf Keywords¶. DO_IND_EXCH_SINF¶. For SAPT(DFT) computes the \(S^{inf}\) Exchange-Induction terms. Type: boolean; Default: false. DO_DISP_EXCH_SINF¶. For SAPT(DFT) computes the \(S^{inf}\) Exchange-Dispersion terms. Type: boolean; Default: false. SAPT0-D¶; In SAPT0, the computation of \(E_{disp}^{(20)} + E_{exch-disp}^{(20)}\) represents; the computational bottleneck. One can avoid this bottleneck by replacing these; dispersion terms with the empirical D3 corrections developed by Grimme.; Grimme’s dispersion corrections are discussed here.; The corresponding method, termed SAPT0-D, thus relies on empirically fit parameters; specific to SAPT0/jun-cc-pVDZ. While SAPT0-D can be used with any of the -D; variants using default parameters optimized for Hartee–Fock interaction energies,; we recommend using the refit parameters with Becke-Johnson damping, as described in; [Schriber:2021:234107]. Again, use of SAPT0-D with a basis set other than; jun-cc-pVDZ is not tested and not guaranteed to give meaningful results without; refitting the dispersion parameters.; A simple water dimer computation using SAPT0-D may look like:; molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis jun-cc-pvdz. energy('sapt0-d3mbj') # runs the recommended dispersion correction; energy('sapt0-d3') # tests an alternative damping scheme/parameterization. Given the naturally pairwise-atomic nature of these empirical dispersion corrections,; integration with existing FSAPT functionality is also available simply by calling; energy(“fsapt0-d3mbj”). See FSAPT <fisapt> documentation for more details on using FSAPT; for functional group analyses. table of contents. SAPT: Symmetry-Adapted Perturbation Theory; The S2 approximation and scaling; A First Example; Advanced e",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/sapt-1.html:45788,test,tested,45788,psi4manual/1.4.0/sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/sapt-1.html,4,['test'],['tested']
Testability,"e reaction name, e.g., 'S22-2' or 'NBC1-BzMe-8.0'; self.dbrxn = dbse + '-' + str(name); # numerical index of reaction; self.indx = indx; # description line; self.tagl = tagl; # latex description; self.latex = latex; # addl comments; self.comment = comment; # reaction matrices, specifying reagent contributions per reaction; self.rxnm = {}; # qcdb.ReactionDatum objects of quantum chemical data pertaining to reaction; self.data = {}; # benchmark qcdb.ReactionDatum; self.benchmark = None; # color for plotting; self.color = color. def __str__(self):; text = ''; text += """""" ==> %s Reaction <==\n\n"""""" % (self.name); text += """""" Database reaction: %s\n"""""" % (self.dbrxn); text += """""" Index: %s\n"""""" % (self.indx); text += """""" LaTeX representation: %s\n"""""" % (self.latex); text += """""" Tagline: %s\n"""""" % (self.tagl); text += """""" Comment: %s\n"""""" % (self.comment); if self.benchmark is None:; text += """""" Benchmark: %s\n"""""" % ('UNDEFINED'); else:; text += """""" Benchmark: %f\n"""""" % (self.data[self.benchmark].value); text += """""" Color: %s\n"""""" % (str(self.color)); text += """""" Reaction matrix:\n""""""; for mode, rxnm in self.rxnm.iteritems():; text += """""" %s\n"""""" % (mode); for rgt, coeff in rxnm.iteritems():; text += """""" %3d %s\n"""""" % (coeff, rgt.name); text += """""" Data:\n""""""; for label, datum in sorted(self.data.iteritems()):; text += """""" %8.2f %s\n"""""" % (datum.value, label); text += """"""\n""""""; return text. [docs] def compute_errors(self, benchmark='default', mcset='default', failoninc=True, verbose=False):; """"""For all data or modelchem subset *mcset*, computes raw reaction; errors between *modelchem* and *benchmark* model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless *failoninc* set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. """"""; if mcset == 'default':; lsslist = self.data.keys(); elif callable(mcset):; # mcset is function that will generate subset of HRXN from sset(self); lsslist = [mc for",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:15263,benchmark,benchmark,15263,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"e return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Optional[Callable]) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Return type:; Union[bool, Tuple[bool, str]]. Returns:. allclose (bool) – Returns True if expected and computed are equal within tolerance; False otherwise.; message (str) – When return_message=True, also return passed or error message. Notes. Akin to numpy.allclose().; For scalar float-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; float-comparable types. For mixed types, use compare_recursive().; Sets rtol to zero to match expected Psi4 behaviour, otherwise measured as:. absolute(computed - expected) <= (atol + rtol * absolute(expected)). psi4.compare_integers(expected, computed[, label, *, **kwargs])¶; Comparison function for integers, strings, booleans, or integer array-like data structures.; See qcelemental.testing.compare() for details.; psi4.compare_strings is an alias to this. qcelemental.testing.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=None)[source]; Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters:. expected (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Reference value against which computed is compared.; computed (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Input value to compare against expected.; label (Optional[str]) – Label for passed and error messages. Defaults to calling function name.; equal_phase (bool) – Compare computed or its opposite as equal.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Optional[Callable]) – Function to control printing, logging, raising, and returning.; Specialized intercep",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:17269,test,testing,17269,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,3,['test'],['testing']
Testability,"e robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, etc..; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for compare_values() and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, etc.).; Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in psi4/tests/CMakeLists.txt or, for an addon, tests/<addon>/CMakeLists.txt.; The test directory will need at least two files, CMakeLists.txt and input.dat. CMakeLists.txt¶; This file adds the test case to the suite. It should have at least the following two uncommented lines:; include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ctest -L label purposes. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, pl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:4979,test,tests,4979,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['test'],['tests']
Testability,"e same values btwn CC*, FNOCC, and DFOCC modules. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. mints3; Test individual integral objects for correctness. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc13d; Tests analytic CC2 gradients. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cubeprop-esp; RHF orbitals and density for water. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. pubchem2; Superficial test of PubChem interface. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. cc7; Tests CCE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:2450,test,tests,2450,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"e', None). for n, displacement in enumerate(findif_meta_dict[""displacements""].values(), start=2):; _process_displacement(; gradient, lowername, molecule, displacement, n, ndisp, write_orbitals=False, **kwargs). # Reset variables; for key, val in var_dict.items():; core.set_variable(key, val). # Assemble Hessian from gradients; # Final disp is undisp, so wfn has mol, G, H general to freq calc; H = driver_findif.assemble_hessian_from_gradients(findif_meta_dict, irrep); wfn.set_hessian(core.Matrix.from_array(H)); wfn.set_gradient(G0). # Explicitly set the current energy..; core.set_variable('CURRENT ENERGY', findif_meta_dict[""reference""][""energy""]); wfn.set_variable('CURRENT ENERGY', findif_meta_dict[""reference""][""energy""]). core.set_global_option(""PARENT_SYMMETRY"", """"); optstash.restore(); optstash_conv.restore(). else:; core.print_out(""""""hessian() will perform frequency computation by finite difference of analytic energies.\n""""""). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash.restore(); optstash_conv.restore(); optstash_conv = driver_util._set_convergence_criterion('energy', lowername, 10, 11, 10, 11, 10). # Obtain list of displacements; findif_meta_dict = driver_findif.hessian_from_energies_geometries(molecule, irrep). # Record undisplaced symmetry for projection of diplaced point groups; core.set_global_option(""PARENT_SYMMETRY"", molecule.schoenflies_symbol()). ndisp = len(findif_meta_dict[""displacements""]) + 1. print(' %d displacements needed.' % ndisp). wfn = _process_displacement(energy, lowername, molecule, findif_meta_dict[""reference""], 1, ndisp,; **kwargs); var_dict = core.variables(). for n, displacement in enumerate(findif_meta_dict[""displacements""].values(), start=2):; _process_displacement(; energy, lowername, molecule, displacement, n, ndisp, write_orbitals=False, **kwargs). # Reset variables; for key, val in var_dict.items():; core.set_variable(key, val). # Assemble Hessian from energies;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html:80343,test,test,80343,psi4manual/1.4.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html,2,['test'],['test']
Testability,"e(self); Gets molecule provenance. reinterpret_coordentry(self, arg0); Do reinterpret coordinate entries during update_geometry(). reset_point_group(self, arg0); Overrides symmetry from outside the molecule string. rotational_constants(self); Returns the rotational constants [cm^-1] of the molecule. rotational_symmetry_number(self); Returns number of unique orientations of the rigid molecule that only interchange identical atoms. rotor_type(self); Returns rotor type, e.g. run_dftd3([func, dashlvl, dashparam, …]); Compute dispersion correction via Grimme’s DFTD3 program. run_gcp([func, dertype, verbose]); Compute geometrical BSSE correction via Grimme’s GCP program. save_string_xyz(self); Saves the string of an XYZ file to arg2. save_string_xyz_file(self); Saves an XYZ file to arg2. save_xyz_file(self, arg0, arg1); Saves an XYZ file to arg0. schoenflies_symbol(self); Returns the Schoenflies symbol. scramble([do_shift, do_rotate, do_resort, …]); Tester for B787 by shifting, rotating, and atom shuffling ref_mol and checking that the aligner returns the opposite transformation. set_active_fragment(self, arg0); Sets the specified fragment arg0 to be Real. set_active_fragments(self, arg0); Sets the specified list arg0 of fragments to be Real. set_basis_all_atoms(self, arg0, arg1); Sets basis set arg0 to all atoms. set_basis_by_label(self, arg0, arg1, arg2); Sets basis set arg1 to all atoms with label (e.g., H4) arg0. set_basis_by_number(self, arg0, arg1, arg2); Sets basis set arg1 to all atoms with number arg0. set_basis_by_symbol(self, arg0, arg1, arg2); Sets basis set arg1 to all atoms with symbol (e.g., H) arg0. set_comment(self, arg0); Sets molecule comment. set_connectivity(self, arg0, int, float]]); Sets molecule connectivity. set_full_geometry(self, arg0); Sets the geometry, given a (Natom X 3) matrix arg0 of coordinates (in Bohr) (including dummies. set_geometry(self, arg0); Sets the geometry, given a (Natom X 3) matrix arg0 of coordinates [a0] (excluding dummies)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.molecule.html:7576,Test,Tester,7576,psi4manual/1.4.0/api/psi4.core.molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.molecule.html,1,['Test'],['Tester']
Testability,"e) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Managing: Git, Conda, CMake and all that; Adding Add-Ons. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/manage_addon.html:11495,test,testing,11495,psi4manual/master/manage_addon.html,https://psicode.org,https://psicode.org/psi4manual/master/manage_addon.html,1,['test'],['testing']
Testability,"e)). [docs]def write_eigenvalues(eigs, mo_idx):; """"""Prepare multi-line string with one-particle eigenvalues to be written to the FCIDUMP file.; """"""; eigs_dump = ''; iorb = 0; for h, block in enumerate(eigs):; for idx, x in np.ndenumerate(block):; eigs_dump += '{: 29.20E} {:4d} {:4d} {:4d} {:4d}\n'.format(x, mo_idx(iorb), 0, 0, 0); iorb += 1; return eigs_dump. [docs]def fcidump_from_file(fname):; """"""Function to read in a FCIDUMP file. :returns: a dictionary with FCIDUMP header and integrals; The key-value pairs are:; - 'norb' : number of basis functions; - 'nelec' : number of electrons; - 'ms2' : spin polarization of the system; - 'isym' : symmetry of state (if present in FCIDUMP); - 'orbsym' : list of symmetry labels of each orbital; - 'uhf' : whether restricted or unrestricted; - 'enuc' : nuclear repulsion plus frozen core energy; - 'epsilon' : orbital energies; - 'hcore' : core Hamiltonian; - 'eri' : electron-repulsion integrals. :param fname: FCIDUMP file name; """"""; intdump = {}; with open(fname, 'r') as handle:; assert '&FCI' == handle.readline().strip(). skiplines = 1; read = True; while True:; skiplines += 1; line = handle.readline(); if 'END' in line:; break. key, value = line.split('='); value = value.strip().rstrip(','); if key == 'UHF':; value = 'TRUE' in value; elif key == 'ORBSYM':; value = [int(x) for x in value.split(',')]; else:; value = int(value.replace(',', '')). intdump[key.lower()] = value. # Read the data and index, skip header; raw_ints = np.genfromtxt(fname, skip_header=skiplines). # Read last line, i.e. Enuc + Efzc; intdump['enuc'] = raw_ints[-1, 0]. # Read in integrals and indices; ints = raw_ints[:-1, 0]. # Get dimensions and indices; nbf = intdump['norb']; idxs = raw_ints[:, 1:].astype(np.int) - 1. # Slices; sl = slice(ints.shape[0] - nbf, ints.shape[0]). # Extract orbital energies; epsilon = np.zeros(nbf); epsilon[idxs[sl, 0]] = ints[sl]; intdump['epsilon'] = epsilon. # Count how many 2-index intdump we have; sl = slice(sl.start - nbf * nb",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/fcidump.html:9249,assert,assert,9249,psi4manual/1.2.1/_modules/psi4/driver/p4util/fcidump.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/fcidump.html,1,['assert'],['assert']
Testability,"e):; amol = Molecule.from_dict(adict); else:; from psi4 import core; amol = core.Molecule.from_dict(adict). compare_values(; concern_mol.nuclear_repulsion_energy(),; amol.nuclear_repulsion_energy(),; 4,; 'Q: concern_mol-->returned_mol NRE uncorrupted',; verbose=verbose - 1); if mols_align:; compare_values(; ref_mol.nuclear_repulsion_energy(),; amol.nuclear_repulsion_energy(),; 4,; 'Q: concern_mol-->returned_mol NRE matches ref_mol',; verbose=verbose - 1); compare_integers(; True,; np.allclose(ref_mol.geometry(), amol.geometry(), atol=4),; 'Q: concern_mol-->returned_mol geometry matches ref_mol',; verbose=verbose - 1). return rmsd, solution, amol. [docs] def scramble(ref_mol: ""Molecule"",; do_shift: Union[bool, np.ndarray, List] = True,; do_rotate: Union[bool, np.ndarray, List[List]] = True,; do_resort: Union[bool, List] = True,; deflection: float = 1.0,; do_mirror: bool = False,; do_plot: bool = False,; run_to_completion: bool = False,; run_resorting: bool = False,; verbose: int = 1):; """"""Tester for B787 by shifting, rotating, and atom shuffling `ref_mol` and; checking that the aligner returns the opposite transformation. Parameters; ----------; ref_mol; Molecule to perturb.; do_shift; Whether to generate a random atom shift on interval [-3, 3) in each; dimension (`True`) or leave at current origin. To shift by a specified; vector, supply a 3-element list.; do_rotate; Whether to generate a random 3D rotation according to algorithm of Arvo.; To rotate by a specified matrix, supply a 9-element list of lists.; do_resort; Whether to shuffle atoms (`True`) or leave 1st atom 1st, etc. (`False`).; To specify shuffle, supply a nat-element list of indices.; deflection; If `do_rotate`, how random a rotation: 0.0 is no change, 0.1 is small; perturbation, 1.0 is completely random.; do_mirror; Whether to construct the mirror image structure by inverting y-axis.; do_plot; Pops up a mpl plot showing before, after, and ref geometries.; run_to_completion; By construction, scrambled s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/molecule.html:61495,Test,Tester,61495,psi4manual/1.4.0/_modules/psi4/driver/qcdb/molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/molecule.html,4,['Test'],['Tester']
Testability,"e, respectively. """"""; # distribute benchmark; if mbenchmark is None:; lbenchmark = [benchmark] * len(modelchem) # normal bm modelchem name; else:; if isinstance(mbenchmark, basestring) or len(mbenchmark) != len(modelchem):; raise ValidationError(; """"""mbenchmark must be array of length distributable among modelchem"""""" % (str(mbenchmark))); else:; lbenchmark = mbenchmark # array of bm for each modelchem; # distribute sset; if msset is None:; lsset = [sset] * len(modelchem) # normal ss name like 'MX'; else:; if isinstance(msset, basestring) or len(msset) != len(modelchem):; raise ValidationError(""""""msset must be array of length distributable among modelchem"""""" % (str(msset))); else:; lsset = msset # array of ss for each modelchem; # compute errors; index = []; errors = {}; indiv = {}; for mc, bm, ss in zip(modelchem, lbenchmark, lsset):; ix = '%s_%s_%s' % (ss, mc, bm); index.append(ix); errors[ix], indiv[ix] = self.compute_statistics(mc, benchmark=bm, sset=ss,; failoninc=failoninc, verbose=verbose, returnindiv=True); # repackage; dbdat = []; for db, odb in self.dbdict.items():; dbix = self.dbdict.keys().index(db); for rxn in odb.hrxn:; data = []; for ix in index:; if indiv[ix][db] is not None:; if rxn in odb.sset[self.sset[lsset[index.index(ix)]][dbix]]:; try:; data.append(indiv[ix][db][rxn][0]); except KeyError as e:; if failoninc:; raise e; else:; data.append(None); else:; data.append(None); else:; data.append(None); if not data or all(item is None for item in data):; pass # filter out empty reactions; else:; dbdat.append({'db': db,; 'sys': str(rxn),; 'show': str(rxn),; 'color': odb.hrxn[rxn].color,; 'data': data}); mae = [errors[ix][self.dbse]['mae'] for ix in index]; mape = [100 * errors[ix][self.dbse]['mape'] for ix in index]; # form unique filename; ixpre, ixsuf, ixmid = string_contrast(index); title = self.dbse + ' ' + ixpre + '[]' + ixsuf; # generate matplotlib instructions and call or print; try:; from . import mpl; import matplotlib.pyplot as plt; except Impor",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:78898,benchmark,benchmark,78898,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"e, verbose=False, color='sapt', xlimit=4.0, xlines=[0.0, 0.3, 1.0], view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics for single; model chemistry modelchem versus benchmark over; subset sset over all component databases. Thread color can be; ‘rgb’ for old coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares flat diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=Fal",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:37466,benchmark,benchmark,37466,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['benchmark'],['benchmark']
Testability,"e,:; cp('mp2'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules.; Psi4 also provides the complete_basis_set() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2), and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ).; Another very useful and powerful feature of Psi4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; database('mp2','S22',cp=1,benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. Table Of Contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. Previous topic; A Psi4 Tutorial; Next topic; Molecule and Geometry Specification. This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; Psi4 [1.0.0 6a9a71b] ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/psithoninput-1.html:15229,benchmark,benchmark,15229,psi4manual/1.0.0/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/psithoninput-1.html,2,['benchmark'],['benchmark']
Testability,"e-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. mbis-5; MBIS calculation on ZnO. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cbs-parser; mtd/basis syntax examples. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. fci-dipole; 6-31G H2O Test FCI Energy Point. scf-response3; UHF Dipole Polarizability Test. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. cbs-xtpl-alpha; Extrapolated water energies. extern3; External potential calcul",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:35015,test,tested,35015,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['tested']
Testability,"e. Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. Compiling and Installing from Source¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psi4/conda/psi4-path-advisor.py; (extensive help menu at conda/psi4-path-advisor.py -h); or psicode downloads; page for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see psicode.org/installs/latest; (select “source”). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see psicode.org/installs/latest (select “conda”).; To see working builds for Linux, Mac, and Windows, see :src:; [this GHA]. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. An abbreviated build guide can be found; within the source itself .; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/build_planning.html:1011,test,tested,1011,psi4manual/1.9.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/build_planning.html,1,['test'],['tested']
Testability,"e. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:15315,test,test,15315,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"e. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Sc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:34037,test,test,34037,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,8,['test'],['test']
Testability,"e.init_with_xyz('h2o.xyz'). save_string_for_psi4()[source]¶; Returns a string of Molecule formatted for psi4.; Includes fragments and reorienting, if specified.; >>> print H2OH2O.save_string_for_psi4(); 6; 0 1; O -1.55100700 -0.11452000 0.00000000; H -1.93425900 0.76250300 0.00000000; H -0.59967700 0.04071200 0.00000000; --; 0 1; @X 0.00000000 0.00000000 0.00000000; O 1.35062500 0.11146900 0.00000000; H 1.68039800 -0.37374100 -0.75856100; H 1.68039800 -0.37374100 0.75856100; units Angstrom. Elemental masses (most common isotope), symbols, and atomic numbers from psi4.; Stuff stolen from psi. Should import or not as necessary; or some better way. Apologies to the coders. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. query_yes_no(question, default=True)[source]¶; Ask a yes/no question via raw_input() and return their answer.; question is a string that is presented to the user.; default is the presumed answer if the user just hits <Enter>.; It must be yes (the default), no or None (meaning; an answer is required of the user).; The return value is one of True or False. File for accessory procedures in the chem module.; Credit for the libmints vector3 class to Justin M. Turney and; incremental improvements by other psi4 developers. add(v, u)[source]¶; Compute sum of vectors v and u. cross(v, u)[source]¶; Compute cross product of length 3 vectors v and u. determinant(mat)[source]¶; Given 3x3 matrix mat, compute the determinat. diagon",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html:61518,test,test,61518,psi4manual/4.0b3/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_driver-1.html,4,['test'],['test']
Testability,"e: conv double; Default: 1e-7. SAD_FRAC_OCC¶. Auxiliary basis for the SAD guess. Type: boolean; Default: false. SAD_MAXITER¶. Maximum number of SAD guess iterations. Type: integer; Default: 50. SAD_PRINT¶. The amount of SAD information to print to the output. Type: integer; Default: 0. SAD_SCF_TYPE¶. SCF type of SAD guess. Type: string; Possible Values: DIRECT, DF; Default: DF. Expert DFT¶. DFT_BLOCK_MAX_POINTS¶. The maximum number of grid points per evaluation block. Type: integer; Default: 5000. DFT_BLOCK_MAX_RADIUS¶. The maximum radius to terminate subdivision of an octree block [au]. Type: double; Default: 3.0. DFT_BLOCK_MIN_POINTS¶. The minimum number of grid points per evaluation block. Type: integer; Default: 1000. DFT_BLOCK_SCHEME¶. The blocking scheme for DFT. Type: string; Possible Values: NAIVE, OCTREE; Default: OCTREE. DFT_GRID_NAME¶. The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_PRUNING_ALPHA¶. Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_PRUNING_SCHEME¶. Pruning Scheme. Type: string; Possible Values: FLAT, P_GAUSSIAN, D_GAUSSIAN, P_SLATER, D_SLATER, LOG_GAUSSIAN, LOG_SLATER; Default: FLAT. Table Of Contents. SCF; General Wavefunction Info; BASIS; CHOLESKY_TOLERANCE; DF_BASIS_SCF; DF_SCF_GUESS; GUESS; GUESS_MIX; GUESS_PERSIST; INDEPENDENT_J_TYPE; INTS_TOLERANCE; MAX_MEM_BUF; MOLDEN_WRITE; PRINT_BASIS; PRINT_MOS; QCHF; REFERENCE; SAVE_JK; SCF_MEM_SAFETY_FACTOR; SCF_TYPE; S_ORTHOGONALIZATION; S_TOLERANCE. Convergence Control/Stabilization; BASIS_GUESS; DAMPING_CONVERGENCE; DAMPING_PERCENTAGE; DF_BASIS_GUESS; DIIS; DIIS_MAX_VECS; DIIS_MIN_VECS; DIIS_START; D_CONVERGENCE; E_CONVERGENCE; FAIL_ON_MAXITER; MAXITER; MOM_OCC; MOM_START; MOM_VIR; SOSCF; SOSCF_CONV; SOSCF_MAX_ITER; SOSCF_MIN_ITER; SOSCF_PRINT; SOSCF_R_START; STABILITY_ANALYSIS. Fractional Occupation UHF/UKS; FRAC_DIIS; FRAC_LOAD; FRAC_OCC; FRAC_RENORMALIZE; FRAC_START; FRAC_VAL. Environmental Effects; EXTERN; ONE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__scf-1.html:14689,log,logarithmic,14689,psi4manual/1.0.0/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__scf-1.html,2,['log'],['logarithmic']
Testability,"e: conv double; Default: 1e-7. SAD_FRAC_OCC¶. Auxiliary basis for the SAD guess. Type: boolean; Default: false. SAD_MAXITER¶. Maximum number of SAD guess iterations. Type: integer; Default: 50. SAD_PRINT¶. The amount of SAD information to print to the output. Type: integer; Default: 0. SAD_SCF_TYPE¶. SCF type of SAD guess. Type: string; Possible Values: DIRECT, DF; Default: DF. Expert DFT¶. DFT_BLOCK_MAX_POINTS¶. The maximum number of grid points per evaluation block. Type: integer; Default: 5000. DFT_BLOCK_MAX_RADIUS¶. The maximum radius to terminate subdivision of an octree block [au]. Type: double; Default: 3.0. DFT_BLOCK_MIN_POINTS¶. The minimum number of grid points per evaluation block. Type: integer; Default: 1000. DFT_BLOCK_SCHEME¶. The blocking scheme for DFT. Type: string; Possible Values: NAIVE, OCTREE; Default: OCTREE. DFT_GRID_NAME¶. The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_PRUNING_ALPHA¶. Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_PRUNING_SCHEME¶. Pruning Scheme. Type: string; Possible Values: FLAT, P_GAUSSIAN, D_GAUSSIAN, P_SLATER, D_SLATER, LOG_GAUSSIAN, LOG_SLATER; Default: FLAT. table of contents. SCF; General Wavefunction Info; BASIS; CHOLESKY_TOLERANCE; DF_BASIS_SCF; DF_SCF_GUESS; GUESS; GUESS_MIX; GUESS_PERSIST; INDEPENDENT_J_TYPE; INTS_TOLERANCE; MAX_MEM_BUF; MOLDEN_WRITE; PRINT_BASIS; PRINT_MOS; QCHF; REFERENCE; SAVE_JK; SCF_MEM_SAFETY_FACTOR; SCF_TYPE; S_ORTHOGONALIZATION; S_TOLERANCE. Convergence Control/Stabilization; BASIS_GUESS; DAMPING_CONVERGENCE; DAMPING_PERCENTAGE; DF_BASIS_GUESS; DIIS; DIIS_MAX_VECS; DIIS_MIN_VECS; DIIS_START; D_CONVERGENCE; E_CONVERGENCE; FAIL_ON_MAXITER; MAXITER; MOM_OCC; MOM_START; MOM_VIR; SOSCF; SOSCF_CONV; SOSCF_MAX_ITER; SOSCF_MIN_ITER; SOSCF_PRINT; SOSCF_START_CONVERGENCE; STABILITY_ANALYSIS. Fractional Occupation UHF/UKS; FRAC_DIIS; FRAC_LOAD; FRAC_OCC; FRAC_RENORMALIZE; FRAC_START; FRAC_VAL. Environmental Effects; E",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__scf-1.html:14969,log,logarithmic,14969,psi4manual/1.1.0/autodir_options_c/module__scf-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodir_options_c/module__scf-1.html,2,['log'],['logarithmic']
Testability,"e: str = 'TR', tol: float = None, verbose: int = 1) -> np.ndarray:; """"""Form the idealized translation and rotation dof from geometry `geom` and masses `m`.; Remove any linear dependencies and return an array of shape (3, 3) for atoms, (5, 3 * nat) for linear `geom`,; or (6, 3 * nat) otherwise. To handle noisy linear geometries, pass `tol` on the order of max deviation. m1 = np.asarray([1.]); m2 = np.asarray([1., 1.]); m3 = np.asarray([1., 1., 1.]); m4 = np.asarray([1., 1., 1., 1.]); g4 = np.asarray([[ 1., 1., 0.],; [-1., 1., 0.],; [-1., -1., 0.],; [ 1., -1., 0.]]); g2 = np.asarray([[ 1., 1., 0.],; [-1., -1., 0.]]); g3 = np.asarray([[3., 3., 3.],; [4., 4., 4.,],; [5., 5., 5.]]); g3noisy = np.asarray([[3., 3.001, 3.],; [4., 4.001, 4.,],; [5., 5., 5.01]]); g33 = np.asarray([[0., 0., 0.],; [1., 0., 0.],; [-1., 0., 0.]]); g1 = np.asarray([[0., 0., 0.]]); g11 = np.asarray([[1., 2., 3.]]); noise = np.random.normal(0, 1, 9).reshape(3, 3); noise = np.divide(noise, np.max(noise)). assert(_get_TR_space(m4, g4).shape == (6, 12)); assert(_get_TR_space(m2, g2).shape == (5, 6)); assert(_get_TR_space(m3, g3).shape == (5, 9)); assert(_get_TR_space(m3, g33).shape == (5, 9)); assert(_get_TR_space(m1, g1).shape == (3, 3)); assert(_get_TR_space(m1, g11).shape == (3, 3)); assert(_get_TR_space(m3, g3noisy, tol=1.e-2).shape == (5, 9)); for ns in range(2, 6):; tol = 10. ** -ns; gnoisy = g3 + tol * noise; assert(_get_TR_space(m3, gnoisy, tol=10*tol).shape == (5, 9)). """"""; sqrtmmm = np.repeat(np.sqrt(m), 3); xxx = np.repeat(geom[:, 0], 3); yyy = np.repeat(geom[:, 1], 3); zzz = np.repeat(geom[:, 2], 3). z = np.zeros_like(m); i = np.ones_like(m); ux = np.ravel([i, z, z], order='F'); uy = np.ravel([z, i, z], order='F'); uz = np.ravel([z, z, i], order='F'). # form translation and rotation unit vectors; T1 = sqrtmmm * ux; T2 = sqrtmmm * uy; T3 = sqrtmmm * uz; R4 = sqrtmmm * (yyy * uz - zzz * uy); R5 = sqrtmmm * (zzz * ux - xxx * uz); R6 = sqrtmmm * (xxx * uy - yyy * ux). TRspace = []; if 'T' in sp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html:40942,assert,assert,40942,psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html,24,['assert'],['assert']
Testability,"e; #; # Copyright (c) 2007-2022 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. __all__ = [; ""AtomicComputer"",; ""BaseComputer"",; ""EnergyGradientHessianWfnReturn"",; ]. import abc; import copy; import logging; from typing import Any, Dict, Optional, Tuple, Union, TYPE_CHECKING. from pydantic import Field, validator; import qcelemental as qcel; from qcelemental.models import DriverEnum, AtomicInput, AtomicResult; qcel.models.molecule.GEOMETRY_NOISE = 13 # need more precision in geometries for high-res findif; import qcengine as qcng. from psi4 import core. if TYPE_CHECKING:; import qcportal. logger = logging.getLogger(__name__). EnergyGradientHessianWfnReturn = Union[float, core.Matrix, Tuple[Union[float, core.Matrix], core.Wavefunction]]. [docs]class BaseComputer(qcel.models.ProtoModel):; """"""Base class for ""computers"" that plan, run, and process QC tasks."""""". [docs] @abc.abstractmethod; def compute(self):; pass. [docs] @abc.abstractmethod; def plan(self):; pass. class Config(qcel.models.ProtoModel.Config):; extra = ""allow""; allow_mutation = True. [docs]class AtomicComputer(BaseComputer):; """"""Computer for analytic single-geometry computations."""""". molecule: Any = Field(..., description=""The molecule to us",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_base.html:1217,log,logging,1217,psi4manual/1.7.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_base.html,2,['log'],['logging']
Testability,"e; #; # Copyright (c) 2007-2023 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. __all__ = [; ""AtomicComputer"",; ""BaseComputer"",; ""EnergyGradientHessianWfnReturn"",; ]. import abc; import copy; import logging; from typing import TYPE_CHECKING, Any, Dict, Optional, Tuple, Union. try:; from pydantic.v1 import Field, validator; except ImportError:; from pydantic import Field, validator. import qcelemental as qcel; from qcelemental.models import AtomicInput, AtomicResult, DriverEnum; from qcelemental.models.results import AtomicResultProtocols; qcel.models.molecule.GEOMETRY_NOISE = 13 # need more precision in geometries for high-res findif; import qcengine as qcng. from psi4 import core. from . import p4util. if TYPE_CHECKING:; import qcportal. logger = logging.getLogger(__name__). EnergyGradientHessianWfnReturn = Union[float, core.Matrix, Tuple[Union[float, core.Matrix], core.Wavefunction]]. [docs]; class BaseComputer(qcel.models.ProtoModel):; """"""Base class for ""computers"" that plan, run, and process QC tasks."""""". [docs]; @abc.abstractmethod; def compute(self):; pass. [docs]; @abc.abstractmethod; def plan(self):; pass. class Config(qcel.models.ProtoModel.Config):; extra = ""allow""; allow_mutation = True. [do",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/task_base.html:1219,log,logging,1219,psi4manual/1.9.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/task_base.html,2,['log'],['logging']
Testability,"e; #; # Copyright (c) 2007-2024 The Psi4 Developers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. __all__ = [; ""AtomicComputer"",; ""BaseComputer"",; ""EnergyGradientHessianWfnReturn"",; ]. import abc; import copy; import logging; from typing import TYPE_CHECKING, Any, Dict, Optional, Tuple, Union. try:; from pydantic.v1 import Field, validator; except ImportError:; from pydantic import Field, validator. import qcelemental as qcel; from qcelemental.models import AtomicInput, AtomicResult, DriverEnum; from qcelemental.models.results import AtomicResultProtocols; qcel.models.molecule.GEOMETRY_NOISE = 13 # need more precision in geometries for high-res findif; import qcengine as qcng. from psi4 import core. from . import p4util. if TYPE_CHECKING:; import qcportal. logger = logging.getLogger(__name__). EnergyGradientHessianWfnReturn = Union[float, core.Matrix, Tuple[Union[float, core.Matrix], core.Wavefunction]]. [docs]; class BaseComputer(qcel.models.ProtoModel):; """"""Base class for ""computers"" that plan, run, and process QC tasks."""""". [docs]; @abc.abstractmethod; def compute(self):; pass. [docs]; @abc.abstractmethod; def plan(self):; pass. class Config(qcel.models.ProtoModel.Config):; extra = ""allow""; allow_mutation = True. [do",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/_modules/psi4/driver/task_base.html:1226,log,logging,1226,psi4manual/master/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/master/_modules/psi4/driver/task_base.html,2,['log'],['logging']
Testability,"e=False, **kwargs]). psi4.compare_wavefunctions(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Wavefunction objects.; Compares over 30 Wavefunction properties, including nirrep, nso, molecule geometry, basis set nbf, density matrices, gradient results, etc.; Handles both Psi4-style signatures ((expected, computed, atol_exponent, label); see atol_exponent parameter below) and QCA-style signatures ((expected, computed, label)). Parameters:; atol_exponent (int or float) – Absolute tolerance (see formula in qcelemental.testing.compare_values() notes).; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99. psi4.compare_molrecs(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Molecule.to_dict() objects.; See qcelemental.testing.compare_molrecs() for details.; Note only QCA-style signature ((expected, computed, label)) available. qcelemental.testing.compare_molrecs(expected, computed, label=None, *, atol=1e-06, rtol=1e-16, forgive=None, verbose=1, relative_geoms='exact', return_message=False, return_handler=None)[source]; Function to compare Molecule dictionaries. Return type:; bool. Parameters:. label (Optional[str]) – ; atol (float) – ; rtol (float) – ; verbose (int) – ; return_message (bool) – ; return_handler (Optional[Callable]) – . File Formats¶. psi4.compare_cubes(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for volumetric data in cube file format.; Compares only the volumetric data, not the voxel data or molecular geometry or other header contents.; The volumetric data is passed to qcelemental.testing.compare_values().; Note only QCA-style signature ((expected, computed, label)) available. Parameters:. expected – Reference cube file against which computed is com",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:23380,test,testing,23380,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,1,['test'],['testing']
Testability,"e=False, **kwargs]). psi4.compare_wavefunctions(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Wavefunction objects.; Compares over 30 Wavefunction properties, including nirrep, nso, molecule geometry, basis set nbf, density matrices, gradient results, etc.; Handles both Psi4-style signatures ((expected, computed, atol_exponent, label); see atol_exponent parameter below) and QCA-style signatures ((expected, computed, label)). Parameters:; atol_exponent (int or float) – Absolute tolerance (see formula in qcelemental.testing.compare_values() notes).; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99. psi4.compare_molrecs(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Molecule.to_dict() objects.; See qcelemental.testing.compare_molrecs() for details.; Note only QCA-style signature ((expected, computed, label)) available. qcelemental.testing.compare_molrecs(expected, computed, label=None, *, atol=1e-06, rtol=1e-16, forgive=None, verbose=1, relative_geoms='exact', return_message=False, return_handler=None)[source]; Function to compare Molecule dictionaries. Return type:; bool. Parameters:. label (str | None); atol (float); rtol (float); verbose (int); return_message (bool); return_handler (Callable | None). File Formats¶. psi4.compare_cubes(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for volumetric data in cube file format.; Compares only the volumetric data, not the voxel data or molecular geometry or other header contents.; The volumetric data is passed to qcelemental.testing.compare_values().; Note only QCA-style signature ((expected, computed, label)) available. Parameters:. expected – Reference cube file against which computed is compared.; Read by numpy.ge",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/add_tests.html:23383,test,testing,23383,psi4manual/master/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/master/add_tests.html,1,['test'],['testing']
Testability,"e=False, **kwargs]). psi4.compare_wavefunctions(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Wavefunction objects.; Compares over 30 Wavefunction properties, including nirrep, nso, molecule geometry, basis set nbf, density matrices, gradient results, etc.; Handles both Psi4-style signatures ((expected, computed, atol_exponent, label); see atol_exponent parameter below) and QCA-style signatures ((expected, computed, label)). Parameters:; atol_exponent (int or float) – Absolute tolerance (see formula in qcelemental.testing.compare_values() notes).; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99. psi4.compare_molrecs(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Molecule.to_dict() objects.; See qcelemental.testing.compare_molrecs() for details.; Note only QCA-style signature ((expected, computed, label)) available. qcelemental.testing.compare_molrecs(expected, computed, label=None, *, atol=1e-06, rtol=1e-16, forgive=None, verbose=1, relative_geoms='exact', return_message=False, return_handler=None)[source]; Function to compare Molecule dictionaries. Return type:; bool. Parameters:. label (str) – ; atol (float) – ; rtol (float) – ; verbose (int) – ; return_message (bool) – ; return_handler (Callable) – . File Formats¶. psi4.compare_cubes(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for volumetric data in cube file format.; Compares only the volumetric data, not the voxel data or molecular geometry or other header contents.; The volumetric data is passed to qcelemental.testing.compare_values().; Note only QCA-style signature ((expected, computed, label)) available. Parameters:. expected – Reference cube file against which computed is compared.; Read by nump",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/add_tests.html:23312,test,testing,23312,psi4manual/1.8.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/add_tests.html,1,['test'],['testing']
Testability,"e=False, **kwargs]). psi4.compare_wavefunctions(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Wavefunction objects.; Compares over 30 Wavefunction properties, including nirrep, nso, molecule geometry, basis set nbf, density matrices, gradient results, etc.; Handles both Psi4-style signatures ((expected, computed, atol_exponent, label); see atol_exponent parameter below) and QCA-style signatures ((expected, computed, label)). Parameters:; atol_exponent (int or float) – Absolute tolerance (see formula in qcelemental.testing.compare_values() notes).; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99. psi4.compare_molrecs(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Molecule.to_dict() objects.; See qcelemental.testing.compare_molrecs() for details.; Note only QCA-style signature ((expected, computed, label)) available. qcelemental.testing.compare_molrecs(expected, computed, label=None, *, atol=1e-06, rtol=1e-16, forgive=None, verbose=1, relative_geoms='exact', return_message=False, return_handler=None)[source]; Function to compare Molecule dictionaries.; :rtype: bool. Parameters:. label (str | None) – ; atol (float) – ; rtol (float) – ; verbose (int) – ; return_message (bool) – ; return_handler (Callable | None) – . Return type:; bool. File Formats¶. psi4.compare_cubes(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for volumetric data in cube file format.; Compares only the volumetric data, not the voxel data or molecular geometry or other header contents.; The volumetric data is passed to qcelemental.testing.compare_values().; Note only QCA-style signature ((expected, computed, label)) available. Parameters:. expected – Reference cube file against which comput",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/add_tests.html:23379,test,testing,23379,psi4manual/1.9.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/add_tests.html,1,['test'],['testing']
Testability,"eAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton dimer. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; \(\Rightarrow\) 'S22B' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22; 'WATER' water dimer. JSCH¶. Database (Hobza) of interaction energies for nucelobase pairs.; Geometries and ref",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_available_databases.html:6559,benchmark,benchmark,6559,psi4manual/1.9.x/autodoc_available_databases.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_available_databases.html,2,['benchmark'],['benchmark']
Testability,"e_statistics(mc, benchmark=benchmark, sset=ss,; failoninc=failoninc, verbose=False, returnindiv=False). # repackage; dbdat = []; ssarray = ['pospos', 'posneg', 'pospolar', 'posaliph', 'posaryl',; None, 'negneg', 'negpolar', 'negaliph', 'negaryl',; None, None, 'polarpolar', 'polaraliph', 'polararyl',; None, None, None, 'aliphaliph', 'alipharyl',; None, None, None, None, 'arylaryl']; for ss in ssarray:; dbdat.append(0.0 if ss is None else errors[ss][self.dbse]['mae']). # generate matplotlib instructions and call or print; try:; from . import mpl; import matplotlib.pyplot as plt; except ImportError:; print('Matplotlib not avail'); else:; filedict = mpl.liliowa(dbdat, xlimit=xlimit, view=view,; saveas=saveas, relpath=relpath, graphicsformat=graphicsformat); return filedict. [docs] def plot_iowa(self, modelchem, benchmark='default', sset='default',; failoninc=True, verbose=False,; title='', xtitle='', xlimit=2.0,; view=True,; saveas=None, relpath=False, graphicsformat=['pdf']):; """"""Computes individual errors for single *modelchem* versus; *benchmark* over subset *sset*. Coloring green-to-purple with; maximum intensity at *xlimit*. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. """"""; title = self.dbse + ' ' + modelchem; # compute errors; mc = modelchem; errors, indiv = self.compute_statistics(mc, benchmark=benchmark, sset=sset,; failoninc=failoninc, verbose=verbose, returnindiv=True); # repackage; dbdat = []; dblbl = []; for db in self.dbdict.keys():; if indiv[db] is not None:; for rxn in indiv[db].keys():; dbdat.append(indiv[db][rxn][0]); dblbl.append(str(rxn)); title = """"""%s vs %s for %s subset %s"""""" % (mc, benchmark, self.dbse, sset); me = errors[self.dbse]['me']; # generate matplotlib instructions and call or print; try:; from . import mpl; import matplotlib.pyplot as plt; except ImportError:; # if not running from Canopy, print line to execute from Canopy; print(""""""mpl.iowa(%s,\n %s,\n title='%s',\n xtitle='%",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:82399,benchmark,benchmark,82399,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"ean) if the value (role of double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Managing: Git, Conda, CMake and all that. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/manage_addon-1.html:11480,test,testing,11480,psi4manual/1.3.2/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/manage_addon-1.html,2,['test'],['testing']
Testability,"ecessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] :source:`doc/sphinxman/CMakeLists.txt for advice on obtaining docs dependencies; See psi4/.github/workflows/docs.yml for full docs building procedure to follow. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] [CheMPS2 min version]. HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. ecpint — [what is ecpint?] [ecpint min version]; dkh — [what is dkh?] [dkh min version]. Fortran Compiler. gdma — [what is gdma?] [gdma min version]. Fortran Comp",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/build_planning.html:6868,test,testing,6868,psi4manual/1.7.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/build_planning.html,1,['test'],['testing']
Testability,"ecessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies or [conda env spec]; See psi4/.github/workflows/docs.yml for full docs building procedure to follow. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] [CheMPS2 min version]. HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. ecpint — [what is ecpint?] [ecpint min version]; dkh — [what is dkh?] [dkh min version]. Fortran Compiler. gdma — [what is gdma?] [gdma min version]. Fortran Compiler. PCMSolver — ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/build_planning.html:7404,test,testing,7404,psi4manual/1.8.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/build_planning.html,3,['test'],['testing']
Testability,"eck that psi4/external/ repos and commits have been updated to match conda recipes sources. Also check versions with conda_build_config.yaml; Check psi4/doc/sphinxman/source/introduction.rst for any compiler and Python minimum requirements to edit. Tag (pre)release¶. Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; Below is tl;dr; # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__version__ = '1.3rc2'; +__version_long = '1.3rc2+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.3rc3'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3rc2""; [master bc8d7f5] v1.3rc2. >>> git log --oneline | head -1; bc8d7f5 v1.3rc2; >>> git tag -a v1.3rc2 bc8d7f5 -m ""v1.3rc2"". # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck ""Do not allow bypassing the above settings"" for admins and Save changes. >>> git push --atomic upstream master v1.3rc2. # pause here and push to upstream and let Azure complete for an; # on-tag Windows conda package and docs, not tag+1.dev1 .; # the atomic flag below pushes commit and tag together so only one CI; # which is necessary for Windows conda package to compute the right version.; # After push, can temporarily re-engage admins ""Do not allow ..."" protections.; # also, grab the docs build from GHA artifacts. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version_long = '1.3rc2+zzzzzzz'; +__version_long = '1.3rc2+bc8d7f5'. >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.3rc2""; [master 16dbd3e] Records",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:9913,log,log,9913,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['log'],['log']
Testability,"eck that psi4/external/ repos and commits have been updated to match conda recipes sources. Also check versions with conda_build_config.yaml; Check psi4/doc/sphinxman/source/introduction.rst for any compiler and Python minimum requirements to edit. Tag (pre)release¶. Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; Below is tl;dr; # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__version__ = '1.3rc2'; +__version_long = '1.3rc2+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.3rc3'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3rc2""; [master bc8d7f5] v1.3rc2. >>> git log --oneline | head -1; bc8d7f5 v1.3rc2; >>> git tag -a v1.3rc2 bc8d7f5 -m ""v1.3rc2"". # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck ""Include administrators"" and Save changes. >>> git push --atomic upstream master v1.3rc2. # pause here and push to upstream and let Azure complete for an; # on-tag Windows conda package and docs, not tag+1.dev1 .; # the atomic flag below pushes commit and tag together so only one CI; # which is necessary for Windows conda package to compute the right version.; # After push, can temporarily re-engage ""Include administrators"" protections.; # also, grab the docs build from GHA artifacts. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version_long = '1.3rc2+zzzzzzz'; +__version_long = '1.3rc2+bc8d7f5'. >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.3rc2""; [master 16dbd3e] Records tag for v1.3rc2. # goto GH:psi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/manage_release.html:6157,log,log,6157,psi4manual/1.7.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/manage_release.html,2,['log'],['log']
Testability,"eck that psi4/external/ repos and commits have been updated to match conda recipes sources. Also check versions with conda_build_config.yaml; Check psi4/doc/sphinxman/source/introduction.rst for any compiler and Python minimum requirements to edit. Tag (pre)release¶. Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; Below is tl;dr; # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__version__ = '1.3rc2'; +__version_long = '1.3rc2+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.3rc3'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3rc2""; [master bc8d7f5] v1.3rc2. >>> git log --oneline | head -1; bc8d7f5 v1.3rc2; >>> git tag -a v1.3rc2 bc8d7f5 -m ""v1.3rc2"". # pause here and push to upstream and let Azure complete if want an; # on-tag Windows conda package, not just tag+1.dev1. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version_long = '1.3rc2+zzzzzzz'; +__version_long = '1.3rc2+bc8d7f5'. >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.3rc2""; [master 16dbd3e] Records tag for v1.3rc2. # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck ""Include administrators"" and Save changes. >>> git push upstream master; >>> git push upstream v1.3rc2. # re-engage ""Include administrators"" protections. Tag postrelease¶. # be on clean maintenance branch up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> git checkout 1",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/manage_release-1.html:6247,log,log,6247,psi4manual/1.5.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/manage_release-1.html,2,['log'],['log']
Testability,"eck that psi4/external/ repos and commits have been updated to match conda recipes sources. Also check versions with conda_build_config.yaml; Check psi4/doc/sphinxman/source/introduction.rst for any compiler and Python minimum requirements to edit. Tag (pre)release¶. Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; Below is tl;dr; # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__version__ = '1.3rc2'; +__version_long = '1.3rc2+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.3rc3'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3rc2""; [master bc8d7f5] v1.3rc2. >>> git log --oneline | head -1; bc8d7f5 v1.3rc2; >>> git tag -a v1.3rc2 bc8d7f5 -m ""v1.3rc2"". # pause here and push to upstream and let Azure complete if want an; # on-tag Windows conda package, not just tag+1.dev1; # below pushes commit and tag together so only one CI; # > git push --atomic upstream master v1.5; # also, grab the docs build from GHA artifacts. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version_long = '1.3rc2+zzzzzzz'; +__version_long = '1.3rc2+bc8d7f5'. >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.3rc2""; [master 16dbd3e] Records tag for v1.3rc2. # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck ""Include administrators"" and Save changes. >>> git push upstream master; >>> git push upstream v1.3rc2. # re-engage ""Include administrators"" protections. Tag postrelease¶. # be on clean maintenance branch up-to-date with upstream in b",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/manage_release.html:6175,log,log,6175,psi4manual/1.6.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/manage_release.html,1,['log'],['log']
Testability,"eck that psi4/external/ repos and commits have been updated to match conda recipes sources. Also check versions with conda_build_config.yaml; Check psi4/doc/sphinxman/source/introduction.rst for any compiler and Python minimum requirements to edit. Tag (pre)release¶. Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; Below is tl;dr; # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__version__ = '1.3rc2'; +__version_long = '1.3rc2+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.3rc3'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3rc2""; [master bc8d7f5] v1.3rc2. >>> git log --oneline | head -1; bc8d7f5 v1.3rc2; >>> git tag -a v1.3rc2 bc8d7f5 -m ""v1.3rc2"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version_long = '1.3rc2+zzzzzzz'; +__version_long = '1.3rc2+bc8d7f5'. >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.3rc2""; [master 16dbd3e] Records tag for v1.3rc2. # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck ""Include administrators"" and Save changes. >>> git push upstream master; >>> git push upstream v1.3rc2. # re-engage ""Include administrators"" protections. Tag postrelease¶. # be on clean maintenance branch up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_release-1.html:6183,log,log,6183,psi4manual/1.4.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_release-1.html,2,['log'],['log']
Testability,"ecks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. Pytest has similar commands; * Run tests in parallel with -n flag (if extenstion pytest-xdist installed). For maximum parallelism: pytest -n`getconf _NPROCESSORS_ONLN`; * Run full test suite: pytest; * Run the quick tests: pytest -m quick; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: pytest -m smoke; * Run tests matching by name: pytest -k testname; * Run tests excluding those by name: pytest -k ""not testname""; * Run tests matching by label: pytest -m testlabel; * Run tests excluding those by label: pytest -m ""not testlabel"". How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --tes",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:53754,test,testing,53754,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,8,['test'],"['testing', 'tests']"
Testability,"ecord_to_atomicresult(record). return self.result. def _singlepointrecord_to_atomicresult(spr: ""qcportal.singlepoint.SinglepointRecord"") -> AtomicResult:; atres = spr.to_qcschema_result(). # QCFractal `next` database stores return_result, properties, and extras[""qcvars""] merged; # together and with lowercase keys. `to_qcschema_result` partitions properties back out,; # but we need to restore qcvars keys, types, and dimensions.; # QCFractal v0.51 starts saving space by removing qcvars whose qcvar.lower().replace("" "", ""_""); # are defined, so we also need to reconstruct these.; shared_qcvars = {}; for pv, dpv in atres.properties.dict().items():; if dpv is None:; continue; if pv.startswith(""return_"") or pv.endswith(""_moment""):; continue; if pv in [; ""scf_one_electron_energy"",; ""scf_two_electron_energy"",; ""scf_vv10_energy"",; ""scf_xc_energy"",; ""scf_dispersion_correction_energy"",; ""mp2_same_spin_correlation_energy"",; ""mp2_opposite_spin_correlation_energy"",; ""ccsd_same_spin_correlation_energy"",; ""ccsd_opposite_spin_correlation_energy"",; ""ccsd_prt_pr_correlation_energy"",; ""ccsd_prt_pr_total_energy"",; ]:; continue; shared_qcvars[pv.upper().replace(""_"", "" "")] = dpv; qcvars = atres.extras.pop(""extra_properties""); qcvars.pop(""return_result""); qcvars = {k.upper(): p4util.plump_qcvar(k, v) for k, v in qcvars.items()}; atres.extras[""qcvars""] = {**qcvars, **shared_qcvars}. return atres. def _drink_filter(stdout: str) -> str:; """"""Don't mess up the widespread ``grep beer`` test of Psi4 doneness by printing multiple drinks per outfile."""""". stdout = stdout.replace(""\n*** Psi4 exiting successfully. Buy a developer a beer!"", """"); stdout = stdout.replace(""\n*** Psi4 encountered an error. Buy a developer more coffee!"", """"); return stdout. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.9.1;  · . PSI4. Module code; psi4.driver.task_base. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/task_base.html:8242,test,test,8242,psi4manual/1.9.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/task_base.html,2,['test'],['test']
Testability,"ected) - float(computed)) > thresh:; # float cast handles decimal.Decimal vars; print(message); if exitonfail:; raise TestComparisonError(message); if math.isnan(computed):; print(message); print(""\tprobably because the computed value is nan.""); if exitonfail:; raise TestComparisonError(message); success(label); return True. [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(),; computed.nirrep())); raise TestComparisonError(message); if (expected.symmetry() != computed.symmetry()):; message = (""\t%s has %d symmetry, but %s has %d\n."" % (expected.name(), expected.symmetry(), computed.name(),; computed.symmetry())); raise TestComparisonError(mes",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html:8129,test,test,8129,psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,1,['test'],['test']
Testability,"ection (GRAC) test. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. soscf-large; Second-order SCF convergnece: Benzene. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ao-casscf-sp; CASSCF/6-31G** energy point. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfcasscf-sp; CASSCF/6-31G** energy point. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:12647,test,testing,12647,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['testing']
Testability,"ects; #:; #: >>> print asdf.dbdict; #: XXXX; self.dbdict = OrderedDict(). #: subset assembly pattern; #:; #: >>> print asdf.sset.keys(); #: XXXX; self.sset = OrderedDict(). #: assembly pattern for transspecies modelchems; #:; #: >>> print asdf.mcs.keys(); #: XXXX; self.mcs = {}. self.benchmark = None. # slight validation, repackaging into dbnamelist; if isinstance(dbnamelist, basestring):; dbnamelist = [dbnamelist]; elif all(isinstance(item, basestring) for item in dbnamelist):; pass; else:; raise ValidationError('Database::constructor: Inappropriate configuration of constructor arguments'). # load databases; for db in dbnamelist:; if loadfrompickle:; tmp = WrappedDatabase.load_pickled(db, path=path); else:; tmp = WrappedDatabase(db, pythonpath=pythonpath); self.dbdict[tmp.dbse] = tmp. # slurp up the obvious overlaps; consolidated_bench = [odb.benchmark() for odb in self.dbdict.values()]; if len(set(consolidated_bench)) == 1:; self.benchmark = consolidated_bench[0]; else:; self.benchmark = ''.join(consolidated_bench); self.mcs[self.benchmark] = consolidated_bench. # methods[ref] = Method(name=ref); # bases[ref] = BasisSet(name=ref). self.mcs['default'] = consolidated_bench; # self.mcs['default'] = [odb.benchmark() for odb in self.dbdict.values()]; self._intersect_subsets(); self._intersect_modelchems(). # complex subsets; self.load_subsets(). # collection name; self.dbse = ''.join(self.dbdict.keys()) if dbse is None else dbse. # merge Reaction-s; self.hrxn = OrderedDict(); for db, odb in self.dbdict.iteritems():; for rxn, orxn in odb.hrxn.iteritems():; self.hrxn[orxn.dbrxn] = orxn. # merge Reagent-s; self.hrgt = OrderedDict(); for db, odb in self.dbdict.iteritems():; for rgt, orgt in odb.hrgt.iteritems():; self.hrgt[orgt.name] = orgt. print(""""""Database %s: %s"""""" % (self.dbse, ', '.join(self.dbdict.keys()))). def __str__(self):; text = ''; text += """""" ===> %s Database <===\n\n"""""" % (self.dbse); # text += """""" Reagents: %s\n"""""" % (self.hrgt.keys()); # text += """""" Reacti",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:48006,benchmark,benchmark,48006,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"ecule. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. dcft1; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. Previous topic; Bibliography; Next topic; <no title>; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » ; Appendices ». © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/testsuite-1.html:24125,test,test,24125,psi4manual/4.0b5/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/testsuite-1.html,2,['test'],['test']
Testability,"ed in input files in the test suite. """"""; # Grab grid points. Skip the first nine lines and the last one; evec = np.genfromtxt(expected, skip_header=9, skip_footer=1); cvec = np.genfromtxt(computed, skip_header=9, skip_footer=1); if evec.size == cvec.size:; if not np.allclose(cvec, evec, rtol=5e-05, atol=1e-10):; message = (""\t%s: computed cube file does not match expected cube file."" % label); raise TestComparisonError(message); else:; message = (""\t%s: computed cube file does not match size of expected cube file."" % label); raise TestComparisonError(message); success(label); return True. # Uncomment and use if compare_arrays above is inadequate; #def compare_lists(expected, computed, digits, label):; # """"""Function to compare two Python lists. Prints :py:func:`util.success`; # when elements of vector *computed* match elements of vector *expected* to; # number of *digits*. Performs a system exit on failure to match symmetry; # structure, dimension, or element values. Used in input files in the test suite.; #; # """"""; # if len(expected) != len(computed):; # message = (""\tThe reference has %d entries, but the computed vector has %d\n."" % (len(expected), len(computed))); # raise TestComparisonError(message); # dim = len(expected); # failed = 0; # for entry in range(dim):; # if(abs(expected[entry] - computed[entry]) > 10 ** (-digits)):; # print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed[entry], expected[entry])); # failed = 1; # break; #; # if(failed):; # core.print_out(""The computed vector\n""); # computed.print_out(); # core.print_out(""The reference vector\n""); # expected.print_out(); # message = (""\t%s: computed list does not match expected list."" % (label, computed, expected)); # raise TestComparisonError(message); # success(label). [docs]def copy_file_to_scratch(filename, prefix, namespace, unit, move=False):; """"""Function to move file into scratch with correct naming; convention. Arguments:. @arg filename full path to file; @arg prefix computa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html:13797,test,test,13797,psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,1,['test'],['test']
Testability,"ed systems; 'S11' smaller systems in S22; 'WATER' water dimer. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark. 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. O24by5¶. Database (O24) of interaction energies for small open-shell high-spin bimolecular complexes.; Geometries taken from https://gitlab.com/piotr.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_available_databases.html:4554,benchmark,benchmark,4554,psi4manual/1.6.x/autodoc_available_databases.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_available_databases.html,2,['benchmark'],['benchmark']
Testability,"ed water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fci-dipole; 6-31G H2O Test FCI Energy Point. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. dft-grac; Gradient regularized asymptotic correction (GRAC) test. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. scf7; Tests SCF gradient in the presence of a dipole field. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fnocc2; Test G2 method for H2O. mints2-bse; Similar to mints2, but using the BSE to specify the basis sets. isapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. cc8a; ROHF-CCSD(T) cc-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:17739,test,tests,17739,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"ed with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory. output.ref¶; When your test case is in final form, run it locally, rename the output to output.ref, and check it into the repository alongside input.dat.; While this isn’t used for any testing machinery (except for the nearly decommissioned psi4/tests/psitest.pl for CC tests; full decommission expected by v1.6), it can be handy for users or developers to consult. test_input.py¶; Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest’s notice, add a file to the directory named test_input.py.; Below is an example for the psi4/tests/ci-property/test_input.py; from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the CMakeLists.txt.; The def test_ci_property contains the name of the test, now with underscores rather than hyphens.; def test_ identifies it to pytest as a test.; That part of the function name and the name of the file, test_input.py are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ctest_runner(__file__).; This uses QCEngine machinery to execute python psi4 input.dat.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files do need to be registered in psi4/psi4/CMakeLists.txt.; Finally, the label string passed to CTest is here handed to pytest, with a few changes:. psi added automatically, so exclude it when copying from CTest CMakeLists.txt; cli added automatically to distinguish CTest origin from deliberate pytest origin, which have api added; smoke used instead of CTest smoketests; quick used instead of CTest quicktests; long used instead of CTest longtests; addon an",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:9233,test,test,9233,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,1,['test'],['test']
Testability,"edDict(). #: subset assembly pattern; #:; #: >>> print asdf.sset.keys(); #: XXXX; self.sset = OrderedDict(). #: assembly pattern for transspecies modelchems; #:; #: >>> print asdf.mcs.keys(); #: XXXX; self.mcs = {}. self.benchmark = None. # slight validation, repackaging into dbnamelist; if isinstance(dbnamelist, basestring):; dbnamelist = [dbnamelist]; elif all(isinstance(item, basestring) for item in dbnamelist):; pass; else:; raise ValidationError('Database::constructor: Inappropriate configuration of constructor arguments'). # load databases; for db in dbnamelist:; if loadfrompickle:; tmp = WrappedDatabase.load_pickled(db, path=path); else:; tmp = WrappedDatabase(db, pythonpath=pythonpath); self.dbdict[tmp.dbse] = tmp. # slurp up the obvious overlaps; consolidated_bench = [odb.benchmark() for odb in self.dbdict.values()]; if len(set(consolidated_bench)) == 1:; self.benchmark = consolidated_bench[0]; else:; self.benchmark = ''.join(consolidated_bench); self.mcs[self.benchmark] = consolidated_bench. # methods[ref] = Method(name=ref); # bases[ref] = BasisSet(name=ref). self.mcs['default'] = consolidated_bench; # self.mcs['default'] = [odb.benchmark() for odb in self.dbdict.values()]; self._intersect_subsets(); self._intersect_modelchems(). # complex subsets; self.load_subsets(). # collection name; self.dbse = ''.join(self.dbdict.keys()) if dbse is None else dbse. # merge Reaction-s; self.hrxn = OrderedDict(); for db, odb in self.dbdict.iteritems():; for rxn, orxn in odb.hrxn.iteritems():; self.hrxn[orxn.dbrxn] = orxn. # merge Reagent-s; self.hrgt = OrderedDict(); for db, odb in self.dbdict.iteritems():; for rgt, orgt in odb.hrgt.iteritems():; self.hrgt[orgt.name] = orgt. print(""""""Database %s: %s"""""" % (self.dbse, ', '.join(self.dbdict.keys()))). def __str__(self):; text = ''; text += """""" ===> %s Database <===\n\n"""""" % (self.dbse); # text += """""" Reagents: %s\n"""""" % (self.hrgt.keys()); # text += """""" Reactions: %s\n"""""" % (self.hrxn.keys()); text += """""" Subsets: %s\n""""""",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:48061,benchmark,benchmark,48061,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"ee Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; #@END LICENSE; #. r""""""Stuff stolen from psi. Should import or not as necessary; or some better way. Apologies to the coders. """"""; from __future__ import absolute_import; from __future__ import print_function; import sys; import math; import re; import os; import string; from .vecutil import *. def _success(label):; """"""Function to print a '*label*...PASSED' line to screen.; Used by :py:func:`util.compare_values` family when functions pass. """"""; print('\t{0:.<66}PASSED'.format(label)); sys.stdout.flush(). [docs]def compare_values(expected, computed, digits, label, exitonfail=True):; """"""Function to compare two values. Prints :py:func:`util.success`; when value *computed* matches value *expected* to number of *digits*; (or to *digits* itself when *digits* > 1 e.g. digits=0.04). Performs; a system exit on failure unless *exitonfail* False, in which case; returns error message. Used in input files in the test suite. """"""; thresh = 10 ** -digits if digits > 1 else digits; if abs(expected - computed) > thresh:; print(""\t%s: computed value (%f) does not match (%f) to %f digits."" % (label, computed, expected, digits)); if exitonfail:; sys.exit(1); else:; return; if math.isnan(computed):; print(""\t%s: computed value (%f) does not match (%f)\n"" % (label, computed, expected)); print(""\tprobably because the computed value is nan.""); if exitonfail:; sys.exit(1); else:; return; _success(label). [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; print(""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); sys.exit(1); _success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:fun",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/psiutil.html:1870,test,test,1870,psi4manual/1.0.0/_modules/qcdb/psiutil.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/psiutil.html,1,['test'],['test']
Testability,"eed to do is cd into the directory and type make.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplugin +aointegrals; >>> psi4 --new-plugin myplugin +mointegrals; >>> psi4 --new-plugin myplugin +sointegrals; >>> psi4 --new-plugin myplugin +wavefunction. Several stable sample plugin directories are available to consult in the; psi4/tests directory. Other plugin directories can be used as models; but are in active development. For documentation on plugin modules, see; Available Plugins. psi4/tests/plugin_aointegrals/aointegrals.cc.in; An example that uses the LibMints library to generate and print AO basis (no symmetry) integrals.; psi4/tests/plugin_backtrans/backtrans.cc.in; A test of the one- and two-particle density matrix backtransformation code.; psi4/tests/plugin_ccsort/plugin_ccsort.cc.in; psi4/tests/plugin_mointegrals/mointegrals.cc.in; An example that uses the LibTrans library to generate and print MO basis integrals.; psi4/tests/plugin_mp2/plugin_mp2.cc.in; A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; psi4/tests/plugin_sointegrals/sointegrals.cc.in; An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directory contains the following files. Makefile — Makefile for the directory. As long as you are the; only user of the plugin, this should not need editing. After any change to; the plugin C++ code, make must be run in the plugin directory to; recompile the myplugin.so executable, but recompiling the main; PSI4 code is not necessary. (PSI4 must have originally been; compiled with configure directive --with-plugins.). input.dat — Sample input file for the plugin (old style).; Modifications to a standard input file needed to r",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/plugins-1.html:3693,test,tests,3693,psi4manual/4.0b2/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins-1.html,2,['test'],['tests']
Testability,"een caught, but just in case...; raise ValidationError(""FINDIF: {} is an invalid number of points."".format(findifrec[""stencil_size""])); g_q = np.asarray(g_q). if data[""print_lvl""]:; energy_string = """"; for i in range(1, max_disp + 1):; energy_string = f""Energy(-{i}) "" + energy_string + f""Energy(+{i}) ""; info = ""\n Coord "" + energy_string + "" Force""; for salc in range(data[""n_salc""]):; print_str = ""\n {:5d}"" + "" {:17.10f}"" * (e_per_salc) + "" {force:17.10f}""; energies = E[salc]; info += print_str.format(salc, force=g_q[salc], *energies); core.print_out(info); logger.info(info). # Transform the gradient from mass-weighted SALCs to non-mass-weighted Cartesians; B = data[""salc_list""].matrix(); g_cart = np.dot(g_q, B); g_cart = g_cart.reshape(data[""n_atom""], 3); massweighter = np.array([mol.mass(a) for a in range(data[""n_atom""])])**(0.5); g_cart = (g_cart.T * massweighter).T. if data[""print_lvl""]:; info = ""\n -------------------------------------------------------------\n""; core.print_out(info); logger.info(info). return g_cart. def _process_hessian_symmetry_block(H_block: np.ndarray, B_block: np.ndarray, massweighter: np.ndarray, irrep: str, print_lvl: int) -> np.ndarray:; """"""Perform post-construction processing for a symmetry block of the Hessian.; Statements need to be printed, and the Hessian must be made orthogonal. Parameters; ----------; H_block; A block of the Hessian for an irrep, in mass-weighted salcs.; (nsalc, nsalc); B_block; A block of the B matrix for an irrep, which transforms CdSalcs to Cartesians.; (nsalc, 3 * nat); massweighter; The mass associated with each atomic coordinate.; (3 * nat, ) Due to x, y, z, values appear in groups of three.; irrep; A string identifying the irrep H_block and B_block are of.; print_lvl; The level of printing information requested by the user. Returns; -------; H_block; H_block, but made into an orthogonal array.; """""". # Symmetrize our Hessian block.; # The symmetric structure is lost due to errors in the computation; H_bloc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html:22960,log,logger,22960,psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,8,['log'],['logger']
Testability,"eening!. aediis-2; EDIIS test case from 10.1063/1.1470195. cc56; EOM-CCSD/6-31g excited state transition data for water cation. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. scf-response2; Compute the dipole polarizability for water with custom basis set. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. dft-smoke; DFT Functional Smoke Test. dfcasscf-sp; CASSCF/6-31G** energy point. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. nbo; Generation of NBO file. tdscf-6; td-camb3lyp with DiskDF and method/basis specification. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified expl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:24000,test,test,24000,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"eep the FLOP rate up by allowing for a; reasonably large amount of BLAS3/BLAS2 work to form the densities and potentials; in each block). For each block, a united set of significant basis functions is; determined by the cutoff radius of each shell of basis functions. The size of; this cutoff radius (and thereby the accuracy of the density/potential; evaluation) can be varied by setting the DFT_BASIS_TOLERANCE, which; defaults to 1E-12. We are still exploring optimizations of the octree algorithm; and the basis cutoffs, but it is likely that significant speed gains may be; realized by relaxing the basis cutoff tolerance, with negligible decrease in; accuracy.; An example of a fully specified grid is as follows:; molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; dft_spherical_points 590 # Often needed; dft_radial_points 99 # Often needed; dft_radial_scheme treutler # Rarely needed; dft_nuclear_scheme treutler # Rarely needed; dft_basis_tolerance 1.0E-11 # Can speed things up, but benchmark the error; }. energy('b3lyp'). ERI Algorithms¶; The ERI algorithms for the Coulomb and hybrid exchange are identical to those; listed above for Hartree-Fock. However, for LRC functionals, the long-range; exchange contributions to the Kohn-Sham matrix have only been implemented in the; DF and DIRECT algorithms. The use of DF is highly recommended for KS-DFT, as the; errors incurred by the density fitting approximation (in a proper -JKFIT; auxiliary basis) are orders of magnitude smaller than the accuracy of any known; functional. IP Fitting¶; In collaboration with the Bredas group, we have developed an automatic procedure; for IP fitting of LRC functionals, based on a modified Regula-Falsi method. To; perform IP fitting, one simply calls the ip_fitting() Python macro, after; setting up a standard LRC UKS computation. A representative example is:; memory 512 MB. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c1 # IP fitting must be run in C1 symmetry; }. set {;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/dft-1.html:17814,benchmark,benchmark,17814,psi4manual/4.0b2/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft-1.html,4,['benchmark'],['benchmark']
Testability,"eep the FLOP rate up by allowing for a; reasonably large amount of BLAS3/BLAS2 work to form the densities and potentials; in each block). For each block, a united set of significant basis functions is; determined by the cutoff radius of each shell of basis functions. The size of; this cutoff radius (and thereby the accuracy of the density/potential; evaluation) can be varied by setting the DFT_BASIS_TOLERANCE, which; defaults to 1E-12. We are still exploring optimizations of the octree algorithm; and the basis cutoffs, but it is likely that significant speed gains may be; realized by relaxing the basis cutoff tolerance, with negligible decrease in; accuracy.; An example of a fully specified grid is as follows:; molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; dft_spherical_points 590 # Often needed; dft_radial_points 99 # Often needed; dft_radial_scheme treutler # Rarely needed; dft_nuclear_scheme treutler # Rarely needed; dft_basis_tolerance 1.0E-11 # Can speed things up, but benchmark the error; }. energy('b3lyp'). ERI Algorithms¶; The ERI algorithms for the Coulomb and hybrid exchange are identical to those; listed above for Hartree-Fock. However, for LRC functionals, the long-range; exchange contributions to the Kohn-Sham matrix have only been implemented in the; DF and DIRECT algorithms. The use of DF is highly recommended for KS-DFT, as the; errors incurred by the density fitting approximation (in a proper -JKFIT; auxiliary basis) are orders of magnitude smaller than the accuracy of any known; functional.; Note: gradients with LRC functionals and DF integrals technology are not; currently enabled. We hope to have a patch for this deficit soon. Please let us; know if you have a strong need for this capability, and we will move the; priority up. IP Fitting¶; In collaboration with the Bredas group, we have developed an automatic procedure; for IP fitting of LRC functionals, based on a modified Regula-Falsi method. To; perform IP fitting, one simply c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/dft-1.html:18182,benchmark,benchmark,18182,psi4manual/1.0.0/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/dft-1.html,6,['benchmark'],['benchmark']
Testability,"ef USING_AddOn in; source files.; If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. psi4/psi4/external/upstream/; Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; psi4/psi4/common/ are needed, be sure to add them to the; DEPENDS argument.; The usual practice to to get everything cohesive between; the CMake for the AddOn repository and PSI4 and then as a; last step, mint a tag in the former and add it to two places in; psi4/external/upstream/addon_name/CMakeLists.txt and one; place in psi4/psi4/CMakeLists.txt so that only that version; and later are acceptable to PSI4 for detecting pre-built. psi4/tests/; In psi4/tests/CMakeLists.txt, add a block adding a tests subdirectory if Add-On enabled; Create new subdirectory tests/addon_name with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. psi4/doc/sphinxman/; Create a new .rst page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; psi4/doc/sphinxman/source/interfacing.rst.; Add a bullet to psi4/doc/sphinxman/source/build_planning.rst; Add the new page to the long list in; psi4/doc/sphinxman/CMakeLists.txt. If there are any files or; images referred to, add them to the file, too, following precedent. else¶. Build conda packages; Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. PSI4 and Add-On Projects Working Together; Obligations of the External Project owners are to:; allow us to contribute some",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/manage_addon-1.html:4202,test,tests,4202,psi4manual/1.1.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/manage_addon-1.html,12,['test'],['tests']
Testability,"ef define_supersubsets(self):; """""". """"""; self.sset['tt'] = ['default', 'default', 'default', 'default']; self.sset['hb'] = ['hb', None, 'default', 'hb']; self.sset['mx'] = ['mx', 'mx', None, 'mx']; self.sset['dd'] = ['dd', 'dd', None, 'dd']; self.sset['mxdd'] = ['mxdd', 'default', None, 'mxdd']; self.sset['pp'] = ['mxddpp', 'mxddpp', None, None]; self.sset['np'] = ['mxddnp', 'mxddnp', None, 'mxdd']; self.sset['tt-5min'] = ['default', '5min', '5min', 'default']; self.sset['hb-5min'] = ['hb', None, '5min', 'hb']; self.sset['mx-5min'] = ['mx', 'mx-5min', None, 'mx']; self.sset['dd-5min'] = ['dd', 'dd-5min', None, 'dd']; self.sset['mxdd-5min'] = ['mxdd', '5min', None, 'mxdd']; self.sset['pp-5min'] = ['mxddpp', 'mxddpp-5min', None, None]; self.sset['np-5min'] = ['mxddnp', 'mxddnp-5min', None, 'mxdd']. # def benchmark(self):; # """"""Returns the model chemistry label for the database's benchmark.""""""; # return 'C2001BENCH'. [docs] def define_supermodelchems(self):; """""". """"""; self.benchmark = 'C2011BENCH'; self.mcs['C2010BENCH'] = ['S22A', 'NBC100', 'HBC60', 'HSG0']; self.mcs['C2011BENCH'] = ['S22B', 'NBC10A', 'HBC6A', 'HSGA']. self.mcs['CCSD-CP-adz'] = ['CCSD-CP-adz', 'CCSD-CP-hadz', 'CCSD-CP-adz', 'CCSD-CP-hadz']; self.mcs['CCSD-CP-atz'] = ['CCSD-CP-atz', 'CCSD-CP-hatz', 'CCSD-CP-atz', 'CCSD-CP-hatz']; self.mcs['CCSD-CP-adtz'] = ['CCSD-CP-adtz', 'CCSD-CP-hadtz', 'CCSD-CP-adtz', 'CCSD-CP-hadtz']; self.mcs['CCSD-CP-adtzadz'] = ['CCSD-CP-adtzadz', 'CCSD-CP-adtzhadz', 'CCSD-CP-adtzadz', 'CCSD-CP-adtzhadz']; self.mcs['CCSD-CP-atzadz'] = ['CCSD-CP-atzadz', 'CCSD-CP-atzhadz', 'CCSD-CP-atzadz', 'CCSD-CP-atzhadz']; self.mcs['CCSD-CP-atqzadz'] = ['CCSD-CP-atqzadz', 'CCSD-CP-atqzhadz', 'CCSD-CP-atqzadz', 'CCSD-CP-atqzhadz']; self.mcs['CCSD-CP-atzadtz'] = ['CCSD-CP-atzadtz', 'CCSD-CP-atzhadtz', 'CCSD-CP-atzadtz', 'CCSD-CP-atzhadtz']; self.mcs['CCSD-CP-atqzadtz'] = ['CCSD-CP-atqzadtz', 'CCSD-CP-atqzhadtz', 'CCSD-CP-atqzadtz',; 'CCSD-CP-atqzhadtz']; self.mcs['CCSD-CP-atqzatz'] = ['CCSD-CP-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:107542,benchmark,benchmark,107542,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"ef gradient due to new BraggSlater radii. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. scf-upcast-custom-basis; test scf castup with custom basis sets. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. fnocc5; Test FNO-DF-CCSD(T) energy. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. psimrcc-fd-freq2; Mk-MRCCSD frequ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:38880,test,test,38880,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"efault convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, etc..; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for compare_values() and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, etc.).; Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in psi4/tests/CMakeLists.txt or, for an addon, tests/<addon>/CMakeLists.txt.; The test directory will need at least two files, CMakeLists.txt and input.dat. CMakeLists.txt¶; This file adds the test case to the suite. It should have at least the following two uncommented lines:; include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ctest -L label purposes. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not sys",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:4926,test,tests,4926,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,10,['test'],['tests']
Testability,"eference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. HTBH¶. Database (Truhlar) of hydrogen-transfer barrier height reactions.; Geometries from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/raw_geom.cgi (broken link).; Reference energies from Zhao et al. JPCA, 109 2012-2018 (2005) doi: 10.1021/jp045141s [in supporting information]. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; \(\Rightarrow\) 'S22B' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22; 'WATER' water dimer. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 1; …; 'mol22' five-point ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_available_databases.html:4367,benchmark,benchmark,4367,psi4manual/1.8.x/autodoc_available_databases.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_available_databases.html,2,['benchmark'],['benchmark']
Testability,"eference values are often assigned to variables for later use.; The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory. output.ref¶; When your test case is in final form, run it locally, rename the output to output.ref, and check it into the repository alongside input.dat.; While this isn’t used for any testing machinery, it can be handy for users or developers to consult. test_input.py¶; Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest’s notice, add a file to the directory named test_input.py.; Below is an example for the psi4/tests/ci-property/test_input.py; from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the CMakeLists.txt.; The def test_ci_property contains the name of the test, now with underscores rather than hyphens.; def test_ identifies it to pytest as a test.; That part of the function name and the name of the file, test_input.py are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ctest_runner(__file__).; This uses QCEngine machinery to execute python psi4 input.dat.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files do need to be registered in psi4/psi4/CMakeLists.txt.; Finally, the label string passe",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:8725,test,test,8725,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,4,['test'],['test']
Testability,"eference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark. 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. O24by5¶. Database (O24) of interaction energies for small open-shell high-spin bimolecular complexes.; Geometries taken from https://gitlab.com/piotr.zuchowski/o24x5/-/tree/4ec3cae0546b6ae4f4f2cf28482cd164c8323cc6.; Reference interaction energies taken from J. Chem. Phys. 154, 134106 (2021) https://doi.org/10.1063/5.0043793.; Variant without midbonds. no | name | subset. 1 | CN - He | DD; 2 | NH - He | DD; 3 | C2H3 - C2H4 | DD; 4 | O2 - H2 | DD; 5 | NH - Ar | DD; 6 | CN - Ar | DD; 7 | O2 - N2 | DD; 8 | H2O - O2(sp) | DD; 9 | O2 - O2 | DD. 10 | NH - NH | ED; 11 | CH2O - NH2 | ED; 12 | H2O - Na | ED; 13 | H2O - OH | ED; 14 | H2O - O2H | ED; 15 | Li - NH3(gm) | ED; 16 | Li - O2 | MX; 17 | CN ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_available_databases.html:5025,benchmark,benchmark,5025,psi4manual/1.6.x/autodoc_available_databases.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_available_databases.html,2,['benchmark'],['benchmark']
Testability,"egex of labels (e.g., cc, mints,; libefp). Run tests in parallel with -j flag. For maximum parallelism: ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See the setup note at How to run Psi4 as Python module after compilation; if needed.):; python -c “import psi4; psi4.test()”. How to refer to Psi4¶; Ways to refer to PSI4 in text, in order of decreasing goodness:. as Psi4 in Optima regular font with “si” in custom small caps; according to psi4/media/README.md.; html: <span style=""font-family: Optima, sans-serif; color: #273896;"">P",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:40502,log,log,40502,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,2,['log'],['log']
Testability,"el which must be present in computed. (“omega” recc. for vibs.); toldict (Dict[str, float]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. Extra QCA Functions¶. psi4.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=<function _psi4_true_raise_handler>)¶; Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters:. expected – int, bool, str or array-like of same.; Reference value against which computed is compared.; computed – int, bool, str or array-like of same.; Input value to compare against expected.; label – Label for passed and error messages. Defaults to calling function name.; equal_phase – Compare computed or its opposite as equal.; quiet – Whether to log the return message.; return_message – Whether to return tuple. See below.; return_handler – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Returns:. allclose (bool) – Returns True if expected and computed are equal; False otherwise.; message (str) – When return_message=True, also return passed or error message. Return type:; bool | Tuple[bool, str]. Notes. Akin to numpy.array_equal().; For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use compare_recursive(). psi4.compare_recursive(expected, computed, *args, **kwargs)¶; Comparison function for recursively comparing mixed-type and nested structures such as dictionaries and lists.; See qcelemental.testing.compare_recursive() for details. table of contents. Test Suite; CTest and pytest, PSIthon and PsiAPI; Test Contents; Adding PSIthon Test Cases; CMakeLists.txt; input.dat; output.ref; test_input.py; Running for Debugging. Adding PsiAPI Test Cases; Running for Debugging. Comparison Fu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/add_tests.html:29326,log,logging,29326,psi4manual/1.8.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/add_tests.html,1,['log'],['logging']
Testability,"el: pytest -m ""not testlabel"". How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n`getconf _NPROCESSORS_ONLN`; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n`getconf _NPROCESSORS_ONLN`. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:54696,test,tests,54696,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['test'],['tests']
Testability,"elchem=[], benchmark='default', sset='default', modelchemlabels=None,; failoninc=True):; """"""; *modelchem* is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?; """"""; import pandas as pd; import numpy as np. if self.dbse not in ['ACONF', 'SCONF', 'PCONF', 'CYCONF']:; saptdata = self.load_saptdata_frombfdb(sset=sset, pythonpath='/Users/loriab/linux/bfdb/sapt_punt',; failoninc=failoninc). listodicts = []; rhrxn = self.get_hrxn(sset=sset); for dbrxn, orxn in rhrxn.iteritems():; wdb = dbrxn.split('-')[0]; dbix = self.dbdict.keys().index(wdb); wbm = self.mcs[benchmark][dbix]; wss = self.sset[sset][dbix]; woss = self.dbdict[wdb].oss[wss]; try:; Rrat = woss.axis['Rrat'][woss.hrxn.index(orxn.name)]; except KeyError:; Rrat = 1.0 # TODO generic soln?. dictorxn = {}; dictorxn['DB'] = wdb; dictorxn['System'] = orxn.tagl; dictorxn['Name'] = orxn.name; dictorxn['R'] = Rrat; dictorxn['System #'] = orxn.indx; dictorxn['Benchmark'] = np.NaN if orxn.benchmark is None else orxn.data[; wbm].value # this NaN exception is new and experimental; dictorxn['QcdbSys'] = orxn.dbrxn. if self.dbse not in ['ACONF', 'SCONF', 'PCONF', 'CYCONF']:; dictorxn['SAPT ELST ENERGY'] = saptdata[dbrxn]['elst']; dictorxn['SAPT EXCH ENERGY'] = saptdata[dbrxn]['exch']; dictorxn['SAPT IND ENERGY'] = saptdata[dbrxn]['ind']; dictorxn['SAPT DISP ENERGY'] = saptdata[dbrxn]['disp']; dictorxn['SAPT TOTAL ENERGY'] = dictorxn['SAPT ELST ENERGY'] + dictorxn['SAPT EXCH ENERGY'] + \; dictorxn['SAPT IND ENERGY'] + dictorxn['SAPT DISP ENERGY']. orgts = orxn.rxnm['default'].keys(); omolD = Molecule(orgts[0].mol) # TODO this is only going to work with Reaction ~= Reagent databases; npmolD = omolD.format_molecule_for_numpy(); omolA = Molecule(orgts[1].mol) # TODO this is only going to work with Reaction ~= Reagent databases; omolA.update_geometry(); dictorxn['MonA'] = omolA.natom(). # this whole member fn not well defined for db of varying stoichiometry; if self.dbse in ['ACONF', 'SCONF',",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:84755,benchmark,benchmark,84755,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"eleting; the file each time (since it appends). Comparison Functions¶. Plain Old Data¶. psi4.compare_values(expected, computed, atol_exponent, label[, *, **kwargs]). psi4.compare_values(expected, computed[, label, *, **kwargs])¶; Comparison function for float or float array-like data structures.; See qcelemental.testing.compare_values() for details.; psi4.compare_arrays() is an old comparison function for float NumPy arrays that is now an alias to this.; Handles both Psi4-style signatures ((expected, computed, atol_exponent, label); see atol_exponent parameter below) and QCA-style signatures ((expected, computed, label)). Parameters; atol_exponent (int or float) – Absolute tolerance (see formula in qcelemental.testing.compare_values() notes).; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99. qcelemental.testing.compare_values(expected, computed, label=None, *, atol=1e-06, rtol=1e-16, equal_nan=False, equal_phase=False, passnone=False, quiet=False, return_message=False, return_handler=None)[source]¶; Returns True if two floats or float arrays are element-wise equal within a tolerance. Parameters. expected (Union[float, List, ndarray]) – float or float array-like; Reference value against which computed is compared.; computed (Union[float, List, ndarray]) – float or float array-like; Input value to compare against expected.; atol (float) – Absolute tolerance (see formula below).; label (Optional[str]) – Label for passed and error messages. Defaults to calling function name.; rtol (float) – Relative tolerance (see formula below). By default set to zero so atol dominates.; equal_nan (bool) – Passed to np.isclose. Compare NaN’s as equal.; equal_phase (bool) – Compare computed or its opposite as equal.; passnone (bool) – Return True when both expected and computed are None.; quiet (bool) – Wheth",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:15363,test,testing,15363,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,1,['test'],['testing']
Testability,"elf.dbse]['stde']; # generate matplotlib instructions and call or print; try:; from . import mpl; import matplotlib.pyplot as plt; except ImportError:; # if not running from Canopy, print line to execute from Canopy; print(""""""filedict = mpl.disthist(%s,\n title='%s',\n xtitle='%s'\n me=%s,\n stde=%s,\n saveas=%s,\n relpath=%s\n graphicsformat=%s)\n\n"""""" %; (dbdat, title, xtitle, me, stde, repr(saveas), repr(relpath), repr(graphicsformat))); else:; # if running from Canopy, call mpl directly; filedict = mpl.disthist(dbdat, title=title, xtitle=xtitle, me=me, stde=stde,; view=view,; saveas=saveas, relpath=relpath, graphicsformat=graphicsformat); return filedict. [docs] def plot_modelchems(self, modelchem, benchmark='default', mbenchmark=None,; sset='default', msset=None, failoninc=True, verbose=False, color='sapt',; xlimit=4.0, labeled=True, view=True,; mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None,; saveas=None, relpath=False, graphicsformat=['pdf']):; """"""Computes individual errors and summary statistics over all component; databases for each model chemistry in array *modelchem* versus *benchmark*; over subset *sset*. *mbenchmark* and *msset* are array options (same; length as *modelchem*) that override *benchmark* and *sset*, respectively,; for non-uniform specification. Thread *color* can be 'rgb' for old; coloring, a color name or 'sapt' for spectrum coloring. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of *mousetext*, *mouselink*,; or *mouseimag* is specified, htmlcode",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:77009,benchmark,benchmark,77009,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"els to mix up test ordering. If tests fail that pass when run alone, you’ve got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. For every new test file, add pytestmark = [pytest.mark.psi, pytest.mark.api] at the top.; This ensures that every test has the psi mark and every PsiAPI test has the api mark to contrast with PSIthon tests with cli mark.; There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m <mark>; vs. ctest -L <mark>) rather than just by name (pytest -k <name_fragment>; vs. ctest -R <name_fragment>). Far more complicated logic is allowed than for; CTest: pytest -m ""dftd3 and not api and not long"".; The most important marks are “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging¶; There are many ways to run pytest, How to test a Psi4 installation, and three different copies of the test file; (i.e., psi4/tests/pytests/test_mp2.py, <objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py,; CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running cmake --build after each change. Easiest is from <objdir>, run pytest ../tests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> or -n auto if pytest-xdist; installed) or print test names (-v) or print warnings (-rws).; An important point is that because they’re PsiAPI, import psi4 is happening,; so the <objdir> PSI4 module must be in PYTHONPATH. Also, any call; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:12878,test,test,12878,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['test'],['test']
Testability,"else lines; string = ''; for j in range(lines):; string += """".join(str(x) for x in input_list[index + 1 + j]); if extra > 0:; string += """".join(str(x) for x in input_list[index + 1 + lines]); field = np.fromiter(string.split(), dtype=dtype); return offset + 1, field. def _fchkfile_to_string(fname: str) -> str:; """""" Load FCHK file into a string""""""; with open(fname, 'r') as handle:; fchk_string = handle.read(); return fchk_string. [docs]; def compare_fchkfiles(expected: str, computed: str, atol_exponent: Union[int, float], label: str):; """"""Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4's FCHK files. Parameters; ----------; expected; Path to reference FCHK file against which `computed` is compared.; computed; Path to input FCHK file to compare against `expected`.; atol_exponent; Absolute tolerance for high accuracy fields -- 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; label; Label for passed and error messages. """"""; fchk_ref = _fchkfile_to_string(expected).splitlines(); fchk_calc = _fchkfile_to_string(computed).splitlines(). high_accuracy = atol_exponent; low_accuracy = 3. # Those listed below need super high scf convergence (d_conv 1e-12) and might; # show machine dependence. They will be tested with ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/fchk.html:2940,log,logical,2940,psi4manual/1.8.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/fchk.html,12,"['log', 'test']","['logical', 'test']"
Testability,"em gets the smoke label. psi4/doc/sphinxman/; Create a new .rst page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; psi4/doc/sphinxman/source/interfacing.rst.; Add a bullet to psi4/doc/sphinxman/source/build_planning.rst; Add the new page to the long list in; psi4/doc/sphinxman/CMakeLists.txt. If there are any files or; images referred to, add them to the file, too, following precedent. else¶. Build conda packages; Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. PSI4 and Add-On Projects Working Together; Obligations of the External Project owners are to:; allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the PSI4 build and so the installed project can; be readily detected by PSI4 or any interested party (through a; CMake imported target).; provide us a tag at a tested commit/version number so their; development may be ongoing.; communicate with us when they’ve made improvements and minted; a new tag. In return, for Add-Ons the PSI4 project will:; leave control of their code under your purview.; maintain any interfacing code needed.; regularly run integration tests between PSI4 and your code.; build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; conda install addon --channel psi4.; provide a development sandbox for your code through PSI4 plugins.; provide conda download counts independent of PSI4. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Managing: Git, Conda, CMake and all that. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/manage_addon-1.html:5819,test,tests,5819,psi4manual/1.1.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/manage_addon-1.html,6,"['sandbox', 'test']","['sandbox', 'testing', 'tests']"
Testability,"ems():; fragment_slice_dict[k] = slice(start, start + v); start += v. molecule_total_atoms = sum(fragment_size_dict.values()). # Now compute the energies; energies_dict = {}; ptype_dict = {}; for n in compute_list.keys():; psi4.print_out(""\n ==> N-Body: Now computing %d-body complexes <==\n\n"" % n); print(""\n ==> N-Body: Now computing %d-body complexes <==\n"" % n); total = len(compute_list[n]); for num, pair in enumerate(compute_list[n]):; psi4.print_out(""\n N-Body: Computing complex (%d/%d) with fragments %s in the basis of fragments %s.\n\n"" %; (num + 1, total, str(pair[0]), str(pair[1]))); ghost = list(set(pair[1]) - set(pair[0])). current_mol = molecule.extract_subsets(list(pair[0]), ghost); ptype_dict[pair] = func(method_string, molecule=current_mol, **kwargs); energies_dict[pair] = psi4.get_variable(""CURRENT ENERGY""); psi4.print_out(""\n N-Body: Complex Energy (fragments = %s, basis = %s: %20.14f)\n"" % ; (str(pair[0]), str(pair[1]), energies_dict[pair])); ; # Flip this off for now, needs more testing; #if 'cp' in bsse_type_list and (len(bsse_type_list) == 1):; # psi4.set_global_option('DF_INTS_IO', 'LOAD'). psi4.clean(). # Final dictionaries; cp_energy_by_level = {n: 0.0 for n in nbody_range}; nocp_energy_by_level = {n: 0.0 for n in nbody_range}. cp_energy_body_dict = {n: 0.0 for n in nbody_range}; nocp_energy_body_dict = {n: 0.0 for n in nbody_range}; vmfc_energy_body_dict = {n: 0.0 for n in nbody_range}. # Build out ptype dictionaries if needed; if ptype != 'energy':; if ptype == 'gradient':; arr_shape = (molecule_total_atoms, 3); elif ptype == 'hessian':; arr_shape = (molecule_total_atoms * 3, molecule_total_atoms * 3); else:; raise KeyError(""N-Body: ptype '%s' not recognized"" % ptype). cp_ptype_by_level = {n: np.zeros(arr_shape) for n in nbody_range}; nocp_ptype_by_level = {n: np.zeros(arr_shape) for n in nbody_range}; vmfc_ptype_by_level = {n: np.zeros(arr_shape) for n in nbody_range}. cp_ptype_body_dict = {n: np.zeros(arr_shape) for n in nbody_range}; noc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/driver_nbody.html:10082,test,testing,10082,psi4manual/1.0.0/_modules/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/driver_nbody.html,1,['test'],['testing']
Testability,"en optimizes using previous orbitals for scf guess, in subsequent calculations. The last two displacements of the hessian break the plane of symemtry, This test confirms that only the reference geometry, with the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. nbody-vmfc-hessian; Computation of VMFC-corrected water trimer Hessian (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. extern4; External potential calculation involving a TIP3P water and a QM water. Gradient on the external charges is compared to gradient on the QM atoms to validate the gradient on the charges. tdscf-7; TD-HF test variable access. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mom-h2o-3; MOM excitation from LUMO HOMO+3. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. fsapt-ext-abc; FSAPT with external charge on trimer. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupatio",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:17299,test,test,17299,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"en-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cepa1; cc-pvdz H2O Test CEPA(1) Energy. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. dft-grac; Gradient regularized asymptotic correction (GRAC) test. mbis-5; MBIS calculation on ZnO. soscf-large; Second-order SCF convergnece: Benzene. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc13c; Tests RHF CCSD(T)gradients. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). pywrap-align; apply linear fragmentation algorithm to a water cluster. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. fnocc6; Test method/basis with disk_df. isapt-charged; This test case shows an example of running the I-SAPT0/aug-cc-pVDZ computation for a positively charged system, illustrating the cation-pi interaction. The SIAO1 link partitioning algorithm is used. The system is taken from http://dx.doi.org/10.1016/j.comptc.2014.02.008. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Py",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:37139,test,test,37139,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"encies and return an array of shape (3, 3) for atoms, (5, 3 * nat) for linear `geom`,; or (6, 3 * nat) otherwise. To handle noisy linear geometries, pass `tol` on the order of max deviation. m1 = np.asarray([1.]); m2 = np.asarray([1., 1.]); m3 = np.asarray([1., 1., 1.]); m4 = np.asarray([1., 1., 1., 1.]); g4 = np.asarray([[ 1., 1., 0.],; [-1., 1., 0.],; [-1., -1., 0.],; [ 1., -1., 0.]]); g2 = np.asarray([[ 1., 1., 0.],; [-1., -1., 0.]]); g3 = np.asarray([[3., 3., 3.],; [4., 4., 4.,],; [5., 5., 5.]]); g3noisy = np.asarray([[3., 3.001, 3.],; [4., 4.001, 4.,],; [5., 5., 5.01]]); g33 = np.asarray([[0., 0., 0.],; [1., 0., 0.],; [-1., 0., 0.]]); g1 = np.asarray([[0., 0., 0.]]); g11 = np.asarray([[1., 2., 3.]]); noise = np.random.normal(0, 1, 9).reshape(3, 3); noise = np.divide(noise, np.max(noise)). assert(_get_TR_space(m4, g4).shape == (6, 12)); assert(_get_TR_space(m2, g2).shape == (5, 6)); assert(_get_TR_space(m3, g3).shape == (5, 9)); assert(_get_TR_space(m3, g33).shape == (5, 9)); assert(_get_TR_space(m1, g1).shape == (3, 3)); assert(_get_TR_space(m1, g11).shape == (3, 3)); assert(_get_TR_space(m3, g3noisy, tol=1.e-2).shape == (5, 9)); for ns in range(2, 6):; tol = 10. ** -ns; gnoisy = g3 + tol * noise; assert(_get_TR_space(m3, gnoisy, tol=10*tol).shape == (5, 9)). """"""; sqrtmmm = np.repeat(np.sqrt(m), 3); xxx = np.repeat(geom[:, 0], 3); yyy = np.repeat(geom[:, 1], 3); zzz = np.repeat(geom[:, 2], 3). z = np.zeros_like(m); i = np.ones_like(m); ux = np.ravel([i, z, z], order='F'); uy = np.ravel([z, i, z], order='F'); uz = np.ravel([z, z, i], order='F'). # form translation and rotation unit vectors; T1 = sqrtmmm * ux; T2 = sqrtmmm * uy; T3 = sqrtmmm * uz; R4 = sqrtmmm * (yyy * uz - zzz * uy); R5 = sqrtmmm * (zzz * ux - xxx * uz); R6 = sqrtmmm * (xxx * uy - yyy * ux). TRspace = []; if 'T' in space:; TRspace.append([T1, T2, T3]); if 'R' in space:; TRspace.append([R4, R5, R6]); if not TRspace:; # not sure about this, but it runs; ZZ = np.zeros_like(T1); TRspace.append([ZZ]).",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html:41132,assert,assert,41132,psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html,24,['assert'],['assert']
Testability,"endency structure built into the psi4/doc/sphinxman/CMakeLists.txt; , so very long builds should be infrequent (unless you’re touching; psi4/psi4/src/read_options.cc or the driver. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) doc/sphinxman and start from scratch.; Even ~10 minutes of build time can be annoying when developing; documentation and testing rst files. In that situation, use the target; below which builds only the written docs (not autodocs) in; psi4/doc/sphinxman/source quickly, though with a lot of warnings for; unresolved links:; >>> make sphinxmini. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. reStructuredText; links example; rendered test document; vs. source test document; A third reStructuredText and Sphinx; Sphinx Docs. Math in the Codebase¶; It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the #! comment comments at the top of test case; input files, the /*- comment -*/ comments in; psi4/psi4/src/read_options.cc, and the r"""""" comment """"""; docstrings in python modules. (That r"""""" makes the string read; literally, so your LaTeX symbols aren’t confused with escape characters.); For the two former, math has traditionally; been written in LaTeX (with the special substitution @@ for; subscripting underscore). The autodoc script has been trained to convert; inline LaTeX math to reST math, provided the expression within dollar; signs is offset from other text. That is, expressions of the form; ^ $latex math$[., ]$ (pseudo-regex) are good, while H$_2$O and LaTeX tables; are not translated correctly. Python docstrings are absorbed as-is, so; please use reST math forma",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/documentation-1.html:5480,test,test,5480,psi4manual/1.4.0/documentation-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/documentation-1.html,5,['test'],['test']
Testability,"endent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash_conv = driver_util.negotiate_convergence_criterion((2, 2), lowername, return_optstash=True). # At stationary point?; if 'ref_gradient' in kwargs:; core.print_out(""""""hessian() using ref_gradient to assess stationary point.\n""""""); G0 = kwargs['ref_gradient']; else:; tmpkwargs = copy.deepcopy(kwargs); tmpkwargs.pop('dertype', None); G0 = gradient(lowername, molecule=molecule, **tmpkwargs); translations_projection_sound, rotations_projection_sound = _energy_is_invariant(G0.rms()); core.print_out(; '\n Based on options and gradient (rms={:.2E}), recommend {}projecting translations and {}projecting rotations.\n'; .format(G0.rms(), '' if translations_projection_sound else 'not ',; '' if rotations_projection_sound else 'not ')); if not core.has_option_changed('FINDIF', 'FD_PROJECT'):; core.set_local_option('FINDIF', 'FD_PROJECT', rotations_projection_sound). # We have the desired method. Do it.; logger.info(f""Compute hessian(): method={lowername}, basis={core.get_global_option('BASIS').lower()}, molecule={molecule.name()}, nre={'w/EFP' if hasattr(molecule, 'EFP') else molecule.nuclear_repulsion_energy()}""); logger.debug(""w/EFP"" if hasattr(molecule, ""EFP"") else pp.pformat(molecule.to_dict())); core.print_out(""""""hessian() will perform analytic frequency computation.\n""""""); wfn = procedures['hessian'][lowername](lowername, molecule=molecule, **kwargs); logger.info(f""Return hessian(): {wfn.energy()}""); logger.info(nppp(wfn.hessian().np)). wfn.set_gradient(G0); basisstash.restore(); optstash.restore(); optstash_conv.restore(). #if isinstance(lowername, str) and lowername in procedures['energy']:; # # this correctly filters out cbs fn and ""hf/cc-pvtz""; # # it probably incorrectly filters out mp5, but reconsider in DDD; # core.set_variable(f""CURRENT HESSIAN"", H); # core.set_variable(f""{lowername.upper()} TOTAL HESSIAN"", H); # core.set_variable(f""{lowername.upper()} TOTAL GRADIENT"", G0);",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html:73696,log,logger,73696,psi4manual/1.6.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html,10,['log'],['logger']
Testability,"ene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. scf-guess-read; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc10; ROHF-CCSD cc-pVDZ energy for the state of the CN radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html:7702,test,tested,7702,psi4manual/4.0b4/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html,8,['test'],['tested']
Testability,"energies for H2O. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fci-h2o; 6-31G H2O Test FCI Energy Point. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. cepa1; cc-pvdz H2O Test CEPA(1) Energy. ao-casscf-sp; CASSCF/6-31G** energy point. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. tdscf-6; td-camb3lyp with DiskDF and method/basis specification. cubeprop; RHF orbitals and density for water. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-level-shift-uhf; SCF level",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:13430,test,test,13430,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:39745,test,test,39745,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"eneric; database function options cp, rlxd, benchmark, and the string; options for subset. The full reagent member list, which can also be used; in conjunction with subset, is not included here for consideration of space; and may be found in the database file. The database Python files are very; readable and should be consulted for more particular questions. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. BAKERJCC96¶. Geometries from Baker and Chan J. Comput. Chem. 17 888 (1996),. as reported in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002). No reference energies defined. cp 'off'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. HTR40¶. Database of Hydrogen transfer reactions.; Geometries from Bozkaya and Sherrill.; Reference energies from Bozkaya and Sherrill. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <memb",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/db.html:12476,test,testing,12476,psi4manual/1.7.x/db.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/db.html,1,['test'],['testing']
Testability,"ensity fitting with ROHF. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. omp2-3; OMP2 cc-pVDZ energy for the NO radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf-response2; Compute the dipole polarizability for water with custom basis set. scf-guess-read3; Test if the the guess read in the same basis converges. scf-level-shift-uhf; SCF level shift on a UHF computation. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. freq-masses; check nonphysical masses possible. scf-level-shift-cuhf; SCF level shift on a CUHF computation. dft-freq-analytic1; Analytic SVWN frequencies, compared to finite difference values. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. mbis-2; MBIS calculation on OH- (Expanded Arrays). sapt-sf1; Tests the Psi4 SF-SAPT code. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. cc13d; Tests analytic CC2 gradients. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:14204,test,tests,14204,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"ensity matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:3629,test,test,3629,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"ent of 1-2B2 state of H2O+ with EOM-CCSD. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. sapt-compare; SAPT0 aug-cc-pVDZ computation of the water-water interaction energy, using the three SAPT codes. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. omp2-3; OMP2 cc-pVDZ energy for the NO radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf-response2; Compute the dipole polarizability for water with custom basis set. scf-guess-read3; Test if the the guess read in the same basis converges. scf-level-shift-uhf; SCF level shift on a UHF computation. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:13260,test,test,13260,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ent=None):; # name, e.g., '2' or 'BzMe-8.0'; self.name = name; # database reaction name, e.g., 'S22-2' or 'NBC1-BzMe-8.0'; self.dbrxn = dbse + '-' + str(name); # numerical index of reaction; self.indx = indx; # description line; self.tagl = tagl; # latex description; self.latex = latex; # addl comments; self.comment = comment; # reaction matrices, specifying reagent contributions per reaction; self.rxnm = {}; # qcdb.ReactionDatum objects of quantum chemical data pertaining to reaction; self.data = {}; # benchmark qcdb.ReactionDatum; self.benchmark = None; # color for plotting; self.color = color. def __str__(self):; text = ''; text += """""" ==> %s Reaction <==\n\n"""""" % (self.name); text += """""" Database reaction: %s\n"""""" % (self.dbrxn); text += """""" Index: %s\n"""""" % (self.indx); text += """""" LaTeX representation: %s\n"""""" % (self.latex); text += """""" Tagline: %s\n"""""" % (self.tagl); text += """""" Comment: %s\n"""""" % (self.comment); if self.benchmark is None:; text += """""" Benchmark: %s\n"""""" % ('UNDEFINED'); else:; text += """""" Benchmark: %f\n"""""" % (self.data[self.benchmark].value); text += """""" Color: %s\n"""""" % (str(self.color)); text += """""" Reaction matrix:\n""""""; for mode, rxnm in self.rxnm.iteritems():; text += """""" %s\n"""""" % (mode); for rgt, coeff in rxnm.iteritems():; text += """""" %3d %s\n"""""" % (coeff, rgt.name); text += """""" Data:\n""""""; for label, datum in sorted(self.data.iteritems()):; text += """""" %8.2f %s\n"""""" % (datum.value, label); text += """"""\n""""""; return text. [docs] def compute_errors(self, benchmark='default', mcset='default', failoninc=True, verbose=False):; """"""For all data or modelchem subset *mcset*, computes raw reaction; errors between *modelchem* and *benchmark* model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless *failoninc* set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. """"""; if mcset == 'default':; lsslist = self.data.keys(); elif callable(mcset):; # mcset is func",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:15139,benchmark,benchmark,15139,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"ent_separators""] = [(s if s is None else int(s)) for s in dicary[""fragment_separators""]]; # forgive generator version changes; if ""provenance"" in dicary:; dicary[""provenance""].pop(""version""); # regularize connectivity ordering; if ""connectivity"" in dicary:; conn = [(min(at1, at2), max(at1, at2), bo) for (at1, at2, bo) in dicary[""connectivity""]]; conn.sort(key=lambda tup: tup[0]); dicary[""connectivity""] = conn. return dicary. xptd = massage_dicts(xptd); cptd = massage_dicts(cptd). if relative_geoms == ""exact"":; pass; elif relative_geoms == ""align"":; # can't just expect geometries to match, so we'll align them, check that; # they overlap and that the translation/rotation arrays jibe with; # fix_com/orientation, then attach the oriented geom to computed before the; # recursive dict comparison.; from .molutil.align import B787. cgeom = np.array(cptd[""geom""]).reshape((-1, 3)); rgeom = np.array(xptd[""geom""]).reshape((-1, 3)); rmsd, mill = B787(; rgeom=rgeom,; cgeom=cgeom,; runiq=None,; cuniq=None,; atoms_map=True,; mols_align=True,; run_mirror=False,; verbose=0,; ); if cptd[""fix_com""]:; return compare(; True,; np.allclose(np.zeros((3)), mill.shift, atol=atol),; ""null shift"",; quiet=(verbose == 0),; return_message=return_message,; return_handler=return_handler,; ); if cptd[""fix_orientation""]:; return compare(; True,; np.allclose(np.identity(3), mill.rotation, atol=atol),; ""null rotation"",; quiet=(verbose == 0),; return_message=return_message,; return_handler=return_handler,; ); ageom = mill.align_coordinates(cgeom); cptd[""geom""] = ageom.reshape((-1)). return compare_recursive(; xptd,; cptd,; atol=atol,; rtol=rtol,; label=label,; forgive=forgive,; quiet=(verbose == 0),; return_message=return_message,; return_handler=return_handler,; ). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.6;  · . PSI4. Module code; qcelemental.testing. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html:17257,test,testing,17257,psi4manual/1.6.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html,2,['test'],['testing']
Testability,"ents in J.F. Stanton’s “biorthogonal” JCP paper. pubchem2; Superficial test of PubChem interface. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. ddd-function-kwargs; check distributed driver is correctly passing function kwargs. sapt-compare; SAPT0 aug-cc-pVDZ computation of the water-water interaction energy, using the three SAPT codes. mints3; Test individual integral objects for correctness. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:35254,test,test,35254,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ents""]) + 1; info = f"""""" {ndisp} displacements needed ...\n""""""; core.print_out(info); logger.debug(info). # var_dict = core.variables(); packet = {; ""molecule"": self.molecule,; ""driver"": self.metameta['proxy_driver'],; ""method"": self.method,; ""basis"": data[""basis""],; ""keywords"": data[""keywords""] or {},; }; if 'cbs_metadata' in data:; packet['cbs_metadata'] = data['cbs_metadata']; passalong = {k: v for k, v in data.items() if k not in packet}; passalong.pop('ptype', None). self.task_list[""reference""] = self.computer(**packet, **passalong). parent_group = self.molecule.point_group(); for label, displacement in self.findifrec[""displacements""].items():; clone = self.molecule.clone(); clone.reinterpret_coordentry(False); #clone.fix_orientation(True). # Load in displacement into the active molecule; clone.set_geometry(core.Matrix.from_array(displacement[""geometry""])). # If the user insists on symmetry, weaken it if some is lost when displacing.; # or 'fix_symmetry' in self.findifrec.molecule; logger.debug(f'SYMM {clone.schoenflies_symbol()}'); if self.molecule.symmetry_from_input():; disp_group = clone.find_highest_point_group(); new_bits = parent_group.bits() & disp_group.bits(); new_symm_string = qcdb.PointGroup.bits_to_full_name(new_bits); clone.reset_point_group(new_symm_string). packet = {; ""molecule"": clone,; ""driver"": self.metameta['proxy_driver'],; ""method"": self.method,; ""basis"": data[""basis""],; ""keywords"": data[""keywords""] or {},; }; # Displacements can run in lower symmetry. Don't overwrite orbitals from reference geom; packet['keywords']['function_kwargs'].update({""write_orbitals"": False}); if 'cbs_metadata' in data:; packet['cbs_metadata'] = data['cbs_metadata']. self.task_list[label] = self.computer(**packet, **passalong). # for n, displacement in enumerate(findif_meta_dict[""displacements""].values(), start=2):; # _process_displacement(energy, lowername, molecule, displacement, n, ndisp, write_orbitals=False, **kwargs). [docs]; def build_tasks(self, obj, **kwa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_findif.html:45179,log,logger,45179,psi4manual/1.8.x/_modules/psi4/driver/driver_findif.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_findif.html,6,['log'],['logger']
Testability,"ents""]) + 1; info = f"""""" {ndisp} displacements needed ...\n""""""; core.print_out(info); logger.debug(info). # var_dict = core.variables(); packet = {; ""molecule"": self.molecule,; ""driver"": self.metameta['proxy_driver'],; ""method"": self.method,; ""basis"": data[""basis""],; ""keywords"": data[""keywords""] or {},; }; if 'cbs_metadata' in data:; packet['cbs_metadata'] = data['cbs_metadata']; passalong = {k: v for k, v in data.items() if k not in packet}; passalong.pop('ptype', None). self.task_list[""reference""] = self.computer(**packet, **passalong). parent_group = self.molecule.point_group(); for label, displacement in self.findifrec[""displacements""].items():; clone = self.molecule.clone(); clone.reinterpret_coordentry(False); #clone.fix_orientation(True). # Load in displacement into the active molecule; clone.set_geometry(core.Matrix.from_array(displacement[""geometry""])). # If the user insists on symmetry, weaken it if some is lost when displacing.; # or 'fix_symmetry' in self.findifrec.molecule; logger.debug(f'SYMM {clone.schoenflies_symbol()}'); if self.molecule.symmetry_from_input():; disp_group = clone.find_highest_point_group(); new_bits = parent_group.bits() & disp_group.bits(); new_symm_string = qcdb.PointGroup.bits_to_full_name(new_bits); clone.reset_point_group(new_symm_string). packet = {; ""molecule"": clone,; ""driver"": self.metameta['proxy_driver'],; ""method"": self.method,; ""basis"": data[""basis""],; ""keywords"": data[""keywords""] or {},; }; if 'cbs_metadata' in data:; packet['cbs_metadata'] = data['cbs_metadata']. self.task_list[label] = self.computer(**packet, **passalong). # for n, displacement in enumerate(findif_meta_dict[""displacements""].values(), start=2):; # _process_displacement(energy, lowername, molecule, displacement, n, ndisp, write_orbitals=False, **kwargs). [docs] def build_tasks(self, obj, **kwargs):; # permanently a dummy function; pass. [docs] def plan(self):; # uncalled function; return [t.plan() for t in self.task_list.values()]. [docs] def compute(se",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html:45104,log,logger,45104,psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,2,['log'],['logger']
Testability,"eometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:19749,test,test,19749,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"ep = driver_util.parse_cotton_irreps(irrep, molecule.schoenflies_symbol()); irrep -= 1 # A1 irrep is externally 1, internally 0; kwargs['findif_irrep'] = irrep. ## Pre-planning interventions. # * Trip on function or alias as name; lowername = driver_util.upgrade_interventions(name); _filter_renamed_methods(""hessian"", lowername). # * Allow specification of methods to arbitrary order; lowername, level = driver_util.parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # * Prevent methods that do not have associated derivatives; if lowername in energy_only_methods:; raise ValidationError(f""`hessian('{name}')` does not have an associated Hessian.""). # * Avert pydantic anger at incomplete modelchem spec; userbas = core.get_global_option('BASIS') or kwargs.get('basis'); if lowername in integrated_basis_methods and userbas is None:; kwargs['basis'] = '(auto)'. # Are we planning?; plan = task_planner.task_planner(""hessian"", lowername, molecule, **kwargs); logger.debug('HESSIAN PLAN'); logger.debug(pp.pformat(plan.dict())). if kwargs.get(""return_plan"", False):; # Plan-only requested; return plan. elif not isinstance(plan, AtomicComputer):; # Advanced ""Computer"" active; plan.compute(); return plan.get_psi_results(return_wfn=return_wfn). else:; # We have unpacked to an AtomicInput; lowername = plan.method; basis = plan.basis; core.set_global_option(""BASIS"", basis). ## Second half of this fn -- entry means program running exactly analytic 2nd derivative. _filter_renamed_methods(""frequency"", lowername); core.clean_variables(). optstash = p4util.OptionsState(; ['FINDIF', 'HESSIAN_WRITE'],; ['FINDIF', 'FD_PROJECT'],; ). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash_conv = driver_util.negotiate_convergence_criterion((2, 2), lowername, return_optstash=True). # At stationary point?; if 'ref_gradient' in kwargs:; core.print_out(""""""hessian() using ref_gradient to assess stationary point.\n""""""); G0 = kwar",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html:72041,log,logger,72041,psi4manual/1.6.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html,2,['log'],['logger']
Testability,"ep); cols = expected.cols(irrep ^ symmetry); failed = 0; for row in range(rows):; for col in range(cols):; if(abs(expected.get(irrep, row, col) - computed.get(irrep, row, col)) > 10 ** (-digits)):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, expected.get(irrep, row, col), computed.get(irrep, row, col))); failed = 1; break. if(failed):; print(""Check your output file for reporting of the matrices.""); psi4.print_out(""The Failed Test Matrices\n""); psi4.print_out(""Computed Matrix (2nd matrix passed in)\n""); computed.print_out(); psi4.print_out(""Expected Matrix (1st matrix passed in)\n""); expected.print_out(); sys.exit(1); success(label). [docs]def compare_vectors(expected, computed, digits, label):; """"""Function to compare two vectors. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; print(""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); sys.exit(1); nirreps = expected.nirrep(); for irrep in range(nirreps):; if(expected.dim(irrep) != computed.dim(irrep)):; print(""\tThe reference has %d entries in irrep %d, but the computed vector has %d\n."" % (expected.dim(irrep), irrep, computed.dim(irrep))); sys.exit(1); dim = expected.dim(irrep); failed = 0; for entry in range(dim):; if(abs(expected.get(irrep, entry) - computed.get(irrep, entry)) > 10 ** (-digits)):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, computed.get(irrep, entry), expected.get(irrep, entry))); failed = 1; break. if(failed):; psi4.print_out(""The computed vector\n""); computed.print_out(); psi4.print_out(""The reference vector\n""); expected.print_out(); sys.exit(1); success(label). [docs]def copy_file_to_scratch(filename, prefix, namespace, unit, move =",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/p4util/util.html:5813,test,test,5813,psi4manual/4.0b5/_modules/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/p4util/util.html,2,['test'],['test']
Testability,"epo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files and Elementary Restart) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; Get bzip2. You’ll need this slightly exotic command so run which to test for availability, and install from yum, source, etc. if unavailable. You’ll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh into the computer to an account with write permissions and can connect to the internet from the computer, all is well. # check; >>> which bzip2; /usr/bin/bzip2; >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; >>> ls -1; introduction.html. Get Minicon",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/conda-1.html:6105,log,log,6105,psi4manual/1.0.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/conda-1.html,4,['log'],['log']
Testability,"eq1, options, max_distance)[source]¶; Function to compute approximate string matches from a list of options. levenshtein(seq1, seq2)[source]¶; Function to compute the Levenshtein distance between two strings. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with non-generic exceptions classes. exception CSXError(msg)[source]¶; Error called when CSX generation fails. exception Dftd3Error(msg)[source]¶. exception ManagedMethodError(circs)[source]¶. exception ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file. exception PsiException[source]¶; Error class for Psi. exception PsiImportError(msg)[source]¶; Error called for problems import python dependencies. Prints error message; msg to standard output stream and output file. exception TestComparisonError(msg)[source]¶; Error called when a test case fails due to a failed; compare_values() call. Prints error message msg to standard; output stream and output file. exception ValidationError(msg)[source]¶; Error called for problems with the input file. Prints; error message msg to standard output stream and output file. Module to provide mechanism to store and restore option states in driver. class OptionState(option, module=None)[source]¶; Class to store the state of a single option. If module given, the option; value and has_changed value is stored for global, local to module, and used by; module scopes; otherwise (used for BASIS keywords), only global scope is stored.; Class can store, print, and restore option values.; >>> OptionState('SCF_TYPE', 'SCF'). >>> print(OptionState('DF_BASIS_MP2')). restore()[source]¶. class OptionsState(*largs)[source]¶; Class to contain multiple OptionsState() objects.; Used in python driver functions to collect several options before altering; them, then restoring before function retur",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:126823,test,test,126823,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['test'],['test']
Testability,"equencies are sufficient to obtain vibrational contributions to; enthalpy (H), entropy (S), and Gibbs free energy (G). Similarly, the; molecular geometry is used to obtain rotational constants, which are; then used to obtain rotational contributions to H, S, and G. Analysis of Intermolecular Interactions¶; Now let’s consider something a little more interesting. PSI4; contains code to analyze the nature of intermolecular interactions; between two molecules, via symmetry-adapted perturbation theory; (SAPT) [Jeziorski:1994:1887]. This kind of analysis gives a lot; of insight into the nature of intermolecular interactions, and PSI4; makes these computations easier than ever.; For a SAPT computation, the input needs to provide information on two; distinct molecules. This is very easy, we just give a Z-matrix or set of; Cartesian coordinates for each molecule, and separate the two with two; dashes, like this:; # Example SAPT computation for ethene*ethine (*i.e.*, ethylene*acetylene),; # test case 16 from the S22 database. molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom. }. Here’s the second half of the input, where we specify the computation; options:; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'). Before, we have been setting keywords individually with commands like; set basis cc-pVDZ. Because we have a few more options now, it’s; convenient to place them together into the set; block, bounded by {...}. This; will set all of these options as “global” options (meaning that they are; visible to all parts of the program). Most common PSI4 options can be; set in a globals section like this. If an option needs to be visible; only to one part o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/tutorial-1.html:10799,test,test,10799,psi4manual/1.4.0/tutorial-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/tutorial-1.html,9,['test'],['test']
Testability,"equirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++14 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.6+) https://www.python.org/; CMake (",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:3479,test,tests,3479,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,16,['test'],"['test', 'testing', 'tests']"
Testability,"equirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++17 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:3480,test,tests,3480,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,8,['test'],"['test', 'testing', 'tests']"
Testability,"er - mcGreater) / abs(mcGreater), # FAKE; (mcLesser - mcGreater) / abs(mcGreater), # FKAE; 1.0 # FAKE; ]; # (mcLesser - mcGreater) / abs(cure_denom),; # (mcLesser - mcGreater) * balanced_mask / abs(mcGreaterCrvmin),; # balwt]; if verbose:; print(""""""p = %8.4f, pe = %8.3f%%, pbe = %8.3f%% pce = %8.3f%% reaction %s."""""" %; (err[rxn][0], 100 * err[rxn][1], 100 * err[rxn][3], 100 * err[rxn][2], str(rxn))); return err. [docs] def compute_statistics(self, modelchem, benchmark='default', sset='default',; failoninc=True, verbose=False, returnindiv=False):; """"""For full database or subset *sset*, computes many error; statistics between single *modelchem* and *benchmark* model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless *failoninc* set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. """"""; err = self.compute_errors(modelchem, benchmark=benchmark, sset=sset, failoninc=failoninc, verbose=verbose); if len(err) == 0:; error = initialize_errors(); if verbose:; print(""""""Warning: nothing to compute.""""""); else:; Nrxn = float(len(err)); error = OrderedDict(); # linear (absolute) error; linear = [val[0] for val in err.values()]; error['pexe'] = max(linear); error['nexe'] = min(linear); error['maxe'] = max(linear, key=lambda x: abs(x)); error['mine'] = min(linear, key=lambda x: abs(x)); error['me'] = sum(linear) / Nrxn; error['mae'] = sum(map(abs, linear)) / Nrxn; error['rmse'] = math.sqrt(sum(map(lambda x: x ** 2, linear)) / Nrxn); error['stde'] = math.sqrt((sum(map(lambda x: x ** 2, linear)) - (sum(linear) ** 2) / Nrxn) / Nrxn); # fractional (relative) error; relative = [val[1] for val in err.values()]; error['pexpe'] = max(relative); error['nexpe'] = min(relative); error['maxpe'] = max(relative, key=lambda x: abs(x)); error['minpe'] = min(relative, key=lambda x: abs(x)); error['mpe'] = sum(relative) / Nrxn; error['mape'] = sum(map(abs, relative)) / Nrxn; error['rmspe'] = math.sqrt(sum(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:34812,benchmark,benchmark,34812,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,2,['benchmark'],['benchmark']
Testability,"er need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fci-dipole; 6-31G H2O Test FCI Energy Point. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. dft-grac; Gradient regularized asymptotic correction (GRAC) test. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. scf7; Tests SCF gradient in the presence of a dipole field. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fnocc2; Test G2 method for H2O. mints2-bse; Similar to mints2, but using the BSE to specify the basis sets. isapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:17832,test,test,17832,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"er of digits for compare_values() and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, etc.).; Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in psi4/tests/CMakeLists.txt or, for an addon, tests/<addon>/CMakeLists.txt.; The test directory will need at least two files, CMakeLists.txt and input.dat. CMakeLists.txt¶; This file adds the test case to the suite. It should have at least the following two uncommented lines:; include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ctest -L label purposes. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; If a test needs extra input files like grid.dat or extra reference files for checking against, like fchk, specify these in the CMakeLists.txt as shown abo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:5402,test,test-labels,5402,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['test'],['test-labels']
Testability,"er of points. set_name(self: psi4.core.SuperFunctional, arg0: str) → None¶; Sets the SuperFunctional name. set_vv10_b(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the VV10 b parameter. set_vv10_c(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the VV10 c parameter. set_x_alpha(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the amount of exact global HF exchange. set_x_beta(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets how much more long-range exchange than short-range exchange. set_x_omega(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the range-seperation exchange parameter. set_xclib_description(self: psi4.core.SuperFunctional, arg0: str) → None¶; Sets the LibXC version and citation string. test_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Vector, arg1: psi4.core.Vector, arg2: psi4.core.Vector, arg3: psi4.core.Vector, arg4: psi4.core.Vector, arg5: psi4.core.Vector, arg6: psi4.core.Vector) → None¶; Quick testing capabilities. value(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Vector¶; Returns a given internal value. values(self: psi4.core.SuperFunctional) → Dict[str, psi4.core.Vector]¶; Return all internal values. vv10_b(self: psi4.core.SuperFunctional) → float¶; The VV10 b parameter. vv10_c(self: psi4.core.SuperFunctional) → float¶; The VV10 c parameter. x_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of exact HF exchange. x_beta(self: psi4.core.SuperFunctional) → float¶; Amount of exact HF exchange. x_functional(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Functional¶; Returns the desired X Functional. x_functionals(self: psi4.core.SuperFunctional) → List[psi4.core.Functional]¶; Returns all X Functionals. x_omega(self: psi4.core.SuperFunctional) → float¶; Range-seperated exchange parameter. xclib_description(self: psi4.core.SuperFunctional) → str¶; LibXC version and citation string. table of contents. SuperFunctional; SuperFunctional; SuperFunctional.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SuperFunctional.html:9845,test,testing,9845,psi4manual/1.8.x/api/psi4.core.SuperFunctional.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/api/psi4.core.SuperFunctional.html,4,['test'],['testing']
Testability,"er of points. set_name(self: psi4.core.SuperFunctional, arg0: str) → None¶; Sets the SuperFunctional name. set_vv10_b(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the VV10 b parameter. set_vv10_c(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the VV10 c parameter. set_x_alpha(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the amount of exact global HF exchange. set_x_beta(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets how much more long-range exchange than short-range exchange. set_x_omega(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the range-seperation exchange parameter. set_xclib_description(self: psi4.core.SuperFunctional, arg0: str) → None¶; Sets the LibXC version and citation string. test_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Vector, arg1: psi4.core.Vector, arg2: psi4.core.Vector, arg3: psi4.core.Vector, arg4: psi4.core.Vector, arg5: psi4.core.Vector, arg6: psi4.core.Vector) → None¶; Quick testing capabilities. value(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Vector¶; Returns a given internal value. values(self: psi4.core.SuperFunctional) → dict[str, psi4.core.Vector]¶; Return all internal values. vv10_b(self: psi4.core.SuperFunctional) → float¶; The VV10 b parameter. vv10_c(self: psi4.core.SuperFunctional) → float¶; The VV10 c parameter. x_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of exact HF exchange. x_beta(self: psi4.core.SuperFunctional) → float¶; Amount of exact HF exchange. x_functional(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Functional¶; Returns the desired X Functional. x_functionals(self: psi4.core.SuperFunctional) → list[psi4.core.Functional]¶; Returns all X Functionals. x_omega(self: psi4.core.SuperFunctional) → float¶; Range-seperated exchange parameter. xclib_description(self: psi4.core.SuperFunctional) → str¶; LibXC version and citation string. table of contents. SuperFunctional; SuperFunctional; SuperFunctional.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/api/psi4.core.SuperFunctional.html:9912,test,testing,9912,psi4manual/master/api/psi4.core.SuperFunctional.html,https://psicode.org,https://psicode.org/psi4manual/master/api/psi4.core.SuperFunctional.html,2,['test'],['testing']
Testability,"er rotation axis.; @param coord Matrix : points to rotate - column dim is 3; @param axis Vector3 : axis around which to rotate, does not need to be normalized; @param bool reflect : if true, really look for Sn not Cn; @returns n. Stuff stolen from psi. Should import or not as necessary; or some better way. Apologies to the coders. all_casings(input_string)[source]¶; Function to return a generator of all lettercase permutations; of input_string. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label, exitonfail=True)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits; (or to digits itself when digits > 1 e.g. digits=0.04). Performs; a system exit on failure unless exitonfail False, in which case; returns error message. Used in input files in the test suite. drop_duplicates(seq)[source]¶; Function that given an array seq, returns an array without any duplicate; entries. There is no guarantee of which duplicate entry is dropped. findfile_ignorecase(fil, pre='', post='')[source]¶; Function to locate a file pre + fil + post in any possible ; lettercase permutation of fil. Returns pre + fil + post if ; availa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:96311,test,test,96311,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['test'],['test']
Testability,"er when wrappers are layered.; mc_level_idx; Position in field self.nbodies_per_mc_level used to obtain ``nbodies``, the list of n-body; levels (e.g., `[1]` or `[1, 2]` or `[""supersystem""]`) to which the modelchem specified in **kwargs** applies.; That is, `nbodies = self.nbodies_per_mc_level[mc_level_idx]`.; Note the natural 1-indexing of ``nbodies`` _contents_, so `[1]` covers one-body contributions.; The corresponding user label is the 1-indexed counterpart, `mc_level_lbl = mc_level_idx + 1`; Formerly nlevel as in `nbody = self.nbody_list[nbody_level=nlevel]`.; kwargs; Other arguments for initializing **mb_computer**. In particular, specifies model chemistry. Returns; -------; count; Number of new tasks planned by this call.; Formerly, didn't include supersystem in count. """"""; # Get the n-body orders for this level; nbodies = self.nbodies_per_mc_level[mc_level_idx]. info = ""\n"" + p4util.banner(f"" ManyBody Setup: N-Body Levels {nbodies}"", strNotOutfile=True) + ""\n""; core.print_out(info); logger.info(info). count = 0; template = copy.deepcopy(kwargs). # Get compute list; if nbodies == [""supersystem""]:; # Add supersystem computation if requested -- always nocp; data = template; data[""molecule""] = self.molecule; key = f""supersystem_{self.nfragments}""; self.task_list[key] = mb_computer(**data); count += 1. compute_dict = build_nbody_compute_list(; [""nocp""], list(range(1, self.max_nbody + 1)), self.nfragments, self.return_total_data; ); else:; compute_dict = build_nbody_compute_list(self.bsse_type, nbodies, self.nfragments, self.return_total_data). def labeler(item) -> str:; mc_level_lbl = mc_level_idx + 1; return str(mc_level_lbl) + ""_"" + str(item). # Add current compute list to the master task list; # * `pair` looks like `((1,), (1, 3))` where first is real (not ghost) fragment indices; # and second is basis set fragment indices, all 1-indexed; for nb in compute_dict[""all""]:; for pair in compute_dict[""all""][nb]:; lbl = labeler(pair); if lbl in self.task_list:; contin",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_nbody.html:37187,log,logger,37187,psi4manual/1.6.x/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_nbody.html,2,['log'],['logger']
Testability,"er"": self.driver,; ""model"": {; ""method"": self.method,; ""basis"": self.basis; },; ""keywords"": self.keywords,; ""protocols"": {; ""stdout"": True,; },; ""extras"": {; ""psiapi"": True,; ""wfn_qcvars_only"": True,; },; }). return atomic_model. [docs] def compute(self, client: Optional[""FractalClient""] = None):; """"""Run quantum chemistry.""""""; from psi4.driver import pp. if self.computed:; return. if client:; self.computed = True; from qcportal.models import KeywordSet, Molecule. # Build the keywords; keyword_id = client.add_keywords([KeywordSet(values=self.keywords)])[0]. # Build the molecule; mol = Molecule(**self.molecule.to_schema(dtype=2)). r = client.add_compute(; ""psi4"", self.method, self.basis, self.driver, keyword_id, [mol]; ); self.result_id = r.ids[0]; # NOTE: The following will re-run errored jobs by default; if self.result_id in r.existing:; ret = client.query_tasks(base_result=self.result_id); if ret:; if ret[0].status == ""ERROR"":; client.modify_tasks(""restart"", base_result=self.result_id); logger.info(""Resubmitting Errored Job {}"".format(self.result_id)); elif ret[0].status == ""COMPLETE"":; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Submitting AtomicResult {}"".format(self.result_id)). return. logger.info(f'<<< JSON launch ... {self.molecule.schoenflies_symbol()} {self.molecule.nuclear_repulsion_energy()}'); gof = core.get_output_file(). # EITHER ...; # from psi4.driver import schema_wrapper; # self.result = schema_wrapper.run_qcschema(self.plan()); # ... OR ...; self.result = qcng.compute(; self.plan(),; ""psi4"",; raise_error=True,; # local_options below suitable for serial mode where each job takes all the resources of the parent Psi4 job.; # distributed runs through QCFractal will likely need a different setup.; local_options={; # B -> GiB; ""memory"": core.get_memory() / (2 ** 30),; ""ncores"": core.get_num_threads(),; },; ); # ... END. #pp.pprint(self.result",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/task_base.html:4415,log,logger,4415,psi4manual/1.6.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/task_base.html,2,['log'],['logger']
Testability,"er. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. fnocc2; Test G2 method for H2O. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. scf-cholesky-basis; incremental Cholesky filtered SCF. matrix2; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). ddd-deriv; Sample HF/cc-pVDZ H2O computation all derivatives. cc51; EOM-CC3/cc-pVTZ on H2O. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. opt11; Transition-state optimizations of HOOH to both torsional transition states. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. scf-occ; force occupations in scf. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfccsdt2; DF-CCSD(T) cc-pVDZ energy for the NH molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. scf6; Tests RHF/ROHF/UHF SCF gradients. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrost",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:38369,test,test,38369,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"er.com/r/psi4/psi4/tags . Edit specification https://github.com/psi4/psi4meta/blob/master/docker/environment.yaml. Edit the packages and channels info if necessary. Probably long-term stable.; Don’t edit the Python version, as that’s controlled by the GHA. Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Docker.yml; matrix.cfg list for changed Python version and to label the tags with current Psi4 from c-f.; Commit environment.yaml or Docker.yml to trigger GHA Docker builds.; Check at DockerHub for new images. Generate download page for psicode.org¶. Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; Copy and edit a new file akin to content/installs/v182.md. Add it to the git index. Note the edition string v182 in frontmatter for this and future filenames.; Don’t postdate the date string in frontmatter or it won’t render.; Ultimately, make sure the aliases:\n  - /installs/latest/ lines are added to this new file; and removed from the previous latest file, but this can wait until the installer page has been tested. Copy and edit a new file akin to data/installs/v182.yaml. Add it to the git index. Glance through the menu and notes content to make sure they’re up-to-date. This file determines; the structure of the install page.; Add or remove python versions and architectures if necessary.; Every couple years, update the default python version in datakey: python/selected and; in optsHandler at the end.; Always adjust the datakey: branch/stable block.; For releases, adjust the datakey: branch/previous and nightly blocks. Enter the scripts/ directory. If the previous release hasn’t had a snapshot saved, copy; install-generator.py into a version-labeled file, and add it to the git index.; Edit scripts/install-generator.py. Primarily, edit edition at the top.; Also, edit other arrays (stuff above ## Outputs) or messages (logic below ## Outputs); that should change. Run the install-generator.py in place. I",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:17342,test,tested,17342,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['test'],['tested']
Testability,"er.debug(pp.pformat(plan.dict())). if kwargs.get(""return_plan"", False):; # Plan-only requested; return plan. elif not isinstance(plan, AtomicComputer):; # Advanced ""Computer"" active; plan.compute(); return plan.get_psi_results(return_wfn=return_wfn). else:; # We have unpacked to an AtomicInput; lowername = plan.method; basis = plan.basis; core.set_global_option(""BASIS"", basis). ## Second half of this fn -- entry means program running exactly analytic 1st derivative. # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util.negotiate_convergence_criterion((1, 1), lowername, return_optstash=True). # Commit to procedures[] call hereafter; core.clean_variables(). # no analytic derivatives for scf_type cd; if core.get_global_option('SCF_TYPE') == 'CD':; raise ValidationError(""""""No analytic derivatives for SCF_TYPE CD.""""""). core.print_out(""""""gradient() will perform analytic gradient computation.\n""""""). # Perform the gradient calculation; logger.info(f""Compute gradient(): method={lowername}, basis={core.get_global_option('BASIS').lower()}, molecule={molecule.name()}, nre={'w/EFP' if hasattr(molecule, 'EFP') else molecule.nuclear_repulsion_energy()}""); logger.debug(""w/EFP"" if hasattr(molecule, ""EFP"") else pp.pformat(molecule.to_dict())); wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); logger.info(f""Return gradient(): {core.variable('CURRENT ENERGY')}""); logger.info(nppp(wfn.gradient().np)). basisstash.restore(); optstash.restore(). driver_findif.gradient_write(wfn). if return_wfn:; return (wfn.gradient(), wfn); else:; return wfn.gradient(). [docs]; def properties(*args, **kwargs):; r""""""Function to compute various properties. :aliases: prop(). :returns: none. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - This function at present has a limited functionality.; Consult the keywords sections of other modules for further property capabilities. +-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver.html:44816,log,logger,44816,psi4manual/1.8.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver.html,6,['log'],['logger']
Testability,"er.debug(pp.pformat(plan.dict())). if kwargs.get(""return_plan"", False):; # Plan-only requested; return plan. elif not isinstance(plan, AtomicComputer):; # Advanced ""Computer"" active; plan.compute(); return plan.get_psi_results(return_wfn=return_wfn). else:; # We have unpacked to an AtomicInput; lowername = plan.method; basis = plan.basis; core.set_global_option(""BASIS"", basis). ## Second half of this fn -- entry means program running exactly analytic 1st derivative. # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util.negotiate_convergence_criterion((1, 1), lowername, return_optstash=True). # Commit to procedures[] call hereafter; core.clean_variables(). # no analytic derivatives for scf_type cd; if core.get_global_option('SCF_TYPE') == 'CD':; raise ValidationError(""""""No analytic derivatives for SCF_TYPE CD.""""""). core.print_out(""""""gradient() will perform analytic gradient computation.\n""""""). # Perform the gradient calculation; logger.info(f""Compute gradient(): method={lowername}, basis={core.get_global_option('BASIS').lower()}, molecule={molecule.name()}, nre={'w/EFP' if hasattr(molecule, 'EFP') else molecule.nuclear_repulsion_energy()}""); logger.debug(""w/EFP"" if hasattr(molecule, ""EFP"") else pp.pformat(molecule.to_dict())); wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); logger.info(f""Return gradient(): {core.variable('CURRENT ENERGY')}""); logger.info(nppp(wfn.gradient().np)). basisstash.restore(); optstash.restore(). driver_findif.gradient_write(wfn). if return_wfn:; return (wfn.gradient(), wfn); else:; return wfn.gradient(). [docs]def properties(*args, **kwargs):; r""""""Function to compute various properties. :aliases: prop(). :returns: none. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - This function at present has a limited functionality.; Consult the keywords sections of other modules for further property capabilities. +---",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html:38129,log,logger,38129,psi4manual/1.6.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html,4,['log'],['logger']
Testability,"er/content/installs/v13rc2.md. Note the edition string v13rc2 in frontmatter for this and future filenames; Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; Enter scripts/ dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; Run the install-generator.py in place. It will dump new files into data/installs/ _subdirs_. Be sure to git add them.; Installer page is now ready.; Shift “latest” alias in frontmatter from whichever page is currently active to the new page. This makes sure “Downloads” on the navigation bar points to new page.; Conscientiously, one should test. installer downloads in Mac and Linux. And actually installing them and psi4 --test them.; that download button and curl downloading register on the download counters on vergil. Commit the new files, PR, and deploy psicode site; Petition on Slack for testers. Collect documentation snapshot¶. Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to the psi4/psi4docs repository and thence served by netlify to a site independent of psicode.org. The netlify psicode.org site has a redirect so that psicode.org/psi4manual/master presents the psi4docs netlify content.; GHA controller is https://github.com/psi4/psi4/blob/master/.github/workflows/docs.yml; This setup works great for “latest” docs, but it won’t build a nice copy on the tag because the tag commit is pushed before the tag itself, so the version shows up “undefined”.; So, anytime after “Tag (pre)release” is over, navigate on psi4 GH to the tag commit (not the record commit) and retrigger the docs GHA. Download the artifact (zipped docs dir) at the end to a local computer.; In your hugo site clone, create a new directory under static/psi4manual. Copy the zipped docs there, unpack, rearrange so that static/p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/manage_release-1.html:16536,test,testers,16536,psi4manual/1.5.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/manage_release-1.html,2,['test'],['testers']
Testability,"er/content/installs/v13rc2.md. Note the edition string v13rc2 in frontmatter for this and future filenames; Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; Enter scripts/ dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; Run the install-generator.py in place. It will dump new files into data/installs/ _subdirs_. Be sure to git add them.; Installer page is now ready.; Shift “latest” alias in frontmatter from whichever page is currently active to the new page. This makes sure “Downloads” on the navigation bar points to new page.; Conscientiously, one should test. installer downloads in Mac and Linux. And actually installing them and psi4 --test them.; that download button and curl downloading register on the download counters on vergil. Commit the new files, PR, and deploy psicode site; Petition on Slack for testers. Collect documentation snapshot¶. Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to the psi4/psi4docs repository and thence served by netlify to a site independent of psicode.org. The netlify psicode.org site has a redirect so that psicode.org/psi4manual/master presents the psi4docs netlify content.; GHA controller is psi4/.github/workflows/docs.yml; This setup works great for “latest” docs, but it won’t build a nice copy on the tag because the tag commit is pushed before the tag itself, so the version shows up “undefined”.; So, anytime after “Tag (pre)release” is over, navigate on psi4 GH to the tag commit (not the record commit) and retrigger the docs GHA. Download the artifact (zipped docs dir) at the end to a local computer.; In your hugo site clone, create a new directory under static/psi4manual. Copy the zipped docs there, unpack, rearrange so that static/psi4manual/<new-tag>/index.html is pr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/manage_release.html:16611,test,testers,16611,psi4manual/1.6.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/manage_release.html,3,['test'],['testers']
Testability,"er/content/installs/v13rc2.md. Note the edition string v13rc2 in frontmatter for this and future filenames; Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; Enter scripts/ dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; Run the install-generator.py in place. It will dump new files into data/installs/ _subdirs_. Be sure to git add them.; Installer page is now ready.; Shift “latest” alias in frontmatter from whichever page is currently active to the new page. This makes sure “Downloads” on the navigation bar points to new page.; Conscientiously, one should test. installer downloads in Mac and Linux. And actually installing them and psi4 --test them.; that download button and curl downloading register on the download counters on vergil. Commit the new files, PR, and deploy psicode site; Petition on Slack for testers. Publish GitHub release¶. On GitHub site “Draft a New Release” with newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN from hopefully existing RN issue; Fill in RN by going through the top posts from all PRs from this milestone; “publish” release. This establishes release date for GitHub API; Close the RN issue.; Close the milestone (should be 100% complete). Publish GitHub postrelease¶. On GitHub site “Draft a New Release” for anticipated or newly minted tag; Fill in frontmatter style and links from previous GitHub release; Fill in RN as cherry-pick to or edit on branch; “publish” release. This establishes release date for GitHub API. Publish psicode release¶. Copy a recent release page like https://github.com/psi4/psicode-hugo-website/blob/master/content/posts/v1p2.md; Edit its filename, title, date, image, and links; Execute https://api.github.com/repos/psi4/psi4/releases/latest and note the id fiel",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_release-1.html:14604,test,testers,14604,psi4manual/1.4.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_release-1.html,2,['test'],['testers']
Testability,"eraction energies for bimolecular complexes.; Geometries and reference interaction energies from Rezac et al. JCTC 7 2427 (2011).; Note that the S66by8-N-1.0 members are not quite the same geometries as S66-N. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HB' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve hydrogen-bonded systems; 'MX' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve mixed-influence systems; 'DD' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve dispersion-dominated systems. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; \(\Rightarrow\) 'S22B' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22; 'WATER' water dimer. table of contents. JSCH; O24by5; S22by5; HTBH; HBC6; S66; NCB31; ACENES; HTR40; A24; NHTBH; BAKERJCC96; SSI; HSG; A24alt; NBC10; RSE42; BAKERJCC93; BBI; BASIC; RGC10; O24by5mb; BENCH12; S66by8; CORE; S22. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(); JSCH. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_available_databases-1.html:13751,benchmark,benchmark,13751,psi4manual/1.5.0/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_available_databases-1.html,2,['benchmark'],['benchmark']
Testability,"eral fixed values; of the dihedral angle of HOOH.; molecule hooh {; 0 1; H 0.850718 0.772960 0.563468; O 0.120432 0.684669 -0.035503; O -0.120432 -0.684669 -0.035503; H -0.850718 -0.772960 0.563468; }. set {; basis cc-pvdz; intrafrag_step_limit 0.1; }. dihedrals = [100,110,120,130,140,150]; PES = []. for phi in dihedrals:; my_string = ""1 2 3 4 "" + str(phi); set optking fixed_dihedral = $my_string; E = optimize('scf'); PES.append((phi, E)). print ""\n\tcc-pVDZ SCF energy as a function of phi\n""; for point in PES:; print ""\t%5.1f%20.10f"" % (point[0], point[1]). Dealing with problematic optimizations¶; Although optking is continuously improved with robustness in mind, some; attempted optimizations will inevitably fail to converge to the desired minima.; For difficult cases, the following suggestions are made. As for any optimizer, computing the Hessian and limiting the step size will; successfully converge a higher percentage of cases. The default settings have; been chosen because they perform efficiently for common, representative test sets.; More restrictive, cautious steps are sometimes necessary.; DYNAMIC_LEVEL allows optking to change the method of optimization; toward algorithms that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps.; The developers have found the OPT_COORDINATES set to “BOTH” which; includes both the redundant internal coordinate set, as well as cartesian coordinates,; works well for systems with long ‘arms’ or floppy portions of a molecule poorly; described by local internals. Direct manipulation of the optmization coordinates¶. Generate the internal coordinates and then stop:; set intcos_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/optking-1.html:8246,test,test,8246,psi4manual/1.0.0/optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/optking-1.html,2,['test'],['test']
Testability,"erbose >= 1:; print(""Final RMSD = {:8.4f} [A]"".format(final_rmsd)); print(""Mirror match:"", hold_solution.mirror); print(hold_solution). # final presentation & plotting; if verbose >= 2:; print(""<<< Aligned:""); for at, hsh in enumerate(auniq):; print(atomfmt2.format(auniq[at][:6], *ageom[at])); print(""<<< Aligned Diff:""); for at, hsh in enumerate(auniq):; print(atomfmt2.format(auniq[at][:6], *[ageom[at][i] - rgeom[at][i] for i in range(3)])). if do_plot:; # TODO Missing import; plot_coord(ref=rgeom, cand=ageom, orig=cgeom, comment=""Final RMSD = {:8.4f}"".format(final_rmsd)). # sanity checks; assert compare_values(; _pseudo_nre(cuniq, cgeom),; _pseudo_nre(auniq, ageom),; ""D: concern_mol-->returned_mol pNRE uncorrupted"",; atol=1.0e-4,; quiet=(verbose < 2),; ). if mols_align is True:; assert compare_values(; _pseudo_nre(runiq, rgeom),; _pseudo_nre(auniq, ageom),; ""D: concern_mol-->returned_mol pNRE matches ref_mol"",; atol=1.0e-4,; quiet=(verbose < 2),; ); assert compare_values(; rgeom, ageom, ""D: concern_mol-->returned_mol geometry matches ref_mol"", atol=1.0e-4, quiet=(verbose < 2); ); assert compare_values(0.0, final_rmsd, ""D: null RMSD"", atol=1.0e-4, quiet=(verbose < 2)). return final_rmsd, hold_solution. def _plausible_atom_orderings(ref, current, rgeom, cgeom, algorithm=""hungarian_uno"", verbose=1, uno_cutoff=1.0e-3):; r"""""". Parameters; ----------; ref : list; Hashes encoding distinguishable non-coord characteristics of reference; molecule. Namely, atomic symbol, mass, basis sets?.; current : list; Hashes encoding distinguishable non-coord characteristics of trial; molecule. Namely, atomic symbol, mass, basis sets?. Returns; -------; iterator of tuples. """"""; if sorted(ref) != sorted(current):; raise ValidationError(; """"""ref and current can't map to each other.\n"""""" + ""R: "" + str(ref) + ""\nC: "" + str(current); ). where = collections.defaultdict(list); for iuq, uq in enumerate(ref):; where[uq].append(iuq). cwhere = collections.defaultdict(list); for iuq, uq in enumerate(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/qcelemental/molutil/align.html:9400,assert,assert,9400,psi4manual/1.4.0/_modules/qcelemental/molutil/align.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/qcelemental/molutil/align.html,6,['assert'],['assert']
Testability,"erent ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-bs; UHF and broken-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/testsuite-1.html:34555,test,test,34555,psi4manual/1.1.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/testsuite-1.html,4,['test'],['test']
Testability,"erformed by xjoda. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV¶. Convergence threshold for linear equations controlled by LINEQ_TYPE. Equations are iterated until smallest residual falls below , where is the value associated with this keyword. Type: integer; Default: 7. CFOUR_LINEQ_MAXCY¶. The maximum number of iterations in all linear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE¶. Determines the algorithm used to solve linear equations ( and derivative and ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not guaranteed to converge. Moreover, POPLE has not been tested for some time and should definitely be checked! (Default : DIIS). Type: string; Possible Values: POPLE, DIIS; Default: DIIS. CFOUR_LOCK_ORBOCC¶. This keyword is used by the SCF program to determine if the orbital occupancy (by symmetry block) is allowed to change in the course of the calculation. ON (=1) locks the occupation to that set by the keyword CFOUR_OCCUPATION (or the initial guess if omitted); OFF (= 0) permits the occupation to change. (Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP¶. Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEMORY_SIZE¶. Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:35801,test,tested,35801,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,2,['test'],['tested']
Testability,"ergies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:41063,benchmark,benchmark,41063,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"ergies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:8836,test,test,8836,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"ergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory. output.ref¶; When your test case is in final form, run it locally, rename the output to output.ref, and check it into the repository alongside input.dat.; While this isn’t used for any testing machinery (except for the nearly decommissioned psi4/tests/psitest.pl for CC tests; full decommission expected by v1.6), it can be handy for users or developers to consult. test_input.py¶; Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest’s notice, add a file to the directory named test_input.py.; Below is an example for the psi4/tests/ci-property/test_input.py; from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the CMakeLists.txt.; The def test_ci_property contains the name of the test, now with und",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:8319,test,tests,8319,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,1,['test'],['tests']
Testability,"ergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory. output.ref¶; When your test case is in final form, run it locally, rename the output to output.ref, and check it into the repository alongside input.dat.; While this isn’t used for any testing machinery, it can be handy for users or developers to consult. test_input.py¶; Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest’s notice, add a file to the directory named test_input.py.; Below is an example for the psi4/tests/ci-property/test_input.py; from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the CMakeLists.txt.; The def test_ci_property contains the name of the test, now with underscores rather than hyphens.; def test_ identifies it to pytest as a test.; That part of the function name an",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:8319,test,tests,8319,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,4,['test'],['tests']
Testability,"ergy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed wi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:38224,test,test,38224,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"error computation, and handles database subsets. Not to be used; directly– see qcdb.Database for handling single or multiple; qdcb.WrappedDatabase objects and defining nice statistics, plotting, and; table functionalities.; >>> asdf = qcdb.WrappedDatabase('Nbc10'). add_ReactionDatum(dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, comment=None, overwrite=False)[source]¶; Add a new quantum chemical value to rxn by creating a; qcdb.ReactionDatum from same arguments as that class’s; object-less constructor. rxn may be actual Reaction.name; or Reaction.indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:46853,benchmark,benchmark,46853,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,4,['benchmark'],['benchmark']
Testability,"ers are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 1; …; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 22. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. ACENES¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries fro",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_available_databases.html:6067,benchmark,benchmark,6067,psi4manual/1.8.x/autodoc_available_databases.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_available_databases.html,2,['benchmark'],['benchmark']
Testability,"ers.; #; # The copyrights for code used from other parties are included in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #; """"""Module with utility functions for FCHK files."""""". import re; from typing import Union. import numpy as np; from psi4.driver.p4util.testing import compare_strings, compare_arrays, compare_values, compare_integers; from psi4 import core; from .exceptions import ValidationError. __all__ = [; ""compare_fchkfiles"",; ""compare_moldenfiles"",; ]. def _consume_fchk_section(input_list, index):; """"""compare a float or integer matrix section"""""". n = int(input_list[index].split()[-1]); kind = input_list[index].split()[-3]. if ""R"" in kind:; dtype = np.float64; format_counter = 5; elif ""I"" in kind:; dtype = np.float64; format_counter = 6; else:; raise ValidationError('Unknow field type in FCHK reader\n'). extra = 0 if n <= format_counter else n % format_counter; lines = 1 if n <= format_counter else int(n / format_counter); offset = lines + 1 if extra > 0 else lines; string = ''; for j in range(lines):; string += """".join(str(x) for x in input_list[index + 1 + j]); if extra > 0:; string += """".join(str(x) for x in input_list[index + 1 + lines]); field = np.fromiter(string.split(), dtype=dtype); return offset + 1, field. def _fchkfile_to_string(fname: str) -> str:; """""" Load FCHK file into ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/fchk.html:1238,test,testing,1238,psi4manual/1.7.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/fchk.html,4,['test'],['testing']
Testability,"es and one of index lines are returned unless filename is given,; in which case they’re written to file and a filedict returned. write_xyz_files(path=None)[source]¶; Writes xyz files for every reagent in the Database to directory; in path or to directory dbse_xyzfiles that it createsin cwd if; path is None. Additionally, writes a script to that directory; that will generate transparent-background ray-traced png files for; every reagent with PyMol. class Reaction(name, dbse, indx, tagl=None, latex=None, color='black', comment=None)[source]¶. compute_errors(benchmark='default', mcset='default', failoninc=True, verbose=False)[source]¶; For all data or modelchem subset mcset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. plot(benchmark='default', mcset='default', failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors over model chemistries in mcset (which; may be default or an array or a function generating an array) versus; benchmark. Thread color can be ‘rgb’ for old coloring, a color; name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of mousetext, mouselink,; or m",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:43729,benchmark,benchmark,43729,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['benchmark'],['benchmark']
Testability,"es appear in <objdir>/tests/<test-name>/output.dat and stdout results appear in <objdir>/Testing/Temporary/LastTest.log*. Adding PsiAPI Test Cases¶; To create a new test case, either create a new file or add to an existing file under psi4/tests/pytests. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; A test file may contain many tests, each of which is an ordinary Python function with name starting test_. This is how pytest knows to collect it.; No registration required to bring a test to pytest’s attention.; No registration required to bring a test to CMake’s attention. If a test needs additional files, register them in psi4/psi4/CMakeLists.txt. A few notes on test contents:. Import testing functions from utils and use Python assert: assert compare_values(expected, computed, ...).; Don’t worry about cleaning up files or resetting options. A function in psi4/tests/pytests/conftest.py does this automatically between every test.; Especially if using data or functions from outside a test, run a variety of tests at different pytest -n <N> levels to mix up test ordering. If tests fail that pass when run alone, you’ve got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. For every new test file, add pytestmark = [pytest.mark.psi, pytest.mark.api] at the top.; This ensures that every test has the psi mark and every PsiAPI test has the api mark to contrast with PSIthon tests with cli mark.; There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m <mark>; vs. ctest -L <mark>) rather than just by name (pytest -k <name_fragment>; vs. ctest -R <name_fragment>). Far more complicated logic is allowed than for; CTest: pytest -m ""dftd3 and not api and not long"".; The most important marks are “quick” and “long” that opt tests into the quick CI suite or out ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:11760,test,test,11760,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['test'],['test']
Testability,"es for each spin case and excitation level will be printed. Type: integer; Default: 15. CFOUR_OCCUPATION¶. Specifies the orbital occupanc of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. If the reference function is for an open-shell system, two strings of NIRREP occupation numbers separated by a slash are input for the and sets of orbitals. An example of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (whitespace-tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OPEN-SHELL¶. Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyway",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html:41497,log,logical,41497,psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__cfour-1.html,2,['log'],['logical']
Testability,"es in irrep %d, but the computed vector has %d\n."" %; (expected.dim(irrep), irrep, computed.dim(irrep))); raise TestComparisonError(message); dim = expected.dim(irrep); failed = 0; for entry in range(dim):; if (abs(expected.get(irrep, entry) - computed.get(irrep, entry)) > 10**(-digits)):; failed = 1; break. if (failed):; core.print_out(""The computed vector\n""); computed.print_out(); core.print_out(""The reference vector\n""); expected.print_out(); message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed.get(irrep, entry),; expected.get(irrep, entry))); raise TestComparisonError(message); success(label); return True. [docs]def compare_arrays(expected, computed, digits, label, rtol=1.e-16):; """"""Function to compare two numpy arrays. Prints :py:func:`util.success`; when elements of vector *computed* match elements of vector *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. Sets rtol to zero to match expected Psi4 behaviour, otherwise measured as:; absolute(computed - expected) <= (atol + rtol * absolute(expected)); """""". try:; expected = np.asarray(expected); computed = np.asarray(computed); shape1 = expected.shape; shape2 = computed.shape; except:; raise TestComparisonError(""Input objects do not have a shape attribute.""). if shape1 != shape2:; TestComparisonError(""Input shapes do not match.""). tol = 10**(-digits); if not np.allclose(expected, computed, atol=tol, rtol=rtol):; message = ""\tArray difference norm is %12.6e."" % np.linalg.norm(expected - computed); raise TestComparisonError(message); success(label); return True. [docs]def compare_cubes(expected, computed, label):; """"""Function to compare two cube files. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; # Grab grid points. Skip the first nine lines and the last one; e",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html:12171,test,test,12171,psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,1,['test'],['test']
Testability,"es of basis functions (puream and non-puream) at points. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. An F-SAPT partitioning follows I-SAPT. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dforemp-grad1; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O molecule. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. aediis-1; ADIIS test case, from 10.1063/1.3304922. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. scf-guess-read2; Test if the the guess read in the same basis converges. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. scf-level-shift-cuhf; SCF level shift on a CUHF computation. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:42954,test,test,42954,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"es rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""; out = Path(ofile); log = out.with_suffix("".log""). # Get the custom logger; import logging. from psi4 import logger; if not inherit_loglevel:; logger.setLevel(loglevel). # Create formatters; # * detailed: example: 2019-11-20:01:13:46,811 DEBUG [psi4.driver.task_base:156]; f_format_detailed = logging.Formatter(""%(asctime)s,%(msecs)d %(levelname)-8s [%(name)s:%(lineno)d] %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""); # * light: example: 2019-11-20:10:45:21 FINDIFREC CLASS INIT DATA; f_format_light = logging.Formatter(""%(asctime)s %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""). # Create handlers, add formatters to handlers, and add handlers to logger (StreamHandler() also available); filemode = ""a"" if append else ""w""; f_handler = logging.FileHandler(log, filemode); f_handler.setLevel(logging.DEBUG); f_handler.setFormatter(f_format_detailed). if execute:; core.set_output_file(str(out), append); if print_header is True or (print_header is None and not append):; _print_header(); # Warning: baseFilename is not part of the documented API for the logging module and could change.; filenames = [handle.baseFilename for handle in logger.handlers]; if not f_handl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html:9067,log,loglevel,9067,psi4manual/1.9.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html,4,['log'],['loglevel']
Testability,"es rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""; out = Path(ofile); log = out.with_suffix("".log""). # Get the custom logger; import logging; from psi4 import logger; if not inherit_loglevel:; logger.setLevel(loglevel). # Create formatters; # * detailed: example: 2019-11-20:01:13:46,811 DEBUG [psi4.driver.task_base:156]; f_format_detailed = logging.Formatter(""%(asctime)s,%(msecs)d %(levelname)-8s [%(name)s:%(lineno)d] %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""); # * light: example: 2019-11-20:10:45:21 FINDIFREC CLASS INIT DATA; f_format_light = logging.Formatter(""%(asctime)s %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""). # Create handlers, add formatters to handlers, and add handlers to logger (StreamHandler() also available); filemode = ""a"" if append else ""w""; f_handler = logging.FileHandler(log, filemode); f_handler.setLevel(logging.DEBUG); f_handler.setFormatter(f_format_detailed). if execute:; core.set_output_file(str(out), append); if print_header is True or (print_header is None and not append):; _print_header(); # Warning: baseFilename is not part of the documented API for the logging module and could change.; filenames = [handle.baseFilename for handle in logger.handlers]; if not f_handl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html:9016,log,loglevel,9016,psi4manual/1.8.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html,2,['log'],['loglevel']
Testability,"es, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. scf-coverage; Lithium test for coverage. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:22799,test,test,22799,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,8,['test'],['test']
Testability,"es, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; # UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specifcation of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into Psi4 format. Note; Psi4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in Psi4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; Psi4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_converg",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cfour-1.html:5939,test,tests,5939,psi4manual/1.0.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cfour-1.html,2,['test'],['tests']
Testability,"es. _assemble_cbs_components(); --------------------------; * fill in results from TROVE/trove into GRAND_NEED/cbsrec. _contract_scheme_orders(); -------------------------; * prepare arguments for xtpl fns based on desired E/D/G/H quantity. * form extrapolated values for all available E/D/G/H quantities; * return structure of extrapolated values and filled-in GRAND_NEED/cbsrec. _summary_table(); ----------------; * build string table of cbs results. * form cbs qcvars, inc'l number, E, DG, G, H as available; * form model, including detailed dict at atomicresult.extras[""cbs_record""]. * convert result to psi4.core.Matrix (non-energy). _cbs_schema_to_wfn(); --------------------; * build wfn from cbs mol and basis (always def2-svp) and module (if present); * push qcvars to P::e and wfn. * return e/g/h and wfn. """""". import math; import re; import sys; import copy; import pprint; from typing import Any, Callable, Dict, List, Optional, Tuple, Union; pp = pprint.PrettyPrinter(width=120, compact=True, indent=1); import logging. import numpy as np; from pydantic import Field, validator; from qcelemental.models import AtomicResult, DriverEnum. from psi4 import core; from psi4.driver import driver_util, p4util, pp; from psi4.driver import qcdb; from psi4.driver.driver_cbs_helper import composite_procedures, register_composite_function, register_xtpl_function, xtpl_procedures # lgtm[py/unused-import]; from psi4.driver.driver_util import UpgradeHelper; from psi4.driver.p4util.exceptions import ValidationError; from psi4.driver.procrouting.interface_cfour import cfour_psivar_list; from psi4.driver.task_base import AtomicComputer, BaseComputer, EnergyGradientHessianWfnReturn. logger = logging.getLogger(__name__). zeta_values = 'dtq5678'; _zeta_val2sym = {k + 2: v for k, v in enumerate(zeta_values)}; _zeta_sym2val = {v: k for k, v in _zeta_val2sym.items()}; _addlremark = {'energy': '', 'gradient': ', GRADIENT', 'hessian': ', HESSIAN'}; _f_fields = ['f_wfn', 'f_basis', 'f_zeta', 'f_opt",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html:4981,log,logging,4981,psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,2,['log'],['logging']
Testability,"ess. The test is first performed in C2v symmetry, and then in C1. mbis-4; MBIS calculation on NaCl. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. fsapt-ext-abc; FSAPT with external charge on trimer. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. stability3; Test LDA stability analysis against QChem. scf-level-shift-cuhf; SCF level shift on a CUHF computation. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. mints-benchmark; run some BLAS benchmarks. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. nbody-vmfc-hessian; Computation of VMFC-corrected water trimer Hessian (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cc12; Single point energies of multiple excited states with EOM-CCSD. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:41893,test,test,41893,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. cbs-delta-energy; Extrapolated energies with delta correction. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. frac-sym; Fractional occupation with symmetry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt-ecp; sapt0 of charged system in ECP basis set. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfremp-1; density fitted REMP/cc-pVDZ energies for the CO2 molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:33727,test,tests,33727,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"essures but not for different isotopologs. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. ddd-function-kwargs; check distributed driver is correctly passing function kwargs. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc13b; Tests RHF CCSD(T)gradients. cc17; Single point energies of multiple excited states with EOM-CCSD. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Tr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:10603,test,test,10603,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"est -LE testlabel. Pytest has similar commands; * Run tests in parallel with -n flag (if extenstion pytest-xdist installed). For maximum parallelism: pytest -n`getconf _NPROCESSORS_ONLN`; * Run full test suite: pytest; * Run the quick tests: pytest -m quick; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: pytest -m smoke; * Run tests matching by name: pytest -k testname; * Run tests excluding those by name: pytest -k ""not testname""; * Run tests matching by label: pytest -m testlabel; * Run tests excluding those by label: pytest -m ""not testlabel"". How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import ps",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:54146,log,log,54146,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['log'],['log']
Testability,"est -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. Pytest has similar commands:. Run tests in parallel with -n flag (if Python package pytest-xdist installed). For maximum parallelism: pytest -n auto; Run full test suite: pytest; Run the quick tests: pytest -m quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: pytest -m smoke; Run tests matching by name: pytest -k testname; Run tests excluding those by name: pytest -k ""not testname""; Run tests matching by label: pytest -m testlabel; Run tests excluding those by label: pytest -m ""not testlabel""; Run tests with complicated filtering by name: pytest -k ""cc and not cc4 and not stdsuite""; Run tests and see test names: pytest -v; Run tests and see test names and sometimes more verbose errors: pytest -vv. How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --tes",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:54144,test,testing,54144,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,10,['test'],"['testing', 'tests']"
Testability,"est of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. sapt11; sapt example with orbital freezing with alkali metal and dMP2. scf-guess-read2; Test if the the guess read in the same basis converges. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:1525,test,test,1525,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,4,['test'],['test']
Testability,"est suite alongside installed PSI4 can be used to show that the PSI4 piece is working.; For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to PSI4 that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon you to fix.; For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI¶; In designing a test, sometimes you want it to be a model input for the user in a single file or you don’t want a lot of psi4. or Python syntax cluttering the input.; In this case, follow Adding PSIthon Test Cases to prepare as PSIthon (psi4 input.dat) for, roughly speaking, running through ctest.; The PSIthon/CTest test suite occupies the whole of psi4/tests except psi4/tests/pytests.; At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow Adding PsiAPI Test Cases to prepare as PsiAPI (import psi4) for, roughly speaking, running through pytest.; The PsiAPI/pytest test suite occupies psi4/tests/pytests.; The above description sounds as if there are two disjoint test suites, and you have to run both ctest and pytest to fully test PSI4.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don’t know to run both; and (2) there are important tests in the PSIthon suite that can’t be run on a PSI4 installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (test_input.py), PSIthon tests can also be ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:1502,test,test,1502,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,15,['test'],"['test', 'tests']"
Testability,"est suite, less some exceedingly long outliers.; * _long_ will be the whole test suite.; extras; Additional arguments to pass to `pytest`. Returns; -------; int; Return code from `pytest.main()`. 0 for pass, 1 for fail. """"""; try:; import pytest; except ImportError:; raise RuntimeError('Testing module `pytest` is not installed. Run `conda install pytest`'); abs_test_dir = os.path.sep.join([os.path.abspath(os.path.dirname(__file__)), ""tests""]). command = ['-rws', '-v', '--color', 'yes']; if extent.lower() == 'smoke':; command.extend(['-m', 'smoke']); elif extent.lower() == 'quick':; command.extend(['-m', 'quick or smoke']); elif extent.lower() == 'full':; command.extend(['-m', 'not long']); elif extent.lower() == 'long':; pass; if extras is not None:; command.extend(extras); command.extend(['--capture=sys', abs_test_dir]). retcode = pytest.main(command); return retcode. [docs]; def set_output_file(; ofile: str,; append: bool = False,; *,; loglevel: int = 20,; execute: bool = True,; print_header: Optional[bool] = None,; inherit_loglevel: bool = False) -> Path:; """"""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html:7703,log,loglevel,7703,psi4manual/1.9.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html,8,['log'],"['logging', 'loglevel']"
Testability,"est; except ImportError:; raise RuntimeError('Testing module `pytest` is not installed. Run `conda install pytest`'); abs_test_dir = os.path.sep.join([os.path.abspath(os.path.dirname(__file__)), ""tests""]). command = ['-rws', '-v']; if extent.lower() == 'smoke':; command.extend(['-m', 'smoke']); elif extent.lower() == 'quick':; command.extend(['-m', 'quick or smoke']); elif extent.lower() == 'full':; command.extend(['-m', 'not long']); elif extent.lower() == 'long':; pass; if extras is not None:; command.extend(extras); command.extend(['--capture=sys', abs_test_dir]). retcode = pytest.main(command); return retcode. [docs]def set_output_file(ofile: str, append: bool = False, *, loglevel: int = 20, execute: bool = True) -> Path:; """"""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""; out = Path(ofile); log = out.with_suffix("".log""). # Get the custom logger; import logging; from psi4 import logger; logger.setLevel(loglevel). # Create formatters; # * detailed: example: 2019-11-20:01:13:46,811 DEBUG [psi4.driver.task_base:156]; f_format_detailed = logging.Formatter(""%(asctime)s,%(msecs)d %(levelname)-8s [%(name)s:%(lineno)d] %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""); # * light: example: 2019-11-20:10:45:21 FINDIFREC CLASS INIT DATA; f_format_light = logging.Formatter(""%(asctime)s %",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/extras.html:7406,log,logging,7406,psi4manual/1.7.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/extras.html,6,['log'],"['log', 'logging', 'loglevel']"
Testability,"est_mp2.py,; CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running cmake --build after each change. Easiest is from <objdir>, run pytest ../tests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> or -n auto if pytest-xdist; installed) or print test names (-v) or print warnings (-rws).; An important point is that because they’re PsiAPI, import psi4 is happening,; so the <objdir> PSI4 module must be in PYTHONPATH. Also, any call; to QCEngine is using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi.; To see stdout output from an otherwise passing test, easiest to add assert 0; at its end to trigger failure.; If stdout printing is insufficient, and you really need to see output.dat or other files,; comment out their deletion in psi4/tests/pytests/conftest.py and run the single test, deleting; the file each time (since it appends). Comparison Functions¶. Plain Old Data¶. psi4.compare_values(expected, computed, atol_exponent, label[, *, **kwargs]). psi4.compare_values(expected, computed[, label, *, **kwargs])¶; Comparison function for float or float array-like data structures.; See qcelemental.testing.compare_values() for details.; psi4.compare_arrays is an old comparison function for float NumPy arrays that is now an alias to this.; Handles both Psi4-style signatures ((expected, computed, atol_exponent, label); see atol_exponent parameter below) and QCA-style signatures ((expected, computed, label)). Parameters:; atol_exponent (int or float) – Absolute tolerance (see formula in qcelemental.testing.compare_values() notes).; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:14205,test,tests,14205,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,4,['test'],['tests']
Testability,"est_mp2.py,; CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running cmake --build after each change. Easiest is from <objdir>, run pytest ../tests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> or -n auto if pytest-xdist; installed) or print test names (-v) or print warnings (-rws).; An important point is that because they’re PsiAPI, import psi4 is happening,; so the <objdir> PSI4 module must be in PYTHONPATH. Also, any call; to QCEngine is using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi.; To see stdout output from an otherwise passing test, easiest to add assert 0; at its end to trigger failure.; If stdout printing is insufficient, and you really need to see output.dat or other files,; comment out their deletion in psi4/tests/pytests/conftest.py and run the single test, deleting; the file each time (since it appends). Comparison Functions¶. Plain Old Data¶. psi4.compare_values(expected, computed, atol_exponent, label[, *, **kwargs]). psi4.compare_values(expected, computed[, label, *, **kwargs])¶; Comparison function for float or float array-like data structures.; See qcelemental.testing.compare_values() for details.; psi4.compare_arrays() is an old comparison function for float NumPy arrays that is now an alias to this.; Handles both Psi4-style signatures ((expected, computed, atol_exponent, label); see atol_exponent parameter below) and QCA-style signatures ((expected, computed, label)). Parameters; atol_exponent (int or float) – Absolute tolerance (see formula in qcelemental.testing.compare_values() notes).; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that th",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:14315,test,tests,14315,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,1,['test'],['tests']
Testability,"estlabel; Run tests excluding those by label: pytest -m ""not testlabel""; Run tests with complicated filtering by name: pytest -k ""cc and not cc4 and not stdsuite""; Run tests and see test names: pytest -v; Run tests and see test names and sometimes more verbose errors: pytest -vv. How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:54772,test,test,54772,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,5,['test'],['test']
Testability,"ests; long used instead of CTest longtests; addon and <name-of-addon> added automatically when @uusing(""<name-of-addon>"") decorates the test or marks=using(""<name-of-addon>"") marks the test. CTest “labels” are called “marks” in pytest.; Any new marks should be added to psi4/pytest.ini. Running for Debugging¶. PSIthon tests that don’t need extra files to run are easily run from <objdir> via stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out.; All PSIthon tests are runable through CTest, and output files appear in <objdir>/tests/<test-name>/output.dat and stdout results appear in <objdir>/Testing/Temporary/LastTest.log*. Adding PsiAPI Test Cases¶; To create a new test case, either create a new file or add to an existing file under psi4/tests/pytests. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; A test file may contain many tests, each of which is an ordinary Python function with name starting test_. This is how pytest knows to collect it.; No registration required to bring a test to pytest’s attention.; No registration required to bring a test to CMake’s attention. If a test needs additional files, register them in psi4/psi4/CMakeLists.txt. A few notes on test contents:. Import testing functions from utils and use Python assert: assert compare_values(expected, computed, ...).; Don’t worry about cleaning up files or resetting options. A function in psi4/tests/pytests/conftest.py does this automatically between every test.; Especially if using data or functions from outside a test, run a variety of tests at different pytest -n <N> levels to mix up test ordering. If tests fail that pass when run alone, you’ve got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. For every new test file, add pytestmark = [pytest.mark.psi, pytest.mark.api] at the top.; This ensures that ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:11129,test,test,11129,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,10,['test'],"['test', 'tests']"
Testability,"esults(return_wfn=return_wfn). else:; # We have unpacked to an AtomicInput; lowername = plan.method; basis = plan.basis; core.set_global_option(""BASIS"", basis). ## Second half of this fn -- entry means program running exactly analytic 1st derivative. # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util.negotiate_convergence_criterion((1, 1), lowername, return_optstash=True). # Commit to procedures[] call hereafter; core.clean_variables(). # no analytic derivatives for scf_type cd; if core.get_global_option('SCF_TYPE') == 'CD':; raise ValidationError(""""""No analytic derivatives for SCF_TYPE CD.""""""). core.print_out(""""""gradient() will perform analytic gradient computation.\n""""""). # Perform the gradient calculation; logger.info(f""Compute gradient(): method={lowername}, basis={core.get_global_option('BASIS').lower()}, molecule={molecule.name()}, nre={'w/EFP' if hasattr(molecule, 'EFP') else molecule.nuclear_repulsion_energy()}""); logger.debug(""w/EFP"" if hasattr(molecule, ""EFP"") else pp.pformat(molecule.to_dict())); wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); logger.info(f""Return gradient(): {core.variable('CURRENT ENERGY')}""); logger.info(nppp(wfn.gradient().np)). basisstash.restore(); optstash.restore(). driver_findif.gradient_write(wfn). if return_wfn:; return (wfn.gradient(), wfn); else:; return wfn.gradient(). [docs]; def properties(*args, **kwargs):; r""""""Function to compute various properties. :aliases: prop(). :returns: none. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - This function at present has a limited functionality.; Consult the keywords sections of other modules for further property capabilities. +--------------------+-----------------------------------------------+----------------+---------------------------------------------------------------+; | Name | Calls Method | Reference | Supported Properties |; +========",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver.html:45033,log,logger,45033,psi4manual/1.8.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver.html,6,['log'],['logger']
Testability,"esults(return_wfn=return_wfn). else:; # We have unpacked to an AtomicInput; lowername = plan.method; basis = plan.basis; core.set_global_option(""BASIS"", basis). ## Second half of this fn -- entry means program running exactly analytic 1st derivative. # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util.negotiate_convergence_criterion((1, 1), lowername, return_optstash=True). # Commit to procedures[] call hereafter; core.clean_variables(). # no analytic derivatives for scf_type cd; if core.get_global_option('SCF_TYPE') == 'CD':; raise ValidationError(""""""No analytic derivatives for SCF_TYPE CD.""""""). core.print_out(""""""gradient() will perform analytic gradient computation.\n""""""). # Perform the gradient calculation; logger.info(f""Compute gradient(): method={lowername}, basis={core.get_global_option('BASIS').lower()}, molecule={molecule.name()}, nre={'w/EFP' if hasattr(molecule, 'EFP') else molecule.nuclear_repulsion_energy()}""); logger.debug(""w/EFP"" if hasattr(molecule, ""EFP"") else pp.pformat(molecule.to_dict())); wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); logger.info(f""Return gradient(): {core.variable('CURRENT ENERGY')}""); logger.info(nppp(wfn.gradient().np)). basisstash.restore(); optstash.restore(). driver_findif.gradient_write(wfn). if return_wfn:; return (wfn.gradient(), wfn); else:; return wfn.gradient(). [docs]def properties(*args, **kwargs):; r""""""Function to compute various properties. :aliases: prop(). :returns: none. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - This function at present has a limited functionality.; Consult the keywords sections of other modules for further property capabilities. +--------------------+-----------------------------------------------+----------------+---------------------------------------------------------------+; | Name | Calls Method | Reference | Supported Properties |; +==========",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html:38346,log,logger,38346,psi4manual/1.6.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html,4,['log'],['logger']
Testability,"et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; \(\Rightarrow\) 'HBC6A' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset; 'small'; 'large'; 'equilibrium' equilibrium points for the six systems; 'FaOOFaOO' dissociation curve for formic acid dimer; 'FaONFaON' dissociation curve for formamide dimer; 'FaNNFaNN' dissociation curve for formamidine dimer; 'FaOOFaON' dissociation curve for formic acid- formamide complex; 'FaONFaNN' dissociation curve for formamide- formamidine complex; 'FaOOFaNN' dissociation curve for formic acid- formamidine complex. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_available_databases-1.html:9134,benchmark,benchmark,9134,psi4manual/1.2.1/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_available_databases-1.html,12,['benchmark'],['benchmark']
Testability,"et global or local. This input uses local. scf-ecp2; Water-Argon complex with ECP present; check of RHF Hessian. fnocc7; Test fnocc with linear dependencies. props4; Electrostatic potential and electric field evaluated on a grid around water. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. scf-guess-read2; Test if the the guess read in the same basis converges. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. fcidump; test FCIDUMP functionality for rhf/uhf. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, U",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:45810,test,test,45810,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"et objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. dft-reference; MP2 with a PBE0 reference computation. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. linK-1; RHF Linear Exchange Algorithm test for water. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. mp2-h; check that methods can act on single atom. linK-2; RKS Linear Exchange Algorithm test for benzene. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. fsapt-ext-abc2; FSAPT with external charge on dimer. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. dft-jk; DFT JK on-disk test. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). cc55; EOM-CCSD/6-31g excited state t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:28419,test,test,28419,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"et the total memory allocation. set_module_options(module, options_dict); Sets Psi4 module options from a module specification and input dictionary. set_options(options_dict); Sets Psi4 global options from an input dictionary. success(label); Function to print a ‘label…PASSED’ line to screen. vibanal_wfn(wfn[, hess, irrep, molecule, …]). write_eigenvalues(eigs, mo_idx); Prepare multi-line string with one-particle eigenvalues to be written to the FCIDUMP file. xml2dict([filename]); Read XML filename into nested OrderedDict-s. Classes¶. CSXError(msg); Error called when CSX generation fails. ConvergenceError(eqn_description, maxit); Error called for problems with converging and iterative method. Dftd3Error(msg). EmpericalDispersion(alias, dtype, **kwargs). ManagedMethodError(circs). OptimizationConvergenceError(…); Error called for problems with geometry optimizer. ParsingError(msg); Error called for problems parsing a text file. PastureRequiredError(option); Error called when the specified value of option requires some module(s) from Psi4Pasture, but could not be imported. PsiException; Error class for Psi. PsiImportError(msg); Error called for problems import python dependencies. QMMM(). Table([rows, row_label_width, …]); Class defining a flexible Table object for storing data. TestComparisonError(msg); Error called when a test case fails due to a failed compare_values() call. ValidationError(msg); Error called for problems with the input file. datetime(year, month, day[, hour[, minute[, …); The year, month and day arguments are required. Class Inheritance Diagram¶. table of contents. PSI4 API: Linking C++ and Python; psi4.core Module; Functions; Classes; Class Inheritance Diagram. psi4.driver Package; Functions; Classes; Class Inheritance Diagram. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/psi4api-1.html:263829,test,test,263829,psi4manual/1.2.1/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/psi4api-1.html,2,['test'],['test']
Testability,"etailed Installation of Psi4. Psi4conda Installer¶; Sequence of commands to get you to a working Psi4 on Linux; or Mac. Installs Miniconda+Psi4 into $HOME/psi4conda and; the Psi4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux; >>> curl -o ""http://www.psicode.org/downloads/Psi4conda2-latest-Linux.sh"" --keepalive-time 2; >>> bash; >>> bash Psi4conda-latest-Linux.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda and psi4 in path; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. # Mac; >>> curl -o ""http://www.psicode.org/downloads/Psi4conda2-latest-MacOSX.sh"" --keepalive-time 2; >>> bash; >>> bash Psi4conda-latest-MacOSX.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bash_profile; # log out, log back in so conda and psi4 in path; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files and Elementary Restart) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Conda Proficients¶; The Psi4conda Installer uses a conda constructor to package up Miniconda,; the psi4 conda packages, the psi4 add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/conda-1.html:2446,log,log,2446,psi4manual/1.0.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/conda-1.html,4,['log'],['log']
Testability,"etc. Indicates which properties should be computed. :type molecule: :ref:`molecule <op_py_molecule>`; :param molecule: ``h2o`` || etc. The target molecule, if not the last molecule defined. :examples:. >>> # [1] Optical rotation calculation; >>> property('cc2', properties=['rotation']). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['SCF', 'E_CONVERGENCE'],; ['SCF', 'D_CONVERGENCE'],; ['E_CONVERGENCE']). # Make sure the molecule the user provided is the active one; if ('molecule' in kwargs):; activate(kwargs['molecule']); del kwargs['molecule']; molecule = psi4.get_active_molecule(); molecule.update_geometry(); #psi4.set_global_option('BASIS', psi4.get_global_option('BASIS')). # Allow specification of methods to arbitrary order; lowername, level = parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. try:; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); # SCF properties have been set as 6/5 so as to match those; # run normally through OEProp so subject to change; if not psi4.has_option_changed('SCF', 'E_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; psi4.set_local_option('SCF', 'E_CONVERGENCE', 6); else:; psi4.set_local_option('SCF', 'E_CONVERGENCE', 10); if not psi4.has_option_changed('SCF', 'D_CONVERGENCE'):; if procedures['energy'][lowername] == run_scf or procedures['energy'][lowername] == run_dft:; psi4.set_local_option('SCF', 'D_CONVERGENCE', 6); else:; psi4.set_local_option('SCF', 'D_CONVERGENCE', 10). # Set post-scf convergence criteria (global will cover all correlated modules); if not psi4.has_global_option_changed('E_CONVERGENCE'):; if not procedures['energy'][lowername] == run_scf and not procedures['energy'][lowername] == run_dft:; psi4.set_global_option('E_CONVERGENCE', 8). returnvalue = procedures['property'][lowername](lowername, **kwargs). except KeyError:; raise",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/driver.html:44019,test,test,44019,psi4manual/4.0b5/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/driver.html,2,['test'],['test']
Testability,"ether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the cp(); function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || 'off' ; Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – 'on' || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || 'off' ; Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (string) – 'default' || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (array of strings) – [] || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (string or array of strings) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'; Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.; For dat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/db-1.html:3545,benchmark,benchmark,3545,psi4manual/1.0.0/db-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/db-1.html,8,['benchmark'],['benchmark']
Testability,"ether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the cp(); function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || 'off' ; Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – 'on' || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || 'off' ; Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (string) – 'default' || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (array of strings) – [] || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (string or array of strings) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'; Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || etc.; For databases c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/db-1.html:3230,benchmark,benchmark,3230,psi4manual/4.0b2/db-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/db-1.html,2,['benchmark'],['benchmark']
Testability,"ethod for H2O. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. remp-energy2; integral conventional unrestricted REMP/cc-pVDZ energies for the H2O+ molecule. results were independently verified against the initial wavels implementation. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. fcidump; test FCIDUMP functionality for rhf/uhf. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. dfccsdat2; DF-A-CCSD(T) cc-pVDZ energy for the NH molecule. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:49026,test,tested,49026,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,1,['test'],['tested']
Testability,"ethod. To; perform IP fitting, one simply calls the ip_fitting() Python macro, after; setting up a standard LRC UKS computation. A representative example is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18memory 512 MB. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # IP fitting runs in C1 symmetry; }. set {; reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; }. # Optional arguments are minimum omega, maximum omega, molecule object; omega = ip_fitting('wb97', 0.4, 2.0, molecule=h2o). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various values; of \(\omega\), though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; \(\omega\). The procedure can also be assisted by providing a tighter guess; for the bounds of \(\omega\). This small test case has a tuned; \(\omega\) of 1.700, hence the bounds of 0.4 and 2.0. Larger systems,; particularly conjugated systems, will typically have an optimized \(\omega\); between 0.1 and 0.5. Fractional Particle Curves¶; The behavior of the electronic energy and HOMO energy across fractional numbers; of electrons is extremely useful for elucidating the MSIE behavior of various; functional technologies. PSI4 features an efficient fractional-particle DFT; code, written into the UKS spin specialization. Due to a combination of DIIS and; reuse of integrals/guess orbitals across a range of fractional occupations, this; code is able to perform fractional occupation curves for systems with up to 60; atoms, across a wide range of the particle number \(N\).; Two python macros exist for this code. The first is frac_traverse(), which is; used to investigate the fractional occupation behavior within one electron above; and below the neutral. An example is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/dft-1.html:23925,test,test,23925,psi4manual/1.2.1/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/dft-1.html,4,['test'],['test']
Testability,"ethods for Noncovalent Interactions,” E. G.; Hohenstein and C. D. Sherrill, WIREs: Comput. Mol. Sci. 2,; 304-326 (2012). Using Natural Orbitals in SAPT. “Efficient Evaluation of Triple Excitations in Symmetry-Adapted; Perturbation Theory via MP2 Natural Orbitals,” E. G. Hohenstein; and C. D. Sherrill, J. Chem. Phys. 133, 104107 (2010). Obtaining and Installing PSI4¶; The latest version of the PSI4 program package may be obtained at; www.psicode.org. The; source code is available as a gzipped tar archive (named, for example,; psi4.X.tar.gz, and binaries may be available for certain architectures.; For detailed installation and testing instructions, please refer to the; installation instructions at the PSI4 website above or to the file; psi4/INSTALL distributed with the package. Additional compilation; hints may be found at Psi Compiling. Supported Architectures¶; The majority of PSI4 was developed on Mac and Linux machines. In; principle, it should work on any Unix system; however, we have not tested; extensively on systems other than Mac and Linux. There is not a Windows; version of PSI4.; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. For the Intel compilers, use versions 11 or; 12.1 (we have had trouble with version 12.0). Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contrated Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Gradient, and Frequency. Summary of theoretical methods available in PSI4. Method; Energy; Gradient; Reference; Parallelism. SCF; Y; Y [4]; RHF/ROHF/UHF; threaded. DF-SCF; Y; Y [4]; RHF/ROHF/UHF; threaded. DCFT; Y; Y; UHF; partially threaded. SAPT; Y; —; RHF; threaded. MP2; Y; Y [2]; RHF/ROHF/UHF; threaded [3]. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/introduction-1.html:6793,test,tested,6793,psi4manual/4.0b2/introduction-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/introduction-1.html,2,['test'],['tested']
Testability,"ets the amount of SS MP2 correlation. set_citation(self, arg0); Sets the SuperFunctional citation. set_deriv(self, arg0); Sets the derivative level. set_description(self, arg0); Sets the SuperFunctional description. set_do_vv10(self, arg0); Sets whether to do VV10 correction. set_grac_alpha(self, arg0); Sets the GRAC alpha parameter. set_grac_beta(self, arg0); Sets the GRAC beta parameter. set_grac_shift(self, arg0); Sets the GRAC bulk shift value. set_lock(self, arg0); Locks the functional to prevent changes. set_max_points(self, arg0); Sets the maximum number of points. set_name(self, arg0); Sets the SuperFunctional name. set_vv10_b(self, arg0); Sets the VV10 b parameter. set_vv10_c(self, arg0); Sets the VV10 c parameter. set_x_alpha(self, arg0); Sets the amount of exact global HF exchange. set_x_beta(self, arg0); Sets how much more long-range exchange than short-range exchange. set_x_omega(self, arg0); Sets the range-seperation exchange parameter. test_functional(self, arg0, arg1, arg2, …); Quick testing capabilities. value(self, arg0); Returns a given internal value. values(self); Return all internal values. vv10_b(self); The VV10 b parameter. vv10_c(self); The VV10 c parameter. x_alpha(self); Amount of exact HF exchange. x_beta(self); Amount of exact HF exchange. x_functional(self, arg0); Returns the desired X Functional. x_functionals(self); Returns all X Functionals. x_omega(self); Range-seperated exchange parameter. Methods Documentation. XC_build(arg0: str, arg1: bool) → psi4.core.SuperFunctional¶; Builds a SuperFunctional from a XC string. add_c_functional(self: psi4.core.SuperFunctional, arg0: psi::Functional) → None¶; Add a correlation Functional. add_x_functional(self: psi4.core.SuperFunctional, arg0: psi::Functional) → None¶; Add a exchange Functional. allocate(self: psi4.core.SuperFunctional) → None¶; Allocates the vectors, should be called after ansatz or npoint changes. ansatz(self: psi4.core.SuperFunctional) → int¶; SuperFunctional rung. blank() → ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.superfunctional.html:3225,test,testing,3225,psi4manual/1.3.2/api/psi4.core.superfunctional.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.superfunctional.html,1,['test'],['testing']
Testability,"ets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dft2; DFT Functional Test. scf6; Tests RHF/ROHF/UHF SCF gradients. scf-guess-read3; Test if the the guess read in the same basis converges. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. tdscf-1; td-uhf test on triplet states of methylene (rpa). mbis-4; MBIS calculation on NaCl. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:14126,test,test,14126,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"eturn_handler (Optional[Callable]) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Return type; Union[bool, Tuple[bool, str]]. Returns. allclose (bool) – Returns True if expected and computed are equal within tolerance; False otherwise.; message (str) – When return_message=True, also return passed or error message. Notes. Akin to np.allclose.; For scalar float-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; float-comparable types. For mixed types, use compare_recursive().; Sets rtol to zero to match expected Psi4 behaviour, otherwise measured as:. absolute(computed - expected) <= (atol + rtol * absolute(expected)). psi4.compare_integers(expected, computed[, label, *, **kwargs])¶; Comparison function for integers, strings, booleans, or integer array-like data structures.; See qcelemental.testing.compare() for details.; psi4.compare_strings() is an alias to this. qcelemental.testing.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=None)[source]¶; Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters. expected (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Reference value against which computed is compared.; computed (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Input value to compare against expected.; label (Optional[str]) – Label for passed and error messages. Defaults to calling function name.; equal_phase (bool) – Compare computed or its opposite as equal.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Optional[Callable]) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Return type; Union[bool, Tuple[bool, str]]. Retu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:17456,test,testing,17456,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,1,['test'],['testing']
Testability,"evel which must be present in computed. (“omega” recc. for vibs.); toldict (Optional[Dict[str, float]]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. Extra QCA Functions¶. psi4.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=<function _psi4_true_raise_handler>)¶; Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters:. expected (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Reference value against which computed is compared.; computed (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Input value to compare against expected.; label (str) – Label for passed and error messages. Defaults to calling function name.; equal_phase (bool) – Compare computed or its opposite as equal.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Callable) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Returns:. allclose (bool) – Returns True if expected and computed are equal; False otherwise.; message (str) – When return_message=True, also return passed or error message. Return type:; Union[bool, Tuple[bool, str]]. Notes. Akin to numpy.array_equal().; For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use compare_recursive(). psi4.compare_recursive(expected, computed, *args, **kwargs)¶; Comparison function for recursively comparing mixed-type and nested structures such as dictionaries and lists.; See qcelemental.testing.compare_recursive() for details. table of contents. Test Suite; CTest and pytest, PSIthon and PsiAPI; Test Contents; Adding PSIthon Test Ca",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:29426,log,log,29426,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,1,['log'],['log']
Testability,"evel-psi4-dir}¶; First, what’s happening? sys.path (where modules can be imported from in python) starts with ''. If you export PYTHONPATH={objdir}/stage/{prefix}/lib/{pymod_lib_dir}:$PYTHONPATH to make PsiAPI easy, that inserts starting in pos’n 1 (0-indexed), so '' still at the head of sys.path. Now, if you try to run a psiapi/python file from {top-level-psi4-dir} that contains import psi4, it will find the source tree psi4/__init__.py and fail because there’s no core.so around. That is, it’s finding what looks to be the psi4 module dir structure . when the one it wants is what you inserted into PYTHONPATH at pos’n 1.; The way around this is to move the python file you’re running to any other directory. Or, within the file, do sys.path.insert(0, {objdir}/stage/{prefix}/lib/{pymod_lib_dir}. How to find tests without output.ref¶; Ideally, each new test or much-altered test should add its own; output.ref. When that doesn’t happen, this command helps.; find tests/ -mindepth 1 -maxdepth 1 -type d '!' -exec test -e ""{}/output.ref"" "";"" -print. How to do GitHub issue management and code review¶. Anyone, core-dev or not, is encouraged to review PRs. It’s actually good practice for interacting with other open-source projects, where you don’t have the advantage of knowing or working with the contributors. Before venturing into projects on GitHub where you don’t know the maintainers, it doesn’t hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ .; Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged.; Approving before CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn’t.; All main branches (master and 1.N.x maintenance) are protected by GitHub, including administrators, so even with write access, no one can accidentally push (master) or rewrite the history (master and maintenance).; PR owners who also h",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_git-1.html:8194,test,tests,8194,psi4manual/1.4.0/manage_git-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_git-1.html,18,['test'],"['test', 'tests']"
Testability,"every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) doc/sphinxman and start from scratch.; Even ~10 minutes of build time can be annoying when developing; documentation and testing rst files. In that situation, use the target; below which builds only the written docs (not autodocs) in; psi4/doc/sphinxman/source quickly, though with a lot of warnings for; unresolved links:; >>> make sphinxmini. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. reStructuredText; links example; rendered test document; vs. source test document; A third reStructuredText and Sphinx; Sphinx Docs. Math in the Codebase¶; It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the #! comment comments at the top of test case; input files, the /*- comment -*/ comments in; psi4/psi4/src/read_options.cc, and the r"""""" comment """"""; docstrings in python modules. (That r"""""" makes the string read; literally, so your LaTeX symbols aren’t confused with escape characters.); For the two former, math has traditionally; been written in LaTeX (with the special substitution @@ for; subscripting underscore). The autodoc script has been trained to convert; inline LaTeX math to reST math, provided the expression within dollar; signs is offset from other text. That is, expressions of the form; ^ $latex math$[., ]$ (pseudo-regex) are good, while H$_2$O and LaTeX tables; are not translated correctly. Python docstrings are absorbed as-is, so; please use reST math formatting (essentially $latex math$ \(\Rightarrow\); :math:`latex math`).; Starting around PSI4 1.1, MathJax is used for in-browser LaTeX; rendering in place of offline PNG generation of math images. Check the; online rendering, as occasionally there will be errors even",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/documentation-1.html:5763,test,test,5763,psi4manual/1.4.0/documentation-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/documentation-1.html,5,['test'],['test']
Testability,"ew BraggSlater radii. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. dlpnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. dft1; DFT Functional Test all values update for new BraggSlater radii. cubeprop-esp; RHF orbitals and density for water. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom; DFT custom functional test. cc13b; Tests RHF CCSD(T)gradients. sad-scf-type; Test SAD SCF guesses on noble gas atom. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc51; EOM-CC3/cc-pVTZ on H2O. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:27664,test,test,27664,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ew samples/ files and dirs; Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors¶. Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; Figure out any new “Additional Contributors” authors since last release.; Get permission of new authors and their particulars for codemeta.json.; Edit psi4/header.py accordingly and make PR. Run long tests¶. Run the full test suite with threading parallelism on. There’s one CC test that’s a known fail; in parallel b/c it sets memory very low, iirc. CTest (CLI):; +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. Pytest (API):; +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). Pytest (CLI):; +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi4.executable).suffix == "".exe"":; command = [psi4.executable, inputdat]; else:; - command = [sys.executable, psi4.executable, inputdat]; - _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:3401,test,tests,3401,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['test'],['tests']
Testability,"ex(p[0])); elif key.upper() in [""MULLIKEN_CHARGES"", ""LOWDIN_CHARGES"", ""MULLIKEN CHARGES"", ""LOWDIN CHARGES""]:; reshaper = (-1, ). if reshaper:; return val.np.reshape(reshaper); else:; return val. def _multipole_compressor(complete: np.ndarray, order: int) -> np.ndarray:; """"""Form flat unique components multipole array from complete Cartesian array. Parameters; ----------; order; Multipole order. e.g., 1 for dipole, 4 for hexadecapole.; complete; Multipole array, order-dimensional Cartesian array expanded to complete components. Returns; -------; compressed : numpy.ndarray; Multipole array, length (order + 1) * (order + 2) / 2 compressed to unique components. """"""; compressed = []; for ii in range(order + 1):; lx = order - ii; for lz in range(ii + 1):; ly = ii - lz. np_index = []; for xval in range(lx):; np_index.append(0); for yval in range(ly):; np_index.append(1); for zval in range(lz):; np_index.append(2); compressed.append(complete[tuple(np_index)]). assert len(compressed) == ((order + 1) * (order + 2) / 2); return np.array(compressed). def _multipole_plumper(compressed: np.ndarray, order: int) -> np.ndarray:; """"""Form multidimensional multipole array from unique components array. Parameters; ----------; order; Multipole order. e.g., 1 for dipole, 4 for hexadecapole.; compressed; Multipole array, length (order + 1) * (order + 2) / 2 compressed to unique components. Returns; -------; complete : numpy.ndarray; Multipole array, order-dimensional Cartesian array expanded to complete components. """"""; shape = tuple([3] * order); complete = np.zeros(shape). def compound_index(counter):; # thanks, https://www.pamoc.it/tpc_cart_mom.html Eqn 2.2!; # jn = nz + (ny + nz)(ny + nz + 1) / 2; return int(; counter.get(""2"", 0) + (counter.get(""1"", 0) + counter.get(""2"", 0)) *; (counter.get(""1"", 0) + counter.get(""2"", 0) + 1) / 2). for idx in product(""012"", repeat=order):; xyz_counts = Counter(idx) # ""010"" --> {""0"": 2, ""1"": 1}; np_index = tuple(int(x) for x in idx) # ('0', '1') --> (0, 1",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/python_helpers.html:31275,assert,assert,31275,psi4manual/1.7.x/_modules/psi4/driver/p4util/python_helpers.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/python_helpers.html,4,['assert'],['assert']
Testability,"exes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BAKERJCC96¶. Geometries from Baker and Chan J. Comput. Chem. 17 888 (1996),. as reported in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002). No reference energies defined. cp 'off'; rlxd 'off'. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; 'HBC6A' Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset; 'small'; 'large'; 'equilibrium' equilibrium points for the six systems; 'FaOOFaOO' dissociation curve for formic acid dimer; 'FaONFaON' dissociation curve for formamide dimer; 'FaNNFaNN' dissociation curve for formamidine dimer; 'FaOOFaON' dissociation curve for formic acid- formamide complex; 'FaONFaNN' dissociation curve for formamide- formamidine complex; 'FaOOFaNN' dissociation curve for formic acid- formamidine complex. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani e",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html:2509,benchmark,benchmark,2509,psi4manual/1.0.0/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html,4,['benchmark'],['benchmark']
Testability,"extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""; out = Path(ofile); log = out.with_suffix("".log""). # Get the custom logger; import logging; from psi4 import logger; if not inherit_loglevel:; logger.setLevel(loglevel). # Create formatters; # * detailed: example: 2019-11-20:01:13:46,811 DEBUG [psi4.driver.task_base:156]; f_format_detailed = logging.Formatter(""%(asctime)s,%(msecs)d %(levelname)-8s [%(name)s:%(lineno)d] %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""); # * light: example: 2019-11-20:10:45:21 FINDIFREC CLASS INIT DATA; f_format_light = logging.Formatter(""%(asctime)s %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""). # Create handlers, add formatters to handlers, and add handlers to logger (StreamHandler() also available); filemode = ""a"" if append else ""w""; f_handler = logging.FileHandler(log, filemode); f_handler.setLevel(logging.DEBUG); f_handler.setFormatter(f_format_detailed). if execute:; core.set_output_file(str(out), append); if print_header is True or (print_header is None and not append):; _print_header(); # Warning: baseFilename is not part of the documented API for the logging module and could change.; filenames = [handle",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html:8925,log,logger,8925,psi4manual/1.8.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html,8,['log'],"['logger', 'logging']"
Testability,"f QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; Perl (for some coupled-cluster CTest tests) https://www.perl.org/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing in parallel) https://docs.pytest.org/en/2.1.0/xdist.html. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] [CheMPS2 min version]. HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. dkh — [what is dkh?] [dkh min version]. Fortran Compiler. gdma — [what is gdma?] [gdma min version]. Fortran Compiler. PCMSolver — [what is PCMSolver?]. Fortran Compiler; zlib http://www.zlib.net/. simint — [what is simint?] [",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:6394,test,tests,6394,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['test'],['tests']
Testability,"f addons(request: str = None) -> Union[bool, List[str]]:; """"""Returns boolean of whether Add-On *request* is available to Psi4,; either compiled in or searchable in $PSIPATH:$PATH, as relevant. If; *request* not passed, returns list of available Add-Ons: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...` . """"""; def strike(text):; return ''.join(itertools.chain.from_iterable(zip(text, itertools.repeat('\u0336')))). if request is None:; return [(k if v else strike(k)) for k, v in sorted(_addons_.items())]; return _addons_[request.lower()]. # Testing; def test(extent: str = ""full"", extras: List = None) -> int:; """"""Runs a test suite through pytest. Parameters; ----------; extent; {'smoke', 'quick', 'full', 'long'}; All choices are defined, but choices may be redundant in some projects. * _smoke_ will be minimal ""is-working?"" test(s).; * _quick_ will be as much coverage as can be got quickly, approx. 1/3 tests.; * _full_ will be the whole test suite, less some exceedingly long outliers.; * _long_ will be the whole test suite.; extras; Additional arguments to pass to `pytest`. Returns; -------; int; Return code from `pytest.main()`. 0 for pass, 1 for fail. """"""; try:; import pytest; except ImportError:; raise RuntimeError('Testing module `pytest` is not installed. Run `conda install pytest`'); abs_test_dir = os.path.sep.join([os.path.abspath(os.path.dirname(__file__)), ""tests""]). command = ['-rws', '-v']; if extent.lower() == 'smoke':; command.extend(['-m', 'smoke']); elif extent.lower() == 'quick':; command.extend(['-m', 'quick or smoke']); elif extent.lower() == 'full':; command.extend(['-m', 'not long']); elif extent.lower() == 'long':; pass; if extras is not None:; command.extend(extras); command.extend(['--capture=sys', abs_test_dir]). retcode = pytest.main(command); return retcode. [docs]def set_output_file(ofile: str, append: bool = False, *, loglevel: int = 20, execute: bool = True) -> Path:; """"""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCI",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/extras.html:6275,test,test,6275,psi4manual/1.7.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/extras.html,2,['test'],['test']
Testability,"f available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:45043,test,testing,45043,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,9,['test'],['testing']
Testability,"f bimolecular complexes. :type rlxd: :ref:`boolean <op_py_boolean>`; :param rlxd: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See :ref:`sec:availableDatabases`) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. :type symm: :ref:`boolean <op_py_boolean>`; :param symm: |dl| ``'on'`` |dr| || ``'off'``. Indicates whether the native symmetry of the database reagents is; employed (``'on'``) or whether it is forced to :math:`C_1` symmetry; (``'off'``). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). :type zpe: :ref:`boolean <op_py_boolean>`; :param zpe: ``'on'`` || |dl| ``'off'`` |dr|. Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. :type benchmark: str; :param benchmark: |dl| ``'default'`` |dr| || ``'S22A'`` || etc. Indicates whether a non-default set of reference energies, if; available (See :ref:`sec:availableDatabases`), are employed for the; calculation of error statistics. :type tabulate: List[str]; :param tabulate: |dl| ``[]`` |dr| || ``['scf total energy', 'natom']`` || etc. Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. :type subset: Union[str, List[str]]; :param subset:. Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See :ref:`sec:availableDatabases` for available values. * ``'small'`` || ``'large'`` || ``'equilibrium'``; Calls predefined subsets of the requested database, either; ``'small'``, a few of the smallest database members,; ``'large'``, the largest of the database members, or; ``'equilibrium'``, the equilibrium geometr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/wrapper_database.html:5476,benchmark,benchmark,5476,psi4manual/1.4.0/_modules/psi4/driver/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/wrapper_database.html,28,['benchmark'],['benchmark']
Testability,"f col not in columnreservoir.keys():; raise ValidationError('Column {0} not recognized. Register with columnreservoir.'.format(col)). if isinstance(modelchem, basestring):; if modelchem.lower() == 'all':; mcs = sorted(self.mcs.keys()); else:; mcs = [modelchem]; else:; mcs = modelchem. # commence to generate LaTeX code; tablelines = []; indexlines = []. if standalone:; tablelines += textables.begin_latex_document(). # iterate to produce one LaTeX table per modelchem; for mc in mcs:; # prepare summary statistics; perr = self.compute_statistics(mc, benchmark=benchmark, sset=sset,; failoninc=failoninc, verbose=False,; returnindiv=False); serrors = OrderedDict(); for db in self.dbdict.keys():; serrors[db] = None if perr[db] is None else format_errors(perr[db], mode=3); serrors[self.dbse] = format_errors(perr[self.dbse], mode=3). # prepare individual reactions and errors; terrors = OrderedDict(); isComplete = True; for (lmc, lbm, orxn) in self.get_reactions(mc, benchmark=benchmark,; sset=sset, failoninc=failoninc):; tmp = {}; dbrxn = orxn.dbrxn; tmp['dbrxn'] = dbrxn.replace('_', '\\_'); tmp['indx'] = r""""""\textit{"""""" + str(orxn.indx) + """"""}""""""; tmp['tagl'] = dbrxn.split('-')[0] + ' ' + \; (orxn.latex if orxn.latex else orxn.tagl.replace('_', '\\_')); tmp['imag'] = None # name of primary rgt; bmdatum = orxn.data[lbm].value if lbm else None; mcdatum = orxn.data[lmc].value if lmc else None; tmp['bm'] = bmdatum; tmp['mc'] = mcdatum; if lmc and lbm:; tmp['e'] = mcdatum - bmdatum; tmp['pe'] = 100 * (mcdatum - bmdatum) / abs(bmdatum); # TODO redefining errors not good practice; else:; isComplete = False; tmp['e'] = None; tmp['pe'] = None. terrors[dbrxn] = {}; for c in columnreservoir.keys():; terrors[dbrxn][c] = '' if tmp[c] is None else \; columnreservoir[c][2].format(tmp[c]). fancymodelchem = self.fancy_mcs(latex=True)[mc]; thistitle = title.format(dbse=self.dbse, mc=fancymodelchem,; sset='All' if sset == 'default' else sset.upper()); lref = [r""""""tbl:qcdb""""""]; if theme:; lref.ap",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:89421,benchmark,benchmark,89421,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,2,['benchmark'],['benchmark']
Testability,"f double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Managing: Git, Conda, CMake and all that; Adding Add-Ons. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/manage_addon.html:11488,test,testing,11488,psi4manual/1.8.x/manage_addon.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/manage_addon.html,1,['test'],['testing']
Testability,"f double) has; changed.; For Tikhonow regularization, use TIKONOW_OMEGA, not regularizer.; SYM for symmetry.; OCC for occupied/occupation (e.g., DOCC, LOCK_OCC, OCC_TOLERANCE).; COND for condition and CONDITIONER for conditioner.; LOCAL (not localize).; Use AO and MO for atomic and molecular orbitals. When ‘O’ for; orbitals is too obsure or would make for too short a keyword, as in; “bool NO” for “Do use natural orbitals”, use ORBS for orbitals. So; natural orbitals are NAT_ORBS and Brueckner orbitals are; BRUECKNER_ORBS.; LEVEL (not LVL, not LEV).; EX for excitation.; VAL for valence.; GEOM (not geo, not geometry).; SYM (not symm, not symmetry).; FILE (unless truly multiple FILES).; WRITE/READ for info transfer across jobs. SAVE/RESTART; for same in context of restart.; Damping should interface through option (double) DAMPING_PERCENTAGE,; where a value of 0.0 indicates no damping.; Try to avoid COMPUTE or CALC in an option name. If it’s a; boolean like “opdm_compute” for “Do compute the one-particle density; matrix”, just use OPDM.; Properties should be governed by a PROPERTIES array for the root of; interest or by a PROPERTIES_ALL array for all roots in a multi-root; calc. Since no module conforms to this right now, use PROPERTY; alone and PROP in multi-part option as PROP_ROOT, PROP_ALL,; PROP_SYM to conform.; Use DF (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that’s what; EMSL uses. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else; How to name keywords in psi4/src/read_options.cc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Managing: Git, Conda, CMake and all that; Adding Add-Ons. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_addon.html:11488,test,testing,11488,psi4manual/1.9.x/manage_addon.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_addon.html,1,['test'],['testing']
Testability,"f extent.lower() == 'long':; pass; if extras is not None:; command.extend(extras); command.extend(['--capture=sys', abs_test_dir]). retcode = pytest.main(command); return retcode. [docs]def set_output_file(ofile: str, append: bool = False, *, loglevel: int = 20, execute: bool = True) -> Path:; """"""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""; out = Path(ofile); log = out.with_suffix("".log""). # Get the custom logger; import logging; from psi4 import logger; logger.setLevel(loglevel). # Create formatters; # * detailed: example: 2019-11-20:01:13:46,811 DEBUG [psi4.driver.task_base:156]; f_format_detailed = logging.Formatter(""%(asctime)s,%(msecs)d %(levelname)-8s [%(name)s:%(lineno)d] %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""); # * light: example: 2019-11-20:10:45:21 FINDIFREC CLASS INIT DATA; f_format_light = logging.Formatter(""%(asctime)s %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""). # Create handlers, add formatters to handlers, and add handlers to logger (StreamHandler() also available); filemode = ""a"" if append else ""w""; f_handler = logging.FileHandler(log, filemode); f_handler.setLevel(logging.DEBUG); f_handler.setFormatter(f_format_detailed). if execute:; core.set_output_file(str(out), append); # Warning: baseFilename is not part of the documented API for the logging mod",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/extras.html:7921,log,logging,7921,psi4manual/1.7.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/extras.html,2,['log'],['logging']
Testability,"f input formats, references from psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/sp-rhf-scf; sing",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_cfour.html:1627,test,testing,1627,psi4manual/1.9.x/autodoc_testsuite_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_cfour.html,1,['test'],['testing']
Testability,"f interaction energies for bimolecular complexes.; Geometries and reference interaction energies from Rezac et al. JCTC 7 2427 (2011).; Note that the S66by8-N-1.0 members are not quite the same geometries as S66-N. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HB' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve hydrogen-bonded systems; 'MX' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve mixed-influence systems; 'DD' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve dispersion-dominated systems. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. O24by5mb¶. Database (O24) of interaction energies for small open-shell high-spin bimolecular complexes.; Geometries taken from https://gitlab.com/piotr.zuchowski/o24x5/-/tree/4ec3cae0546b6ae4f4f2cf28482cd164c8323cc6.; Reference interaction energies taken from J. Chem. Phys. 154, 134106 (2021) https://doi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_available_databases.html:1551,test,testing,1551,psi4manual/1.8.x/autodoc_available_databases.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_available_databases.html,2,['test'],['testing']
Testability,"f not the last molecule defined. Validated by:. set_molecule. field nbodies_per_mc_level: List[List[Union[int, Literal['supersystem']]]] = []¶; Distribution of active n-body levels among model chemistry levels. All bodies in range [1, self.max_nbody] must be present exactly once. Number of items in outer list is how many different modelchems. Each inner list specifies what n-bodies to be run at the corresponding modelchem (e.g., [[1, 2]] has max_nbody=2 and 1-body and 2-body contributions computed at the same level of theory; [[1], [2]] has max_nbody=2 and 1-body and 2-body contributions computed at different levels of theory. An entry ‘supersystem’ means all higher order n-body effects up to the number of fragments. The n-body levels are effectively sorted in the outer list, and any ‘supersystem’ element is at the end. field nfragments: int = -1¶; Number of distinct fragments comprising full molecular supersystem. Validated by:. set_nfragments. field quiet: bool = False¶; Whether to print/log formatted n-body energy analysis. Presently used by multi to suppress output. Candidate for removal from class once in-class/out-of-class functions sorted. field return_total_data: Optional[bool] = None¶; When True, returns the total data (energy/gradient/Hessian) of the system, otherwise returns interaction data. Default is False for energies, True for gradients and Hessians. Note that the calculation of total counterpoise corrected energies implies the calculation of the energies of monomers in the monomer basis, hence specifying return_total_data = True may carry out more computations than return_total_data = False. Validated by:. set_return_total_data. field task_list: Dict[str, Union[AtomicComputer, CompositeComputer, FiniteDifferenceComputer]] = {}¶. build_tasks(mb_computer, mc_level_idx, **kwargs)[source]¶; Adds to the task_list as many new unique tasks as necessary to treat a single model chemistry level at one or several n-body levels.; New tasks are of type mb_compute",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/nbody.html:14355,log,log,14355,psi4manual/1.7.x/nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/nbody.html,4,['log'],['log']
Testability,"f self.result_id in r.existing:; ret = client.query_tasks(base_result=self.result_id); if ret:; if ret[0].status == ""ERROR"":; client.modify_tasks(""restart"", base_result=self.result_id); logger.info(""Resubmitting Errored Job {}"".format(self.result_id)); elif ret[0].status == ""COMPLETE"":; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Submitting AtomicResult {}"".format(self.result_id)). else:; # QCFractal `next`. meta, ids = client.add_singlepoints(; molecules=mol,; program=""psi4"",; driver=self.driver,; method=self.method,; basis=self.basis,; keywords=self.keywords,; protocols=self.protocols,; tag=self.tag,; priority=self.priority,; owner_group=self.owner_group,; ); self.result_id = ids[0]; # NOTE: The following will re-run errored jobs by default; if meta.existing_idx:; rec = client.get_singlepoints(self.result_id); if rec.status == ""error"":; client.reset_records(self.result_id); logger.info(""Resubmitting Errored Job {}"".format(self.result_id)); elif rec.status == ""complete"":; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Submitting AtomicResult {}"".format(self.result_id)). return. logger.info(f'<<< JSON launch ... {self.molecule.schoenflies_symbol()} {self.molecule.nuclear_repulsion_energy()}'); gof = core.get_output_file(). # EITHER ...; # from psi4.driver import schema_wrapper; # self.result = schema_wrapper.run_qcschema(self.plan()); # ... OR ...; self.result = qcng.compute(; self.plan(),; ""psi4"",; raise_error=True,; # local_options below suitable for serial mode where each job takes all the resources of the parent Psi4 job.; # distributed runs through QCFractal will likely need a different setup.; task_config={; # B -> GiB; ""memory"": core.get_memory() / (2 ** 30),; ""ncores"": core.get_num_threads(),; },; ); # ... END. #pp.pprint(self.result.dict()); #print(""... JSON returns >>>""); core.set_output_file(gof, True); co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/task_base.html:6231,log,logger,6231,psi4manual/1.8.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/task_base.html,2,['log'],['logger']
Testability,"f set_output_file(; ofile: str,; append: bool = False,; *,; loglevel: int = 20,; execute: bool = True,; print_header: Optional[bool] = None,; inherit_loglevel: bool = False) -> Path:; """"""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""; out = Path(ofile); log = out.with_suffix("".log""). # Get the custom logger; import logging. from psi4 import logger; if not inherit_loglevel:; logger.setLevel(loglevel). # Create formatters; # * detailed: example: 2019-11-20:01:13:46,811 DEBUG [psi4.driver.task_base:156]; f_format_detailed = logging.Formatter(""%(asctime)s,%(msecs)d %(levelname)-8s [%(name)s:%(lineno)d] %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""); # * light: example: 2019-11-20:10:45:21 FINDIFREC CLASS INIT DATA; f_format_light = logging.Formatter(""%(asctime)s %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""). # Create handlers, add formatters to handlers, and add handlers to logger (StreamHandler() also available); filemode = ""a"" if append else ""w""; f_handler = loggin",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html:8666,log,logger,8666,psi4manual/1.9.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html,4,['log'],['logger']
Testability,"f set_output_file(; ofile: str,; append: bool = False,; *,; loglevel: int = 20,; execute: bool = True,; print_header: Optional[bool] = None,; inherit_loglevel: bool = False) -> Path:; """"""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""; out = Path(ofile); log = out.with_suffix("".log""). # Get the custom logger; import logging; from psi4 import logger; if not inherit_loglevel:; logger.setLevel(loglevel). # Create formatters; # * detailed: example: 2019-11-20:01:13:46,811 DEBUG [psi4.driver.task_base:156]; f_format_detailed = logging.Formatter(""%(asctime)s,%(msecs)d %(levelname)-8s [%(name)s:%(lineno)d] %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""); # * light: example: 2019-11-20:10:45:21 FINDIFREC CLASS INIT DATA; f_format_light = logging.Formatter(""%(asctime)s %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""). # Create handlers, add formatters to handlers, and add handlers to logger (StreamHandler() also available); filemode = ""a"" if append else ""w""; f_handler = loggin",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html:8615,log,logger,8615,psi4manual/1.8.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html,2,['log'],['logger']
Testability,"f the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. mints15; check SP basis Fortran exponent parsing. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. scf-occ; force occupations in scf. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-custom; DFT custom functional test. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc52; CCSD Response for H2O2. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:25934,test,test,25934,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"f the the guess read in the same basis converges. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. ao-dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. cc52; CCSD Response for H2O2. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mbis-3; MBIS calculation on OH radical. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cisd-sp; 6-31G** H2O Test CISD Energy Point. cbs-xtpl-alpha; Extrapolated water energies. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. cc13b; Tests RHF CCSD(T)gradients. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). mbis-4; MBIS calculation on NaCl. numpy-array-interface; Numpy interface testing. props1; RHF STO-3G dipole moment computation, per",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:15562,test,test,15562,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"f' : run_scf,; 'rscf' : run_scf,; 'uscf' : run_scf,; 'roscf' : run_scf,; 'qcisd' : run_fnocc,; 'qcisd(t)' : run_fnocc,; 'mp4(sdq)' : run_fnocc,; 'fno-ccsd' : run_fnocc,; 'fno-ccsd(t)' : run_fnocc,; 'fno-qcisd' : run_fnocc,; 'fno-qcisd(t)' : run_fnocc,; 'fno-mp3' : run_fnocc,; 'fno-mp4(sdq)' : run_fnocc,; 'fno-mp4' : run_fnocc,; 'fnocc-mp' : run_fnocc,; 'df-ccsd' : run_fnodfcc,; 'df-ccsd(t)' : run_fnodfcc,; 'fno-df-ccsd' : run_fnodfcc,; 'fno-df-ccsd(t)': run_fnodfcc,; 'fno-cepa(0)' : run_cepa,; 'fno-cepa(1)' : run_cepa,; 'fno-cepa(3)' : run_cepa,; 'fno-acpf' : run_cepa,; 'fno-aqcc' : run_cepa,; 'fno-sdci' : run_cepa,; 'fno-dci' : run_cepa,; 'cepa(0)' : run_cepa,; 'cepa(1)' : run_cepa,; 'cepa(3)' : run_cepa,; 'acpf' : run_cepa,; 'aqcc' : run_cepa,; 'sdci' : run_cepa,; 'dci' : run_cepa,; # Upon adding a method to this list, add it to the docstring in energy() below; # If you must add an alias to this list (e.g., dfmp2/df-mp2), please search the; # whole driver to find uses of name in return values and psi variables and; # extend the logic to encompass the new alias.; },; 'gradient' : {; 'scf' : run_scf_gradient,; 'ccsd' : run_cc_gradient,; 'ccsd(t)' : run_cc_gradient,; 'mp2' : run_mp2_select_gradient,; 'conv-mp2' : run_mp2_gradient,; 'df-mp2' : run_dfmp2_gradient,; 'dfmp2' : run_dfmp2_gradient,; 'eom-ccsd' : run_eom_cc_gradient,; 'dcft' : run_dcft_gradient,; 'omp2' : run_omp2_gradient,; 'omp3' : run_omp3_gradient,; 'mp3' : run_mp3_gradient,; 'mp2.5' : run_mp2_5_gradient,; 'omp2.5' : run_omp2_5_gradient,; 'cepa0' : run_cepa0_gradient,; 'ocepa' : run_ocepa_gradient; # Upon adding a method to this list, add it to the docstring in optimize() below; },; 'hessian' : {; # Upon adding a method to this list, add it to the docstring in frequency() below; },; 'property' : {; 'scf' : run_scf_property,; 'cc2' : run_cc_property,; 'ccsd' : run_cc_property,; 'df-mp2' : run_dfmp2_property,; 'dfmp2' : run_dfmp2_property,; 'eom-cc2' : run_cc_property,; 'eom-ccsd' : run_cc_property,; # Up",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/driver.html:3826,log,logic,3826,psi4manual/4.0b4/_modules/driver.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/driver.html,4,['log'],['logic']
Testability,"f'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark. 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; \(\Rightarrow\) 'HBC6A' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset. 'small'; 'large'; 'equilibrium' equilibrium points for the six systems; 'FaOOFaOO' dissociation curve for formic acid dimer; 'FaONFaON' dissociation curve for formamide dimer; 'FaNNFaNN' dissociation curve for formamidine dimer; 'FaOOFaON' dissociation curve for formic acid- formamide complex; 'FaONFaNN' dissociation curve for formamide- formamidine complex; 'FaOOFaNN' dissociation curve for formic acid- formamidine complex. RGC10¶. Database (Sherrill) of interaction energies for dissociation curves of rare-gas biatomic complexes.; Geometries and reference interaction energies from Tang et al. JCP 118 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HeHe' 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_available_databases.html:11270,benchmark,benchmark,11270,psi4manual/1.8.x/autodoc_available_databases.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_available_databases.html,2,['benchmark'],['benchmark']
Testability,"f) != len(calc):; raise ValidationError(f""These two molden files have different lengths...\n""). high_accuracy = atol_exponent; index = 0; max_len = len(calc); tests = []; section = 0. geom_re = re.compile(r'^\s*(\w*)\s+(\d+)\s+(\d+)\s+(-?\d+.\d+)\s+(-?\d+.\d+)\s+(-?\d+.\d+)\s*$'); basis_header_re = re.compile(r'^\s*([s,p,d,f,g])\s*(\d*)\s*(\d*.\d*)\s*$'); s1_re = re.compile(r'^\s*(\d+.?\d*)\s+(\d+.?\d*)$'); s2_re = re.compile(r'^\s*(\d+)\s+(-?\d+.\d+[e,E][\+,-]\d+)\s*$'); sym_re = re.compile(r'^\s*Sym\s*=\s*(\w*)\s*$'); energy_re = re.compile(r'^\s*Ene\s*=\s*(-?\d*.?\d*[e,E]?\+?-?\d*)\s*$'); spin_re = re.compile(r'^\s*Spin\s*=\s*(\w*)\s*$'); occ_re = re.compile(r'^\s*Occup\s*=\s*(-?\d*.\d*[e,E]?-?\+?\d*)\s*$'). for i in range(max_len):; line = calc[i]. if geom_re.match(line):; c1, c2, c3, c4, c5, c6 = geom_re.match(line).groups(); r1, r2, r3, r4, r5, r6 = geom_re.match(line).groups(); test = compare_strings(r1, c1) and compare_integers(r2, c2) and compare_integers(r3, c3) and compare_values(r4, c4, high_accuracy) and compare_values(r5, c5, high_accuracy) and compare_values(r6, c6, high_accuracy). elif basis_header_re.match(line):; c1, c2, c3 = basis_header_re.match(line).groups(); r1, r2, r3 = basis_header_re.match(ref[i]).groups(); test = compare_strings(r1,c1) and compare_integers(r2,c2) and compare_values(r3,c3,3). elif s1_re.match(line):; c1, c2 = s1_re.match(line).groups(); r1, r2 = s1_re.match(ref[i]).groups(); test = compare_values(r1, c1, high_accuracy) and compare_values(r2, c2, high_accuracy). elif sym_re.match(line):; c = sym_re.match(line).group(1); r = sym_re.match(ref[i]).group(1); test = compare_strings(r, c, f'text line: {line}'). elif energy_re.match(line):; c = energy_re.match(line).group(1); r = energy_re.match(ref[i]).group(1); test = compare_values(r, c, high_accuracy, f'float value: {line}'). elif spin_re.match(line):; c = spin_re.match(line).group(1); r = spin_re.match(ref[i]).group(1); test = compare_strings(r, c, f'text line: {line}'). elif o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html:7249,test,test,7249,psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html,10,['test'],['test']
Testability,"f-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. fnocc2; Test G2 method for H2O. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. mints15; check SP basis Fortran exponent parsing. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. dft-dsd; DSD S22 Ammonia test. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. scf-auto-cholesky; Cholesky filter a complete basis. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. omp3-3; OMP3 cc-pCVD",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:35614,test,test,35614,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"f.metameta['proxy_driver'] = 'energy'; self.findifrec = gradient_from_energies_geometries(self.molecule,; stencil_size=findif_stencil_size,; step_size=findif_step_size,; t_project=translations_projection_sound,; r_project=r_project_grad). elif self.metameta['mode'] == '2_1':; self.metameta['proxy_driver'] = 'gradient'; self.findifrec = hessian_from_gradients_geometries(self.molecule,; freq_irrep_only=self.metameta['irrep'],; stencil_size=findif_stencil_size,; step_size=findif_step_size,; t_project=translations_projection_sound,; r_project=r_project_hess). elif self.metameta['mode'] == '2_0':; self.metameta['proxy_driver'] = 'energy'; self.findifrec = hessian_from_energies_geometries(self.molecule,; freq_irrep_only=self.metameta['irrep'],; stencil_size=findif_stencil_size,; step_size=findif_step_size,; t_project=translations_projection_sound,; r_project=r_project_hess). ndisp = len(self.findifrec[""displacements""]) + 1; info = f"""""" {ndisp} displacements needed ...\n""""""; core.print_out(info); logger.debug(info). # var_dict = core.variables(); packet = {; ""molecule"": self.molecule,; ""driver"": self.metameta['proxy_driver'],; ""method"": self.method,; ""basis"": data[""basis""],; ""keywords"": data[""keywords""] or {},; }; if 'cbs_metadata' in data:; packet['cbs_metadata'] = data['cbs_metadata']; passalong = {k: v for k, v in data.items() if k not in packet}; passalong.pop('ptype', None). self.task_list[""reference""] = self.computer(**packet, **passalong). parent_group = self.molecule.point_group(); for label, displacement in self.findifrec[""displacements""].items():; clone = self.molecule.clone(); clone.reinterpret_coordentry(False); #clone.fix_orientation(True). # Load in displacement into the active molecule; clone.set_geometry(core.Matrix.from_array(displacement[""geometry""])). # If the user insists on symmetry, weaken it if some is lost when displacing.; # or 'fix_symmetry' in self.findifrec.molecule; logger.debug(f'SYMM {clone.schoenflies_symbol()}'); if self.molecule.symmetry_f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html:44188,log,logger,44188,psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,8,['log'],['logger']
Testability,"f.result_id = r.ids[0]; # NOTE: The following will re-run errored jobs by default; if self.result_id in r.existing:; ret = client.query_tasks(base_result=self.result_id); if ret:; if ret[0].status == ""ERROR"":; client.modify_tasks(""restart"", base_result=self.result_id); logger.info(""Resubmitting Errored Job {}"".format(self.result_id)); elif ret[0].status == ""COMPLETE"":; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Submitting AtomicResult {}"".format(self.result_id)). else:; # QCFractal `next`. meta, ids = client.add_singlepoints(; molecules=mol,; program=""psi4"",; driver=self.driver,; method=self.method,; basis=self.basis,; keywords=self.keywords,; # protocols,; ); self.result_id = ids[0]; # NOTE: The following will re-run errored jobs by default; if meta.existing_idx:; rec = client.get_singlepoints(self.result_id); if rec.status == ""error"":; client.reset_records(self.result_id); logger.info(""Resubmitting Errored Job {}"".format(self.result_id)); elif rec.status == ""complete"":; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Submitting AtomicResult {}"".format(self.result_id)). return. logger.info(f'<<< JSON launch ... {self.molecule.schoenflies_symbol()} {self.molecule.nuclear_repulsion_energy()}'); gof = core.get_output_file(). # EITHER ...; # from psi4.driver import schema_wrapper; # self.result = schema_wrapper.run_qcschema(self.plan()); # ... OR ...; self.result = qcng.compute(; self.plan(),; ""psi4"",; raise_error=True,; # local_options below suitable for serial mode where each job takes all the resources of the parent Psi4 job.; # distributed runs through QCFractal will likely need a different setup.; task_config={; # B -> GiB; ""memory"": core.get_memory() / (2 ** 30),; ""ncores"": core.get_num_threads(),; },; ); # ... END. #pp.pprint(self.result.dict()); #print(""... JSON returns >>>""); core.set_output_file(gof, True); co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_base.html:5539,log,logger,5539,psi4manual/1.7.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_base.html,2,['log'],['logger']
Testability,"f; DSD-PBEP86 S22 Ammonia test. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. dlpnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. scf-level-shift-cuhf; SCF level shift on a CUHF computation. cubeprop; RHF orbitals and density for water. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. fsapt-ext-abc2; FSAPT with external charge on dimer. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. pywrap-db3; Test that Python Molecule class processes geometry like",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:11175,test,test,11175,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"fep2-1; Compute three IP and 2 EA’s for the PH3 molecule. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. remp-energy2; integral conventional unrestricted REMP/cc-pVDZ energies for the H2O+ molecule. results were independently verified against the initial wavels implementation. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-guess-read2; Test if the the guess read in the same basis converges. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-ext-abc; FSAPT with external charge on trimer. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft1; DFT Functional Test all values update for new BraggSlater radii. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmet",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:36311,test,test,36311,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"fference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. scf6; Tests RHF/ROHF/UHF SCF gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. cbs-xtpl-alpha; Extrapolated water energies. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom; DFT custom functional test. dft2; DFT Functional Test. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cepa-module; routing check on lccd, lccsd, cepa(0). dct12; Spin-restricted DC-06 counterpart of dct1. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. ddd-function-kwargs; check distributed driver is correctly passing function kwargs. numpy-array-interface; Numpy interface testing. cc54; CCSD dipole with user-specified basis set. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dft-dens-cut; LibXC density screening te",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:15418,test,test,15418,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"fference tests Tests UHF hessian code for Ca != Cb. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. scf-response3; UHF Dipole Polarizability Test. ddd-deriv; Sample HF/cc-pVDZ H2O computation all derivatives. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. scf-coverage; Lithium test for coverage. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. cbs-parser; mtd/basis syntax examples. casscf-fzc-sp; CASSCF/6-31G** energy point. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. cbs-xtpl-func; optimization with method defined via cbs. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cbs-xtpl-energy; Extrapolated water energies - density-fitted version. nbody-convergence; Convergence of many-body gradients of different BSSE schemes.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:4670,test,test,4670,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"fically. write_eigenvalues(eigs, mo_idx); Prepare multi-line string with one-particle eigenvalues to be written to the FCIDUMP file. Classes¶. CSXError(msg); Error called when CSX generation fails. ConvergenceError(eqn_description, iteration); Error called for problems with converging an iterative method. Dftd3Error(msg). EmpiricalDispersion(*[, name_hint, …]); Lightweight unification of empirical dispersion calculation modes. ManagedMethodError(circs). MissingMethodError(msg); Error called when method not available. OptimizationConvergenceError(…); Error called for problems with geometry optimizer. ParsingError(msg); Error called for problems parsing a text file. PastureRequiredError(option); Error called when the specified value of option requires some module(s) from Psi4Pasture, but could not be imported. PsiException; Error class for Psi. PsiImportError(msg); Error called for problems import python dependencies. QMMM(). SCFConvergenceError(eqn_description, …); Error called for problems with SCF iterations. TDSCFConvergenceError(iteration, wfn, what, …); Error called for problems with TDSCF iterations. Table([rows, row_label_width, …]); Class defining a flexible Table object for storing data. TestComparisonError(msg); Error called when a test case fails due to a failed compare_values() call. UpgradeHelper(old, new, version, elaboration); Error called on previously valid syntax that now isn’t and a simple syntax transition is possible. ValidationError(msg); Error called for problems with the input file. Class Inheritance Diagram¶. table of contents. PSI4 API: Linking C++ and Python; psi4.core Module; Functions; Classes; Class Inheritance Diagram. psi4.driver Package; Functions; Classes; Class Inheritance Diagram. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/psi4api-1.html:22603,test,test,22603,psi4manual/1.4.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/psi4api-1.html,2,['test'],['test']
Testability,"fied explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:15201,test,tests,15201,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['tests']
Testability,"fied using Cartesian coordinates. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. soscf2; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/testsuite-1.html:4501,test,tests,4501,psi4manual/1.1.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/testsuite-1.html,4,['test'],['tests']
Testability,"figure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”; How to fix error “RuntimeError: value for ERI”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Installation and Runtime Configuration. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_faq-1.html:3949,log,logo,3949,psi4manual/1.3.2/build_faq-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_faq-1.html,2,['log'],['logo']
Testability,"file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. __all__ = [; ""ipi_broker"",; ""IPIBroker"",; ]. import sys; import time; from typing import Dict, Optional, Union. import numpy as np. import psi4. try:; from ipi.interfaces.clients import Client; ipi_available = True; except ImportError:; ipi_available = False. # Define Client to enable testing of the Broker in the unittests; class Client():; pass. [docs]; class IPIBroker(Client):; """"""Interface implementation between i-PI (https://ipi-code.org/) and |PSIfour|."""""". def __init__(self, LOT, options=None, serverdata=False, molecule=None):; self.serverdata = serverdata; if not ipi_available:; psi4.core.print_out(""i-pi is not available for import: ""); psi4.core.print_out(""The broker infrastructure will not be available!\n""); super(IPIBroker, self).__init__(); elif serverdata:; mode, address, port = serverdata.split("":""); mode = mode.lower(); super(IPIBroker, self).__init__(address=address, port=port, mode=mode); else:; super(IPIBroker, self).__init__(_socket=False); self.LOT = LOT; self.options = options if options else {}. if molecule is None:; molecule = psi4.core.get_active_molecule(); self.initial_molecule = molecule; assert self.initial_molecule.orientation_fixed(), ""Orientation must be fixed!""; assert self.initial_molecule.point_group().symbol() == ""c1"", ""Symmetry must be 'c1'!"". names",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/ipi_broker.html:1389,test,testing,1389,psi4manual/1.9.x/_modules/psi4/driver/ipi_broker.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/ipi_broker.html,4,['test'],['testing']
Testability,"file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. __all__ = [; ""ipi_broker"",; ""IPIBroker"",; ]. import sys; import time; from typing import Dict, Optional, Union. import numpy as np. import psi4; try:; from ipi.interfaces.clients import Client; ipi_available = True; except ImportError:; ipi_available = False. # Define Client to enable testing of the Broker in the unittests; class Client():; pass. [docs]; class IPIBroker(Client):; """"""Interface implementation between i-PI (https://ipi-code.org/) and |PSIfour|."""""". def __init__(self, LOT, options=None, serverdata=False, molecule=None):; self.serverdata = serverdata; if not ipi_available:; psi4.core.print_out(""i-pi is not available for import: ""); psi4.core.print_out(""The broker infrastructure will not be available!\n""); super(IPIBroker, self).__init__(); elif serverdata:; mode, address, port = serverdata.split("":""); mode = mode.lower(); super(IPIBroker, self).__init__(address=address, port=port, mode=mode); else:; super(IPIBroker, self).__init__(_socket=False); self.LOT = LOT; self.options = options if options else {}. if molecule is None:; molecule = psi4.core.get_active_molecule(); self.initial_molecule = molecule; assert self.initial_molecule.orientation_fixed(), ""Orientation must be fixed!""; assert self.initial_molecule.point_group().symbol() == ""c1"", ""Symmetry must be 'c1'!"". names",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/ipi_broker.html:1389,test,testing,1389,psi4manual/1.8.x/_modules/psi4/driver/ipi_broker.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/ipi_broker.html,2,['test'],['testing']
Testability,"file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. __all__ = [; ""ipi_broker"",; ""IPIBroker"",; ]. import sys; import time; from typing import Dict, Optional, Union. import numpy as np. import psi4; try:; from ipi.interfaces.clients import Client; ipi_available = True; except ImportError:; ipi_available = False. # Define Client to enable testing of the Broker in the unittests; class Client():; pass. [docs]class IPIBroker(Client):; """"""Interface implementation between i-PI (https://ipi-code.org/) and |PSIfour|."""""". def __init__(self, LOT, options=None, serverdata=False, molecule=None):; self.serverdata = serverdata; if not ipi_available:; psi4.core.print_out(""i-pi is not available for import: ""); psi4.core.print_out(""The broker infrastructure will not be available!\n""); super(IPIBroker, self).__init__(); elif serverdata:; mode, address, port = serverdata.split("":""); mode = mode.lower(); super(IPIBroker, self).__init__(address=address, port=port, mode=mode); else:; super(IPIBroker, self).__init__(_socket=False); self.LOT = LOT; self.options = options if options else {}. if molecule is None:; molecule = psi4.core.get_active_molecule(); self.initial_molecule = molecule; assert self.initial_molecule.orientation_fixed(), ""Orientation must be fixed!""; assert self.initial_molecule.point_group().symbol() == ""c1"", ""Symmetry must be 'c1'!"". names =",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/ipi_broker.html:1387,test,testing,1387,psi4manual/1.7.x/_modules/psi4/driver/ipi_broker.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/ipi_broker.html,2,['test'],['testing']
Testability,"file length! \n'). index = 0; max_length = len(fchk_calc); tests = []; for start in range(max_length):; if index >= max_length:; break; line = fchk_calc[index]; if ""N="" in line:; offset, calc = _consume_fchk_section(fchk_calc, index); _, ref = _consume_fchk_section(fchk_ref, index); if any(x in line for x in sensitive):; test = compare_arrays(ref, calc, low_accuracy, f"" matrix section: {line}""); else:; test = compare_arrays(ref, calc, high_accuracy, f"" matrix section: {line}""); index += offset; elif "" R "" in line and ""N="" not in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_values(ref, calc, high_accuracy, f"" float value: {line}""); index += 1; elif "" I "" in line and ""N="" not in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_integers(ref, calc, f"" int value: {line}""); index += 1; else:; test = compare_strings(fchk_ref[index], line, f""FCK text line {index+1}.""); index += 1; tests.append(test). return compare_integers(True, all(tests), label). [docs]; def compare_moldenfiles(; expected: str,; computed: str,; atol_exponent: Union[int, float] = 1.e-7,; label: str = ""Compare Molden""):; """"""Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters; ----------; expected; Path to reference Molden file against which `computed` is compared.; computed; Path to input Molden file to compare against `expected`.; atol_exponent; Absolute tolerance for high accuracy fields -- 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; l",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/fchk.html:5157,test,tests,5157,psi4manual/1.8.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/fchk.html,6,['test'],['tests']
Testability,"file length! \n'). index = 0; max_length = len(fchk_calc); tests = []; for start in range(max_length):; if index >= max_length:; break; line = fchk_calc[index]; if ""N="" in line:; offset, calc = _consume_fchk_section(fchk_calc, index); _, ref = _consume_fchk_section(fchk_ref, index); if any(x in line for x in sensitive):; test = compare_arrays(ref, calc, low_accuracy, f"" matrix section: {line}""); else:; test = compare_arrays(ref, calc, high_accuracy, f"" matrix section: {line}""); index += offset; elif "" R "" in line and ""N="" not in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_values(ref, calc, high_accuracy, f"" float value: {line}""); index += 1; elif "" I "" in line and ""N="" not in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_integers(ref, calc, f"" int value: {line}""); index += 1; else:; test = compare_strings(fchk_ref[index], line, f""FCK text line {index+1}.""); index += 1; tests.append(test). return compare_integers(True, all(tests), label). [docs]def compare_moldenfiles(; expected: str,; computed: str,; atol_exponent: Union[int, float] = 1.e-7,; label: str = ""Compare Molden""):; """"""Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters; ----------; expected; Path to reference Molden file against which `computed` is compared.; computed; Path to input Molden file to compare against `expected`.; atol_exponent; Absolute tolerance for high accuracy fields -- 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; lab",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/fchk.html:5153,test,tests,5153,psi4manual/1.7.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/fchk.html,2,['test'],['tests']
Testability,"file length! \n'). index = 0; max_length = len(fchk_calc); tests = []; for start in range(max_length):; if index >= max_length:; break; line = fchk_calc[index]; if ""N="" in line:; offset, calc = _consume_fchk_section(fchk_calc, index); _, ref = _consume_fchk_section(fchk_ref, index); if any(x in line for x in sensitive):; test = compare_arrays(ref, calc, low_accuracy, f"" matrix section: {line}""); else:; test = compare_arrays(ref, calc, high_accuracy, f"" matrix section: {line}""); index += offset; elif "" R "" in line and ""N="" not in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_values(ref, calc, high_accuracy, f"" float value: {line}""); index += 1; elif "" I "" in line and ""N="" not in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_integers(ref, calc, f"" int value: {line}""); index += 1; else:; test = compare_strings(line, fchk_ref[index], f""FCK text line {index+1}.""); index += 1; tests.append(test). return compare_integers(True, all(tests), label). [docs]def compare_moldenfiles(expected, computed, atol_exponent=7, label=""Compare Molden""):; """"""Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters; ----------; expected : file; Reference Molden file against which `computed` is compared.; computed : file; Input Molden file to compare against `expected`.; atol_exponent : int or float; Absolute tolerance for high accuracy fields -- 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; label : str; Label for passed and err",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html:5118,test,tests,5118,psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html,2,['test'],['tests']
Testability,"file__).; This uses QCEngine machinery to execute python psi4 input.dat.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files do need to be registered in psi4/psi4/CMakeLists.txt.; Finally, the label string passed to CTest is here handed to pytest, with a few changes:. psi added automatically, so exclude it when copying from CTest CMakeLists.txt; cli added automatically to distinguish CTest origin from deliberate pytest origin, which have api added; smoke used instead of CTest smoketests; quick used instead of CTest quicktests; long used instead of CTest longtests; addon and <name-of-addon> added automatically when @uusing(""<name-of-addon>"") decorates the test or marks=using(""<name-of-addon>"") marks the test. CTest “labels” are called “marks” in pytest.; Any new marks should be added to psi4/pytest.ini. Running for Debugging¶. PSIthon tests that don’t need extra files to run are easily run from <objdir> via stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out.; All PSIthon tests are runable through CTest, and output files appear in <objdir>/tests/<test-name>/output.dat and stdout results appear in <objdir>/Testing/Temporary/LastTest.log*. Adding PsiAPI Test Cases¶; To create a new test case, either create a new file or add to an existing file under psi4/tests/pytests. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; A test file may contain many tests, each of which is an ordinary Python function with name starting test_. This is how pytest knows to collect it.; No registration required to bring a test to pytest’s attention.; No registration required to bring a test to CMake’s attention. If a test needs additional files, register them in psi4/psi4/CMakeLists.txt. A few notes on test contents:. Import testing functions fro",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:10498,test,tests,10498,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['test'],['tests']
Testability,"final line plugin(""./myplugin.so"") to call the plugin code after; any necessary preparatory modules (here, scf) have been run. pymodule.py — Python component of the plugin. The procedure; for calling plugin code shown in input.dat sounds very simple, but it; can be made simpler still. By encoding the sequence of PSI4 module; calls needed to run the plugin in the run_myplugin() function in this; file, the plugin is hooked into the main PSI4 driver function; energy() and so can be accessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file. __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section as modeled in; psi4/tests/plugin_libcim/__init__.py).; """"""Plugin docstring. """"""; __version__ = '0.1'; __author__ = 'Psi4 Developer'. # Load Python modules; from pymodule import *. # Load C++ plugin; import os; import PsiMod; plugdir = os.path.split(os.path.abspath(__file__))[0]; sofile = plugdir + '/' + os.path.split(plugdir)[1] + '.so'; PsiMod.plugin_load(sofile). inputalt.dat — Sample input file for the plugin (new style).; Since the __init__.py file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be included in PYTHONPATH,; either externally in the calling shell or defined in the input file. Then,; the plugin can be loaded as import myplugin and executed as; energy('myplugin'). Any other Python functions are also available from; the input file, e.g. myplugin.testfunction(), note the namespace; protection. doc.rst — Documentation file.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/plugins-1.html:5942,test,tests,5942,psi4manual/4.0b2/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins-1.html,4,['test'],['tests']
Testability,"fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:32120,test,test,32120,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"fmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. scf3; File retention, docc, socc, and bond distances specified explicitly. options1; check all variety of options parsing. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. pywrap-cbs1; Various basis set extrapolation tests. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. freq-masses; check nonphysical masses possible. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. scf-cholesky-basis; incremental Cholesky filtered SCF. rasci-h2o; RASCI/6-31G** H2O Energy Point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. props4; Electrostatic potential and electric field evaluated on a grid around water. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cepa1; cc-pvdz H2O Test CEPA(1) Energy. psimrcc-pt2; Mk-MRPT",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:2377,test,tests,2377,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['tests']
Testability,"following two uncommented lines:; include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ctest -L label purposes. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; If a test needs extra input files like grid.dat or extra reference files for checking against, like fchk, specify these in the CMakeLists.txt as shown above. Such tests must be run through ctest and don’t usually work when run “by hand” from the objdir via stage/bin/psi4 ../tests/directory_name/input.dat.; If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the COST line as shown above to set a weighting to about the number of seconds the test takes. input.dat¶; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:6145,test,test,6145,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['test'],['test']
Testability,"for Ca != Cb. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. sapt-ecp; sapt0 of charged system in ECP basis set. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). sapt10; usapt example with empty beta due to frozen core. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. fnocc2; Test G2 method for H2O. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. mints15; check SP basis Fortran exponent parsing. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:34688,test,test,34688,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"for LRC functional wB97 on water. frac-sym; Fractional occupation with symmetry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt-ecp; sapt0 of charged system in ECP basis set. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfremp-1; density fitted REMP/cc-pVDZ energies for the CO2 molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. aediis-2; EDIIS test case from 10.1063/1.1470195. scf-response3; UHF Dipole Polarizability Test. mom-h2o-3; MOM excitation from LUMO HOMO+3. extern3; External potential calculation with",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:33938,test,testing,33938,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['testing']
Testability,"for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 1; …; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 22. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani et al. PCCP 9 6106 (2007).; Pyridine Dimers from Hohenstein et al. JPCA 113 878 (2009).; Collection into NBC10 from Burns et al. JCP 134 084107 (2011).; Revised reference interaction energies (NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'NBC100' Burns et al. JCP 134 084107 (2011).; \(\Rightarrow\) 'NBC10A' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised refere",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_available_databases.html:5008,benchmark,benchmark,5008,psi4manual/1.7.x/autodoc_available_databases.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_available_databases.html,2,['benchmark'],['benchmark']
Testability,"for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. cc13d; Tests analytic CC2 gradients. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. scf3; File retention, docc, socc, and bond distances specified explicitly. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. An F-SAPT partitioning follows I-SAPT. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. dforemp-grad1; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O molecule. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. aediis-1; ADIIS test case, from 10.1063/1.3304922. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. scf-guess-read2; Test if the the guess read in the same basis converges. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:42265,test,test,42265,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"for axis in [item for item in pieces if item.startswith('AXIS_')]:; label = axis.replace('AXIS_', ''); try:; defn = getattr(database, axis); except AttributeError:; raise ValidationError(""""""Axis %s not importable."""""" % (label)); axisrxns = frozenset(defn.keys()); attached = False; for ss, rxns in self.sset.iteritems():; if frozenset(rxns).issubset(axisrxns):; ordered_floats = []; for rx in self.oss[ss].hrxn:; ordered_floats.append(defn[rx]); self.oss[ss].axis[label] = ordered_floats; attached = True; if not attached:; print(""""""Warning: AXIS %s not affiliated with a subset"""""" % (label)); pieces.remove(axis). print(""""""WrappedDatabase %s: Unparsed attributes"""""" % (self.dbse), pieces). def __str__(self):; text = ''; text += """""" ==> %s WrappedDatabase <==\n\n"""""" % (self.dbse); text += """""" Reagents: %s\n"""""" % (self.hrgt.keys()); text += """""" Reactions: %s\n"""""" % (self.hrxn.keys()); text += """""" Subsets: %s\n"""""" % (self.sset.keys()); text += """""" Reference: %s\n"""""" % (self.benchmark()); text += """"""\n""""""; return text. [docs] def add_ReactionDatum(self, dbse, rxn, method, mode, basis, value, units='kcal/mol', citation=None, comment=None,; overwrite=False):; """"""Add a new quantum chemical value to *rxn* by creating a; qcdb.ReactionDatum from same arguments as that class's; object-less constructor. *rxn* may be actual Reaction.name; or Reaction.indx. """"""; if (self.dbse == dbse):; if rxn in self.hrxn:; rxnname = rxn # rxn is proper reaction name; else:; try:; if (rxn + 1 > 0) and (rxn == self.hrxn.items()[rxn - 1][1].indx):; rxnname = self.hrxn.items()[rxn - 1][1].name # rxn is reaction index (maybe dangerous?); except (TypeError, IndexError):; raise ValidationError(; """"""Inconsistent to add ReactionDatum for %s to database %s with reactions %s."""""" %; (dbse + '-' + str(rxn), self.dbse, self.hrxn.keys())); label = '-'.join([method, mode, basis]); if overwrite or (label not in self.hrxn[rxnname].data):; self.hrxn[rxnname].data[label] = ReactionDatum.library_modelchem(dbse=dbse, rxn=rx",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:29405,benchmark,benchmark,29405,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"for four-virtual case is avoided. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. scf-response2; Compute the dipole polarizability for water with custom basis set. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. cisd-sp; 6-31G** H2O Test CISD Energy Point. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. casscf-fzc-sp; CASSCF/6-31G** energy point. sapt-sf1; Tests the Psi4 SF-SAPT code. sad-scf-type; Test SAD SCF guesses on noble gas atom. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cc13d; Tests analytic CC2 gradients. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. cubeprop-esp; RHF orbitals and density for water. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawfor",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:19939,test,testing,19939,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['testing']
Testability,"for higher derivatives when driver=g/h. * form nbody qcvars and properties, inc'l number, current e/g/h as available; * pull results (incl dicts!) into qcvars; * form model, including copy of class with mols converted to qcsk at atomicresult.extras[""component_results""]. * collect ManyBody-flavored AtomicResult from self.get_results(); * build wfn from nbody mol and basis (always def2-svp); * push qcvars to P::e and wfn. push various internal dicts to qcvars, too; * convert result to psi4.core.Matrix (non-energy) and set g/h on wfn; * return e/g/h and wfn. """""". __all__ = [; ""BsseEnum"",; ""ManyBodyComputer"",; ""nbody"",; ]. import copy; import itertools; import math; from typing import Any, Callable, Dict, List, Literal, Optional, Sequence, Set, Tuple, Union, TYPE_CHECKING; from ast import literal_eval; from enum import Enum; try:; from pydantic.v1 import Field, validator; except ImportError:; from pydantic import Field, validator. import pprint; pp = pprint.PrettyPrinter(width=120, compact=True, indent=1); import logging. import numpy as np; from qcelemental.models import DriverEnum, AtomicResult. from psi4 import core; from psi4.driver import constants, driver_nbody_multilevel, p4util; from psi4.driver.p4util.exceptions import *; from psi4.driver.task_base import BaseComputer, AtomicComputer, EnergyGradientHessianWfnReturn; from psi4.driver.driver_cbs import CompositeComputer; from psi4.driver.driver_findif import FiniteDifferenceComputer. if TYPE_CHECKING:; import qcportal. logger = logging.getLogger(__name__). FragBasIndex = Tuple[Tuple[int], Tuple[int]]. SubTaskComputers = Union[AtomicComputer, CompositeComputer, FiniteDifferenceComputer]. [docs]; def nbody():; """"""; Computes the nbody interaction energy, gradient, or Hessian depending on input.; This is a generalized universal function for computing interaction and total quantities. :returns: *return type of func* |w--w| The data. :returns: (*float*, :py:class:`~psi4.core.Wavefunction`) |w--w| data and wavefunction w",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_nbody.html:7564,log,logging,7564,psi4manual/1.8.x/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_nbody.html,2,['log'],['logging']
Testability,"for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeof",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:11271,test,test,11271,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"for molecule 22. HTR40¶. Database of Hydrogen transfer reactions.; Geometries from Bozkaya and Sherrill.; Reference energies from Bozkaya and Sherrill. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm (broken link). cp 'off'; rlxd 'off'; subset. 'small'; 'large'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. BBI¶. Database (Merz) of protein backbone-backbone interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from Sherrill group, Georgia Tech.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 10",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_available_databases.html:12972,benchmark,benchmark,12972,psi4manual/1.6.x/autodoc_available_databases.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_available_databases.html,2,['benchmark'],['benchmark']
Testability,"for sr in dummyplan.task_list]; # TODO: pass more info, so fn can use for managed_methods -- ref, qc_module, fc/ae, conv/df; dermode = negotiate_derivative_type(driver, methods, kwargs.pop('dertype', None), verbose=1). if dermode[0] == dermode[1]: # analytic; logger.info(""PLANNING MB(CBS): {mc_level_idx=} {packet=} {cbsmeta=} kw={kwargs}""); plan.build_tasks(CompositeComputer, **packet, mc_level_idx=mc_level_idx, **cbsmeta, **kwargs). else:; logger.info(; f""PLANNING MB(FD(CBS): {mc_level_idx=} {packet=} {cbsmeta=} findif_kw={current_findif_kwargs} kw={kwargs}""; ); plan.build_tasks(FiniteDifferenceComputer,; **packet,; mc_level_idx=mc_level_idx,; findif_mode=dermode,; computer=CompositeComputer,; **cbsmeta,; **current_findif_kwargs,; **kwargs). else:; dermode = negotiate_derivative_type(driver, method, kwargs.pop('dertype', None), verbose=1); if dermode[0] == dermode[1]: # analytic; logger.info(f""PLANNING MB: {mc_level_idx=} {packet=}""); plan.build_tasks(AtomicComputer, **packet, mc_level_idx=mc_level_idx, **kwargs); else:; logger.info(; f""PLANNING MB(FD): {mc_level_idx=} {packet=} findif_kw={current_findif_kwargs} kw={kwargs}""; ); plan.build_tasks(FiniteDifferenceComputer,; **packet,; mc_level_idx=mc_level_idx,; findif_mode=dermode,; **current_findif_kwargs,; **kwargs). return plan. # Check for CBS; elif method == ""cbs"":; kwargs.update(cbsmeta); # This CompositeComputer is discarded after being used for dermode. Could have used directly for analytic except for excess printing with FD; simplekwargs = copy.deepcopy(kwargs); simplekwargs['verbose'] = 0; dummyplan = CompositeComputer(**packet, **simplekwargs). methods = [sr.method for sr in dummyplan.task_list]; # TODO: pass more info, so fn can use for managed_methods -- ref, qc_module, fc/ae, conv/df; dermode = negotiate_derivative_type(driver, methods, kwargs.pop('dertype', None), verbose=1). if dermode[0] == dermode[1]: # analytic; logger.info('PLANNING CBS: packet={packet} kw={kwargs}'); plan = CompositeComputer(**p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_planner.html:8790,log,logger,8790,psi4manual/1.7.x/_modules/psi4/driver/task_planner.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_planner.html,8,['log'],['logger']
Testability,"for the NO radical. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). tdscf-6; td-camb3lyp with DiskDF and method/basis specification. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. casscf-sp; CASSCF/6-31G** energy point. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-func; optimization with method defined via cbs. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. scf-occ; force occupations in scf. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. aediis-2; EDIIS test case from 10.1063/1.1470195. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). fci-coverage; 6-31G H2O Test for coverage. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. mbis-4; MBIS calculation on NaCl. cisd-opt-fd; H2O CISD/6-31G** Optimize Geomet",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:35190,test,test,35190,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"for water with custom basis set. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. dft-smoke; DFT Functional Smoke Test. dfcasscf-sp; CASSCF/6-31G** energy point. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. nbo; Generation of NBO file. tdscf-6; td-camb3lyp with DiskDF and method/basis specification. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. mints15; check SP basis Fortran exponent parsing. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). cc16; ROHF and UHF-B-CCD(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:24400,test,test,24400,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"format(label); print(msg); sys.stdout.flush(); psi4.print_out(msg + '\n'). # Test functions; [docs]def compare_values(expected, computed, digits, label):; """"""Function to compare two values. Prints :py:func:`util.success`; when value *computed* matches value *expected* to number of *digits*.; Performs a system exit on failure. Used in input files in the test suite. """"""; message = (""\t%s: computed value (%.*f) does not match (%.*f) to %d decimal places."" % (label, digits+1, computed, digits+1, expected, digits)); if (abs(expected - computed) > 10 ** (-digits)):; print(message); raise TestComparisonError(message); if ( math.isnan(computed) ):; print(message); print(""\tprobably because the computed value is nan.""); raise TestComparisonError(message); success(label). [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); raise TestComparisonError(message); success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if(expected != computed):; message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); raise TestComparisonError(message); success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html:4478,test,test,4478,psi4manual/1.0.0/_modules/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html,1,['test'],['test']
Testability,"frequencies are sufficient to obtain vibrational contributions to; enthalpy (H), entropy (S), and Gibbs free energy (G). Similarly, the; molecular geometry is used to obtain rotational constants, which are; then used to obtain rotational contributions to H, S, and G. Analysis of Intermolecular Interactions¶; Now let’s consider something a little more interesting. Psi4; contains code to analyze the nature of intermolecular interactions; between two molecules, via symmetry-adapted perturbation theory; (SAPT) [Jeziorski:1994:1887]. This kind of analysis gives a lot; of insight into the nature of intermolecular interactions, and Psi4; makes these computations easier than ever.; For a SAPT computation, the input needs to provide information on two; distinct molecules. This is very easy, we just give a Z-matrix or set of; Cartesian coordinates for each molecule, and separate the two with two; dashes, like this:; # Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene),; # test case 16 from the S22 database. molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom. }. Here’s the second half of the input, where we specify the computation; options:; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'). Before, we have been setting keywords individually with commands like; set basis cc-pVDZ. Because we have a few more options now, it’s; convenient to place them together into the set; block, bounded by {...}. This; will set all of these options as “global” options (meaning that they are; visible to all parts of the program). Most common Psi4 options can be; set in a globals section like this. If an option needs to be visible; only to one part of",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/tutorial-1.html:10172,test,test,10172,psi4manual/1.0.0/tutorial-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/tutorial-1.html,2,['test'],['test']
Testability,"frequencies from energies for H2O. cbs-xtpl-dict; Extrapolated water energies. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. dfremp-1; density fitted REMP/cc-pVDZ energies for the CO2 molecule. fci-dipole; 6-31G H2O Test FCI Energy Point. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. linK-1; RHF Linear Exchange Algorithm test for water. stability3; Test LDA stability analysis against QChem. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. extern3; External potential calculation with one Ghost atom and one point charge at the same position. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. x2c3; Test of SFX2C-1e on Water uncontracted cc-p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:12372,test,tests,12372,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"from cbs mol and basis (always def2-svp) and module (if present); * push qcvars to P::e and wfn. * return e/g/h and wfn. """""". import math; import re; import sys; import copy; import pprint; from typing import Any, Callable, Dict, List, Optional, Tuple, Union; pp = pprint.PrettyPrinter(width=120, compact=True, indent=1); import logging. import numpy as np; from pydantic import Field, validator; from qcelemental.models import AtomicResult, DriverEnum. from psi4 import core; from psi4.driver import driver_util, p4util, pp; from psi4.driver import qcdb; from psi4.driver.driver_cbs_helper import composite_procedures, register_composite_function, register_xtpl_function, xtpl_procedures # lgtm[py/unused-import]; from psi4.driver.driver_util import UpgradeHelper; from psi4.driver.p4util.exceptions import ValidationError; from psi4.driver.procrouting.interface_cfour import cfour_psivar_list; from psi4.driver.task_base import AtomicComputer, BaseComputer, EnergyGradientHessianWfnReturn. logger = logging.getLogger(__name__). zeta_values = 'dtq5678'; _zeta_val2sym = {k + 2: v for k, v in enumerate(zeta_values)}; _zeta_sym2val = {v: k for k, v in _zeta_val2sym.items()}; _addlremark = {'energy': '', 'gradient': ', GRADIENT', 'hessian': ', HESSIAN'}; _f_fields = ['f_wfn', 'f_basis', 'f_zeta', 'f_options', 'f_energy', 'f_gradient', 'f_hessian', 'f_dipole', 'f_dipder']; _lmh_labels = {; 1: ['HI'],; 2: ['LO', 'HI'],; 3: ['LO', 'MD', 'HI'],; 4: ['LO', 'MD', 'M2', 'HI'],; 5: ['LO', 'MD', 'M2', 'M3', 'HI']; }; CBSMetadata = List[Dict[str, Any]]. # remove in 1.8; # these get input files to the point where they raise an UpgradeHelper; def xtpl_highest_1():; pass. def scf_xtpl_helgaker_2():; pass. def scf_xtpl_truhlar_2():; pass. def scf_xtpl_karton_2():; pass. def scf_xtpl_helgaker_3():; pass. def corl_xtpl_helgaker_2():; pass. def _expand_bracketed_basis(basisstring: str, molecule: Union[""qcdb.Molecule"", core.Molecule] = None) -> Tuple[List[str], List[int]]:; """"""Function to transform and",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html:5644,log,logger,5644,psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs.html,4,['log'],"['logger', 'logging']"
Testability,"frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cbs-xtpl-func; optimization with method defined via cbs. fcidump; test FCIDUMP functionality for rhf/uhf. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. scf-level-shift-rohf; SCF level shift on an ROHF computation. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. scf3; File retention, docc, socc, and bond distances specified explicitly. opt16; SCF 6-31G(d) optimization of TS for HCN to HNC Performs finite difference hessian calculation. Then optimizes using previous orbitals for scf guess, in subsequent calculations. The last two displacements of the hessian break the plane of symemtry, This test confirms that only the reference geometry, with the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. nbo; Generation of NBO file. fnocc6; Test method/basis with disk_df. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. remp-energy2; integral conventional unrestricted REMP/cc-pVDZ energies for the H2O+ molecule. results were independently verified against the initial wavels implementation. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. olcc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:34871,test,test,34871,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. cbs-xtpl-alpha; Extrapolated water energies. extern3; External potential calculation with one Ghost atom and one point charge at the same position. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. cbs-delta-energy; Extrapolated energies with delta correction. dft1; DFT Functional Test all values update for new BraggSlater radii. scf-coverage; Lithium test for coverage. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. numpy-array-interface; Numpy interface testing. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:36353,test,tests,36353,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"ft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. dft-dsd; DSD S22 Ammonia test. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. scf-auto-cholesky; Cholesky filter a complete basis. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mints3; Test individual integral objects for correctness. phi-ao; Test computing values of basis functions (puream and non-p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:36590,test,tested,36590,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['tested']
Testability,"further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; \(\Rightarrow\) 'S22B' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22; 'WATER' water dimer. JSCH¶. Database (Hobza) of interaction energies for nucelobase pairs.; Geometries and reference interaction energies from Jurecka et al. PCCP 8 1985 (2006).; Corrections implemented from footnote 92 of Burns et al., JCP 134 084107 (2011). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'HB' hydrogen-bonded systems (coplanar base-pairs); 'MX' interstrand systems (adjacent base-pairs on different strands); 'DD' stacked systems (adjacent base-pairs on same strand). HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimole",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_available_databases.html:7052,benchmark,benchmark,7052,psi4manual/1.9.x/autodoc_available_databases.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_available_databases.html,2,['benchmark'],['benchmark']
Testability,"fy_database_docstrings():; """""". """"""; db_path = os.path.dirname(__file__) + '/../databases'. DSD = {}; module_choices = []; for module in glob.glob(db_path + '/*.py'):; filename = os.path.split(module)[1]; basename = os.path.splitext(filename)[0]; div = '=' * len(basename). module_choices.append(basename); DSD[basename] = {}. M = ast.parse(''.join(open(module))); DS = ast.get_docstring(M); if not DS:; DS = """"; DS = str.replace(DS, '|dl|', '-->'); DS = str.replace(DS, '|dr|', '<--'); DS = str.replace(DS, ""``'"", ''); DS = str.replace(DS, ""'``"", ''). lst = DS.split(""\n- **""). #DSD[basename]['general'] = str.replace(lst[0], '|', ''); DSD[basename]['general'] = lst[0].split('\n'). try:; DSD[basename]['cp'] = [section for section in lst if section.startswith(""cp"")][0]; except IndexError:; DSD[basename]['cp'] = None. try:; DSD[basename]['rlxd'] = [section for section in lst if section.startswith(""rlxd"")][0]; except IndexError:; DSD[basename]['rlxd'] = None. try:; DSD[basename]['benchmark'] = [section for section in lst if section.startswith(""benchmark"")][0]; except IndexError:; DSD[basename]['benchmark'] = None. try:; #DSD[basename]['subset'] = [section for section in lst if section.startswith(""subset"")][0]; temp = [section for section in lst if section.startswith(""subset"")][0].splitlines(); temp = temp[2:]. result = {}; for item in temp:; item = item.lstrip("" -""); try:; key, val = item.split("" "", 1); result[key] = val; except ValueError:; result[item] = """". DSD[basename]['subset'] = result. except IndexError:; DSD[basename]['subset'] = {"""": 'No subsets available'}. return DSD. # print '\ngeneral\n\n', DSD[basename]['general']; # print '\ncp\n\n', DSD[basename]['cp']; # print '\nrlxd\n\n', DSD[basename]['rlxd']; # print '\nbenchmark\n\n', DSD[basename]['benchmark']; # print '\nsubset\n\n', DSD[basename]['subset']. #print ' %-12s %s' % ('[' + basename + ']', DSD[basename]['general'][0]). #print 'DSD2\n', DSD['S22']['subset']. Quick search. Enter search terms or a module, clas",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbproc.html:2519,benchmark,benchmark,2519,psi4manual/1.0.0/_modules/qcdb/dbproc.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbproc.html,1,['benchmark'],['benchmark']
Testability,"f{Benchmark}}"""""", """"""{0:8.2f}""""""],; 'mc': ['d', r""""""\multicolumn{1}{c}{\textbf{ModelChem}}"""""", """"""{0:8.2f}""""""],; 'e': ['d', r""""""\multicolumn{1}{c}{\textbf{Error}}"""""", """"""{0:8.2f}""""""],; 'pe': ['d', r""""""\multicolumn{1}{c}{\textbf{\% Err.}}"""""", """"""{0:8.1f}""""""],; 'imag': ['l', '', r""""""\includegraphics[width=1.0cm,height=3.5mm]{%s%%ss.png}"""""" % (plotpath)], # untested; }; for col in columnplan:; if col not in columnreservoir.keys():; raise ValidationError('Column {0} not recognized. Register with columnreservoir.'.format(col)). if isinstance(modelchem, basestring):; if modelchem.lower() == 'all':; mcs = sorted(self.mcs.keys()); else:; mcs = [modelchem]; else:; mcs = modelchem. # commence to generate LaTeX code; tablelines = []; indexlines = []. if standalone:; tablelines += textables.begin_latex_document(). # iterate to produce one LaTeX table per modelchem; for mc in mcs:; # prepare summary statistics; perr = self.compute_statistics(mc, benchmark=benchmark, sset=sset,; failoninc=failoninc, verbose=False,; returnindiv=False); serrors = OrderedDict(); for db in self.dbdict.keys():; serrors[db] = None if perr[db] is None else format_errors(perr[db], mode=3); serrors[self.dbse] = format_errors(perr[self.dbse], mode=3). # prepare individual reactions and errors; terrors = OrderedDict(); isComplete = True; for (lmc, lbm, orxn) in self.get_reactions(mc, benchmark=benchmark,; sset=sset, failoninc=failoninc):; tmp = {}; dbrxn = orxn.dbrxn; tmp['dbrxn'] = dbrxn.replace('_', '\\_'); tmp['indx'] = r""""""\textit{"""""" + str(orxn.indx) + """"""}""""""; tmp['tagl'] = dbrxn.split('-')[0] + ' ' + \; (orxn.latex if orxn.latex else orxn.tagl.replace('_', '\\_')); tmp['imag'] = None # name of primary rgt; bmdatum = orxn.data[lbm].value if lbm else None; mcdatum = orxn.data[lmc].value if lmc else None; tmp['bm'] = bmdatum; tmp['mc'] = mcdatum; if lmc and lbm:; tmp['e'] = mcdatum - bmdatum; tmp['pe'] = 100 * (mcdatum - bmdatum) / abs(bmdatum); # TODO redefining errors not good practice; else:; isComple",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:89003,benchmark,benchmark,89003,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,2,['benchmark'],['benchmark']
Testability,"g Cartesian coordinates. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. sapt-sf1; Tests the Psi4 SF-SAPT code. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. scf-guess-read2; Test if the the guess read in the same basis converges. cc13d; Tests analytic CC2 gradients. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. mp2-h; check that methods can act on single atom. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. fnocc3; Test FNO-QCISD(T) computation. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. pubchem2; Superficial test of PubChem interface. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-smoke; DFT Functional Smoke Test. dfmp2-2; Density fitted MP2 energy of H2, u",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:5063,test,test,5063,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"g Code; Miscellaneous. Obtaining PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/external-1.html:901,test,test,901,psi4manual/1.2.1/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/external-1.html,2,['test'],['test']
Testability,"g ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc12; Single point energies of multiple excited states with EOM-CCSD. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cbs-xtpl-func; optimization with method defined via cbs. fcidump; test FCIDUMP functionality for rhf/uhf. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. scf-level-shift-rohf; SCF level shift on an ROHF computation. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. scf3; File retention, docc, socc, and bond distances specified explicitly. opt16; SCF 6-31G(d) optimization of TS for HCN to HNC Performs finite difference hessian calculation. Then optimizes using previous orbitals for scf guess, in subsequent calculations. The last two displacements of the hessian break the plane of symemtry, This test confirms that only the reference geometry, with the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. nbo; Generation of NBO file. fnocc6; Test method/basis with disk_df. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. opt1-fd; SCF STO-3G geometry optimzation, ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:34231,test,test,34231,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"g automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** energy point. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:42841,test,tests,42841,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['tests']
Testability,"g bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft-omega; Test omega is setable. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:8917,test,tests,8917,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['test'],['tests']
Testability,"g bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft-omega; Test omega is setable. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:9535,test,tests,9535,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['test'],['tests']
Testability,"g irreps when symmetry is used. Type: array; Default: No Default. TDSCF_TDA (SCF)¶SCF — Run with Tamm-Dancoff approximation (TDA), uses random-phase approximation (RPA) when false. Type: boolean; Default: false. TDSCF_TDM_PRINT (SCF)¶SCF — Which transition dipole moments to print out: - E_TDM_LEN : electric transition dipole moments, length representation - E_TDM_VEL : electric transition dipole moments, velocity representation - M_TDM : magnetic transition dipole moments. Type: array; Default: No Default. TDSCF_TRIPLETS (SCF)¶SCF — Controls inclusion of triplet states, which is only valid for restricted references. Valid options: - none : No triplets computed (default) - also : lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCT)¶DCT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC)¶PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Def",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:224979,test,test,224979,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,9,['test'],['test']
Testability,"g test_. This is how pytest knows to collect it.; No registration required to bring a test to pytest’s attention.; No registration required to bring a test to CMake’s attention. If a test needs additional files, register them in psi4/psi4/CMakeLists.txt. A few notes on test contents:. Import testing functions from utils and use Python assert: assert compare_values(expected, computed, ...).; Don’t worry about cleaning up files or resetting options. A function in psi4/tests/pytests/conftest.py does this automatically between every test.; Especially if using data or functions from outside a test, run a variety of tests at different pytest -n <N> levels to mix up test ordering. If tests fail that pass when run alone, you’ve got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. For every new test file, add pytestmark = [pytest.mark.psi, pytest.mark.api] at the top.; This ensures that every test has the psi mark and every PsiAPI test has the api mark to contrast with PSIthon tests with cli mark.; There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m <mark>; vs. ctest -L <mark>) rather than just by name (pytest -k <name_fragment>; vs. ctest -R <name_fragment>). Far more complicated logic is allowed than for; CTest: pytest -m ""dftd3 and not api and not long"".; The most important marks are “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging¶; There are many ways to run pytest, How to test a Psi4 installation, and three different copies of the test file; (i.e., psi4/tests/",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:12185,test,test,12185,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,15,['test'],"['test', 'tests']"
Testability,"g that file to PSI4’s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:51820,test,test,51820,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['test'],['test']
Testability,"g, raising, and returning.; Specialized interception for interfacing testing systems. Return type; Union[bool, Tuple[bool, str]]. Returns. allclose (bool) – Returns True if expected and computed are equal; False otherwise.; message (str) – When return_message=True, also return passed or error message. Notes. Akin to np.array_equal.; For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use compare_recursive(). Objects¶. psi4.compare_matrices(expected, computed, atol_exponent, label[, *, check_name=False, **kwargs]). psi4.compare_matrices(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Matrix objects.; Compares Matrix properties of name (optional through check_name), nirrep, symmetry, and number of rows and columns for each irrep.; For comparing actual numerical contents, the matrices are serialized to NumPy array format and passed to qcelemental.testing.compare_recursive().; Handles both Psi4-style signatures ((expected, computed, atol_exponent, label); see atol_exponent parameter below) and QCA-style signatures ((expected, computed, label)). Parameters; atol_exponent (int or float) – Absolute tolerance (see formula in qcelemental.testing.compare_values() notes).; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99. qcelemental.testing.compare_recursive(expected, computed, label=None, *, atol=1e-06, rtol=1e-16, forgive=None, equal_phase=False, quiet=False, return_message=False, return_handler=None)[source]¶; Recursively compares nested structures such as dictionaries and lists. Parameters. expected (Union[Dict, BaseModel, ProtoModel]) – Reference value against which computed is compared.; Dict may be of any depth but should contain Plain Old Data.; computed",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:19322,test,testing,19322,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,1,['test'],['testing']
Testability,"g. DTRMM(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRMV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRSM(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. DTRSV(arg0, arg1, arg2, arg3, arg4, arg5, ...); docstring. IDAMAX(arg0, arg1, arg2, arg3); docstring. array_variable(key); Returns copy of the Matrix QCVariable key (case-insensitive); prefer variable(). array_variables(); Returns dictionary of all Matrix QCVariables; prefer variables(). be_quiet(); Redirects output to /dev/null. benchmark_blas1(max_dim, min_time); Perform benchmark traverse of BLAS 1 routines. benchmark_blas2(max_dim, min_time); Perform benchmark traverse of BLAS 2 routines. benchmark_blas3(max_dim, min_time[, nthread]); Perform benchmark traverse of BLAS 3 routines. benchmark_disk(max_dim, min_time); Perform benchmark of PSIO disk performance. benchmark_integrals(max_am, min_time); Perform benchmark of psi integrals (of libmints type). benchmark_math(min_time); Perform benchmark of common double floating point operations including most of cmath. ccdensity(ref_wfn); Runs the code to compute coupled cluster density matrices. ccenergy(ref_wfn); Runs the coupled cluster energy code. cceom(ref_wfn); Runs the equation of motion coupled cluster code for excited states. cchbar(ref_wfn); Runs the code to generate the similarity transformed Hamiltonian. cclambda(ref_wfn); Runs the coupled cluster lambda equations code. ccresponse(ref_wfn); Runs the coupled cluster response theory code. cctransort(ref_wfn); Runs cctransort that transforms and reorders integrals for use in the coupled cluster codes. cctriples(ref_wfn); Runs the coupled cluster (T) energy code. clean(); Remove scratch files. clean_options(); Reset options to clean state. clean_timers(); Reinitialize timers for independent timer.dat entries. clean_variables(); Empties all double and Matrix QCVariables that have been set in global memory. close_outfile(); Closes the output file. dct(ref_wfn); Runs the density cumulant ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/psi4api.html:2921,benchmark,benchmark,2921,psi4manual/1.7.x/psi4api.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/psi4api.html,4,['benchmark'],['benchmark']
Testability,"g. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Functional Test. mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:35036,test,tests,35036,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['tests']
Testability,"g4, arg5, …); docstring. DTBMV(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DTBSV(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DTRMM(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DTRMV(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DTRSM(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. DTRSV(arg0, arg1, arg2, arg3, arg4, arg5, …); docstring. IDAMAX(arg0, arg1, arg2, arg3); docstring. adc(ref_wfn); Runs the ADC propagator code, for excited states. array_variable(key); Returns copy of the Matrix QCVariable key (case-insensitive); prefer variable(). array_variables(); Returns dictionary of all Matrix QCVariables; prefer variables(). be_quiet(); Redirects output to /dev/null. benchmark_blas1(max_dim, min_time); Perform benchmark traverse of BLAS 1 routines. benchmark_blas2(max_dim, min_time); Perform benchmark traverse of BLAS 2 routines. benchmark_blas3(max_dim, min_time, nthread); Perform benchmark traverse of BLAS 3 routines. benchmark_disk(max_dim, min_time); Perform benchmark of PSIO disk performance. benchmark_integrals(max_am, min_time); Perform benchmark of psi integrals (of libmints type). benchmark_math(min_time); Perform benchmark of common double floating point operations including most of cmath. ccdensity(ref_wfn); Runs the code to compute coupled cluster density matrices. ccenergy(ref_wfn); Runs the coupled cluster energy code. cceom(ref_wfn); Runs the equation of motion coupled cluster code for excited states. cchbar(ref_wfn); Runs the code to generate the similarity transformed Hamiltonian. cclambda(ref_wfn); Runs the coupled cluster lambda equations code. ccresponse(ref_wfn); Runs the coupled cluster response theory code. cctransort(ref_wfn); Runs cctransort that transforms and reorders integrals for use in the coupled cluster codes. cctriples(ref_wfn); Runs the coupled cluster (T) energy code. clean(); Remove scratch files. clean_options(); Reset options to clean state. clean_timers(); Reinitialize timers for independent timer.dat",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/psi4api-1.html:2773,benchmark,benchmark,2773,psi4manual/1.4.0/psi4api-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/psi4api-1.html,2,['benchmark'],['benchmark']
Testability,"gation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. Compiling and Installing from Source¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psi4/conda/psi4-path-advisor.py; (extensive help menu at conda/psi4-path-advisor.py -h); or psicode downloads; page for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see psicode.org/installs/latest; (select “source”). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see psicode.org/installs/latest (select “conda”).; To see working builds for Linux, Mac, and Windows, see :src:; [this GHA]. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. An abbreviated build guide can be found; within the source itself .; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/build_planning.html:1018,test,tested,1018,psi4manual/master/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html,1,['test'],['tested']
Testability,"geom.cgi (broken link).; Reference energies from Zhao et al. JPCA, 109 2012-2018 (2005) doi: 10.1021/jp045141s [in supporting information]. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. JSCH¶. Database (Hobza) of interaction energies for nucelobase pairs.; Geometries and reference interaction energies from Jurecka et al. PCCP 8 1985 (2006).; Corrections implemented from footnote 92 of Burns et al., JCP 134 084107 (2011). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'HB' hydrogen-bonded systems (coplanar base-pairs); 'MX' interstrand systems (adjacent base-pairs on different strands); 'DD' stacked systems (adjacent base-pairs on same strand). HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; \(\Rightarrow\) 'HBC6A' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset. 'small'; 'large'; 'equilibrium' equilibrium points for the six systems; 'FaOOFaOO' dissociation curve for formic acid dimer; 'FaONFaON' dissociation curve for formamide dimer; 'FaNNFaNN' dissociation curve for formamidine dimer; 'FaOOFaON' dissociation curve for formic acid- formamide complex; 'FaONFaNN' dissociation curve for formamide- formamidine complex; 'FaOOFaNN' dissociation curve for formic acid- formamidine complex. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quali",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_available_databases.html:3040,benchmark,benchmark,3040,psi4manual/1.7.x/autodoc_available_databases.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_available_databases.html,2,['benchmark'],['benchmark']
Testability,"geom` and masses `m`.; Remove any linear dependencies and return an array of shape (3, 3) for atoms, (5, 3 * nat) for linear `geom`,; or (6, 3 * nat) otherwise. To handle noisy linear geometries, pass `tol` on the order of max deviation. m1 = np.asarray([1.]); m2 = np.asarray([1., 1.]); m3 = np.asarray([1., 1., 1.]); m4 = np.asarray([1., 1., 1., 1.]); g4 = np.asarray([[ 1., 1., 0.],; [-1., 1., 0.],; [-1., -1., 0.],; [ 1., -1., 0.]]); g2 = np.asarray([[ 1., 1., 0.],; [-1., -1., 0.]]); g3 = np.asarray([[3., 3., 3.],; [4., 4., 4.,],; [5., 5., 5.]]); g3noisy = np.asarray([[3., 3.001, 3.],; [4., 4.001, 4.,],; [5., 5., 5.01]]); g33 = np.asarray([[0., 0., 0.],; [1., 0., 0.],; [-1., 0., 0.]]); g1 = np.asarray([[0., 0., 0.]]); g11 = np.asarray([[1., 2., 3.]]); noise = np.random.normal(0, 1, 9).reshape(3, 3); noise = np.divide(noise, np.max(noise)). assert(_get_TR_space(m4, g4).shape == (6, 12)); assert(_get_TR_space(m2, g2).shape == (5, 6)); assert(_get_TR_space(m3, g3).shape == (5, 9)); assert(_get_TR_space(m3, g33).shape == (5, 9)); assert(_get_TR_space(m1, g1).shape == (3, 3)); assert(_get_TR_space(m1, g11).shape == (3, 3)); assert(_get_TR_space(m3, g3noisy, tol=1.e-2).shape == (5, 9)); for ns in range(2, 6):; tol = 10. ** -ns; gnoisy = g3 + tol * noise; assert(_get_TR_space(m3, gnoisy, tol=10*tol).shape == (5, 9)). """"""; sqrtmmm = np.repeat(np.sqrt(m), 3); xxx = np.repeat(geom[:, 0], 3); yyy = np.repeat(geom[:, 1], 3); zzz = np.repeat(geom[:, 2], 3). z = np.zeros_like(m); i = np.ones_like(m); ux = np.ravel([i, z, z], order='F'); uy = np.ravel([z, i, z], order='F'); uz = np.ravel([z, z, i], order='F'). # form translation and rotation unit vectors; T1 = sqrtmmm * ux; T2 = sqrtmmm * uy; T3 = sqrtmmm * uz; R4 = sqrtmmm * (yyy * uz - zzz * uy); R5 = sqrtmmm * (zzz * ux - xxx * uz); R6 = sqrtmmm * (xxx * uy - yyy * ux). TRspace = []; if 'T' in space:; TRspace.append([T1, T2, T3]); if 'R' in space:; TRspace.append([R4, R5, R6]); if not TRspace:; # not sure about this, but it run",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html:41084,assert,assert,41084,psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html,24,['assert'],['assert']
Testability,"get('basis'); if lowername in integrated_basis_methods and userbas is None:; kwargs['basis'] = '(auto)'. # Are we planning?; plan = task_planner.task_planner(""properties"", lowername, molecule, **kwargs); logger.debug('PROPERTIES PLAN'); logger.debug(pp.pformat(plan.dict())). if kwargs.get(""return_plan"", False):; # Plan-only requested; return plan. elif not isinstance(plan, AtomicComputer):; # Advanced ""Computer"" active; plan.compute(); return plan.get_psi_results(return_wfn=return_wfn). else:; # We have unpacked to an AtomicInput; lowername = plan.method; basis = plan.basis; core.set_global_option(""BASIS"", basis). ## Second half of this fn -- entry means program running exactly analytic property. # Commit to procedures['properties'] call hereafter; core.clean_variables(). # needed (+restore below) so long as AtomicComputer-s aren't run through json (where convcrit also lives); optstash = driver_util.negotiate_convergence_criterion((""prop"", ""prop""), lowername, return_optstash=True). logger.info(f""Compute properties(): method={lowername}, basis={core.get_global_option('BASIS').lower()}, molecule={molecule.name()}, nre={'w/EFP' if hasattr(molecule, 'EFP') else molecule.nuclear_repulsion_energy()}""); logger.debug(""w/EFP"" if hasattr(molecule, ""EFP"") else pp.pformat(molecule.to_dict())); wfn = procedures[""properties""][lowername](lowername, molecule=molecule, **kwargs); logger.info(f""Return properties(): {core.variable('CURRENT ENERGY')}""). basisstash.restore(); optstash.restore(). if return_wfn:; return (core.variable('CURRENT ENERGY'), wfn); else:; return core.variable('CURRENT ENERGY'). [docs]; def optimize_geometric(name, **kwargs):. import qcelemental as qcel; from qcelemental.util import which_import. if not which_import('geometric', return_bool=True):; raise ModuleNotFoundError('Python module geometric not found. Solve by installing it: `conda install -c conda-forge geometric` or `pip install geometric`'); import geometric. class Psi4NativeEngine(geometric.engine.En",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver.html:52836,log,logger,52836,psi4manual/1.8.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver.html,6,['log'],['logger']
Testability,"get('basis'); if lowername in integrated_basis_methods and userbas is None:; kwargs['basis'] = '(auto)'. # Are we planning?; plan = task_planner.task_planner(""properties"", lowername, molecule, **kwargs); logger.debug('PROPERTIES PLAN'); logger.debug(pp.pformat(plan.dict())). if kwargs.get(""return_plan"", False):; # Plan-only requested; return plan. elif not isinstance(plan, AtomicComputer):; # Advanced ""Computer"" active; plan.compute(); return plan.get_psi_results(return_wfn=return_wfn). else:; # We have unpacked to an AtomicInput; lowername = plan.method; basis = plan.basis; core.set_global_option(""BASIS"", basis). ## Second half of this fn -- entry means program running exactly analytic property. # Commit to procedures['properties'] call hereafter; core.clean_variables(). # needed (+restore below) so long as AtomicComputer-s aren't run through json (where convcrit also lives); optstash = driver_util.negotiate_convergence_criterion((""prop"", ""prop""), lowername, return_optstash=True). logger.info(f""Compute properties(): method={lowername}, basis={core.get_global_option('BASIS').lower()}, molecule={molecule.name()}, nre={'w/EFP' if hasattr(molecule, 'EFP') else molecule.nuclear_repulsion_energy()}""); logger.debug(""w/EFP"" if hasattr(molecule, ""EFP"") else pp.pformat(molecule.to_dict())); wfn = procedures[""properties""][lowername](lowername, molecule=molecule, **kwargs); logger.info(f""Return properties(): {core.variable('CURRENT ENERGY')}""). basisstash.restore(); optstash.restore(). if return_wfn:; return (core.variable('CURRENT ENERGY'), wfn); else:; return core.variable('CURRENT ENERGY'). [docs]def optimize_geometric(name, **kwargs):. import qcelemental as qcel; from qcelemental.util import which_import. if not which_import('geometric', return_bool=True):; raise ModuleNotFoundError('Python module geometric not found. Solve by installing it: `conda install -c conda-forge geometric` or `pip install geometric`'); import geometric. class Psi4NativeEngine(geometric.engine.Engi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html:46303,log,logger,46303,psi4manual/1.6.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html,4,['log'],['logger']
Testability,"gga_superfuncs.py. omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. mbis-6; MBIS calculation on H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. sapt11; sapt example with orbital freezing with alkali metal and dMP2. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbody-he-4b; MP2/aug-cc-pvDZ many body energies of an arbitrary Helium complex, addressing 4-body formulas. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-guess-read3; Test if the the guess read in the same basis converges. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. cc30; CCSD/sto-3g optical rotation calculation (lengt",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:15997,test,test,15997,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"gger.info(f""PLANNING MB: {mc_level_idx=} {packet=}""); plan.build_tasks(AtomicComputer, **packet, mc_level_idx=mc_level_idx, **kwargs); else:; logger.info(; f""PLANNING MB(FD): {mc_level_idx=} {packet=} findif_kw={current_findif_kwargs} kw={kwargs}""; ); plan.build_tasks(FiniteDifferenceComputer,; **packet,; mc_level_idx=mc_level_idx,; findif_mode=dermode,; **current_findif_kwargs,; **kwargs). return plan. # Check for CBS; elif method == ""cbs"":; kwargs.update(cbsmeta); # This CompositeComputer is discarded after being used for dermode. Could have used directly for analytic except for excess printing with FD; simplekwargs = copy.deepcopy(kwargs); simplekwargs['verbose'] = 0; dummyplan = CompositeComputer(**packet, **simplekwargs). methods = [sr.method for sr in dummyplan.task_list]; # TODO: pass more info, so fn can use for managed_methods -- ref, qc_module, fc/ae, conv/df; dermode = negotiate_derivative_type(driver, methods, kwargs.pop('dertype', None), verbose=1). if dermode[0] == dermode[1]: # analytic; logger.info('PLANNING CBS: packet={packet} kw={kwargs}'); plan = CompositeComputer(**packet, **kwargs); return plan; else:; # For FD(CBS(Atomic)), the CompositeComputer above is discarded after being used for dermode.; logger.info(; f'PLANNING FD(CBS): dermode={dermode} packet={packet} findif_kw={current_findif_kwargs} kw={kwargs}'); plan = FiniteDifferenceComputer(**packet,; findif_mode=dermode,; computer=CompositeComputer,; **current_findif_kwargs,; **kwargs); return plan. # Done with Wrappers -- know we want E, G, or H -- but may still be FD or AtomicComputer; else:; dermode = negotiate_derivative_type(driver, method, kwargs.pop('dertype', None), verbose=1); convcrit = negotiate_convergence_criterion(dermode, method, return_optstash=False). if dermode[0] == dermode[1]: # analytic; logger.info(f'PLANNING Atomic: keywords={keywords}'); return AtomicComputer(**packet, **kwargs); else:; keywords.update(convcrit); logger.info(; f'PLANNING FD: dermode={dermode} keywords={",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_planner.html:9666,log,logger,9666,psi4manual/1.7.x/_modules/psi4/driver/task_planner.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_planner.html,8,['log'],['logger']
Testability,"gies for small open-shell high-spin bimolecular complexes.; Geometries taken from https://gitlab.com/piotr.zuchowski/o24x5/-/tree/4ec3cae0546b6ae4f4f2cf28482cd164c8323cc6.; Reference interaction energies taken from J. Chem. Phys. 154, 134106 (2021) https://doi.org/10.1063/5.0043793.; Variant without midbonds. no | name | subset. 1 | CN - He | DD; 2 | NH - He | DD; 3 | C2H3 - C2H4 | DD; 4 | O2 - H2 | DD; 5 | NH - Ar | DD; 6 | CN - Ar | DD; 7 | O2 - N2 | DD; 8 | H2O - O2(sp) | DD; 9 | O2 - O2 | DD. 10 | NH - NH | ED; 11 | CH2O - NH2 | ED; 12 | H2O - Na | ED; 13 | H2O - OH | ED; 14 | H2O - O2H | ED; 15 | Li - NH3(gm) | ED; 16 | Li - O2 | MX; 17 | CN - H2 | MX; 18 | Li - NH3(lm) | MX; 19 | H2O - O2(gm) | MX; 20 | Na - Li | MX; 21 | CO2 - O2 | MX; 22 | C2H3 - CO2 | MX; 23 | He* - He* | MX; 24 | HF - CO+ | MX. cp 'on'; subset; - 'DD' dispersion-dominated systems; - 'ED' electrostatically-dominated systems; - 'MX' mixed-interaction systems. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. table of contents. CORE; BAKERJCC93; BAKERJCC96; BASIC; HTR40; A24alt; HTBH; JSCH; HBC6; S22by5; NBC10; HSG; NCB31; BENCH12; RSE42; SSI; S22; RGC10; O24by5mb; S66by8; BBI; NHTBH; ACENES; S66; O24by5; A24. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(); CORE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_available_databases.html:13940,benchmark,benchmark,13940,psi4manual/1.7.x/autodoc_available_databases.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_available_databases.html,1,['benchmark'],['benchmark']
Testability,"gies with delta correction. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ CH2 geometry optimization via analytic gradients. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the state of the CN radical, with Z-matrix input. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. scf6; Tests RHF/ROHF/UHF SCF gradients. numpy-array-interface; Numpy interface testing. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cc19; CCSD/cc-pVDZ dipole polari",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:13290,test,test,13290,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"gits* < 1 e.g. digits=0.04). Performs; a system exit on failure unless *exitonfail* False, in which case; returns error message. Used in input files in the test suite. """"""; if digits > 1:; thresh = 10 ** -digits; message = (""\t%s: computed value (%.*f) does not match (%.*f) to %d digits."" % (label, digits+1, computed, digits+1, expected, digits)); else:; thresh = digits; message = (""\t%s: computed value (%f) does not match (%f) to %f digits."" % (label, computed, expected, digits)); if abs(expected - computed) > thresh:; print(message); if exitonfail:; raise TestComparisonError(message); if math.isnan(computed):; print(message); print(""\tprobably because the computed value is nan.""); if exitonfail:; raise TestComparisonError(message); success(label); return True. [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if(expected != computed):; message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html:7217,test,test,7217,psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,1,['test'],['test']
Testability,"gits."" % (label, computed, expected, digits)); sys.exit(1); if math.isnan(computed):; print(""\t%s: computed value (%f) does not match (%f) to %d digits.\n"" % (label, computed, expected, digits)); print(""\tprobably because the computed value is nan.""); sys.exit(1); _success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; rows = len(expected); cols = len(expected[0]); failed = 0; for row in range(rows):; for col in range(cols):; if abs(expected[row][col] - computed[row][col]) > 10 ** (-digits):; print(""\t%s: computed value (%s) does not match (%s)."" % (label, expected[row][col], computed[row][col])); failed = 1; break. if failed:; print(""The Failed Test Matrices\n""); show(computed); print('\n'); show(expected); sys.exit(1); _success(label). [docs]def query_yes_no(question, default=True):; """"""Ask a yes/no question via raw_input() and return their answer. *question* is a string that is presented to the user.; *default* is the presumed answer if the user just hits <Enter>.; It must be yes (the default), no or None (meaning; an answer is required of the user). The return value is one of True or False. """""". yes = re.compile(r'^(y|yes|true|on|1)', re.IGNORECASE); no = re.compile(r'^(n|no|false|off|0)', re.IGNORECASE). if default == None:; prompt = "" [y/n] ""; elif default == True:; prompt = "" [Y/n] ""; elif default == False:; prompt = "" [y/N] ""; else:; raise ValueError(""invalid default answer: '%s'"" % default). while True:; sys.stdout.write(question + prompt); choice = raw_input().strip().lower(); if default is not None and choice == """":; return default; elif yes.match(choice):; return True; elif no.match(choice):; return False; else:; sys.stdout.write("" P",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/qcdb/psiutil.html:1904,Test,Test,1904,psi4manual/4.0b3/_modules/qcdb/psiutil.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/qcdb/psiutil.html,3,['Test'],['Test']
Testability,"gle point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). fcidump; test FCIDUMP functionality for rhf/uhf. fnocc5; Test FNO-DF-CCSD(T) energy. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc12; Single point energies of multiple excited states with EOM-CCSD. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. fnocc4; Test FNO-DF-CCSD(T) energy. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. cc54; CCSD dipole with user-specified basis set. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-pt2; Mk-MRP",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:8201,test,test,8201,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"gma^+\) state of the CN radical, with Z-matrix input. fnocc3; Test FNO-QCISD(T) computation. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega= (589 355 nm). dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. aediis-1; ADIIS test case, from 10.1063/1.3304922. scf-response2; Compute the dipole polarizability for water with custom basis set. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. cisd-sp; 6-31G** H2O Test CISD Energy Point. tdscf-7; TD-HF test variable access. mbis-2; MBIS calculation on OH- (Expanded Arrays). sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. mints3; Test individual integral objects for correctness. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. pubchem2; Superficial test of PubChem interface. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. sap",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:5531,test,test,5531,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"gorithm is used. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cepa1; cc-pvdz H2O Test CEPA(1) Energy. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. nbody-hessian; Computation of VMFC-corrected HF dimer Hessian. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Test Suite and Sample Inputs. © Copyright 2007-2023, The Psi4 P",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/testsuite.html:48605,test,testing,48605,psi4manual/1.8.x/testsuite.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/testsuite.html,1,['test'],['testing']
Testability,"gorithm is used. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cepa1; cc-pvdz H2O Test CEPA(1) Energy. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. nbody-hessian; Computation of VMFC-corrected HF dimer Hessian. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. © Copyright 2007-2023",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:47883,test,testing,47883,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,1,['test'],['testing']
Testability,"gpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-them",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/build_planning.html:6361,test,testing,6361,psi4manual/1.7.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/build_planning.html,4,['test'],['testing']
Testability,"grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft1-alt; DFT Functional Test. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). scf-level-shift-rks; SCF level shift on an RKS computation. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). sapt9; usapt example with empty beta. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. dlpnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. dft1; DFT Functional Test all values update for new BraggSlater radii. cubeprop-esp; RHF orbitals and density for water. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom; DFT custom functional test. cc13b; Tests RHF CCSD(T)gradients. sad-scf-type; Test SAD SCF guesses on noble gas atom. sad1; Test o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:26786,test,test,26786,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"gral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI varia",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:9772,test,test,9772,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"grals stored on disk. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. mints3; Test individual integral objects for correctness. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. rasci-h2o; RASCI/6-31G** H2O Energy Point. cc17; Single point energies of multiple excited states with EOM-CCSD. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. mrcc2; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest excited state of H2O+ (B1 excitation). opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. cc13a; UHF-CCSD(T)/cc-pVDZ CH2 geometry optimization via analytic gradients. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mrcc3; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. pywrap_alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. cc3; cc3: RHF-CCSD/6-31",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html:10822,test,test,10822,psi4manual/4.0b2/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_testsuite-1.html,4,['test'],['test']
Testability,"grammers FAQ. Programmers FAQ¶. C++ Style in PSI4¶. Prefer nullptr to 0 or NULL; Prefer std::make_shared to direct use of new; Prefer auto to explicit type declarations; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually. Modules in PSI4¶. How to name keywords in psi4/src/read_options.cc; How to call BLAS & LAPACK in ; How to use low-level BLAS/LAPACK with psi4.core.Matrix; How to name orbital bases (e.g., AO & SO); How to name orbital dimensions; How to name orbital spaces (e.g., docc). Interfacing with PSI4¶. How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs. Versioning PSI4¶. How to bump a version; How to create and remove an annotated Git tag on a remote; What is the suggested GitHub workflow; What Psi4 version is running. Releasing PSI4¶. Annual; Pre-Release (e.g., v1.3rc1); Release (e.g., v1.3); Post-Release (e.g., v1.8.2). Workflow¶. How to use a local Add-On repository in the Psi4 build; What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi; How to use gdb and lldb with Psi4; How to locate non-ascii characters in the codebase; How to Ignore the Bots. Miscellaneous¶. Test Suite; Adding PSIthon Test Cases; Adding PsiAPI Test Cases; How to set up PSIthon tests to run through pytest; How to find tests without output.ref; How to do GitHub issue management and code review. table of contents. Programmers FAQ; C++ Style in PSI4; Modules in PSI4; Interfacing with PSI4; Versioning PSI4; Releasing PSI4; Workflow; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Adding New Code to PSI4; Programmers FAQ. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/prog_faq.html:1575,test,tests,1575,psi4manual/master/prog_faq.html,https://psicode.org,https://psicode.org/psi4manual/master/prog_faq.html,2,['test'],['tests']
Testability,"gs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. mbis-2; MBIS calculation on OH- (Expanded Arrays). dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. pywrap-cbs1; Various basis set extrapolation tests. cc52; CCSD Response for H2O2. mints-benchmark; run some BLAS benchmarks. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. freq-masses; check nonphysical masses possible. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. dct9;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:30385,benchmark,benchmark,30385,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,4,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"gs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt-ecp; sapt0 of charged system in ECP basis set. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfremp-1; density fitted REMP/cc-pVDZ energies for the CO2 molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. aediis-2; EDIIS test case from 10.1063/1.1470195. scf-response3; UHF Dipole Polarizability Test. mom-h2o-3; MOM excitation from LUMO HOMO+3. extern3; External potential calculation with one Ghost atom and one point charge at the same position. pywrap-cbs1; Various basis set extrapolation tests. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. numpy-array-interface; Numpy interface testing. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. cdremp-2; Cholesky decomposed REMP/cc-pV",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:34353,test,test,34353,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"gs.pop('return_wfn', False). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()); molecule.update_geometry(). ## Pre-planning interventions. # * Trip on function or alias as name; lowername = driver_util.upgrade_interventions(args[0]). # * Allow specification of methods to arbitrary order; lowername, level = driver_util.parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. _filter_renamed_methods(""properties"", lowername). props = kwargs.get('properties', ['dipole', 'quadrupole']); if len(args) > 1:; props += args[1:]; kwargs['properties'] = p4util.drop_duplicates(props). # * Avert pydantic anger at incomplete modelchem spec; userbas = core.get_global_option('BASIS') or kwargs.get('basis'); if lowername in integrated_basis_methods and userbas is None:; kwargs['basis'] = '(auto)'. # Are we planning?; plan = task_planner.task_planner(""properties"", lowername, molecule, **kwargs); logger.debug('PROPERTIES PLAN'); logger.debug(pp.pformat(plan.dict())). if kwargs.get(""return_plan"", False):; # Plan-only requested; return plan. elif not isinstance(plan, AtomicComputer):; # Advanced ""Computer"" active; plan.compute(); return plan.get_psi_results(return_wfn=return_wfn). else:; # We have unpacked to an AtomicInput; lowername = plan.method; basis = plan.basis; core.set_global_option(""BASIS"", basis). ## Second half of this fn -- entry means program running exactly analytic property. # Commit to procedures['properties'] call hereafter; core.clean_variables(). # needed (+restore below) so long as AtomicComputer-s aren't run through json (where convcrit also lives); optstash = driver_util.negotiate_convergence_criterion((""prop"", ""prop""), lowername, return_optstash=True). logger.info(f""Compute properties(): method={lowername}, basis={core.get_global_option('BASIS').lower()}, molecule={molecule.name()}, nre={'w/EFP' if hasattr(molecule, 'EFP') else molecule.nuclear_repulsion_energy()}""); logger.debug",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html:45543,log,logger,45543,psi4manual/1.6.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html,2,['log'],['logger']
Testability,"gularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC); DFOCC — Do use regularized denominators?. Type: boolean; Default: false. REL_BASIS (GLOBALS); GLOBALS — Whether to uncontract the basis set in a dual basis calculation. Type: string; Default: No Default. RELATIVISTIC (GLOBALS); GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCFT); DCFT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAX_TAU (DCFT); DCFT (Expert) — Controls whether to relax tau during the cumulant updates or not. Type: boolean; Default: true. RELAXED (OCC); OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI); DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCFT); DCFT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY); CCENERGY — Do restart the coupled-cluster iterations from old and amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA); CCLAMBDA — Do restart the coupled-cluster iter",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:194589,test,tested,194589,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['test'],['tested']
Testability,"gure;; this will enable loading of plugins at runtime. Creating a New Plugin¶; PSI4 can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplugin +aointegrals; >>> psi4 --new-plugin myplugin +mointegrals; >>> psi4 --new-plugin myplugin +sointegrals; >>> psi4 --new-plugin myplugin +wavefunction. Several stable sample plugin directories are available to consult in the; psi4/tests directory. Other plugin directories can be used as models; but are in active development. For documentation on plugin modules, see; Available Plugins. psi4/tests/plugin_aointegrals/aointegrals.cc.in; An example that uses the LibMints library to generate and print AO basis (no symmetry) integrals.; psi4/tests/plugin_backtrans/backtrans.cc.in; A test of the one- and two-particle density matrix backtransformation code.; psi4/tests/plugin_ccsort/plugin_ccsort.cc.in; psi4/tests/plugin_mointegrals/mointegrals.cc.in; An example that uses the LibTrans library to generate and print MO basis integrals.; psi4/tests/plugin_mp2/plugin_mp2.cc.in; A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; psi4/tests/plugin_sointegrals/sointegrals.cc.in; An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/plugins-1.html:3215,test,tests,3215,psi4manual/4.0b2/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins-1.html,2,['test'],['tests']
Testability,"gy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. props4; Electrostatic potential and electric field evaluated on a grid around water. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. dft2; DFT Functional Test. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. aediis-1; ADIIS test case, from 10.1063/1.3304922. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. fsapt-ext-abc; FSAPT with external charge on trimer. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. dft-reference; MP2 with a PBE0 reference computation. dft1; DFT Functional Test all values update for new BraggSlater radii. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. ddd-deriv; Sample HF/cc-pVDZ H2O computation all derivatives. nbody-multi-level-2; many-body different levels of theory on each body of helium tetramer. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. td",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:26280,test,tests,26280,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"gy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G g",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:32361,test,test,32361,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"gy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory. output.ref¶; When your test case is in final form, run it locally, rename the output to output.ref, and check it into the repository alongside input.dat.; While this isn’t used for any testing machinery (except for the nearly decommissioned psi4/tests/psitest.pl for CC tests; full decommission expected by v1.6), it can be handy for users or developers to consult. test_input.py¶; Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest’s notice, add a file to the directory named test_input.py.; Below is an example for the psi4/tests/ci-property/test_input.py; from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the CMakeLists.txt.; The def test_ci_property contains the name of the test, now with underscores rather than hyphens.; def test_ identifies it to pytest as a test.; That part of the function name and the name of the file, test_input.py are",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:8374,test,test,8374,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,1,['test'],['test']
Testability,"gy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory. output.ref¶; When your test case is in final form, run it locally, rename the output to output.ref, and check it into the repository alongside input.dat.; While this isn’t used for any testing machinery, it can be handy for users or developers to consult. test_input.py¶; Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest’s notice, add a file to the directory named test_input.py.; Below is an example for the psi4/tests/ci-property/test_input.py; from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the CMakeLists.txt.; The def test_ci_property contains the name of the test, now with underscores rather than hyphens.; def test_ identifies it to pytest as a test.; That part of the function name and the name of the file, test_input.py are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the r",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:8374,test,test,8374,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,4,['test'],['test']
Testability,"gy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. tdscf-6; td-camb3lyp with DiskDF and method/basis specification. dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. cubeprop; RHF orbitals and density for water. dft-smoke; DFT Functional Smoke Test. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). scf-ecp; Water-Argon complex with ECP present; check of energies and forces. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. fci-h2o; 6-31G H2O Test FCI Energy Point. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-level-shift-uhf; SCF level shift on a UHF computation. linK-2; RKS Linear Exchange Algorithm test for benzene. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. sapt11; sapt example with orbital freezing with alkali metal and dMP2. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial g",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:7032,test,test,7032,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"gy. nbody_results[""intermediates_energy""] = trove[""energy""]. if not all(x is None for x in trove[""gradient""].values()):; nbody_results[""intermediates_gradient""] = trove[""gradient""]. if not all(x is None for x in trove[""hessian""].values()):; nbody_results[""intermediates_hessian""] = trove[""hessian""]. debug = False; if debug:; for k, v in nbody_results.items():; if isinstance(v, np.ndarray):; print(f""CLS-prepared results >>> {k} {v.size}""); elif isinstance(v, dict):; print(f""CLS-prepared results >>> {k} {len(v)}""); for k2, v2 in v.items():; if isinstance(v2, np.ndarray):; print(f""CLS-prepared results >>> {k2} {v2.size}""); else:; print(f""CLS-prepared results >>> {k2} {v2}""); else:; print(f""CLS-prepared results >>> {k} {v}""). return nbody_results. [docs] def get_results(self, client: Optional[""qcportal.FractalClient""] = None) -> AtomicResult:; """"""Return results as ManyBody-flavored QCSchema."""""". info = ""\n"" + p4util.banner(f"" ManyBody Results "", strNotOutfile=True) + ""\n""; core.print_out(info); logger.info(info). results = self.prepare_results(client=client); ret_energy = results.pop(""ret_energy""); ret_ptype = results.pop(""ret_ptype""); ret_gradient = results.pop(""ret_gradient"", None). # load QCVariables; qcvars = {; 'NUCLEAR REPULSION ENERGY': self.molecule.nuclear_repulsion_energy(),; 'NBODY NUMBER': len(self.task_list),; }. properties = {; ""calcinfo_natom"": self.molecule.natom(),; ""nuclear_repulsion_energy"": self.molecule.nuclear_repulsion_energy(),; ""return_energy"": ret_energy,; }. for k, val in results.items():; qcvars[k] = val. qcvars['CURRENT ENERGY'] = ret_energy; if self.driver == 'gradient':; qcvars['CURRENT GRADIENT'] = ret_ptype; properties[""return_gradient""] = ret_ptype; elif self.driver == 'hessian':; qcvars['CURRENT GRADIENT'] = ret_gradient; qcvars['CURRENT HESSIAN'] = ret_ptype; properties[""return_gradient""] = ret_gradient; properties[""return_hessian""] = ret_ptype. component_results = self.dict()['task_list']; for k, val in component_results.items():; val",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_nbody.html:89605,log,logger,89605,psi4manual/1.7.x/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_nbody.html,2,['log'],['logger']
Testability,"gy; Extrapolated water energies. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:15103,test,tests,15103,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['test'],['tests']
Testability,"g”, “A Ref Atoms”, “B Frag”, and “B Ref Atoms”. Type: string; Default: No Default. INTERFRAG_DIST_INV¶. Use 1/R for the interfragment stretching coordinate instead of R. Type: boolean; Default: false. INTERFRAG_HESS¶. Model Hessian to guess interfragment force constants. Type: string; Possible Values: DEFAULT, FISCHER_LIKE; Default: DEFAULT. INTERFRAG_MODE¶. When interfragment coordinates are present, use as reference points either principal axes or fixed linear combinations of atoms. Type: string; Possible Values: FIXED, PRINCIPAL_AXES; Default: FIXED. Misc.¶. OPT_RESTART¶. Restart the optimization from optking’s written history. Type: double; Default: 0. PRINT_TRAJECTORY_XYZ_FILE¶. Should an xyz trajectory file be kept (useful for visualization)?. Type: boolean; Default: false. SAVE_OPTIMIZATION¶. Save OptKing’s internal classes for possible restart upon error. Type: boolean; Default: false. TEST_B¶. Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B¶. Do test derivative B matrix?. Type: boolean; Default: false. WRITE_OPT_HISTORY¶. Write the full history to disk. Produces a non validated OptimizationResult. Type: boolean; Default: false. WRITE_OPT_RESULT¶. Write the optimization history / state to disc. Type: boolean; Default: false. WRITE_TRAJECTORY¶. Write Optimization Trajectory. Type: boolean; Default: false. table of contents. OPTKING; Optimization Algorithm; CARTESIAN_SYM_TOLERANCE; CONSECUTIVE_BACKSTEPS; CUSTOM_COORDS; DYNAMIC_LEVEL; ENSURE_BT_CONVERGENCE; EXT_FORCE_BEND; EXT_FORCE_CARTESIAN; EXT_FORCE_DIHEDRAL; EXT_FORCE_DISTANCE; EXT_FORCE_OOFP; FREEZE_ALL_DIHEDRALS; FROZEN_BEND; FROZEN_CARTESIAN; FROZEN_DIHEDRAL; FROZEN_DISTANCE; FROZEN_OOFP; GEOM_MAXITER; H_UPDATE_DEN_TOL; INTERFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT_MAX; INTRAFRAG_STEP_LIMIT_MIN; IRC_DIRECTION; IRC_POINTS; IRC_STEP_SIZE; OPT_COORDINATES; OPT_TYPE; PRINT_OPT_PARAMS; RANGED_BEND; RANGED_DIHEDRAL; RANGED_DISTANCE; RANGED_OOFP; RFO_FOLLOW_ROOT; RFO_NORM",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodir_options_c/module__optking.html:10894,test,test,10894,psi4manual/master/autodir_options_c/module__optking.html,https://psicode.org,https://psicode.org/psi4manual/master/autodir_options_c/module__optking.html,2,['test'],['test']
Testability,"g”, “A Ref Atoms”, “B Frag”, and “B Ref Atoms”. Type: string; Default: No Default. INTERFRAG_DIST_INV¶. Use 1/R for the interfragment stretching coordinate instead of R. Type: boolean; Default: false. INTERFRAG_HESS¶. Model Hessian to guess interfragment force constants. Type: string; Possible Values: DEFAULT, FISCHER_LIKE; Default: DEFAULT. INTERFRAG_MODE¶. When interfragment coordinates are present, use as reference points either principal axes or fixed linear combinations of atoms. Type: string; Possible Values: FIXED, PRINCIPAL_AXES; Default: FIXED. Misc.¶. OPT_RESTART¶. Restart the optimization from optking’s written history. Type: double; Default: 0. PRINT_TRAJECTORY_XYZ_FILE¶. Should an xyz trajectory file be kept (useful for visualization)?. Type: boolean; Default: false. SAVE_OPTIMIZATION¶. Save OptKing’s internal classes for possible restart upon error. Type: boolean; Default: false. TEST_B¶. Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B¶. Do test derivative B matrix?. Type: boolean; Default: false. WRITE_OPT_HISTORY¶. Write the full history to disk. Produces a non validated OptimizationResult. Type: boolean; Default: false. WRITE_OPT_RESULT¶. Write the optimization history / state to disc. Type: boolean; Default: false. WRITE_TRAJECTORY¶. Write Optimization Trajectory. Type: boolean; Default: false. table of contents. OPTKING; Optimization Algorithm; CARTESIAN_SYM_TOLERANCE; CONSECUTIVE_BACKSTEPS; DYNAMIC_LEVEL; ENSURE_BT_CONVERGENCE; EXT_FORCE_BEND; EXT_FORCE_CARTESIAN; EXT_FORCE_DIHEDRAL; EXT_FORCE_DISTANCE; EXT_FORCE_OOFP; FROZEN_BEND; FROZEN_CARTESIAN; FROZEN_DIHEDRAL; FROZEN_DISTANCE; FROZEN_OOFP; GEOM_MAXITER; H_UPDATE_DEN_TOL; INTERFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT_MAX; INTRAFRAG_STEP_LIMIT_MIN; IRC_DIRECTION; IRC_POINTS; IRC_STEP_SIZE; OPT_COORDINATES; OPT_TYPE; PRINT_OPT_PARAMS; RANGED_BEND; RANGED_DIHEDRAL; RANGED_DISTANCE; RANGED_OOFP; RFO_FOLLOW_ROOT; RFO_NORMALIZATION_MAX; RFO_ROOT; RSRFO_ALPHA_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__optking.html:10371,test,test,10371,psi4manual/1.7.x/autodir_options_c/module__optking.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__optking.html,6,['test'],['test']
Testability,"h EOM-CCSD. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc54; CCSD dipole with user-specified basis set. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. soscf-large; Second-order SCF convergnece: Benzene. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-grad2; MP2 cc-pVDZ gradient for the N",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:11464,test,test,11464,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"h Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. """"""; Module with PsiAPI helpers for PSIthon `{...}` syntax.; Also, many Python extensions to core classes:. - core (variable-related, gradient, python option),; - Wavefunction (variable-related, freq, Lagrangian, constructor, scratch file, serialization),; - Matrix (doublet, triplet),; - BasisSet (constructor); - JK (constructor); - VBase (grid); - OEProp (avail prop). """""". __all__ = [; ""basis_helper"",; ""pcm_helper"",; ""set_options"",; ""set_module_options"",; ""temp_circular_import_blocker"", # retire ASAP; ]. import os; import re; import sys; import uuid; import warnings; from collections import Counter; from itertools import product; from pathlib import Path; from tempfile import NamedTemporaryFile; from typing import Any, Callable, Dict, List, Optional, Tuple, Union. import numpy as np. import qcelemental as qcel; from psi4 import core; from psi4.driver import qcdb. from . import optproc; from .exceptions import TestComparisonError, ValidationError, UpgradeHelper. ## Python basis helps. @staticmethod; def _pybuild_basis(; mol: core.Molecule,; key: Optional[str] = None,; target: Optional[Union[str, Callable]] = None,; fitrole: str = ""ORBITAL"",; other: Optional[Union[str, Callable]] = None,; puream: int = -1,; return_atomlist: bool = False,; *,; quiet: bool = False,; ) -> Union[core.BasisSet, List[core.BasisSet]]:; """"""Build a primary or auxiliary basis set. Parameters; ----------; mol; Molecule for which to build the basis set instance.; key; {'BASIS', 'ORBITAL', 'DF_BASIS_SCF', 'DF_BASIS_MP2', 'DF_BASIS_CC', 'BASIS_RELATIVISTIC', 'DF_BASIS_SAD'}; Label (effectively Psi4 keyword) to append the basis on the molecule.; The primary basis set is indicated by any of values None or; ``""ORBITAL""`` or ``""BASIS""``.; target; Defines the basis set to be constructed. Can be a string (naming a; basis file) or a callable (providing shells or multiple basis files).; For auxiliary bases to be built entirely from primary default",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/python_helpers.html:2058,Test,TestComparisonError,2058,psi4manual/1.7.x/_modules/psi4/driver/p4util/python_helpers.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/python_helpers.html,1,['Test'],['TestComparisonError']
Testability,"h a variety of damping functions/parameters. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. fsapt-ext-abc; FSAPT with external charge on trimer. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. stability3; Test LDA stability analysis against QChem. scf-level-shift-cuhf; SCF level shift on a CUHF computation. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. mints-benchmark; run some BLAS benchmarks. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. nbody-vmfc-hessian; Computation of VMFC-corrected water trimer Hessian (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cc12; Single point energies of multiple excited states with EOM-CCSD. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:42257,benchmark,benchmark,42257,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,4,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"h for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_faq-1.html:3949,log,logo,3949,psi4manual/1.4.0/build_faq-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_faq-1.html,2,['log'],['logo']
Testability,"h for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/build_faq-1.html:3949,log,logo,3949,psi4manual/1.5.0/build_faq-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html,2,['log'],['logo']
Testability,"h job in task list; * arrange atomicresult data into e/d/g/h fields in compute_list and copy them into cbs tables. _assemble_cbs_components(); --------------------------; * fill in results from TROVE/trove into GRAND_NEED/cbsrec. _contract_scheme_orders(); -------------------------; * prepare arguments for xtpl fns based on desired E/D/G/H quantity. * form extrapolated values for all available E/D/G/H quantities; * return structure of extrapolated values and filled-in GRAND_NEED/cbsrec. _summary_table(); ----------------; * build string table of cbs results. * form cbs qcvars, inc'l number, E, DG, G, H as available; * form model, including detailed dict at atomicresult.extras[""cbs_record""]. * convert result to psi4.core.Matrix (non-energy). _cbs_schema_to_wfn(); --------------------; * build wfn from cbs mol and basis (always def2-svp) and module (if present); * push qcvars to P::e and wfn. * return e/g/h and wfn. """""". import copy; import logging; import re; import sys; from typing import TYPE_CHECKING, Any, Callable, Dict, List, Optional, Tuple, Union. import numpy as np. try:; from pydantic.v1 import Field, validator; except ImportError:; from pydantic import Field, validator. from qcelemental.models import AtomicResult, DriverEnum. from psi4 import core. from . import driver_util, p4util, qcdb; from .constants import pp; from .driver_cbs_helper import ( # lgtm[py/unused-import]; composite_procedures,; register_composite_function,; register_xtpl_function,; xtpl_procedures,; ); from .driver_util import UpgradeHelper; from .p4util.exceptions import ValidationError; from .procrouting.interface_cfour import cfour_psivar_list; from .task_base import AtomicComputer, BaseComputer, EnergyGradientHessianWfnReturn. if TYPE_CHECKING:; import qcportal. logger = logging.getLogger(__name__). zeta_values = 'dtq5678'; _zeta_val2sym = {k + 2: v for k, v in enumerate(zeta_values)}; _zeta_sym2val = {v: k for k, v in _zeta_val2sym.items()}; _addlremark = {'energy': '', 'gradient': ', ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/driver_cbs.html:4800,log,logging,4800,psi4manual/1.9.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/driver_cbs.html,4,['log'],['logging']
Testability,"h must be present in computed. (“omega” recc. for vibs.); toldict (Optional[Dict[str, float]]) – Tolerances for specific keys. Returns; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type; bool. Extra QCA Functions¶. psi4.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=<function _psi4_true_raise_handler>)¶; Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters. expected (Union[int, bool, str, List[int], numpy.ndarray]) – int, bool, str or array-like of same.; Reference value against which computed is compared.; computed (Union[int, bool, str, List[int], numpy.ndarray]) – int, bool, str or array-like of same.; Input value to compare against expected.; label (str) – Label for passed and error messages. Defaults to calling function name.; equal_phase (bool) – Compare computed or its opposite as equal.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Callable) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Returns. allclose (bool) – Returns True if expected and computed are equal; False otherwise.; message (str) – When return_message=True, also return passed or error message. Return type; Union[bool, Tuple[bool, str]]. Notes. Akin to np.array_equal.; For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use compare_recursive(). psi4.compare_recursive(expected, computed, *args, **kwargs)¶; Comparison function for recursively comparing mixed-type and nested structures such as dictionaries and lists.; See qcelemental.testing.compare_recursive() for details. table of contents. Test Suite; CTest and pytest, PSIthon and PsiAPI; Test Contents; Adding PSIthon Test Cases; CM",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:29234,log,log,29234,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,1,['log'],['log']
Testability,"h n=2-25. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega= (589 355 nm). nbo; Generation of NBO file. cc54; CCSD dipole with user-specified basis set. scf-guess-read3; Test if the the guess read in the same basis converges. scf-upcast-custom-basis; test scf castup with custom basis sets. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. fci-dipole; 6-31G H2O Test FCI Energy Point. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). fnocc5",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:22488,test,test,22488,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"h(); parsed_pcm = pcmsolver.parse_pcm_input(fl.name); extras.register_scratch_file(fl.name). with NamedTemporaryFile(mode=""w+t"", delete=False) as fl:; fl.write(parsed_pcm); core.set_local_option(""PCM"", ""PCMSOLVER_PARSED_FNAME"", fl.name); extras.register_scratch_file(fl.name) # retain with -m (messy) option. def _basname(name: str) -> str:; """"""Imitates :py:meth:`core.BasisSet.make_filename` without the gbs extension.""""""; return name.lower().replace('+', 'p').replace('*', 's').replace('(', '_').replace(')', '_').replace(',', '_'). [docs]; def temp_circular_import_blocker():; pass. [docs]; def basis_helper(block: str, name: str = '', key: str = 'BASIS', set_option: bool = True):; """"""Helper to specify a custom basis set in PsiAPI mode. This function forms a basis specification function from *block*; and associates it with keyword *key* under handle *name*. Registers; the basis spec with Psi4 so that it can be applied again to future; molecules. For usage, see :srcsample:`mints2`, :srcsample:`mints9`, and; :srcsample:`cc54` test cases. Parameters; ----------; block; Text that goes in a PSIthon ``basis {...}`` block.; name; Name label to associated with basis specified by `block`.; key; Basis keyword specified by `block`.; set_option; When True, execute the equivalent of ``set key name`` or ``set_option({key: name})``. When False, skip execution. """"""; key = key.upper(); name = ('anonymous' + str(uuid.uuid4())[:8]) if name == '' else name; cleanbas = _basname(name).replace('-', '') # further remove hyphens so can be function name; block = qcel.util.filter_comments(block); command_lines = re.split('\n', block). symbol_re = re.compile(r'^\s*assign\s+(?P<symbol>[A-Z]{1,3})\s+(?P<basis>[-+*\(\)\w]+)\s*$', re.IGNORECASE); label_re = re.compile(; r'^\s*assign\s+(?P<label>(?P<symbol>[A-Z]{1,3})(?:(_\w+)|(\d+))?)\s+(?P<basis>[-+*\(\)\w]+)\s*$',; re.IGNORECASE); all_re = re.compile(r'^\s*assign\s+(?P<basis>[-+*\(\)\w]+)\s*$', re.IGNORECASE); basislabel = re.compile(r'\s*\[\s*([-*\(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/python_helpers.html:19924,test,test,19924,psi4manual/1.8.x/_modules/psi4/driver/p4util/python_helpers.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/python_helpers.html,2,['test'],['test']
Testability,"h2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). cc51; EOM-CC3/cc-pVTZ on H2O. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. psimrcc-fd-freq1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dft-pbe0-2; Internal match to psi4, test",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:6070,test,tested,6070,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['tested']
Testability,"hane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. sapt11; sapt example with orbital freezing with alkali metal and dMP2. scf-guess-read2; Test if the the guess read in the same basis converges. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. mints-benchmark; run some BLAS benchmarks. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. linK-1; RHF Linear Exchange Algorithm test for water. fci-h2o-2; 6-31G H2O Test FCI Energy Point. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. pr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:2661,test,test,2661,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"hanges are needed, git tag -d v1.8.2 to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don’t linger.; Start the draft parts of Publish GitHub postrelease from the backported PRs assembled here. Tweak Conda for postrelease¶. Start a PR to https://github.com/conda-forge/psi4-feedstock . Always store the PR branch on your; fork, never on the conda-forge feedstock (or your branch itself will get publically packaged).; https://github.com/conda-forge/psi4-feedstock/pull/15 is an example. Always: edit version and commit jinja variables.; Possibly: edit source/url field for trial locations.; Always: edit sha256 jinja variable from e.g., curl -sL https://github.com/psi4/psi4/archive/v1.8.2.tar.gz | openssl sha256; Always: edit build/number. Either reset to 0 if version increments or bump if version doesn’t increment.; Possibly: uncomment skip: true  # [py != 310] if you want to test one Python version on all; architectures before the whole build matrix (currently 16 builds). After editing this (and; opening the PR), you’ll have to issue a comment @conda-forge-admin, please rerender for the; matrix slimming to take effect.; Possibly: remove any old patches that are now in the main codebase.; Possibly: add in or remove any dependency or ecosystem packages.; Possibly: for any relevant addition, make sure -D CMAKE_INSIST_FIND_PACKAGE_<project>=ON or; -D ENABLE_<project>=ON is set in build.sh and bld.bat.; Possibly: add or release version constraints or architecture constraints (e.g., [not win]) on packages. Submit the PR and rerender (cmd above). Monitor the CI.; When all CI lanes are passing and the tag is final on the maintenance branch, rerender (may be; no-op) and merge the PR.; After all the packages are built on main and show up at https://anaconda.org/conda-forge/psi4/files; with a couple downloads, this means they’re been mirrored and are generally installable. Announce; o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:7846,test,test,7846,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['test'],['test']
Testability,"hannel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.6 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=0.1.12 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 –channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.6 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=0.1.12 -c psi4/label/dev. Troubleshooting¶. If the target computer doesn’t have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the PSI4 conda package won’t work.; 1; 2; 3; 4; 5; 6# unsuitable computer; >>> ldd --version; ldd (GNU libc) 2.5; # suitable computer; >>> ldd --version; ldd (GNU libc) 2.17. It is of greatest importance that the PSI4 executable be linked against conda libpython.so not against any system libpython.so. This is arranged by setting RPATH to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda PSI4 executable is not vulnerable to interference from your LD_LIBRARY_PATH settings. Below shows a well-linked executable. no libraries “not found”; fundamen",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/conda-1.html:21715,sandbox,sandbox,21715,psi4manual/1.3.2/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/conda-1.html,2,['sandbox'],['sandbox']
Testability,"haped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark. 'RSE42' [E. Soydas",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_available_databases.html:6639,benchmark,benchmark,6639,psi4manual/1.7.x/autodoc_available_databases.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_available_databases.html,2,['benchmark'],['benchmark']
Testability,"hare/psi4). Expert mode. -m, --messy¶; Leave temporary files after the run is completed. --memory <memory>¶. The amount of memory to use. Can be specified with units (e.g., ‘10MB’) otherwise bytes is assumed. -n <threads>, --nthread <threads>¶; Number of threads to use (overrides OMP_NUM_THREADS).; Also controls the testing parallelism with pytest. -o <filename>, --output <filename>¶; Output file name. Use stdout as <filename> to redirect; to the screen. Default: when the input filename is “input.dat”,; then the output filename defaults to “output.dat”. Otherwise, the; output filename defaults to the the input filename with; “.out” extension. --psiapi-path¶; Generates a bash command to source correct Python interpreter and path for python -c ""import psi4"". --qcschema¶; Runs input files as QCSchema. Can either be JSON or MessagePack input. -s <name>, --scratch <name>¶; This overrides the value of PSI_SCRATCH and provides; a path to the location of scratch files. -t <subset>, --test <subset>¶; Runs pytest tests. If pytest-xdist installed, parallel with -n. -v, --verbose¶; Print the Psithon to Python translation of the input file. -V, --version¶; Print version information.; # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. Environment Variables¶; These environment variables will influence PSI4‘s behavior. CONDA_PREFIX¶; Set when a conda environment is activated. Note that if PSI4 has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. HOST¶; Set when a conda environment with conda compilers is activated. Used; when compatibly building PSI4 from source against conda; dependencies. MKL_NUM_THREADS¶; Number of threads to use by operations with Intel threaded BLAS libraries. OMP_NESTED¶; Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-le",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/external-1.html:19726,test,test,19726,psi4manual/1.4.0/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/external-1.html,8,['test'],"['test', 'tests']"
Testability,"has one translated pattern and another another; perr = self.compute_statistics(mc_translator[mc], benchmark=benchmark, sset=ss,; failoninc=failoninc, verbose=False, returnindiv=False); serrors[mc][ss][self.dbse] = format_errors(perr[self.dbse], mode=3); if not failoninc:; mcsscounts = self.get_missing_reactions(mc_translator[mc], sset=ss); serrors[mc][ss][self.dbse]['tgtcnt'] = mcsscounts[self.dbse][0]; serrors[mc][ss][self.dbse]['misscnt'] = len(mcsscounts[self.dbse][1]); if autothread:; if ('sset' in autothread and ss in autothread['sset']) or ('sset' not in autothread):; mcssplots = self.plot_flat(mc_translator[mc], benchmark=benchmark, sset=ss,; failoninc=failoninc, color='sapt', xlimit=xlimit, xlines=xlines, view=False,; saveas='flat_' + '-'.join([self.dbse, ss, mc]), relpath=True, graphicsformat=['pdf']); serrors[mc][ss][self.dbse]['plotflat'] = mcssplots['pdf']; if autoliliowa and ss == 'default':; mcssplots = self.plot_liliowa(mc_translator[mc], benchmark=benchmark,; failoninc=failoninc, xlimit=ialimit, view=False,; saveas='liliowa_' + '-'.join([self.dbse, ss, mc]), relpath=True, graphicsformat=['pdf']); serrors[mc][ss][self.dbse]['plotliliowa'] = mcssplots['pdf']; for db in self.dbdict.keys():; if perr[db] is None:; serrors[mc][ss][db] = None; else:; serrors[mc][ss][db] = format_errors(perr[db], mode=3); if not failoninc:; serrors[mc][ss][db]['tgtcnt'] = mcsscounts[db][0]; serrors[mc][ss][db]['misscnt'] = len(mcsscounts[db][1]); else:; serrors[mc][ss][self.dbse] = format_errors(initialize_errors(), mode=3); for db in self.dbdict.keys():; serrors[mc][ss][db] = format_errors(initialize_errors(), mode=3); for key in serrors.keys():; print(""""""{:>35}{:>35}{}"""""".format(key, mc_translator[key], serrors[key]['default'][self.dbse]['mae'])). # find indices that would be neglected in a single sweep over table_generic; keysinplan = set(sum([col[-1].keys() for col in columnplan], rowplan)); obvious = {'dbse': dbse, 'sset': sset, 'mtd': mtd, 'opt': opt, 'bas': bas, 'err'",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:98890,benchmark,benchmark,98890,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,2,['benchmark'],['benchmark']
Testability,"hat are you doing. Default: STANDARD except for ROHF-CCSD(T) and ROHF-MP4 calculations for which SEMICANONICAL is the default. Type: string; Possible Values: STANDARD, SEMICANONICAL; Default: STANDARD. CFOUR_PERT_ORB¶. Specifies the type of perturbed orbitals used in energy derivative calculations. STANDARD means that the gradient formulation assumes that the perturbed orbitals are not those in which the (perturbed) Fock matrix is diagonal. CANONICAL means that the perturbed orbitals are assumed to be canonical. This keyword is set automatically to CANONICAL in derivative calculations with methods which include triple excitations (MBPT[4]/MP4, CCSD+T[CCSD], CCSD[T], QCISD[T] and all iterative schemes like CCSDT-n and CC3) apart from CCSDT. IJ_CANONICAL requests a canonical perturbed-orbital treatment only for the occupied-occupied block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for all methods with triples in case of relaxed derivatives. Type: string; Possible Values: STANDARD, CANONICAL, IJ_CANONICAL; Default: No Default. CFOUR_POINTS¶. Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided numerical differentiation in the finite difference evaluation of the Hessian. Two-sided numerical differentiation is considerably more accurate than the single-sided method, and its use is strongly recommended for production work. Type: string; Possible Values: SINGLE, DOUBLE; Default: DOUBLE. CFOUR_PRINT¶. Controls the amount of printing in the energy and energy derivative calculation programs. Using a value of 1 will produce a modest amount of additional output over the default value of 0, which includes some useful infor",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__cfour-1.html:45127,test,testing,45127,psi4manual/1.3.2/autodir_options_c/module__cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__cfour-1.html,26,['test'],['testing']
Testability,"hat is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-them",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:6093,test,testing,6093,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,1,['test'],['testing']
Testability,"have developed an automatic procedure; for IP fitting of LRC functionals, based on a modified Regula-Falsi method. To; perform IP fitting, one simply calls the ip_fitting() Python macro, after; setting up a standard LRC UKS computation. A representative example is:; memory 512 MB. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c1 # IP fitting must be run in C1 symmetry; }. set {; reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; dft_functional wb97; }. # Arguments are molecule object, minimum omega, maximum omega; ip_fitting(h2o, 0.4, 2.0). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various values; of , though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; . The procedure can also be assisted by providing a tighter guess; for the bounds of . This small test case has a tuned; of 1.700, hence the bounds of 0.4 and 2.0. Larger systems,; particularly conjugated systems, will typically have an optimized ; between 0.1 and 0.5. Fractional Particle Curves¶; The behavior of the electronic energy and HOMO energy across fractional numbers; of electrons is extremely useful for elucidating the MSIE behavior of various; functional technologies. PSI4 features an efficient fractional-particle DFT; code, written into the UKS spin specialization. Due to a combination of DIIS and; reuse of integrals/guess orbitals across a range of fractional occupations, this; code is able to perform fractional occupation curves for systems with up to 60; atoms, across a wide range of the particle number .; Two python macros exist for this code. The first is frac_traverse(), which is; used to investigate the fractional occupation behavior within one electron above; and below the neutral. An example is:; memory 512 MB. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/dft-1.html:19407,test,test,19407,psi4manual/4.0b2/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/dft-1.html,8,['test'],['test']
Testability,"he CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax example",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:19442,test,testing,19442,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['test'],['testing']
Testability,"he RHF/DZP level of theory. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. sapt11; sapt example with orbital freezing with alkali metal and dMP2. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. cbs-delta-energy; Extrapolated energies with delta correction. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent b",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:8348,test,test,8348,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"he cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; 1; 2; 3; 4; 5# all equivalent. cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; either be called directly, as in the first example, or the convenience; syntax of the equivalent second example can be used.; Another very useful and powerful feature of PSI4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; 1database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. table of contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/psithoninput-1.html:17237,benchmark,benchmark,17237,psi4manual/1.2.1/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/psithoninput-1.html,2,['benchmark'],['benchmark']
Testability,"he dipole polarizability for water with custom basis set. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. nbody-he-4b; MP2/aug-cc-pvDZ many body energies of an arbitrary Helium complex, addressing 4-body formulas. dfremp-2; density fitted REMP/cc-pVDZ energies for the CH3 radical. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfcasscf-sp; CASSCF/6-31G** energy point. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. scf-level-shift-rohf; SCF level shift on an ROHF computation. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. scf-response3; UHF Dipole Polarizability Test. ddd-deriv; Sample HF/cc-pVDZ H2O computation all derivatives. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. sapt8;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:2967,test,test,2967,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"he subspace defined by the trial vectors.; The subspace analog of the NxN hermitian EVP is diagonalized and left \((X-Y)\); and right \((X+Y)\) eigenvectors of the NxN non-hermitian EVP are approximated.; Residual vectors are formed for both and the guess space is augmented with; two correction vectors per iteration. The advantages and properties of this; algorithm are described in the literature [stratmann:1998] . Parameters:. engine (Type[SolverEngine]) – The engine drive all operations involving data structures that have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done :",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html:2084,log,logging,2084,psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html,8,['log'],['logging']
Testability,"he validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory. output.ref¶; When your test case is in final form, run it locally, rename the output to output.ref, and check it into the repository alongside input.dat.; While this isn’t used for any testing machinery, it can be handy for users or developers to consult. test_input.py¶; Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest’s notice, add a file to the directory named test_input.py.; Below is an example for the psi4/tests/ci-property/test_input.py; from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the CMakeLists.txt.; The def test_ci_property contains the name of the test, now with underscores rather than hyphens.; def test_ identifies it to pytest as a test.; That part of the function name and the name of the file, test_input.py are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ctest_runner(__file__).; This uses QCEngine machinery to execute python psi4 input.dat.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files do need to be registered in psi4/psi4/CMakeLists.txt.; Finally, the label string passed to CTest is here handed to pytest, with a few changes:. psi added automatically, so exclude it when copying from CTest CMakeLists.txt; cli added automatically to distinguish CTest origin from deliberate pytest origin, which have api added; smoke used instead of CTest smoketests; quick used instead of CTest quicktests; long used instead of CTest longtests; addon and <name-of-addon> added automatically when @uusing(""<name-of-addon>"") de",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:9211,test,test,9211,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,4,['test'],['test']
Testability,"he; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/cfour-1.html:7406,test,tests,7406,psi4manual/1.4.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html,9,['test'],['tests']
Testability,"he; Psi4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cfour-1.html:7419,test,tests,7419,psi4manual/1.0.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cfour-1.html,2,['test'],['tests']
Testability,"he; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:3067,test,tests,3067,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,8,['test'],"['test', 'testing', 'tests']"
Testability,"he; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run Psi4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that Python,; CMake, NumPy, and Libint (and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (2.7, 3.5, or 3.6) https://www.python.org/; CMake (3.3+) http://www.cmake.org/download/;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:3065,test,tests,3065,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,8,['test'],"['test', 'testing', 'tests']"
Testability,"he; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++14 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.6 or 3.7) https://www.python.org/;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:3474,test,tests,3474,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,8,['test'],"['test', 'testing', 'tests']"
Testability,"helium tetramer. oremp-grad1; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. scf-occ; force occupations in scf. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. oremp-grad2; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. single point energies were independently checked using the original wavels code. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. dft-freq-analytic1; Analytic SVWN frequencies, compared to finite difference values. mbis-1; MBIS calculation on H2O. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. pubchem2; Superficial test of PubChem interface. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. mints9; A test of the basis specification. Various basis sets are specified outright and in b",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:34335,test,test,34335,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"hem gets the smoke label. psi4/doc/sphinxman/. Create a new .rst page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; psi4/doc/sphinxman/source/interfacing.rst.; Add a bullet to psi4/doc/sphinxman/source/build_planning.rst; Add the new page to the long list in; psi4/doc/sphinxman/CMakeLists.txt. If there are any files or; images referred to, add them to the file, too, following precedent. else¶. Build conda packages. Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. PSI4 and Add-On Projects Working Together. Obligations of the External Project owners are to:. allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the PSI4 build and so the installed project can; be readily detected by PSI4 or any interested party (through a; CMake imported target).; provide us a tag at a tested commit/version number so their; development may be ongoing.; communicate with us when they’ve made improvements and minted; a new tag. In return, for Add-Ons the PSI4 project will:. leave control of their code under your purview.; maintain any interfacing code needed.; regularly run integration tests between PSI4 and your code.; build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; conda install addon --channel psi4.; provide a development sandbox for your code through PSI4 plugins.; provide conda download counts independent of PSI4. How to name keywords in psi4/src/read_options.cc¶; A few guidelines for standardizing option names among modules. TRIPLES (not trip), TRIPLETS (not trip), SINGLES (not sing),; SINGLETS (not sing); CONVERGENCE (not conv, not converge) and TOLERANCE (not tol); Convergence of a method should be governed by an E_CONVERGENCE for; energy and either a D_CONVERGENCE for density or a R_CONVERGENCE; for resid",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html:5525,test,tested,5525,psi4manual/1.4.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html,9,['test'],['tested']
Testability,"hem gets the smoke label. psi4/doc/sphinxman/; Create a new .rst page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; psi4/doc/sphinxman/source/interfacing.rst.; Add a bullet to psi4/doc/sphinxman/source/build_planning.rst; Add the new page to the long list in; psi4/doc/sphinxman/CMakeLists.txt. If there are any files or; images referred to, add them to the file, too, following precedent. else¶. Build conda packages; Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. PSI4 and Add-On Projects Working Together; Obligations of the External Project owners are to:; allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the PSI4 build and so the installed project can; be readily detected by PSI4 or any interested party (through a; CMake imported target).; provide us a tag at a tested commit/version number so their; development may be ongoing.; communicate with us when they’ve made improvements and minted; a new tag. In return, for Add-Ons the PSI4 project will:; leave control of their code under your purview.; maintain any interfacing code needed.; regularly run integration tests between PSI4 and your code.; build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; conda install addon --channel psi4.; provide a development sandbox for your code through PSI4 plugins.; provide conda download counts independent of PSI4. How to name keywords in psi4/src/read_options.cc¶; A few guidelines for standardizing option names among modules. TRIPLES (not trip), TRIPLETS (not trip), SINGLES (not sing),; SINGLETS (not sing); CONVERGENCE (not conv, not converge) and TOLERANCE (not tol); Convergence of a method should be governed by an E_CONVERGENCE for; energy and either a D_CONVERGENCE for density or a R_CONVERGENCE; for resid",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/manage_addon-1.html:5518,test,tested,5518,psi4manual/1.2.1/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/manage_addon-1.html,4,['test'],['tested']
Testability,"hem gets the smoke label. psi4/doc/sphinxman/; Create a new .rst page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; psi4/doc/sphinxman/source/interfacing.rst.; Add a bullet to psi4/doc/sphinxman/source/build_planning.rst; Add the new page to the long list in; psi4/doc/sphinxman/CMakeLists.txt. If there are any files or; images referred to, add them to the file, too, following precedent. else¶. Build conda packages; Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. PSI4 and Add-On Projects Working Together; Obligations of the External Project owners are to:; allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the PSI4 build and so the installed project can; be readily detected by PSI4 or any interested party (through a; CMake imported target).; provide us a tag at a tested commit/version number so their; development may be ongoing.; communicate with us when they’ve made improvements and minted; a new tag. In return, for Add-Ons the PSI4 project will:; leave control of their code under your purview.; maintain any interfacing code needed.; regularly run integration tests between PSI4 and your code.; build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; conda install addon --channel psi4.; provide a development sandbox for your code through PSI4 plugins.; provide conda download counts independent of PSI4. table of contents. Adding Add-Ons; How to use an Add-On’s name in directory structure, build, and distribution; How to integrate an Add-On into build, testing, and docs; else. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Managing: Git, Conda, CMake and all that. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; .",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/manage_addon-1.html:5516,test,tested,5516,psi4manual/1.1.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/manage_addon-1.html,2,['test'],['tested']
Testability,"hem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. ACENES¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HTR40¶. Database of Hydrogen transfer reactions.; Geometries from Bozkaya and Sherrill.; Reference energies from Bozkaya and Sherrill. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm (broken link). cp 'o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_available_databases-1.html:5047,benchmark,benchmark,5047,psi4manual/1.5.0/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_available_databases-1.html,4,['benchmark'],['benchmark']
Testability,"hemistry *modelchem* versus *benchmark* over; subset *sset* over all component databases. Computes histogram; of errors and gaussian distribution. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares disthist diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. >>>; """"""; # compute errors; mc = modelchem; errors, indiv = self.compute_statistics(mc, benchmark=benchmark, sset=sset,; failoninc=failoninc, verbose=verbose, returnindiv=True); # repackage; dbdat = []; for db in self.dbdict.keys():; if indiv[db] is not None:; for rxn in indiv[db].keys():; dbdat.append(indiv[db][rxn][0]); title = """"""%s vs %s for %s subset %s"""""" % (mc, benchmark, self.dbse, sset); me = errors[self.dbse]['me']; stde = errors[self.dbse]['stde']; # generate matplotlib instructions and call or print; try:; from . import mpl; import matplotlib.pyplot as plt; except ImportError:; # if not running from Canopy, print line to execute from Canopy; print(""""""filedict = mpl.disthist(%s,\n title='%s',\n xtitle='%s'\n me=%s,\n stde=%s,\n saveas=%s,\n relpath=%s\n graphicsformat=%s)\n\n"""""" %; (dbdat, title, xtitle, me, stde, repr(saveas), repr(relpath), repr(graphicsformat))); else:; # if running from Canopy, call mpl directly; filedict = mpl.disthist(dbdat, title=title, xtitle=xtitle, me=me, stde=stde,; view=view,; saveas=saveas, relpath=relpath, graphicsformat=graphicsformat); return filedict. [docs] def plot_modelchems(self, modelchem, benchmark='default', mbenchmark=None,; sset='default', msset=None, failoninc=True, verbose=False, color='sapt',; xlimit=4.0, labeled=True, view=True,; mousetext=None, mouselink=None, mo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:75800,benchmark,benchmark,75800,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"herefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it’s a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents¶. Most PSI4 tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite.; Most tests should store reference results (from literature or another implementation or a carefully run PSI4 calculation),; run quantum chemistry, then apply one or more of the Comparison Functions so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, compare_matrices(refmat, mat, ...) while in the latter it’s asserted, like assert compare_matrices(refmat, mat, ...).; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they’re NumPy functions.; In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, etc..; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for compare_values() and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, etc.).; Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. Adding PSIthon Test Cases¶; T",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:3685,test,testing,3685,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['test'],['testing']
Testability,"herwise (and by default), save and print the previous geometry at which was computed the gradient that satisfied the convergence criteria. Type: boolean; Default: false. FIXED_COORD_FORCE_CONSTANT¶. In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. KEEP_INTCOS¶. Keep internal coordinate definition file. Type: boolean; Default: false. LINESEARCH_STATIC_MAX¶. If doing a static line search, this fixes the largest step, whose largest change in an internal coordinate is set to this value (in au). Type: double; Default: 0.100. LINESEARCH_STATIC_MIN¶. If doing a static line search, this fixes the shortest step, whose largest change in an internal coordinate is set to this value (in au). Type: double; Default: 0.001. LINESEARCH_STATIC_N¶. If doing a static line search, scan this many points. Type: integer; Default: 8. TEST_B¶. Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B¶. Do test derivative B matrix?. Type: boolean; Default: false. Table Of Contents. OPTKING; Optimization Algorithm; CONSECUTIVE_BACKSTEPS; DYNAMIC_LEVEL; ENSURE_BT_CONVERGENCE; FIXED_BEND; FIXED_DIHEDRAL; FIXED_DISTANCE; FROZEN_BEND; FROZEN_CARTESIAN; FROZEN_DIHEDRAL; FROZEN_DISTANCE; GEOM_MAXITER; H_UPDATE_DEN_TOL; INTERFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT_MAX; INTRAFRAG_STEP_LIMIT_MIN; IRC_DIRECTION; IRC_STEP_SIZE; IRC_STOP; OPT_COORDINATES; OPT_TYPE; PRINT_OPT_PARAMS; PRINT_TRAJECTORY_XYZ_FILE; RFO_FOLLOW_ROOT; RFO_NORMALIZATION_MAX; RFO_ROOT; RSRFO_ALPHA_MAX; STEP_TYPE. Convergence Control; FLEXIBLE_G_CONVERGENCE; G_CONVERGENCE; MAX_DISP_G_CONVERGENCE; MAX_ENERGY_G_CONVERGENCE; MAX_FORCE_G_CONVERGENCE; RMS_DISP_G_CONVERGENCE; RMS_FORCE_G_CONVERGENCE. Hessian Update; CART_HESS_READ; FULL_HESS_EVERY; HESS_UPDATE; HESS_UPDATE_LIMIT; HESS_UPDATE_LIMIT_MAX; HESS_UPDATE_LIMIT_SCALE; HESS_UPDATE_USE_LAST; INT",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__optking-1.html:9659,test,test,9659,psi4manual/1.0.0/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodir_options_c/module__optking-1.html,2,['test'],['test']
Testability,"herwise (and by default), save and print the previous geometry at which was computed the gradient that satisfied the convergence criteria. Type: boolean; Default: false. FIXED_COORD_FORCE_CONSTANT¶. In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. KEEP_INTCOS¶. Keep internal coordinate definition file. Type: boolean; Default: false. LINESEARCH_STATIC_MAX¶. If doing a static line search, this fixes the largest step, whose largest change in an internal coordinate is set to this value (in au). Type: double; Default: 0.100. LINESEARCH_STATIC_MIN¶. If doing a static line search, this fixes the shortest step, whose largest change in an internal coordinate is set to this value (in au). Type: double; Default: 0.001. LINESEARCH_STATIC_N¶. If doing a static line search, scan this many points. Type: integer; Default: 8. TEST_B¶. Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B¶. Do test derivative B matrix?. Type: boolean; Default: false. table of contents. OPTKING; Optimization Algorithm; CONSECUTIVE_BACKSTEPS; DYNAMIC_LEVEL; ENSURE_BT_CONVERGENCE; FIXED_BEND; FIXED_DIHEDRAL; FIXED_DISTANCE; FROZEN_BEND; FROZEN_CARTESIAN; FROZEN_DIHEDRAL; FROZEN_DISTANCE; GEOM_MAXITER; H_UPDATE_DEN_TOL; INTERFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT; INTRAFRAG_STEP_LIMIT_MAX; INTRAFRAG_STEP_LIMIT_MIN; IRC_DIRECTION; IRC_STEP_SIZE; IRC_STOP; OPT_COORDINATES; OPT_TYPE; PRINT_OPT_PARAMS; PRINT_TRAJECTORY_XYZ_FILE; RFO_FOLLOW_ROOT; RFO_NORMALIZATION_MAX; RFO_ROOT; RSRFO_ALPHA_MAX; STEP_TYPE; SYMM_TOL. Convergence Control; FLEXIBLE_G_CONVERGENCE; G_CONVERGENCE; MAX_DISP_G_CONVERGENCE; MAX_ENERGY_G_CONVERGENCE; MAX_FORCE_G_CONVERGENCE; RMS_DISP_G_CONVERGENCE; RMS_FORCE_G_CONVERGENCE. Hessian Update; CART_HESS_READ; FULL_HESS_EVERY; HESS_UPDATE; HESS_UPDATE_LIMIT; HESS_UPDATE_LIMIT_MAX; HESS_UPDATE_LIMIT_SCALE; HESS_UPDATE_USE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__optking-1.html:9891,test,test,9891,psi4manual/1.3.2/autodir_options_c/module__optking-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodir_options_c/module__optking-1.html,16,['test'],['test']
Testability,"hich_import(""psixas"", return_bool=True),; #""mctc-gcp"": psi4_which(""mctc-gcp"", return_bool=True),; }. def addons(request: str = None) -> Union[bool, List[str]]:; """"""Returns boolean of whether Add-On *request* is available to Psi4,; either compiled in or searchable in $PSIPATH:$PATH, as relevant. If; *request* not passed, returns list of available Add-Ons: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...` . """"""; def strike(text):; return ''.join(itertools.chain.from_iterable(zip(text, itertools.repeat('\u0336')))). if request is None:; return [(k if v else strike(k)) for k, v in sorted(_addons_.items())]; return _addons_[request.lower()]. # Testing; def test(extent: str = ""full"", extras: List = None) -> int:; """"""Runs a test suite through pytest. Parameters; ----------; extent; {'smoke', 'quick', 'full', 'long'}; All choices are defined, but choices may be redundant in some projects. * _smoke_ will be minimal ""is-working?"" test(s).; * _quick_ will be as much coverage as can be got quickly, approx. 1/3 tests.; * _full_ will be the whole test suite, less some exceedingly long outliers.; * _long_ will be the whole test suite.; extras; Additional arguments to pass to `pytest`. Returns; -------; int; Return code from `pytest.main()`. 0 for pass, 1 for fail. """"""; try:; import pytest; except ImportError:; raise RuntimeError('Testing module `pytest` is not installed. Run `conda install pytest`'); abs_test_dir = os.path.sep.join([os.path.abspath(os.path.dirname(__file__)), ""tests""]). command = ['-rws', '-v']; if extent.lower() == 'smoke':; command.extend(['-m', 'smoke']); elif extent.lower() == 'quick':; command.extend(['-m', 'quick or smoke']); elif extent.lower() == 'full':; command.extend(['-m', 'not long']); elif extent.lower() == 'long':; pass; if extras is not None:; command.extend(extras); command.extend(['--capture=sys', abs_test_dir]). retcode = pytest.main(command); return retcode. [docs]def set_output_file(ofile: str, append: bool = False, *, loglevel: int = 20, execute: bool = Tru",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/extras.html:6163,test,tests,6163,psi4manual/1.7.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/extras.html,2,['test'],['tests']
Testability,"hin tolerance; False otherwise. Return type:; bool. Extra QCA Functions¶. psi4.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=<function _psi4_true_raise_handler>)¶; Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters:. expected (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Reference value against which computed is compared.; computed (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Input value to compare against expected.; label (str) – Label for passed and error messages. Defaults to calling function name.; equal_phase (bool) – Compare computed or its opposite as equal.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Callable) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Returns:. allclose (bool) – Returns True if expected and computed are equal; False otherwise.; message (str) – When return_message=True, also return passed or error message. Return type:; Union[bool, Tuple[bool, str]]. Notes. Akin to numpy.array_equal().; For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use compare_recursive(). psi4.compare_recursive(expected, computed, *args, **kwargs)¶; Comparison function for recursively comparing mixed-type and nested structures such as dictionaries and lists.; See qcelemental.testing.compare_recursive() for details. table of contents. Test Suite; CTest and pytest, PSIthon and PsiAPI; Test Contents; Adding PSIthon Test Cases; CMakeLists.txt; input.dat; output.ref; test_input.py; Running for Debugging. Adding PsiAPI Test Cases; Running for Debugging. Comparison Functions; Plain Old Data; Objects; File Formats; Extra QCA Functi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:29645,test,testing,29645,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,1,['test'],['testing']
Testability,"hlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 1; …; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 22. JSCH¶. Database (Hobza) of interaction energies for nucelobase pairs.; Geometries and reference interaction energies from Jurecka et al. PCCP 8 1985 (2006).; Corrections implemented from foot",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_available_databases.html:8487,test,testing,8487,psi4manual/master/autodoc_available_databases.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_available_databases.html,2,['test'],['testing']
Testability,"hon tests that don’t need extra files to run are easily run from <objdir> via stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out.; All PSIthon tests are runable through CTest, and output files appear in <objdir>/tests/<test-name>/output.dat and stdout results appear in <objdir>/Testing/Temporary/LastTest.log*. Adding PsiAPI Test Cases¶; To create a new test case, either create a new file or add to an existing file under psi4/tests/pytests. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; A test file may contain many tests, each of which is an ordinary Python function with name starting test_. This is how pytest knows to collect it.; No registration required to bring a test to pytest’s attention.; No registration required to bring a test to CMake’s attention. If a test needs additional files, register them in psi4/psi4/CMakeLists.txt. A few notes on test contents:. Import testing functions from utils and use Python assert: assert compare_values(expected, computed, ...).; Don’t worry about cleaning up files or resetting options. A function in psi4/tests/pytests/conftest.py does this automatically between every test.; Especially if using data or functions from outside a test, run a variety of tests at different pytest -n <N> levels to mix up test ordering. If tests fail that pass when run alone, you’ve got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. For every new test file, add pytestmark = [pytest.mark.psi, pytest.mark.api] at the top.; This ensures that every test has the psi mark and every PsiAPI test has the api mark to contrast with PSIthon tests with cli mark.; There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m <mark>; vs. ctest -L <mark>) rather than just by name (pytes",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:11495,test,test,11495,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['test'],['test']
Testability,"hown above.; Those additional input files do need to be registered in psi4/psi4/CMakeLists.txt.; Finally, the label string passed to CTest is here handed to pytest, with a few changes:. psi added automatically, so exclude it when copying from CTest CMakeLists.txt; cli added automatically to distinguish CTest origin from deliberate pytest origin, which have api added; smoke used instead of CTest smoketests; quick used instead of CTest quicktests; long used instead of CTest longtests; addon and <name-of-addon> added automatically when @uusing(""<name-of-addon>"") decorates the test or marks=using(""<name-of-addon>"") marks the test. CTest “labels” are called “marks” in pytest.; Any new marks should be added to psi4/pytest.ini. Running for Debugging¶. PSIthon tests that don’t need extra files to run are easily run from <objdir> via stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out.; All PSIthon tests are runable through CTest, and output files appear in <objdir>/tests/<test-name>/output.dat and stdout results appear in <objdir>/Testing/Temporary/LastTest.log*. Adding PsiAPI Test Cases¶; To create a new test case, either create a new file or add to an existing file under psi4/tests/pytests. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; A test file may contain many tests, each of which is an ordinary Python function with name starting test_. This is how pytest knows to collect it.; No registration required to bring a test to pytest’s attention.; No registration required to bring a test to CMake’s attention. If a test needs additional files, register them in psi4/psi4/CMakeLists.txt. A few notes on test contents:. Import testing functions from utils and use Python assert: assert compare_values(expected, computed, ...).; Don’t worry about cleaning up files or resetting options. A function in psi4/tests/pytests/conftest.py does this aut",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:10695,test,tests,10695,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,15,['test'],"['test-name', 'tests']"
Testability,"ht-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve dispersion-dominated systems. BAKERJCC96¶. Geometries from Baker and Chan J. Comput. Chem. 17 888 (1996),. as reported in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002). No reference energies defined. cp 'off'; rlxd 'off'. ACENES¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_available_databases.html:7830,benchmark,benchmark,7830,psi4manual/master/autodoc_available_databases.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_available_databases.html,2,['benchmark'],['benchmark']
Testability,"hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed wi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:39962,test,test,39962,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"i-dipole; 6-31G H2O Test FCI Energy Point. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. scf-auto-cholesky; Cholesky filter a complete basis. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. fnocc7; Test fnocc with linear dependencies. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. linK-1; RHF Linear Exchange Algorithm test for water. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. mbis-5; MBIS calculation on ZnO. cc13d; Tests analytic CC2 gradients. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. sc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:45061,test,test,45061,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"i4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build. Installing from Binary; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of P",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/external-1.html:2973,test,tests,2973,psi4manual/1.3.2/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html,30,"['log', 'test']","['logo', 'test', 'testing', 'tests']"
Testability,"i4. or Python syntax cluttering the input.; In this case, follow Adding PSIthon Test Cases to prepare as PSIthon (psi4 input.dat) for, roughly speaking, running through ctest.; The PSIthon/CTest test suite occupies the whole of psi4/tests except psi4/tests/pytests.; At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow Adding PsiAPI Test Cases to prepare as PsiAPI (import psi4) for, roughly speaking, running through pytest.; The PsiAPI/pytest test suite occupies psi4/tests/pytests.; The above description sounds as if there are two disjoint test suites, and you have to run both ctest and pytest to fully test PSI4.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don’t know to run both; and (2) there are important tests in the PSIthon suite that can’t be run on a PSI4 installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (test_input.py), PSIthon tests can also be run through pytest.; This hasn’t rolled out to all ~500 PSIthon tests (help wanted), but eventually PSI4 can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it’s a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents¶. Most PSI4 tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite.; Most tests should store reference results (from literature or another implementation or a carefully run PSI4 ca",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:2222,test,test,2222,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,10,['test'],"['test', 'tests']"
Testability,"i4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (string) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unnecessary if the; molecule is from a molecule {...} block and basis is set through; Psi4‘s BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, PSIDATADIR/basis. If path kwarg is; specified, also looks there preferentially for a GENBAS. Can; also specify GENBAS within an input file through a string and; setting the genbas kwarg. Note that due to the input parser’s; aggression, blank lines need to be replaced by the text blankline. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into Psi4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; _nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/cfour-1.html:25458,test,tested,25458,psi4manual/1.0.0/cfour-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/cfour-1.html,2,['test'],['tested']
Testability,"i_scratch = core.IOManager.shared_object().get_default_path(); file_num = item.split('.')[-2] if ""180"" in item else ""180""; targetfile = os.path.join(psi_scratch, fname + ""."" + file_num + "".npy""); if not item.endswith("".npy""):; item = item + "".npy""; else:; filenum = name_split[-1]; try:; filenum = int(filenum); except ValueError:; filenum = 32 # Default file number is the checkpoint one; psioh = core.IOManager.shared_object(); psio = core.IO.shared_object(); filepath = psioh.get_file_path(filenum); namespace = psio.get_default_namespace(); pid = str(os.getpid()); prefix = 'psi'; targetfile = filepath + prefix + '.' + pid + '.' + namespace + '.' + str(filenum); core.print_out(f"" \n Copying restart file <{item}> to <{targetfile}> for internal processing\n""); shutil.copy(item, targetfile). logger.info(f""Compute energy(): method={lowername}, basis={core.get_global_option('BASIS').lower()}, molecule={molecule.name()}, nre={'w/EFP' if hasattr(molecule, 'EFP') else molecule.nuclear_repulsion_energy()}""); logger.debug(""w/EFP"" if hasattr(molecule, ""EFP"") else pp.pformat(molecule.to_dict())); wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); logger.info(f""Return energy(): {core.variable('CURRENT ENERGY')}""). for postcallback in hooks['energy']['post']:; postcallback(lowername, wfn=wfn, **kwargs). basisstash.restore(); optstash.restore(); optstash2.restore(). if return_wfn: # TODO current energy safer than wfn.energy() for now, but should be revisited. # TODO place this with the associated call, very awkward to call this in other areas at the moment; if lowername in ['efp', 'mrcc', 'dmrg']:; core.print_out(""\n\nWarning! %s does not have an associated derived wavefunction."" % name); core.print_out(""The returned wavefunction is the incoming reference wavefunction.\n\n""); elif 'sapt' in lowername:; core.print_out(""\n\nWarning! %s does not have an associated derived wavefunction."" % name); core.print_out(""The returned wavefunction is the dimer SCF wavef",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html:33723,log,logger,33723,psi4manual/1.6.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html,10,['log'],['logger']
Testability,"iables.; In this case, follow Adding PsiAPI Test Cases to prepare as PsiAPI (import psi4) for, roughly speaking, running through pytest.; The PsiAPI/pytest test suite occupies psi4/tests/pytests.; The above description sounds as if there are two disjoint test suites, and you have to run both ctest and pytest to fully test PSI4.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don’t know to run both; and (2) there are important tests in the PSIthon suite that can’t be run on a PSI4 installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (test_input.py), PSIthon tests can also be run through pytest.; This hasn’t rolled out to all ~500 PSIthon tests (help wanted), but eventually PSI4 can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it’s a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents¶. Most PSI4 tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite.; Most tests should store reference results (from literature or another implementation or a carefully run PSI4 calculation),; run quantum chemistry, then apply one or more of the Comparison Functions so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, compare_matrices(refmat, mat, ...) while in the latter it’s asserted, like assert compare_matrices(refmat, mat, ...).; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they’re NumPy functions.; In prep",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:2733,test,test,2733,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['test'],['test']
Testability,"ibMints library to generate and print SO basis (with symmetry) integrals. Creating a New Plugin Using a Conda Pre-compiled Binary¶; Psi4 plugins can also be created using Conda for both Psi4 binary and; development environment.; To compile a plugin with the default Makefile, it is necessary to have the; gcc compiler installed in the Conda distribution or environment (below,; $PSI4CONDA) used to run Psi4.; # prepare; >>> bash; >>> export PATH=$PSI4CONDA/bin:$PATH # usually already done from psi4 installation; >>> cd ""$(dirname $(which psi4))""/.. # move into distribution/environment directory, $PSI4CONDA; >>> conda install gcc # install compilers into expected place. # check (yes, next line gives empty result. yes, LD_LIBRARY_PATH irrelevant); >>> echo $PYTHONHOME $PYTHONPATH $DYLD_LIBRARY_PATH $PSIDATADIR. >>> which python psi4 gcc; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/gcc. # create and compile plugin; >>> psi4 --new-plugin testplugin # generate new plugin; >>> cd testplugin # move into plugin directory; >>> make # compile the plugin to product testplugin.so; >>> psi4 # run sample input.dat; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in $PATH or the; conda enviroment must be activated before compilation and execution of; plugins created using this procedure. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directory contains the following files. Makefile — Makefile for the directory. As long as you are the; only user of the plugin, this should not need editing. After any change to; the plugin C++ code, make must be run in the plugin directory to; recompile the myplugin.so executable, but recompiling the main; Psi4 code is not necessary.; input.dat — Sample input file for the plugin.; Since the __init__.py file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/plugins-1.html:4892,test,testplugin,4892,psi4manual/1.0.0/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/plugins-1.html,6,['test'],['testplugin']
Testability,"ical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc52; CCSD Response for H2O2. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. dft-reference; MP2 with a PBE0 reference computation. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. linK-1; RHF Linear Exchange Algorithm test for water. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. psithon2; Accesses basis sets, databases, plugins, and executables in non-instal",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:27294,test,test,27294,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc33; CC3(UHF)/cc-pVDZ H2O geom from Olsen et al., JCP 104, 8007 (1996). casscf-sp; CASSCF/6-31G** energy point. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. pywrap-cbs1; Various basis set extrapolation tests. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. psimrcc-fd-freq2; Mk-MRCCSD frequencies. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. mp2-1; All-electron MP2 6-31G** geometry optimization of water. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF single",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:26114,test,tests,26114,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['tests']
Testability,"ical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. pywrap-cbs1; Various basis set extrapolation tests. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. dct10; The multiple guesses for DCT amplitudes for ODC-12. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). props4; Electrostatic potential and electric field evaluated on a grid around water. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:10779,test,tests,10779,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"ication must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. mints3; Test individual integral objects for correctness. dft-custom; DFT custom functional test. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. soscf-large; Second-order SCF convergnece: Benzene. opt16; SCF 6-31G(d) optimization of TS for HCN to HNC Performs finite difference hessian calculation. Then optimizes using previous orbitals for scf guess, in subsequent calculations. The last two displacements of the hessian break the plane of symemtry, This test confirms that only the reference geometry, with the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). casscf-fzc-sp; CASSCF/6-31G** energy point. scf-coverage; Lithium test for coverage. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cisd-sp; 6-31G** H2O Test CISD Energy Point. s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:23929,test,test,23929,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ich automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; # all equivalent. cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; either be called directly, as in the first example, or the convenience; syntax of the equivalent second example can be used.; Another very useful and powerful feature of PSI4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. table of contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon: Structuring an Input File. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/psithoninput-1.html:14839,benchmark,benchmark,14839,psi4manual/1.4.0/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/psithoninput-1.html,2,['benchmark'],['benchmark']
Testability,"ich automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; # all equivalent. cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; either be called directly, as in the first example, or the convenience; syntax of the equivalent second example can be used.; Another very useful and powerful feature of PSI4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. table of contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Psithon: Structuring an Input File. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/psithoninput-1.html:14839,benchmark,benchmark,14839,psi4manual/1.5.0/psithoninput-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/psithoninput-1.html,2,['benchmark'],['benchmark']
Testability,"ient for the NO radical. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. fsapt-ext-abc2; FSAPT with external charge on dimer. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. cbs-xtpl-energy; Extrapolated water energies - density-fitted version. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. nbody-vmfc-hessian; Computation of VMFC-corrected water trimer Hessian (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. nbody-hessian; Computation of VMFC-corrected HF dimer Hessian. cc13c; Tests RHF CCSD(T)gradients. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fci-dipole; 6-31G H2O Test FCI Energy Point. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. dft-grac; Gradient regularized asymptotic correction (GRAC) test. castup2; SCF with various combinations of pk/density-fitting, castup/no-cast",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:16232,test,test,16232,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ies and whether the criterion; is active and fulfilled (*), active and unfulfilled ( ), or inactive (o).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -38.91591820 -3.89e+01 6.91e-02 5.72e-02 o 1.42e-01 1.19e-01 o ~; 2 -38.92529543 -9.38e-03 6.21e-03 3.91e-03 o 2.00e-02 1.18e-02 o ~; 3 -38.92540669 -1.11e-04 4.04e-03 2.46e-03 o 3.63e-02 2.12e-02 o ~; 4 -38.92548668 -8.00e-05 2.30e-04 * 1.92e-04 o 1.99e-03 1.17e-03 o ~; 5 -38.92548698 -2.98e-07 * 3.95e-05 * 3.35e-05 o 1.37e-04 * 1.05e-04 o ~. The full list of keywords for optking is provided in Appendix OPTKING.; Information on the Psithon function that drives geometry optimizations is provided; at optimize(). Important User Changes from cpp-optking¶. FIXED_COORD keywords have been generalized to RANGED_COORD e.g. RANGED_DISTANCE; Detailed optimization is now printed through the python logging system. If more information about; the optimization is needed. Please see <output_name>.log. table of contents. Geometry Optimization; Basic Keywords; OPT_TYPE; STEP_TYPE; GEOM_MAXITER; G_CONVERGENCE; FULL_HESS_EVERY. Optimizing Minima; Hessian; Transition States and Reaction Paths; Constrained Optimizations; Multi-Fragment Optimizations; Dealing with problematic optimizations; Convergence Criteria; Interface to GeomeTRIC; Output; Important User Changes from cpp-optking. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Theoretical Methods: SCF to FCI; Geometry Optimization. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/optking.html:25480,log,logging,25480,psi4manual/master/optking.html,https://psicode.org,https://psicode.org/psi4manual/master/optking.html,2,['log'],"['log', 'logging']"
Testability,"if extent.lower() == 'quick':; command.extend(['-m', 'quick or smoke']); elif extent.lower() == 'full':; command.extend(['-m', 'not long']); elif extent.lower() == 'long':; pass; if extras is not None:; command.extend(extras); command.extend(['--capture=sys', abs_test_dir]). retcode = pytest.main(command); return retcode. [docs]; def set_output_file(; ofile: str,; append: bool = False,; *,; loglevel: int = 20,; execute: bool = True,; print_header: Optional[bool] = None,; inherit_loglevel: bool = False) -> Path:; """"""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""; out = Path(ofile); log = out.with_suffix("".log""). # Get the custom logger; import logging. from psi4 import logger; if not inherit_loglevel:; logger.setLevel(loglevel). # Create formatters; # * detailed: example: 2019-11-20:01:13:46,811 DEBUG [psi4.driver.task_base:156]; f_format_detailed = logging.Formatter(""%(asctime)s,%(msecs)d %(levelname)-8s [%(name)s:%(lineno)d] %(message)s"", datefmt=""%Y-%m-%",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html:8299,log,logger,8299,psi4manual/1.9.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html,4,['log'],['logger']
Testability,"if extent.lower() == 'quick':; command.extend(['-m', 'quick or smoke']); elif extent.lower() == 'full':; command.extend(['-m', 'not long']); elif extent.lower() == 'long':; pass; if extras is not None:; command.extend(extras); command.extend(['--capture=sys', abs_test_dir]). retcode = pytest.main(command); return retcode. [docs]; def set_output_file(; ofile: str,; append: bool = False,; *,; loglevel: int = 20,; execute: bool = True,; print_header: Optional[bool] = None,; inherit_loglevel: bool = False) -> Path:; """"""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""; out = Path(ofile); log = out.with_suffix("".log""). # Get the custom logger; import logging; from psi4 import logger; if not inherit_loglevel:; logger.setLevel(loglevel). # Create formatters; # * detailed: example: 2019-11-20:01:13:46,811 DEBUG [psi4.driver.task_base:156]; f_format_detailed = logging.Formatter(""%(asctime)s,%(msecs)d %(levelname)-8s [%(name)s:%(lineno)d] %(message)s"", datefmt=""%Y-%m-%",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html:8248,log,logger,8248,psi4manual/1.8.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html,2,['log'],['logger']
Testability,"if the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020. Type: boolean; Default: true. Expert¶. CEPA_LEVEL¶. Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). COMPUTE_MP4_TRIPLES¶. Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES¶. Do compute triples contribution?. Type: boolean; Default: true. RUN_CCSD¶. do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CEPA¶. Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2¶. do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3¶. do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4¶. do only evaluate mp4 energy?. Type: boolean; Default: false. USE_DF_INTS¶. Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. table of contents. FNOCC; General; ACTIVE_NAT_ORBS; BRUECKNER_MAXITER; CC_SCALE_OS; CC_SCALE_SS; CC_TIMINGS; CEPA_NO_SINGLES; CHOLESKY_TOLERANCE; DFCC; DF_BASIS_CC; DIIS_MAX_VECS; DIPMOM; E_CONVERGENCE; MAXITER; MP2_SCALE_OS; MP2_SCALE_SS; NAT_ORBS; OCC_PERCENTAGE; OCC_TOLERANCE; R_CONVERGENCE; SCS_CCSD; SCS_CEPA; SCS_MP2; TRIPLES_LOW_MEMORY. Expert; CEPA_LEVEL; COMPUTE_MP4_TRIPLES; COMPUTE_TRIPLES; RUN_CCSD; RUN_CEPA; RUN_MP2; RUN_MP3; RUN_MP4; USE_DF_INTS. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; FNOCC. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__fnocc.html:4490,test,testing,4490,psi4manual/1.7.x/autodir_options_c/module__fnocc.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/module__fnocc.html,2,['test'],['testing']
Testability,"ificing coverage and variety. Under 30 seconds is a good aim. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in psi4/tests/CMakeLists.txt or, for an addon, tests/<addon>/CMakeLists.txt.; The test directory will need at least two files, CMakeLists.txt and input.dat. CMakeLists.txt¶; This file adds the test case to the suite. It should have at least the following two uncommented lines:; include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ctest -L label purposes. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; If a test needs extra input files like grid.dat or extra reference files for checking against, like fchk, specify these in the CMakeLists.txt as shown above. Such tests must be run through ctest and don’t usually work when run “by hand” from the objdir via stage/bin/psi4 ../tests/directory_name/input.dat.; If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:5643,test,test-specific,5643,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['test'],['test-specific']
Testability,"ify which groups of tests include the test case for ctest -L label purposes. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; If a test needs extra input files like grid.dat or extra reference files for checking against, like fchk, specify these in the CMakeLists.txt as shown above. Such tests must be run through ctest and don’t usually work when run “by hand” from the objdir via stage/bin/psi4 ../tests/directory_name/input.dat.; If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the COST line as shown above to set a weighting to about the number of seconds the test takes. input.dat¶; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Referen",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:6490,test,tests,6490,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['test'],['tests']
Testability,"igher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV (CFOUR); CFOUR — Convergence threshold for linear equations controlled by LINEQ_TYPE. Equations are iterated until smallest residual falls below \(10^{-N}\), where \(N\) is the value associated with this keyword. Type: integer; Default: 7. CFOUR_LINEQ_MAXCY (CFOUR); CFOUR — The maximum number of iterations in all linear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE (CFOUR); CFOUR — Determines the algorithm used to solve linear equations ( \(\Lambda\) and derivative \(T\) and \(\Lambda\) ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not guaranteed to converge. Moreover, POPLE has not been tested for some time and should definitely be checked! (Default : DIIS). Type: string; Possible Values: POPLE, DIIS; Default: DIIS. CFOUR_LOCK_ORBOCC (CFOUR); CFOUR — This keyword is used by the SCF program to determine if the orbital occupancy (by symmetry block) is allowed to change in the course of the calculation. ON (=1) locks the occupation to that set by the keyword CFOUR_OCCUPATION (or the initial guess if omitted); OFF (= 0) permits the occupation to change. (Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP (CFOUR); CFOUR — Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEM_UNIT (CFOUR); CFOUR — Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:54236,test,tested,54236,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,6,['test'],['tested']
Testability,"ightly operation. Release (e.g., v1.3)¶. Do final pass before release tag; Tag (pre)release; Initialize release branch; Build Conda Psi4 stack at specific commit; Publish to main conda label; Build Psi4conda set; Generate download page for psicode.org; Publish GitHub release; Publish psicode release; Finalize release; Reset psi4meta for nightly operation. Post-Release (e.g., v1.3.1)¶. Assemble postrelease changes; Tweak Conda for postrelease; Do final pass before release tag; Tag postrelease; Build Conda Psi4 stack at specific commit; Publish to main conda label; Build Psi4conda set; Generate download page for psicode.org; Publish GitHub postrelease; Publish psicode release; Finalize release; Reset psi4meta for nightly operation. Update copyright year¶. cd ~/path/to/psi4; Primary target is licenses. grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""; On Linux, drop the '' in above command; Need to do psi4/ and docs/ dirs. Also, license in these files. tests/runtest.py; README.md; tests/psitest.pl. Also, in content of https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/conf.py.in#L118. Update samples¶. Run make sphinxman at least once by hand; Check in resulting psifiles.py and all the updated and new samples/ files and dirs; Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors¶. Survey contributions to current Milestone. Add new contribs and PR lists to release notes GitHub issue; Figure out any new “Additional Contributors” authors since last release; Edit psi4/header.py accordingly, make PR; Get permission of new authors and their particulars for codemeta.json; Invite any contributors with at least 3 PRs to join GitHub Organization. Anticipate next release¶. Bump version in codemeta.json, https://github.com/psi4/psi4/blob/master/codemeta.json#L9; Add to branch list in azure-pipelines.yml, psi4/azure-pipelines.yml. Build Conda ecosystem stack¶; By “ecosystem stack”, mean packages that are up",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_release-1.html:1463,test,tests,1463,psi4manual/1.4.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_release-1.html,2,['test'],['tests']
Testability,"ike of same.; Reference value against which computed is compared.; computed – int, bool, str or array-like of same.; Input value to compare against expected.; label – Label for passed and error messages. Defaults to calling function name.; equal_phase – Compare computed or its opposite as equal.; quiet – Whether to log the return message.; return_message – Whether to return tuple. See below.; return_handler – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Returns:. allclose (bool) – Returns True if expected and computed are equal; False otherwise.; message (str) – When return_message=True, also return passed or error message. Return type:; bool | Tuple[bool, str]. Notes. Akin to numpy.array_equal().; For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use compare_recursive(). psi4.compare_recursive(expected, computed, *args, **kwargs)¶; Comparison function for recursively comparing mixed-type and nested structures such as dictionaries and lists.; See qcelemental.testing.compare_recursive() for details. table of contents. Test Suite; CTest and pytest, PSIthon and PsiAPI; Test Contents; Adding PSIthon Test Cases; CMakeLists.txt; input.dat; output.ref; test_input.py; Running for Debugging. Adding PsiAPI Test Cases; Running for Debugging. Comparison Functions; Plain Old Data; compare_values(); compare_integers(). Objects; compare_matrices(); compare_vectors(); compare_wavefunctions(); compare_molrecs(). File Formats; compare_cubes(); compare_fchkfiles(); compare_fcidumps(); compare_moldenfiles(); compare_vibinfos(). Extra QCA Functions; compare(); compare_recursive(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Test Suite. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/add_tests.html:30027,test,testing,30027,psi4manual/1.8.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/add_tests.html,1,['test'],['testing']
Testability,"ike of same.; Reference value against which computed is compared.; computed – int, bool, str or array-like of same.; Input value to compare against expected.; label – Label for passed and error messages. Defaults to calling function name.; equal_phase – Compare computed or its opposite as equal.; quiet – Whether to log the return message.; return_message – Whether to return tuple. See below.; return_handler – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Returns:. allclose (bool) – Returns True if expected and computed are equal; False otherwise.; message (str) – When return_message=True, also return passed or error message. Return type:; bool | Tuple[bool, str]. Notes. Akin to numpy.array_equal().; For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use compare_recursive(). psi4.compare_recursive(expected, computed, *args, **kwargs)¶; Comparison function for recursively comparing mixed-type and nested structures such as dictionaries and lists.; See qcelemental.testing.compare_recursive() for details. table of contents. Test Suite; CTest and pytest, PSIthon and PsiAPI; Test Contents; Adding PSIthon Test Cases; CMakeLists.txt; input.dat; output.ref; test_input.py; Running for Debugging. Adding PsiAPI Test Cases; Running for Debugging. Comparison Functions; Plain Old Data; compare_values(); compare_integers(). Objects; compare_matrices(); compare_vectors(); compare_wavefunctions(); compare_molrecs(). File Formats; compare_cubes(); compare_fchkfiles(); compare_fcidumps(); compare_moldenfiles(); compare_vibinfos(). Extra QCA Functions; compare(); compare_recursive(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Test Suite. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/add_tests.html:30153,test,testing,30153,psi4manual/1.9.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/add_tests.html,1,['test'],['testing']
Testability,"ike, optional; Whether to randomly shuffle atoms (`True`) or leave 1st atom 1st, etc. (`False`); or shuffle according to specified (nat, ) indices (e.g., [2, 1, 0]); do_shift : bool or array-like, optional; Whether to generate a random atom shift on interval [-3, 3) in each; dimension (`True`) or leave at current origin (`False`) or shift along; specified (3, ) vector (e.g., np.array([0., 1., -1.])).; do_rotate : bool or array-like, optional; Whether to generate a random 3D rotation according to algorithm of Arvo (`True`); or leave at current orientation (`False`) or rotate with specified (3, 3) matrix.; deflection : float, optional; If `do_rotate`, how random a rotation: 0.0 is no change, 0.1 is small; perturbation, 1.0 is completely random.; do_mirror : bool, optional; Whether to set mirror reflection instruction. Changes identity of; molecule so off by default. Returns; -------; tuple; AlignmentMill with fields (shift, rotation, atommap, mirror); as requested: identity, random, or specified. """"""; rand_elord = np.arange(nat); if do_resort is True:; np.random.shuffle(rand_elord); elif do_resort is False:; pass; else:; rand_elord = np.array(do_resort); assert rand_elord.shape == (nat,). if do_shift is True:; rand_shift = 6 * np.random.random_sample((3,)) - 3; elif do_shift is False:; rand_shift = np.zeros((3,)); else:; rand_shift = np.array(do_shift); assert rand_shift.shape == (3,). if do_rotate is True:; rand_rot3d = random_rotation_matrix(deflection=deflection); elif do_rotate is False:; rand_rot3d = np.identity(3); else:; rand_rot3d = np.array(do_rotate); assert rand_rot3d.shape == (3, 3). perturbation = AlignmentMill(shift=rand_shift, rotation=rand_rot3d, atommap=rand_elord, mirror=do_mirror); return perturbation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.4;  · . PSI4. Module code; qcelemental.molutil.align. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/qcelemental/molutil/align.html:20336,assert,assert,20336,psi4manual/1.4.0/_modules/qcelemental/molutil/align.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/qcelemental/molutil/align.html,6,['assert'],['assert']
Testability,"ike, optional; Whether to randomly shuffle atoms (`True`) or leave 1st atom 1st, etc. (`False`); or shuffle according to specified (nat, ) indices (e.g., [2, 1, 0]); do_shift : bool or array-like, optional; Whether to generate a random atom shift on interval [-3, 3) in each; dimension (`True`) or leave at current origin (`False`) or shift along; specified (3, ) vector (e.g., np.array([0., 1., -1.])).; do_rotate : bool or array-like, optional; Whether to generate a random 3D rotation according to algorithm of Arvo (`True`); or leave at current orientation (`False`) or rotate with specified (3, 3) matrix.; deflection : float, optional; If `do_rotate`, how random a rotation: 0.0 is no change, 0.1 is small; perturbation, 1.0 is completely random.; do_mirror : bool, optional; Whether to set mirror reflection instruction. Changes identity of; molecule so off by default. Returns; -------; tuple; AlignmentMill with fields (shift, rotation, atommap, mirror); as requested: identity, random, or specified. """"""; rand_elord = np.arange(nat); if do_resort is True:; np.random.shuffle(rand_elord); elif do_resort is False:; pass; else:; rand_elord = np.array(do_resort); assert rand_elord.shape == (nat,). if do_shift is True:; rand_shift = 6 * np.random.random_sample((3,)) - 3; elif do_shift is False:; rand_shift = np.zeros((3,)); else:; rand_shift = np.array(do_shift); assert rand_shift.shape == (3,). if do_rotate is True:; rand_rot3d = random_rotation_matrix(deflection=deflection); elif do_rotate is False:; rand_rot3d = np.identity(3); else:; rand_rot3d = np.array(do_rotate); assert rand_rot3d.shape == (3, 3). perturbation = AlignmentMill(shift=rand_shift, rotation=rand_rot3d, atommap=rand_elord, mirror=do_mirror); return perturbation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.5;  · . PSI4. Module code; qcelemental.molutil.align. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/_modules/qcelemental/molutil/align.html:20336,assert,assert,20336,psi4manual/1.5.0/_modules/qcelemental/molutil/align.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/_modules/qcelemental/molutil/align.html,6,['assert'],['assert']
Testability,"il.kwargs_lower(kwargs). # Bounce to MDI (MolSSI driver interface) if mdi kwarg; use_mdi = kwargs.pop('mdi', False); if use_mdi:; return mdi_run(name, **kwargs). core.print_out(""\nScratch directory: %s\n"" % core.IOManager.shared_object().get_default_path()). basisstash = p4util.OptionsState(['BASIS']); return_wfn = kwargs.pop('return_wfn', False). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()); molecule.update_geometry(). ## Pre-planning interventions. # * Trip on function or alias as name; lowername = driver_util.upgrade_interventions(name). _filter_renamed_methods(""energy"", lowername). # * Avert pydantic anger at incomplete modelchem spec; userbas = core.get_global_option('BASIS') or kwargs.get('basis'); if lowername in integrated_basis_methods and userbas is None:; kwargs['basis'] = '(auto)'. # Are we planning?; plan = task_planner.task_planner(""energy"", lowername, molecule, **kwargs); logger.debug('ENERGY PLAN'); logger.debug(pp.pformat(plan.dict())). if kwargs.get(""return_plan"", False):; # Plan-only requested; return plan. elif not isinstance(plan, AtomicComputer):; # Advanced ""Computer"" active; plan.compute(); return plan.get_psi_results(return_wfn=return_wfn). else:; # We have unpacked to an AtomicInput; lowername = plan.method; basis = plan.basis; core.set_global_option(""BASIS"", basis). ## Second half of this fn -- entry means program running exactly analytic 0th derivative. # Commit to procedures['energy'] call hereafter; core.clean_variables(). #for precallback in hooks['energy']['pre']:; # precallback(lowername, **kwargs). # needed (+restore below) so long as AtomicComputer-s aren't run through json (where convcrit also lives); optstash = driver_util.negotiate_convergence_criterion((0, 0), lowername, return_optstash=True); optstash2 = p4util.OptionsState(['SCF', 'GUESS']). # Before invoking the procedure, we rename any file that should be read.; # This is a workaround to do restar",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver.html:37613,log,logger,37613,psi4manual/1.7.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver.html,8,['log'],['logger']
Testability,"ilar coverage is obtained through:; >>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example] . Run tests in parallel with -j flag. For maximum parallelism (not Windows): ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 5 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that continuous integration checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. Pytest has similar commands:. Run tests in parallel with -n flag (if Python package pytest-xdist installed). For maximum parallelism: pytest -n auto; Run full test suite: pytest; Run the quick tests: pytest -m quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: pytest -m smoke; Run tests matching by name: pytest -k testname; Run tests excluding those by name: pytest -k ""not testname""; Run tests matching by label: pytest -m testlabel; Run tests excluding those by label: pytest -m ""not testlabel""; Run tests with complicated filtering by name: pytest -k ""cc and not cc4 and not stdsuite""; Run tests and see test names: pytest -v; Run tests and see test names and sometimes more verbose errors: pytest -vv. How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests ha",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:53416,test,tests,53416,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,5,['test'],['tests']
Testability,"iles in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if(expected != computed):; message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); raise TestComparisonError(message); if (expected.symmetry() != computed.symmetry()):; message = (""\t%s has %d symmetry, but %s has %d\n."" % (expected.name(), expected.symmetry(), computed.name(), computed.symmetry())); raise TestComparisonError(message); nirreps = expected.nirrep(); symmetry = expected.symmetry(); for irrep in range(nirreps):; if(expected.rows(irrep) != computed.rows(irrep)):; message = (""\t%s has %d rows in irrep %d, but %s has %d\n."" % (expected.name(), expected.rows(irrep), irrep, computed.name(), computed.rows(irrep))); raise TestComparisonError(message); if(expected.cols(irrep ^ symmetry) != computed.cols(irrep ^ symmetry)):; message = (""\t%s has %d columns in irrep, but %s has %d\n."" % (expected.name(), expected.cols(irrep), irrep, computed.name(), computed.cols(irrep)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html:8214,test,test,8214,psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/util.html,1,['test'],['test']
Testability,"iles, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:1972,test,test,1972,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,6,['test'],['test']
Testability,"ilibility and characteristics as encoded in psi4/lib/python/functional.py; BasisFamily: fitting basis sets for each orbital basis as encoded in psi4/lib/python/basislistdunning.py and psi4/lib/python/basislistother.py. Run make help to see choices for cleaning various stages of the build.; Running make realclean clears out the built documentation. Building; all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/Makefile.in ,; so very long builds should be infrequent (unless you’re touching psi4/src/bin/psi4/read_options.cc.; Note that not all dependencies; are encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, run make realclean and; start from scratch. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re a; few resources on Sphinx formatting. reStructuredText; rendered test document; vs. source test document; Another reStructuredText; A third reStructuredText and Sphinx; LaTeX that Sphinx can handle; Sphinx Docs. Math in the Codebase¶; It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the #! comment comments at the top of test case; input files, the /*- comment -*/ comments in; psi4/src/bin/psi4/read_options.cc, and the r"""""" comment """"""; docstrings in python modules. (That r"""""" makes the string read; literally, so your LaTeX symbols aren’t confused with escape characters.); For the two former, math has traditionally; been written in LaTeX (with the special substitution @@ for; subscripting underscore). The autodoc script has been trained to convert; inline LaTeX math to reST math, provided the expression within dollar; signs is offset from other text. That is, expressions of the form; ^ $latex math$[., ]$ (pseudo-regex) are good, while H$_2",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/documentation-1.html:3972,test,test,3972,psi4manual/4.0b4/documentation-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/documentation-1.html,4,['test'],['test']
Testability,"ilibrium geometries for a database; composed of dissociation curves.; * ``'BzBz_S'`` || ``'FaOOFaON'`` || ``'ArNe'`` || ``'HB'`` || etc.; For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive).; * ``[1,2,5]`` || ``['1','2','5']`` || ``['BzMe-3.5', 'MeMe-5.0']`` || etc.; Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. :examples:. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). """"""; lowername = name #TODO; kwargs = p4util.kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name #.lower(); if not('db_name' in kwargs) and db_name:; kwargs['db_name'] = db_name. # Establish function to call; func = kwargs.pop('db_func', kwargs.pop('func', energy)); kwargs['db_func'] = func; # Bounce to CP if bsse kwarg",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html:7601,benchmark,benchmark,7601,psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html,36,['benchmark'],['benchmark']
Testability,"ilities of HOF molecule. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. dlpnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. dft1; DFT Functional Test all values update for new BraggSlater radii. cubeprop-esp; RHF orbitals and density for water. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom; DFT custom functional test. cc13b; Tests RHF CCSD(T)gradients. sad-scf-type; Test SAD SCF guesses on noble gas atom. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc51; EOM-CC3/cc-pVTZ on H2O. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). mints2-bse; Similar to mints2, but using the BSE to specify the basis sets. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. nbo; Generation of NBO file. omp2-4; SCS-OMP2 cc-pVDZ geometry o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:27905,test,test,27905,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ility analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. sapt11; sapt example with orbital freezing with alkali metal and dMP2. scf-guess-read2; Test if the the guess read in the same basis converges. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. mints-benchmark; run some BLAS benchmarks. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. linK-1; RHF Linear Exchange Algorithm test for water. fci-h2o-2; 6-31G H2O Test FCI Energy Point. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. psithon1; Spectroscopic constants of H2, and the full ci ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:2493,test,test,2493,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ill be the whole test suite, less some exceedingly long outliers.; * _long_ will be the whole test suite.; extras; Additional arguments to pass to `pytest`. Returns; -------; int; Return code from `pytest.main()`. 0 for pass, 1 for fail. """"""; try:; import pytest; except ImportError:; raise RuntimeError('Testing module `pytest` is not installed. Run `conda install pytest`'); abs_test_dir = os.path.sep.join([os.path.abspath(os.path.dirname(__file__)), ""tests""]). command = ['-rws', '-v']; if extent.lower() == 'smoke':; command.extend(['-m', 'smoke']); elif extent.lower() == 'quick':; command.extend(['-m', 'quick or smoke']); elif extent.lower() == 'full':; command.extend(['-m', 'not long']); elif extent.lower() == 'long':; pass; if extras is not None:; command.extend(extras); command.extend(['--capture=sys', abs_test_dir]). retcode = pytest.main(command); return retcode. [docs]; def set_output_file(; ofile: str,; append: bool = False,; *,; loglevel: int = 20,; execute: bool = True,; print_header: Optional[bool] = None,; inherit_loglevel: bool = False) -> Path:; """"""Set the name for output and logging files. Parameters; ----------; ofile; Name of ASCII output file including extension. The logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html:7652,log,loglevel,7652,psi4manual/1.8.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html,4,['log'],"['logging', 'loglevel']"
Testability,"ilter(stdout)); self.computed = True. [docs]; def get_results(self, client: Optional[""qcportal.FractalClient""] = None) -> AtomicResult:; """"""Return results as Atomic-flavored QCSchema."""""". if self.result:; return self.result. if client:; try:; # QCFractal/QCPortal v0.15.8; result = client.query_results(id=self.result_id); qca_next_branch = False; except AttributeError:; # QCFractal/QCPortal `next`; record = client.get_singlepoints(record_ids=self.result_id); qca_next_branch = True. logger.debug(f""Querying AtomicResult {self.result_id}""). if not qca_next_branch:; # QCFractal v0.15.8; if len(result) == 0:; return self.result. self.result = result[0]. else:; # QCFractal `next`; if record.status != ""complete"":; return self.result. self.result = _singlepointrecord_to_atomicresult(record). return self.result. def _singlepointrecord_to_atomicresult(spr: ""qcportal.singlepoint.SinglepointRecord"") -> AtomicResult:; atres = spr.to_qcschema_result(). # QCFractal `next` database stores return_result, properties, and extras[""qcvars""] merged; # together and with lowercase keys. `to_qcschema_result` partitions properties back out,; # but we need to restore qcvars keys, types, and dimensions.; qcvars = atres.extras.pop(""extra_properties""); qcvars.pop(""return_result""); qcvars = {k.upper(): p4util.plump_qcvar(k, v) for k, v in qcvars.items()}; atres.extras[""qcvars""] = qcvars. return atres. def _drink_filter(stdout: str) -> str:; """"""Don't mess up the widespread ``grep beer`` test of Psi4 doneness by printing multiple drinks per outfile."""""". stdout = stdout.replace(""\n*** Psi4 exiting successfully. Buy a developer a beer!"", """"); stdout = stdout.replace(""\n*** Psi4 encountered an error. Buy a developer more coffee!"", """"); return stdout. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.8.2;  · . PSI4. Module code; psi4.driver.task_base. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:04AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/task_base.html:8842,test,test,8842,psi4manual/1.8.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/task_base.html,2,['test'],['test']
Testability,"imer; 'FaONFaON' dissociation curve for formamide dimer; 'FaNNFaNN' dissociation curve for formamidine dimer; 'FaOOFaON' dissociation curve for formic acid- formamide complex; 'FaONFaNN' dissociation curve for formamide- formamidine complex; 'FaOOFaNN' dissociation curve for formic acid- formamidine complex. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani et al. PCCP 9 6106 (2007).; Pyridine Dimers from Hohenstein et al. JPCA 113 878 (2009).; Collection into NBC10 from Burns et al. JCP 134 084107 (2011).; Revised reference interaction energies (NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'NBC100' Burns et al. JCP 134 084107 (2011).; 'NBC10A' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. HTBH¶. Database (Truhlar) of hydrogen-transfer barrier height reactions.; Geometries from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/raw_geom.cgi .; Reference energies from Zhao et al. JPCA, 109 2012-2018 ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html:3784,benchmark,benchmark,3784,psi4manual/1.0.0/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html,4,['benchmark'],['benchmark']
Testability,"imization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:17629,test,testing,17629,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['testing']
Testability,"imizations of HOOH in internals. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:31034,test,test,31034,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"in args:; oe.add(prop); oe.compute(). [docs]def set_memory(bytes):; """"""Function to reset the total memory allocation.""""""; psi4.set_memory(bytes). [docs]def get_memory():; """"""Function to return the total memory allocation.""""""; return psi4.get_memory(). [docs]def set_num_threads(nthread):; """"""Function to reset the number of threads to parallelize across.""""""; psi4.set_nthread(nthread). [docs]def get_num_threads():; """"""Function to return the number of threads to parallelize across.""""""; return psi4.nthread(). [docs]def success(label):; """"""Function to print a '*label*...PASSED' line to screen.; Used by :py:func:`util.compare_values` family when functions pass. """"""; print('\t{0:.<66}PASSED'.format(label)); sys.stdout.flush(). # Test functions; [docs]def compare_values(expected, computed, digits, label):; """"""Function to compare two values. Prints :py:func:`util.success`; when value *computed* matches value *expected* to number of *digits*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (abs(expected - computed) > 10 ** (-digits)):; print((""\t%s: computed value (%."" + str(digits+1) + ""f) does not match (%."" + str(digits+1) + ""f) to %d decimal places."") % (label, computed, expected, digits)); sys.exit(1); if ( math.isnan(computed) ):; print(""\t%s: computed value (%f) does not match (%f) to %d decimal places.\n"" % (label, computed, expected, digits)); print(""\tprobably because the computed value is nan.""); sys.exit(1); success(label). [docs]def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; print(""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); sys.exit(1); success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/p4util/util.html:2234,test,test,2234,psi4manual/4.0b5/_modules/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/p4util/util.html,2,['test'],['test']
Testability,"in range(len(self.dbdict))]; print(""""""Database %s: Subset %s promoted: %s"""""" % (self.dbse, ss, self.sset[ss])). def _intersect_subsets(self):; """"""Examine component database subsets and collect common names as; Database subset. """"""; sss = [set(odb.sset.keys()) for db, odb in self.dbdict.items()]; new = sorted(set.intersection(*sss)); for ss in new:; self.sset[ss] = [ss] * len(self.dbdict.keys()). def _intersect_modelchems(self):; """"""Examine component database qcdata and collect common names as; Database modelchem. """"""; mcs = [set(odb.available_modelchems()) for odb in self.dbdict.itervalues()]; new = sorted(set.intersection(*mcs)); for mc in new:; self.mcs[mc] = [mc] * len(self.dbdict.keys()). # def reaction_generator(self):; # """""". # """"""; # for db, odb in self.dbdict.items():; # for rxn, orxn in odb.hrxn.items():; # yield orxn. [docs] def compute_statistics(self, modelchem, benchmark='default', sset='default',; failoninc=True, verbose=False, returnindiv=False):; """"""Computes summary statistics and, if *returnindiv* True,; individual errors for single model chemistry *modelchem* versus; *benchmark* over subset *sset* over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless *failoninc* set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. """"""; errors = OrderedDict(); indiv = OrderedDict(); actvdb = []; for db, odb in self.dbdict.items():; dbix = self.dbdict.keys().index(db); if self.sset[sset][dbix] is None:; errors[db], indiv[db] = (None, None); else:; errors[db], indiv[db] = odb.compute_statistics(self.mcs[modelchem][dbix],; sset=self.sset[sset][dbix],; benchmark='ZEROS' if benchmark == 'ZEROS' else self.mcs[benchmark][dbix],; failoninc=failoninc, verbose=verbose, returnindiv=True); actvdb.append(errors[db]); errors[self.dbse] = average_errors(*actvdb). if returnindiv:; return errors,",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:56722,benchmark,benchmark,56722,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,2,['benchmark'],['benchmark']
Testability,"in the the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Input File; Description. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. fnocc2; Test G2 method for H2O. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in CH2. fnocc4; Test FNO-DF-CCSD(T) energy. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. min_input; This checks that all energy methods can run with a minimal input and set symmetry. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF. omp2_5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. scf6; Tests RHF/ROHF/UHF SCF gradients. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/testsuite-1.html:1442,test,tests,1442,psi4manual/4.0b4/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/testsuite-1.html,4,['test'],['tests']
Testability,"in; # the corresponding files.; #; # This file is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. import os; import hashlib; import collections; from typing import Dict, List, Tuple, Union. import numpy as np. import qcelemental as qcel. import psi4; from .util import parse_dertype; from .libmintsmolecule import *; from .testing import compare_values, compare_integers, compare_molrecs; from .bfs import BFS. qcdbmol = ""psi4.driver.qcdb.molecule.Molecule"". [docs]class Molecule(LibmintsMolecule):; """"""Class to store the elements, coordinates, fragmentation pattern,; charge, multiplicity of a molecule. Largely replicates psi4's libmints; Molecule class, developed by Justin M. Turney and Andy M. Simmonett; with incremental improvements by other psi4 developers. Major. This class extends `qcdb.LibmintsMolecule` and occasionally; `psi4.core.Molecule` itself. """""". def __init__(self,; molinit=None,; dtype=None,; geom=None,; elea=None,; elez=None,; elem=None,; mass=None,; real=None,; elbl=None,; name=None,; units='Angstrom',; input_units_to_au=None,; fix_com=None,; fix_orientation=None,; fix_symmetry=None,; fragment_separators=None,; fragment_charges=None,; fragment_multiplicities=None,; molecular_charge=None,; molecular_multiplicity=None,; comment=None,; provenance=None,; connectivity=None,; enable_qm=True,; enable_efp=True,; missing_enabled_retur",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/molecule.html:1335,test,testing,1335,psi4manual/1.4.0/_modules/psi4/driver/qcdb/molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/molecule.html,6,['test'],['testing']
Testability,"inc=failoninc,; saveas=saveas, relpath=relpath, graphicsformat=graphicsformat); filedict[mc] = minifiledict; return filedict. [docs] def get_hrxn(self, sset='default'):; """""". """"""; rhrxn = OrderedDict(); for db, odb in self.dbdict.items():; dbix = self.dbdict.keys().index(db); lss = self.sset[sset][dbix]; if lss is not None:; for rxn in odb.hrxn:; if rxn in odb.sset[lss]:; orxn = odb.hrxn[rxn]; rhrxn[orxn.dbrxn] = orxn # this is a change and conflict with vergil version; return rhrxn. [docs] def get_hrgt(self, sset='default', actv='default'):; """""". """"""; rhrxn = self.get_hrxn(sset=sset); rhrgt = OrderedDict(); for rxn, orxn in rhrxn.iteritems():; for orgt in orxn.rxnm[actv].keys():; rhrgt[orgt.name] = orgt; # TODO prob need to avoid duplicates or pass. return rhrgt. [docs] def get_reactions(self, modelchem, sset='default', benchmark='default',; failoninc=True):; """"""Collects the reactions present in *sset* from each WrappedDatabase,; checks that *modelchem* and *benchmark* ReactionDatum are present; (fails if *failoninc* True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; *modelchem*, the modelchem key needed to access *benchmark*, and; the Reaction object. """"""; dbdat = []; rhrxn = self.get_hrxn(sset=sset); for orxn in rhrxn.itervalues():; dbix = self.dbdict.keys().index(orxn.dbrxn.split('-')[0]); lmc = self.mcs[modelchem][dbix]; lbm = self.mcs[benchmark][dbix]; try:; orxn.data[lbm]; except KeyError as e:; # not sure if should treat bm differently; lbm = None; try:; orxn.data[lmc]; except KeyError as e:; if failoninc:; raise e; else:; lmc = None; dbdat.append((lmc, lbm, orxn)); # this is diff in that returning empties not just pass over- may break bfdb; # try:; # orxn.data[lmc]; # orxn.data[lbm]; # except KeyError as e:; # if failoninc:; # raise e; # else:; # # not sure yet if should return empties or just pass over; # pass; # else:; # dbdat.append((lmc, lbm, orxn)); return dbdat. [docs] def get_missing_reactions(se",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:72418,benchmark,benchmark,72418,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,3,['benchmark'],['benchmark']
Testability,"indx. add_Subset(name, func)[source]¶; Define a new subset labeled name by providing a function; func that filters self.hrxn. available_modelchems(union=True)[source]¶; Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; union is True or all modelchems that have data for all reactions; if union is False. benchmark()[source]¶; Returns the model chemistry label for the database’s benchmark. compute_errors(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False)[source]¶; For full database or subset sset, computes raw reaction; errors between modelchem and benchmark model chemistries.; Returns error if model chemistries are missing for any reaction in; subset unless failoninc set to False, whereupon returns partial.; Returns dictionary of reaction labels and error forms. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; For full database or subset sset, computes many error; statistics between single modelchem and benchmark model; chemistries. Returns error if model chemistries are missing; for any reaction in subset unless failoninc set to False,; whereupon returns partial statistics. Returns dictionary of; statistics labels and values. dbse = None¶; internal name of database; >>> print asdf.dbse; 'NBC1'. get_pec_weightinfo()[source]¶. hrgt = None¶; dict of reagents/geometries; >>> print asdf.hrgt.keys(); ['NBC1-BzBz_PD32-0.8-monoA-CP', 'NBC1-BzBz_PD34-0.6-dimer', ... 'NBC1-BzBz_PD34-1.7-dimer']. hrxn = None¶; OrderedDict of reactions/members; >>> print asdf.hrxn.keys(); ['BzBz_S-3.2', 'BzBz_S-3.3', ... 'BzBz_PD36-2.8', 'BzBz_PD36-3.0']. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. static load_pickled(dbname, path=None)[source]¶. load_qcdata(modname, funcname, pythonpath=None, failoninc=True)[source]¶; Loads qcdb.ReactionDatums from module modna",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:47378,benchmark,benchmark,47378,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,4,['benchmark'],['benchmark']
Testability,"ine -decontract option for basis sets. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc52; CCSD Response for H2O2. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. dft-reference; MP2 with a PBE0 reference computation. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. linK-1; RHF Linear Exchange Algorithm test for water. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. ps",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:27181,test,testing,27181,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['testing']
Testability,"ine installers (Linux/Mac/Windows; Py27/35/36).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test. Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, or Windows (Ubuntu shell for Windows accepts Linux installers).; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux; # py27|py35|py36 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-Linux-x86_64.sh"" --keepalive-time 2; >>> bash; >>> bash Psi4conda-latest-py35-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py27|py35|py36 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> bash; >>> bash Psi4conda-latest-py35-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bash_profile; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py27|py35|py36 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-Windows-x86_64.sh"" --keepalive-time 2; >>> bash; >>> bash Psi4conda-latest-py35-Windows-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; de",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/conda-1.html:2696,log,log,2696,psi4manual/1.1.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/conda-1.html,6,"['log', 'test']","['log', 'test']"
Testability,"ing PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; Psi3 from SourceForge; What is the suggested GitHub workflow. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI”; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/external-1.html:901,test,test,901,psi4manual/1.3.2/external-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/external-1.html,2,['test'],['test']
Testability,"ing all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/CMakeLists.txt; , so very long builds should be infrequent (unless you’re touching; psi4/psi4/src/read_options.cc or the driver. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) doc/sphinxman and start from scratch.; Even ~10 minutes of build time can be annoying when developing; documentation and testing rst files. In that situation, use the target; below which builds only the written docs (not autodocs) in; psi4/doc/sphinxman/source quickly, though with a lot of warnings for; unresolved links:; >>> make sphinxmini. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. reStructuredText; links example; rendered test document; vs. source test document; A third reStructuredText and Sphinx; Sphinx Docs. Math in the Codebase¶; It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the #! comment comments at the top of test case; input files, the /*- comment -*/ comments in; psi4/psi4/src/read_options.cc, and the r"""""" comment """"""; docstrings in python modules. (That r"""""" makes the string read; literally, so your LaTeX symbols aren’t confused with escape characters.); For the two former, math has traditionally; been written in LaTeX (with the special substitution @@ for; subscripting underscore). The autodoc script has been trained to convert; inline LaTeX math to reST math, provided the expression within dollar; signs is offset from other text. That is, expressions of the form; ^ $latex math$[., ]$ (pseudo-regex) are good, while H$_2$O and LaTeX tables; are not translated correctly. Py",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/documentation-1.html:5454,test,test,5454,psi4manual/1.4.0/documentation-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/documentation-1.html,5,['test'],['test']
Testability,"ing all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/CMakeLists.txt; , so very long builds should be infrequent (unless you’re touching; psi4/psi4/src/read_options.cc or the driver. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) doc/sphinxman and start from scratch.; Even ~10 minutes of build time can be annoying when developing; documentation and testing rst files. In that situation, use the target; below which builds only the written docs (not autodocs) in; psi4/doc/sphinxman/source quickly, though with a lot of warnings for; unresolved links:; >>> make sphinxmini. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. reStructuredText; links example; rendered test document; vs. source test document; Sphinx Docs. Math in the Codebase¶; It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the #! comment comments at the top of test case; input files, the /*- comment -*/ comments in; psi4/psi4/src/read_options.cc, and the r"""""" comment """"""; docstrings in python modules. (That r"""""" makes the string read; literally, so your LaTeX symbols aren’t confused with escape characters.); For the two former, math has traditionally; been written in LaTeX (with the special substitution @@ for; subscripting underscore). The autodoc script has been trained to convert; inline LaTeX math to reST math, provided the expression within dollar; signs is offset from other text. That is, expressions of the form; ^ $latex math$[., ]$ (pseudo-regex) are good, while H$_2$O and LaTeX tables; are not translated correctly. Python docstrings are absorbed as-is, s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/documentation.html:5454,test,test,5454,psi4manual/1.7.x/documentation.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/documentation.html,4,['test'],['test']
Testability,"ing detailed dict at atomicresult.extras[""findif_record""]. * convert result to psi4.core.Matrix. _findif_schema_to_wfn(); -----------------------; * build wfn from findif mol and basis (if singular) and module (if singular); * push qcvars to P::e and wfn. gradient_write(); ----------------; * write .grad file if requested. hessian_write(); ---------------; * write .hess file if requested. * return dd/g/h and wfn. """""". import copy; import logging; from functools import partial; from typing import Any, Callable, Dict, Iterator, List, Optional, Tuple, Union, TYPE_CHECKING. import numpy as np; from pydantic import Field, validator; from qcelemental.models import DriverEnum, AtomicResult; from qcelemental import constants. from psi4 import core; from psi4.driver import p4util, pp, qcdb, nppp10; from psi4.driver.p4util.exceptions import ValidationError; from psi4.driver.task_base import AtomicComputer, BaseComputer, EnergyGradientHessianWfnReturn. if TYPE_CHECKING:; import qcportal. logger = logging.getLogger(__name__). # CONVENTIONS:; # n_ at the start of a variable name is short for ""number of.""; # _pi at the end of a variable name is short for ""per irrep.""; # h is the index of an irrep. def _displace_cart(mass: np.ndarray, geom: np.ndarray, salc_list: core.CdSalcList, i_m: Iterator[Tuple], step_size: float) -> Tuple[np.ndarray, str]:; """"""Displace a geometry along the specified displacement SALCs. Parameters; ----------; mass; (nat, ) masses [u] of atoms of the molecule (const).; geom; (nat, 3) reference geometry [a0] of the molecule (const).; salc_list; A list of Cartesian displacement SALCs; i_m; An iterator containing tuples. Each tuple has the index of a salc in; salc_list and the number of steps (positive or negative) to displace; the salc at that index.; step_size; The size of a single ""step,"" i.e., the stencil size. Returns; -------; disp_geom; (nat, 3) Displaced geometry.; label; Displacement label for the metadata dictionary. """"""; label = []; disp_geom = np.cop",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html:4991,log,logger,4991,psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,4,['log'],"['logger', 'logging']"
Testability,"ing previous orbitals for scf guess, in subsequent calculations. The last two displacements of the hessian break the plane of symemtry, This test confirms that only the reference geometry, with the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. nbo; Generation of NBO file. fnocc6; Test method/basis with disk_df. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. remp-energy2; integral conventional unrestricted REMP/cc-pVDZ energies for the H2O+ molecule. results were independently verified against the initial wavels implementation. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-guess-read2; Test if the the guess read in the same basis converges. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and d",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:35746,test,test,35746,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ing the BSE to specify the basis sets. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. nbo; Generation of NBO file. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. mbis-2; MBIS calculation on OH- (Expanded Arrays). dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. pywrap-cbs1; Various basis set extrapolation tests. cc52; CCSD Response for H2O2. mints-benchmark; run some BLAS benchmarks. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. freq-m",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:29699,test,tested,29699,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['tested']
Testability,"ing the same values btwn CC*, FNOCC, and DFOCC modules. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:36715,test,testing,36715,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,8,['test'],['testing']
Testability,"ing, and returning.; Specialized interception for interfacing testing systems. Return type:; Union[bool, Tuple[bool, str]]. Returns:. allclose (bool) – Returns True if expected and computed are equal; False otherwise.; message (str) – When return_message=True, also return passed or error message. Notes. Akin to numpy.array_equal().; For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use compare_recursive(). Objects¶. psi4.compare_matrices(expected, computed, atol_exponent, label[, *, check_name=False, **kwargs]). psi4.compare_matrices(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Matrix objects.; Compares Matrix properties of name (optional through check_name), nirrep, symmetry, and number of rows and columns for each irrep.; For comparing actual numerical contents, the matrices are serialized to NumPy array format and passed to qcelemental.testing.compare_recursive().; Handles both Psi4-style signatures ((expected, computed, atol_exponent, label); see atol_exponent parameter below) and QCA-style signatures ((expected, computed, label)). Parameters:; atol_exponent (int or float) – Absolute tolerance (see formula in qcelemental.testing.compare_values() notes).; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99. qcelemental.testing.compare_recursive(expected, computed, label=None, *, atol=1e-06, rtol=1e-16, forgive=None, equal_phase=False, quiet=False, return_message=False, return_handler=None)[source]; Recursively compares nested structures such as dictionaries and lists. Parameters:. expected (Union[Dict, BaseModel, ProtoModel]) – Reference value against which computed is compared.; Dict may be of any depth but should contain Plain Old Data.; compute",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:19228,test,testing,19228,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,4,['test'],['testing']
Testability,"ing. Default: STANDARD except for ROHF-CCSD(T) and ROHF-MP4 calculations for which SEMICANONICAL is the default. Type: string; Possible Values: STANDARD, SEMICANONICAL; Default: STANDARD. CFOUR_PERT_ORB (CFOUR)¶CFOUR — Specifies the type of perturbed orbitals used in energy derivative calculations. STANDARD means that the gradient formulation assumes that the perturbed orbitals are not those in which the (perturbed) Fock matrix is diagonal. CANONICAL means that the perturbed orbitals are assumed to be canonical. This keyword is set automatically to CANONICAL in derivative calculations with methods which include triple excitations (MBPT[4]/MP4, CCSD+T[CCSD], CCSD[T], QCISD[T] and all iterative schemes like CCSDT-n and CC3) apart from CCSDT. IJ_CANONICAL requests a canonical perturbed-orbital treatment only for the occupied-occupied block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for all methods with triples in case of relaxed derivatives. Type: string; Possible Values: STANDARD, CANONICAL, IJ_CANONICAL; Default: No Default. CFOUR_POINTS (CFOUR)¶CFOUR — Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided numerical differentiation in the finite difference evaluation of the Hessian. Two-sided numerical differentiation is considerably more accurate than the single-sided method, and its use is strongly recommended for production work. Type: string; Possible Values: SINGLE, DOUBLE; Default: DOUBLE. CFOUR_PRINT (CFOUR)¶CFOUR — Controls the amount of printing in the energy and energy derivative calculation programs. Using a value of 1 will produce a modest amount of additional output over the default value of 0, whic",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:64552,test,testing,64552,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,9,['test'],['testing']
Testability,"ing.; valueHI; Energy, gradient, or Hessian value at the basis set.; verbose; Controls volume of printing. Returns; -------; float or ndarray; Returns :math:`E_{total}^{\infty}` which is equal to valueHI.; Eponymous function applied to input zetas and values; type from `valueHI`. Notes; -----; .. math:: E_{total}^X = E_{total}^{\infty}. Examples; --------; >>> # [1] Fancy way to get HF/cc-pCVQZ; >>> psi4.energy('cbs', scf_wfn='hf', scf_basis='cc-pcvqz', scf_scheme='xtpl_highest_1'). """"""; if isinstance(valueHI, float):. if verbose:; # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += f""""""\n ==> {functionname.upper()} <==\n\n""""""; cbsscheme += f"""""" HI-zeta ({zHI}) Energy: {valueHI: 16.12f}\n"""""". core.print_out(cbsscheme); logger.debug(cbsscheme). return valueHI. elif isinstance(valueHI, np.ndarray):. if verbose > 2:; cbsscheme = f""""""\n ==> {functionname.upper()} <==\n\n""""""; cbsscheme += f"""""" HI-zeta ({zHI}) Data\n""""""; cbsscheme += nppp(valueHI); core.print_out(cbsscheme); logger.debug(cbsscheme). return valueHI. [docs]def scf_xtpl_helgaker_2(functionname: str, zLO: int, valueLO: Extrapolatable, zHI: int, valueHI: Extrapolatable, verbose: int = 1, alpha: Optional[float] = None) -> Extrapolatable:; r""""""Extrapolation scheme using exponential form for reference energies with two adjacent; zeta-level bases. Used by :py:func:`~psi4.cbs`. Parameters; ----------; functionname; Name of the CBS component (e.g., 'HF') used in summary printing.; zLO; Zeta number of the smaller basis set in 2-point extrapolation.; valueLO; Energy, gradient, or Hessian value at the smaller basis set in 2-point; extrapolation.; zHI; Zeta number of the larger basis set in 2-point extrapolation.; Must be `zLO + 1`.; valueHI; Energy, gradient, or Hessian value at the larger basis set in 2-point; extrapolation.; verbose; Controls volume of printing.; alpha; Fitted 2-point parameter. Overrides the default :math:`\alpha = 1.63`. Returns; -------; float or ndarray; Eponymous function ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html:3112,log,logger,3112,psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_cbs_helper.html,2,['log'],['logger']
Testability,"ing; Default: NONE. BASIS (DFTSAPT); DFTSAPT — The name of the orbital basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (MINTS); MINTS — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT); SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF); SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF); SCF — Accelerate convergence by performing a preliminary scf with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the 3-21G small basis set. Type: string; Default: FALSE. BB_M_FILE (TRANSQT); TRANSQT — MO basis (pq|rs) type two-electron integrals file. Type: integer; Default: PSIF_MO_BB_TEI. BENCH (DFTSAPT); DFTSAPT — Bench level. Type: integer; Default: 0. BENCH (GLOBALS); GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI); DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC); FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY); CCENERGY — Convergence criterion for Breuckner orbitals. The convergence is determined based on the largest amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (ADC); ADC — How to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (CCDENSITY); CCDENSITY — The amount of cacheing of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENE",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:6053,benchmark,benchmarking,6053,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,2,['benchmark'],['benchmarking']
Testability,"ingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. Only used by untested distributed CC response machinery. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. # PsiImportError ceased to be used by v1.1. Class removed by v1.7; # class PsiImportError(PsiException):. [docs]; class TestComparisonError(PsiException):; """"""Error called when a :func:`~psi4.compare_values` or other comparison; function fails. Error message *msg* directed both to standard output stream and to outfile. Parameters; ----------; msg; Human readable string describing the exception. Attributes; ----------; message; Human readable string describing the exception. Example; -------; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. """"""; message: str. def __init__(self, msg: str):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]; class UpgradeHelper(PsiException):; """"""Error called on previously valid syntax that now isn't and a; simple syntax transition is possible. It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation :class:`FutureWarning`.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new. An UpgradeHelper can also be used after the :class:`FutureWarning`; descri",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html:3184,Test,TestComparisonError,3184,psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/exceptions.html,3,['Test'],['TestComparisonError']
Testability,"iniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files and Elementary Restart) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; Get bzip2. You’ll need this slightly exotic command so run which to test for availability, and install from yum, source, etc. if unavailable. You’ll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh into the computer to an account with write permissions and can connect to the internet from the computer, all is well. # check; >>> which bzip2; /usr/bin/bzip2; >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; >>> ls -1; introduction.html. Get Minicon",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:13254,log,log,13254,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,12,['log'],['log']
Testability,"ins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page; (pre-release downloads page).; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py27/35/36).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test. Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, or Windows (Ubuntu shell for Windows accepts Linux installers).; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux; # py27|py35|py36 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-Linux-x86_64.sh"" --keepalive-time 2; >>> bash; >>> bash Psi4conda-latest-py35-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py27|py35|py36 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py3",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/conda-1.html:1900,test,test,1900,psi4manual/1.1.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/conda-1.html,2,['test'],['test']
Testability,"int HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on N",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_cfour.html:3669,test,tests,3669,psi4manual/1.7.x/autodoc_testsuite_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_cfour.html,1,['test'],['tests']
Testability,"int group symmetry. The PCM model and molecular cavity are specified in a pcm section that has; to be explicitly typed in by the user. This additional section follows a syntax; that is slightly different from that of PSI4 and is fully documented; here; A typical input for a Hartree–Fock calculation with PCM would look like the following:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33molecule NH3 {; symmetry c1; N -0.0000000001 -0.1040380466 0.0000000000; H -0.9015844116 0.4818470201 -1.5615900098; H -0.9015844116 0.4818470201 1.5615900098; H 1.8031688251 0.4818470204 0.0000000000; units bohr; no_reorient; no_com; }. set {; basis STO-3G; scf_type pk; pcm true; pcm_scf_type total; }. pcm = {; Units = Angstrom; Medium {; SolverType = IEFPCM; Solvent = Water; }. Cavity {; RadiiSet = UFF; Type = GePol; Scaling = False; Area = 0.3; Mode = Implicit; }; }. More examples can be found in the directories with PCM tests; pcmsolver/pcm-scf,; pcmsolver/pcm-dft, and; pcmsolver/pcm-dipole. Keywords for PCMSolver¶. PCM¶. PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_SCF_TYPE¶. Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCM_CC_TYPE¶. PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. How to configure PCMSolver for building Psi4¶; Role and Dependencies. Role — In PSI4, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) PCMSolver; Upstream Dependencies — PCMSolver \(\Leftarrow\) Fortran, ???. table of contents. Interface to PCMSolver by R. Di Remigio; Installation; Using the polarizable continuum model; Keywords for PCMSolver; PCM; PCM_SCF_TYPE; PCM_CC_TYPE. How to configure PCMSolver for building Psi4. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Int",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/pcmsolver-1.html:3120,test,tests,3120,psi4manual/1.1.0/pcmsolver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/pcmsolver-1.html,2,['test'],['tests']
Testability,"int. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. cbs-xtpl-dict; Extrapolated water energies. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. sad-scf-type; Test SAD SCF guesses on noble gas atom. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. extern3; Externa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:45039,test,test,45039,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"int_trailer() psi4.core.FISAPT method. PRINT_TRAJECTORY_XYZ_FILE (OPTKING). print_variables() in module psi4.core. print_vector() psi4.core.CIWavefunction method. print_vibs() in module psi4.driver.qcdb.vib. PROCESS_GRID (SCF). process_input() in module psi4.driver. project_densities() psi4.core.FDDS_Dispersion method. Prop class in psi4.core. prop(). . see properties(). prop() in module psi4.driver. PROP_ALL (CCDENSITY). (CCLAMBDA). PROP_ROOT (CCDENSITY). (CCEOM). (CCLAMBDA). PROP_SYM (CCDENSITY). (CCEOM). (CCLAMBDA). PROPERTIES (GLOBALS). properties(). ; setting keywords. properties() in module psi4.driver. psi4.core.VBase method. PROPERTIES_ORIGIN (GLOBALS). PROPERTY (CCENERGY). (CCRESPONSE). provenance() psi4.core.Molecule method. pseudoinverse() psi4.core.Matrix method. psi4 command line option. ; --append. --help. --inplace. --input. --loglevel. --memory. --messy. --module. --nthread. --output. --psiapi-path. --psidatadir. --qcschema. --schema. --scratch. --skip-preprocessor. --test. --verbose. --version. -a. -h. -i. -k. -l. -m. -n. -o. -s. -t. -v. -V. psi4.core. ; module. psi4.driver. ; module. psi4.driver.qcdb.vib. ; module. PSI4FOCKCI. psi4rc. PSI_SCRATCH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11]. psi_top_srcdir() in module psi4.core. psiclean() psi4.core.IOManager method. PSIDATADIR, [1], [2], [3], [4], [5], [6], [7], [8]. PsiException. PsiImportError. psimrcc() in module psi4.core. psio_entry class in psi4.core. psioh. PSIPATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19]. psirc. PsiReturnType class in psi4.core. PT_ENERGY (PSIMRCC). PubChem. Pure psi4.core.GaussianType attribute. PUREAM (GLOBALS). push_back_external_potential() psi4.core.CUHF method. psi4.core.HF method. psi4.core.RHF method. psi4.core.ROHF method. psi4.core.UHF method. PYTHONPATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10]. Q. q psi4.core.AOShellCombinationsIterator attribute. QC_COUPLING (DCT). QC_MODULE (",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/genindex.html:113399,test,test,113399,psi4manual/1.6.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/genindex.html,1,['test'],['test']
Testability,"intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Dou",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:3399,test,test,3399,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"inuous_guess (Optional[bool]) – Do carry along guess rather than reguessing at each occupation?; filename (Optional[str]) – Result filename, if not name of molecule. Returns:; Dictionary associating SCF energies with occupations. Return type:; Dict[float, float]. psi4.driver.frac.frac_nuke(name, **kwargs)[source]¶; Pull all the electrons out, one at a time. Return type:; Dict[float, float]. Parameters:; name (Union[str, Callable]) – . psi4.set_output_file(ofile, append=False, *, loglevel=20, execute=True)[source]¶; Set the name for output and logging files. Parameters:. ofile (str) – Name of ASCII output file including extension. The logging file is set from this string with a .log extension.; append (bool) – Do append to the output and logging files rather than (the default) truncating them?; loglevel (int) – The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute (bool) – Do set ofile via psi4.core.set_output_file() and add the logger, rather than just returning ofile path. Returns:; Path(ofile). Return type:; Path. Notes; This psi4.set_output_file() command calls psi4.core.set_output_file() and should be used in; preference to it as this additionally sets up logging. pydantic model psi4.driver.task_base.BaseComputer[source]¶; Base class for “computers” that plan, run, and process QC tasks. Show JSON schema{; ""title"": ""BaseComputer"",; ""description"": ""Base class for \""computers\"" that plan, run, and process QC tasks."",; ""type"": ""object"",; ""properties"": {}; }. abstract compute()[source]¶. abstract plan()[source]¶. psi4.driver.task_planner.TaskComputers¶; alias of Union[AtomicComputer, CompositeComputer, FiniteDifferenceComputer, ManyBodyComputer]. psi4.driver.driver_nbody.SubTaskComputers¶; alias of Union[AtomicComputer, CompositeComputer, FiniteDifferenceComputer]. psi4.driver.task_planner.expand_cbs_methods(method, basis, driver, **kwargs)[source]¶; Sort out the user input method string into recognized fields.; Handl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/external_apis.html:5960,log,logger,5960,psi4manual/1.7.x/external_apis.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/external_apis.html,1,['log'],['logger']
Testability,"ion = None; run_resorting = run_resorting or not atoms_map; if mols_align is True:; a_convergence = 1.0e-3; elif mols_align is False:; a_convergence = 0.0; else:; a_convergence = mols_align. # initial presentation; atomfmt2 = """""" {} {:16.8f} {:16.8f} {:16.8f}"""""". if verbose >= 2:; print(""<<< Reference:""); for at, _ in enumerate(runiq):; print(atomfmt2.format(runiq[at][:6], *rgeom[at])). print(""<<< Concern:""); for at, _ in enumerate(cuniq):; print(atomfmt2.format(cuniq[at][:6], *cgeom[at])). # start_rmsd is nonsense if not atoms_map; start_rmsd = np.linalg.norm(cgeom - rgeom) * constants.bohr2angstroms / np.sqrt(nat); if verbose >= 1:; print(""Start RMSD = {:8.4f} [A] (naive)"".format(start_rmsd)). def _plausible_atom_orderings_wrapper(; runiq, cuniq, rgeom, cgeom, run_resorting, algorithm=""hungarian_uno"", verbose=1, uno_cutoff=1.0e-3; ):; """"""Wrapper to _plausible_atom_orderings that bypasses it (`run_resorting=False`) when; atoms of R & C known to be ordered. Easier to put logic here because _plausible is generator. """"""; if run_resorting:; return _plausible_atom_orderings(; runiq, cuniq, rgeom, cgeom, algorithm=algorithm, verbose=verbose, uno_cutoff=uno_cutoff; ); else:; return [np.arange(rgeom.shape[0])]. t0 = time.time(); tc = 0.0; for ordering in _plausible_atom_orderings_wrapper(; runiq, cuniq, rgeom, cgeom, run_resorting, algorithm=algorithm, verbose=verbose, uno_cutoff=uno_cutoff; ):; t1 = time.time(); ocount += 1; npordd = np.asarray(ordering); _, RR, TT = kabsch_align(rgeom, cgeom[npordd, :], weight=None). temp_solution = AlignmentMill(shift=TT, rotation=RR, atommap=npordd, mirror=False); tgeom = temp_solution.align_coordinates(cgeom, reverse=False); if verbose >= 4:; print(""temp geom diff\n"", tgeom - rgeom); temp_rmsd = np.linalg.norm(tgeom - rgeom) * constants.bohr2angstroms / np.sqrt(rgeom.shape[0]); temp_rmsd = np.around(temp_rmsd, decimals=8); t2 = time.time(); tc += t2 - t1. if temp_rmsd < best_rmsd:; best_rmsd = temp_rmsd; hold_solution = temp_solution;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/qcelemental/molutil/align.html:5781,log,logic,5781,psi4manual/1.4.0/_modules/qcelemental/molutil/align.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/qcelemental/molutil/align.html,6,['log'],['logic']
Testability,"ion energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. HTR40¶. Database of Hydrogen transfer reactions.; Geometries from Bozkaya and Sherrill.; Reference energies from Bozkaya and Sherrill. benchmark; '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset; 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani et al. PCCP 9 6106 (",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/autodoc_available_databases-1.html:3698,benchmark,benchmark,3698,psi4manual/1.1.0/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/autodoc_available_databases-1.html,4,['benchmark'],['benchmark']
Testability,"ion for the H2O molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. mp2-h; check that methods can act on single atom. nbody-he-4b; MP2/aug-cc-pvDZ many body energies of an arbitrary Helium complex, addressing 4-body formulas. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. ao-dfcasscf-sp; CASSCF/6-31G** energy point. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. tdscf-6; td-camb3lyp with DiskDF and method/basis specification. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. scf-occ; force oc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:27673,test,test,27673,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ion level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC)¶DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_MAXITER (DFOCC)¶DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC)¶OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF)¶MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC)¶OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_STEP_MAX (DFOCC)¶DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC)¶OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC)¶OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF)¶CPHF — What app to test?. Type: string; Possible Values: RCPHF; Default: RCPHF. MOGRAD_DAMPING (OCC)¶OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WITH_VIRTUAL (GLOBALS)¶GLOBALS — Write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs (false). Type: boolean; Default: true. MOLDEN_WRITE (DFOCC)¶DFOCC — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (SCF)¶SCF — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOM_OCC (SCF)¶SCF — The absolute indices of orbitals to excite from in MOM (+/- for alpha/bet",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html:170132,test,test,170132,psi4manual/1.6.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_glossary_options_c.html,1,['test'],['test']
Testability,"ion method. print_vibs() in module psi4.driver.qcdb.vib. PROCESS_GRID (SCF). process_input() in module psi4.driver. in module psi4.driver.inputparser. project_densities() psi4.core.FDDS_Dispersion method. Prop class in psi4.core. prop(). . see properties(). prop() in module psi4.driver. PROP_ALL (CCDENSITY). (CCLAMBDA). PROP_ROOT (CCDENSITY). (CCEOM). (CCLAMBDA). PROP_SYM (CCDENSITY). (CCEOM). (CCLAMBDA). PROPERTIES (GLOBALS). properties(). ; setting keywords. properties() in module psi4.driver. psi4.core.VBase method. PROPERTIES_ORIGIN (GLOBALS). PROPERTY (CCENERGY). (CCRESPONSE). ProtoIntVector class in psi4.core. ProtoVector class in psi4.core. provenance() psi4.core.Molecule method. provenance_stamp() in module psi4.driver.p4util. pseudoinverse() psi4.core.Matrix method. psi4 command line option. ; --append. --help. --inplace. --input. --loglevel. --memory. --messy. --module. --nthread. --output. --psiapi-path. --psidatadir. --qcschema. --schema. --scratch. --skip-preprocessor. --test. --verbose. --version. -a. -h. -i. -k. -l. -m. -n. -o. -s. -t. -v. -V. psi4.core. ; module. psi4.driver. ; module. psi4.driver.p4util. ; module. psi4.driver.qcdb.vib. ; module. PSI4FOCKCI. psi4rc. PSI_SCRATCH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11]. psi_top_srcdir() in module psi4.core. psiclean() psi4.core.IOManager method. PSIDATADIR, [1], [2], [3], [4], [5], [6], [7], [8]. PsiException. psimrcc() in module psi4.core. psio_entry class in psi4.core. psioh. PSIPATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17]. psirc. PsiReturnType class in psi4.core. PT_ENERGY (PSIMRCC). PubChem. Pure psi4.core.GaussianType attribute. PUREAM (GLOBALS). push_back_external_potential() psi4.core.HF method. PYTHONPATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11]. Q. q psi4.core.AOShellCombinationsIterator attribute. QC_COUPLING (DCT). QC_MODULE (GLOBALS). QC_TYPE (DCT). QCHF (DFOCC). (SCF). QCISD CORRELATION ENERGY. QCISD DOUB",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/genindex.html:91870,test,test,91870,psi4manual/1.7.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/genindex.html,1,['test'],['test']
Testability,"ion options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to fix error “RuntimeError: value for ERI“; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set PSIDATADIR and why; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct“; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Installation and Runtime Configuration. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:43877,test,tests,43877,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,8,['test'],"['test', 'testing', 'tests']"
Testability,"ion that is computed with cc-pVDZ-ri density fitting with ROHF. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. fci-coverage; 6-31G H2O Test for coverage. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). sad-scf-type; Test SAD SCF guesses on noble gas atom. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. props4; Electrostatic potential and electric field evaluated on a grid around water. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. scf11-freq-from-energies; Test fre",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:25045,test,test,25045,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"ion ». Embarrassing Parallelism¶; Many of the tasks automated by Python wrappers consist of a number of; independent PSI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Available at present for Database and finite difference operation; of Optimize. Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. Previous topic; Function Intercalls; Next topic; Interfaces: Enhancing PSI4 Capabilities; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » ; Psithon Functions: Invoking a Calculation ». © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/sowreap-1.html:1736,test,tested,1736,psi4manual/4.0b2/sowreap-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/sowreap-1.html,2,['test'],['tested']
Testability,"ion):; """"""Error class for Psi.""""""; extras._success_flag_ = False; pass. [docs]class ValidationError(PsiException):; """"""Error called for problems with the input file. Prints; error message *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); # print(""%s"" % repr(msg)); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class PsiImportError(PsiException):; """"""Error called for problems import python dependencies. Prints error message; *msg* to standard output stream and output file.; """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class TestComparisonError(PsiException):; """"""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class ConvergenceError(PsiException):; """"""Error called for problems with converging and iterative method. Prints; error message *msg* to standard output stream and output file. """"""; def __init__(self, eqn_description, maxit):; msg = ""Could not converge %s in %d iterations."" % (eqn_description, maxit); PsiException.__init__(self, msg); self.message = msg; core.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class CSXError(PsiException):; """"""Error called when CSX generation fails. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nCSXException: %s\n\n' % msg. [docs]class ManagedMethodError(PsiException):; def __init__(self, circs):; if circs[5] == '':; msg = """"""{0}: Method '{1}' with {2} '{3}' and REFEREN",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/exceptions.html:2270,test,test,2270,psi4manual/1.1.0/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/p4util/exceptions.html,1,['test'],['test']
Testability,"ion):; """"""Error class for Psi.""""""; extras._success_flag_ = False; pass. [docs]class ValidationError(PsiException):; """"""Error called for problems with the input file. Prints; error message *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); # print(""%s"" % repr(msg)); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class PsiImportError(PsiException):; """"""Error called for problems import python dependencies. Prints error message; *msg* to standard output stream and output file.; """"""; def __init__(self, msg):; PsiException.__init__(self,msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class TestComparisonError(PsiException):; """"""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """"""; def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class ConvergenceError(PsiException):; """"""Error called for problems with converging and iterative method. Prints; error message *msg* to standard output stream and output file. """"""; def __init__(self, eqn_description, maxit):; msg = ""Could not converge %s in %d iterations."" % (eqn_description, maxit); PsiException.__init__(self, msg); self.message = msg; core.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class OptimizationConvergenceError(ConvergenceError):; """"""Error called for problems with geometry optimizer."""""". def __init__(self, eqn_description, maxit, wfn):; ConvergenceError.__init__(self, eqn_description, maxit); self.wfn = wfn. [docs]class CSXError(PsiException):; """"""Error called when CSX generation fails. """"""; def __init__(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/exceptions.html:2272,test,test,2272,psi4manual/1.2.1/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/exceptions.html,1,['test'],['test']
Testability,"ion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. dft1-alt; DFT Functional Test. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. mbis-6; MBIS calculation on H2O. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc13c; Tests RHF CCSD(T)gradients. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. sad-scf-type; Test SAD SCF guesses on noble gas atom. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. casscf-fzc-sp; CASSCF/6-31G** energy point. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:2834,test,test,2834,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ion, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. cbs-xtpl-alpha; Extrapolated water energies. extern3; External potential calculation with one Ghost atom and one point charge at the same position. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. cbs-delta-energy; Extrapolated energies with delta correction. dft1; DFT Functional Test all values update for new BraggSlater radii. scf-coverage; Lithium test for coverage. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. numpy-array-interface; Numpy interface testing. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. cc31; CCSD/sto-3g optical rotation calculation (both gau",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:36532,test,testing,36532,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['testing']
Testability,"ion.; zMD : int; Intermediate zeta level. Should be equal to zLO + 1.; valueMD : float; Intermediate value used for extrapolation.; zHI : int; Higher zeta level. Should be equal to zLO + 2.; valueHI : float; Higher value used for extrapolation.; alpha : float, optional; Not used. Returns; -------; float; Returns :math:`E_{total}^{\infty}`, see below. Notes; -----; The extrapolation is calculated according to [4]_:; :math:`E_{total}^X = E_{total}^{\infty} + \beta e^{-\alpha X}, \alpha = 3.0`. References; ----------. .. [4] Halkier, Helgaker, Jorgensen, Klopper, & Olsen, Chem. Phys. Lett. 302 (1999) 437-446,; DOI: 10.1016/S0009-2614(99)00179-7. """""". if (type(valueLO) != type(valueMD)) or (type(valueMD) != type(valueHI)):; raise ValidationError(""scf_xtpl_helgaker_3: Inputs must be of the same datatype! (%s, %s, %s)"" %; (type(valueLO), type(valueMD), type(valueHI))). if isinstance(valueLO, float):. ratio = (valueHI - valueMD) / (valueMD - valueLO); alpha = -1 * math.log(ratio); beta = (valueHI - valueMD) / (math.exp(-1 * alpha * zMD) * (ratio - 1)); value = valueHI - beta * math.exp(-1 * alpha * zHI). if verbose:; # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> Helgaker 3-point SCF extrapolation for method: %s <==\n\n"""""" % (; functionname.upper()); cbsscheme += """""" LO-zeta (%s) Energy: % 16.12f\n"""""" % (str(zLO), valueLO); cbsscheme += """""" MD-zeta (%s) Energy: % 16.12f\n"""""" % (str(zMD), valueMD); cbsscheme += """""" HI-zeta (%s) Energy: % 16.12f\n"""""" % (str(zHI), valueHI); cbsscheme += """""" Alpha (exponent) Value: % 16.12f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: % 16.12f\n\n"""""" % (beta). name_str = ""%s/(%s,%s,%s)"" % (functionname.upper(), zeta_val2sym[zLO].upper(), zeta_val2sym[zMD].upper(),; zeta_val2sym[zHI].upper()); cbsscheme += """""" @Extrapolated """"""; cbsscheme += name_str + ':'; cbsscheme += "" "" * (18 - len(name_str)); cbsscheme += """"""% 16.12f\n\n"""""" % value; core.print_out(cbsscheme). return value. elif isinstance",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_cbs.html:17695,log,log,17695,psi4manual/1.3.2/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/driver_cbs.html,1,['log'],['log']
Testability,"ional and density fitted.; The Mac and Windows packages have base MAX_AM_ERI=5 and can run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted.; Details about angular momentum settings are available here; https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt; . How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++14 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - mpfr (for Libint2; e",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:13562,test,tests,13562,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['test'],['tests']
Testability,"ions are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. We'll try to fix it (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization (with MSVC, it enables AVX2 instructions)"" ON; ""-xHost"" ""-march=native"" ""/arch:AVX2""); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ft",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:15939,test,tested,15939,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['test'],['tested']
Testability,"ions are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. We'll try to fix it (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization"" ON; ""-xHost"" ""-march=native""); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-che",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:14739,test,tested,14739,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['test'],['tested']
Testability,"ious constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. sapt11; sapt example with orbital freezing with alkali metal and dMP2. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. cc52; CCSD Response for H2O2. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. dforemp-grad1; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O molecule. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc56; EOM-CCSD/6-31g excited state transition data for water cation. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. An F-SAPT partitioning follows I-SAPT. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. scf6; Tests ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:13524,test,test,13524,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. PSI4 and Add-On Projects Working Together. Obligations of the External Project owners are to:. allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the PSI4 build and so the installed project can; be readily detected by PSI4 or any interested party (through a; CMake imported target).; provide us a tag at a tested commit/version number so their; development may be ongoing.; communicate with us when they’ve made improvements and minted; a new tag. In return, for Add-Ons the PSI4 project will:. leave control of their code under your purview.; maintain any interfacing code needed.; regularly run integration tests between PSI4 and your code.; build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; conda install addon --channel psi4.; provide a development sandbox for your code through PSI4 plugins.; provide conda download counts independent of PSI4. How to name keywords in psi4/src/read_options.cc¶; A few guidelines for standardizing option names among modules. TRIPLES (not trip), TRIPLETS (not trip), SINGLES (not sing),; SINGLETS (not sing); CONVERGENCE (not conv, not converge) and TOLERANCE (not tol); Convergence of a method should be governed by an E_CONVERGENCE for; energy and either a D_CONVERGENCE for density or a R_CONVERGENCE; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format.; Diis should have a boolean DIIS (not do_diis, not use_diis) to turn; on/off diis extrapolation, a DIIS_MIN_VECS and DIIS_MAX_VECS for; minimum and maximum number of diis vectors to use, and a DIIS_START; which is the iteration at which to start saving vectors for diis. Not all; modules conform to all these at present, but they’re as standardized as; they can be without changing code.; AMPS (not amplitude",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html:6048,sandbox,sandbox,6048,psi4manual/1.4.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html,9,['sandbox'],['sandbox']
Testability,"ipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. PSI4 and Add-On Projects Working Together; Obligations of the External Project owners are to:; allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the PSI4 build and so the installed project can; be readily detected by PSI4 or any interested party (through a; CMake imported target).; provide us a tag at a tested commit/version number so their; development may be ongoing.; communicate with us when they’ve made improvements and minted; a new tag. In return, for Add-Ons the PSI4 project will:; leave control of their code under your purview.; maintain any interfacing code needed.; regularly run integration tests between PSI4 and your code.; build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; conda install addon --channel psi4.; provide a development sandbox for your code through PSI4 plugins.; provide conda download counts independent of PSI4. How to name keywords in psi4/src/read_options.cc¶; A few guidelines for standardizing option names among modules. TRIPLES (not trip), TRIPLETS (not trip), SINGLES (not sing),; SINGLETS (not sing); CONVERGENCE (not conv, not converge) and TOLERANCE (not tol); Convergence of a method should be governed by an E_CONVERGENCE for; energy and either a D_CONVERGENCE for density or a R_CONVERGENCE; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format.; Diis should have a boolean DIIS (not do_diis, not use_diis) to turn; on/off diis extrapolation, a DIIS_MIN_VECS and DIIS_MAX_VECS for; minimum and maximum number of diis vectors to use, and a DIIS_START; which is the iteration at which to start saving vectors for diis. Not all; modules conform to all these at present, but they’re as standardized as; they can be without changing code.; AMPS (not amplitude",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/manage_addon-1.html:6041,sandbox,sandbox,6041,psi4manual/1.2.1/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/manage_addon-1.html,4,['sandbox'],['sandbox']
Testability,"ipole moment computation, performed by applying a finite electric field and numerical differentiation. fci-dipole; 6-31G H2O Test FCI Energy Point. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. mints-helper; A general test of the MintsHelper function. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. cepa-module; routing check on lccd, lccsd, cepa(0). psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. scf-bs; U",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:17516,test,test,17516,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"ipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesia",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/testsuite-1.html:8288,test,tests,8288,psi4manual/1.1.0/testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/testsuite-1.html,4,['test'],['tests']
Testability,"iption. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. scf-cholesky-basis; incremental Cholesky filtered SCF. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:1148,test,test,1148,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"irectory will need at least two files, CMakeLists.txt and input.dat. CMakeLists.txt¶; This file adds the test case to the suite. It should have at least the following two uncommented lines:; include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ctest -L label purposes. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; If a test needs extra input files like grid.dat or extra reference files for checking against, like fchk, specify these in the CMakeLists.txt as shown above. Such tests must be run through ctest and don’t usually work when run “by hand” from the objdir via stage/bin/psi4 ../tests/directory_name/input.dat.; If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the COST line as shown above to set a weighting to about the number of seconds the test takes. input.dat¶; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:5993,test,test,5993,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['test'],['test']
Testability,"irectory, their names can be added to the the second argument list as shown above.; Those additional input files do need to be registered in psi4/psi4/CMakeLists.txt.; Finally, the label string passed to CTest is here handed to pytest, with a few changes:. psi added automatically, so exclude it when copying from CTest CMakeLists.txt; cli added automatically to distinguish CTest origin from deliberate pytest origin, which have api added; smoke used instead of CTest smoketests; quick used instead of CTest quicktests; long used instead of CTest longtests; addon and <name-of-addon> added automatically when @uusing(""<name-of-addon>"") decorates the test or marks=using(""<name-of-addon>"") marks the test. CTest “labels” are called “marks” in pytest.; Any new marks should be added to psi4/pytest.ini. Running for Debugging¶. PSIthon tests that don’t need extra files to run are easily run from <objdir> via stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out.; All PSIthon tests are runable through CTest, and output files appear in <objdir>/tests/<test-name>/output.dat and stdout results appear in <objdir>/Testing/Temporary/LastTest.log*. Adding PsiAPI Test Cases¶; To create a new test case, either create a new file or add to an existing file under psi4/tests/pytests. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; A test file may contain many tests, each of which is an ordinary Python function with name starting test_. This is how pytest knows to collect it.; No registration required to bring a test to pytest’s attention.; No registration required to bring a test to CMake’s attention. If a test needs additional files, register them in psi4/psi4/CMakeLists.txt. A few notes on test contents:. Import testing functions from utils and use Python assert: assert compare_values(expected, computed, ...).; Don’t worry about cleaning up files or resetti",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:10653,test,tests,10653,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,10,['test'],"['test-name', 'tests']"
Testability,"ired for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDM_PRINT (DETCI); DETCI — Do print the transition density?. Type: boolean; Default: false. TDM_WRITE (DETCI); DETCI — Do write the transition density?. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCFT); DCFT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow reg",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:212941,test,test,212941,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['test'],['test']
Testability,"ired for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDM_PRINT (DETCI); DETCI — Do print the transition density?. Type: boolean; Default: false. TDM_WRITE (DETCI); DETCI — Do write the transition density?. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF); SCF (Expert) — The tile size for the distributed matrices. Type: integer; De",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html:126866,test,test,126866,psi4manual/4.0b4/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_glossary_options_c-1.html,4,['test'],['test']
Testability,"irst two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. scf-cholesky-basis; incremental Cholesky filtered SCF. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). cisd-sp; 6-31G** H2O Test CISD Energy Point. cdremp-1; Cholesky decomposed REMP/cc-pVDZ energies for the CO2 molecule. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. cc56; EOM-CCSD/6-31g excited state transition data for water cation. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. fnocc3; Test FNO-QCISD(T) computation. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:23746,test,test,23746,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:38883,test,testing,38883,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,4,['test'],['testing']
Testability,"is allowed than for; CTest: pytest -m ""dftd3 and not api and not long"".; The most important marks are “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging¶; There are many ways to run pytest, How to test a Psi4 installation, and three different copies of the test file; (i.e., psi4/tests/pytests/test_mp2.py, <objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py,; CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running cmake --build after each change. Easiest is from <objdir>, run pytest ../tests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> or -n auto if pytest-xdist; installed) or print test names (-v) or print warnings (-rws).; An important point is that because they’re PsiAPI, import psi4 is happening,; so the <objdir> PSI4 module must be in PYTHONPATH. Also, any call; to QCEngine is using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi.; To see stdout output from an otherwise passing test, easiest to add assert 0; at its end to trigger failure.; If stdout printing is insufficient, and you really need to see output.dat or other files,; comment out their deletion in psi4/tests/pytests/conftest.py and run the single test, deleting; the file each time (since it appends). Comparison Functions¶. Plain Old Data¶. psi4.compare_values(expected, computed, atol_exponent, label[, *, **kwargs]). psi4.compare_values(expected, computed[, la",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:13573,test,tests,13573,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['test'],['tests']
Testability,"is allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. mbis-1; MBIS calculation on H2O. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-grac; Gradient regularized asymptotic correction (GRAC) test. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. scf-auto-cholesky; Cholesky filter a complete basis. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. d",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:4145,test,test,4145,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment vari",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/brianqc-1.html:1432,test,tested,1432,psi4manual/1.4.0/brianqc-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/brianqc-1.html,9,['test'],['tested']
Testability,"is can't actually happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1"". OBSERVE current versioning state. Nothing to make note of, this is just a snapshot. >>> psi4/versioner.py; Defining development snapshot version: 1.1rc2.dev1+4e0596e (computed); 1.1rc2.dev1 {master} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1rc1-1-g4e0596e. >>> git describe --abbrev=7 --long --dirty; v1.1rc1-1-g4e0596e. >>> git tag; v1.0; v1.1a1; v1.1rc1. >>> cat psi4/metadata.py; __version__ = '1.1rc1'; __version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> cat metadata.out.py | head -8; __version__ = '1.1rc2.dev1'; __version_branch_name = 'master'; __version_cmake = '1.0.0.999'; __version_is_clean = 'True'; __version_last_release = '1.0'; __version_long = '1.1rc2.dev1+4e0596e'; __version_prerelease = 'False'; __version_release = 'False'. >>> git log --oneline; 4e0596e Records tag for v1.1rc1; 6100822 v1.1rc1; cbee32b Fixes pcmsolver/scf for py3. Moves source for libefp upstream. ACT to inform remote of bump. Temporarily disengage “Include administrators” on protected master branch. >>> git push origin master; >>> git push origin v1.1rc1. Now https://github.com/psi4/psi4/releases says v1.1rc1 & 6100822. How to create and remove an annotated Git tag on a remote¶; PSI4 versioning only works with annotated tags, not lightweight; tags as are created with the GitHub interface. Create annotated tag:; >>> git tag -a v1.1a1 <git hash if not current> -m ""v1.1a1""; >>> git push origin v1.1a1. Delete tag:; >>> git tag -d v1.1a1; >>> git push origin :refs/tags/v1.1a1. Pull tags:; >>> git fetch <remote> 'refs/tags/*:refs/tags/*'. What Psi4 version is running¶. Psithon / from the executable:; >>> psi4 --version; 1.1rc2.dev17. PsiAPI / from the library:; >>> python -c ""import psi4; print(psi4.__version__)""; 1.1rc2.dev17. Output file header gives info like the ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_git-1.html:3902,log,log,3902,psi4manual/1.4.0/manage_git-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_git-1.html,9,['log'],['log']
Testability,"is procedure. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directory contains the following files. Makefile — Makefile for the directory. As long as you are the; only user of the plugin, this should not need editing. After any change to; the plugin C++ code, make must be run in the plugin directory to; recompile the myplugin.so executable, but recompiling the main; Psi4 code is not necessary.; input.dat — Sample input file for the plugin.; Since the __init__.py file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be included in PYTHONPATH,; either externally in the calling shell or defined in the input file.; This is usually done by manipulating PSIPATH. Then,; the plugin can be loaded as import myplugin and executed as; energy('myplugin'). Any other Python functions are also available from; the input file, e.g. myplugin.testfunction(), note the namespace; protection.; pymodule.py — Python component of the plugin. The procedure; for calling plugin code shown in input.dat sounds very simple, but it; can be made simpler still. By encoding the sequence of Psi4 module; calls needed to run the plugin in the run_myplugin() function in this; file, the plugin is hooked into the main Psi4 driver function; energy() and so can be accessed through; energy('myplugin') in an input file. Any other Python functions can; also be placed in this file.; __init__.py — Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won’t; need editing unless additional Python files are added to the plugin; directory (add additional lines to the # Load Python modules section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the # Load C++ plugin section). doc.rst — Documentation file. Place in this file a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/plugins-1.html:6244,test,testfunction,6244,psi4manual/1.0.0/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/plugins-1.html,2,['test'],['testfunction']
Testability,"is set. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:2259,test,test,2259,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"is sets available in PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of other orbital basis sets available in PSI4. Karlsruhe; other. no diffuse; augmented;  . def2-SV(P);  ; DZP. def2-SVP; def2-SVPD; TZ2P. def2-TZVP; def2-TZVPD; TZ2PF. def2-TZVPP; def2-TZVPPD; Sadlej-LPol-ds. def2-QZVP; def2-QZVPD; Sadlej-LPol-dl. def2-QZVPP; def2-QZVPPD; Sadlej-LPol-fs.  ;  ; Sadlej-LPol-fl. Footnotes. [1]Absolutely no commas are allowed in basis set specification. Use the underscore character instead. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; Psithon: Structuring an Input File; Next topic; Theoretical Methods: SCF to FCI; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules |. next |. previous |; PSI4 [beta2] » . © Copyright 2012, Psi4 Project.; Last updated on Sep 30, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/basissets-1.html:6448,stub,stub,6448,psi4manual/4.0b2/basissets-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/basissets-1.html,8,['stub'],"['stub', 'stubXZ-JKFIT']"
Testability,"is should be descriptive since it is inlined into the manual (unless !nosample in the comment) as a sample input.; Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory. output.ref¶; When your test case is in final form, run it locally, rename the output to output.ref, and check it into the repository alongside input.dat.; While this isn’t used for any testing machinery (except for the nearly decommissioned psi4/tests/psitest.pl for CC tests; full decommission expected by v1.6), it can be handy for users or developers to consult. test_input.py¶; Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest’s notice, add a file to the directory named test_input.py.; Below is an example for the psi4/tests/ci-property/test_input.py; from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the CMakeLists.txt.; The def test_ci_property contains the name of the test, now with underscores rather than hyphens.; def test_ identifies it to pytest as a test.; That part of the function name and the name of the file, test_input.py are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ctest_runner(__file__).; This uses QCEngine machinery to execute python psi4 input.dat.; If additional input file",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:8621,test,tests,8621,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,1,['test'],['tests']
Testability,"is test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc56; EOM-CCSD/6-31g excited state transition data for water cation. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. An F-SAPT partitioning follows I-SAPT. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. scf6; Tests RHF/ROHF/UHF SCF gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. cbs-xtpl-alpha; Extrapolated water energies. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom; DFT custom functional t",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:14116,test,tests,14116,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"is tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harv",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:10526,test,test,10526,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"is-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; # all equivalent. energy('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; be configured behind-the-scenes with explicit arguments, as in the; first example, or the convenience syntax of the equivalent second; example can be used.; Another very useful and powerful feature of PSI4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. table of contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Psithon: Structuring an Input File. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; .",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/psithoninput.html:14624,benchmark,benchmark,14624,psi4manual/1.8.x/psithoninput.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/psithoninput.html,1,['benchmark'],['benchmark']
Testability,"is-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; # all equivalent. energy('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; be configured behind-the-scenes with explicit arguments, as in the; first example, or the convenience syntax of the equivalent second; example can be used.; Another very useful and powerful feature of PSI4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. table of contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Psithon: Structuring an Input File. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; .",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/psithoninput.html:14688,benchmark,benchmark,14688,psi4manual/1.9.x/psithoninput.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/psithoninput.html,1,['benchmark'],['benchmark']
Testability,"isplacements""][f""{salc_index}: {-j}""][""energy""]; E[i, max_disp + j - 1] = findifrec[""displacements""][f""{salc_index}: {j}""][""energy""]. # Perform the finite difference.; if findifrec[""stencil_size""] == 3:; g_q = (E[:, 1] - E[:, 0]) / (2.0 * findifrec[""step""][""size""]); elif findifrec[""stencil_size""] == 5:; g_q = (E[:, 0] - 8.0 * E[:, 1] + 8.0 * E[:, 2] - E[:, 3]) / (12.0 * findifrec[""step""][""size""]); else: # This error SHOULD have already been caught, but just in case...; raise ValidationError(""FINDIF: {} is an invalid number of points."".format(findifrec[""stencil_size""])); g_q = np.asarray(g_q). if data[""print_lvl""]:; energy_string = """"; for i in range(1, max_disp + 1):; energy_string = f""Energy(-{i}) "" + energy_string + f""Energy(+{i}) ""; info = ""\n Coord "" + energy_string + "" Force""; for salc in range(data[""n_salc""]):; print_str = ""\n {:5d}"" + "" {:17.10f}"" * (e_per_salc) + "" {force:17.10f}""; energies = E[salc]; info += print_str.format(salc, force=g_q[salc], *energies); core.print_out(info); logger.info(info). # Transform the gradient from mass-weighted SALCs to non-mass-weighted Cartesians; B = data[""salc_list""].matrix(); g_cart = np.dot(g_q, B); g_cart = g_cart.reshape(data[""n_atom""], 3); massweighter = np.array([mol.mass(a) for a in range(data[""n_atom""])])**(0.5); g_cart = (g_cart.T * massweighter).T. if data[""print_lvl""]:; info = ""\n -------------------------------------------------------------\n""; core.print_out(info); logger.info(info). return g_cart. def _process_hessian_symmetry_block(H_block: np.ndarray, B_block: np.ndarray, massweighter: np.ndarray, irrep: str, print_lvl: int) -> np.ndarray:; """"""Perform post-construction processing for a symmetry block of the Hessian.; Statements need to be printed, and the Hessian must be made orthogonal. Parameters; ----------; H_block; A block of the Hessian for an irrep, in mass-weighted salcs.; (nsalc, nsalc); B_block; A block of the B matrix for an irrep, which transforms CdSalcs to Cartesians.; (nsalc, 3 * nat); massw",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html:22519,log,logger,22519,psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,8,['log'],['logger']
Testability,"istother.py. Building all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/CMakeLists.txt; , so very long builds should be infrequent (unless you’re touching; psi4/src/bin/psi4/read_options.cc. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) doc/sphinxman and start from scratch.; Even ~10 minutes of build time can be annoying when developing; documentation and testing rst files. In that situation, use the target; below which builds only the written docs (not autodocs) in; psi4/doc/sphinxman/source quickly, though with a lot of warnings for; unresolved links:; >>> make sphinxmini. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here’re a; few resources on Sphinx formatting. reStructuredText; rendered test document; vs. source test document; Another reStructuredText; A third reStructuredText and Sphinx; LaTeX that Sphinx can handle; Sphinx Docs. Math in the Codebase¶; It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the #! comment comments at the top of test case; input files, the /*- comment -*/ comments in; psi4/src/bin/psi4/read_options.cc, and the r"""""" comment """"""; docstrings in python modules. (That r"""""" makes the string read; literally, so your LaTeX symbols aren’t confused with escape characters.); For the two former, math has traditionally; been written in LaTeX (with the special substitution @@ for; subscripting underscore). The autodoc script has been trained to convert; inline LaTeX math to reST math, provided the expression within dollar; signs is offset from other text. That is, expressions of the form; ^ $latex math$[., ]$ (pseudo-regex) are good, while H$_2",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/documentation-1.html:3917,test,test,3917,psi4manual/1.0.0/documentation-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/documentation-1.html,2,['test'],['test']
Testability,"it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/add_tests-1.html:5331,test,tests,5331,psi4manual/1.4.0/add_tests-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html,14,['test'],"['test', 'tests']"
Testability,"it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <objdir> PSI4; module must be in PYTHONPATH. Also, any call to QCEngine is; using which psi4, so the <objdir> PSI4 executable must be in; PATH. The easiest way to prepare your local environment is to; execute the printout of <objdir>/stage/bin/psi4 --psiapi. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; Test file may contain many tests. To be recognized as a test, the Python function must start with test_.; No registration required to bring a test to pytest’s attention. There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m; <mark> vs. ctest -L <mark>) rather than just by name (pytest -k; <name_fragment> vs. ctest -R <name_fragment>). Most important are; “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those over a minute. table of contents. Adding PSIthon Test Cases; Adding PsiAPI Test Cases. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Adding PSIthon Test Cases. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/add_tests-1.html:5331,test,tests,5331,psi4manual/1.5.0/add_tests-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/add_tests-1.html,14,['test'],"['test', 'tests']"
Testability,"ite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run corre",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47068,test,test,47068,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['test'],['test']
Testability,"ite: ctest; Run about a third of the tests in 10–20 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that TravisCI checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable; psi4 --test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed,. can run in parallel, though final file cleanup may not exit cleanly. pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n`getconf _NPROCESSORS_ONLN`. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; no",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:50017,test,test,50017,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['test'],['test']
Testability,"iteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, etc..; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for compare_values() and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, etc.).; Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in psi4/tests/CMakeLists.txt or, for an addon, tests/<addon>/CMakeLists.txt.; The test directory will need at least two files, CMakeLists.txt and input.dat. CMakeLists.txt¶; This file adds the test case to the suite. It should have at least the following two uncommented lines:; include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ctest -L label purposes. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be l",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:5125,test,test,5125,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['test'],['test']
Testability,"ith Z-matrix input. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. cbs-xtpl-alpha; Extrapolated water energies. extern3; External potential calculation with one Ghost atom and one point charge at the same position. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. cbs-delta-energy; Extrapolated energies with delta correction. dft1; DFT Functional Test all values update for new BraggSlater radii. scf-coverage; Lithium test for coverage. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. numpy-array-interface; Numpy interface testing. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:36739,test,test,36739,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ith ecc, aobasis. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identic",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_cfour.html:2568,test,testing,2568,psi4manual/1.7.x/autodoc_testsuite_cfour.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_cfour.html,1,['test'],['testing']
Testability,"ith-boost-system[=special-lib] —; Use the System library from boost. It is possible to specify a certain; library for the linker e.g.,; --with-boost-system=boost_system-gcc-mt. --with-boost-thread[=special-lib] —; Use the Thread library from boost. It is possible to specify a certain; library for the linker e.g.,; --with-boost-thread=boost_thread-gcc-mt. Step 2: Compilation; Running make (which must be GNU’s ‘make’ utility) in $objdir will compile; the PSI4 libraries and executable modules. Step 3: Testing; To execute automatically the ever-growing number of test cases after; compilation, simply execute make tests in the $objdir directory.; This will run each (relatively small) test case and report the results.; Failure of any of the test cases should be reported to the developers.; By default, any such failure will stop the testing process. If you desire; to run the entire testing suit without interruption, execute make tests; TESTFLAGS='-u -q'. Note that you must do a make testsclean in $objdir; to run the test suite again. Step 4: Installation; Once testing is complete, installation into $prefix is accomplished by; running make install in $objdir. Executable modules are installed in; $prefix/bin, include files in $prefix/include, libraries in $prefix/lib, and; basis set data and various control structures in $prefix/share. Step 5: Building Documentation; This is not recommended because all of the documentation should be; available at http://sirius.chem.vt.edu/psi4manual/latest/index.html; (link “docs” off http://www.psicode.org), and it is automatically updated. However,; if your system has the appropriate utilities (notably the sphinx package; and LaTeX), you may build the package documentation from the top-level; $objdir by running make doc. The resulting files will appear in the; $prefix/doc area. Step 6: Cleaning; All object files and libraries can be removed to save disk space by running; make clean in $objdir. Step 7: User Configuration; After the PSI4 packa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/installfile.html:17568,test,testsclean,17568,psi4manual/4.0b3/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/installfile.html,6,['test'],"['test', 'testsclean']"
Testability,"ithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/sowreap-1.html:2047,test,tested,2047,psi4manual/1.2.1/sowreap-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/sowreap-1.html,2,['test'],['tested']
Testability,"itting of LRC functionals, based on a modified Regula-Falsi method. To; perform IP fitting, one simply calls the ip_fitting() Python macro, after; setting up a standard LRC UKS computation. A representative example is:; memory 512 MB. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # IP fitting runs in C1 symmetry; }. set {; reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; }. # Optional arguments are minimum omega, maximum omega, molecule object; omega = ip_fitting('wb97', 0.4, 2.0, molecule=h2o). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various values; of \(\omega\), though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; \(\omega\). The procedure can also be assisted by providing a tighter guess; for the bounds of \(\omega\). This small test case has a tuned; \(\omega\) of 1.700, hence the bounds of 0.4 and 2.0. Larger systems,; particularly conjugated systems, will typically have an optimized \(\omega\); between 0.1 and 0.5. Fractional Particle Curves¶; The behavior of the electronic energy and HOMO energy across fractional numbers; of electrons is extremely useful for elucidating the MSIE behavior of various; functional technologies. PSI4 features an efficient fractional-particle DFT; code, written into the UKS spin specialization. Due to a combination of DIIS and; reuse of integrals/guess orbitals across a range of fractional occupations, this; code is able to perform fractional occupation curves for systems with up to 60; atoms, across a wide range of the particle number \(N\).; Two python macros exist for this code. The first is frac_traverse(), which is; used to investigate the fractional occupation behavior within one electron above; and below the neutral. An example is:; molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/dft-1.html:25285,test,test,25285,psi4manual/1.4.0/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dft-1.html,9,['test'],['test']
Testability,"ity matrices. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfremp-1; density fitted REMP/cc-pVDZ energies for the CO2 molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. aediis-2; EDIIS test case from 10.1063/1.1470195. scf-response3; UHF Dipole Polarizability Test. mom-h2o-3; MOM excitation from LUMO HOMO+3. extern3; External potential calculation with one Ghost atom and one point charge at the same position. pywrap-cbs1; Various basis set extrapolation tests. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. numpy-array-interface; Numpy interface testing. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. mom-h2o-4; MOM excitation from LUMO HOMO+4. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:34751,test,test,34751,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ity2, entity3=None, entity4=None)[source]¶; (reals only, 1-indexed). save_string_xyz(save_ghosts=True)[source]¶; Save a string for a XYZ-style file.; >>> H2OH2O.save_string_xyz(); 6; -2 3 water_dimer; O -1.551007000000 -0.114520000000 0.000000000000; H -1.934259000000 0.762503000000 0.000000000000; H -0.599677000000 0.040712000000 0.000000000000; O 1.350625000000 0.111469000000 0.000000000000; H 1.680398000000 -0.373741000000 -0.758561000000; H 1.680398000000 -0.373741000000 0.758561000000. Elemental masses (most common isotope), symbols, and atomic numbers from psi4.; Stuff stolen from psi. Should import or not as necessary; or some better way. Apologies to the coders. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. query_yes_no(question, default=True)[source]¶; Ask a yes/no question via raw_input() and return their answer.; question is a string that is presented to the user.; default is the presumed answer if the user just hits <Enter>.; It must be yes (the default), no or None (meaning; an answer is required of the user).; The return value is one of True or False. File for accessory procedures in the chem module.; Credit for the libmints vector3 class to Justin M. Turney and; incremental improvements by other psi4 developers. add(v, u)[source]¶; Compute sum of vectors v and u. cross(v, u)[source]¶; Compute cross product of length 3 vectors v and u. determinant(mat)[source]¶; Given 3x3 matrix mat, compute the determinat. diagon",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_driver-1.html:67064,test,test,67064,psi4manual/4.0b5/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_driver-1.html,2,['test'],['test']
Testability,"ive level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int, optional) – Amount of printing. Unused at present. Returns. energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. save_string_xyz(self: psi4.core.Molecule) → str¶; Saves the string of an XYZ file to arg2. save_string_xyz_file(self: psi4.core.Molecule) → str¶; Saves an XYZ file to arg2. save_xyz_file(self: psi4.core.Molecule, arg0: str, arg1: bool) → None¶; Saves an XYZ file to arg0. schoenflies_symbol(self: psi4.core.Molecule) → str¶; Returns the Schoenflies symbol. scramble(do_shift=True, do_rotate=True, do_resort=True, deflection=1.0, do_mirror=False, do_plot=False, run_to_completion=False, run_resorting=False, verbose=1)[source]¶; Tester for B787 by shifting, rotating, and atom shuffling ref_mol and; checking that the aligner returns the opposite transformation. Parameters. ref_mol (Molecule) – Molecule to perturb.; do_shift (Union[bool, ndarray, List]) – Whether to generate a random atom shift on interval [-3, 3) in each; dimension (True) or leave at current origin. To shift by a specified; vector, supply a 3-element list.; do_rotate (Union[bool, ndarray, List[List]]) – Whether to generate a random 3D rotation according to algorithm of Arvo.; To rotate by a specified matrix, supply a 9-element list of lists.; do_resort (Union[bool, List]) – Whether to shuffle atoms (True) or leave 1st atom 1st, etc. (False).; To specify shuffle, supply a nat-element list of indices.; deflection (float) – If do_rotate, how random a rotation: 0.0 is no change, 0.1 is small; perturbation, 1.0 is completely random.; do_mirror (bool) – Whether to construct the mirror image structure by inverting y-axis.; do_plot (bool) – Pops up a mpl plot showing ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/api/psi4.core.molecule.html:30656,Test,Tester,30656,psi4manual/1.4.0/api/psi4.core.molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/api/psi4.core.molecule.html,3,['Test'],['Tester']
Testability,"join(pieces); opt_combos.append(pieces); return opt_combos. # gather list of model chemistries for table; mcs = ['-'.join(prod) for prod in itertools.product(mtd, opt, bas)]; mc_translator = {}; for m, o, b in itertools.product(mtd, opt, bas):; nominal_mc = '-'.join([m, o, b]); for oo in unify_options([o], opttarget['default']):; trial_mc = '-'.join([m, oo, b]); try:; perr = self.compute_statistics(trial_mc, benchmark=benchmark, sset='default', # prob. too restrictive by choosing subset; failoninc=False, verbose=False, returnindiv=False); except KeyError as e:; continue; else:; mc_translator[nominal_mc] = trial_mc; break; else:; mc_translator[nominal_mc] = None. # compute errors; serrors = {}; for mc in mcs:; serrors[mc] = {}; for ss in self.sset.keys():; serrors[mc][ss] = {}; if mc_translator[mc] in self.mcs:; # Note: not handling when one component Wdb has one translated pattern and another another; perr = self.compute_statistics(mc_translator[mc], benchmark=benchmark, sset=ss,; failoninc=failoninc, verbose=False, returnindiv=False); serrors[mc][ss][self.dbse] = format_errors(perr[self.dbse], mode=3); if not failoninc:; mcsscounts = self.get_missing_reactions(mc_translator[mc], sset=ss); serrors[mc][ss][self.dbse]['tgtcnt'] = mcsscounts[self.dbse][0]; serrors[mc][ss][self.dbse]['misscnt'] = len(mcsscounts[self.dbse][1]); if autothread:; if ('sset' in autothread and ss in autothread['sset']) or ('sset' not in autothread):; mcssplots = self.plot_flat(mc_translator[mc], benchmark=benchmark, sset=ss,; failoninc=failoninc, color='sapt', xlimit=xlimit, xlines=xlines, view=False,; saveas='flat_' + '-'.join([self.dbse, ss, mc]), relpath=True, graphicsformat=['pdf']); serrors[mc][ss][self.dbse]['plotflat'] = mcssplots['pdf']; if autoliliowa and ss == 'default':; mcssplots = self.plot_liliowa(mc_translator[mc], benchmark=benchmark,; failoninc=failoninc, xlimit=ialimit, view=False,; saveas='liliowa_' + '-'.join([self.dbse, ss, mc]), relpath=True, graphicsformat=['pdf']); ser",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:98020,benchmark,benchmark,98020,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,2,['benchmark'],['benchmark']
Testability,"k.extras['qcvars']:; mc['f_gradient'] = task.extras['qcvars']['CURRENT GRADIENT']. if 'CURRENT DIPOLE' in task.extras['qcvars']:; mc['f_dipole'] = np.array(task.extras['qcvars']['CURRENT DIPOLE']). if 'CURRENT DIPOLE GRADIENT' in task.extras['qcvars']:; mc['f_dipder'] = np.array(task.extras['qcvars']['CURRENT DIPOLE GRADIENT']). # Fill in energies for subsumed methods; if self.metameta['ptype'] == 'energy':; for wfn in VARH[mc['f_wfn']]:; for job in self.trove:; if ((wfn == job['f_wfn']) and (mc['f_basis'] == job['f_basis']); and (mc['f_options'] == job['f_options'])):; job['f_energy'] = task.extras['qcvars'][VARH[wfn][wfn]]. # Copy data from 'run' to 'obtained' table; for mce in self.trove:; if ((mc['f_wfn'] == mce['f_wfn']) and (mc['f_basis'] == mce['f_basis']); and (mc['f_options'] == mce['f_options'])):; mce['f_energy'] = mc['f_energy']; mce['f_gradient'] = mc['f_gradient']; mce['f_hessian'] = mc['f_hessian']; mce['f_dipole'] = mc['f_dipole']; mce['f_dipder'] = mc['f_dipder']. # logger.debug(""MC\n"" + pp.pformat(mc)). cbs_results, self.cbsrec = _assemble_cbs_components(self.metameta, self.trove, self.cbsrec). instructions = _summary_table(self.metadata, self.trove, self.cbsrec); core.print_out(instructions); logger.info(instructions). # logger.debug('CBS_RESULTS\n' + pp.pformat(cbs_results)); # logger.debug('GRAND_NEED\n' + pp.pformat(self.cbsrec)). cbs_results[""module""] = modules; return cbs_results. [docs] def get_results(self, client: Optional[""qcportal.FractalClient""] = None) -> AtomicResult:; """"""Return results as Composite-flavored QCSchema."""""". assembled_results = self._prepare_results(client=client); E0 = assembled_results[""energy""]. # load QCVariables & properties; qcvars = {; 'CBS NUMBER': len(self.compute_list),; 'NUCLEAR REPULSION ENERGY': self.molecule.nuclear_repulsion_energy(),; }. properties = {; ""calcinfo_natom"": self.molecule.natom(),; ""nuclear_repulsion_energy"": self.molecule.nuclear_repulsion_energy(),; ""return_energy"": E0,; }. for qcv in ['CBS",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs.html:57992,log,logger,57992,psi4manual/1.7.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs.html,2,['log'],['logger']
Testability,"kages have base MAX_AM_ERI=5 and can run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted.; Details about angular momentum settings are available here; psi4/external/upstream/libint2/CMakeLists.txt; . How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Li",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:13939,test,tests,13939,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,2,['test'],['tests']
Testability,"kali metal and dMP2. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. cc52; CCSD Response for H2O2. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. dforemp-grad1; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O molecule. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc56; EOM-CCSD/6-31g excited state transition data for water cation. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. An F-SAPT partitioning follows I-SAPT. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. scf6; Tests RHF/ROHF/UHF SCF gradients. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two exc",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:13676,test,test,13676,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; label; Label for passed and error messages. """"""; fchk_ref = _fchkfile_to_string(expected).splitlines(); fchk_calc = _fchkfile_to_string(computed).splitlines(). high_accuracy = atol_exponent; low_accuracy = 3. # Those listed below need super high scf convergence (d_conv 1e-12) and might; # show machine dependence. They will be tested with low_accuracy.; sensitive = ['Current cartesian coordinates', 'MO coefficients']. if len(fchk_ref) != len(fchk_calc):; raise ValidationError('The two FCHK files to compare have a different file length! \n'). index = 0; max_length = len(fchk_calc); tests = []; for start in range(max_length):; if index >= max_length:; break; line = fchk_calc[index]; if ""N="" in line:; offset, calc = _consume_fchk_section(fchk_calc, index); _, ref = _consume_fchk_section(fchk_ref, index); if any(x in line for x in sensitive):; test = compare_arrays(ref, calc, low_accuracy, f"" matrix section: {line}""); else:; test = compare_arrays(ref, calc, high_accuracy, f"" matrix section: {line}""); index += offset; elif "" R "" in line and ""N="" not in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_values(ref, calc, high_accuracy, f"" float value: {line}""); index += 1; elif "" I "" in line and ""N="" not in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_integers(ref, calc, f"" int value: {line}""); index += 1; else:; test = compare_strings(fchk_ref[index], line, f""FCK text line {index+1}.""); index += 1; tests.append(test). return compare_integers(True, all(tests), label). [docs]; def compare_moldenfiles(; expected: str,; computed: str,; atol_exponent: Union[int, float] = 1.e-7,; label: str = ""Compare Molden""):; """"""Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/fchk.html:4206,test,tests,4206,psi4manual/1.8.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/fchk.html,18,['test'],"['test', 'tests']"
Testability,"ken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; label; Label for passed and error messages. """"""; fchk_ref = _fchkfile_to_string(expected).splitlines(); fchk_calc = _fchkfile_to_string(computed).splitlines(). high_accuracy = atol_exponent; low_accuracy = 3. # Those listed below need super high scf convergence (d_conv 1e-12) and might; # show machine dependence. They will be tested with low_accuracy.; sensitive = ['Current cartesian coordinates', 'MO coefficients']. if len(fchk_ref) != len(fchk_calc):; raise ValidationError('The two FCHK files to compare have a different file length! \n'). index = 0; max_length = len(fchk_calc); tests = []; for start in range(max_length):; if index >= max_length:; break; line = fchk_calc[index]; if ""N="" in line:; offset, calc = _consume_fchk_section(fchk_calc, index); _, ref = _consume_fchk_section(fchk_ref, index); if any(x in line for x in sensitive):; test = compare_arrays(ref, calc, low_accuracy, f"" matrix section: {line}""); else:; test = compare_arrays(ref, calc, high_accuracy, f"" matrix section: {line}""); index += offset; elif "" R "" in line and ""N="" not in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_values(ref, calc, high_accuracy, f"" float value: {line}""); index += 1; elif "" I "" in line and ""N="" not in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_integers(ref, calc, f"" int value: {line}""); index += 1; else:; test = compare_strings(fchk_ref[index], line, f""FCK text line {index+1}.""); index += 1; tests.append(test). return compare_integers(True, all(tests), label). [docs]def compare_moldenfiles(; expected: str,; computed: str,; atol_exponent: Union[int, float] = 1.e-7,; label: str = ""Compare Molden""):; """"""Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occup",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/fchk.html:4202,test,tests,4202,psi4manual/1.7.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/fchk.html,6,['test'],"['test', 'tests']"
Testability,"keywords,; ""protocols"": {; ""stdout"": True,; },; ""extras"": {; ""psiapi"": True,; ""wfn_qcvars_only"": True,; },; }). return atomic_model. [docs] def compute(self, client: Optional[""FractalClient""] = None):; """"""Run quantum chemistry.""""""; from psi4.driver import pp. if self.computed:; return. if client:; self.computed = True; from qcportal.models import KeywordSet, Molecule. # Build the keywords; keyword_id = client.add_keywords([KeywordSet(values=self.keywords)])[0]. # Build the molecule; mol = Molecule(**self.molecule.to_schema(dtype=2)). r = client.add_compute(; ""psi4"", self.method, self.basis, self.driver, keyword_id, [mol]; ); self.result_id = r.ids[0]; # NOTE: The following will re-run errored jobs by default; if self.result_id in r.existing:; ret = client.query_tasks(base_result=self.result_id); if ret:; if ret[0].status == ""ERROR"":; client.modify_tasks(""restart"", base_result=self.result_id); logger.info(""Resubmitting Errored Job {}"".format(self.result_id)); elif ret[0].status == ""COMPLETE"":; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Job already completed {}"".format(self.result_id)); else:; logger.debug(""Submitting AtomicResult {}"".format(self.result_id)). return. logger.info(f'<<< JSON launch ... {self.molecule.schoenflies_symbol()} {self.molecule.nuclear_repulsion_energy()}'); gof = core.get_output_file(). # EITHER ...; # from psi4.driver import schema_wrapper; # self.result = schema_wrapper.run_qcschema(self.plan()); # ... OR ...; self.result = qcng.compute(; self.plan(),; ""psi4"",; raise_error=True,; # local_options below suitable for serial mode where each job takes all the resources of the parent Psi4 job.; # distributed runs through QCFractal will likely need a different setup.; local_options={; # B -> GiB; ""memory"": core.get_memory() / (2 ** 30),; ""ncores"": core.get_num_threads(),; },; ); # ... END. #pp.pprint(self.result.dict()); #print(""... JSON returns >>>""); core.set_output_file(gof, True); core.reopen_outfile()",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/task_base.html:4517,log,logger,4517,psi4manual/1.6.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/task_base.html,2,['log'],['logger']
Testability,"ks the functional to prevent changes. set_max_points(self: psi4.core.SuperFunctional, arg0: int) → None; Sets the maximum number of points. set_name(self: psi4.core.SuperFunctional, arg0: str) → None; Sets the SuperFunctional name. set_vv10_b(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the VV10 b parameter. set_vv10_c(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the VV10 c parameter. set_x_alpha(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the amount of exact global HF exchange. set_x_beta(self: psi4.core.SuperFunctional, arg0: float) → None; Sets how much more long-range exchange than short-range exchange. set_x_omega(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the range-seperation exchange parameter. test_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Vector, arg1: psi4.core.Vector, arg2: psi4.core.Vector, arg3: psi4.core.Vector, arg4: psi4.core.Vector, arg5: psi4.core.Vector, arg6: psi4.core.Vector) → None; Quick testing capabilities. value(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Vector; Returns a given internal value. values(self: psi4.core.SuperFunctional) → Dict[str, psi4.core.Vector]; Return all internal values. vv10_b(self: psi4.core.SuperFunctional) → float; The VV10 b parameter. vv10_c(self: psi4.core.SuperFunctional) → float; The VV10 c parameter. x_alpha(self: psi4.core.SuperFunctional) → float; Amount of exact HF exchange. x_beta(self: psi4.core.SuperFunctional) → float; Amount of exact HF exchange. x_functional(self: psi4.core.SuperFunctional, arg0: str) → psi::Functional; Returns the desired X Functional. x_functionals(self: psi4.core.SuperFunctional) → List[psi::Functional]; Returns all X Functionals. x_omega(self: psi4.core.SuperFunctional) → float; Range-seperated exchange parameter. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2019, The Psi4 Project.; Last upd",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/api/psi4.core.superfunctional.html:14991,test,testing,14991,psi4manual/1.3.2/api/psi4.core.superfunctional.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/api/psi4.core.superfunctional.html,1,['test'],['testing']
Testability,"kwargs}""; ); plan.build_tasks(FiniteDifferenceComputer,; **packet,; mc_level_idx=mc_level_idx,; findif_mode=dermode,; **current_findif_kwargs,; **kwargs). return plan. # Check for CBS; elif method == ""cbs"":; kwargs.update(cbsmeta); # This CompositeComputer is discarded after being used for dermode. Could have used directly for analytic except for excess printing with FD; simplekwargs = copy.deepcopy(kwargs); simplekwargs['verbose'] = 0; dummyplan = CompositeComputer(**packet, **simplekwargs). methods = [sr.method for sr in dummyplan.task_list]; # TODO: pass more info, so fn can use for managed_methods -- ref, qc_module, fc/ae, conv/df; dermode = negotiate_derivative_type(driver, methods, kwargs.pop('dertype', None), verbose=1). if dermode[0] == dermode[1]: # analytic; logger.info('PLANNING CBS: packet={packet} kw={kwargs}'); plan = CompositeComputer(**packet, **kwargs); return plan; else:; # For FD(CBS(Atomic)), the CompositeComputer above is discarded after being used for dermode.; logger.info(; f'PLANNING FD(CBS): dermode={dermode} packet={packet} findif_kw={current_findif_kwargs} kw={kwargs}'); plan = FiniteDifferenceComputer(**packet,; findif_mode=dermode,; computer=CompositeComputer,; **current_findif_kwargs,; **kwargs); return plan. # Done with Wrappers -- know we want E, G, or H -- but may still be FD or AtomicComputer; else:; dermode = negotiate_derivative_type(driver, method, kwargs.pop('dertype', None), verbose=1); convcrit = negotiate_convergence_criterion(dermode, method, return_optstash=False). if dermode[0] == dermode[1]: # analytic; logger.info(f'PLANNING Atomic: keywords={keywords}'); return AtomicComputer(**packet, **kwargs); else:; keywords.update(convcrit); logger.info(; f'PLANNING FD: dermode={dermode} keywords={keywords} findif_kw={current_findif_kwargs} kw={kwargs}'); return FiniteDifferenceComputer(**packet,; findif_mode=dermode,; **current_findif_kwargs,; **kwargs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_planner.html:9885,log,logger,9885,psi4manual/1.7.x/_modules/psi4/driver/task_planner.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_planner.html,8,['log'],['logger']
Testability,"l + rtol * absolute(expected)). psi4.compare_integers(expected, computed[, label, *, **kwargs])¶; Comparison function for integers, strings, booleans, or integer array-like data structures.; See qcelemental.testing.compare() for details.; psi4.compare_strings is an alias to this. qcelemental.testing.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=None)[source]; Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters:. expected (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Reference value against which computed is compared.; computed (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Input value to compare against expected.; label (Optional[str]) – Label for passed and error messages. Defaults to calling function name.; equal_phase (bool) – Compare computed or its opposite as equal.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Optional[Callable]) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Return type:; Union[bool, Tuple[bool, str]]. Returns:. allclose (bool) – Returns True if expected and computed are equal; False otherwise.; message (str) – When return_message=True, also return passed or error message. Notes. Akin to numpy.array_equal().; For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use compare_recursive(). Objects¶. psi4.compare_matrices(expected, computed, atol_exponent, label[, *, check_name=False, **kwargs]). psi4.compare_matrices(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Matrix objects.; Compares Matrix properties of name (optional through check_name), nirrep, symmetry, ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:18065,log,log,18065,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,3,['log'],['log']
Testability,"l at present. Also aspirational is using the intended types of gradients. opt2; SCF DZ allene geometry optimzation, with Cartesian input. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc54; CCSD dipole with user-specified basis set. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. cc16; UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf3; are specified explicitly. dftd3-energy; Exercises the various DFT-D corrections, both through python directly and through c++. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cc52; CCSD Response for H2O2. pywrap-db2; Database calculation, run in sow/reap mode. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. omp2-2; SCS-OMP2 cc-pVDZ geometry optimization for the H2O mol",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html:10257,test,tests,10257,psi4manual/4.0b3/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html,4,['test'],['tests']
Testability,"l be printed. Type: integer; Default: 15. CFOUR_OCCUPATION (CFOUR)¶CFOUR — Specifies the orbital occupancy of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. If the reference function is for an open-shell system, two strings of NIRREP occupation numbers separated by a slash are input for the \(\alpha\) and \(\beta\) sets of orbitals. An example of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the \(^2A_1\) water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR)¶CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that v",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html:60460,log,logical,60460,psi4manual/1.4.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_glossary_options_c-1.html,9,['log'],['logical']
Testability,"l chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. integer_reactions()[source]¶; Returns boolean of whether reaction names need to be cast to integer. load_qcdata_byproject(project, pythonpath=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; standard location for project :module dbse_project and function; load_project. Module search path can be prepended with pythonpath. load_qcdata_hdf5_trusted(project, path=None)[source]¶; For each component database, loads qcdb.ReactionDatums from; HDF5 file at path/dbse_project.h5 . If path not given, looks in; qcdb/data. This file ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:32326,benchmark,benchmark,32326,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['benchmark'],['benchmark']
Testability,"l done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 2.7|3.5|3.6 for alternate python versions; >>> conda create -n p4env python=x.x psi4 psi4-rt -c psi4/label/dev -c psi4. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is strongly recommended to place PSI4 into a conda; environment where its libraries can’t interfere with other programs (on; Linux/Windows, PSI4 installs a non-default gcc 5.2) rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; Only reason for psi4-rt package is to get the QC runtime; add-ons; could say dftd3 gcp v2rdm_casscf instead of psi4-rt;; or leave them out if you don’t want them. How to update a Psi4 binary¶; Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). Warning; Until 1.1 is official, this pulls the July 2016 1.0 version. 1.0 and 1.1 really shouldn’t be mixed. >>> conda update psi4 -c psi4. # if psi4 channel in defaults (true for Psi4conda installers); >>> co",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/conda-1.html:5063,test,test,5063,psi4manual/1.1.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/conda-1.html,2,['test'],['test']
Testability,"l functionals are now \(s_6\), \(s_8\),; \(a_1\), and \(a_2\). \[E_{disp}^{\text{D3BJ}}=-\sum_{n=6,8} s_n \sum_{i,j>i}^{N_{at}}; \frac{C_n^{ij}}{(R_{ij})^n + (f_{damp})^n}\]. \[f_{damp} = a_1 \sqrt{\frac{C_8^{ij}}{C_6^{ij}}} + a_2\]; All parameters characterizing the dispersion correction are taken from; Grimme’s website; or else from the literature.; With s-dftd3, parameters are also tabulated in the program source. Running DFTD3 or DFTD4¶; A number of a posteriori dispersion corrections are available in; PSI4. While some are computed within PSI4‘s codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 or -D4 corrections and their variants are; available only through the DFTD3 or DFTD4 programs. Once installed, the; dftd3/PSI4 and dftd4/PSI4 interfaces are transparent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn’t deliberately disabled.; Despite different defaults in these programs when run independently,; when run through PSI4 as EmpiricalDispersion engine, each should; produce the same result. Moreover, PSI4‘s own defaults and aliases; are unchanged by the new engines, so -D continues to mean -D2,; -D3 continues to mean zero-damping without 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise.; Dispersion corrections are built into DFT functionals, so appending an a; posteriori correction to a computation is as simple as; energy('b2plyp-d') vs. energy('b2plyp'). For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy.; molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'); energy('b3lyp-d4'). Consult the tab",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/dftd3.html:6604,test,tested,6604,psi4manual/1.9.x/dftd3.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/dftd3.html,2,['test'],['tested']
Testability,"l psi4 directory. For most Linux; and Mac compilations, this should not be necessary because the configure; file provided with PSI4 should be sufficient. To replace the general; configure file with one specific to your architecture, in the top-level; psi4 directory, run autoconf:; >>> autoconf. Configuration and Compilation; Make an object directory in which you can compile the code; >>> mkdir obj. Next you need to configure the code. Find a configuration; option line or combination of; configuration options at Section III(1)A. Either, use the line directly:; >>> cd obj; >>> ../configure [your compilation configuration options here]. or, save your configuration options for a future compilation.; In the top-level psi4 directory, create a file like “do-configure” with; the configure command and options on one line.; >>> cat do-configure; ../configure [your compilation configuration options here]; >>> chmod u+x do-configure; >>> cd obj; >>> ../do-configure. Compile the code, run the tests, and (if tests pass) install it.; >>> make; >>> make tests; >>> make install. That’s it! The details about final user configuration are given below in; Section III(7). If something goes wrong,; check Section VI about common compilation problems. III. Detailed Installation Instructions¶; This section provides a more detailed explanation of the procedure for; compiling and installing the PSI4 package. Step 1: Configuration. General Information about Configuration; First, we recommend that you choose for the top-level psi4 source; directory something other than /usr/local/psi; $HOME/psi4 or; /usr/local/src/psi4 are convenient choices. Next, in the top-level psi4; source directory you’ve chosen, first run autoconf to generate the configure; script from configure.ac. It is best to keep the source code separate; from the compilation area, so you must first choose a subdirectory for; compilation of the codes. A simple option is psi4/objdir, which should; work for most environments. However, i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/installfile.html:3540,test,tests,3540,psi4manual/4.0b4/installfile.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/installfile.html,2,['test'],['tests']
Testability,"l relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory. output.ref¶; When your test case is in final form, run it locally, rename the output to output.ref, and check it into the repository alongside input.dat.; While this isn’t used for any testing machinery (except for the nearly decommissioned psi4/tests/psitest.pl for CC tests; full decommission expected by v1.6), it can be handy for users or developers to consult. test_input.py¶; Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest’s notice, add a file to the directory named test_input.py.; Below is an example for the psi4/tests/ci-property/test_input.py; from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the CMakeLists.txt.; The def test_ci_property contains the name of the test, now with underscores rather than hyphens.; def test_ identifies it to pytest as a test.; That part of the function name and the name of the file, test_input.py are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ctest_runner(__file__).; This uses QCEngine machinery to execute python psi4 input.dat.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files do need to be registered in psi4/psi4/CMakeLists.txt.; Finally, the label string passe",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:8835,test,test,8835,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,1,['test'],['test']
Testability,"l relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you pr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/add_tests-1.html:3274,test,test,3274,psi4manual/1.4.0/add_tests-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html,4,['test'],['test']
Testability,"l round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 1; …; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 22. ACENES¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. table of contents. A24; RSE42; A24alt; BENCH12; CORE; SSI; BASIC; S66by8; O24by5mb; BBI; BAKERJCC93; NBC10; HTR40; S66; NHTBH; O24by5; BAKERJCC96; S22; RGC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html:13322,benchmark,benchmark,13322,psi4manual/1.4.0/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html,2,['benchmark'],['benchmark']
Testability,"l round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 1; …; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 22. ACENES¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. table of contents. Database — database(); Output; Available Databases; A24; RSE42; A24alt; BENCH12; CORE; SSI; BASIC; S66by8; O24by5mb; BBI; BAKERJCC93; NB",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/db-1.html:24983,benchmark,benchmark,24983,psi4manual/1.4.0/db-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html,2,['benchmark'],['benchmark']
Testability,"l stat mech purposes: RT_ATOM, RT_LINEAR, other.; T; Temperature in [K]. Psi default 298.15. Note that 273.15 is IUPAC STP.; P; Pressure in [Pa]. Psi default 101325. Note that 100000 is IUPAC STP. Returns; -------; dict, str; First is every thermochemistry component in atomic units along with input conditions.; Second is formatted presentation of analysis. """"""; sm = collections.defaultdict(float). # conditions; therminfo = {}; therminfo['E0'] = Datum('E0', 'Eh', E0); therminfo['B'] = Datum('rotational constants', 'cm^-1', rot_const); therminfo['sigma'] = Datum('external symmetry number', '', sigma); therminfo['T'] = Datum('temperature', 'K', T); therminfo['P'] = Datum('pressure', 'Pa', P). # electronic; q_elec = multiplicity; sm[('S', 'elec')] = math.log(q_elec). # translational; beta = 1 / (constants.kb * T); q_trans = (2.0 * np.pi * molecular_mass * constants.amu2kg /; (beta * constants.h * constants.h))**1.5 * constants.na / (beta * P); sm[('S', 'trans')] = 5 / 2 + math.log(q_trans / constants.na); sm[('Cv', 'trans')] = 3 / 2; sm[('Cp', 'trans')] = 5 / 2; sm[('E', 'trans')] = 3 / 2 * T; sm[('H', 'trans')] = 5 / 2 * T. # rotational; if rotor_type == ""RT_ATOM"":; pass; elif rotor_type == ""RT_LINEAR"":; q_rot = 1. / (beta * sigma * 100 * constants.c * constants.h * rot_const[1]); sm[('S', 'rot')] = 1.0 + math.log(q_rot); sm[('Cv', 'rot')] = 1; sm[('Cp', 'rot')] = 1; sm[('E', 'rot')] = T; else:; phi_A, phi_B, phi_C = rot_const * 100 * constants.c * constants.h / constants.kb; q_rot = math.sqrt(math.pi) * T**1.5 / (sigma * math.sqrt(phi_A * phi_B * phi_C)); sm[('S', 'rot')] = 3 / 2 + math.log(q_rot); sm[('Cv', 'rot')] = 3 / 2; sm[('Cp', 'rot')] = 3 / 2; sm[('E', 'rot')] = 3 / 2 * T; sm[('H', 'rot')] = sm[('E', 'rot')]. # vibrational; vibonly = filter_nonvib(vibinfo); ZPE_cm_1 = 1 / 2 * np.sum(vibonly['omega'].data.real); omega_str = _format_omega(vibonly['omega'].data, decimals=4). imagfreqidx = np.where(vibonly['omega'].data.imag > vibonly['omega'].data.real)[0]; if le",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/qcdb/vib.html:32093,log,log,32093,psi4manual/1.9.x/_modules/qcdb/vib.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/qcdb/vib.html,8,['log'],['log']
Testability,"l"":; raise ValidationError(""Hessian: Does not yet support custom functions.""); else:; lowername = name.lower(). _filter_renamed_methods(""frequency"", lowername); ; return_wfn = kwargs.pop('return_wfn', False); core.clean_variables(); dertype = 2. # Prevent methods that do not have associated energies; if lowername in energy_only_methods:; raise ValidationError(""hessian('%s') does not have an associated hessian"" % name). optstash = p4util.OptionsState(; ['FINDIF', 'HESSIAN_WRITE'],; ['FINDIF', 'FD_PROJECT'],; ). # Allow specification of methods to arbitrary order; lowername, level = driver_util.parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. dertype = _find_derivative_type('hessian', lowername, kwargs.pop('freq_dertype', kwargs.get('dertype', None))). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()); molecule.update_geometry(). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash_conv = driver_util._set_convergence_criterion('energy', lowername, 8, 10, 8, 10, 8). # Select certain irreps; irrep = kwargs.get('irrep', -1); if irrep == -1:; pass # do all irreps; else:; irrep = driver_util.parse_cotton_irreps(irrep, molecule.schoenflies_symbol()); irrep -= 1 # A1 irrep is externally 1, internally 0; if dertype == 2:; core.print_out(; """"""hessian() switching to finite difference by gradients for partial Hessian calculation.\n""""""); dertype = 1. # At stationary point?; if 'ref_gradient' in kwargs:; core.print_out(""""""hessian() using ref_gradient to assess stationary point.\n""""""); G0 = kwargs['ref_gradient']; else:; G0 = gradient(lowername, molecule=molecule, **kwargs); translations_projection_sound, rotations_projection_sound = _energy_is_invariant(G0); core.print_out(; '\n Based on options and gradient (rms={:.2E}), recommend {}projecting translations and {}projecting rotations.\n'; .format(G0.rms(), '' if translations_proj",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html:76848,test,test,76848,psi4manual/1.4.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html,4,['test'],['test']
Testability,"l) → None; Locks the functional to prevent changes. set_max_points(self: psi4.core.SuperFunctional, arg0: int) → None; Sets the maximum number of points. set_name(self: psi4.core.SuperFunctional, arg0: str) → None; Sets the SuperFunctional name. set_vv10_b(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the VV10 b parameter. set_vv10_c(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the VV10 c parameter. set_x_alpha(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the amount of exact global HF exchange. set_x_beta(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the amount of exact HF exchange at long range. set_x_omega(self: psi4.core.SuperFunctional, arg0: float) → None; Sets the range-seperation exchange parameter. test_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Vector, arg1: psi4.core.Vector, arg2: psi4.core.Vector, arg3: psi4.core.Vector, arg4: psi4.core.Vector, arg5: psi4.core.Vector, arg6: psi4.core.Vector) → None; Quick testing capabilities. value(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Vector; Returns a given internal value. values(self: psi4.core.SuperFunctional) → Dict[str, psi4.core.Vector]; Return all internal values. vv10_b(self: psi4.core.SuperFunctional) → float; The VV10 b parameter. vv10_c(self: psi4.core.SuperFunctional) → float; The VV10 c parameter. x_alpha(self: psi4.core.SuperFunctional) → float; Amount of exact HF exchange. x_beta(self: psi4.core.SuperFunctional) → float; Amount of exact HF exchange. x_functional(self: psi4.core.SuperFunctional, arg0: str) → psi::Functional; Returns the desired X Functional. x_functionals(self: psi4.core.SuperFunctional) → List[psi::Functional]; Returns all X Functionals. x_omega(self: psi4.core.SuperFunctional) → float; Range-seperated exchange parameter. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. PSI4 API: Linking C++ and Python. © Copyright 2018, The Psi4 Project.; Last upd",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/api/psi4.core.superfunctional.html:14685,test,testing,14685,psi4manual/1.2.1/api/psi4.core.superfunctional.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/api/psi4.core.superfunctional.html,1,['test'],['testing']
Testability,"l, which provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model. Double-Hybrid FunctionalsDouble hybrids are percolating into PSI4. Note that these are; only available with density-fitted, not conventional, MP2 algorithms. -D FunctionalsWe have several -D2 functionals implemented. -D3 functionls are available; with the installation of Grimme’s DFTD3 program.; For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in PSI4 for correctness. If you find an error in a DFT; functional or have a request for a new functional, please let us know on our; forum or GitHub page. Grid Selection¶; PSI4 uses the standard Lebedev-Laikov spherical quadratures in concert with a; number of radial quadratures and atomic partitioning schemes.; The default grid in PSI4 is a Lebedev-Treutler (75,302) grid with a Treutler; partition of the atomic weights.; Spherical grids are all of the extremely efficient Lebedev-Laikov type.; Spherical grid resolution is controlled by the DFT_SPHERICAL_POINTS; option, which may take one of the following values:. DFT_SPHERICAL_POINTS; Order. 6; 3. 14; 5. 26; 7. 38; 9. 50; 11. 74; 13. 86; 15. 110; 17. 146; 19. 170; 21. 194; 23. 230; 25. 266; 27. 302; 29. 350; 31. 434; 35. 590; 41. 770; 47. 974; 53. 1202; 59. 1454; 65. 1730; 71. 2030; 77. 2354; 83. 2702; 89. 3074; 95. 3470; 101. 3890; 107. 4334; 113. 4802; 119. 5294; 125. 5810; 131. The spherical grids are ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/dft-1.html:18853,test,test,18853,psi4manual/1.4.0/dft-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dft-1.html,9,['test'],['test']
Testability,"l=True),; #""mctc-gcp"": psi4_which(""mctc-gcp"", return_bool=True),; ""bse"": which_import(""basis_set_exchange"", return_bool=True),; }. def addons(request: str = None) -> Union[bool, List[str]]:; """"""Returns boolean of whether Add-On *request* is available to Psi4,; either compiled in or searchable in $PSIPATH:$PATH, as relevant. If; *request* not passed, returns list of available Add-Ons: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...` . """"""; def strike(text):; if os.name == ""nt"":; # Windows has a probably correctable problem with unicode, but I can't iterate it quickly, so use tilde for strike.; # UnicodeEncodeError: 'charmap' codec can't encode character '\u0336' in position 3: character maps to <undefined>; return ""~"" + text + ""~""; else:; return ''.join(itertools.chain.from_iterable(zip(text, itertools.repeat('\u0336')))). if request is None:; return [(k if v else strike(k)) for k, v in sorted(_addons_.items())]; return _addons_[request.lower()]. # Testing; def test(extent: str = ""full"", extras: List = None) -> int:; """"""Runs a test suite through pytest. Parameters; ----------; extent; {'smoke', 'quick', 'full', 'long'}; All choices are defined, but choices may be redundant in some projects. * _smoke_ will be minimal ""is-working?"" test(s).; * _quick_ will be as much coverage as can be got quickly, approx. 1/3 tests.; * _full_ will be the whole test suite, less some exceedingly long outliers.; * _long_ will be the whole test suite.; extras; Additional arguments to pass to `pytest`. Returns; -------; int; Return code from `pytest.main()`. 0 for pass, 1 for fail. """"""; try:; import pytest; except ImportError:; raise RuntimeError('Testing module `pytest` is not installed. Run `conda install pytest`'); abs_test_dir = os.path.sep.join([os.path.abspath(os.path.dirname(__file__)), ""tests""]). command = ['-rws', '-v']; if extent.lower() == 'smoke':; command.extend(['-m', 'smoke']); elif extent.lower() == 'quick':; command.extend(['-m', 'quick or smoke']); elif extent.lower() == 'full':; comma",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html:6329,test,test,6329,psi4manual/1.8.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html,5,"['Test', 'test']","['Testing', 'test']"
Testability,"l[int]) – Index of LUMO.; frac_diis (Optional[bool]) – Do use DIIS for non-1.0-occupied points?; neutral_guess (Optional[bool]) – Do use neutral orbitals as guess for the anion?; hf_guess (Optional[bool]) – Do use UHF guess before UKS?; continuous_guess (Optional[bool]) – Do carry along guess rather than reguessing at each occupation?; filename (Optional[str]) – Result filename, if not name of molecule. Returns:; Dictionary associating SCF energies with occupations. Return type:; Dict[float, float]. psi4.driver.frac.frac_nuke(name, **kwargs)[source]¶; Pull all the electrons out, one at a time; :rtype: Dict[float, float]. Parameters:; name (str | Callable) – . Return type:; Dict[float, float]. psi4.set_output_file(ofile, append=False, *, loglevel=20, execute=True, print_header=None, inherit_loglevel=False)[source]¶; Set the name for output and logging files. Parameters:. ofile (str) – Name of ASCII output file including extension. The logging file is set from this string with a .log extension.; append (bool) – Do append to the output and logging files rather than (the default) truncating them?; loglevel (int) – The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute (bool) – Do set ofile via psi4.core.set_output_file() and add the logger, rather than just returning ofile path.; print_header (Optional[bool]) – Whether to write the Psi4 header to the ASCII output file. (Only applicable if execute=True.) By default,; writes if file is truncated (append=False) but not if appended.; inherit_loglevel (bool) – If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns:; Path(ofile). Return type:; Path. Notes; This psi4.set_output_file() command calls psi4.core.set_output_file() and should be used in; preference to it as this additionally sets up logging. pydantic model psi4.driver.task_base.BaseComputer[source]¶; Base class for “computers” that plan, run, and process ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/external_apis.html:5734,log,log,5734,psi4manual/1.9.x/external_apis.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/external_apis.html,1,['log'],['log']
Testability,"l_options below suitable for serial mode where each job takes all the resources of the parent Psi4 job.; # distributed runs through QCFractal will likely need a different setup.; task_config={; # B -> GiB; ""memory"": core.get_memory() / (2 ** 30),; ""ncores"": core.get_num_threads(),; },; ); # ... END. #pp.pprint(self.result.dict()); #print(""... JSON returns >>>""); core.set_output_file(gof, True); core.reopen_outfile(); logger.debug(pp.pformat(self.result.dict())); core.print_out(_drink_filter(self.result.dict()[""stdout""])); self.computed = True. [docs] def get_results(self, client: Optional[""qcportal.FractalClient""] = None) -> AtomicResult:; """"""Return results as Atomic-flavored QCSchema."""""". if self.result:; return self.result. if client:; try:; # QCFractal/QCPortal v0.15.8; result = client.query_results(id=self.result_id); qca_next_branch = False; except AttributeError:; # QCFractal/QCPortal `next`; record = client.get_singlepoints(record_ids=self.result_id); qca_next_branch = True. logger.debug(f""Querying AtomicResult {self.result_id}""). if not qca_next_branch:; # QCFractal v0.15.8; if len(result) == 0:; return self.result. self.result = result[0]. else:; # QCFractal `next`; if record.status != ""complete"":; return self.result. self.result = _singlepointrecord_to_atomicresult(record). return self.result. def _singlepointrecord_to_atomicresult(spr) -> AtomicResult:; extras = spr.raw_data.extras; extras.pop(""_qcfractal_compressed_outputs"", None). atres = {; ""driver"": spr.raw_data.specification.driver,; ""model"": {; ""method"": spr.raw_data.specification.method,; ""basis"": spr.raw_data.specification.basis,; },; ""molecule"": spr.molecule,; ""keywords"": spr.raw_data.specification.keywords,; ""properties"": spr.properties,; ""protocols"": spr.raw_data.specification.protocols,; ""return_result"": spr.return_result,; ""extras"": extras,; ""stdout"": spr.stdout,; ""native_files"": spr.native_files,; ""wavefunction"": spr.wavefunction,; ""provenance"": spr.raw_data.compute_history[0].provenance,; """,MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_base.html:7134,log,logger,7134,psi4manual/1.7.x/_modules/psi4/driver/task_base.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/task_base.html,2,['log'],['logger']
Testability,"label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47552,test,test,47552,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['test'],['test']
Testability,"label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See the setup note at How to run Psi4 as Python module after compilation; if needed.):; python -c “import psi4; psi4.test()”. How to refer to Psi4¶; Ways to refer to PSI4 in text, in order of decreasing goodness:. as Psi4 in Optima regular font with “si” in custom small caps; according to psi4/media/README.md.; html: <span style=""font-family: Optima, sans-serif; color: #273896;"">P<span style=""font-size: 82%;"">SI</span>4</span>. as Psi4 with “si” in generated small caps; html: <span style=""font-variant: small-caps;"">Psi4</span>. as Psi4 with “si” in lowercase; as psi4 in code; NOT PSI4 or PSI. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for P",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:41052,test,test,41052,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,2,['test'],['test']
Testability,"label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable; psi4 --test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed,. can run in parallel, though final file cleanup may not exit cleanly. pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n`getconf _NPROCESSORS_ONLN`. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:50501,test,test,50501,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['test'],['test']
Testability,"lable (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames.; asdf.plot_flat(‘CCSD-CP-atqzadz’, failoninc=False). plot_iowa(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, title='', xtitle='', xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors for single modelchem versus; benchmark over subset sset. Coloring green-to-purple with; maximum intensity at xlimit. Prepares Iowa plot instructions and; either executes them if matplotlib available (Canopy) or prints them. plot_liliowa(modelchem, benchmark='default', failoninc=True, xlimit=2.0, view=True, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Note that not possible to access sset of component databases. That is, for Database SSIBBI, SSI-only arylaryl is accessible b/c not defined in BBI, but SSI-only neutral is not accessible. plot_modelchems(modelchem, benchmark='default', mbenchmark=None, sset='default', msset=None, failoninc=True, verbose=False, color='sapt', xlimit=4.0, labeled=True, view=True, mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None, saveas=None, relpath=False, graphicsformat=['pdf'])[source]¶; Computes individual errors and summary statistics over all component; databases for each model chemistry in array modelchem versus benchmark; over subset sset. mbenchmark and msset are array options (same; length as modelchem) that override benchmark and sset, respectively,; for non-uniform specification. Thread color can be ‘rgb’ for old; coloring, a color name or ‘sapt’ for spectrum coloring.; saveas conveys directory (‘/’) and/or filename for saving the; resulting plot. File extension is not accessible, but graphicsformat; array requests among ‘png’, ‘pdf’, and ‘eps’ formats. relpath; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary.; Prepares thread diagram inst",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:38252,benchmark,benchmark,38252,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['benchmark'],['benchmark']
Testability,"language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; psi4/external/common are needed, be sure to add them to the; DEPENDS argument.; The usual practice to to get everything cohesive between; the CMake for the AddOn repository and PSI4 and then as a; last step, mint a tag in the former and add it to two places in; external/upstream/addon_name/CMakeLists.txt and one; place in psi4/psi4/CMakeLists.txt so that only that version; and later are acceptable to PSI4 for detecting pre-built. psi4/tests/. In psi4/tests/CMakeLists.txt, add a block adding a tests subdirectory if Add-On enabled; Create new subdirectory tests/addon_name with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. psi4/doc/sphinxman/. Create a new .rst page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; psi4/doc/sphinxman/source/interfacing.rst.; Add a bullet to psi4/doc/sphinxman/source/build_planning.rst; Add the new page to the long list in; psi4/doc/sphinxman/CMakeLists.txt. If there are any files or; images referred to, add them to the file, too, following precedent. else¶. Build conda packages. Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. PSI4 and Add-On Projects Working Together. Obligations of the External Project owners are to:. allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the PSI4 build and so the installed project can; be readily detected by PSI4 or any interested party (through a; CMake imported target).; provide us a tag at",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html:4487,test,tests,4487,psi4manual/1.4.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html,9,['test'],['tests']
Testability,"lank'), textables.graphics, {}],; # ['l', r""""""Error Distribution\footnotemark[1]"""""", r"""""""""""", textables.graphics, {}],; # ]. [docs]class Database(object):; """"""Collection for handling single or multiple qcdb.WrappedDatabase objects.; Particularly, unifying modelchem and subset names that when inconsistent; across component databases. Also, defining statistics across databases. >>> asdf = qcdb.Database(['s22', 'Nbc10', 'hbc6', 'HSG'], 'DB4'); >>> qwer = qcdb.Database('s22'); """""". def __init__(self, dbnamelist, dbse=None, pythonpath=None, loadfrompickle=False, path=None):; #: internal name of database collection; #:; #: >>> print asdf.dbse; #: 'DB4'; self.dbse = None. #: ordered component Database objects; #:; #: >>> print asdf.dbdict; #: XXXX; self.dbdict = OrderedDict(). #: subset assembly pattern; #:; #: >>> print asdf.sset.keys(); #: XXXX; self.sset = OrderedDict(). #: assembly pattern for transspecies modelchems; #:; #: >>> print asdf.mcs.keys(); #: XXXX; self.mcs = {}. self.benchmark = None. # slight validation, repackaging into dbnamelist; if isinstance(dbnamelist, basestring):; dbnamelist = [dbnamelist]; elif all(isinstance(item, basestring) for item in dbnamelist):; pass; else:; raise ValidationError('Database::constructor: Inappropriate configuration of constructor arguments'). # load databases; for db in dbnamelist:; if loadfrompickle:; tmp = WrappedDatabase.load_pickled(db, path=path); else:; tmp = WrappedDatabase(db, pythonpath=pythonpath); self.dbdict[tmp.dbse] = tmp. # slurp up the obvious overlaps; consolidated_bench = [odb.benchmark() for odb in self.dbdict.values()]; if len(set(consolidated_bench)) == 1:; self.benchmark = consolidated_bench[0]; else:; self.benchmark = ''.join(consolidated_bench); self.mcs[self.benchmark] = consolidated_bench. # methods[ref] = Method(name=ref); # bases[ref] = BasisSet(name=ref). self.mcs['default'] = consolidated_bench; # self.mcs['default'] = [odb.benchmark() for odb in self.dbdict.values()]; self._intersect_subsets();",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:47298,benchmark,benchmark,47298,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"lc_list""],; zip(indices, steps), data[""step_size""]); if data[""print_lvl""] > 2:; info = ""\nDisplacement '{}'\n{}\n"".format(label, nppp10(disp_geom)); core.print_out(info); logger.info(info); findifrec[""displacements""][label] = {""geometry"": disp_geom}. for h in range(data[""n_irrep""]):; active_indices = data[""salc_indices_pi""][h]. for index in active_indices:; # Displace along the diagonal.; # Remember that the totally symmetric irrep has special displacements.; for val in data[""disps""][""sym_irr"" if h == 0 else ""asym_irr""]:; append_geoms((index, ), val). # Hessian from energies? We have off-diagonal displacements to worry about.; if mode == ""2_0"":; # i indexes SALC indices of the current irrep.; for i, index in enumerate(active_indices):; for index2 in active_indices[:i]:; for val in data[""disps""][""off""]:; append_geoms((index, index2), val). if data[""print_lvl""] > 2:; logger.info(""\nReference\n{}\n"".format(nppp10(ref_geom))); findifrec[""reference""][""geometry""] = ref_geom. if data[""print_lvl""] > 1:; logger.info(""\n-------------------------------------------------------------""). return findifrec. _der_from_lesser_docstring = """"""; Parameters; ----------; mol; The molecule on which to perform a finite difference calculation.; freq_irrep_only; The Cotton ordered irrep to get frequencies for. Choose -1 for all; irreps. Irrelevant for ""1_0"".; stencil_size; {3, 5}; Number of points to evaluate for each displacement basis vector inclusive of central reference geometry.; step_size; Displacement size [a0]. Returns; -------; findifrec : dict; Dictionary of finite difference data, specified in _geom_generator docstring. """""". gradient_from_energies_geometries = partial(_geom_generator, freq_irrep_only=-1, mode=""1_0""); hessian_from_gradients_geometries = partial(_geom_generator, mode=""2_1""); hessian_from_energies_geometries = partial(_geom_generator, mode=""2_0""). gradient_from_energies_geometries.__doc__ = ""Generate geometries for a gradient by finite difference of energies."" + _der_f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html:18717,log,logger,18717,psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,8,['log'],['logger']
Testability,"lchem.index(mc)]; try:; dictorxn[key] = orxn.data[wmc].value; except KeyError as e:; # reaction not in modelchem; if failoninc:; raise ValidationError(""""""Reaction %s missing datum %s."""""" % (key, str(e))); else:; print(mc, str(e), 'not found'); continue; listodicts.append(dictorxn). df = pd.DataFrame(listodicts); pd.set_option('display.width', 500); print(df.head(5)); print(df.tail(5)); return df. [docs] def table_reactions(self, modelchem, benchmark='default', sset='default',; failoninc=True,; columnplan=['indx', 'tagl', 'bm', 'mc', 'e', 'pe'],; title=""""""Reaction energies [kcal/mol] for {sset} $\subset$ {dbse} with {mc}"""""",; indextitle=""""""Detailed results for {sset} $\subset$ {dbse} with {mc}"""""",; plotpath='analysis/mols/',; standalone=True, theme='rxns', filename=None):; r""""""Prepare single LaTeX table to *filename* or return lines if None showing; the per-reaction results for reactions in *sset* for single or array; or 'all' *modelchem*, where the last uses self.mcs(), model chemistries; versus *benchmark*. Use *failoninc* to toggle between command failing; or blank lines in table. Use *standalone* to toggle between full; compilable document and suitable for inclusion in another LaTeX document.; Use *columnplan* to customize column (from among columnreservoir, below); layout. Use *title* and *indextitle* to customize table caption and; table-of-contents caption, respectively; variables in curly braces will; be substituted. Use *theme* to customize the \ref{tbl:} code. """"""; # define eligible columns for inclusion; columnreservoir = {; 'dbrxn': ['l', r""""""\textbf{Reaction}"""""", """"""{0:25s}""""""],; 'indx': ['r', '', """"""{0:14s}""""""],; 'tagl': ['l', r""""""\textbf{Reaction}"""""", """"""{0:50s}""""""],; 'bm': ['d', r""""""\multicolumn{1}{c}{\textbf{Benchmark}}"""""", """"""{0:8.2f}""""""],; 'mc': ['d', r""""""\multicolumn{1}{c}{\textbf{ModelChem}}"""""", """"""{0:8.2f}""""""],; 'e': ['d', r""""""\multicolumn{1}{c}{\textbf{Error}}"""""", """"""{0:8.2f}""""""],; 'pe': ['d', r""""""\multicolumn{1}{c}{\textbf{\% Err.}}"""""", """"""{0:8",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:87316,benchmark,benchmark,87316,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"lculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dft2; DFT Functional Test. scf6; Tests RHF/ROHF/UHF SCF gradients. scf-guess-read3; Test if the the guess read in the same basis converges. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:13705,test,testing,13705,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['testing']
Testability,"lder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in psi4/tests/CMakeLists.txt or, for an addon, tests/<addon>/CMakeLists.txt.; The test directory will need at least two files, CMakeLists.txt and input.dat. CMakeLists.txt¶; This file adds the test case to the suite. It should have at least the following two uncommented lines:; include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ctest -L label purposes. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; If a test needs extra input files like grid.dat or extra reference files for checking against, like fchk, specify these in the CMakeLists.txt as shown above. Such tests must be run through ctest and don’t usually work when run “by hand” from the objdir via stage/bin/psi4 ../tests/directory_name/input.dat.; If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the COST line as shown above to set a weighting to about the number of seconds the test takes. input.dat¶; The other necessary file is the input file itself",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:5745,test,test,5745,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,10,['test'],"['test', 'tests']"
Testability,"lding Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++14 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.6+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:3655,test,tests,3655,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['test'],['tests']
Testability,"lding Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++17 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:3656,test,tests,3656,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,2,['test'],['tests']
Testability,"lding the source code, these; can automatically be run by running ctest in the compilation; directory. More info on ctest options can be found; here. Sample input files; can be found in the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below.; Sample inputs accessible through interfaced executables are bulleted below. BRIANQC; CFOUR; CHEMPS2; COOKBOOK; DFTD3; DFTD4; DKH; LIBEFP; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. dft-freq-analytic2; Analytic UKS SVWN frequencies, compared to finite difference values. numpy-array-interface; Numpy interface testing. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/testsuite.html:1267,test,test,1267,psi4manual/master/testsuite.html,https://psicode.org,https://psicode.org/psi4manual/master/testsuite.html,1,['test'],['test']
Testability,"le h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy('rhf'). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be very descriptive since it is inlined into the manual (unless !nosample is present in this comment) as a sample input.; The reference values are assigned to variables for later use. The compare_values function (along with several relatives in psi4/psi4/driver/p4util/util.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 20",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/add_tests-1.html:2562,test,test,2562,psi4manual/1.3.2/add_tests-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/add_tests-1.html,2,['test'],['test']
Testability,"le inputs accessible through interfaced executables are bulleted below. BRIANQC; CFOUR; CHEMPS2; COOKBOOK; DFTD3; DFTD4; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. tdscf-7; TD-HF test variable access. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). tdscf-4; td-wb97x singlet excitation energies of methylene (tda). fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. tdscf-1; td-uhf test on triplet states of methylene (rpa). zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. cubeprop; RHF orbitals and density for water. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega= (589 355 nm). cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. mints3; Test individual integral objects for correctness. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. tu2-ch2-energy; Sample UHF/6-31G*",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/testsuite.html:1566,test,test,1566,psi4manual/1.6.x/testsuite.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/testsuite.html,1,['test'],['test']
Testability,"le is part of Psi4.; #; # Psi4 is free software; you can redistribute it and/or modify; # it under the terms of the GNU Lesser General Public License as published by; # the Free Software Foundation, version 3.; #; # Psi4 is distributed in the hope that it will be useful,; # but WITHOUT ANY WARRANTY; without even the implied warranty of; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; # GNU Lesser General Public License for more details.; #; # You should have received a copy of the GNU Lesser General Public License along; # with Psi4; if not, write to the Free Software Foundation, Inc.,; # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. import os; import hashlib; import collections; from typing import Dict, List, Optional, Tuple, Union. import numpy as np. import qcelemental as qcel. import psi4; from .constants import constants; from .util import parse_dertype; from .libmintsmolecule import *; from .testing import compare_values, compare_integers, compare_molrecs; from .bfs import BFS. qcdbmol = ""psi4.driver.qcdb.molecule.Molecule"". [docs]; class Molecule(LibmintsMolecule):; """"""Class to store the elements, coordinates, fragmentation pattern,; charge, multiplicity of a molecule. Largely replicates psi4's libmints; Molecule class, developed by Justin M. Turney and Andy M. Simmonett; with incremental improvements by other psi4 developers. Major. This class extends `qcdb.LibmintsMolecule` and occasionally; `psi4.core.Molecule` itself. """""". def __init__(self,; molinit=None,; dtype=None,; geom=None,; elea=None,; elez=None,; elem=None,; mass=None,; real=None,; elbl=None,; name=None,; units='Angstrom',; input_units_to_au=None,; fix_com=None,; fix_orientation=None,; fix_symmetry=None,; fragment_separators=None,; fragment_charges=None,; fragment_multiplicities=None,; molecular_charge=None,; molecular_multiplicity=None,; comment=None,; provenance=None,; connectivity=None,; enable_qm=True,; enable_efp=True,; missing_enabled_ret",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/qcdb/molecule.html:1381,test,testing,1381,psi4manual/1.9.x/_modules/psi4/driver/qcdb/molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/qcdb/molecule.html,4,['test'],['testing']
Testability,"le name must start with test_. This is how pytest knows to collect it.; A test file may contain many tests, each of which is an ordinary Python function with name starting test_. This is how pytest knows to collect it.; No registration required to bring a test to pytest’s attention.; No registration required to bring a test to CMake’s attention. If a test needs additional files, register them in psi4/psi4/CMakeLists.txt. A few notes on test contents:. Import testing functions from utils and use Python assert: assert compare_values(expected, computed, ...).; Don’t worry about cleaning up files or resetting options. A function in psi4/tests/pytests/conftest.py does this automatically between every test.; Especially if using data or functions from outside a test, run a variety of tests at different pytest -n <N> levels to mix up test ordering. If tests fail that pass when run alone, you’ve got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. For every new test file, add pytestmark = [pytest.mark.psi, pytest.mark.api] at the top.; This ensures that every test has the psi mark and every PsiAPI test has the api mark to contrast with PSIthon tests with cli mark.; There are individual “marks” that can be added to whole tests or parts; of parameterized tests so that they can be run by category (pytest -m <mark>; vs. ctest -L <mark>) rather than just by name (pytest -k <name_fragment>; vs. ctest -R <name_fragment>). Far more complicated logic is allowed than for; CTest: pytest -m ""dftd3 and not api and not long"".; The most important marks are “quick” and “long” that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search “mark” in the test suite; for examples. Use “quick” freely for tests that cover functionality and; are under 15s. Use “long” sparingly to winnow out the longest examples,; particularly those o",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:12057,test,test,12057,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['test'],['test']
Testability,"le names and numbers in psi4/psi4/include/psi4/psifiles.h. Some documentation is even extracted from PSI4 objects at runtime. psi4: docstrings for the psi4 built-in module constructed in psi4/psi4/src/psi4; DFT: functional availability and characteristics as encoded in psi4/psi4/driver/procedures/dft_functional.py; BasisFamily: fitting basis sets for each orbital basis as encoded in psi4/psi4/driver/qcdb/basislistdunning.py and psi4/psi4/driver/qcdb/basislistother.py. Building all the documentation takes ~15 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/CMakeLists.txt; , so very long builds should be infrequent (unless you’re touching; psi4/psi4/src/read_options.cc or the driver. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) doc/sphinxman and start from scratch.; Even ~15 minutes of build time can be annoying when developing; documentation and testing rst files. In that situation, use the target; below which builds only the written docs (not autodocs) in; psi4/doc/sphinxman/source quickly, though with a lot of warnings for; unresolved links:; 1>>> make sphinxmini. reStructuredText¶; Sphinx files are written in reStructuredText (*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. reStructuredText; rendered test document; vs. source test document; A third reStructuredText and Sphinx; Sphinx Docs. Math in the Codebase¶; It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the #! comment comments at the top of test case; input files, the /*- comment -*/ comments in; psi4/psi4/src/read_options.cc, and the r"""""" comment """"""; docstrings in python modules. (That r"""""" makes the string read; literally, so your LaTeX symbols are",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/documentation-1.html:3596,test,testing,3596,psi4manual/1.2.1/documentation-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/documentation-1.html,6,['test'],['testing']
Testability,"le names must be as given below.\n\n""""""; for rgt in HSYS:; instructions += """""" psi4 -i %-27s -o %-27s\n"""""" % (rgt + '.in', rgt + '.out'); instructions += """"""\n (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructions += """""" %s-master.in into that directory and run it. The job will be trivial in\n"""""" % (dbse); instructions += """""" length and give summary results for the database in its output file.\n\n""""""; instructions += """""" psi4 -i %-27s -o %-27s\n\n"""""" % (dbse + '-master.in', dbse + '-master.out'); instructions += """""" Alternatively, a single-job execution of the database may be accessed through\n""""""; instructions += """""" the database wrapper option mode='continuous'.\n\n""""""; core.print_out(instructions). with open('%s-master.in' % (dbse), 'w') as fmaster:; fmaster.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); fmaster.write(""database('%s', '%s', mode='reap', cp='%s', rlxd='%s', zpe='%s', benchmark='%s', linkage=%d, subset=%s, tabulate=%s)\n\n"" %; (name, db_name, db_cp, db_rlxd, db_zpe, db_benchmark, os.getpid(), HRXN, db_tabulate)). # Loop through chemical systems; ERGT = {}; ERXN = {}; VRGT = {}; VRXN = {}; for rgt in HSYS:; VRGT[rgt] = {}. # build string of title banner; banners = ''; banners += """"""core.print_out('\\n')\n""""""; banners += """"""p4util.banner(' Database %s Computation: Reagent %s \\n %s')\n"""""" % (db_name, rgt, TAGL[rgt]); banners += """"""core.print_out('\\n')\n\n"""""". # build string of lines that defines contribution of rgt to each rxn; actives = ''; actives += """"""core.print_out(' Database Contributions Map:\\n %s\\n')\n"""""" % ('-' * 75); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn); if rgt in ACTV[db_rxn]:; actives += """"""core.print_out(' reagent %s contributes by %.4f to reaction %s\\n')\n"""""" \; % (rgt, RXNM[db_rxn][rgt], db_rxn); actives += """"""core.print_out('\\n')\n\n"""""". # build string of commands for options from the input file TODO: handle local options too; commands = '';",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html:18021,benchmark,benchmark,18021,psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/wrapper_database.html,3,['benchmark'],['benchmark']
Testability,"le names must be as given below.\n\n""""""; for rgt in HSYS:; instructions += """""" psi4 -i %-27s -o %-27s\n"""""" % (rgt + '.in', rgt + '.out'); instructions += """"""\n (2) Gather all the resulting output files in a directory. Place input file\n""""""; instructions += """""" %s-master.in into that directory and run it. The job will be trivial in\n"""""" % (dbse); instructions += """""" length and give summary results for the database in its output file.\n\n""""""; instructions += """""" psi4 -i %-27s -o %-27s\n\n"""""" % (dbse + '-master.in', dbse + '-master.out'); instructions += """""" Alternatively, a single-job execution of the database may be accessed through\n""""""; instructions += """""" the database wrapper option mode='continuous'.\n\n""""""; psi4.print_out(instructions). with open('%s-master.in' % (dbse), 'w') as fmaster:; fmaster.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); fmaster.write(""database('%s', '%s', mode='reap', cp='%s', rlxd='%s', zpe='%s', benchmark='%s', linkage=%d, subset=%s, tabulate=%s)\n\n"" %; (name, db_name, db_cp, db_rlxd, db_zpe, db_benchmark, os.getpid(), HRXN, db_tabulate)). # Loop through chemical systems; ERGT = {}; ERXN = {}; VRGT = {}; VRXN = {}; for rgt in HSYS:; VRGT[rgt] = {}. # build string of title banner; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""p4util.banner(' Database %s Computation: Reagent %s \\n %s')\n"""""" % (db_name, rgt, TAGL[rgt]); banners += """"""psi4.print_out('\\n')\n\n"""""". # build string of lines that defines contribution of rgt to each rxn; actives = ''; actives += """"""psi4.print_out(' Database Contributions Map:\\n %s\\n')\n"""""" % ('-' * 75); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn); if rgt in ACTV[db_rxn]:; actives += """"""psi4.print_out(' reagent %s contributes by %.4f to reaction %s\\n')\n"""""" \; % (rgt, RXNM[db_rxn][rgt], db_rxn); actives += """"""psi4.print_out('\\n')\n\n"""""". # build string of commands for options from the input file TODO: handle local options too; commands = '';",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html:18133,benchmark,benchmark,18133,psi4manual/1.0.0/_modules/wrapper_database.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/wrapper_database.html,1,['benchmark'],['benchmark']
Testability,"le point energies of multiple excited states with EOM-CCSD. cisd-sp; 6-31G** H2O Test CISD Energy Point. mrcc4; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). fci-dipole; 6-31G H2O Test FCI Energy Point. tu4-h2o-freq; Frequencies for H2O HF/cc-pVDZ at optimized geometry. dcft3; DCFT-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. mints3; Test individual integral objects for correctness. omp3-2; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html:12300,test,test,12300,psi4manual/4.0b3/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html,4,['test'],['test']
Testability,"le with 6-31G basis set. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dct10; The multiple guesses for DCT amplitudes for ODC-12. mom-h2o-3; MOM excitation from LUMO HOMO+3. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. nbo; Generation of NBO file. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. mbis-5; MBIS calculation on ZnO. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. fd-gradient; SCF STO-3G finite-difference tests. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:37499,test,tests,37499,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"le')); # with open('/var/www/html/bfdb_devel/bfdb/scratch/ASDFlogfile.txt', 'a') as handle:; # handle.write('<!-- PICKLE %s\n' % (picklefile)); with open(picklefile, 'rb') as handle:; instance = pickle.load(handle); return instance. [docs] def available_modelchems(self, union=True):; """"""Returns all the labels of model chemistries that have been; loaded. Either all modelchems that have data for any reaction if; *union* is True or all modelchems that have data for all reactions; if *union* is False. """"""; mcs = [set(v.data) for v in self.hrxn.itervalues()]; if union:; return sorted(set.union(*mcs)); else:; return sorted(set.intersection(*mcs)). [docs] def benchmark(self):; """"""Returns the model chemistry label for the database's benchmark.""""""; bm = None; rxns = self.hrxn.itervalues(); while bm is None:; try:; bm = next(rxns).benchmark; except StopIteration:; break; return bm; # return next(self.hrxn.itervalues()).benchmark; # TODO all rxns have same bench in db module so all have same here in obj; # but the way things stored in Reactions, this doesn't have to be so. [docs] def load_subsets(self, modname='subsetgenerator', pythonpath=None):; """"""Loads subsets from all functions in module *modname*. """"""; if pythonpath is not None:; sys.path.insert(1, pythonpath); else:; sys.path.append(os.path.dirname(__file__)); try:; ssmod = __import__(modname); except ImportError:; print(""""""\nPython module for database data %s failed to load\n\n"""""" % (modname)); print(""""""\nSearch path that was tried:\n""""""); print(', '.join(map(str, sys.path))); raise ValidationError(""Python module loading problem for database subset generator "" + str(modname)). for func in dir(ssmod):; if callable(getattr(ssmod, func)):; self.add_Subset(getattr(ssmod, func).__doc__, getattr(ssmod, func)). print(""""""WrappedDatabase %s: Defined subsets loaded"""""" % (self.dbse)). [docs] def get_pec_weightinfo(self):; """""". """"""; def closest(u, options):; return max(options, key=lambda v: len(os.path.commonprefix([u, v]))). dbda",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:42229,benchmark,benchmark,42229,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"le. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. mints3; Test individual integral objects for correctness. dft-smoke; DFT Functional Smoke Test. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. linK-1; RHF Linear Exchange Algorithm test for water. mbis-3; MBIS calculation on OH radical. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. dft2; DFT Functional Test. soscf-large; Second-order SCF convergnece: Benzene. cbs-xtpl-alpha; Extrapolated water energies. cc17; Single point energies of multiple excited states with EOM-CCSD. fd-gradient; SCF STO-3G finite-difference tests. mbis-6; MBIS calculation on H2O. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. cbs-delta-energy; Extrapolated energies with delta correction. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. frac-sym; Fractional occupation with symmetry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:32430,test,tests,32430,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"le. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. soscf-large; Second-order SCF convergnece: Benzene. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft1-alt; DFT Functional Test. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. nbody-vmfc-hessian; Computation of VMFC-corrected water trimer Hessian (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. fci-h2o; 6-31G H2O Test FCI Energy Point. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described us",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:32940,test,testing,32940,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['testing']
Testability,"le. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. mints-helper; A general test of the MintsHelper function. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). scf-upcast-custom-basis; test scf castup with custom basis sets. dct10; The multiple guesses for DCT amplitudes for ODC-12. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. sapt-ecp; sapt0 of charged system in ECP basis set. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cbs-xtpl-alpha; Extrapolated water energies. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. dfmp2-3; DF-MP2 cc-pVDZ froz",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:21433,test,test,21433,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"le. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. fnocc5; Test FNO-DF-CCSD(T) energy. mints-benchmark; run some BLAS benchmarks. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. mbis-1; MBIS calculation on H2O. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. dft-reference; MP2 with a PBE0 reference computation. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. cubeprop-esp; RHF orbitals and density for water. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. linK-2; RKS Linear Exchange Algorithm test for benzene. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. tdscf-1; td-uhf test on triplet states of methylene (rpa). dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. fnocc4; Test FNO-DF-CCSD(T) energy. cdremp-1; Cholesky decomposed REMP/cc-pVDZ energies for the CO2 molecule. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure update",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:30986,test,test,30986,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"le; Default: 0.4. REGULARIZATION (DFOCC)¶DFOCC — Do use regularized denominators?. Type: boolean; Default: false. RELATIVISTIC (GLOBALS)¶GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCT)¶DCT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAXED (OCC)¶OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REMP_A (DFOCC)¶DFOCC — mixing parameter for the REMP hybrid perturbation theory, A specifies the Moller-Plesset fraction. Type: double; Default: 0.15e0. REMP_A (OCC)¶OCC — mixing parameter for the REMP hybrid perturbation theory, A specifies the Moller-Plesset fraction. Type: double; Default: 0.15e0. REPL_OTF (DETCI)¶DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCT)¶DCT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY)¶CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA)¶CCLAMBDA — Do restart the coupled-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html:206513,test,tested,206513,psi4manual/1.7.x/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_glossary_options_c.html,4,['test'],['tested']
Testability,"lease tag; Tag (pre)release; Initialize release branch; Build Conda Psi4 stack at specific commit; Publish to main conda label; Build Psi4conda set; Generate download page for psicode.org; Collect documentation snapshot; Publish GitHub release; Publish psicode release; Finalize release; Reset psi4meta for nightly operation. Post-Release (e.g., v1.3.1)¶. Assemble postrelease changes; Tweak Conda for postrelease; Do final pass before release tag; Tag postrelease; Build Conda Psi4 stack at specific commit; Publish to main conda label; Build Psi4conda set; Generate download page for psicode.org; Collect documentation snapshot; Publish GitHub postrelease; Publish psicode release; Finalize release; Reset psi4meta for nightly operation. Update copyright year¶. cd ~/path/to/psi4; Primary target is licenses. grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""; On Linux, drop the '' in above command; Need to do psi4/ and docs/ dirs. Also, license in these files. tests/runtest.py; README.md. Also, in content of psi4/doc/sphinxman/source/conf.py.in#L130. Update samples¶. Run make sphinxman at least once by hand; Check in resulting psifiles.py and all the updated and new samples/ files and dirs; Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors¶. Survey contributions to current Milestone. Add new contribs and PR lists to release notes GitHub issue; Figure out any new “Additional Contributors” authors since last release; Edit psi4/header.py accordingly, make PR; Get permission of new authors and their particulars for codemeta.json; Invite any contributors with at least 3 PRs to join GitHub Organization. Anticipate next release¶. Bump version in codemeta.json, psi4/codemeta.json#L9; Add to branch list in azure-pipelines.yml, psi4/azure-pipelines.yml. Build Conda ecosystem stack¶; By “ecosystem stack”, mean packages that are upstream, downstream, required, and optional for a fully featured Psi4 build and which we ca",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/manage_release.html:1527,test,tests,1527,psi4manual/1.7.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/manage_release.html,2,['test'],['tests']
Testability,"lease tag; Tag (pre)release; Initialize release branch; Build Conda Psi4 stack at specific commit; Publish to main conda label; Build Psi4conda set; Generate download page for psicode.org; Collect documentation snapshot; Publish GitHub release; Publish psicode release; Finalize release; Reset psi4meta for nightly operation. Post-Release (e.g., v1.3.1)¶. Assemble postrelease changes; Tweak Conda for postrelease; Do final pass before release tag; Tag postrelease; Build Conda Psi4 stack at specific commit; Publish to main conda label; Build Psi4conda set; Generate download page for psicode.org; Collect documentation snapshot; Publish GitHub postrelease; Publish psicode release; Finalize release; Reset psi4meta for nightly operation. Update copyright year¶. cd ~/path/to/psi4; Primary target is licenses. grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""; On Linux, drop the '' in above command; Need to do psi4/ and docs/ dirs. Also, license in these files. tests/runtest.py; README.md; tests/psitest.pl. Also, in content of https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/conf.py.in#L118. Update samples¶. Run make sphinxman at least once by hand; Check in resulting psifiles.py and all the updated and new samples/ files and dirs; Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors¶. Survey contributions to current Milestone. Add new contribs and PR lists to release notes GitHub issue; Figure out any new “Additional Contributors” authors since last release; Edit psi4/header.py accordingly, make PR; Get permission of new authors and their particulars for codemeta.json; Invite any contributors with at least 3 PRs to join GitHub Organization. Anticipate next release¶. Bump version in codemeta.json, https://github.com/psi4/psi4/blob/master/codemeta.json#L9; Add to branch list in azure-pipelines.yml, psi4/azure-pipelines.yml. Build Conda ecosystem stack¶; By “ecosystem stack”, mean packages that are up",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/manage_release-1.html:1527,test,tests,1527,psi4manual/1.5.0/manage_release-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/manage_release-1.html,2,['test'],['tests']
Testability,"lease tag; Tag (pre)release; Initialize release branch; Build Conda Psi4 stack at specific commit; Publish to main conda label; Build Psi4conda set; Generate download page for psicode.org; Collect documentation snapshot; Publish GitHub release; Publish psicode release; Finalize release; Reset psi4meta for nightly operation. Post-Release (e.g., v1.3.1)¶. Assemble postrelease changes; Tweak Conda for postrelease; Do final pass before release tag; Tag postrelease; Build Conda Psi4 stack at specific commit; Publish to main conda label; Build Psi4conda set; Generate download page for psicode.org; Collect documentation snapshot; Publish GitHub postrelease; Publish psicode release; Finalize release; Reset psi4meta for nightly operation. Update copyright year¶. cd ~/path/to/psi4; Primary target is licenses. grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""; On Linux, drop the '' in above command; Need to do psi4/ and docs/ dirs. Also, license in these files. tests/runtest.py; README.md; tests/psitest.pl. Also, in content of psi4/doc/sphinxman/source/conf.py.in#L130. Update samples¶. Run make sphinxman at least once by hand; Check in resulting psifiles.py and all the updated and new samples/ files and dirs; Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors¶. Survey contributions to current Milestone. Add new contribs and PR lists to release notes GitHub issue; Figure out any new “Additional Contributors” authors since last release; Edit psi4/header.py accordingly, make PR; Get permission of new authors and their particulars for codemeta.json; Invite any contributors with at least 3 PRs to join GitHub Organization. Anticipate next release¶. Bump version in codemeta.json, psi4/codemeta.json#L9; Add to branch list in azure-pipelines.yml, psi4/azure-pipelines.yml. Build Conda ecosystem stack¶; By “ecosystem stack”, mean packages that are upstream, downstream, required, and optional for a fully featured Psi4 bui",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/manage_release.html:1527,test,tests,1527,psi4manual/1.6.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/manage_release.html,1,['test'],['tests']
Testability,"lecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. ACENES¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. RGC10¶. Database (Sherrill) of interaction energies for dissociation curves of rare-gas biatomic complexes.; Geometries and reference interaction energies from Tang et al. JCP 118 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'HeHe",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_available_databases-1.html:9888,test,testing,9888,psi4manual/1.2.1/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_available_databases-1.html,12,['test'],['testing']
Testability,"lecule observes the basis assignment to atoms. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. sapt3; SAPT2+3(CCD) aug-cc-pVDZ computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. psimrcc-sp1; Mk-MRCCSD single point. O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. fnocc2; Test G2 method for H2O. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. cc12; Single point energies of multiple excited states with EOM-CCSD. cc43; RHF-CC2-LR/STO-3G opti",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:8769,test,tests,8769,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['tests']
Testability,"lecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; STO-3G frequencies for H2O by finite-differences of gradients. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by energies for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:1333,test,test,1333,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"lemental.testing.compare() for details.; psi4.compare_strings is an alias to this. qcelemental.testing.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=None)[source]; Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters:. expected (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Reference value against which computed is compared.; computed (Union[int, bool, str, List[int], ndarray]) – int, bool, str or array-like of same.; Input value to compare against expected.; label (str) – Label for passed and error messages. Defaults to calling function name.; equal_phase (bool) – Compare computed or its opposite as equal.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Callable) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Return type:; Union[bool, Tuple[bool, str]]. Returns:. allclose (bool) – Returns True if expected and computed are equal; False otherwise.; message (str) – When return_message=True, also return passed or error message. Notes. Akin to numpy.array_equal().; For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use compare_recursive(). Objects¶. psi4.compare_matrices(expected, computed, atol_exponent, label[, *, check_name=False, **kwargs]). psi4.compare_matrices(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Matrix objects.; Compares Matrix properties of name (optional through check_name), nirrep, symmetry, and number of rows and columns for each irrep.; For comparing actual numerical contents, the matrices are serialized to NumPy array format and passed to qcelemental.testing.compare_recursive().; Handles both Psi4-style",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/add_tests.html:18256,test,testing,18256,psi4manual/1.8.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/add_tests.html,1,['test'],['testing']
Testability,"lementation in Cfour. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. mcscf1; ROHF 6-31G** energy of the state of CH2, with Z-matrix input. The occupations are specified explicitly. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. dft-grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. fci-h2o-2; 6-31G H2O Test FCI Energy Point. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc54; CCSD dipole with user-specified basis set. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:24645,test,tests,24645,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['tests']
Testability,"lename is None:; return tablelines, indexlines; else:; if filename.endswith('.tex'):; filename = filename[:-4]; with open(filename + '.tex', 'w') as handle:; handle.write('\n'.join(tablelines)); with open(filename + '_index.tex', 'w') as handle:; handle.write('\n'.join(indexlines) + '\n'); print(""""""\n LaTeX index written to {filename}_index.tex\n""""""; """""" LaTeX table written to {filename}.tex\n""""""; """""" >>> pdflatex {filename}\n""""""; """""" >>> open /Applications/Preview.app {filename}.pdf\n"""""".format(filename=filename)); filedict = {'data': os.path.abspath(filename) + '.tex',; 'index': os.path.abspath(filename + '_index.tex')}; return filedict. [docs] def table_wrapper(self, mtd, bas, tableplan, benchmark='default',; opt=['CP'], err=['mae'], sset=['default'], dbse=None,; opttarget=None,; failoninc=True,; xlimit=4.0, xlines=[0.0, 0.3, 1.0],; ialimit=2.0,; plotpath='autogen',; subjoin=True,; title=None, indextitle=None,; suppressblanks=False,; standalone=True, theme=None, filename=None):; """"""Prepares dictionary of errors for all combinations of *mtd*, *opt*,; *bas* with respect to model chemistry *benchmark*, mindful of *failoninc*.; The general plan for the table, as well as defaults for landscape,; footnotes, *title*, *indextitle, and *theme* are got from function; *tableplan*. Once error dictionary is ready, it and all other arguments; are passed along to textables.table_generic. Two arrays, one of table; lines and one of index lines are returned unless *filename* is given,; in which case they're written to file and a filedict returned. """"""; # get plan for table from *tableplan* and some default values; kwargs = {'plotpath': plotpath,; 'subjoin': subjoin,; 'xlines': xlines,; 'xlimit': xlimit,; 'ialimit': ialimit}; rowplan, columnplan, landscape, footnotes, \; suggestedtitle, suggestedtheme = tableplan(**kwargs); #suggestedtitle, suggestedtheme = tableplan(plotpath=plotpath, subjoin=subjoin). # make figure files write themselves; autothread = {}; autoliliowa = {}; if plot",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:95111,benchmark,benchmark,95111,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"ler() psi4.core.FISAPT method. PRINT_TRAJECTORY_XYZ_FILE (OPTKING). print_variables() in module psi4.core. print_vector() psi4.core.CIWavefunction method. print_vibs() in module psi4.driver.qcdb.vib. PROCESS_GRID (SCF). process_input() in module psi4.driver. in module psi4.driver.inputparser. project_densities() psi4.core.FDDS_Dispersion method. Prop class in psi4.core. prop(). . see properties(). prop() in module psi4.driver. PROP_ALL (CCDENSITY). (CCLAMBDA). PROP_ROOT (CCDENSITY). (CCEOM). (CCLAMBDA). PROP_SYM (CCDENSITY). (CCEOM). (CCLAMBDA). PROPERTIES (GLOBALS). properties(). ; setting keywords. properties() in module psi4.driver. psi4.core.VBase method. PROPERTIES_ORIGIN (GLOBALS). PROPERTY (CCENERGY). (CCRESPONSE). ProtoIntVector class in psi4.core. ProtoVector class in psi4.core. provenance() psi4.core.Molecule method. provenance_stamp() in module psi4.driver.p4util. pseudoinverse() psi4.core.Matrix method. psi4 command line option. ; --append. --help. --inplace. --input. --loglevel. --memory. --messy. --module. --nthread. --output. --psiapi-path. --psidatadir. --qcschema. --schema. --scratch. --skip-preprocessor. --test. --verbose. --version. -a. -h. -i. -k. -l. -m. -n. -o. -s. -t. -v. -V. psi4.core. ; module. psi4.driver. ; module. psi4.driver.p4util. ; module. psi4.driver.qcdb.vib. ; module. PSI4FOCKCI. psi4rc. PSI_SCRATCH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11]. psi_top_srcdir() in module psi4.core. psiclean() psi4.core.IOManager method. PSIDATADIR, [1], [2], [3], [4], [5], [6], [7], [8]. PsiException. psimrcc() in module psi4.core. psio_entry class in psi4.core. psioh. PSIPATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17]. psirc. PsiReturnType class in psi4.core. PT_ENERGY (PSIMRCC). PubChem. Pure psi4.core.GaussianType attribute. PUREAM (GLOBALS). push_back_external_potential() psi4.core.HF method. PYTHONPATH, [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11]. Q. q psi4.core.AOShellC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/genindex.html:91725,log,loglevel,91725,psi4manual/1.7.x/genindex.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/genindex.html,1,['log'],['loglevel']
Testability,"les and a brief description are provided below.; Sample inputs accessible through interfaced executables are bulleted below. BRIANQC; CFOUR; CHEMPS2; COOKBOOK; DFTD3; DFTD4; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. fci-h2o-2; 6-31G H2O Test FCI Energy Point. fd-gradient; SCF STO-3G finite-difference tests. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. phi-ao; Test computing values of basis functions (puream and non-puream) at points. dfcasscf-sp; CASSCF/6-31G** energy point. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. freq-masses; check nonphysical masses possible. cc17; Single point energies of multiple excited states with EOM-CCSD. fci-coverage; 6-31G H2O Test for coverage. cdoremp-energy1; Cholesky decomposed OO-REMP/cc-pVDZ energy for the H2O molecule. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 indu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/testsuite.html:1546,test,tests,1546,psi4manual/1.8.x/testsuite.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/testsuite.html,1,['test'],['tests']
Testability,"les in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(),; computed.nirrep())); raise TestComparisonError(message); if (expected.symmetry() != computed.symmetry()):; message = (""\t%s has %d symmetry, but %s has %d\n."" % (expected.name(), expected.symmetry(), computed.name(),; computed.symmetry())); raise TestComparisonError(message); nirreps = expected.nirrep(); symmetry = expected.symmetry(); for irrep in range(nirreps):; if (expected.rows(irrep) != computed.rows(irrep)):; message = (""\t%s has %d rows in irrep %d, but %s has %d\n."" %; (expected.name(), expected.rows(irrep), irrep, computed.name(), computed.rows(irrep))); raise TestComparisonError(message); if (expected.cols(irrep ^ symmetry) != computed.cols(irrep ^ symmetry)):; message = (""\t%s has %d columns in irrep, but %s has %d\n."" %; (expected.name(), expected.cols(irrep), irrep, computed.name(), computed.cols(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html:8681,test,test,8681,psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/util.html,1,['test'],['test']
Testability,"les in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); raise TestComparisonError(message); success(label); return True. [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" %; (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); raise TestComparisonError(message); if (expected.symmetry() != computed.symmetry()):; message = (""\t%s has %d symmetry, but %s has %d\n."" %; (expected.name(), expected.symmetry(), computed.name(), computed.symmetry())); raise TestComparisonError(message); nirreps = expected.nirrep(); symmetry = expected.symmetry(); for irrep in range(nirreps):; if (expected.rows(irrep) != computed.rows(irrep)):; message = (""\t%s has %d rows in irrep %d, but %s has %d\n."" %; (expected.name(), expected.rows(irrep), irrep, computed.name(), computed.rows(irrep))); raise TestComparisonError(message); if (expected.cols(irrep ^ symmetry) != computed.cols(irrep ^ symmetry)):; message = (""\t%s has %d columns in irrep, but %s has %d\n."" %; (expected.name(), expected.cols(irrep), irrep, computed.name(), computed.cols(",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html:8582,test,test,8582,psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/_modules/psi4/driver/p4util/util.html,1,['test'],['test']
Testability,"les to compare have a different file length! \n'). index = 0; max_length = len(fchk_calc); tests = []; for start in range(max_length):; if index >= max_length:; break; line = fchk_calc[index]; if ""N="" in line:; offset, calc = _consume_fchk_section(fchk_calc, index); _, ref = _consume_fchk_section(fchk_ref, index); if any(x in line for x in sensitive):; test = compare_arrays(ref, calc, low_accuracy, f"" matrix section: {line}""); else:; test = compare_arrays(ref, calc, high_accuracy, f"" matrix section: {line}""); index += offset; elif "" R "" in line and ""N="" not in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_values(ref, calc, high_accuracy, f"" float value: {line}""); index += 1; elif "" I "" in line and ""N="" not in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_integers(ref, calc, f"" int value: {line}""); index += 1; else:; test = compare_strings(fchk_ref[index], line, f""FCK text line {index+1}.""); index += 1; tests.append(test). return compare_integers(True, all(tests), label). [docs]; def compare_moldenfiles(; expected: str,; computed: str,; atol_exponent: Union[int, float] = 1.e-7,; label: str = ""Compare Molden""):; """"""Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters; ----------; expected; Path to reference Molden file against which `computed` is compared.; computed; Path to input Molden file to compare against `expected`.; atol_exponent; Absolute tolerance for high accuracy fields -- 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable pro",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/fchk.html:5116,test,test,5116,psi4manual/1.8.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/p4util/fchk.html,6,['test'],['test']
Testability,"les to compare have a different file length! \n'). index = 0; max_length = len(fchk_calc); tests = []; for start in range(max_length):; if index >= max_length:; break; line = fchk_calc[index]; if ""N="" in line:; offset, calc = _consume_fchk_section(fchk_calc, index); _, ref = _consume_fchk_section(fchk_ref, index); if any(x in line for x in sensitive):; test = compare_arrays(ref, calc, low_accuracy, f"" matrix section: {line}""); else:; test = compare_arrays(ref, calc, high_accuracy, f"" matrix section: {line}""); index += offset; elif "" R "" in line and ""N="" not in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_values(ref, calc, high_accuracy, f"" float value: {line}""); index += 1; elif "" I "" in line and ""N="" not in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_integers(ref, calc, f"" int value: {line}""); index += 1; else:; test = compare_strings(fchk_ref[index], line, f""FCK text line {index+1}.""); index += 1; tests.append(test). return compare_integers(True, all(tests), label). [docs]def compare_moldenfiles(; expected: str,; computed: str,; atol_exponent: Union[int, float] = 1.e-7,; label: str = ""Compare Molden""):; """"""Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters; ----------; expected; Path to reference Molden file against which `computed` is compared.; computed; Path to input Molden file to compare against `expected`.; atol_exponent; Absolute tolerance for high accuracy fields -- 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable proce",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/fchk.html:5112,test,test,5112,psi4manual/1.7.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/fchk.html,2,['test'],['test']
Testability,"les to compare have a different file length! \n'). index = 0; max_length = len(fchk_calc); tests = []; for start in range(max_length):; if index >= max_length:; break; line = fchk_calc[index]; if ""N="" in line:; offset, calc = _consume_fchk_section(fchk_calc, index); _, ref = _consume_fchk_section(fchk_ref, index); if any(x in line for x in sensitive):; test = compare_arrays(ref, calc, low_accuracy, f"" matrix section: {line}""); else:; test = compare_arrays(ref, calc, high_accuracy, f"" matrix section: {line}""); index += offset; elif "" R "" in line and ""N="" not in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_values(ref, calc, high_accuracy, f"" float value: {line}""); index += 1; elif "" I "" in line and ""N="" not in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_integers(ref, calc, f"" int value: {line}""); index += 1; else:; test = compare_strings(line, fchk_ref[index], f""FCK text line {index+1}.""); index += 1; tests.append(test). return compare_integers(True, all(tests), label). [docs]def compare_moldenfiles(expected, computed, atol_exponent=7, label=""Compare Molden""):; """"""Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies. Note only Psi4-style signature (``(expected, computed, atol_exponent, label)``) available. A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters; ----------; expected : file; Reference Molden file against which `computed` is compared.; computed : file; Input Molden file to compare against `expected`.; atol_exponent : int or float; Absolute tolerance for high accuracy fields -- 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So `1` means `atol=0.1` and `2` means `atol=0.01` but `0.04` means `atol=0.04`; Note that the largest expressable processed atol will be `~0.99`.; label ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html:5077,test,test,5077,psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html,2,['test'],['test']
Testability,"lf.benchmark if benchmark == 'default' else benchmark; try:; mcGreater = self.data[lbench].value; except KeyError as e:; raise ValidationError(""""""Reaction %s missing benchmark datum %s."""""" % (self.name, str(e))). err = {}; for label, datum in lsset.iteritems():; try:; mcLesser = datum.value; except KeyError as e:; if failoninc:; raise ValidationError(""""""Reaction %s missing datum %s."""""" % (label, str(e))); else:; continue. err[label] = [mcLesser - mcGreater,; (mcLesser - mcGreater) / abs(mcGreater),; (mcLesser - mcGreater) / abs(mcGreater)] # TODO define BER; if verbose:; print(""""""p = %6.2f, pe = %6.1f%%, bpe = %6.1f%% modelchem %s."""""" %; (err[label][0], 100 * err[label][1], 100 * err[label][2], label)). return err. [docs] def plot(self, benchmark='default', mcset='default',; failoninc=True, verbose=False, color='sapt',; xlimit=4.0, labeled=True, view=True,; mousetext=None, mouselink=None, mouseimag=None, mousetitle=None, mousediv=None,; saveas=None, relpath=False, graphicsformat=['pdf']):; """"""Computes individual errors over model chemistries in *mcset* (which; may be default or an array or a function generating an array) versus; *benchmark*. Thread *color* can be 'rgb' for old coloring, a color; name or 'sapt' for spectrum coloring. *saveas* conveys directory ('/') and/or filename for saving the; resulting plot. File extension is not accessible, but *graphicsformat*; array requests among 'png', 'pdf', and 'eps' formats. *relpath*; forces paths to saved files to be relative to current directory,; rather than absolute paths for returned code and file dictionary. Prepares thread diagram instructions and either executes them if; matplotlib available (Canopy or Anaconda) or prints them. Returns a; dictionary of all saved plot filenames. If any of *mousetext*, *mouselink*,; or *mouseimag* is specified, htmlcode will be returned with an image map of; slats to any of text, link, or image, respectively. """"""; # compute errors; dbse = self.dbrxn.split('-')[0]; indiv = self.com",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:17738,benchmark,benchmark,17738,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"liary basis. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. fnocc3; Test FNO-QCISD(T) computation. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc52; CCSD Response for H2O2. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. cc4; RHF-CCSD(T) cc-pVQZ frozen-",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html:4630,test,testing,4630,psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['testing']
Testability,"librium geometries for a database; composed of dissociation curves.; * ``'BzBz_S'`` || ``'FaOOFaON'`` || ``'ArNe'`` || ``'HB'`` || etc.; For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive).; * ``[1,2,5]`` || ``['1','2','5']`` || ``['BzMe-3.5', 'MeMe-5.0']`` || etc.; Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. :examples:. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('df-mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(); if not('db_name' in kwargs) and db_name:; kwargs['db_name'] = db_name. # Establish function to call; if not('db_func' in kwargs):; if ('func' in kwargs):; kwargs['db_func'] = kwargs['func']; del kwargs['func']; else:; k",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html:28606,benchmark,benchmark,28606,psi4manual/4.0b4/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/_modules/wrappers.html,4,['benchmark'],['benchmark']
Testability,"librium geometries for a database; composed of dissociation curves.; * ``'BzBz_S'`` || ``'FaOOFaON'`` || ``'ArNe'`` || ``'HB'`` || etc.; For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive).; * ``[1,2,5]`` || ``['1','2','5']`` || ``['BzMe-3.5', 'MeMe-5.0']`` || etc.; Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. :examples:. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('df-mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(); if not('db_name' in kwargs) and db_name:; kwargs['db_name'] = db_name. # Establish function to call; if not('db_func' in kwargs):; if ('func' in kwargs):; kwargs['db_func'] = kwargs['func']; del kwargs['func']; e",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:29233,benchmark,benchmark,29233,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,4,['benchmark'],['benchmark']
Testability,"librium geometries for a database; composed of dissociation curves.; * ``'BzBz_S'`` || ``'FaOOFaON'`` || ``'ArNe'`` || ``'HB'`` || etc.; For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive).; * ``[1,2,5]`` || ``['1','2','5']`` || ``['BzMe-3.5', 'MeMe-5.0']`` || etc.; Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. :examples:. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('dfmp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). """"""; lowername = name.lower(); kwargs = kwargs_lower(kwargs). # Wrap any positional arguments into kwargs (for intercalls among wrappers); if not('name' in kwargs) and name:; kwargs['name'] = name.lower(); if not('db_name' in kwargs) and db_name:; kwargs['db_name'] = db_name. # Establish function to call; if not('db_func' in kwargs):; if ('func' in kwargs):; kwargs['db_func'] = kwargs['func']; del kwargs['func']; else:; k",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html:28606,benchmark,benchmark,28606,psi4manual/4.0b3/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/_modules/wrappers.html,4,['benchmark'],['benchmark']
Testability,"license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bash_profile; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py27|py35|py36 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-Windows-x86_64.sh"" --keepalive-time 2; >>> bash; >>> bash Psi4conda-latest-py35-Windows-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files and Elementary Restart) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 2.7|3.5|3.6 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 psi4-rt -c psi4/label/dev -c psi4. A",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/conda-1.html:4216,log,log,4216,psi4manual/1.2.1/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/conda-1.html,4,['log'],['log']
Testability,"license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bash_profile; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py27|py35|py36 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-Windows-x86_64.sh"" --keepalive-time 2; >>> bash; >>> bash Psi4conda-latest-py35-Windows-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files and Elementary Restart) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 2.7|3.5|3.6 for alternate python versions; >>> conda create -n p4env python=x.x psi4 psi4-rt -c psi4/label/dev -c psi4. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/conda-1.html:4007,log,log,4007,psi4manual/1.1.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/conda-1.html,4,['log'],['log']
Testability,"license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bash_profile; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py27|py35|py36 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-Windows-x86_64.sh"" --keepalive-time 2; >>> bash; >>> bash Psi4conda-latest-py35-Windows-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files and Elementary Restart) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 psi4-rt -c psi4/label/dev -c psi4. A",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/conda-1.html:4216,log,log,4216,psi4manual/1.3.2/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/conda-1.html,4,['log'],['log']
Testability,"line = calc[i]. if geom_re.match(line):; c1, c2, c3, c4, c5, c6 = geom_re.match(line).groups(); r1, r2, r3, r4, r5, r6 = geom_re.match(line).groups(); test = compare_strings(r1, c1) and compare_integers(r2, c2) and compare_integers(r3, c3) and compare_values(r4, c4, high_accuracy) and compare_values(r5, c5, high_accuracy) and compare_values(r6, c6, high_accuracy). elif basis_header_re.match(line):; c1, c2, c3 = basis_header_re.match(line).groups(); r1, r2, r3 = basis_header_re.match(ref[i]).groups(); test = compare_strings(r1,c1) and compare_integers(r2,c2) and compare_values(r3,c3,3). elif s1_re.match(line):; c1, c2 = s1_re.match(line).groups(); r1, r2 = s1_re.match(ref[i]).groups(); test = compare_values(r1, c1, high_accuracy) and compare_values(r2, c2, high_accuracy). elif sym_re.match(line):; c = sym_re.match(line).group(1); r = sym_re.match(ref[i]).group(1); test = compare_strings(r, c, f'text line: {line}'). elif energy_re.match(line):; c = energy_re.match(line).group(1); r = energy_re.match(ref[i]).group(1); test = compare_values(r, c, high_accuracy, f'float value: {line}'). elif spin_re.match(line):; c = spin_re.match(line).group(1); r = spin_re.match(ref[i]).group(1); test = compare_strings(r, c, f'text line: {line}'). elif occ_re.match(line):; c = occ_re.match(line).group(1); r = occ_re.match(ref[i]).group(1); test = compare_values(r, c, high_accuracy, f'float value: {line}'). elif s2_re.match(line):; c1, c2 = s2_re.match(line).groups(); r1, r2 = s2_re.match(line).groups(); test = compare_integers(r1, c1, f'int value: {line}') and compare_values(r2, c2, high_accuracy, f'float value: {line}'). else:; test = compare_strings(line, ref[i]). tests.append(test). return compare_integers(True, all(tests), label). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.7;  · . PSI4. Module code; psi4.driver.p4util.fchk. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/fchk.html:8192,test,test,8192,psi4manual/1.7.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/p4util/fchk.html,16,['test'],"['test', 'tests']"
Testability,"linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:; It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy an",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:38459,test,testing,38459,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,8,['test'],"['testing', 'tests']"
Testability,"list of available Add-Ons: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...` . """"""; def strike(text):; if os.name == ""nt"":; # Windows has a probably correctable problem with unicode, but I can't iterate it quickly, so use tilde for strike.; # UnicodeEncodeError: 'charmap' codec can't encode character '\u0336' in position 3: character maps to <undefined>; return ""~"" + text + ""~""; else:; return ''.join(itertools.chain.from_iterable(zip(text, itertools.repeat('\u0336')))). if request is None:; return [(k if v else strike(k)) for k, v in sorted(_addons_.items())]; return _addons_[request.lower()]. # Testing; def test(extent: str = ""full"", extras: List = None) -> int:; """"""Runs a test suite through pytest. Parameters; ----------; extent; {'smoke', 'quick', 'full', 'long'}; All choices are defined, but choices may be redundant in some projects. * _smoke_ will be minimal ""is-working?"" test(s).; * _quick_ will be as much coverage as can be got quickly, approx. 1/3 tests.; * _full_ will be the whole test suite, less some exceedingly long outliers.; * _long_ will be the whole test suite.; extras; Additional arguments to pass to `pytest`. Returns; -------; int; Return code from `pytest.main()`. 0 for pass, 1 for fail. """"""; try:; import pytest; except ImportError:; raise RuntimeError('Testing module `pytest` is not installed. Run `conda install pytest`'); abs_test_dir = os.path.sep.join([os.path.abspath(os.path.dirname(__file__)), ""tests""]). command = ['-rws', '-v', '--color', 'yes']; if extent.lower() == 'smoke':; command.extend(['-m', 'smoke']); elif extent.lower() == 'quick':; command.extend(['-m', 'quick or smoke']); elif extent.lower() == 'full':; command.extend(['-m', 'not long']); elif extent.lower() == 'long':; pass; if extras is not None:; command.extend(extras); command.extend(['--capture=sys', abs_test_dir]). retcode = pytest.main(command); return retcode. [docs]; def set_output_file(; ofile: str,; append: bool = False,; *,; loglevel: int = 20,; execute: bool = True,; print_header: ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html:6751,test,test,6751,psi4manual/1.9.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html,4,['test'],['test']
Testability,"list of available Add-Ons: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...` . """"""; def strike(text):; if os.name == ""nt"":; # Windows has a probably correctable problem with unicode, but I can't iterate it quickly, so use tilde for strike.; # UnicodeEncodeError: 'charmap' codec can't encode character '\u0336' in position 3: character maps to <undefined>; return ""~"" + text + ""~""; else:; return ''.join(itertools.chain.from_iterable(zip(text, itertools.repeat('\u0336')))). if request is None:; return [(k if v else strike(k)) for k, v in sorted(_addons_.items())]; return _addons_[request.lower()]. # Testing; def test(extent: str = ""full"", extras: List = None) -> int:; """"""Runs a test suite through pytest. Parameters; ----------; extent; {'smoke', 'quick', 'full', 'long'}; All choices are defined, but choices may be redundant in some projects. * _smoke_ will be minimal ""is-working?"" test(s).; * _quick_ will be as much coverage as can be got quickly, approx. 1/3 tests.; * _full_ will be the whole test suite, less some exceedingly long outliers.; * _long_ will be the whole test suite.; extras; Additional arguments to pass to `pytest`. Returns; -------; int; Return code from `pytest.main()`. 0 for pass, 1 for fail. """"""; try:; import pytest; except ImportError:; raise RuntimeError('Testing module `pytest` is not installed. Run `conda install pytest`'); abs_test_dir = os.path.sep.join([os.path.abspath(os.path.dirname(__file__)), ""tests""]). command = ['-rws', '-v']; if extent.lower() == 'smoke':; command.extend(['-m', 'smoke']); elif extent.lower() == 'quick':; command.extend(['-m', 'quick or smoke']); elif extent.lower() == 'full':; command.extend(['-m', 'not long']); elif extent.lower() == 'long':; pass; if extras is not None:; command.extend(extras); command.extend(['--capture=sys', abs_test_dir]). retcode = pytest.main(command); return retcode. [docs]; def set_output_file(; ofile: str,; append: bool = False,; *,; loglevel: int = 20,; execute: bool = True,; print_header: Optional[bool] = N",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html:6718,test,test,6718,psi4manual/1.8.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html,2,['test'],['test']
Testability,"lization. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. dft-reference; MP2 with a PBE0 reference computation. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. cubeprop-esp; RHF orbitals and density for water. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. linK-2; RKS Linear Exchange Algorithm test for benzene. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. tdscf-1; td-uhf test on triplet states of methylene (rpa). dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. fnocc4; Test FNO-DF-CCSD(T) energy. cdremp-1; Cholesky decomposed REMP/cc-pVDZ energies for the CO2 molecule. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc5; RHF C",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:31492,test,tested,31492,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['tested']
Testability,"lize as in; preceding bullet. psi4/external/upstream/. Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; psi4/external/common are needed, be sure to add them to the; DEPENDS argument.; The usual practice to to get everything cohesive between; the CMake for the AddOn repository and PSI4 and then as a; last step, mint a tag in the former and add it to two places in; external/upstream/addon_name/CMakeLists.txt and one; place in psi4/psi4/CMakeLists.txt so that only that version; and later are acceptable to PSI4 for detecting pre-built. psi4/tests/. In psi4/tests/CMakeLists.txt, add a block adding a tests subdirectory if Add-On enabled; Create new subdirectory tests/addon_name with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. psi4/doc/sphinxman/. Create a new .rst page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; psi4/doc/sphinxman/source/interfacing.rst.; Add a bullet to psi4/doc/sphinxman/source/build_planning.rst; Add the new page to the long list in; psi4/doc/sphinxman/CMakeLists.txt. If there are any files or; images referred to, add them to the file, too, following precedent. else¶. Build conda packages. Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. PSI4 and Add-On Projects Working Together. Obligations of the External Project owners are to:. allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the PSI4 build and so the installed proj",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html:4414,test,test,4414,psi4manual/1.4.0/manage_addon-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_addon-1.html,18,['test'],['test']
Testability,"ll and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:41041,test,test,41041,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"ll et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'HSG0' Faver et al. JCTC 7 790 (2011).; 'HSGA' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'. JSCH¶. Database (Hobza) of interaction energies for nucelobase pairs.; Geometries and reference interaction energies from Jurecka et al. PCCP 8 1985 (2006).; Corrections implemented from footnote 92 of Burns et al., JCP 134 084107 (2011). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'HB' hydrogen-bonded systems (coplanar base-pairs); 'MX' interstrand systems (adjacent base-pairs on different strands); 'DD' stacked systems (adjacent base-pairs on same strand). S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; 'S22B' Marshall et al. JCP 135 194102 (2011). subset; 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22. HTBH¶. Database (Truhlar) of hydrogen-transfer barrier height reactions.; Geometries from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/raw_geom.cgi .; Reference energies from Zhao et al. JPCA, 109 2012-2018 (2005) doi: 10.1021/jp045141s [in supporting information]. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. NCB31¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'sm",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_available_databases-1.html:7320,benchmark,benchmark,7320,psi4manual/4.0b3/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_available_databases-1.html,8,['benchmark'],['benchmark']
Testability,"ll et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'HSG0' Faver et al. JCTC 7 790 (2011).; 'HSGA' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'. JSCH¶. Database (Hobza) of interaction energies for nucelobase pairs.; Geometries and reference interaction energies from Jurecka et al. PCCP 8 1985 (2006).; Corrections implemented from footnote 92 of Burns et al., JCP 134 084107 (2011). cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'HB' hydrogen-bonded systems (coplanar base-pairs); 'MX' interstrand systems (adjacent base-pairs on different strands); 'DD' stacked systems (adjacent base-pairs on same strand). S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; 'S22B' Marshall et al. JCP 135 194102 (2011). subset; 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22; 'WATER' water dimer. HTBH¶. Database (Truhlar) of hydrogen-transfer barrier height reactions.; Geometries from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/raw_geom.cgi .; Reference energies from Zhao et al. JPCA, 109 2012-2018 (2005) doi: 10.1021/jp045141s [in supporting information]. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/datab",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_available_databases-1.html:8688,benchmark,benchmark,8688,psi4manual/4.0b5/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_available_databases-1.html,4,['benchmark'],['benchmark']
Testability,"ll test suite: pytest; Run the quick tests: pytest -m quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: pytest -m smoke; Run tests matching by name: pytest -k testname; Run tests excluding those by name: pytest -k ""not testname""; Run tests matching by label: pytest -m testlabel; Run tests excluding those by label: pytest -m ""not testlabel""; Run tests with complicated filtering by name: pytest -k ""cc and not cc4 and not stdsuite""; Run tests and see test names: pytest -v; Run tests and see test names and sometimes more verbose errors: pytest -vv. How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import ps",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:54536,log,log,54536,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,5,['log'],['log']
Testability,"llable) – . Return type:; Dict[float, float]. psi4.set_output_file(ofile, append=False, *, loglevel=20, execute=True, print_header=None, inherit_loglevel=False)[source]¶; Set the name for output and logging files. Parameters:. ofile (str) – Name of ASCII output file including extension. The logging file is set from this string with a .log extension.; append (bool) – Do append to the output and logging files rather than (the default) truncating them?; loglevel (int) – The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute (bool) – Do set ofile via psi4.core.set_output_file() and add the logger, rather than just returning ofile path.; print_header (Optional[bool]) – Whether to write the Psi4 header to the ASCII output file. (Only applicable if execute=True.) By default,; writes if file is truncated (append=False) but not if appended.; inherit_loglevel (bool) – If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns:; Path(ofile). Return type:; Path. Notes; This psi4.set_output_file() command calls psi4.core.set_output_file() and should be used in; preference to it as this additionally sets up logging. pydantic model psi4.driver.task_base.BaseComputer[source]¶; Base class for “computers” that plan, run, and process QC tasks. Show JSON schema{; ""title"": ""BaseComputer"",; ""description"": ""Base class for \""computers\"" that plan, run, and process QC tasks."",; ""type"": ""object"",; ""properties"": {}; }. abstract compute()[source]¶. abstract plan()[source]¶. psi4.driver.task_planner.TaskComputers¶; alias of Union[AtomicComputer, CompositeComputer, FiniteDifferenceComputer, ManyBodyComputer]. psi4.driver.driver_nbody.SubTaskComputers¶; alias of Union[AtomicComputer, CompositeComputer, FiniteDifferenceComputer]. psi4.driver.task_planner.expand_cbs_methods(method, basis, driver, **kwargs)[source]¶; Sort out the user input method string into recognized fields. Handles cases l",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/external_apis.html:6420,log,logger,6420,psi4manual/1.9.x/external_apis.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/external_apis.html,1,['log'],['logger']
Testability,"lly the former). Consider the following recommendations:. It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy an",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:44619,test,testing,44619,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,18,['test'],"['testing', 'tests']"
Testability,"lly to distinguish CTest origin from deliberate pytest origin, which have api added; smoke used instead of CTest smoketests; quick used instead of CTest quicktests; long used instead of CTest longtests; addon and <name-of-addon> added automatically when @uusing(""<name-of-addon>"") decorates the test or marks=using(""<name-of-addon>"") marks the test. CTest “labels” are called “marks” in pytest.; Any new marks should be added to psi4/pytest.ini. Running for Debugging¶. PSIthon tests that don’t need extra files to run are easily run from <objdir> via stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out.; All PSIthon tests are runable through CTest, and output files appear in <objdir>/tests/<test-name>/output.dat and stdout results appear in <objdir>/Testing/Temporary/LastTest.log*. Adding PsiAPI Test Cases¶; To create a new test case, either create a new file or add to an existing file under psi4/tests/pytests. Test must be in the psi4/tests/pytests/ directory.; Test file name must start with test_. This is how pytest knows to collect it.; A test file may contain many tests, each of which is an ordinary Python function with name starting test_. This is how pytest knows to collect it.; No registration required to bring a test to pytest’s attention.; No registration required to bring a test to CMake’s attention. If a test needs additional files, register them in psi4/psi4/CMakeLists.txt. A few notes on test contents:. Import testing functions from utils and use Python assert: assert compare_values(expected, computed, ...).; Don’t worry about cleaning up files or resetting options. A function in psi4/tests/pytests/conftest.py does this automatically between every test.; Especially if using data or functions from outside a test, run a variety of tests at different pytest -n <N> levels to mix up test ordering. If tests fail that pass when run alone, you’ve got a function of the same name changing state or some similar cor",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:11021,test,tests,11021,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['test'],['tests']
Testability,"loat arrays are element-wise equal within a tolerance. Parameters:. expected (Union[float, List, ndarray]) – float or float array-like; Reference value against which computed is compared.; computed (Union[float, List, ndarray]) – float or float array-like; Input value to compare against expected.; atol (float) – Absolute tolerance (see formula below).; label (Optional[str]) – Label for passed and error messages. Defaults to calling function name.; rtol (float) – Relative tolerance (see formula below). By default set to zero so atol dominates.; equal_nan (bool) – Passed to numpy.isclose(). Compare NaN’s as equal.; equal_phase (bool) – Compare computed or its opposite as equal.; passnone (bool) – Return True when both expected and computed are None.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Optional[Callable]) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Return type:; Union[bool, Tuple[bool, str]]. Returns:. allclose (bool) – Returns True if expected and computed are equal within tolerance; False otherwise.; message (str) – When return_message=True, also return passed or error message. Notes. Akin to numpy.allclose().; For scalar float-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; float-comparable types. For mixed types, use compare_recursive().; Sets rtol to zero to match expected Psi4 behaviour, otherwise measured as:. absolute(computed - expected) <= (atol + rtol * absolute(expected)). psi4.compare_integers(expected, computed[, label, *, **kwargs])¶; Comparison function for integers, strings, booleans, or integer array-like data structures.; See qcelemental.testing.compare() for details.; psi4.compare_strings is an alias to this. qcelemental.testing.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=None)[so",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:16496,test,testing,16496,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,3,['test'],['testing']
Testability,"loat]. Parameters:; name (str | Callable) – . psi4.set_output_file(ofile, append=False, *, loglevel=20, execute=True, print_header=None, inherit_loglevel=False)[source]¶; Set the name for output and logging files. Parameters:. ofile (str) – Name of ASCII output file including extension. The logging file is set from this string with a .log extension.; append (bool) – Do append to the output and logging files rather than (the default) truncating them?; loglevel (int) – The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute (bool) – Do set ofile via psi4.core.set_output_file() and add the logger, rather than just returning ofile path.; print_header (Optional[bool]) – Whether to write the Psi4 header to the ASCII output file. (Only applicable if execute=True.) By default,; writes if file is truncated (append=False) but not if appended.; inherit_loglevel (bool) – If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns:; Path(ofile). Return type:; Path. Notes; This psi4.set_output_file() command calls psi4.core.set_output_file() and should be used in; preference to it as this additionally sets up logging. pydantic model psi4.driver.task_base.BaseComputer[source]¶; Base class for “computers” that plan, run, and process QC tasks. Show JSON schema{; ""title"": ""BaseComputer"",; ""description"": ""Base class for \""computers\"" that plan, run, and process QC tasks."",; ""type"": ""object"",; ""properties"": {}; }. abstract compute()[source]¶. abstract plan()[source]¶. psi4.driver.task_planner.TaskComputers¶; alias of Union[AtomicComputer, CompositeComputer, FiniteDifferenceComputer, ManyBodyComputer]. psi4.driver.driver_nbody.SubTaskComputers¶; alias of Union[AtomicComputer, CompositeComputer, FiniteDifferenceComputer]. psi4.driver.task_planner.expand_cbs_methods(method, basis, driver, **kwargs)[source]¶; Sort out the user input method string into recognized fields.; Handles cases ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/external_apis.html:6380,log,logger,6380,psi4manual/1.8.x/external_apis.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/external_apis.html,1,['log'],['logger']
Testability,"local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a sta",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:3020,test,test,3020,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,2,['test'],['test']
Testability,"local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. 1>>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run Psi4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that Python,; CMake, NumPy, and Libint (and even C++ compilers on Linux) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++11 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpret",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:3018,test,test,3018,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,2,['test'],['test']
Testability,"local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; 1>>> cmake -H. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation).; 1; 2>>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest (thorough) or pytest (cursory) to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. 1>>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; 1>>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++14 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied b",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:3427,test,test,3427,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['test'],['test']
Testability,"logger.debug('PROPERTIES PLAN'); logger.debug(pp.pformat(plan.dict())). if kwargs.get(""return_plan"", False):; # Plan-only requested; return plan. elif not isinstance(plan, AtomicComputer):; # Advanced ""Computer"" active; plan.compute(); return plan.get_psi_results(return_wfn=return_wfn). else:; # We have unpacked to an AtomicInput; lowername = plan.method; basis = plan.basis; core.set_global_option(""BASIS"", basis). ## Second half of this fn -- entry means program running exactly analytic property. # Commit to procedures['properties'] call hereafter; core.clean_variables(). # needed (+restore below) so long as AtomicComputer-s aren't run through json (where convcrit also lives); optstash = driver_util.negotiate_convergence_criterion((""prop"", ""prop""), lowername, return_optstash=True). logger.info(f""Compute properties(): method={lowername}, basis={core.get_global_option('BASIS').lower()}, molecule={molecule.name()}, nre={'w/EFP' if hasattr(molecule, 'EFP') else molecule.nuclear_repulsion_energy()}""); logger.debug(""w/EFP"" if hasattr(molecule, ""EFP"") else pp.pformat(molecule.to_dict())); wfn = procedures[""properties""][lowername](lowername, molecule=molecule, **kwargs); logger.info(f""Return properties(): {core.variable('CURRENT ENERGY')}""). basisstash.restore(); optstash.restore(). if return_wfn:; return (core.variable('CURRENT ENERGY'), wfn); else:; return core.variable('CURRENT ENERGY'). [docs]; def optimize_geometric(name, **kwargs):. import qcelemental as qcel; from qcelemental.util import which_import. if not which_import('geometric', return_bool=True):; raise ModuleNotFoundError('Python module geometric not found. Solve by installing it: `conda install -c conda-forge geometric` or `pip install geometric`'); import geometric. class Psi4NativeEngine(geometric.engine.Engine):; """"""; Internally run an energy and gradient calculation for geometric ; """"""; def __init__(self, p4_name, p4_mol, p4_return_wfn, **p4_kwargs):; ; self.p4_name = p4_name; self.p4_mol = p4_mol; self.p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver.html:53055,log,logger,53055,psi4manual/1.8.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver.html,6,['log'],['logger']
Testability,"logger.debug('PROPERTIES PLAN'); logger.debug(pp.pformat(plan.dict())). if kwargs.get(""return_plan"", False):; # Plan-only requested; return plan. elif not isinstance(plan, AtomicComputer):; # Advanced ""Computer"" active; plan.compute(); return plan.get_psi_results(return_wfn=return_wfn). else:; # We have unpacked to an AtomicInput; lowername = plan.method; basis = plan.basis; core.set_global_option(""BASIS"", basis). ## Second half of this fn -- entry means program running exactly analytic property. # Commit to procedures['properties'] call hereafter; core.clean_variables(). # needed (+restore below) so long as AtomicComputer-s aren't run through json (where convcrit also lives); optstash = driver_util.negotiate_convergence_criterion((""prop"", ""prop""), lowername, return_optstash=True). logger.info(f""Compute properties(): method={lowername}, basis={core.get_global_option('BASIS').lower()}, molecule={molecule.name()}, nre={'w/EFP' if hasattr(molecule, 'EFP') else molecule.nuclear_repulsion_energy()}""); logger.debug(""w/EFP"" if hasattr(molecule, ""EFP"") else pp.pformat(molecule.to_dict())); wfn = procedures[""properties""][lowername](lowername, molecule=molecule, **kwargs); logger.info(f""Return properties(): {core.variable('CURRENT ENERGY')}""). basisstash.restore(); optstash.restore(). if return_wfn:; return (core.variable('CURRENT ENERGY'), wfn); else:; return core.variable('CURRENT ENERGY'). [docs]def optimize_geometric(name, **kwargs):. import qcelemental as qcel; from qcelemental.util import which_import. if not which_import('geometric', return_bool=True):; raise ModuleNotFoundError('Python module geometric not found. Solve by installing it: `conda install -c conda-forge geometric` or `pip install geometric`'); import geometric. class Psi4NativeEngine(geometric.engine.Engine):; """"""; Internally run an energy and gradient calculation for geometric ; """"""; def __init__(self, p4_name, p4_mol, p4_return_wfn, **p4_kwargs):; ; self.p4_name = p4_name; self.p4_mol = p4_mol; self.p4_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html:46522,log,logger,46522,psi4manual/1.6.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html,4,['log'],['logger']
Testability,"logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""; out = Path(ofile); log = out.with_suffix("".log""). # Get the custom logger; import logging. from psi4 import logger; if not inherit_loglevel:; logger.setLevel(loglevel). # Create formatters; # * detailed: example: 2019-11-20:01:13:46,811 DEBUG [psi4.driver.task_base:156]; f_format_detailed = logging.Formatter(""%(asctime)s,%(msecs)d %(levelname)-8s [%(name)s:%(lineno)d] %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""); # * light: example: 2019-11-20:10:45:21 FINDIFREC CLASS INIT DATA; f_format_light = logging.Formatter(""%(asctime)s %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""). # Create handlers, add formatters to handlers, and add handlers to logger (StreamHandler() also available); filemode = ""a"" if append else ""w""; f_handler = logging.FileHandler(log, filemode); f_handler.setLevel(logging.DEBUG); f_handler.setFormatter(f_format_detailed). if execute:; core.set_output_file(str(out), append); if print_header is True or (print_header is None and not append):; _print_header(); # Warning: baseFilename is not part of the documented API for the ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html:8952,log,log,8952,psi4manual/1.9.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html,4,['log'],['log']
Testability,"logging file is set from this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""; out = Path(ofile); log = out.with_suffix("".log""). # Get the custom logger; import logging; from psi4 import logger; if not inherit_loglevel:; logger.setLevel(loglevel). # Create formatters; # * detailed: example: 2019-11-20:01:13:46,811 DEBUG [psi4.driver.task_base:156]; f_format_detailed = logging.Formatter(""%(asctime)s,%(msecs)d %(levelname)-8s [%(name)s:%(lineno)d] %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""); # * light: example: 2019-11-20:10:45:21 FINDIFREC CLASS INIT DATA; f_format_light = logging.Formatter(""%(asctime)s %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""). # Create handlers, add formatters to handlers, and add handlers to logger (StreamHandler() also available); filemode = ""a"" if append else ""w""; f_handler = logging.FileHandler(log, filemode); f_handler.setLevel(logging.DEBUG); f_handler.setFormatter(f_format_detailed). if execute:; core.set_output_file(str(out), append); if print_header is True or (print_header is None and not append):; _print_header(); # Warning: baseFilename is not part of the documented API for the ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html:8901,log,log,8901,psi4manual/1.8.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/extras.html,2,['log'],['log']
Testability,"lone,; ""driver"": self.metameta['proxy_driver'],; ""method"": self.method,; ""basis"": data[""basis""],; ""keywords"": data[""keywords""] or {},; }; # Displacements can run in lower symmetry. Don't overwrite orbitals from reference geom; packet['keywords']['function_kwargs'].update({""write_orbitals"": False}); if 'cbs_metadata' in data:; packet['cbs_metadata'] = data['cbs_metadata']. self.task_list[label] = self.computer(**packet, **passalong). # for n, displacement in enumerate(findif_meta_dict[""displacements""].values(), start=2):; # _process_displacement(energy, lowername, molecule, displacement, n, ndisp, write_orbitals=False, **kwargs). [docs]; def build_tasks(self, obj, **kwargs):; # permanently a dummy function; pass. [docs]; def plan(self):; # uncalled function; return [t.plan() for t in self.task_list.values()]. [docs]; def compute(self, client: Optional[""qcportal.FractalClient""] = None):; """"""Run each job in task list.""""""; instructions = ""\n"" + p4util.banner(f"" FiniteDifference Computations"", strNotOutfile=True) + ""\n""; logger.debug(instructions); core.print_out(instructions). with p4util.hold_options_state():; for t in self.task_list.values():; t.compute(client=client). def _prepare_results(self, client: Optional[""qcportal.FractalClient""] = None):; results_list = {k: v.get_results(client=client) for k, v in self.task_list.items()}. # load AtomicComputer results into findifrec[reference]; reference = self.findifrec[""reference""]; task = results_list[""reference""]; response = task.return_result; reference[""module""] = getattr(task.provenance, ""module"", None). if task.driver == 'energy':; reference['energy'] = response. elif task.driver == 'gradient':; reference['gradient'] = response; reference['energy'] = task.extras['qcvars']['CURRENT ENERGY']. elif task.driver == 'hessian':; reference['hessian'] = response; reference['energy'] = task.extras['qcvars']['CURRENT ENERGY']; if 'CURRENT GRADIENT' in task.extras['qcvars']:; reference['gradient'] = task.extras['qcvars']['CURRENT ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_findif.html:46533,log,logger,46533,psi4manual/1.8.x/_modules/psi4/driver/driver_findif.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/driver_findif.html,6,['log'],['logger']
Testability,"long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ctest -L label purposes. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do.; A test requiring over 15 minutes should be labeled longtests. A short test under 30 seconds used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; If a test needs extra input files like grid.dat or extra reference files for checking against, like fchk, specify these in the CMakeLists.txt as shown above. Such tests must be run through ctest and don’t usually work when run “by hand” from the objdir via stage/bin/psi4 ../tests/directory_name/input.dat.; If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the COST line as shown above to set a weighting to about the number of seconds the test takes. input.dat¶; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small additions.; #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:6378,test,tests,6378,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,5,['test'],['tests']
Testability,"look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:55447,test,tests,55447,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,4,['test'],['tests']
Testability,"look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_jso",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/build_planning.html:56691,test,tests,56691,psi4manual/master/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html,1,['test'],['tests']
Testability,"look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n`getconf _NPROCESSORS_ONLN`; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n`getconf _NPROCESSORS_ONLN`. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/build_planning-1.html:55057,test,tests,55057,psi4manual/1.4.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/build_planning-1.html,4,['test'],['tests']
Testability,"loor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. import sys; import time. import numpy as np. import psi4; try:; from ipi.interfaces.clients import Client; ipi_available = True; except ImportError:; ipi_available = False. # Define Client to enable testing of the Broker in the unittests; class Client():; pass. class IPIBroker(Client):; def __init__(self, LOT, options=None, serverdata=False, molecule=None):; self.serverdata = serverdata; if not ipi_available:; psi4.core.print_out(""i-pi is not available for import: ""); psi4.core.print_out(""The broker infrastructure will not be available!\n""); super(IPIBroker, self).__init__(); elif serverdata:; mode, address, port = serverdata.split("":""); mode = mode.lower(); super(IPIBroker, self).__init__(address=address, port=port, mode=mode); else:; super(IPIBroker, self).__init__(_socket=False); self.LOT = LOT; self.options = options if options else {}. if molecule is None:; molecule = psi4.core.get_active_molecule(); self.initial_molecule = molecule; assert self.initial_molecule.orientation_fixed() == True, ""Orientation must be fixed!""; assert self.initial_molecule.point_group().symbol() == ""c1"", ""Symmetry must be 'c1'!"". names = [self.initial_molecule.symbol(i) for i in range(self.initial_molecule.natom())]; psi4.core.print_out(""Initial atoms %s\n"" % names); self.atoms_list = names. psi4.core.print_out(""Psi4 options:\n""); for item, value in self.options.items():; psi4.core.print_out(""%s %s\n"" % (item, value)); psi4.core.set_global_option(item, value); psi4.core.IO.set_default_namespace(""xwrapper""). self.timing = {}. atoms = np.array(self.initial_molecule.geometry()); psi4.core.print_out(""Initial atoms %s\n"" % atoms); psi4.core.print_out(""Force:\n""); self._positions = atoms; self._callback = self.callback; self._nat = np.int32(len(atoms)). def calculate_force(self, pos=None, **kwargs):; """"""Fetch force, energy of PSI. Arguments:; - pos: positions of the atoms as array. If None, the positions of the current active; molecule i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/ipi_broker.html:2049,assert,assert,2049,psi4manual/1.4.0/_modules/psi4/driver/ipi_broker.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/ipi_broker.html,4,['assert'],['assert']
Testability,"loor, Boston, MA 02110-1301 USA.; #; # @END LICENSE; #. import sys; import time. import numpy as np. import psi4; try:; from ipi.interfaces.clients import Client; ipi_available = True; except ImportError:; ipi_available = False. # Define Client to enable testing of the Broker in the unittests; class Client():; pass. class IPIBroker(Client):; def __init__(self, LOT, options=None, serverdata=False, molecule=None):; self.serverdata = serverdata; if not ipi_available:; psi4.core.print_out(""i-pi is not available for import: ""); psi4.core.print_out(""The broker infrastructure will not be available!\n""); super(IPIBroker, self).__init__(); elif serverdata:; mode, address, port = serverdata.split("":""); mode = mode.lower(); super(IPIBroker, self).__init__(address=address, port=port, mode=mode); else:; super(IPIBroker, self).__init__(_socket=False); self.LOT = LOT; self.options = options if options else {}. if molecule is None:; molecule = psi4.core.get_active_molecule(); self.initial_molecule = molecule; assert self.initial_molecule.orientation_fixed(), ""Orientation must be fixed!""; assert self.initial_molecule.point_group().symbol() == ""c1"", ""Symmetry must be 'c1'!"". names = [self.initial_molecule.symbol(i) for i in range(self.initial_molecule.natom())]; psi4.core.print_out(""Initial atoms %s\n"" % names); self.atoms_list = names. psi4.core.print_out(""Psi4 options:\n""); for item, value in self.options.items():; psi4.core.print_out(""%s %s\n"" % (item, value)); psi4.core.set_global_option(item, value); psi4.core.IO.set_default_namespace(""xwrapper""). self.timing = {}. atoms = np.array(self.initial_molecule.geometry()); psi4.core.print_out(""Initial atoms %s\n"" % atoms); psi4.core.print_out(""Force:\n""); self._positions = atoms; self._callback = self.callback; self._nat = np.int32(len(atoms)). def calculate_force(self, pos=None, **kwargs):; """"""Fetch force, energy of PSI. Arguments:; - pos: positions of the atoms as array. If None, the positions of the current active; molecule is used.;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/ipi_broker.html:2054,assert,assert,2054,psi4manual/1.6.x/_modules/psi4/driver/ipi_broker.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/ipi_broker.html,2,['assert'],['assert']
Testability,"lose (bool) – Returns True if expected and computed are equal within tolerance; False otherwise.; message (str) – When return_message=True, also return passed or error message. Notes; absolute(computed - expected) <= (atol + rtol * absolute(expected)). psi4.compare_vectors(expected, computed, atol_exponent, label[, *, check_name=False, **kwargs]). psi4.compare_vectors(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Vector objects.; Compares Vector properties of name (optional through check_name), nirrep, and dimension of each irrep.; For comparing actual numerical contents, the vectors are serialized to NumPy array format and passed to qcelemental.testing.compare_recursive().; Handles both Psi4-style signatures ((expected, computed, atol_exponent, label); see atol_exponent parameter below) and QCA-style signatures ((expected, computed, label)). Parameters:; atol_exponent (int or float) – Absolute tolerance (see formula in qcelemental.testing.compare_values() notes).; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99. psi4.compare_wavefunctions(expected, computed, atol_exponent, label[, *, check_name=False, **kwargs]). psi4.compare_wavefunctions(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Wavefunction objects.; Compares over 30 Wavefunction properties, including nirrep, nso, molecule geometry, basis set nbf, density matrices, gradient results, etc.; Handles both Psi4-style signatures ((expected, computed, atol_exponent, label); see atol_exponent parameter below) and QCA-style signatures ((expected, computed, label)). Parameters:; atol_exponent (int or float) – Absolute tolerance (see formula in qcelemental.testing.compare_values() notes).; Values less than one are taken literally; one or great",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:22038,test,testing,22038,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,4,['test'],['testing']
Testability,"low functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. opt2; SCF DZ allene geometry optimzation, with Cartesian input. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc54; CCSD dipole with user-specified basis set. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. cc16; UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf3; are specified explicitly. dftd3-energy; Exercises the various DFT-D corrections, both through python directly and through c++. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cc52; CCSD Response for H2O2. pywrap-db2; Database calculation, run in sow/reap mode. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html:10131,test,test,10131,psi4manual/4.0b3/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html,4,['test'],['test']
Testability,"lpath=%s\n graphicsformat=%s)\n\n"""""" %; (dbdat, dblbl, title, xtitle, xlimit, repr(saveas), repr(relpath), repr(graphicsformat))); else:; # if running from Canopy, call mpl directly; filedict = mpl.iowa(dbdat, dblbl, title=title, xtitle=xtitle, xlimit=xlimit,; view=view,; saveas=saveas, relpath=relpath, graphicsformat=graphicsformat); return filedict. [docs] def export_pandas(self, modelchem=[], benchmark='default', sset='default', modelchemlabels=None,; failoninc=True):; """"""; *modelchem* is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?; """"""; import pandas as pd; import numpy as np. if self.dbse not in ['ACONF', 'SCONF', 'PCONF', 'CYCONF']:; saptdata = self.load_saptdata_frombfdb(sset=sset, pythonpath='/Users/loriab/linux/bfdb/sapt_punt',; failoninc=failoninc). listodicts = []; rhrxn = self.get_hrxn(sset=sset); for dbrxn, orxn in rhrxn.iteritems():; wdb = dbrxn.split('-')[0]; dbix = self.dbdict.keys().index(wdb); wbm = self.mcs[benchmark][dbix]; wss = self.sset[sset][dbix]; woss = self.dbdict[wdb].oss[wss]; try:; Rrat = woss.axis['Rrat'][woss.hrxn.index(orxn.name)]; except KeyError:; Rrat = 1.0 # TODO generic soln?. dictorxn = {}; dictorxn['DB'] = wdb; dictorxn['System'] = orxn.tagl; dictorxn['Name'] = orxn.name; dictorxn['R'] = Rrat; dictorxn['System #'] = orxn.indx; dictorxn['Benchmark'] = np.NaN if orxn.benchmark is None else orxn.data[; wbm].value # this NaN exception is new and experimental; dictorxn['QcdbSys'] = orxn.dbrxn. if self.dbse not in ['ACONF', 'SCONF', 'PCONF', 'CYCONF']:; dictorxn['SAPT ELST ENERGY'] = saptdata[dbrxn]['elst']; dictorxn['SAPT EXCH ENERGY'] = saptdata[dbrxn]['exch']; dictorxn['SAPT IND ENERGY'] = saptdata[dbrxn]['ind']; dictorxn['SAPT DISP ENERGY'] = saptdata[dbrxn]['disp']; dictorxn['SAPT TOTAL ENERGY'] = dictorxn['SAPT ELST ENERGY'] + dictorxn['SAPT EXCH ENERGY'] + \; dictorxn['SAPT IND ENERGY'] + dictorxn['SAPT DISP ENERGY']. orgts = orxn.rxnm['default'].keys(); omolD = Molecule(orgts[0]",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:84369,benchmark,benchmark,84369,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"ls and CPHF coefficients. fsapt-ext-abc; FSAPT with external charge on trimer. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. mp2-h; check that methods can act on single atom. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. mp2-1; All-electron MP2 6-31G** geometry optimization of water. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dct12; Spin-restricted DC-06 counterpart of dct1. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. cc12; Single point energies of multiple excited states with EOM-CCSD. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc54; CCSD dipole with user-specified basis set. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. fnocc7; Test fnocc wit",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:18936,test,test,18936,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ls that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC)¶FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020. Type: boolean; Default: true. TURN_ON_ACTV (MCSCF)¶MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF)¶SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNFREEZE_DIHEDRALS (OPTKING)¶OPTKING — Unfreeze a subset of dihedrals - meant for use with freeze_all_dihedrals. Type: string; Default: No Default. UPDATE (DETCI)¶DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC)¶FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC)¶PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC)¶PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI)¶DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM)¶CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM)¶CCEOM — Vectors stored per root. Type: integer; Default: 12. WABEI_LOWDISK (CCHBAR)¶CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Default: fal",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:242512,test,testing,242512,psi4manual/master/autodoc_glossary_options_c.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html,1,['test'],['testing']
Testability,"ls; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. scf-upcast-custom-basis; test scf castup with custom basis sets. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. fnocc5; Test FNO-DF-CCSD(T) energy. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cbs-xtpl-energy; Extrapolated water energies. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:39373,test,tests,39373,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['tests']
Testability,"lse); if use_mdi:; return mdi_run(name, **kwargs). core.print_out(""\nScratch directory: %s\n"" % core.IOManager.shared_object().get_default_path()). basisstash = p4util.OptionsState(['BASIS']); return_wfn = kwargs.pop('return_wfn', False). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()); molecule.update_geometry(). ## Pre-planning interventions. # * Trip on function or alias as name; lowername = driver_util.upgrade_interventions(name). # * Allow specification of methods to arbitrary order; lowername, level = driver_util.parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. _filter_renamed_methods(""energy"", lowername). # * Avert pydantic anger at incomplete modelchem spec; userbas = core.get_global_option('BASIS') or kwargs.get('basis'); if lowername in integrated_basis_methods and userbas is None:; kwargs['basis'] = '(auto)'. # Are we planning?; plan = task_planner.task_planner(""energy"", lowername, molecule, **kwargs); logger.debug('ENERGY PLAN'); logger.debug(pp.pformat(plan.dict())). if kwargs.get(""return_plan"", False):; # Plan-only requested; return plan. elif not isinstance(plan, AtomicComputer):; # Advanced ""Computer"" active; plan.compute(); return plan.get_psi_results(return_wfn=return_wfn). else:; # We have unpacked to an AtomicInput; lowername = plan.method; basis = plan.basis; core.set_global_option(""BASIS"", basis). ## Second half of this fn -- entry means program running exactly analytic 0th derivative. # Commit to procedures['energy'] call hereafter; core.clean_variables(). #for precallback in hooks['energy']['pre']:; # precallback(lowername, **kwargs). # needed (+restore below) so long as AtomicComputer-s aren't run through json (where convcrit also lives); optstash = driver_util.negotiate_convergence_criterion((0, 0), lowername, return_optstash=True); optstash2 = p4util.OptionsState(['SCF', 'GUESS']). # Before invoking the procedure, we rename any file that should",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html:30754,log,logger,30754,psi4manual/1.6.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver.html,2,['log'],['logger']
Testability,"lse. T3_WS_INCORE (CCEOM); CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TAU_SQUARED (DCFT); DCFT (Expert) — Controls whether to compute the DCFT energy with the Tau^2 correction to Tau. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDM_PRINT (DETCI); DETCI — Do print the transition density?. Type: boolean; Default: false. TDM_WRITE (DETCI); DETCI — Do write the transition density?. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SC",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:121549,test,test,121549,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['test'],['test']
Testability,"lt: RESTRICTED. TRIPLES_DIIS (PSIMRCC); PSIMRCC — Do use DIIS extrapolation to accelerate convergence for iterative triples excitations?. Type: boolean; Default: false. TRIPLES_IABC_TYPE (DFOCC); DFOCC — The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC); FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. TURN_ON_ACTV (MCSCF); MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF); SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UPDATE (DETCI); DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC); FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC); PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC); PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI); DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM); CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM); CCEOM — Vectors stored per root. Type: integer; Default: 12. WABEI_LOWDISK (CCHBAR); CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Defaul",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html:219451,test,testing,219451,psi4manual/1.2.1/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_glossary_options_c-1.html,4,['test'],['testing']
Testability,"lt: false. TRIPLES_IABC_TYPE (DFOCC); DFOCC — The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC); FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. Type: boolean; Default: false. TURN_ON_ACTV (MCSCF); MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF); SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNITS (GLOBALS); GLOBALS — Units used in geometry specification. Type: string; Possible Values: BOHR, AU, A.U., ANGSTROMS, ANG, ANGSTROM; Default: ANGSTROMS. UPDATE (DETCI); DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC); FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC); PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC); PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI); DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM); CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM); CCEOM — Vectors stored per root. Type: integer; Default: 12. WABEI_LOWDISK (CCHBAR); CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Defaul",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:216252,test,testing,216252,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,4,['test'],['testing']
Testability,"ltimately, make sure the aliases:\n  - /installs/latest/ lines are added to this new file; and removed from the previous latest file, but this can wait until the installer page has been tested. Copy and edit a new file akin to data/installs/v182.yaml. Add it to the git index. Glance through the menu and notes content to make sure they’re up-to-date. This file determines; the structure of the install page.; Add or remove python versions and architectures if necessary.; Every couple years, update the default python version in datakey: python/selected and; in optsHandler at the end.; Always adjust the datakey: branch/stable block.; For releases, adjust the datakey: branch/previous and nightly blocks. Enter the scripts/ directory. If the previous release hasn’t had a snapshot saved, copy; install-generator.py into a version-labeled file, and add it to the git index.; Edit scripts/install-generator.py. Primarily, edit edition at the top.; Also, edit other arrays (stuff above ## Outputs) or messages (logic below ## Outputs); that should change. Run the install-generator.py in place. It will dump two new files, e.g.,; data/installs/cmd/{edition}.json and data/installs/dlbtn/{edition}.json. Add these to the; index (no need to inspect them).; The installer page is now ready for inspection. Run hugo server --watch=false and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right.; Iterate on the data/installs/{edition}.yaml and the install-generator.py until correct.; It’s fine to push to psicode.org to see it in place. But wait until it’s final (and all the; packages and installers are ready) to shift “latest” alias in frontmatter from whichever page is; currently active to the new page, content/installs/{edition}.md. This makes sure “Downloads”; on the navigation bar points to the new page.; Commit the new files, PR, and deploy psicode site. Collect documentation snapshot¶. Documentation is built automa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_release.html:18166,log,logic,18166,psi4manual/1.9.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_release.html,2,['log'],['logic']
Testability,"ltiple excited states with EOM-CCSD. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. fnocc4; Test FNO-DF-CCSD(T) energy. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. cc54; CCSD dipole with user-specified basis set. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. rasci-h2o; RASCI/6-31G** H2O Energy Point. ddd-deriv; Sample HF/cc-pVDZ H2O computation all derivatives. scf-auto-cholesky; Cholesky filter a complete basis. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:9012,test,test,9012,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"lts kwarg. ptype=e/g/h; always for ptype=energy, as available for higher derivatives when driver=g/h. * form nbody qcvars and properties, inc'l number, current e/g/h as available; * pull results (incl dicts!) into qcvars; * form model, including copy of class with mols converted to qcsk at atomicresult.extras[""component_results""]. * collect ManyBody-flavored AtomicResult from self.get_results(); * build wfn from nbody mol and basis (always def2-svp); * push qcvars to P::e and wfn. push various internal dicts to qcvars, too; * convert result to psi4.core.Matrix (non-energy) and set g/h on wfn; * return e/g/h and wfn. """""". __all__ = [; ""BsseEnum"",; ""ManyBodyComputer"",; ""nbody"",; ]. import copy; import itertools; import math; from ast import literal_eval; from enum import Enum; from typing import TYPE_CHECKING, Any, Dict, List, Literal, Optional, Sequence, Set, Tuple, Union. try:; from pydantic.v1 import Field, validator; except ImportError:; from pydantic import Field, validator. import logging. import numpy as np; from qcelemental.models import AtomicResult, DriverEnum. from psi4 import core. from . import driver_nbody_multilevel, p4util; from .constants import constants, pp; from .driver_cbs import CompositeComputer; from .driver_findif import FiniteDifferenceComputer; from .p4util.exceptions import *; from .task_base import AtomicComputer, BaseComputer, EnergyGradientHessianWfnReturn. if TYPE_CHECKING:; import qcportal. logger = logging.getLogger(__name__). FragBasIndex = Tuple[Tuple[int], Tuple[int]]. SubTaskComputers = Union[AtomicComputer, CompositeComputer, FiniteDifferenceComputer]. [docs]; def nbody():; """"""; Computes the nbody interaction energy, gradient, or Hessian depending on input.; This is a generalized universal function for computing interaction and total quantities. :returns: *return type of func* |w--w| The data. :returns: (*float*, :py:class:`~psi4.core.Wavefunction`) |w--w| data and wavefunction with energy/gradient/hessian set appropriately when ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/driver_nbody.html:7477,log,logging,7477,psi4manual/1.9.x/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/driver/driver_nbody.html,4,['log'],['logging']
Testability,"lues function (along with several relatives in psi4/psi4/driver/p4util/testing.py for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don’t match. Any lines of the input associated with the validation process should be flagged with #TEST at the end of each line, so that they can be removed when copying from the tests to the samples directory. output.ref¶; When your test case is in final form, run it locally, rename the output to output.ref, and check it into the repository alongside input.dat.; While this isn’t used for any testing machinery, it can be handy for users or developers to consult. test_input.py¶; Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest’s notice, add a file to the directory named test_input.py.; Below is an example for the psi4/tests/ci-property/test_input.py; from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the CMakeLists.txt.; The def test_ci_property contains the name of the test, now with underscores rather than hyphens.; def test_ identifies it to pytest as a test.; That part of the function name and the name of the file, test_input.py are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ctest_runner(__file__).; This uses QCEngine machinery to execute python psi4 input.dat.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files do need to be registered in psi4/psi4/CMakeLists.txt.; Finally, the label string passed to CTest is here handed to pytest, with a few changes:. psi added automatic",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/add_tests.html:8833,test,tests,8833,psi4manual/1.7.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/add_tests.html,4,['test'],['tests']
Testability,"lues():; dbix = self.dbdict.keys().index(orxn.dbrxn.split('-')[0]); lmc = self.mcs[modelchem][dbix]; lbm = self.mcs[benchmark][dbix]; try:; orxn.data[lbm]; except KeyError as e:; # not sure if should treat bm differently; lbm = None; try:; orxn.data[lmc]; except KeyError as e:; if failoninc:; raise e; else:; lmc = None; dbdat.append((lmc, lbm, orxn)); # this is diff in that returning empties not just pass over- may break bfdb; # try:; # orxn.data[lmc]; # orxn.data[lbm]; # except KeyError as e:; # if failoninc:; # raise e; # else:; # # not sure yet if should return empties or just pass over; # pass; # else:; # dbdat.append((lmc, lbm, orxn)); return dbdat. [docs] def get_missing_reactions(self, modelchem, sset='default'):; """"""Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions *sset* should contain and the second being a list of; the reaction names (dbrxn) not available for *modelchem*. Absence; of benchmark not considered. """"""; counts = OrderedDict(); counts[self.dbse] = [0, []]; soledb = True if (len(self.dbdict) == 1 and self.dbdict.items()[0][0] == self.dbse) else False; if not soledb:; for db in self.dbdict.keys():; counts[db] = [0, []]; for (lmc, lbm, orxn) in self.get_reactions(modelchem, benchmark='default',; sset=sset, failoninc=False):; db, rxn = orxn.dbrxn.split('-', 1); mcdatum = orxn.data[lmc].value if lmc else None; counts[self.dbse][0] += 1; if not soledb:; counts[db][0] += 1; if mcdatum is None:; counts[self.dbse][1].append(orxn.dbrxn); if not soledb:; counts[db][1].append(orxn.dbrxn); return counts. [docs] def plot_disthist(self, modelchem, benchmark='default', sset='default',; failoninc=True, verbose=False, xtitle='', view=True,; saveas=None, relpath=False, graphicsformat=['pdf']):; """"""Computes individual errors and summary statistics for single; model chemistry *modelchem* versus *benchmark* over; subset *sset* over all component databases. Computes histogram; of err",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:73881,benchmark,benchmark,73881,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"luster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. table of contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; RESTRICTED_DOCC; RESTRICTED_UOCC; FROZEN_UOCC; CI_MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/detci-1.html:12579,test,testing,12579,psi4manual/1.1.0/detci-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/detci-1.html,2,['test'],['testing']
Testability,"ly, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. oremp-grad2; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. single point energies were independently checked using the original wavels code. ao-casscf-sp; CASSCF/6-31G** energy point. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc51; EOM-CC3/cc-pVTZ on H2O. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. scf-upcast-custom-basis; test scf castup with custom basis sets. aediis-2; EDIIS test case from 10.1063/1.1470195. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. mints2-bse; Similar to mints2, but using the BSE to specify the basis sets. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html:17459,test,test,17459,psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"ly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. Navigation. Index. modules    .    .    .    .  · ; 1.1;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2017, The Psi4 Project.; Last updated on Wednesday, 17 May 2017 05:47AM.; Created using Sphinx 1.5.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/sowreap-1.html:2045,test,tested,2045,psi4manual/1.1.0/sowreap-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/sowreap-1.html,2,['test'],['tested']
Testability,"lytic, finite difference of gradients, or; finite difference of energies. Returns:; Matrix – Total non-mass-weighted electronic Hessian in Hartrees/Bohr/Bohr. Returns:; (Matrix, Wavefunction) – Hessian and wavefunction when return_wfn specified. Examples:. >>> # [1] Frequency calculation without thermochemical analysis; >>> hessian('mp3'). >>> # [2] Frequency calc w/o thermo analysis getting the Hessian; >>> # in file, core.Matrix, and np.array forms; >>> set hessian_write on; >>> H, wfn = hessian('ccsd', return_wfn=True); >>> wfn.hessian().print_out(); >>> np.array(H). It’s handy to collect the wavefunction after a frequency; calculation through e, wfn = psi4.frequency(...,; return_wfn=True) as the frequencies can be accessed through; psi4.core.Wavefunction.frequencies(), the Hessian through; psi4.core.Wavefunction.hessian(), and much other computation; info through psi4.core.Wavefunction.frequency_analysis; (note no parentheses). Examples of using this data; structure can be found fd-freq-gradient and; psi4/tests/pytests/test_vibanalysis.py. Formatted printing of vibrational; results is available through psi4.driver.qcdb.vib.print_vibs(). Results accessible through psi4.core.Wavefunction.frequency_analysis¶. key; description (lbl & comment); units; data (real/imaginary modes). omega; frequency; cm^-1; ndarray(ndof) complex (real/imag). q; normal mode, normalized mass-weighted; a0 u^1/2; ndarray(ndof, ndof) float. w; normal mode, un-mass-weighted; a0; ndarray(ndof, ndof) float. x; normal mode, normalized un-mass-weighted; a0; ndarray(ndof, ndof) float. degeneracy; degree of degeneracy. ndarray(ndof) int. TRV; translation/rotation/vibration. ndarray(ndof) str ‘TR’ or ‘V’ or ‘-’ for partial. gamma; irreducible representation. ndarray(ndof) str irrep or None if unclassifiable. mu; reduced mass; u; ndarray(ndof) float (+/+). k; force constant; mDyne/A; ndarray(ndof) float (+/-). DQ0; RMS deviation v=0; a0 u^1/2; ndarray(ndof) float (+/0). Qtp0; Turning point v=0; a0 u^1",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/freq.html:4803,test,tests,4803,psi4manual/1.7.x/freq.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/freq.html,4,['test'],['tests']
Testability,"m <Reference>.; Reference interaction energies from <Reference>. benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'HSG0' Faver et al. JCTC 7 790 (2011).; 'HSGA' Marshall et al. JCP 135 194102 (2011). subset; 'small'; 'large'. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html:7293,benchmark,benchmark,7293,psi4manual/1.0.0/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_available_databases-1.html,4,['benchmark'],['benchmark']
Testability,"m derivative level at which to run GCP. For large; molecules, energy-only calculations can be significantly more; efficient. Influences return values, see below.; verbose (int) – Amount of printing. Unused at present. Returns:. energy (float) – When dertype=0, energy [Eh].; gradient (ndarray) – When dertype=1, (nat, 3) gradient [Eh/a0].; (energy, gradient) (tuple of float and ndarray) – When dertype=None, both energy [Eh] and (nat, 3) gradient [Eh/a0]. save_string_xyz(self: psi4.core.Molecule) → str¶; Saves the string of an XYZ file to arg2. save_string_xyz_file(self: psi4.core.Molecule) → str¶; Saves an XYZ file to arg2. save_xyz_file(self: psi4.core.Molecule, arg0: str, arg1: bool) → None¶; Saves an XYZ file to arg0. schoenflies_symbol(self: psi4.core.Molecule) → str¶; Returns the Schoenflies symbol. scramble(do_shift=True, do_rotate=True, do_resort=True, deflection=1.0, do_mirror=False, do_plot=False, run_to_completion=False, run_resorting=False, verbose=1)[source]¶; Tester for B787 by shifting, rotating, and atom shuffling ref_mol and; checking that the aligner returns the opposite transformation. Parameters:. ref_mol (Molecule) – Molecule to perturb.; do_shift (Union[bool, ndarray, List]) – Whether to generate a random atom shift on interval [-3, 3) in each; dimension (True) or leave at current origin. To shift by a specified; vector, supply a 3-element list.; do_rotate (Union[bool, ndarray, List[List]]) – Whether to generate a random 3D rotation according to algorithm of Arvo.; To rotate by a specified matrix, supply a 9-element list of lists.; do_resort (Union[bool, List]) – Whether to shuffle atoms (True) or leave 1st atom 1st, etc. (False).; To specify shuffle, supply a nat-element list of indices.; deflection (float) – If do_rotate, how random a rotation: 0.0 is no change, 0.1 is small; perturbation, 1.0 is completely random.; do_mirror (bool) – Whether to construct the mirror image structure by inverting y-axis.; do_plot (bool) – Pops up a mpl plot showing",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Molecule.html:32587,Test,Tester,32587,psi4manual/1.7.x/api/psi4.core.Molecule.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Molecule.html,4,['Test'],['Tester']
Testability,"m from Olsen et al., JCP 104, 8007 (1996). cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt-ecp; sapt0 of charged system in ECP basis set. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfremp-1; density fitted REMP/cc-pVDZ energies for the CO2 molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. aediis-2; EDIIS test case from 10.1063/1.1470195. scf-response3; UHF Dipole Polarizability Test. mom-h2o-3; MOM excitation from LUMO HOMO+3. extern3; External potential calculation with one Ghost atom and one point charge at the same position. pywrap-cbs1; Various basis set extrapolation tests. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:34112,test,tests,34112,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"m gradients for H2O. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. stability3; Test LDA stability analysis against QChem. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. scf-level-shift-rks; SCF level shift on an RKS computation. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. cc36; CC2(RHF)/cc-pVDZ energy of H2O. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. fnocc3; Test FNO-QCISD(T) computation. frac-sym; Fractional occupation with symmetry. tdscf-7; TD-HF test variable access. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). scf-upcast-custom-basis; test scf castup with custom basis sets. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, compute",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:22123,test,test,22123,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"m nitrate (rocket fuel!). scf-upcast-custom-basis; test scf castup with custom basis sets. dct10; The multiple guesses for DCT amplitudes for ODC-12. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. sapt-ecp; sapt0 of charged system in ECP basis set. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cbs-xtpl-alpha; Extrapolated water energies. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. scf-cholesky-basis; incremental Cholesky filtered SCF. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). cisd-sp; 6-31G** H2O Test CISD",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:22376,test,test,22376,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"m this string with a ``.log`` extension.; append; Do append to the output and logging files rather than (the default) truncating them?; loglevel; The criticality level at which to log. 30 for WARN (Python default), 20 for INFO, 10 for DEBUG; execute; Do set ``ofile`` via :py:func:`psi4.core.set_output_file` and add the logger, rather than just returning ``ofile`` path.; print_header; Whether to write the Psi4 header to the ASCII output file. (Only applicable if ``execute=True``.) By default,; writes if file is truncated (``append=False``) but not if appended.; inherit_loglevel; If true, do not set loglevel even to default value. Instead, allow level to be inherited from existing logger. Returns; -------; ~pathlib.Path; ``Path(ofile)``. Notes; -----; This :py:func:`psi4.set_output_file` command calls :py:func:`psi4.core.set_output_file` and should be used in; preference to it as this additionally sets up logging. """"""; out = Path(ofile); log = out.with_suffix("".log""). # Get the custom logger; import logging. from psi4 import logger; if not inherit_loglevel:; logger.setLevel(loglevel). # Create formatters; # * detailed: example: 2019-11-20:01:13:46,811 DEBUG [psi4.driver.task_base:156]; f_format_detailed = logging.Formatter(""%(asctime)s,%(msecs)d %(levelname)-8s [%(name)s:%(lineno)d] %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""); # * light: example: 2019-11-20:10:45:21 FINDIFREC CLASS INIT DATA; f_format_light = logging.Formatter(""%(asctime)s %(message)s"", datefmt=""%Y-%m-%d:%H:%M:%S""). # Create handlers, add formatters to handlers, and add handlers to logger (StreamHandler() also available); filemode = ""a"" if append else ""w""; f_handler = logging.FileHandler(log, filemode); f_handler.setLevel(logging.DEBUG); f_handler.setFormatter(f_format_detailed). if execute:; core.set_output_file(str(out), append); if print_header is True or (print_header is None and not append):; _print_header(); # Warning: baseFilename is not part of the documented API for the logging module and could",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html:8976,log,logger,8976,psi4manual/1.9.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/_modules/psi4/extras.html,8,['log'],"['logger', 'logging']"
Testability,"m). dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. pywrap-align; apply linear fragmentation algorithm to a water cluster. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. cc13c; Tests RHF CCSD(T)gradients. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. casscf-fzc-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. fnocc6; Test method/basis with disk_df. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. scf11-freq-from-e",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:19812,test,test,19812,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"m.group('symbol'), m.group('basis'), role=role); assignments = True. elif label_re.match(line):; m = label_re.match(line); mol.set_basis_by_label(m.group('label'), m.group('basis'), role=role); assignments = True. elif all_re.match(line):; m = all_re.match(line); mol.set_basis_all_atoms(m.group('basis'), role=role); assignments = True. else:; # Ignore blank lines and accumulate remainder; if line and not line.isspace():; leftover_lines.append(line.strip()). # Now look for regular basis set definitions; basblock = list(filter(None, basislabel.split('\n'.join(leftover_lines)))); if len(basblock) == 1:; if not assignments:; # case with no [basname] markers where whole block is contents of gbs file; mol.set_basis_all_atoms(name, role=role); basstrings[basname(name)] = basblock[0]; else:; message = (; ""Conflicting basis set specification: assign lines present but shells have no [basname] label.""; """"); raise TestComparisonError(message); else:; # case with specs separated by [basname] markers; for idx in range(0, len(basblock), 2):; basstrings[basname(basblock[idx])] = basblock[idx + 1]. return basstrings. anon.__name__ = 'basisspec_psi4_yo__' + cleanbas; qcdb.libmintsbasisset.basishorde[name.upper()] = anon; if set_option:; core.set_global_option(key, name). core.OEProp.valid_methods = [; 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES', 'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES',; 'MBIS_CHARGES', 'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI', 'NO_OCCUPATIONS'; ]. ## Option helpers. def _core_set_global_option_python(key, EXTERN):; """"""; This is a fairly hacky way to get around EXTERN issues. Effectively we are routing this option Python side through attributes until the general Options overhaul.; """"""; if (key != ""EXTERN""):; raise ValidationError(""Options: set_global_option_python does not recognize keyword %s"" % key). if EXTERN is None:; core.EXTERN = None; core.set_global_option(""EXTERN"", False); elif isinstance(EXTERN, core.ExternalPotential):; # We",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/python_helpers.html:17035,Test,TestComparisonError,17035,psi4manual/1.4.0/_modules/psi4/driver/p4util/python_helpers.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/python_helpers.html,2,['Test'],['TestComparisonError']
Testability,"m.group('symbol'), m.group('basis'), role=role); assignments = True. elif label_re.match(line):; m = label_re.match(line); mol.set_basis_by_label(m.group('label'), m.group('basis'), role=role); assignments = True. elif all_re.match(line):; m = all_re.match(line); mol.set_basis_all_atoms(m.group('basis'), role=role); assignments = True. else:; # Ignore blank lines and accumulate remainder; if line and not line.isspace():; leftover_lines.append(line.strip()). # Now look for regular basis set definitions; basblock = list(filter(None, basislabel.split('\n'.join(leftover_lines)))); if len(basblock) == 1:; if not assignments:; # case with no [basname] markers where whole block is contents of gbs file; mol.set_basis_all_atoms(name, role=role); basstrings[basname(name)] = basblock[0]; else:; message = (; ""Conflicting basis set specification: assign lines present but shells have no [basname] label.""; """"); raise TestComparisonError(message); else:; # case with specs separated by [basname] markers; for idx in range(0, len(basblock), 2):; basstrings[basname(basblock[idx])] = basblock[idx + 1]. return basstrings. anon.__name__ = 'basisspec_psi4_yo__' + cleanbas; qcdb.libmintsbasisset.basishorde[name.upper()] = anon; if set_option:; core.set_global_option(key, name). core.OEProp.valid_methods = [; 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES', 'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES',; 'MBIS_CHARGES','MBIS_VOLUME_RATIOS', 'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI', 'NO_OCCUPATIONS'; ]. ## Option helpers. def _core_set_global_option_python(key, EXTERN):; """"""; This is a fairly hacky way to get around EXTERN issues. Effectively we are routing this option Python side through attributes until the general Options overhaul.; """"""; if (key != ""EXTERN""):; raise ValidationError(""Options: set_global_option_python does not recognize keyword %s"" % key). if EXTERN is None:; core.EXTERN = None; core.set_global_option(""EXTERN"", False); elif isinstance(EXTERN, core.Exte",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/python_helpers.html:17097,Test,TestComparisonError,17097,psi4manual/1.6.x/_modules/psi4/driver/p4util/python_helpers.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/python_helpers.html,1,['Test'],['TestComparisonError']
Testability,"m.io/miniconda/explicit2-latest-MacOSX-x86_64.txt""; >>> conda create --name p4env --file explicitenv2-latest-MacOSX-x86_64.txt; >>> source activate p4env. Quick Installation¶; Sequence of commands to get you to a working Psi4 on Linux. Installs; Miniconda into $HOME/miniconda and the Psi4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac: select between next two lines; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files and Elementary Restart) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; Get bzip2. You’ll need this slightly exotic command so run which to test for availability, and install from yum, sour",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/conda-1.html:5681,test,test,5681,psi4manual/1.0.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/conda-1.html,2,['test'],['test']
Testability,"m_re = re.compile(r'^\s*Sym\s*=\s*(\w*)\s*$'); energy_re = re.compile(r'^\s*Ene\s*=\s*(-?\d*.?\d*[e,E]?\+?-?\d*)\s*$'); spin_re = re.compile(r'^\s*Spin\s*=\s*(\w*)\s*$'); occ_re = re.compile(r'^\s*Occup\s*=\s*(-?\d*.\d*[e,E]?-?\+?\d*)\s*$'). for i in range(max_len):; line = calc[i]. if geom_re.match(line):; c1, c2, c3, c4, c5, c6 = geom_re.match(line).groups(); r1, r2, r3, r4, r5, r6 = geom_re.match(line).groups(); test = compare_strings(r1, c1) and compare_integers(r2, c2) and compare_integers(r3, c3) and compare_values(r4, c4, high_accuracy) and compare_values(r5, c5, high_accuracy) and compare_values(r6, c6, high_accuracy). elif basis_header_re.match(line):; c1, c2, c3 = basis_header_re.match(line).groups(); r1, r2, r3 = basis_header_re.match(ref[i]).groups(); test = compare_strings(r1,c1) and compare_integers(r2,c2) and compare_values(r3,c3,3). elif s1_re.match(line):; c1, c2 = s1_re.match(line).groups(); r1, r2 = s1_re.match(ref[i]).groups(); test = compare_values(r1, c1, high_accuracy) and compare_values(r2, c2, high_accuracy). elif sym_re.match(line):; c = sym_re.match(line).group(1); r = sym_re.match(ref[i]).group(1); test = compare_strings(r, c, f'text line: {line}'). elif energy_re.match(line):; c = energy_re.match(line).group(1); r = energy_re.match(ref[i]).group(1); test = compare_values(r, c, high_accuracy, f'float value: {line}'). elif spin_re.match(line):; c = spin_re.match(line).group(1); r = spin_re.match(ref[i]).group(1); test = compare_strings(r, c, f'text line: {line}'). elif occ_re.match(line):; c = occ_re.match(line).group(1); r = occ_re.match(ref[i]).group(1); test = compare_values(r, c, high_accuracy, f'float value: {line}'). elif s2_re.match(line):; c1, c2 = s2_re.match(line).groups(); r1, r2 = s2_re.match(line).groups(); test = compare_integers(r1, c1, f'int value: {line}') and compare_values(r2, c2, high_accuracy, f'float value: {line}'). else:; test = compare_strings(line, ref[i]). tests.append(test). return compare_integers(True, all(test",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html:7792,test,test,7792,psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/p4util/fchk.html,10,['test'],['test']
Testability,"mands to get you to a working Psi4 on Linux; or Mac. Installs Miniconda+Psi4 into $HOME/psi4conda and; the Psi4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux; >>> curl -o ""http://www.psicode.org/downloads/Psi4conda2-latest-Linux.sh"" --keepalive-time 2; >>> bash; >>> bash Psi4conda-latest-Linux.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bashrc; # log out, log back in so conda and psi4 in path; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. # Mac; >>> curl -o ""http://www.psicode.org/downloads/Psi4conda2-latest-MacOSX.sh"" --keepalive-time 2; >>> bash; >>> bash Psi4conda-latest-MacOSX.sh -b -p $HOME/psi4conda # agrees to license terms; >>> echo ""export PATH=$HOME/psi4conda/bin:\$PATH"" >> ~/.bash_profile; # log out, log back in so conda and psi4 in path; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files and Elementary Restart) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Conda Proficients¶; The Psi4conda Installer uses a conda constructor to package up Miniconda,; the psi4 conda packages, the psi4 add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; a",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/conda-1.html:2558,test,test,2558,psi4manual/1.0.0/conda-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/conda-1.html,2,['test'],['test']
Testability,"mary error statistics for each model chemistry in array; modelchem versus benchmark for all available subsets. available_projects(path=None)[source]¶. compute_statistics(modelchem, benchmark='default', sset='default', failoninc=True, verbose=False, returnindiv=False)[source]¶; Computes summary statistics and, if returnindiv True,; individual errors for single model chemistry modelchem versus; benchmark over subset sset over all component databases.; Particularly, imposes cross-database definitions for sset and; modelchem.; #Returns error if model chemistries are missing; #for any reaction in subset unless failoninc set to False,; #whereupon returns partial statistics. Returns dictionary of; #statistics labels and values. dbdict = None¶; ordered component Database objects; >>> print asdf.dbdict; XXXX. dbse = None¶; internal name of database collection; >>> print asdf.dbse; 'DB4'. export_pandas(modelchem=[], benchmark='default', sset='default', modelchemlabels=None, failoninc=True)[source]¶; modelchem is array of model chemistries, if modelchem is empty, get only benchmark; is benchmark needed?. fancy_mcs(latex=False)[source]¶. get_hrgt(sset='default', actv='default')[source]¶. get_hrxn(sset='default')[source]¶. get_missing_reactions(modelchem, sset='default')[source]¶; Returns a dictionary (keys self.dbse and all component; WrappedDatabase.dbse) of two elements, the first being the number; of reactions sset should contain and the second being a list of; the reaction names (dbrxn) not available for modelchem. Absence; of benchmark not considered. get_reactions(modelchem, sset='default', benchmark='default', failoninc=True)[source]¶; Collects the reactions present in sset from each WrappedDatabase,; checks that modelchem and benchmark ReactionDatum are present; (fails if failoninc True), then returns in an array a tuple for; each reaction containing the modelchem key needed to access; modelchem, the modelchem key needed to access benchmark, and; the Reaction object. int",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:31701,benchmark,benchmark,31701,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,6,['benchmark'],['benchmark']
Testability,"master and maintenance).; PR owners who also have maintainer status can merge their PRs as GitHub enforces two external reviews.; Unless there’s been a lot of discussion on core-dev about merge order, generally the 2nd positive reviewer merges the PR. Also fine to add review and leave merge for later.; Presently only Azure is set up as a required-to-merge service. Incomplete GHA Ecosystem or Docs won’t block merging, but we do usually let it complete before merging unless it’s a trivial PR.; We don’t enforce branches to be up to date before merging since that’d be a lot of extra CI time and coordination when merging several PRs in a day. So, if a PR hasn’t been updated in a while, and a reviewer is nervous about PR interference, fine to ask submitter to rebase. Or, there’s an update button on the PR – but if this is used, warn the submitted that their remote and local branches will be out of sync. For this reason, we try to merge newer contributors first so the rebase falls on more experienced contributors.; Ideally a PR consists of atomic, compilable commits. It almost never happens, so unless there’s been discussion, squash merge all PRs.; When discussion on issue has overcome the original problem and settled on needing long-term work, fine to move the long-term item to Wish List and close issue. table of contents. Git, Versioning; How to bump a version; How to create and remove an annotated Git tag on a remote; What Psi4 version is running; How to locate non-ascii characters in the codebase; How to fix “Psi4 undefined” version; How to fix “cannot import name ‘core’ from {top-level-psi4-dir}; How to find tests without output.ref; How to do GitHub issue management and code review. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.8.2;  · . PSI4. Managing: Git, Conda, CMake and all that; Git, Versioning. © Copyright 2007-2023, The Psi4 Project.; Last updated on Wednesday, 04 October 2023 01:57AM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/manage_git.html:10815,test,tests,10815,psi4manual/1.8.x/manage_git.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/manage_git.html,1,['test'],['tests']
Testability,"master and maintenance).; PR owners who also have maintainer status can merge their PRs as GitHub enforces two external reviews.; Unless there’s been a lot of discussion on core-dev about merge order, generally the 2nd positive reviewer merges the PR. Also fine to add review and leave merge for later.; Presently only Azure is set up as a required-to-merge service. Incomplete GHA Ecosystem or Docs won’t block merging, but we do usually let it complete before merging unless it’s a trivial PR.; We don’t enforce branches to be up to date before merging since that’d be a lot of extra CI time and coordination when merging several PRs in a day. So, if a PR hasn’t been updated in a while, and a reviewer is nervous about PR interference, fine to ask submitter to rebase. Or, there’s an update button on the PR – but if this is used, warn the submitted that their remote and local branches will be out of sync. For this reason, we try to merge newer contributors first so the rebase falls on more experienced contributors.; Ideally a PR consists of atomic, compilable commits. It almost never happens, so unless there’s been discussion, squash merge all PRs.; When discussion on issue has overcome the original problem and settled on needing long-term work, fine to move the long-term item to Wish List and close issue. table of contents. Git, Versioning; How to bump a version; How to create and remove an annotated Git tag on a remote; What Psi4 version is running; How to locate non-ascii characters in the codebase; How to fix “Psi4 undefined” version; How to fix “cannot import name ‘core’ from {top-level-psi4-dir}; How to find tests without output.ref; How to do GitHub issue management and code review. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.9.1;  · . PSI4. Managing: Git, Conda, CMake and all that; Git, Versioning. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 08 February 2024 09:32PM.; Created using Sphinx 7.2.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/manage_git.html:10815,test,tests,10815,psi4manual/1.9.x/manage_git.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/manage_git.html,1,['test'],['tests']
Testability,"match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file out of scratch with correct naming; convention.; Arguments:; @arg filename full path to target file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32 ; @arg move copy or move? (default copy); Example:; Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch(‘temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 .temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 /tmp/temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32):; -cp /scratch/parrish/psi.12345.32 /tmp/temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32, True):; -mv /scratch/parrish/psi.12345.32 /tmp/temp. copy_file_to_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file into scratch with correct naming; convent",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/autodoc_driver-1.html:20454,test,test,20454,psi4manual/4.0b2/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/autodoc_driver-1.html,4,['test'],['test']
Testability,"match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file out of scratch with correct naming; convention.; Arguments:; @arg filename full path to target file; @arg prefix computation prefix, usually ‘psi’; @arg namespace context namespace, usually molecule name; @arg unit unit number, e.g. 32; @arg move copy or move? (default copy); Example:; Assume PID is 12345 and SCRATCH is /scratch/parrish/. copy_file_to_scratch(‘temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 .temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘h2o’, 32):; -cp /scratch/parrish/psi.12345.h2o.32 /tmp/temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32):; -cp /scratch/parrish/psi.12345.32 /tmp/temp; copy_file_to_scratch(‘/tmp/temp’, ‘psi’, ‘’, 32, True):; -mv /scratch/parrish/psi.12345.32 /tmp/temp. copy_file_to_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file into scratch with correct naming; conventi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:133708,test,test,133708,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,6,['test'],['test']
Testability,"match symmetry; structure, dimension, or element values. Used in input files in the test suite. compare_csx()[source]¶; Function to validate energies in CSX files against PSIvariables. Only; active if write_csx flag on. compare_cubes(expected, computed, label)[source]¶; Function to compare two cube files. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector computed match elements of vector expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimension, or element values. Used in input files in the test suite. copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Function to move file out of scratch with correct naming; convention.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html:132877,test,test,132877,psi4manual/1.0.0/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_driver-1.html,2,['test'],['test']
Testability,"mation for both users; and programmers in separate sections. From the top-level object directory,; build the following target (note that a working version of the Psi4; executable in bin/psi4 is a requirement for building the; documentation).:; >>> make sphinxman. This will build a full set of documentation in the html directory that can be viewed offline through any browser.; doc/sphinxman/html/index.html. Much of the documentation is auto-generated from the source. At present,; this covers:. Physical Constants: psi4/include/physconst.h; Python Driver: docstrings from *.py files in psi4/share/python; Databases: docstrings from *.py files in psi4/share/databases; Basis Sets: *.gbs files in psi4/share/basis; C++ Keywords: psi4/src/bin/psi4/read_options.cc; Sample Inputs: input.dat files in psi4/samples; PSI Variables: Process::environment.globals lines and comments in the C++ code; Plugins: doc.rst text, *.py modules, and C++ keywords in psi4/tests/plugin_* plugin directories (disabled at the moment); PSI Files: scratch file names and numbers in psi4/include/psifiles.h. Some documentation is even extracted from Psi4 objects at runtime. psi4: docstrings for the psi4 built-in module constructed in psi4/src/bin/psi4; DFT: functional availibility and characteristics as encoded in psi4/share/python/functional.py; BasisFamily: fitting basis sets for each orbital basis as encoded in psi4/share/python/basislistdunning.py and psi4/share/python/basislistother.py. Building all the documentation takes ~10 minutes. There is now good; dependency structure built into the psi4/doc/sphinxman/CMakeLists.txt; , so very long builds should be infrequent (unless you’re touching; psi4/src/bin/psi4/read_options.cc. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) doc/sphinxman and start from scratch.; Even ~10 minutes of build time can be annoying when deve",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/documentation-1.html:2404,test,tests,2404,psi4manual/1.0.0/documentation-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/documentation-1.html,2,['test'],['tests']
Testability,"mbers, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.; For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.; Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples :. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('df-mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/db-1.html:5401,benchmark,benchmark,5401,psi4manual/4.0b4/db-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/db-1.html,8,['benchmark'],['benchmark']
Testability,"mbers, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.; For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.; Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples :. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('dfmp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/db-1.html:5401,benchmark,benchmark,5401,psi4manual/4.0b3/db-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/db-1.html,4,['benchmark'],['benchmark']
Testability,"mctc-gcp"": psi4_which(""mctc-gcp"", return_bool=True),; }. def addons(request: str = None) -> Union[bool, List[str]]:; """"""Returns boolean of whether Add-On *request* is available to Psi4,; either compiled in or searchable in $PSIPATH:$PATH, as relevant. If; *request* not passed, returns list of available Add-Ons: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...` . """"""; def strike(text):; return ''.join(itertools.chain.from_iterable(zip(text, itertools.repeat('\u0336')))). if request is None:; return [(k if v else strike(k)) for k, v in sorted(_addons_.items())]; return _addons_[request.lower()]. # Testing; def test(extent: str = ""full"", extras: List = None) -> int:; """"""Runs a test suite through pytest. Parameters; ----------; extent; {'smoke', 'quick', 'full', 'long'}; All choices are defined, but choices may be redundant in some projects. * _smoke_ will be minimal ""is-working?"" test(s).; * _quick_ will be as much coverage as can be got quickly, approx. 1/3 tests.; * _full_ will be the whole test suite, less some exceedingly long outliers.; * _long_ will be the whole test suite.; extras; Additional arguments to pass to `pytest`. Returns; -------; int; Return code from `pytest.main()`. 0 for pass, 1 for fail. """"""; try:; import pytest; except ImportError:; raise RuntimeError('Testing module `pytest` is not installed. Run `conda install pytest`'); abs_test_dir = os.path.sep.join([os.path.abspath(os.path.dirname(__file__)), ""tests""]). command = ['-rws', '-v']; if extent.lower() == 'smoke':; command.extend(['-m', 'smoke']); elif extent.lower() == 'quick':; command.extend(['-m', 'quick or smoke']); elif extent.lower() == 'full':; command.extend(['-m', 'not long']); elif extent.lower() == 'long':; pass; if extras is not None:; command.extend(extras); command.extend(['--capture=sys', abs_test_dir]). retcode = pytest.main(command); return retcode. [docs]def set_output_file(ofile: str, append: bool = False, *, loglevel: int = 20, execute: bool = True) -> Path:; """"""Set the name for output and ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/extras.html:6198,test,test,6198,psi4manual/1.7.x/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/extras.html,2,['test'],['test']
Testability,"me().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 3):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'tot', BSET[2], ZSET[2], 0.0])),; 'MD': dict(zip(f_fields, [wfnname, 'tot', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'tot', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; eMD = NEED['MD']['f_energy']; eLO = NEED['LO']['f_energy']; zHI = NEED['HI']['f_zeta']; zMD = NEED['MD']['f_zeta']; zLO = NEED['LO']['f_zeta']. # Compute extrapolated energy; ratio = (eHI - eMD) / (eMD - eLO); alpha = -1 * math.log(ratio); beta = (eHI - eMD) / (math.exp(-1 * alpha * zMD) * (ratio - 1)); energypiece = eHI - beta * math.exp(-1 * alpha * zHI). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" MD-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zMD), eMD); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Alpha (exponent) Value: %16.8f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); PsiMod.print_out(cbsscheme). return energypiece. [docs]def scf_xtpl_helgaker_2(**largs):; r""""""Extrapolation scheme for reference energies with two adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^{\infty} + \beta e^{-\alpha X}, \alpha = 1.63. """"""; energypie",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html:81809,log,log,81809,psi4manual/4.0b2/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/_modules/wrappers.html,6,['log'],['log']
Testability,"me().f_code.co_name; f_fields = ['f_wfn', 'f_portion', 'f_basis', 'f_zeta', 'f_energy']; [mode, NEED, wfnname, BSET, ZSET] = validate_scheme_args(functionname, **largs). if (mode == 'requisition'):. # Impose restrictions on zeta sequence; if (len(ZSET) != 3):; raise ValidationError('Call to \'%s\' not valid with \'%s\' basis sets.' % (functionname, len(ZSET))). # Return array that logs the requisite jobs; NEED = {'HI': dict(zip(f_fields, [wfnname, 'tot', BSET[2], ZSET[2], 0.0])),; 'MD': dict(zip(f_fields, [wfnname, 'tot', BSET[1], ZSET[1], 0.0])),; 'LO': dict(zip(f_fields, [wfnname, 'tot', BSET[0], ZSET[0], 0.0]))}. return NEED. elif (mode == 'evaluate'):. # Extract required energies and zeta integers from array; eHI = NEED['HI']['f_energy']; eMD = NEED['MD']['f_energy']; eLO = NEED['LO']['f_energy']; zHI = NEED['HI']['f_zeta']; zMD = NEED['MD']['f_zeta']; zLO = NEED['LO']['f_zeta']. # Compute extrapolated energy; ratio = (eHI - eMD) / (eMD - eLO); alpha = -1 * math.log(ratio); beta = (eHI - eMD) / (math.exp(-1 * alpha * zMD) * (ratio - 1)); energypiece = eHI - beta * math.exp(-1 * alpha * zHI). # Output string with extrapolation parameters; cbsscheme = ''; cbsscheme += """"""\n ==> %s <==\n\n"""""" % (functionname); cbsscheme += """""" LO-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zLO), eLO); cbsscheme += """""" MD-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zMD), eMD); cbsscheme += """""" HI-zeta (%s) Correlation Energy: %16.8f\n"""""" % (str(zHI), eHI); cbsscheme += """""" Extrapolated Correlation Energy: %16.8f\n"""""" % (energypiece); cbsscheme += """""" Alpha (exponent) Value: %16.8f\n"""""" % (alpha); cbsscheme += """""" Beta (coefficient) Value: %16.8f\n"""""" % (beta); psi4.print_out(cbsscheme). return energypiece. [docs]def scf_xtpl_helgaker_2(**largs):; r""""""Extrapolation scheme for reference energies with two adjacent zeta-level bases.; Used by :py:func:`~wrappers.complete_basis_set`. .. math:: E_{total}^X = E_{total}^{\infty} + \beta e^{-\alpha X}, \alpha = 1.63. """"""; energypiece",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:97588,log,log,97588,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,2,['log'],['log']
Testability,"me; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.):; python -c “import psi4; psi4.test()”. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addon",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/build_planning-1.html:47398,test,test,47398,psi4manual/1.2.1/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/build_planning-1.html,4,['test'],"['test', 'tests']"
Testability,"me; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable:; psi4 –test. From the library (PSI4 must be detectable as a Python; module. See the setup note at How to run Psi4 as Python module after compilation; if needed.):; python -c “import psi4; psi4.test()”. How to refer to Psi4¶; Ways to refer to PSI4 in text, in order of decreasing goodness:. as Psi4 in Optima regular font with “si” in custom small caps; according to psi4/media/README.md.; html: <span style=""font-family: Optima, sans-serif; color: #273896;"">P<span style=""font-size: 82%;"">SI</span>4</span>. as Psi4 with “si” in generated small caps; html: <span style=""font-variant: small-caps;"">Psi4</span>. as Psi4 with “si” in lowercase; as psi4 in code; NOT PSI4 or PSI. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and depende",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/build_planning-1.html:40898,test,test,40898,psi4manual/1.1.0/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/build_planning-1.html,4,['test'],"['test', 'tests']"
Testability,"me; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. How to see CTest testing errors¶; 1; 2; 3; 4; 5; 6; 7>>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/tests/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a limited number of “smoke” tests are available to be; run via pytest. From the executable; psi4 --test. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed,. can run in parallel, though final file cleanup may not exit cleanly. pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n`getconf _NPROCESSORS_ONLN`. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:50347,test,test,50347,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,4,['test'],"['test', 'tests']"
Testability,"me=False, **kwargs]). psi4.compare_wavefunctions(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Wavefunction objects.; Compares over 30 Wavefunction properties, including nirrep, nso, molecule geometry, basis set nbf, density matrices, gradient results, etc.; Handles both Psi4-style signatures ((expected, computed, atol_exponent, label); see atol_exponent parameter below) and QCA-style signatures ((expected, computed, label)). Parameters; atol_exponent (int or float) – Absolute tolerance (see formula in qcelemental.testing.compare_values() notes).; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99. psi4.compare_molrecs(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Molecule.to_dict() objects.; See qcelemental.testing.compare_molrecs() for details.; Note only QCA-style signature ((expected, computed, label)) available. qcelemental.testing.compare_molrecs(expected, computed, label=None, *, atol=1e-06, rtol=1e-16, forgive=None, verbose=1, relative_geoms='exact', return_message=False, return_handler=None)[source]¶; Function to compare Molecule dictionaries. Return type; bool. Parameters. label (Optional[str]) – ; atol (float) – ; rtol (float) – ; verbose (int) – ; return_message (bool) – ; return_handler (Optional[Callable]) – . File Formats¶. psi4.compare_cubes(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for volumetric data in cube file format.; Compares only the volumetric data, not the voxel data or molecular geometry or other header contents.; The volumetric data is passed to qcelemental.testing.compare_values().; Note only QCA-style signature ((expected, computed, label)) available. Parameters. expected (file) – Reference cube file against which computed i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:23439,test,testing,23439,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,1,['test'],['testing']
Testability,"me>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S66by8¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference interaction energies from Rezac et al. JCTC 7 2427 (2011).; Note that the S66by8-N-1.0 members are not quite the same geometries as S66-N. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HB' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve hydrogen-bonded systems; 'MX' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve mixed-influence systems; 'DD' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve dispersion-dominated systems. O24by5mb¶. Database (O24) of interaction energies for small open-shell high-spin bimolecular complexes.; Geometries taken from https://gitlab.com/piotr.zuchowski/o24x",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html:2628,test,testing,2628,psi4manual/1.4.0/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_available_databases-1.html,4,['test'],['testing']
Testability,"members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.; For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.; Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples:. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted fr",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/db-1.html:5664,benchmark,benchmark,5664,psi4manual/1.3.2/db-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/db-1.html,8,['benchmark'],['benchmark']
Testability,"memory?. Type: boolean; Default: false. T_AMPS (CCHBAR); CCHBAR — Do compute the Tamplitude equation matrix elements?. Type: boolean; Default: false. TAU_SQUARED (DCFT); DCFT (Expert) — Controls whether to compute the DCFT energy with the Tau^2 correction to Tau. Type: boolean; Default: false. TDHF_MEM_SAFETY_FACTOR (CPHF); CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. TDM (DETCI); DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDM_PRINT (DETCI); DETCI — Do print the transition density?. Type: boolean; Default: false. TDM_WRITE (DETCI); DETCI — Do write the transition density?. Type: boolean; Default: false. TEST_B (OPTKING); OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING); OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF); SCF — Number of colatitude grid points for sphereical potential integration. Type: integer; Default: 360. THICKNESS (SCF); SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. TIKHONOW_MAX (PSIMRCC); PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCFT); DCFT — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC); PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC); PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF); SCF (Expert) — The tile size for the distributed matrices. Type: integer; Default: 51",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html:121638,test,test,121638,psi4manual/4.0b3/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_glossary_options_c-1.html,2,['test'],['test']
Testability,"ment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energie",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:16551,test,testing,16551,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['testing']
Testability,"metadata.py; to compute the version. If you don’t have all the latest tags, this mechanism; can’t work. To solve, pull tags and remake.; 1; 2; 3; 4# upstream in `git remote -v` points to github.com/psi4/psi4.git; >>> git fetch upstream 'refs/tags/*:refs/tags/*'; >>> make; # version healed. How to fix “cannot import name ‘core’ from {top-level-psi4-dir}¶; First, what’s happening? sys.path (where modules can be imported from in python) starts with ''. If you export PYTHONPATH={objdir}/stage/{prefix}/lib/{pymod_lib_dir}:$PYTHONPATH to make PsiAPI easy, that inserts starting in pos’n 1 (0-indexed), so '' still at the head of sys.path. Now, if you try to run a psiapi/python file from {top-level-psi4-dir} that contains import psi4, it will find the source tree psi4/__init__.py and fail because there’s no core.so around. That is, it’s finding what looks to be the psi4 module dir structure . when the one it wants is what you inserted into PYTHONPATH at pos’n 1.; The way around this is to move the python file you’re running to any other directory. Or, within the file, do sys.path.insert(0, {objdir}/stage/{prefix}/lib/{pymod_lib_dir}. How to find tests without output.ref¶; Ideally, each new test or much-altered test should add its own; output.ref. When that doesn’t happen, this command helps.; 1find tests/ -mindepth 1 -maxdepth 1 -type d '!' -exec test -e ""{}/output.ref"" "";"" -print. table of contents. Git, Versioning; How to bump a version; How to create and remove an annotated Git tag on a remote; What Psi4 version is running; How to locate non-ascii characters in the codebase; How to fix “Psi4 undefined” version; How to fix “cannot import name ‘core’ from {top-level-psi4-dir}; How to find tests without output.ref. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.2.1;  · . PSI4. Managing: Git, Conda, CMake and all that. © Copyright 2018, The Psi4 Project.; Last updated on Wednesday, 25 July 2018 04:21AM.; Created using Sphinx 1.7.6.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/manage_git-1.html:8529,test,tests,8529,psi4manual/1.2.1/manage_git-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/manage_git-1.html,12,['test'],"['test', 'tests']"
Testability,"method in cbs_methods]); lowername = name.lower(); if dertype == 1:; # Bounce to CBS in pure-gradient mode if ""method/basis"" name and all parts have analytic grad. avail.; return driver_cbs._cbs_gufunc(gradient, name, ptype='gradient', **kwargs); else:; # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util._set_convergence_criterion('energy', cbs_methods[0], 8, 10, 8, 10, 8). else:; # Allow specification of methods to arbitrary order; lowername = name.lower(); _filter_renamed_methods(""gradient"", lowername); lowername, level = driver_util.parse_arbitrary_order(lowername); if level:; kwargs['level'] = level. # Prevent methods that do not have associated gradients; if lowername in energy_only_methods:; raise ValidationError(""gradient('%s') does not have an associated gradient"" % name). dertype = _find_derivative_type('gradient', lowername, user_dertype). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash = driver_util._set_convergence_criterion('energy', lowername, 8, 10, 8, 10, 8). # Commit to procedures[] call hereafter; return_wfn = kwargs.pop('return_wfn', False); core.clean_variables(). # no analytic derivatives for scf_type cd; if core.get_global_option('SCF_TYPE') == 'CD':; if (dertype == 1):; raise ValidationError(""""""No analytic derivatives for SCF_TYPE CD.""""""). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()); molecule.update_geometry(). # Does dertype indicate an analytic procedure both exists and is wanted?; if dertype == 1:; core.print_out(""""""gradient() will perform analytic gradient computation.\n""""""). # Perform the gradient calculation; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs). else:; core.print_out(""""""gradient() will perform gradient computation by finite difference of analytic energies.\n""""""). opt_iter = kwar",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html:41984,test,test,41984,psi4manual/1.4.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/driver.html,4,['test'],['test']
Testability,"metrize(hess: np.ndarray, mol: psi4.core.Molecule) -> np.ndarray:; """"""Apply Abelian symmetry of `mol` to Hessian `hess`. Parameters; ----------; hess; (3 * nat, 3 * nat) Hessian array perhaps with jitter unbecoming a symmetric molecule.; mol; Molecule at which Hessian computed. Returns; -------; numpy.ndarray; (3 * nat, 3 * nat) symmetrized Hessian array. """"""; ct = mol.point_group().char_table(). # Obtain atom mapping of atom * symm op to atom; atom_map = compute_atom_map(mol). syms = []; smap = []; for g in range(ct.order()):; syms.append(np.asarray(ct.symm_operation(g).d)); smap.append([atom_map[at][g] for at in range(mol.natom())]). np.set_printoptions(formatter={'float': '{: 16.12f}'.format}); b_hess = blockwise_expand(hess, (3, 3), False). bDG = []; nat = b_hess.shape[0]; for iat in range(nat):; for jat in range(nat):; for sym in range(len(syms)):; bDG.append(np.zeros_like(b_hess)); bDG[sym][iat, jat] = syms[sym].dot(b_hess[iat, jat].dot(syms[sym])); # Note that tested syms all diagonal, so above may be off by some transposes. for sym in range(len(syms)):; bDG[sym] = bDG[sym][:, smap[sym]]; bDG[sym] = bDG[sym][smap[sym], :]; tot = np.sum(bDG, axis=0); tot = np.divide(tot, len(syms)). print('symmetrization diff:', np.linalg.norm(tot - b_hess)); m_tot = blockwise_contract(tot); return m_tot. [docs]; def print_molden_vibs(vibinfo: Dict[str, Datum], atom_symbol: Union[np.ndarray, List[str]], geom: Union[np.ndarray, List[List[float]]], standalone: bool = True) -> str:; """"""Format vibrational analysis for Molden. Parameters; ----------; vibinfo; Holds results of vibrational analysis.; atom_symbol; (nat,) element symbols for geometry of vibrational analysis.; geom; (nat, 3) geometry of vibrational analysis [a0].; standalone; Whether returned string prefixed ""[Molden Format]"" for standalone rather than append. Returns; -------; str; `vibinfo` formatted for Molden, including FREQ, FR-COORD, & FR-NORM-COORD fields. Notes; -----; Molden format spec from http://www.cmbi.ru.",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/qcdb/vib.html:5719,test,tested,5719,psi4manual/1.8.x/_modules/psi4/driver/qcdb/vib.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/qcdb/vib.html,6,['test'],['tested']
Testability,"metrize(hess: np.ndarray, mol: psi4.core.Molecule) -> np.ndarray:; """"""Apply Abelian symmetry of `mol` to Hessian `hess`. Parameters; ----------; hess; (3 * nat, 3 * nat) Hessian array perhaps with jitter unbecoming a symmetric molecule.; mol; Molecule at which Hessian computed. Returns; -------; numpy.ndarray; (3 * nat, 3 * nat) symmetrized Hessian array. """"""; ct = mol.point_group().char_table(). # Obtain atom mapping of atom * symm op to atom; atom_map = compute_atom_map(mol). syms = []; smap = []; for g in range(ct.order()):; syms.append(np.asarray(ct.symm_operation(g).d)); smap.append([atom_map[at][g] for at in range(mol.natom())]). np.set_printoptions(formatter={'float': '{: 16.12f}'.format}); b_hess = blockwise_expand(hess, (3, 3), False). bDG = []; nat = b_hess.shape[0]; for iat in range(nat):; for jat in range(nat):; for sym in range(len(syms)):; bDG.append(np.zeros_like(b_hess)); bDG[sym][iat, jat] = syms[sym].dot(b_hess[iat, jat].dot(syms[sym])); # Note that tested syms all diagonal, so above may be off by some transposes. for sym in range(len(syms)):; bDG[sym] = bDG[sym][:, smap[sym]]; bDG[sym] = bDG[sym][smap[sym], :]; tot = np.sum(bDG, axis=0); tot = np.divide(tot, len(syms)). print('symmetrization diff:', np.linalg.norm(tot - b_hess)); m_tot = blockwise_contract(tot); return m_tot. [docs]def print_molden_vibs(vibinfo: Dict[str, Datum], atom_symbol: Union[np.ndarray, List[str]], geom: Union[np.ndarray, List[List[float]]], standalone: bool = True) -> str:; """"""Format vibrational analysis for Molden. Parameters; ----------; vibinfo; Holds results of vibrational analysis.; atom_symbol; (nat,) element symbols for geometry of vibrational analysis.; geom; (nat, 3) geometry of vibrational analysis [a0].; standalone; Whether returned string prefixed ""[Molden Format]"" for standalone rather than append. Returns; -------; str; `vibinfo` formatted for Molden, including FREQ, FR-COORD, & FR-NORM-COORD fields. Notes; -----; Molden format spec from http://www.cmbi.ru.nl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html:5713,test,tested,5713,psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html,8,['test'],['tested']
Testability,"metrize(hess: np.ndarray, mol: psi4.core.Molecule) -> np.ndarray:; """"""Apply Abelian symmetry of `mol` to Hessian `hess`. Parameters; ----------; hess; (3 * nat, 3 * nat) Hessian array perhaps with jitter unbecoming a symmetric molecule.; mol; Molecule at which Hessian computed. Returns; -------; numpy.ndarray; (3 * nat, 3 * nat) symmetrized Hessian array. """"""; ct = mol.point_group().char_table(). # Obtain atom mapping of atom * symm op to atom; atom_map = compute_atom_map(mol). syms = []; smap = []; for g in range(ct.order()):; syms.append(np.asarray(ct.symm_operation(g).d)); smap.append([atom_map[at][g] for at in range(mol.natom())]). np.set_printoptions(formatter={'float': '{: 16.12f}'.format}); b_hess = blockwise_expand(hess, (3, 3), False). bDG = []; nat = b_hess.shape[0]; for iat in range(nat):; for jat in range(nat):; for sym in range(len(syms)):; bDG.append(np.zeros_like(b_hess)); bDG[sym][iat, jat] = syms[sym].dot(b_hess[iat, jat].dot(syms[sym])); # Note that tested syms all diagonal, so above may be off by some transposes. for sym in range(len(syms)):; bDG[sym] = bDG[sym][:, smap[sym]]; bDG[sym] = bDG[sym][smap[sym], :]; tot = np.sum(bDG, axis=0); tot = np.divide(tot, len(syms)). print('symmetrization diff:', np.linalg.norm(tot - b_hess)); m_tot = blockwise_contract(tot); return m_tot. def print_molden_vibs(vibinfo: Dict[str, Datum], atom_symbol: Union[np.ndarray, List[str]], geom: Union[np.ndarray, List[List[float]]], standalone: bool = True) -> str:; """"""Format vibrational analysis for Molden. Parameters; ----------; vibinfo; Holds results of vibrational analysis.; atom_symbol; (nat,) element symbols for geometry of vibrational analysis.; geom; (nat, 3) geometry of vibrational analysis [a0].; standalone; Whether returned string prefixed ""[Molden Format]"" for standalone rather than append. Returns; -------; str; `vibinfo` formatted for Molden, including FREQ, FR-COORD, & FR-NORM-COORD fields. Notes; -----; Molden format spec from http://www.cmbi.ru.nl/molde",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/qcdb/vib.html:5671,test,tested,5671,psi4manual/1.6.x/_modules/qcdb/vib.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/qcdb/vib.html,10,['test'],['tested']
Testability,"minfo['E0'] = Datum('E0', 'Eh', E0); therminfo['B'] = Datum('rotational constants', 'cm^-1', rot_const); therminfo['sigma'] = Datum('external symmetry number', '', sigma); therminfo['T'] = Datum('temperature', 'K', T); therminfo['P'] = Datum('pressure', 'Pa', P). # electronic; q_elec = multiplicity; sm[('S', 'elec')] = math.log(q_elec). # translational; beta = 1 / (qcel.constants.kb * T); q_trans = (2.0 * np.pi * molecular_mass * qcel.constants.amu2kg /; (beta * qcel.constants.h * qcel.constants.h))**1.5 * qcel.constants.na / (beta * P); sm[('S', 'trans')] = 5 / 2 + math.log(q_trans / qcel.constants.na); sm[('Cv', 'trans')] = 3 / 2; sm[('Cp', 'trans')] = 5 / 2; sm[('E', 'trans')] = 3 / 2 * T; sm[('H', 'trans')] = 5 / 2 * T. # rotational; if rotor_type == ""RT_ATOM"":; pass; elif rotor_type == ""RT_LINEAR"":; q_rot = 1. / (beta * sigma * 100 * qcel.constants.c * qcel.constants.h * rot_const[1]); sm[('S', 'rot')] = 1.0 + math.log(q_rot); sm[('Cv', 'rot')] = 1; sm[('Cp', 'rot')] = 1; sm[('E', 'rot')] = T; else:; phi_A, phi_B, phi_C = rot_const * 100 * qcel.constants.c * qcel.constants.h / qcel.constants.kb; q_rot = math.sqrt(math.pi) * T**1.5 / (sigma * math.sqrt(phi_A * phi_B * phi_C)); sm[('S', 'rot')] = 3 / 2 + math.log(q_rot); sm[('Cv', 'rot')] = 3 / 2; sm[('Cp', 'rot')] = 3 / 2; sm[('E', 'rot')] = 3 / 2 * T; sm[('H', 'rot')] = sm[('E', 'rot')]. # vibrational; vibonly = filter_nonvib(vibinfo); ZPE_cm_1 = 1 / 2 * np.sum(vibonly['omega'].data.real); omega_str = _format_omega(vibonly['omega'].data, decimals=4). imagfreqidx = np.where(vibonly['omega'].data.imag > vibonly['omega'].data.real)[0]; if len(imagfreqidx):; print(""Warning: thermodynamics relations excluded imaginary frequencies: {}"".format(omega_str[imagfreqidx])). filtered_theta_vib = np.delete(vibonly['theta_vib'].data, imagfreqidx, None); filtered_omega_str = np.delete(omega_str, imagfreqidx, None); rT = filtered_theta_vib / T # reduced temperature. lowfreqidx = np.where(filtered_theta_vib < 900.)[0]; if len(lo",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html:32650,log,log,32650,psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/qcdb/vib.html,16,['log'],['log']
Testability,"mits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3'; -__version_long = '1.3+zzzzzzz'; +__version__ = '1.3.1'; +__version_long = '1.3.1+zzzzzzz'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3.1""; [1.3.x 2ce1c29] v1.3.1. >>> git log --oneline | head -1; 786fb2b v1.3.1; >>> git tag -a v1.3.1 2ce1c29 -m ""v1.3.1"". # skipping the hash recording and ""upcoming"" step b/c only tags matter on maintenance branch. # free pushing to maintenance branches at present so GitHub interface steps not needed. # see note at ""Tag postrelease"" for why atomic commit needed. Collect docs from GHA artifacts. >>> git push --atomic upstream 1.3.x v1.3.1. Initialize release branch¶. follow tagging procedure; before re-engaing the “include admin” button, push a branch at the tag commit (not the records commit); >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build Conda Psi4 stack at specific commit¶; By “Psi4 stack”, mean packages psi4, psi4-rt, psi4-dev.; Package psi4-docs used to be in “Psi4 stack”, but it’s handled by GHA and netlify now, not Conda, so skip directions below.; Other packages, the “ecosystem stack” (e.g., libint, v2rdm_casscf) should be already built. Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/manage_release.html:8553,log,log,8553,psi4manual/1.7.x/manage_release.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/manage_release.html,2,['log'],['log']
Testability,"mization with method defined via cbs. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. fci-h2o; 6-31G H2O Test FCI Energy Point. opt11; Transition-state optimizations of HOOH to both torsional transition states. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. pywrap-db2; Database calculation, run in sow/reap mode. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. dft-custom; DFT custom function",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:42160,test,test,42160,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"mme’s dispersion corrections are discussed here.; The corresponding method, termed SAPT0-D, thus relies on empirically fit parameters; specific to SAPT0/jun-cc-pVDZ. While SAPT0-D can be used with any of the -D; variants using default parameters optimized for Hartee–Fock interaction energies,; we recommend using the refit parameters with Becke-Johnson damping, as described in; [Schriber:2021:234107]. Again, use of SAPT0-D with a basis set other than; jun-cc-pVDZ is not tested and not guaranteed to give meaningful results without; refitting the dispersion parameters.; A simple water dimer computation using SAPT0-D may look like:; molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis jun-cc-pvdz. energy('sapt0-d3mbj') # runs the recommended dispersion correction; energy('sapt0-d3') # tests an alternative damping scheme/parameterization. Given the naturally pairwise-atomic nature of these empirical dispersion corrections,; integration with existing FSAPT functionality is also available simply by calling; energy(""fsapt0-d3mbj""). See FSAPT documentation for more details on using FSAPT; for functional group analyses. table of contents. SAPT: Symmetry-Adapted Perturbation Theory; The S2 approximation and scaling; A First Example; Advanced example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; CPHF_R_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; COUPLED_INDUCTION; EXCH_SCALE_ALPHA; INTS_TOLERANCE; DENOMINATOR_DELTA; DENOMINATOR_ALGORITHM; DEBUG. Specific open-shell SAPT0 keywords; SAPT_MEM_SAFETY; COUPLED_INDUCTION. SAPT(DFT); Basic Keywords for SAPT(DFT); SAPT_DFT_GRAC_SHIFT_A; SAPT_DFT_GRAC_SHIFT_B; SAPT_DFT_DO_DHF; SAPT_DFT_EXCH_DISP_SCALE_SCHEME. Advanced Keywords for SAPT(D",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/sapt.html:50123,test,tests,50123,psi4manual/master/sapt.html,https://psicode.org,https://psicode.org/psi4manual/master/sapt.html,1,['test'],['tests']
Testability,"mme’s dispersion corrections are discussed here.; The corresponding method, termed SAPT0-D, thus relies on empirically fit parameters; specific to SAPT0/jun-cc-pVDZ. While SAPT0-D can be used with any of the -D; variants using default parameters optimized for Hartee–Fock interaction energies,; we recommend using the refit parameters with Becke-Johnson damping, as described in; [Schriber:2021:234107]. Again, use of SAPT0-D with a basis set other than; jun-cc-pVDZ is not tested and not guaranteed to give meaningful results without; refitting the dispersion parameters.; A simple water dimer computation using SAPT0-D may look like:; molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis jun-cc-pvdz. energy('sapt0-d3mbj') # runs the recommended dispersion correction; energy('sapt0-d3') # tests an alternative damping scheme/parameterization. Given the naturally pairwise-atomic nature of these empirical dispersion corrections,; integration with existing FSAPT functionality is also available simply by calling; energy(""fsapt0-d3mbj""). See FSAPT documentation for more details on using FSAPT; for functional group analyses. table of contents. SAPT: Symmetry-Adapted Perturbation Theory; The S2 approximation and scaling; A First Example; Advanced example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; D_CONVERGENCE; E_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; COUPLED_INDUCTION; EXCH_SCALE_ALPHA; INTS_TOLERANCE; DENOMINATOR_DELTA; DENOMINATOR_ALGORITHM; DEBUG. Specific open-shell SAPT0 keywords; SAPT_MEM_SAFETY; COUPLED_INDUCTION. SAPT(DFT); Basic Keywords for SAPT(DFT); SAPT_DFT_GRAC_SHIFT_A; SAPT_DFT_GRAC_SHIFT_B; SAPT_DFT_DO_DHF; SAPT_DFT_EXCH_DISP_SCALE_SCHEME. Advanced Keywords ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/sapt.html:49630,test,tests,49630,psi4manual/1.7.x/sapt.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/sapt.html,3,['test'],['tests']
Testability,"mme’s dispersion corrections are discussed here.; The corresponding method, termed SAPT0-D, thus relies on empirically fit parameters; specific to SAPT0/jun-cc-pVDZ. While SAPT0-D can be used with any of the -D; variants using default parameters optimized for Hartee–Fock interaction energies,; we recommend using the refit parameters with Becke-Johnson damping, as described in; [Schriber:2021:234107]. Again, use of SAPT0-D with a basis set other than; jun-cc-pVDZ is not tested and not guaranteed to give meaningful results without; refitting the dispersion parameters.; A simple water dimer computation using SAPT0-D may look like:; molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis jun-cc-pvdz. energy('sapt0-d3mbj') # runs the recommended dispersion correction; energy('sapt0-d3') # tests an alternative damping scheme/parameterization. Given the naturally pairwise-atomic nature of these empirical dispersion corrections,; integration with existing FSAPT functionality is also available simply by calling; energy(“fsapt0-d3mbj”). See FSAPT <fisapt> documentation for more details on using FSAPT; for functional group analyses. table of contents. SAPT: Symmetry-Adapted Perturbation Theory; The S2 approximation and scaling; A First Example; Advanced example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; D_CONVERGENCE; E_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; COUPLED_INDUCTION; EXCH_SCALE_ALPHA; INTS_TOLERANCE; DENOMINATOR_DELTA; DENOMINATOR_ALGORITHM; DEBUG. Specific open-shell SAPT0 keywords; SAPT_MEM_SAFETY; COUPLED_INDUCTION. SAPT(DFT); Basic Keywords for SAPT(DFT); SAPT_DFT_GRAC_SHIFT_A; SAPT_DFT_GRAC_SHIFT_B; SAPT_DFT_DO_DHF; SAPT_DFT_EXCH_DISP_SCALE_SCHEME. Advanced ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/sapt-1.html:46333,test,tests,46333,psi4manual/1.4.0/sapt-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/sapt-1.html,5,['test'],['tests']
Testability,"modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. Input File; Description. dft-freq-analytic2; Analytic UKS SVWN frequencies, compared to finite difference values. numpy-array-interface; Numpy interface testing. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_super",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:979,test,test,979,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,1,['test'],['test']
Testability,"module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cbs-delta-energy; Extrapolated energies with delta correction. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc51; EOM-CC3/cc-pVTZ on H2O. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc54; CCS",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html:9800,test,test,9800,psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"molecule().point_group().symbol(); psi2dump = {'c1' : [1], # A; 'ci' : [1,2], # Ag Au; 'c2' : [1,2], # A B; 'cs' : [1,2], # A' A""; 'd2' : [1,4,3,2], # A B1 B2 B3; 'c2v' : [1,4,2,3], # A1 A2 B1 B2; 'c2h' : [1,4,2,3], # Ag Bg Au Bu; 'd2h' : [1,4,6,7,8,5,3,2] # Ag B1g B2g B3g Au B1u B2u B3u; }. irrep_map = psi2dump[symm]; return np.array(irrep_map, dtype='int'). [docs]def fcidump_from_file(fname):; """"""Function to read in a FCIDUMP file. :returns: a dictionary with FCIDUMP header and integrals; The key-value pairs are:; - 'norb' : number of basis functions; - 'nelec' : number of electrons; - 'ms2' : spin polarization of the system; - 'isym' : symmetry of state (if present in FCIDUMP); - 'orbsym' : list of symmetry labels of each orbital; - 'uhf' : whether restricted or unrestricted; - 'enuc' : nuclear repulsion plus frozen core energy; - 'epsilon' : orbital energies; - 'hcore' : core Hamiltonian; - 'eri' : electron-repulsion integrals. :param fname: FCIDUMP file name; """"""; intdump = {}; with open(fname, 'r') as handle:; assert '&FCI' == handle.readline().strip(). skiplines = 1; read = True; while True:; skiplines += 1; line = handle.readline(); if 'END' in line:; break. key, value = line.split('='); value = value.strip().rstrip(','); if key == 'UHF':; value = 'TRUE' in value; elif key == 'ORBSYM':; value = [int(x) for x in value.split(',')]; else:; value = int(value.replace(',', '')). intdump[key.lower()] = value. # Read the data and index, skip header; raw_ints = np.genfromtxt(fname, skip_header=skiplines). # Read last line, i.e. Enuc + Efzc; intdump['enuc'] = raw_ints[-1, 0]. # Read in integrals and indices; ints = raw_ints[:-1, 0]. # Get dimensions and indices; nbf = intdump['norb']; idxs = raw_ints[:, 1:].astype(np.int) - 1. # Slices; sl = slice(ints.shape[0] - nbf, ints.shape[0]). # Extract orbital energies; epsilon = np.zeros(nbf); epsilon[idxs[sl, 0]] = ints[sl]; intdump['epsilon'] = epsilon. # Count how many 2-index intdump we have; sl = slice(sl.start - nbf * nb",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/fcidump.html:9974,assert,assert,9974,psi4manual/1.3.2/_modules/psi4/driver/p4util/fcidump.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/fcidump.html,1,['assert'],['assert']
Testability,"molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:37373,test,test,37373,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user nee",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html:38989,test,test,38989,psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/autodoc_testsuite_corepsi4-1.html,4,['test'],['test']
Testability,"mong python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. opt2; SCF DZ allene geometry optimzation, with Cartesian input. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc54; CCSD dipole with user-specified basis set. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. cc16; UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. scf3; are specified explicitly. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dftd3-energy;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html:11087,test,testing,11087,psi4manual/4.0b4/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html,8,['test'],['testing']
Testability,"mp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). mp2-1; All-electron MP2 6-31G** geometry optimization of water. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. pubchem2; Superficial test of PubChem interface. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. aediis-1; ADIIS test case, from 10.1063/1.3304922. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. sapt11; sapt example with orbital freezing with alkali metal and dMP2. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. mbis-2; MBIS calculation on OH- (Expanded ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html:1430,test,test,1430,psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"mparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dft2; DFT Functional Test. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). dft1; DFT Functional Test. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. pywrap-cbs1; Various basis set extrapolation tests. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. opt2; SCF DZ allene geometry optimzation, with Cartesian input. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc54; CCSD dipole with ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html:9832,test,tests,9832,psi4manual/4.0b4/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_testsuite-1.html,8,['test'],['tests']
Testability,"mparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the state of the CN radical, with Cartesian input. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dft2; DFT Functional Test. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis ). dft1; DFT Functional Test. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. pywrap-cbs1; Various basis set extrapolation tests. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies. dcft5; DCFT-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. opt2; SCF DZ allene geometry optimzation, with Cartesian input. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc54; CCSD dipole with user-specified basis set. cc26; Single-point gradien",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html:8792,test,tests,8792,psi4manual/4.0b3/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html,4,['test'],['tests']
Testability,"mples directory.; Finally, add the directory name to the list of tests in psi4/tests/CMakeLists.txt.; In preparing the test case, turn energy, density, amplitude, and; geometry convergence criteria to very tight levels, and use these; results for reference energies, reference geometries, reference cube; files, etc.. Then, either remove or relax the convergence settings,; if these are not a vital part of the test. In choosing the number of; digits for compare_values() and other compare_* functions,; select a number looser than the convergence set in the test or the; default convergence for the calculation type (energy, gradient, etc.). Adding PsiAPI Test Cases¶; Sometimes you want to add tests that check several variations of a; template job or that test error handling or that are PsiAPI rather than; PSIthon focused. In these cases, you’ll want to add to the second test; suite that lives at psi4/tests/pytests. Presently, the “normal”; (everything in the tests/ directory that isn’t in tests/pytests/); are run through ctest, while the pytests are run through pytest. In; future, all will be run through Pytest, but the former will still be; run as PSIthon (psi4 input.dat) while the latter will still be; run as PsiAPI (import psi4). In other words, in designing a test,; choose its mode based on whether PSIthon or PsiAPI suits it better and; whether it’s a simple model for users (probably PSIthon) or for expert; users (probably PsiAPI). Both will continue to work in future.; In developing a Pytest test, you probably want to edit it in place,; rather than running make after each change. Easiest is from; <objdir>, run pytest ../tests/pytests. Add any filters (-k; test_name_fragment) or parallelism (-n <N> if pytest-xdist; installed) or print test names (-v) or print warnings (-rws). To; see stdout output from an otherwise passing test, easiest to add assert; 0 at its end to trigger failure. An important point is that because; they’re PsiAPI, import psi4 is happening, so the <",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/add_tests-1.html:3682,test,tests,3682,psi4manual/1.4.0/add_tests-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/add_tests-1.html,8,['test'],['tests']
Testability,"mplete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; # all equivalent. energy('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; be configured behind-the-scenes with explicit arguments, as in the; first example, or the convenience syntax of the equivalent second; example can be used.; Another very useful and powerful feature of PSI4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. table of contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.6;  · . PSI4. Psithon: Structuring an Input File. © Copyright 2022, The Psi4 Project.; Last updated on Thursday, 19 May 2022 08:57PM.; Created using Sphinx 4.5.0.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/psithoninput.html:14866,benchmark,benchmark,14866,psi4manual/1.6.x/psithoninput.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/psithoninput.html,1,['benchmark'],['benchmark']
Testability,"mponent and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,” U. Bozkaya,; J. Chem. Phys. 135, 224103 (2011).; (doi: 10.1063/1.3665134). Bozkaya and C. D. Sherrill, (unpublished). Second-Order Algebraic-Diagrammatic Construction [ADC(2)]¶; General ADC(2) theory. “Intermediate state representation approach to physical properties of; electronically excited molecules,”; J. Schirmer, and A. B. Trofimov, J. Chem. Phys. 120,; 11449-11464 (2004).; (doi: 10.1063/1.1752875). Theory of “Partially-renormalized” CIS(D) and ADC(2) [PR-CIS(D) and PR-ADC(2)]; and their implementation in PSI4. “Excited State Calculation for Free-Base and Metalloporphyrins with; the Partially Renormalized Polarization Propagator Approach,”; M. Saitow and Y. Mochizuki, Chem. Phys. Lett. 525, 144-149; (2012).; (doi: 10.1016/j.cplett.2011.12.063). Supported Architectures¶; The majority of PSI4 was developed on Mac and Linux machines. In; principle, it should work on any Unix system; however, we have not tested; extensively on systems other than Mac and Linux. There is not a Windows; version of PSI4.; PSI4 has been successfully compiled using Intel, GCC, and Clang; compilers. For the Intel compilers, use versions 11 or 12.1 (we have had; trouble with version 12.0). See Sec. Compiling and Installing for details. Capabilities¶; PSI4 can perform ab initio computations employing basis; sets of contrated Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of PSI4 can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table Methods displays the range of theoretical methods; available in PSI4.; For more details, see Tables Energy,; Energy (DFT), Energy (MRCC),; Gradient, and Frequency. Summary of theoretical methods available in PSI4. Method; Energy; Gradient; Reference; Parallelism. SCF (HF and DFT); Y; Y [4]; RHF/ROHF/UHF/RKS/UKS; threaded. DF-SCF (HF and DFT); Y; Y [4]; RHF/ROHF/UHF/RKS/UKS; threaded. DCFT; Y; Y; UHF; p",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/introduction-1.html:11080,test,tested,11080,psi4manual/4.0b4/introduction-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/introduction-1.html,4,['test'],['tested']
Testability,"mport absolute_import; import sys; import re; import math; import os; import shutil. # Import driver helpers; from psi4.driver import driver_util; from psi4.driver import driver_cbs; from psi4.driver import driver_nbody; from psi4.driver import p4util; # from psi4.driver.inputparser import parse_options_block. from psi4.driver.procrouting import *; from psi4.driver.p4util.exceptions import *; # never import wrappers or aliases into this file. def _find_derivative_type(ptype, method_name, user_dertype):; r""""""; Figures out the derivative type (0, 1, 2) for a given method_name. Will; first use user default and then the highest available derivative type for; a given method.; """""". if ptype not in ['gradient', 'hessian']:; raise ValidationError(""_find_derivative_type: ptype must either be gradient or hessian.""). dertype = ""(auto)"". # If user type is None, try to find the highest derivative; if user_dertype is None:; if (ptype == 'hessian') and (method_name in procedures['hessian']):; dertype = 2; # Will need special logic if we ever have managed Hessians; elif method_name in procedures['gradient']:; dertype = 1; if procedures['gradient'][method_name].__name__.startswith('select_'):; try:; procedures['gradient'][method_name](method_name, probe=True); except ManagedMethodError:; dertype = 0; elif method_name in procedures['energy']:; dertype = 0; else:; # Quick sanity check. Only *should* be able to be None or int, but hey, kids today...; if not isinstance(user_dertype, int):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype. if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; raise ValidationError('INTEGRAL_PACKAGE ERD does not play nicely with derivatives, so stopping.'). # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; elif (dertype == 1) and (method_name in procedures['gradient']):; pass; elif (dertype == 0) and (method_name in procedures['",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html:2415,log,logic,2415,psi4manual/1.1.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.1.0/_modules/psi4/driver/driver.html,1,['log'],['logic']
Testability,"mport p4util; from psi4.driver import driver_findif; from psi4.driver.p4util.exceptions import ValidationError. _engine_can_do = collections.OrderedDict([; # engine order establishes default for each disp; (""libdisp"", [""d1"", ""d2"", ""chg"", ""das2009"", ""das2010"",]),; (""s-dftd3"", [ ""d3zero2b"", ""d3bj2b"", ""d3mzero2b"", ""d3mbj2b"", ""d3zeroatm"", ""d3bjatm"", ""d3mzeroatm"", ""d3mbjatm"", ]),; (""dftd3"", [ ""d2"", ""d3zero2b"", ""d3bj2b"", ""d3mzero2b"", ""d3mbj2b"", ]),; (""nl"", [ ""nl"", ]),; (""mp2d"", [ ""dmp2"", ]),; (""dftd4"", [ ""d4bjeeqatm"", ]),; (""mctc-gcp"", [ ""3c"", ]),; (""gcp"", [ ""3c"", ]),; ]) # yapf: disable. def _capable_engines_for_disp()-> Dict[str, List[str]]:; """"""Invert _engine_can_do dictionary and check program detection. Returns a dictionary with keys all dispersion levels and values a list of all; capable engines, where the engine in the first element is available, if any are. """"""; try:; from qcengine.testing import _programs as _programs_qcng; except ModuleNotFoundError:; # _programs_qcng is up-to-date with current harnesses but it requires pytest present, so let's provide a workaround; from qcelemental.util import which, which_import; _programs_qcng = {; ""dftd3"": which(""dftd3"", return_bool=True),; ""dftd4"": which_import(""dftd4"", return_bool=True),; ""s-dftd3"": which_import(""dftd3"", return_bool=True),; ""mctc-gcp"": which(""mctc-gcp"", return_bool=True),; ""gcp"": which(""gcp"", return_bool=True),; ""mp2d"": which(""mp2d"", return_bool=True),; }. programs_disp = {k: v for k, v in _programs_qcng.items() if k in _engine_can_do}; programs_disp[""libdisp""] = True; programs_disp[""nl""] = True. capable = collections.defaultdict(list); capable_sorted_by_available = collections.defaultdict(list); for eng, disps in _engine_can_do.items():; for disp in disps:; capable[disp].append(eng); for disp, engines in capable.items():; capable_sorted_by_available[disp] = sorted(engines, key=lambda x: (not programs_disp[x], x)). return capable_sorted_by_available. [docs]; class EmpiricalDispersion():; """"""Lightweight unif",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/procrouting/empirical_dispersion.html:2261,test,testing,2261,psi4manual/1.8.x/_modules/psi4/driver/procrouting/empirical_dispersion.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/_modules/psi4/driver/procrouting/empirical_dispersion.html,2,['test'],['testing']
Testability,"mport time. import numpy as np. import psi4; try:; from ipi.interfaces.clients import Client; ipi_available = True; except ImportError:; ipi_available = False. # Define Client to enable testing of the Broker in the unittests; class Client():; pass. class IPIBroker(Client):; def __init__(self, LOT, options=None, serverdata=False, molecule=None):; self.serverdata = serverdata; if not ipi_available:; psi4.core.print_out(""i-pi is not available for import: ""); psi4.core.print_out(""The broker infrastructure will not be available!\n""); super(IPIBroker, self).__init__(); elif serverdata:; mode, address, port = serverdata.split("":""); mode = mode.lower(); super(IPIBroker, self).__init__(address=address, port=port, mode=mode); else:; super(IPIBroker, self).__init__(_socket=False); self.LOT = LOT; self.options = options if options else {}. if molecule is None:; molecule = psi4.core.get_active_molecule(); self.initial_molecule = molecule; assert self.initial_molecule.orientation_fixed(), ""Orientation must be fixed!""; assert self.initial_molecule.point_group().symbol() == ""c1"", ""Symmetry must be 'c1'!"". names = [self.initial_molecule.symbol(i) for i in range(self.initial_molecule.natom())]; psi4.core.print_out(""Initial atoms %s\n"" % names); self.atoms_list = names. psi4.core.print_out(""Psi4 options:\n""); for item, value in self.options.items():; psi4.core.print_out(""%s %s\n"" % (item, value)); psi4.core.set_global_option(item, value); psi4.core.IO.set_default_namespace(""xwrapper""). self.timing = {}. atoms = np.array(self.initial_molecule.geometry()); psi4.core.print_out(""Initial atoms %s\n"" % atoms); psi4.core.print_out(""Force:\n""); self._positions = atoms; self._callback = self.callback; self._nat = np.int32(len(atoms)). def calculate_force(self, pos=None, **kwargs):; """"""Fetch force, energy of PSI. Arguments:; - pos: positions of the atoms as array. If None, the positions of the current active; molecule is used.; """"""; if pos is None:; molecule = psi4.core.get_active_molecule(); po",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/ipi_broker.html:2134,assert,assert,2134,psi4manual/1.6.x/_modules/psi4/driver/ipi_broker.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/ipi_broker.html,2,['assert'],['assert']
Testability,"mport(""basis_set_exchange"", return_bool=True),; ""einsums"": _CMake_to_Py_boolean(""OFF""),; ""gauxc"": _CMake_to_Py_boolean(""OFF""),; }. def addons(request: str = None) -> Union[bool, List[str]]:; """"""Returns boolean of whether Add-On *request* is available to Psi4,; either compiled in or searchable in $PSIPATH:$PATH, as relevant. If; *request* not passed, returns list of available Add-Ons: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...` . """"""; def strike(text):; if os.name == ""nt"":; # Windows has a probably correctable problem with unicode, but I can't iterate it quickly, so use tilde for strike.; # UnicodeEncodeError: 'charmap' codec can't encode character '\u0336' in position 3: character maps to <undefined>; return ""~"" + text + ""~""; else:; return ''.join(itertools.chain.from_iterable(zip(text, itertools.repeat('\u0336')))). if request is None:; return [(k if v else strike(k)) for k, v in sorted(_addons_.items())]; return _addons_[request.lower()]. # Testing; def test(extent: str = ""full"", extras: List = None) -> int:; """"""Runs a test suite through pytest. Parameters; ----------; extent; {'smoke', 'quick', 'full', 'long'}; All choices are defined, but choices may be redundant in some projects. * _smoke_ will be minimal ""is-working?"" test(s).; * _quick_ will be as much coverage as can be got quickly, approx. 1/3 tests.; * _full_ will be the whole test suite, less some exceedingly long outliers.; * _long_ will be the whole test suite.; extras; Additional arguments to pass to `pytest`. Returns; -------; int; Return code from `pytest.main()`. 0 for pass, 1 for fail. """"""; try:; import pytest; except ImportError:; raise RuntimeError('Testing module `pytest` is not installed. Run `conda install pytest`'); abs_test_dir = os.path.sep.join([os.path.abspath(os.path.dirname(__file__)), ""tests""]). command = ['-rws', '-v', '--color', 'yes']; if extent.lower() == 'smoke':; command.extend(['-m', 'smoke']); elif extent.lower() == 'quick':; command.extend(['-m', 'quick or smoke']); elif extent.lower()",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/_modules/psi4/extras.html:6486,test,test,6486,psi4manual/master/_modules/psi4/extras.html,https://psicode.org,https://psicode.org/psi4manual/master/_modules/psi4/extras.html,5,"['Test', 'test']","['Testing', 'test']"
Testability,"mputed, label=None, *, atol=1e-06, rtol=1e-16, forgive=None, equal_phase=False, quiet=False, return_message=False, return_handler=None)[source]; Recursively compares nested structures such as dictionaries and lists. Parameters:. expected (Union[Dict, BaseModel, ProtoModel]) – Reference value against which computed is compared.; Dict may be of any depth but should contain Plain Old Data.; computed (Union[Dict, BaseModel, ProtoModel]) – Input value to compare against expected.; Dict may be of any depth but should contain Plain Old Data.; atol (float) – Absolute tolerance (see formula below).; label (str) – Label for passed and error messages. Defaults to calling function name.; rtol (float) – Relative tolerance (see formula below). By default set to zero so atol dominates.; forgive (List[str]) – Keys in top level which may change between expected and computed without triggering failure.; equal_phase (Union[bool, List]) – Compare computed or its opposite as equal.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Callable) – . Return type:; Union[bool, Tuple[bool, str]]. Returns:. allclose (bool) – Returns True if expected and computed are equal within tolerance; False otherwise.; message (str) – When return_message=True, also return passed or error message. Notes; absolute(computed - expected) <= (atol + rtol * absolute(expected)). psi4.compare_vectors(expected, computed, atol_exponent, label[, *, check_name=False, **kwargs]). psi4.compare_vectors(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Vector objects.; Compares Vector properties of name (optional through check_name), nirrep, and dimension of each irrep.; For comparing actual numerical contents, the vectors are serialized to NumPy array format and passed to qcelemental.testing.compare_recursive().; Handles both Psi4-style signatures ((expected, computed, atol_exponent, label); see atol_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.8.x/add_tests.html:20799,log,log,20799,psi4manual/1.8.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.8.x/add_tests.html,1,['log'],['log']
Testability,"mputed, label=None, *, atol=1e-06, rtol=1e-16, forgive=None, equal_phase=False, quiet=False, return_message=False, return_handler=None)[source]¶; Recursively compares nested structures such as dictionaries and lists. Parameters. expected (Union[Dict, BaseModel, ProtoModel]) – Reference value against which computed is compared.; Dict may be of any depth but should contain Plain Old Data.; computed (Union[Dict, BaseModel, ProtoModel]) – Input value to compare against expected.; Dict may be of any depth but should contain Plain Old Data.; atol (float) – Absolute tolerance (see formula below).; label (str) – Label for passed and error messages. Defaults to calling function name.; rtol (float) – Relative tolerance (see formula below). By default set to zero so atol dominates.; forgive (List[str]) – Keys in top level which may change between expected and computed without triggering failure.; equal_phase (Union[bool, List]) – Compare computed or its opposite as equal.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Callable) – . Return type; Union[bool, Tuple[bool, str]]. Returns. allclose (bool) – Returns True if expected and computed are equal within tolerance; False otherwise.; message (str) – When return_message=True, also return passed or error message. Notes; absolute(computed - expected) <= (atol + rtol * absolute(expected)). psi4.compare_vectors(expected, computed, atol_exponent, label[, *, check_name=False, **kwargs]). psi4.compare_vectors(expected, computed[, label, *, check_name=False, **kwargs])¶; Comparison function for psi4.core.Vector objects.; Compares Vector properties of name (optional through check_name), nirrep, and dimension of each irrep.; For comparing actual numerical contents, the vectors are serialized to NumPy array format and passed to qcelemental.testing.compare_recursive().; Handles both Psi4-style signatures ((expected, computed, atol_exponent, label); see atol_ex",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:20930,log,log,20930,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,1,['log'],['log']
Testability,"mpy as np. import psi4; try:; from ipi.interfaces.clients import Client; ipi_available = True; except ImportError:; ipi_available = False. # Define Client to enable testing of the Broker in the unittests; class Client():; pass. [docs]class IPIBroker(Client):; """"""Interface implementation between i-PI (https://ipi-code.org/) and |PSIfour|."""""". def __init__(self, LOT, options=None, serverdata=False, molecule=None):; self.serverdata = serverdata; if not ipi_available:; psi4.core.print_out(""i-pi is not available for import: ""); psi4.core.print_out(""The broker infrastructure will not be available!\n""); super(IPIBroker, self).__init__(); elif serverdata:; mode, address, port = serverdata.split("":""); mode = mode.lower(); super(IPIBroker, self).__init__(address=address, port=port, mode=mode); else:; super(IPIBroker, self).__init__(_socket=False); self.LOT = LOT; self.options = options if options else {}. if molecule is None:; molecule = psi4.core.get_active_molecule(); self.initial_molecule = molecule; assert self.initial_molecule.orientation_fixed(), ""Orientation must be fixed!""; assert self.initial_molecule.point_group().symbol() == ""c1"", ""Symmetry must be 'c1'!"". names = [self.initial_molecule.symbol(i) for i in range(self.initial_molecule.natom())]; psi4.core.print_out(""Initial atoms %s\n"" % names); self.atoms_list = names. psi4.core.print_out(""Psi4 options:\n""); for item, value in self.options.items():; psi4.core.print_out(""%s %s\n"" % (item, value)); psi4.core.set_global_option(item, value); psi4.core.IO.set_default_namespace(""xwrapper""). self.timing = {}. atoms = np.array(self.initial_molecule.geometry()); psi4.core.print_out(""Initial atoms %s\n"" % atoms); psi4.core.print_out(""Force:\n""); self._positions = atoms; self._callback = self.callback; self._nat = np.int32(len(atoms)). def calculate_force(self, pos=None, **kwargs):; """"""Fetch force, energy of PSI. Arguments:; - pos: positions of the atoms as array. If None, the positions of the current active; molecule is used.;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/ipi_broker.html:2231,assert,assert,2231,psi4manual/1.7.x/_modules/psi4/driver/ipi_broker.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/ipi_broker.html,2,['assert'],['assert']
Testability,"ms. mom-h2o-4; MOM excitation from LUMO HOMO+4. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. matrix2; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. opt16; SCF 6-31G(d) optimization of TS for HCN to HNC Performs finite difference hessian calculation. Then optimizes using previous orbitals for scf guess, in subsequent calculations. The last two displacements of the hessian break the plane of symemtry, This test confirms that only the reference geometry, with the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. nbody-vmfc-hessian; Computation of VMFC-corrected water trimer Hessian (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. extern4; External potential calculation involving a TIP3P water and a QM water. Gradient on the external charges is compared to gradient on the QM atoms to validate the gradient on the charges. tdscf-7; TD-HF test variable access. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mom-h2o-3; MOM excitation from LUMO HOMO+3. pywrap-bfs; apply lin",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:16457,test,test,16457,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"multaneous solution of the response equations for the analytic gradient. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. opt2; SCF DZ allene geometry optimzation, with Cartesian input. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest state of H2O+ (A1 excitation). cc54; CCSD dipole with user-specified basis set. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. cc16; UHF-B-CCD(T)/cc-pVDZ CH2 single-point energy (fzc, MO-basis ). sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf3; are specified explicitly. dftd3-energy; Exercises the various DFT-D corrections, both through python directly and through c++. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html:9952,test,testing,9952,psi4manual/4.0b3/autodoc_testsuite-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/autodoc_testsuite-1.html,4,['test'],['testing']
Testability,"n (GRAC) test. mbis-5; MBIS calculation on ZnO. soscf-large; Second-order SCF convergnece: Benzene. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. cc13c; Tests RHF CCSD(T)gradients. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). pywrap-align; apply linear fragmentation algorithm to a water cluster. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. fnocc6; Test method/basis with disk_df. isapt-charged; This test case shows an example of running the I-SAPT0/aug-cc-pVDZ computation for a positively charged system, illustrating the cation-pi interaction. The SIAO1 link partitioning algorithm is used. The system is taken from http://dx.doi.org/10.1016/j.comptc.2014.02.008. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa-module; routing check on lccd, lccsd, cepa(0). dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. ao-casscf-sp; CASSCF/6-31G** energy ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:37635,test,test,37635,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"n PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of other orbital basis sets available in PSI4. Karlsruhe; other. no diffuse; augmented;  . def2-SV(P);  ; DZP. def2-SVP; def2-SVPD; TZ2P. def2-TZVP; def2-TZVPD; TZ2PF. def2-TZVPP; def2-TZVPPD; Sadlej-LPol-ds. def2-QZVP; def2-QZVPD; Sadlej-LPol-dl. def2-QZVPP; def2-QZVPPD; Sadlej-LPol-fs.  ;  ; Sadlej-LPol-fl. Footnotes. [1]Absolutely no commas are allowed in basis set specification. Use the underscore character instead. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; Psithon: Structuring an Input File; Next topic; Theoretical Methods: SCF to FCI; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta3] » . © Copyright 2012, The Psi4 Project.; Last updated on Oct 16, 2012.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b3/basissets-1.html:6512,stub,stub,6512,psi4manual/4.0b3/basissets-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b3/basissets-1.html,8,['stub'],"['stub', 'stubXZ-JKFIT']"
Testability,"n PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of other orbital basis sets available in PSI4. Karlsruhe; other. no diffuse; augmented;  . def2-SV(P);  ; DZP. def2-SVP; def2-SVPD; TZ2P. def2-TZVP; def2-TZVPD; TZ2PF. def2-TZVPP; def2-TZVPPD; Sadlej-LPol-ds. def2-QZVP; def2-QZVPD; Sadlej-LPol-dl. def2-QZVPP; def2-QZVPPD; Sadlej-LPol-fs.  ;  ; Sadlej-LPol-fl. Footnotes. [1]Absolutely no commas are allowed in basis set specification. Use the underscore character instead. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; Psithon: Structuring an Input File; Next topic; Theoretical Methods: SCF to FCI; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » . © Copyright 2013, The Psi4 Project.; Last updated on Apr 25, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/basissets-1.html:6512,stub,stub,6512,psi4manual/4.0b4/basissets-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/basissets-1.html,8,['stub'],"['stub', 'stubXZ-JKFIT']"
Testability,"n PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56;  . cc-pCVXZ-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-RI;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . cc-pwCV(X+d)Z-RI; DTQ5;  ; 5; Q5; TQ5; DTQ5; DTQ5; DTQ5;  . Summary of Dunning dual-basis helper basis sets available in PSI4. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ;  ;  ;  ;  ;  ; TQ; DTQ;  . cc-pV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCVXZ-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . cc-pwCV(X+d)Z-DUAL;  ;  ;  ;  ;  ;  ;  ;  ;  . Summary of other orbital basis sets available in PSI4. Karlsruhe; other. no diffuse; augmented;  . def2-SV(P);  ; DZP. def2-SVP; def2-SVPD; TZ2P. def2-TZVP; def2-TZVPD; TZ2PF. def2-TZVPP; def2-TZVPPD; Sadlej-LPol-ds. def2-QZVP; def2-QZVPD; Sadlej-LPol-dl. def2-QZVPP; def2-QZVPPD; Sadlej-LPol-fs.  ;  ; Sadlej-LPol-fl. Footnotes. [1]Absolutely no commas are allowed in basis set specification. Use the underscore character instead. [2](1, 2, 3, 4, 5, 6) The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3](1, 2, 3) The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-fuctions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]D has or d.; T has or f.; Q has or g, etc. Previous topic; Psithon: Structuring an Input File; Next topic; Theoretical Methods: SCF to FCI; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta5] » . © Copyright 2013, The Psi4 Project.; Last updated on Jul 08, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/basissets-1.html:6512,stub,stub,6512,psi4manual/4.0b5/basissets-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/basissets-1.html,8,['stub'],"['stub', 'stubXZ-JKFIT']"
Testability,"n `git remote -v` points to github.com/psi4/psi4.git; >>> git fetch upstream 'refs/tags/*:refs/tags/*'; >>> make; # version healed. How to fix “cannot import name ‘core’ from {top-level-psi4-dir}¶; First, what’s happening? sys.path (where modules can be imported from in python) starts with ''. If you export PYTHONPATH={objdir}/stage/{prefix}/lib/{pymod_lib_dir}:$PYTHONPATH to make PsiAPI easy, that inserts starting in pos’n 1 (0-indexed), so '' still at the head of sys.path. Now, if you try to run a psiapi/python file from {top-level-psi4-dir} that contains import psi4, it will find the source tree psi4/__init__.py and fail because there’s no core.so around. That is, it’s finding what looks to be the psi4 module dir structure . when the one it wants is what you inserted into PYTHONPATH at pos’n 1.; The way around this is to move the python file you’re running to any other directory. Or, within the file, do sys.path.insert(0, {objdir}/stage/{prefix}/lib/{pymod_lib_dir}. How to find tests without output.ref¶; Ideally, each new test or much-altered test should add its own; output.ref. When that doesn’t happen, this command helps.; find tests/ -mindepth 1 -maxdepth 1 -type d '!' -exec test -e ""{}/output.ref"" "";"" -print. How to do GitHub issue management and code review¶. Anyone, core-dev or not, is encouraged to review PRs. It’s actually good practice for interacting with other open-source projects, where you don’t have the advantage of knowing or working with the contributors. Before venturing into projects on GitHub where you don’t know the maintainers, it doesn’t hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ .; Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged.; Approving before CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn’t.; All main branches (master and 1.N.x maintenance) are ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/manage_git-1.html:8039,test,tests,8039,psi4manual/1.4.0/manage_git-1.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/manage_git-1.html,9,['test'],['tests']
Testability,"n basis set. fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. An F-SAPT partitioning follows I-SAPT. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dft-jk; DFT JK on-disk test. cubeprop-esp; RHF orbitals and density for water. cbs-delta-energy; Extrapolated energies with delta correction. dfcasscf-sp; CASSCF/6-31G** energy point. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. dforemp-grad1; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O molecule. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. cc12; Single point energies of multiple excited states with EOM-CCSD. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. scf-ecp2; Water-Argon complex with ECP present; check of RHF Hessian. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. mbis-3; MBIS calculation on OH radical. dfccsdat2; DF-A-CCSD(T) cc-pVDZ energy for the NH molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:32266,test,test,32266,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"n case and excitation level will be printed. Type: integer; Default: 15. CFOUR_OCCUPATION (CFOUR); CFOUR — Specifies the orbital occupanc of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. If the reference function is for an open-shell system, two strings of NIRREP occupation numbers separated by a slash are input for the and sets of orbitals. An example of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (whitespace-tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR); CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that v",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html:59760,log,logical,59760,psi4manual/1.0.0/autodoc_glossary_options_c-1.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/autodoc_glossary_options_c-1.html,2,['log'],['logical']
Testability,"n et al., JCP 104, 8007 (1996). mom-h2o-3; MOM excitation from LUMO HOMO+3. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. fsapt-ext-abc; FSAPT with external charge on trimer. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. mp2-h; check that methods can act on single atom. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. mp2-1; All-electron MP2 6-31G** geometry optimization of water. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dct12; Spin-restricted DC-06 counterpart of dct1. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. cc12; Single po",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:18367,test,test,18367,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"n failure. Deep down, they’re NumPy functions.; In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, etc..; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for compare_values() and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, etc.).; Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. Adding PSIthon Test Cases¶; To create a new test case, first make a folder in psi4/tests or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in psi4/tests/CMakeLists.txt or, for an addon, tests/<addon>/CMakeLists.txt.; The test directory will need at least two files, CMakeLists.txt and input.dat. CMakeLists.txt¶; This file adds the test case to the suite. It should have at least the following two uncommented lines:; include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ctest -L label purposes. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test f",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:4724,test,test,4724,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,10,['test'],"['test', 'tests']"
Testability,"n failure. Used in input files in the test suite. """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); raise TestComparisonError(message); success(label). [docs]def compare_strings(expected, computed, label):; """"""Function to compare two strings. Prints :py:func:`util.success`; when string *computed* exactly matches string *expected*.; Performs a system exit on failure. Used in input files in the test suite. """"""; if(expected != computed):; message = (""\t%s: computed value (%s) does not match (%s)."" % (label, computed, expected)); raise TestComparisonError(message); success(label). [docs]def compare_matrices(expected, computed, digits, label):; """"""Function to compare two matrices. Prints :py:func:`util.success`; when elements of matrix *computed* match elements of matrix *expected* to; number of *digits*. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. """"""; if (expected.nirrep() != computed.nirrep()):; message = (""\t%s has %d irreps, but %s has %d\n."" % (expected.name(), expected.nirrep(), computed.name(), computed.nirrep())); raise TestComparisonError(message); if (expected.symmetry() != computed.symmetry()):; message = (""\t%s has %d symmetry, but %s has %d\n."" % (expected.name(), expected.symmetry(), computed.name(), computed.symmetry())); raise TestComparisonError(message); nirreps = expected.nirrep(); symmetry = expected.symmetry(); for irrep in range(nirreps):; if(expected.rows(irrep) != computed.rows(irrep)):; message = (""\t%s has %d rows in irrep %d, but %s has %d\n."" % (expected.name(), expected.rows(irrep), irrep, computed.name(), computed.rows(irrep))); raise TestComparisonError(message); if(expected.cols(irrep ^ symmetry) != computed.cols(irrep ^ symmetry)):; message = (""\t%s has %d columns in irrep, but %s has %d\n."" % (expected.name(), expected.cols(irrep), irrep, computed.name(), computed.cols(irrep)",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html:5449,test,test,5449,psi4manual/1.0.0/_modules/p4util/util.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/p4util/util.html,1,['test'],['test']
Testability,"n is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. HTBH¶. Database (Truhlar) of hydrogen-transfer barrier height reactions.; Geometries from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/raw_geom.cgi (broken link).; Reference energies from Zhao et al. JPCA, 109 2012-2018 (2005) doi: 10.1021/jp045141s [in supporting information]. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecul",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_available_databases.html:10903,test,testing,10903,psi4manual/1.6.x/autodoc_available_databases.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_available_databases.html,2,['test'],['testing']
Testability,"n it. The job will be trivial in\n"""""" % (dbse); instructions += """""" length and give summary results for the database in its output file.\n\n""""""; instructions += """""" psi4 -i %-27s -o %-27s\n\n"""""" % (dbse + '-master.in', dbse + '-master.out'); instructions += """""" Alternatively, a single-job execution of the database may be accessed through\n""""""; instructions += """""" the database wrapper option mode='continuous'.\n\n""""""; psi4.print_out(instructions). fmaster = open('%s-master.in' % (dbse), 'w'); fmaster.write('# This is a psi4 input file auto-generated from the database() wrapper.\n\n'); fmaster.write(""database('%s', '%s', mode='reap', cp='%s', rlxd='%s', zpe='%s', benchmark='%s', linkage=%d, subset=%s, tabulate=%s)\n\n"" %; (name, db_name, db_cp, db_rlxd, db_zpe, db_benchmark, os.getpid(), HRXN, db_tabulate)); fmaster.close(). # Loop through chemical systems; ERGT = {}; ERXN = {}; VRGT = {}; VRXN = {}; for rgt in HSYS:; VRGT[rgt] = {}. # extra definition of molecule so that logic in building commands string has something to act on; exec(p4util.format_molecule_for_input(GEOS[rgt])); molecule = psi4.get_active_molecule(). # build string of title banner; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""p4util.banner(' Database %s Computation: Reagent %s \\n %s')\n"""""" % (db_name, rgt, TAGL[rgt]); banners += """"""psi4.print_out('\\n')\n\n"""""". # build string of lines that defines contribution of rgt to each rxn; actives = ''; actives += """"""psi4.print_out(' Database Contributions Map:\\n %s\\n')\n"""""" % ('-' * 75); for rxn in HRXN:; db_rxn = dbse + '-' + str(rxn); if rgt in ACTV[db_rxn]:; actives += """"""psi4.print_out(' reagent %s contributes by %.4f to reaction %s\\n')\n"""""" \; % (rgt, RXNM[db_rxn][rgt], db_rxn); actives += """"""psi4.print_out('\\n')\n\n"""""". # build string of commands for options from the input file TODO: handle local options too; commands = ''; commands += """"""\npsi4.set_memory(%s)\n\n"""""" % (user_memory); for chgdopt in psi4.get_global_option_lis",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html:40333,log,logic,40333,psi4manual/4.0b5/_modules/wrappers.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/_modules/wrappers.html,2,['log'],['logic']
Testability,"n multiple instances of DETCI in a single input, without an intervening clean() call. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbody-he-4b; MP2/aug-cc-pvDZ many body energies of an arbitrary Helium complex, addressing 4-body formulas. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-guess-read3; Test if the the guess read in the same basis converges. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. cbs-xtpl-func; optimization with method defined via cbs. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitio",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html:16599,test,test,16599,psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/autodoc_testsuite_corepsi4.html,4,['test'],['test']
Testability,"n of H2O2. gauge = both, omega = (589 355 nm). scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. scf-level-shift-rohf; SCF level shift on an ROHF computation. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. pubchem2; Superficial test of PubChem interface. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. cbs-xtpl-dict; Extrapolated water energies. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. nbody-cp-gradien",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:43803,test,test,43803,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"n refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI¶; In designing a test, sometimes you want it to be a model input for the user in a single file or you don’t want a lot of psi4. or Python syntax cluttering the input.; In this case, follow Adding PSIthon Test Cases to prepare as PSIthon (psi4 input.dat) for, roughly speaking, running through ctest.; The PSIthon/CTest test suite occupies the whole of psi4/tests except psi4/tests/pytests.; At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow Adding PsiAPI Test Cases to prepare as PsiAPI (import psi4) for, roughly speaking, running through pytest.; The PsiAPI/pytest test suite occupies psi4/tests/pytests.; The above description sounds as if there are two disjoint test suites, and you have to run both ctest and pytest to fully test PSI4.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don’t know to run both; and (2) there are important tests in the PSIthon suite that can’t be run on a PSI4 installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (test_input.py), PSIthon tests can also be run through pytest.; This hasn’t rolled out to all ~500 PSIthon tests (help wanted), but eventually PSI4 can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it’s a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents¶. Most PSI4 tests will be integration tests focusing on non-regression of user",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:2060,test,test,2060,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,10,['test'],['test']
Testability,"n same strand). S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; 'S22B' Marshall et al. JCP 135 194102 (2011). subset; 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22. HTBH¶. Database (Truhlar) of hydrogen-transfer barrier height reactions.; Geometries from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/raw_geom.cgi .; Reference energies from Zhao et al. JPCA, 109 2012-2018 (2005) doi: 10.1021/jp045141s [in supporting information]. cp 'off'; rlxd 'off'; subset; 'small'; 'large'. NCB31¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark; '<benchmark_name>' <Reference>.; '<default_benchmark_name>' <Reference>. subset; 'small'; 'large'; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6'; 'WI7' weakly interacting; 'PPS5'. Table Of Contents. BAKERJCC96; ACENES; NBC10; S22by5; BENCH12; RSE42; BAKERJCC93; RGC10; S66; CORE; BASIC; NHTBH; HBC6; HSG; JSCH; S22; HTBH; NCB31. Previous topic; Database; Next topic; Complete Basis Set; This Page. Show Source. Quick search. Enter search terms or a module, class or function name.; . Navigation. index. modules    . toc    . next    . previous    ; PSI4 [beta4] » ; Psithon Functions: Invoking a Calculation »; Database ». © Copyright 2013, The Psi4 Project.; Last updated on Apr 05, 2013.; Created using Sphinx 1.1.3.; . ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b4/autodoc_available_databases-1.html:8754,benchmark,benchmark,8754,psi4manual/4.0b4/autodoc_available_databases-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b4/autodoc_available_databases-1.html,2,['benchmark'],['benchmark']
Testability,"n the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don’t know to run both; and (2) there are important tests in the PSIthon suite that can’t be run on a PSI4 installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (test_input.py), PSIthon tests can also be run through pytest.; This hasn’t rolled out to all ~500 PSIthon tests (help wanted), but eventually PSI4 can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it’s a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents¶. Most PSI4 tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite.; Most tests should store reference results (from literature or another implementation or a carefully run PSI4 calculation),; run quantum chemistry, then apply one or more of the Comparison Functions so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, compare_matrices(refmat, mat, ...) while in the latter it’s asserted, like assert compare_matrices(refmat, mat, ...).; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they’re NumPy functions.; In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, an",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:3139,test,tests,3139,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,10,['test'],"['test', 'tests']"
Testability,"n the two hydroxyl groups). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. nbo; Generation of NBO file. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. mbis-5; MBIS calculation on ZnO. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. fd-gradient; SCF STO-3G finite-difference tests. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. options1; check all variety of options parsing. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:37880,test,tests,37880,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['tests']
Testability,"n the; following while replacing myplugin with the name of your great code.; If the name you provide is not valid, PSI4 will complain.; >>> psi4 --new-plugin myplugin. PSI4 will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is cd into the directory and type make.; PSI4 comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs:; >>> psi4 --new-plugin myplugin +aointegrals; >>> psi4 --new-plugin myplugin +mointegrals; >>> psi4 --new-plugin myplugin +sointegrals; >>> psi4 --new-plugin myplugin +wavefunction. Several stable sample plugin directories are available to consult in the; psi4/tests directory. Other plugin directories can be used as models; but are in active development. For documentation on plugin modules, see; Available Plugins. psi4/tests/plugin_aointegrals/aointegrals.cc.in; An example that uses the LibMints library to generate and print AO basis (no symmetry) integrals.; psi4/tests/plugin_backtrans/backtrans.cc.in; A test of the one- and two-particle density matrix backtransformation code.; psi4/tests/plugin_ccsort/plugin_ccsort.cc.in; psi4/tests/plugin_mointegrals/mointegrals.cc.in; An example that uses the LibTrans library to generate and print MO basis integrals.; psi4/tests/plugin_mp2/plugin_mp2.cc.in; A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; psi4/tests/plugin_sointegrals/sointegrals.cc.in; An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. Files in a Plugin Directory¶; In addition to the main myplugin.cc file, a fresh plugin directory contains the following files. Makefile — Makefile for the directory. As long as you are the; only user of the plugin, this should not need editing. After any change to; the plugin C++ code, make must be run ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b2/plugins-1.html:3377,test,tests,3377,psi4manual/4.0b2/plugins-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b2/plugins-1.html,2,['test'],['tests']
Testability,"n to return a copy of the Table object. format_label()[source]¶; Function to pad the width of Table object labels. format_values(values)[source]¶; Function to pad the width of Table object data cells. save(file)[source]¶; Function to save string of the Table object to file. scale(Factor=627.5095)[source]¶; Function to apply a scaling factor Factor to the; data of the Table object. banner(text, type=1, width=35)[source]¶; Function to print text to output file in a banner of; minimum width width and minimum three-line height for; type = 1 or one-line height for type = 2. print_stderr(stuff)[source]¶; Function to print stuff to standard error stream. print_stdout(stuff)[source]¶; Function to print stuff to standard output stream. Module with utility functions for use in input files. compare_integers(expected, computed, label)[source]¶; Function to compare two integers. Prints util.success(); when value computed matches value expected.; Performs a system exit on failure. Used in input files in the test suite. compare_matrices(expected, computed, digits, label)[source]¶; Function to compare two matrices. Prints util.success(); when elements of matrix computed match elements of matrix expected to; number of digits. Performs a system exit on failure to match symmetry; structure, dimensions, or element values. Used in input files in the test suite. compare_strings(expected, computed, label)[source]¶; Function to compare two strings. Prints util.success(); when string computed exactly matches string expected.; Performs a system exit on failure. Used in input files in the test suite. compare_values(expected, computed, digits, label)[source]¶; Function to compare two values. Prints util.success(); when value computed matches value expected to number of digits.; Performs a system exit on failure. Used in input files in the test suite. compare_vectors(expected, computed, digits, label)[source]¶; Function to compare two vectors. Prints util.success(); when elements of vector compu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/4.0b5/autodoc_driver-1.html:34692,test,test,34692,psi4manual/4.0b5/autodoc_driver-1.html,https://psicode.org,https://psicode.org/psi4manual/4.0b5/autodoc_driver-1.html,2,['test'],['test']
Testability,"n underscore; to indicate spaces, use a hyphen instead. This directory will need two files. The first is CMakeLists.txt, which is necessary to add the test case to the suite. This file should have the following lines:; 1; 2; 3include(TestingMacros). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). The labels specify which groups of tests include the test case. The psi label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; A test requiring over 15 minutes should be labeled longtests. A short test used for general bug checking should be labeled quicktests. A test that confirms PSI4 is operational should be labeled smoketests.; The other necessary file is the input file itself, input.dat. The input file should be just a simple input file to run the test, with small modifications.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25#! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy('rhf'). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, get_variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the #! comment marker). This should be very descriptive since it is inlined into the manual (unless !nosample is present in this comment) as a s",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/add_tests-1.html:1265,test,test,1265,psi4manual/1.2.1/add_tests-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/add_tests-1.html,4,['test'],['test']
Testability,"n version]; Libint — [what is this?] [min version]; Libxc — [what is this?] [min version]; pybind11 — [what is this?] [min version]; QCElemental — [what is this?]. Additionally, there are runtime-only dependencies:. NumPy http://www.numpy.org/; networkx https://github.com/networkx/networkx; deepdiff https://github.com/seperman/deepdiff; pint https://pint.readthedocs.io/en/latest/; pydantic (depending on your QCElemental version) https://pydantic-docs.helpmanual.io/#. What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing; CTest http://www.cmake.org/download/; Perl (for some coupled-cluster CTest tests) http://perl.org; pytest (for installed testing) http://doc.pytest.org/en/latest/. PSI4 Documentation (available pre-built at http://www.psicode.org/psi4manual/master/index.html); Sphinx (1.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) http://perl.org; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. CheMPS2 — [what is this?] [min version]; HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. dkh — [what is this?] [min version]; Fortran Compiler. gdma — [what is this?] [min version]; Fortran Compiler. PCMSolver — [what is this?]; Fortran Compiler; zlib http://www.zlib.net/. simint — [what is this?] [min version]. Additionally, there are runtime-loaded capabilities:. PylibEFP & libefp — [what is this?] [min version]; cfour — [what is this?]; dftd3 — [what is this?]; gcp — [what is this?]; mrcc — [what is this?]; v2rdm_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/build_planning-1.html:5863,test,testing,5863,psi4manual/1.3.2/build_planning-1.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/build_planning-1.html,2,['test'],['testing']
Testability,"n with subset, is not included here for consideration of space; and may be found in the database file. The database Python files are very; readable and should be consulted for more particular questions. BBI¶. Database (Merz) of protein backbone-backbone interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from Sherrill group, Georgia Tech.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BAKERJCC96¶. Geometries from Baker and Chan J. Comput. Chem. 17 888 (1996),. as reported in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002). No reference energies defined. cp 'off'; rlxd 'off'. S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark; 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; \(\Rightarrow\) 'S22B' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset; 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22; 'WATER' water dimer. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset; 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/db-1.html:12862,benchmark,benchmark,12862,psi4manual/1.2.1/db-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/db-1.html,6,['benchmark'],['benchmark']
Testability,"n wrappers are layered.; mc_level_idx; Position in field self.nbodies_per_mc_level used to obtain ``nbodies``, the list of n-body; levels (e.g., `[1]` or `[1, 2]` or `[""supersystem""]`) to which the modelchem specified in **kwargs** applies.; That is, `nbodies = self.nbodies_per_mc_level[mc_level_idx]`.; Note the natural 1-indexing of ``nbodies`` _contents_, so `[1]` covers one-body contributions.; The corresponding user label is the 1-indexed counterpart, `mc_level_lbl = mc_level_idx + 1`; Formerly nlevel as in `nbody = self.nbody_list[nbody_level=nlevel]`.; kwargs; Other arguments for initializing **mb_computer**. In particular, specifies model chemistry. Returns; -------; count : int; Number of new tasks planned by this call.; Formerly, didn't include supersystem in count. """"""; # Get the n-body orders for this level; nbodies = self.nbodies_per_mc_level[mc_level_idx]. info = ""\n"" + p4util.banner(f"" ManyBody Setup: N-Body Levels {nbodies}"", strNotOutfile=True) + ""\n""; core.print_out(info); logger.info(info). for kwg in ['dft_functional']:; if kwg in kwargs:; kwargs['keywords']['function_kwargs'][kwg] = kwargs.pop(kwg). count = 0; template = copy.deepcopy(kwargs). # Get compute list; if nbodies == [""supersystem""]:; # Add supersystem computation if requested -- always nocp; data = template; data[""molecule""] = self.molecule; key = f""supersystem_{self.nfragments}""; self.task_list[key] = mb_computer(**data); count += 1. compute_dict = build_nbody_compute_list(; [""nocp""], list(range(1, self.max_nbody + 1)), self.nfragments, self.return_total_data; ); else:; compute_dict = build_nbody_compute_list(self.bsse_type, nbodies, self.nfragments, self.return_total_data). def labeler(item) -> str:; mc_level_lbl = mc_level_idx + 1; return str(mc_level_lbl) + ""_"" + str(item). # Add current compute list to the master task list; # * `pair` looks like `((1,), (1, 3))` where first is real (not ghost) fragment indices; # and second is basis set fragment indices, all 1-indexed; for nb in c",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_nbody.html:37474,log,logger,37474,psi4manual/1.7.x/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_nbody.html,8,['log'],['logger']
Testability,"n"""""".format(; label, digits_str, xptd_str, cptd_str, diff_str; ). return return_handler(allclose, label, message, return_message, quiet). def _rms(arr: np.ndarray) -> float:; return np.sqrt(np.mean(np.square(arr))). [docs]def compare(; expected: Union[int, bool, str, List[int], np.ndarray],; computed: Union[int, bool, str, List[int], np.ndarray],; label: str = None,; *,; equal_phase: bool = False,; quiet: bool = False,; return_message: bool = False,; return_handler: Callable = None,; ) -> Union[bool, Tuple[bool, str]]:; r""""""Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters; ----------; expected; int, bool, str or array-like of same.; Reference value against which `computed` is compared.; computed; int, bool, str or array-like of same.; Input value to compare against `expected`.; label; Label for passed and error messages. Defaults to calling function name.; equal_phase; Compare computed *or its opposite* as equal.; quiet; Whether to log the return message.; return_message; Whether to return tuple. See below. Returns; -------; allclose : bool; Returns True if `expected` and `computed` are equal; False otherwise.; message : str; When return_message=True, also return passed or error message. Other Parameters; ----------------; return_handler; Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Notes; -----; * Akin to :func:`numpy.array_equal`.; * For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use :py:func:`compare_recursive`. """"""; label = label or sys._getframe().f_back.f_code.co_name; pass_message = f""\t{label:.<66}PASSED""; if return_handler is None:; return_handler = _handle_return. try:; xptd, cptd = np.array(expected), np.array(computed); except Exception:; return return_handler(False, label, f""""""\t{label}: inputs not cast-able to ndarray."""""", return_",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/qcelemental/testing.html:6402,log,log,6402,psi4manual/1.7.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/qcelemental/testing.html,2,['log'],['log']
Testability,"n"""""".format(; label, digits_str, xptd_str, cptd_str, diff_str; ). return return_handler(allclose, label, message, return_message, quiet). def _rms(arr: np.ndarray) -> float:; return np.sqrt(np.mean(np.square(arr))). [docs]def compare(; expected: Union[int, bool, str, List[int], np.ndarray],; computed: Union[int, bool, str, List[int], np.ndarray],; label: str = None,; *,; equal_phase: bool = False,; quiet: bool = False,; return_message: bool = False,; return_handler: Callable = None,; ) -> Union[bool, Tuple[bool, str]]:; r""""""Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters; ----------; expected; int, bool, str or array-like of same.; Reference value against which `computed` is compared.; computed; int, bool, str or array-like of same.; Input value to compare against `expected`.; label; Label for passed and error messages. Defaults to calling function name.; equal_phase; Compare computed *or its opposite* as equal.; quiet; Whether to log the return message.; return_message; Whether to return tuple. See below. Returns; -------; allclose : bool; Returns True if `expected` and `computed` are equal; False otherwise.; message : str; When return_message=True, also return passed or error message. Other Parameters; ----------------; return_handler; Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Notes; -----; * Akin to np.array_equal.; * For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use :py:func:`compare_recursive`. """"""; label = label or sys._getframe().f_back.f_code.co_name; pass_message = f""\t{label:.<66}PASSED""; if return_handler is None:; return_handler = _handle_return. try:; xptd, cptd = np.array(expected), np.array(computed); except Exception:; return return_handler(False, label, f""""""\t{label}: inputs not cast-able to ndarray."""""", return_message, qu",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html:6326,log,log,6326,psi4manual/1.6.x/_modules/qcelemental/testing.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/qcelemental/testing.html,2,['log'],['log']
Testability,"n"".format(h + 1, len(salc_indices_pi[h])); core.print_out(info); logger.info(info). # Now that we've printed the SALCs, clear any that are not of user-specified symmetry.; if freq_irrep_only != -1:; for h in range(n_irrep):; if h != freq_irrep_only:; salc_indices_pi[h].clear(). n_disp_pi = []. for irrep, indices in enumerate(salc_indices_pi):; n_disp = len(indices) * len(disps[""asym_irr"" if irrep != 0 else ""sym_irr""]); if mode == ""2_0"":; # Either len(indices) or len(indices)-1 is even, so dividing by two is safe.; n_disp += len(indices) * (len(indices) - 1) // 2 * len(disps[""off""]); n_disp_pi.append(n_disp). # Let's print out the number of geometries, the displacement multiplicity, and the CdSALCs!; if print_lvl and verbose:; info = f"" Number of geometries (including reference) is {sum(n_disp_pi) + 1}.\n""; if method_allowed_irreps != 0x1:; info += "" Number of displacements per irrep:\n""; for i, ndisp in enumerate(n_disp_pi, start=1):; info += f"" Irrep {i}: {ndisp}\n""; core.print_out(info); logger.info(info). if print_lvl > 1 and verbose:; for i in range(len(salc_list)):; salc_list[i].print_out(). data.update({; ""n_disp_pi"": n_disp_pi,; ""n_irrep"": n_irrep,; ""n_salc"": n_salc,; ""n_atom"": n_atom,; ""salc_list"": salc_list,; ""salc_indices_pi"": salc_indices_pi,; ""disps"": disps,; ""project_translations"": t_project,; ""project_rotations"": r_project; }). return data. def _geom_generator(mol: Union[""qcdb.Molecule"", core.Molecule], freq_irrep_only: int, mode: str, *, t_project: bool = True, r_project: bool = True, stencil_size: int = 3, step_size: float = 0.005) -> Dict:; """"""; Generate geometries for the specified molecule and derivative levels.; You probably want to instead use one of the convenience functions:; gradient_from_energies_geometries, hessian_from_energies_geometries,; hessian_from_gradients_geometries. Parameters; ----------; mol; The molecule on which to perform a finite difference calculation.; freq_irrep_only; The Cotton ordered irrep to get frequencies for. Choos",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html:11972,log,logger,11972,psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_findif.html,8,['log'],['logger']
Testability,"n):; """"""Error class for Psi.""""""; extras._success_flag_ = False; pass. [docs]class ValidationError(PsiException):; """"""Error called for problems with the input file. Prints; error message *msg* to standard output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); # print(""%s"" % repr(msg)); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class PsiImportError(PsiException):; """"""Error called for problems import python dependencies. Prints error message; *msg* to standard output stream and output file.; """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class TestComparisonError(PsiException):; """"""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class ConvergenceError(PsiException):; """"""Error called for problems with converging and iterative method. Parameters; ----------; eqn_description : str; Type of QC routine that has failed (e.g., SCF); iteration : int; What iteration we failed on. """""". def __init__(self, eqn_description, iteration):; msg = ""Could not converge %s in %d iterations."" % (eqn_description, iteration); PsiException.__init__(self, msg); self.iteration = iteration; self.message = msg; core.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class OptimizationConvergenceError(ConvergenceError):; """"""Error called for problems with geometry optimizer."""""". def __init__(self, eqn_description, iteration, wfn):; ConvergenceError.__init__(self, eqn_description, iteration); ",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/exceptions.html:2234,test,test,2234,psi4manual/1.3.2/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.3.2/_modules/psi4/driver/p4util/exceptions.html,1,['test'],['test']
Testability,"n):; """"""Error class for Psi.""""""; extras._success_flag_ = False; pass. [docs]class ValidationError(PsiException):; """"""Error called for problems with the input file. Prints; error message *msg* to standard output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); # print(""%s"" % repr(msg)); self.message = '\nPsiException: %s\n\n' % repr(msg). [docs]class ParsingError(PsiException):; """"""Error called for problems parsing a text file. Prints error message; *msg* to standard output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class PsiImportError(PsiException):; """"""Error called for problems import python dependencies. Prints error message; *msg* to standard output stream and output file.; """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class TestComparisonError(PsiException):; """"""Error called when a test case fails due to a failed; compare_values() call. Prints error message *msg* to standard; output stream and output file. """""". def __init__(self, msg):; PsiException.__init__(self, msg); self.message = '\nPsiException: %s\n\n' % msg. [docs]class UpgradeHelper(PsiException):; """"""Error called on previously valid syntax that now isn't and a; simple syntax transition is possible. It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning. For; cases where the syntax just has to jump, this can be used to trap; the old syntax at first error and suggest the new. """""". def __init__(self, old, new, version, elaboration):; msg = ""Using `{}` instead of `{}` is obsolete as of {}.{}"".format(old, new, version, elaboration); PsiException.__init__(self, msg); core.print_out('\nPsiException: %s\n\n' % (msg)). [docs]class ConvergenceError(PsiException):; """"""Error called for problems with converging an iterative method. Pa",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/exceptions.html:2246,test,test,2246,psi4manual/1.4.0/_modules/psi4/driver/p4util/exceptions.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/exceptions.html,9,"['Test', 'test']","['TestComparisonError', 'test']"
Testability,"n. set_density_tolerance(self, arg0); Sets the density threshold for LibXC. set_deriv(self, arg0); Sets the derivative level. set_description(self, arg0); Sets the SuperFunctional description. set_do_vv10(self, arg0); Sets whether to do VV10 correction. set_grac_alpha(self, arg0); Sets the GRAC alpha parameter. set_grac_beta(self, arg0); Sets the GRAC beta parameter. set_grac_shift(self, arg0); Sets the GRAC bulk shift value. set_lock(self, arg0); Locks the functional to prevent changes. set_max_points(self, arg0); Sets the maximum number of points. set_name(self, arg0); Sets the SuperFunctional name. set_vv10_b(self, arg0); Sets the VV10 b parameter. set_vv10_c(self, arg0); Sets the VV10 c parameter. set_x_alpha(self, arg0); Sets the amount of exact global HF exchange. set_x_beta(self, arg0); Sets how much more long-range exchange than short-range exchange. set_x_omega(self, arg0); Sets the range-seperation exchange parameter. test_functional(self, arg0, arg1, arg2, ...); Quick testing capabilities. value(self, arg0); Returns a given internal value. values(self); Return all internal values. vv10_b(self); The VV10 b parameter. vv10_c(self); The VV10 c parameter. x_alpha(self); Amount of exact HF exchange. x_beta(self); Amount of exact HF exchange. x_functional(self, arg0); Returns the desired X Functional. x_functionals(self); Returns all X Functionals. x_omega(self); Range-seperated exchange parameter. Methods Documentation. static XC_build(arg0: str, arg1: bool) → psi4.core.SuperFunctional¶; Builds a SuperFunctional from a XC string. add_c_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Functional) → None¶; Add a correlation Functional. add_x_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Functional) → None¶; Add a exchange Functional. allocate(self: psi4.core.SuperFunctional) → None¶; Allocates the vectors, should be called after ansatz or npoint changes. ansatz(self: psi4.core.SuperFunctional) → int¶; SuperFunctional rung. static blank()",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/api/psi4.core.superfunctional.html:3468,test,testing,3468,psi4manual/1.5.0/api/psi4.core.superfunctional.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/api/psi4.core.superfunctional.html,6,['test'],['testing']
Testability,"n.set_hessian(core.Matrix.from_array(H)); wfn.set_gradient(G0). # Explicitly set the current energy..; if isinstance(lowername, str) and lowername in procedures['energy']:; # this correctly filters out cbs fn and ""hf/cc-pvtz""; # it probably incorrectly filters out mp5, but reconsider in DDD; core.set_variable(f""CURRENT HESSIAN"", H); core.set_variable(f""{lowername.upper()} TOTAL HESSIAN"", H); core.set_variable(f""{lowername.upper()} TOTAL GRADIENT"", G0); wfn.set_variable(f""{lowername.upper()} TOTAL HESSIAN"", H); wfn.set_variable(f""{lowername.upper()} TOTAL GRADIENT"", G0); core.set_variable('CURRENT ENERGY', findif_meta_dict[""reference""][""energy""]); wfn.set_variable('CURRENT ENERGY', findif_meta_dict[""reference""][""energy""]). core.set_global_option(""PARENT_SYMMETRY"", """"); optstash.restore(); optstash_conv.restore(). else:; core.print_out(""""""hessian() will perform frequency computation by finite difference of analytic energies.\n""""""). # Set method-dependent scf convergence criteria (test on procedures['energy'] since that's guaranteed); optstash.restore(); optstash_conv.restore(); optstash_conv = driver_util._set_convergence_criterion('energy', lowername, 10, 11, 10, 11, 10). # Obtain list of displacements; findif_meta_dict = driver_findif.hessian_from_energies_geometries(molecule, irrep). # Record undisplaced symmetry for projection of diplaced point groups; core.set_global_option(""PARENT_SYMMETRY"", molecule.schoenflies_symbol()). ndisp = len(findif_meta_dict[""displacements""]) + 1. print(' %d displacements needed.' % ndisp). wfn = _process_displacement(energy, lowername, molecule, findif_meta_dict[""reference""], 1, ndisp,; **kwargs); var_dict = core.variables(). for n, displacement in enumerate(findif_meta_dict[""displacements""].values(), start=2):; _process_displacement(; energy, lowername, molecule, displacement, n, ndisp, write_orbitals=False, **kwargs). # Reset variables; for key, val in var_dict.items():; core.set_variable(key, val). # Assemble Hessian from energies;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/driver.html:81040,test,test,81040,psi4manual/1.5.0/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.5.0/_modules/psi4/driver/driver.html,2,['test'],['test']
Testability,"n1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. nbody-vmfc-hessian; Computation of VMFC-corrected water trimer Hessian (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. nbody-hessian; Computation of VMFC-corrected HF dimer Hessian. cc13c; Tests RHF CCSD(T)gradients. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fci-dipole; 6-31G H2O Test FCI Energy Point. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. dft-grac; Gradient regularized asymptotic correction (GRAC) test. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:16792,test,test,16792,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"n; >>> properties('cc2', properties=['rotation']). """"""; kwargs = p4util.kwargs_lower(kwargs). basisstash = p4util.OptionsState(['BASIS']); return_wfn = kwargs.pop('return_wfn', False). # Make sure the molecule the user provided is the active one; molecule = kwargs.pop('molecule', core.get_active_molecule()); molecule.update_geometry(). ## Pre-planning interventions. # * Trip on function or alias as name; lowername = driver_util.upgrade_interventions(args[0]). _filter_renamed_methods(""properties"", lowername). props = kwargs.get('properties', ['dipole', 'quadrupole']); if len(args) > 1:; props += args[1:]; kwargs['properties'] = p4util.drop_duplicates(props). # * Avert pydantic anger at incomplete modelchem spec; userbas = core.get_global_option('BASIS') or kwargs.get('basis'); if lowername in integrated_basis_methods and userbas is None:; kwargs['basis'] = '(auto)'. # Are we planning?; plan = task_planner.task_planner(""properties"", lowername, molecule, **kwargs); logger.debug('PROPERTIES PLAN'); logger.debug(pp.pformat(plan.dict())). if kwargs.get(""return_plan"", False):; # Plan-only requested; return plan. elif not isinstance(plan, AtomicComputer):; # Advanced ""Computer"" active; plan.compute(); return plan.get_psi_results(return_wfn=return_wfn). else:; # We have unpacked to an AtomicInput; lowername = plan.method; basis = plan.basis; core.set_global_option(""BASIS"", basis). ## Second half of this fn -- entry means program running exactly analytic property. # Commit to procedures['properties'] call hereafter; core.clean_variables(). # needed (+restore below) so long as AtomicComputer-s aren't run through json (where convcrit also lives); optstash = driver_util.negotiate_convergence_criterion((""prop"", ""prop""), lowername, return_optstash=True). logger.info(f""Compute properties(): method={lowername}, basis={core.get_global_option('BASIS').lower()}, molecule={molecule.name()}, nre={'w/EFP' if hasattr(molecule, 'EFP') else molecule.nuclear_repulsion_energy()}""); logger.debug",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver.html:52068,log,logger,52068,psi4manual/1.7.x/_modules/psi4/driver/driver.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver.html,8,['log'],['logger']
Testability,"n_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. How to use logging in Psi4¶; A log file is generated alongside the output file and has extension; .log. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don’t start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low.; To change the logging level to DEBUG from the command-line:; >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI:; >>> psi4.set_output_file(<filebase>, loglevel=10). How to find the Psi4 module from the executable and vice versa¶; Because of the different conventions of C++/Linux and Python installation; layouts, the PSI4 executable and the PSI4 Python module aren’t; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/build_planning.html:60454,log,logging,60454,psi4manual/1.6.x/build_planning.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/build_planning.html,10,['log'],['logging']
Testability,"n_lo""]}' is not recognized. Add it to VARH in driver_cbs.py to proceed.""""""; ). self.cbsrec, self.compute_list, self.trove = _build_cbs_compute(self.metameta, self.metadata). for job in self.compute_list:; keywords = copy.deepcopy(self.metameta['kwargs']['keywords']); if job[""f_options""] is not False:; stage_keywords = dict(job[""f_options""].items()); keywords = {**keywords, **stage_keywords}; task = AtomicComputer(; **{; ""molecule"": self.molecule,; ""driver"": self.driver,; ""method"": job[""f_wfn""],; ""basis"": job[""f_basis""],; ""keywords"": keywords or {},; }); self.task_list.append(task). # logger.debug(""TASK\n"" + pp.pformat(task.dict())). [docs] def build_tasks(self, obj, **kwargs):; # permanently a dummy function; pass. [docs] def plan(self):; # uncalled function; return [t.plan() for t in self.task_list]. [docs] def compute(self, client: Optional[""qcportal.FractalClient""] = None):; label = self.metameta['label']; instructions = ""\n"" + p4util.banner(f"" CBS Computations{':' + label if label else ''} "",; strNotOutfile=True) + ""\n""; logger.debug(instructions); core.print_out(instructions). with p4util.hold_options_state():; for t in reversed(self.task_list):; t.compute(client=client). def _prepare_results(self, client: Optional[""qcportal.FractalClient""] = None):; results_list = [x.get_results(client=client) for x in self.task_list]. modules = [getattr(v.provenance, ""module"", None) for v in results_list]; if self.driver != ""energy"" and len(set(modules)) == 2 and modules.count(""scf"") == len(modules) / 2:; # signature of ""MP2 GRAD"" - ""HF GRAD"" implementation detail; # * avoid having post-scf single-method gradients/Hessians show up as ""(mixed)"" module just because an outright HF call in the jobs list; modules = set(modules) - {""scf""}; modules = list(set(modules)); modules = modules[0] if len(modules) == 1 else ""(mixed)"". # load results_list numbers into compute_list (task_list is AtomicComputer-s); for itask, mc in enumerate(self.compute_list):; task = results_list[itask]; res",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs.html:55652,log,logger,55652,psi4manual/1.7.x/_modules/psi4/driver/driver_cbs.html,https://psicode.org,https://psicode.org/psi4manual/1.7.x/_modules/psi4/driver/driver_cbs.html,2,['log'],['logger']
Testability,"nal Test. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. aediis-1; ADIIS test case, from 10.1063/1.3304922. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. fsapt-ext-abc; FSAPT with external charge on trimer. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. dft-reference; MP2 with a PBE0 reference computation. dft1; DFT Functional Test all values update for new BraggSlater radii. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. ddd-deriv; Sample HF/cc-pVDZ H2O computation all derivatives. nbody-multi-level-2; many-body different levels of theory on each body of helium tetramer. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. tdscf-1; td-uhf test on triplet states of methylene (rpa). omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the u",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:27051,test,test,27051,psi4manual/master/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"nal at present. Also aspirational is using the intended types of gradients. tdscf-6; td-camb3lyp with DiskDF and method/basis specification. dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. cubeprop; RHF orbitals and density for water. dft-smoke; DFT Functional Smoke Test. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). scf-ecp; Water-Argon complex with ECP present; check of energies and forces. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. fci-h2o; 6-31G H2O Test FCI Energy Point. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-level-shift-uhf; SCF level shift on a UHF computation. linK-2; RKS Linear Exchange Algorithm test for benzene. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. sapt11; sapt example with orbital freezing with alkali metal and dMP2. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html:7183,test,test,7183,psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,https://psicode.org,https://psicode.org/psi4manual/1.9.x/autodoc_testsuite_corepsi4.html,2,['test'],['test']
Testability,"nal frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-me",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html:24239,test,tested,24239,psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,https://psicode.org,https://psicode.org/psi4manual/1.2.1/autodoc_testsuite_corepsi4-1.html,8,['test'],['tested']
Testability,"name, 'r') as handle:; fchk_string = handle.read(); return fchk_string. [docs]def compare_fchkfiles(expected, computed, digits, label):; # """"""Function to compare two FCHK files. # an older format description can be found here; # http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; # It lists more fields (logical, character) that are not included in this; # test function. They should be covered by the string comparison.; # This function is only meant to work with PSI4's FCHK files.; #; # :param expected: reference FCHK file name; # :param computed: computed FCHK file name; # :param digits: tolerance for high accuracy fields -- 1.e-8 or 1.e-9 suitable; # :param label: string labelling the test; # """""". fchk_ref = fchkfile_to_string(expected).splitlines(); fchk_calc = fchkfile_to_string(computed).splitlines(). high_accuracy = digits; low_accuracy = 3. # Those listed below need super high scf convergence (d_conv 1e-12) and might; # show machine dependence. They will be tested with low_accuracy.; sensitive = ['Current cartesian coordinates', 'MO coefficients']. if len(fchk_ref) != len(fchk_calc):; raise ValidationError('The two FCHK files to compare have a different file length! \n'). index = 0; max_length = len(fchk_calc); tests = []; for start in range(max_length):; if index >= max_length:; break; line = fchk_calc[index]; if ""N="" in line:; offset, calc = _consume_fchk_section(fchk_calc, index); _, ref = _consume_fchk_section(fchk_ref, index); if any(x in line for x in sensitive):; test = compare_arrays(ref, calc, low_accuracy, f"" matrix section: {line}""); else:; test = compare_arrays(ref, calc, high_accuracy, f"" matrix section: {line}""); index += offset; elif "" R "" in line and not ""N="" in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_values(ref, calc, high_accuracy, f"" float value: {line}""); index += 1; elif "" I "" in line and not ""N="" in line:; calc = line.split()[-1]; ref = fchk_ref[index].split()[-1]; test = compare_i",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/fchk.html:3261,test,tested,3261,psi4manual/1.4.0/_modules/psi4/driver/p4util/fchk.html,https://psicode.org,https://psicode.org/psi4manual/1.4.0/_modules/psi4/driver/p4util/fchk.html,4,['test'],['tested']
Testability,"name, **kwargs):; """"""Function selecting the algorithm for ADC(2) excited state energy; call and directing to specified or best-performance default modules. """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only adcc/adc. # TODO Actually one should do selection on a couple of other options here; # as well, e.g. adcc supports frozen-core and frozen-virtual,; # spin-specific states or spin-flip methods.; # But as far as I (mfherbst) know the BUILTIN ADC routine only supports; # singlet states and without freezing some core or some virtual orbitals. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module in {'ADCC', ''} and extras.addons(""adcc""):; func = run_adcc; elif module in {'BUILTIN', ''}:; func = run_adc. if reference == 'UHF':; if mtd_type == 'CONV':; if module in ['ADCC', ''] and extras.addons(""adcc""):; func = run_adcc. # Note: ROHF is theoretically available in adcc, but are not fully tested; # ... so will be added later. if func is None:; raise ManagedMethodError(['select_adc2', name, 'MP_TYPE', mtd_type, reference, module]). if kwargs.pop('probe', False):; return; else:; return func(name, **kwargs). def build_disp_functor(name, restricted, save_pairwise_disp=False, **kwargs):. if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None. # Figure out functional; superfunc, disp_type = dft.build_superfunctional(name, restricted). if disp_type:; if isinstance(name, dict):; # user dft_functional={} spec - type for lookup, dict val for param defs,; # name & citation discarded so only param matches to existing defs will print labels; _disp_functor = empirical_dispersion.EmpiricalDispersion(name_hint='',; level_hint=disp_type[""type""],; param_tweaks=disp_type[""params""],; save_pairwise_disp=save_pairwise_disp,; engine=kwargs.get('e",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html:31405,test,tested,31405,psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/procrouting/proc.html,2,['test'],['tested']
Testability,"nb in compute_dict[""all""]:; for pair in compute_dict[""all""][nb]:; lbl = labeler(pair); if lbl in self.task_list:; continue. data = template; ghost = list(set(pair[1]) - set(pair[0])); data[""molecule""] = self.molecule.extract_subsets(list(pair[0]), ghost); if self.embedding_charges:; embedding_frags = list(set(range(1, self.nfragments + 1)) - set(pair[1])); charges = []; for frag in embedding_frags:; positions = self.molecule.extract_subsets(frag).geometry().np.tolist(); charges.extend([[chg, i] for i, chg in zip(positions, self.embedding_charges[frag])]); data['keywords']['function_kwargs'].update({'external_potentials': charges}). self.task_list[lbl] = mb_computer(**data); count += 1. return count. def plan(self):; # uncalled function; return [t.plan() for t in self.task_list.values()]. [docs] def compute(self, client: Optional[""FractalClient""] = None):; """"""Run quantum chemistry."""""". info = ""\n"" + p4util.banner(f"" ManyBody Computations "", strNotOutfile=True) + ""\n""; #core.print_out(info); logger.info(info). with p4util.hold_options_state():; for t in self.task_list.values():; t.compute(client=client). [docs] def prepare_results(; self,; results: Optional[Dict[str, SubTaskComputers]] = None,; client: Optional[""FractalClient""] = None,; ) -> Dict[str, Any]:; """"""Process the results from all n-body component molecular systems and model chemistry levels into final quantities. Parameters; ----------; results; A set of tasks to process instead of self.task_list. Used in multilevel processing to pass a subset of; self.task_list filtered to only one modelchem level.; client; QCFractal client if using QCArchive for distributed compute. Returns; -------; nbody_results; When the ManyBodyComputer specifies a single model chemistry level (see self.nbodies_per_mc_level), the; return is a dictionary, nbody_results, described in the table below. Many of the items are actually filled; by successive calls to assemble_nbody_components(). When multiple model chemistry levels are specifi",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_nbody.html:39067,log,logger,39067,psi4manual/1.6.x/_modules/psi4/driver/driver_nbody.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/_modules/psi4/driver/driver_nbody.html,2,['log'],['logger']
Testability,"nc=True, verbose=False, color='sapt', view=True,; saveas=None, relpath=False, graphicsformat=['pdf']):; """""". """"""; dbdatdict = OrderedDict(); for mc in modelchem:; # compute errors; errors, indiv = self.compute_statistics(mc, benchmark=benchmark, sset=sset,; failoninc=failoninc, verbose=verbose, returnindiv=True); # repackage; dbdat = []; for db, odb in self.dbdict.iteritems():; dbix = self.dbdict.keys().index(db); oss = odb.oss[self.sset[sset][dbix]]; # TODO may need to make axis name distributable across wrappeddbs; # TODO not handling mc present bm absent; if indiv[db] is not None:; for rxn in oss.hrxn:; rxnix = oss.hrxn.index(rxn); bm = self.mcs[benchmark][dbix]; bmpresent = False if (bm is None or bm not in odb.hrxn[rxn].data) else True; mcpresent = False if (self.mcs[mc][dbix] not in odb.hrxn[rxn].data) else True; entry = {'db': db,; 'sys': str(rxn),; 'color': odb.hrxn[rxn].color,; 'axis': oss.axis[axis][rxnix]}. if bmpresent:; entry['bmdata'] = odb.hrxn[rxn].data[self.mcs[benchmark][dbix]].value; else:; entry['bmdata'] = None. if mcpresent:; entry['mcdata'] = odb.hrxn[rxn].data[self.mcs[mc][dbix]].value; else:; continue. if bmpresent and mcpresent:; entry['error'] = [indiv[db][rxn][0]]; else:; entry['error'] = [None]; dbdat.append(entry); dbdatdict[fancify_mc_tag(mc).strip()] = dbdat. pre, suf, mid = string_contrast(modelchem); title = """"""%s[%s]%s vs %s axis %s for %s subset %s"""""" % (pre, str(len(mid)), suf, benchmark, axis, self.dbse, sset); print(title); #for mc, dbdat in dbdatdict.iteritems():; # print mc; # for d in dbdat:; # print '{:20s} {:8.2f} {:8.2f} {:8.2f}'.format(d['sys'], d['axis'],; # 0.0 if d['bmdata'] is None else d['bmdata'],; # 0.0 if d['mcdata'] is None else d['mcdata']); # generate matplotlib instructions and call or print; try:; from . import mpl; import matplotlib.pyplot as plt; except ImportError:; # if not running from Canopy, print line to execute from Canopy; print(""""""filedict = mpl.valerr(%s,\n color='%s',\n title='%s',\n xtitle='%s'",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html:63213,benchmark,benchmark,63213,psi4manual/1.0.0/_modules/qcdb/dbwrap.html,https://psicode.org,https://psicode.org/psi4manual/1.0.0/_modules/qcdb/dbwrap.html,1,['benchmark'],['benchmark']
Testability,"nce; False otherwise. Return type; bool. Extra QCA Functions¶. psi4.compare(expected, computed, label=None, *, equal_phase=False, quiet=False, return_message=False, return_handler=<function _psi4_true_raise_handler>)¶; Returns True if two integers, strings, booleans, or integer arrays are element-wise equal. Parameters. expected (Union[int, bool, str, List[int], numpy.ndarray]) – int, bool, str or array-like of same.; Reference value against which computed is compared.; computed (Union[int, bool, str, List[int], numpy.ndarray]) – int, bool, str or array-like of same.; Input value to compare against expected.; label (str) – Label for passed and error messages. Defaults to calling function name.; equal_phase (bool) – Compare computed or its opposite as equal.; quiet (bool) – Whether to log the return message.; return_message (bool) – Whether to return tuple. See below.; return_handler (Callable) – Function to control printing, logging, raising, and returning.; Specialized interception for interfacing testing systems. Returns. allclose (bool) – Returns True if expected and computed are equal; False otherwise.; message (str) – When return_message=True, also return passed or error message. Return type; Union[bool, Tuple[bool, str]]. Notes. Akin to np.array_equal.; For scalar exactly-comparable types and for arbitrary-dimension, np.ndarray-castable, uniform-type,; exactly-comparable types. For mixed types, use compare_recursive(). psi4.compare_recursive(expected, computed, *args, **kwargs)¶; Comparison function for recursively comparing mixed-type and nested structures such as dictionaries and lists.; See qcelemental.testing.compare_recursive() for details. table of contents. Test Suite; CTest and pytest, PSIthon and PsiAPI; Test Contents; Adding PSIthon Test Cases; CMakeLists.txt; input.dat; output.ref; test_input.py; Running for Debugging. Adding PsiAPI Test Cases; Running for Debugging. Comparison Functions; Plain Old Data; Objects; File Formats; Extra QCA Functions. «;",MatchSource.WIKI,psi4,psi4,v1.9.1,https://psicode.org/psi4manual/1.6.x/add_tests.html:29453,test,testing,29453,psi4manual/1.6.x/add_tests.html,https://psicode.org,https://psicode.org/psi4manual/1.6.x/add_tests.html,1,['test'],['testing']
