quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Testability,"changed. General performance tuning of RooFit to reduce computational overhead. Extensive profiling of; CPU times in call graphas and analysis heap memory use have been performed and many small ; changes have been made to make the code more efficient and use less memory. RooStats Package; AsymptoticCalculator. New Class for doing an hypothesis tests using the asymptotic likelihood formulae, described in the paper from; G. Cowan, K. Cranmer, E. Gross and O. Vitells, Asymptotic formulae for likelihood- based tests of new physics,; Eur. Phys. J., C71 (1), 2011.; The class computes the p-value for the null and also for the alternate using the Asimov data set. In this; differs form the ProfileLikelihoodCalculator which computes only the p-values for the null hypothesis.; The Asimov data set is generated with the utility function AsymptoticCalculator::MakeAsimovData and then; it is used to evaluate the likelihood. ; ; This class implements the HypoTestCalculatorGeneric interface and can be used as an alternative Hypothesis test; calculator in the HypoTestInverter class. It can then plugged in the HypoTestInverter for computing asymptotic CLs and CLs+b; limits. In this way the limits will be computed by just performing a fit for each test parameter value and without; generating any toys. . The class can be used via the StandardHypothesisTest.C tutorial passing a value of 2 for the; calculator type. . RooStats Utils. Add a utility function (from G. Petrucciani), RooStats::MakeNuisancePdf, which given a model configuration (or the global pdf and the; observables), factorizes from the model pdf the constraint probability density functions for the nuisance parameters; and builds a global nuisance pdf. This function can then be used in the HybridCalculator or in the BayesianCalculator; with the option ""TOYMC"".; . HypotestInverter and HypoTestInverterResult. Several improvements and bug fixes in merging results and in computing the observed and expected limits.; Provide support n",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v532/index.html:7678,test,test,7678,roofit/doc/v532/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v532/index.html,1,['test'],['test']
Testability,"checker). .. code-block:: c. void test() {; char *s = """";; char c = s[1]; // warn; }. void test() {; int buf[100];; int *p = buf;; p = p + 99;; p[1] = 1; // warn; }. // note: compiler has internal check for this.; // Use -Wno-array-bounds to suppress compiler warning.; void test() {; int buf[100][100];; buf[0][-1] = 1; // warn; }. // note: requires alpha.security.taint check turned on.; void test() {; char s[] = ""abc"";; int x = getchar();; char c = s[x]; // warn: index is tainted; }. .. _alpha-security-MallocOverflow:. alpha.security.MallocOverflow (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for overflows in the arguments to ``malloc()``.; It tries to catch ``malloc(n * c)`` patterns, where:. - ``n``: a variable or member access of an object; - ``c``: a constant foldable integral. This checker was designed for code audits, so expect false-positive reports.; One is supposed to silence this checker by ensuring proper bounds checking on; the variable in question using e.g. an ``assert()`` or a branch. .. code-block:: c. void test(int n) {; void *p = malloc(n * sizeof(int)); // warn; }. void test2(int n) {; if (n > 100) // gives an upper-bound; return;; void *p = malloc(n * sizeof(int)); // no warning; }. void test3(int n) {; assert(n <= 100 && ""Contract violated."");; void *p = malloc(n * sizeof(int)); // no warning; }. Limitations:. - The checker won't warn for variables involved in explicit casts,; since that might limit the variable's domain.; E.g.: ``(unsigned char)int x`` would limit the domain to ``[0,255]``.; The checker will miss the true-positive cases when the explicit cast would; not tighten the domain to prevent the overflow in the subsequent; multiplication operation. - It is an AST-based checker, thus it does not make use of the; path-sensitive taint-analysis. .. _alpha-security-MmapWriteExec:. alpha.security.MmapWriteExec (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on mmap() calls that are both writable and executable. .. code-block:: c. void test(int n)",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:62009,assert,assert,62009,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['assert'],['assert']
Testability,"checkers list below. In addition to these, the analyzer contains a number of :ref:`alpha-checkers` (aka *alpha* checkers).; These checkers are under development and are switched off by default. They may crash or emit a higher number of false positives. The :ref:`debug-checkers` package contains checkers for analyzer developers for debugging purposes. .. contents:: Table of Contents; :depth: 4. .. _default-checkers:. Default Checkers; ----------------. .. _core-checkers:. core; ^^^^; Models core language features and contains general-purpose checkers such as division by zero,; null pointer dereference, usage of uninitialized values, etc.; *These checkers must be always switched on as other checker rely on them.*. .. _core-BitwiseShift:. core.BitwiseShift (C, C++); """""""""""""""""""""""""""""""""""""""""""""""""""". Finds undefined behavior caused by the bitwise left- and right-shift operator; operating on integer types. By default, this checker only reports situations when the right operand is; either negative or larger than the bit width of the type of the left operand;; these are logically unsound. Moreover, if the pedantic mode is activated by; ``-analyzer-config core.BitwiseShift:Pedantic=true``, then this checker also; reports situations where the _left_ operand of a shift operator is negative or; overflow occurs during the right shift of a signed value. (Most compilers; handle these predictably, but the C standard and the C++ standards before C++20; say that they're undefined behavior. In the C++20 standard these constructs are; well-defined, so activating pedantic mode in C++20 has no effect.). **Examples**. .. code-block:: cpp. static_assert(sizeof(int) == 4, ""assuming 32-bit int""). void basic_examples(int a, int b) {; if (b < 0) {; b = a << b; // warn: right operand is negative in left shift; } else if (b >= 32) {; b = a >> b; // warn: right shift overflows the capacity of 'int'; }; }. int pedantic_examples(int a, int b) {; if (a < 0) {; return a >> b; // warn: left operand is nega",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:1385,log,logically,1385,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['log'],['logically']
Testability,chitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Poolin,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:4122,test,testForwardPass,4122,tmva/tmva/test/DNN/CNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt,1,['test'],['testForwardPass']
Testability,"chmarks. PolyBench; ---------; https://sourceforge.net/projects/polybench/. A modified version of Polybench 3.2 is already presented in; SingleSource/Benchmarks/Polybench. A newer version 4.2.1 is available. High Performance Geometric Multigrid; ------------------------------------; https://crd.lbl.gov/departments/computer-science/PAR/research/hpgmg/. RAJA Performance Suite; ----------------------; https://github.com/LLNL/RAJAPerf. CORAL-2 Benchmarks; ------------------; https://asc.llnl.gov/coral-2-benchmarks/. Many of its programs have already been integrated in; MultiSource/Benchmarks/DOE-ProxyApps-C and; MultiSource/Benchmarks/DOE-ProxyApps-C++. * Nekbone; * QMCPack; * LAMMPS; * Kripke; * Quicksilver; * PENNANT; * Big Data Analytic Suite; * Deep Learning Suite; * Stream; * Stride; * ML/DL micro-benchmark; * Pynamic; * ACME; * VPIC; * Laghos; * Parallel Integer Sort; * Havoq. NWChem; ------; http://www.nwchem-sw.org/index.php/Benchmarks. TVM; ----; https://github.com/dmlc/tvm/tree/main/apps/benchmark. HydroBench; ----------; https://github.com/HydroBench/Hydro. ParRes; ------; https://github.com/ParRes/Kernels/tree/default/Cxx11. Applications/Libraries; ======================. GnuPG; -----; https://gnupg.org/. Blitz++; -------; https://sourceforge.net/projects/blitz/. FFmpeg; ------; https://ffmpeg.org/. FreePOOMA; ---------; http://www.nongnu.org/freepooma/. FTensors; --------; http://www.wlandry.net/Projects/FTensor. rawspeed; --------; https://github.com/darktable-org/rawspeed. Its test dataset is 756 MB in size, which is too large to be included; into the test-suite repository. C++ Performance Benchmarks; --------------------------; https://gitlab.com/chriscox/CppPerformanceBenchmarks. Generic Algorithms; ==================. Image processing; ----------------. Resampling; ``````````. * Bilinear; * Bicubic; * Lanczos. Dither; ``````. * Threshold; * Random; * Halftone; * Bayer; * Floyd-Steinberg; * Jarvis; * Stucki; * Burkes; * Sierra; * Atkinson; * Gradient-ba",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst:5053,benchmark,benchmark,5053,interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst,1,['benchmark'],['benchmark']
Testability,"cial policy on how one gets elected to be a code owner. .. _include a testcase:. Test Cases; ----------. Developers are required to create test cases for any bugs fixed and any new; features added. Some tips for getting your testcase approved:. * All feature and regression test cases are added to the ``llvm/test``; directory. The appropriate sub-directory should be selected (see the; :doc:`Testing Guide <TestingGuide>` for details). * Test cases should be written in :doc:`LLVM assembly language <LangRef>`. * Test cases, especially for regressions, should be reduced as much as possible,; by :doc:`bugpoint <Bugpoint>` or manually. It is unacceptable to place an; entire failing program into ``llvm/test`` as this creates a *time-to-test*; burden on all developers. Please keep them short. * Avoid adding links to resources that are not available to the entire; community, such as links to private bug trackers, internal corporate; documentation, etc. Instead, add sufficient comments to the test to provide; the context behind such links. Note that llvm/test and clang/test are designed for regression and small feature; tests only. More extensive test cases (e.g., entire applications, benchmarks,; etc) should be added to the ``llvm-test`` test suite. The llvm-test suite is; for coverage (correctness, performance, etc) testing, not feature or regression; testing. Release Notes; -------------. Many projects in LLVM communicate important changes to users through release; notes, typically found in ``docs/ReleaseNotes.rst`` for the project. Changes to; a project that are user-facing, or that users may wish to know about, should be; added to the project's release notes at the author's or code reviewer's; discretion, preferably as part of the commit landing the changes. Examples of; changes that would typically warrant adding a release note (this list is not; exhaustive):. * Adding, removing, or modifying command-line options.; * Adding, removing, or regrouping a diagnostic.; * Fixin",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst:10404,test,test,10404,interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,1,['test'],['test']
Testability,"cide whether the; bug `crashes the compiler`_ or if the compiler is `miscompiling`_ the program; (i.e., the compiler successfully produces an executable, but it doesn't run; right). Based on what type of bug it is, follow the instructions in the; linked section to narrow down the bug so that the person who fixes it will be; able to find the problem more easily. Once you have a reduced test-case, go to `the LLVM Bug Tracking System; <https://github.com/llvm/llvm-project/issues>`_ and fill out the form with the; necessary details (note that you don't need to pick a label, just use if you're; not sure). The bug description should contain the following information:. * All information necessary to reproduce the problem.; * The reduced test-case that triggers the bug.; * The location where you obtained LLVM (if not from our Git; repository). Thanks for helping us make LLVM better!. .. _crashes the compiler:. Crashing Bugs; =============. More often than not, bugs in the compiler cause it to crash---often due to; an assertion failure of some sort. The most important piece of the puzzle; is to figure out if it is crashing in the Clang front-end or if it is one of; the LLVM libraries (e.g. the optimizer or code generator) that has; problems. To figure out which component is crashing (the front-end, middle-end; optimizer, or backend code generator), run the ``clang`` command line as you; were when the crash occurred, but with the following extra command line; options:. * ``-emit-llvm -Xclang -disable-llvm-passes``: If ``clang`` still crashes when; passed these options (which disable the optimizer and code generator), then; the crash is in the front-end. Jump ahead to :ref:`front-end bugs; <frontend-crash>`. * ``-emit-llvm``: If ``clang`` crashes with this option (which disables; the code generator), you found a middle-end optimizer bug. Jump ahead to; :ref:`middle-end bugs <middleend-crash>`. * Otherwise, you have a backend code generator crash. Jump ahead to :ref:`code; gener",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst:1513,assert,assertion,1513,interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst,1,['assert'],['assertion']
Testability,"cides whether the channel marks are shown; int chanmark_style; // style of channel marks; int chanmark_width; // width of channel marks; int chanmark_height; // height of channel marks; int chanmark_color; // color of channel marks; int chanline_en_dis; // decides whether the channel lines (grid) are shown. // auxiliary variables, transformation coefficients for internal use only; double kx;; double ky;; double mxx;; double mxy;; double myx;; double myy;; double txx;; double txy;; double tyx;; double tyy;; double tyz;; double vx;; double vy;; double nu_sli;. // auxiliary internal variables, working place; double z,zeq,gbezx,gbezy,dxspline,dyspline;; int xt,yt,xs,ys,xe,ye,priamka,z_preset_value;; unsigned short obal[MAXIMUM_XSCREEN_RESOLUTION];; unsigned short obal_cont[MAXIMUM_XSCREEN_RESOLUTION];; TPoint bz[4];; };; ```. The examples using different display parameters are shown in the next few Figures. ![Display mode-bars, pen width=2](figures/image226.png). ![Display mode-triangles, log scale](figures/image228.png). ![Display mode-contours](figures/image230.png). ![Display mode surface shading according to height](figures/image232.png). ![Display mode-surface shading according to light point](figures/image234.png). ![Display mode-surface shading according to height+light position with ratio 50:50, CMY color model](figures/image236.png). ![Display mode bars shaded according to height](figures/image238.png). ![Display mode- surface shading according to light position with shadows](figures/image240.png). ![Display mode- surface shading according to height with 10 levels of contours](figures/image242.png). ![Display mode- surface shading according to height, sqrt scale, channel marks and lines shown](figures/image244.png). ![Display mode- surface shading according to height-contours, rasters allowing to localize interesting parts are shown.](figures/image246.png). # References. [1] M. Morháč, J. Kliman, V. Matoušek, M. Veselský, I. Turzo.:; Background elimination metho",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/spectrum/Spectrum.md:80974,log,log,80974,documentation/spectrum/Spectrum.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/spectrum/Spectrum.md,1,['log'],['log']
Testability,"cient; to provide the context behind such links. Additionally, the committer is responsible for addressing any problems found in; the future that the change is responsible for. For example:. * The code should compile cleanly on all supported platforms. * The changes should not cause any correctness regressions in the ``llvm-test``; suite and must not cause any major performance regressions. * The change set should not cause performance or correctness regressions for the; LLVM tools. * The changes should not cause performance or correctness regressions in code; compiled by LLVM on all applicable targets. * You are expected to address any `GitHub Issues <https://github.com/llvm/llvm-project/issues>`_ that; result from your change. We prefer for this to be handled before submission but understand that it isn't; possible to test all of this for every submission. Our build bots and nightly; testing infrastructure normally finds these problems. A good rule of thumb is; to check the nightly testers for regressions the day after your change. Build; bots will directly email you if a group of commits that included yours caused a; failure. You are expected to check the build bot messages to see if they are; your fault and, if so, fix the breakage. Commits that violate these quality standards (e.g. are very broken) may be; reverted. This is necessary when the change blocks other developers from making; progress. The developer is welcome to re-commit the change after the problem has; been fixed. .. _commit messages:. Commit messages; ---------------. Although we don't enforce the format of commit messages, we prefer that; you follow these guidelines to help review, search in logs, email formatting; and so on. These guidelines are very similar to rules used by other open source; projects. Most importantly, the contents of the message should be carefully written to; convey the rationale of the change (without delving too much in detail). It; also should avoid being vague or overly ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst:14277,test,testers,14277,interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,1,['test'],['testers']
Testability,"cified.; Unlike GNU :program:`strings` it looks in the entire input file, regardless of; file format, rather than restricting the search to certain sections of object; files. If ""``-``"" is specified as an ``input``, or no ``input`` is specified,; the program reads from the standard input stream. EXAMPLE; -------. .. code-block:: console. $ cat input.txt; bars; foo; wibble blob; $ llvm-strings input.txt; bars; wibble blob. OPTIONS; -------. .. option:: --all, -a. Silently ignored. Present for GNU :program:`strings` compatibility. .. option:: --bytes=<length>, -n. Set the minimum number of printable ASCII characters required for a sequence of; bytes to be considered a string. The default value is 4. .. option:: --help, -h. Display a summary of command line options. .. option:: --print-file-name, -f. Display the name of the containing file before each string. Example:. .. code-block:: console. $ llvm-strings --print-file-name test.o test.elf; test.o: _Z5hellov; test.o: some_bss; test.o: test.cpp; test.o: main; test.elf: test.cpp; test.elf: test2.cpp; test.elf: _Z5hellov; test.elf: main; test.elf: some_bss. .. option:: --radix=<radix>, -t. Display the offset within the file of each string, before the string and using; the specified radix. Valid ``<radix>`` values are ``o``, ``d`` and ``x`` for; octal, decimal and hexadecimal respectively. Example:. .. code-block:: console. $ llvm-strings --radix=o test.o; 1054 _Z5hellov; 1066 .rela.text; 1101 .comment; 1112 some_bss; 1123 .bss; 1130 test.cpp; 1141 main; $ llvm-strings --radix=d test.o; 556 _Z5hellov; 566 .rela.text; 577 .comment; 586 some_bss; 595 .bss; 600 test.cpp; 609 main; $ llvm-strings -t x test.o; 22c _Z5hellov; 236 .rela.text; 241 .comment; 24a some_bss; 253 .bss; 258 test.cpp; 261 main. .. option:: --version. Display the version of the :program:`llvm-strings` executable. .. option:: @<FILE>. Read command-line options from response file ``<FILE>``. EXIT STATUS; -----------. :program:`llvm-strings` exits with a n",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst:1607,test,test,1607,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst,1,['test'],['test']
Testability,"ck Offset: -16 (0xfffffffffffffff0) [DW_OP_fbreg]; [0x0000000055][003] 2 {Parameter} 'ParamUnsigned' -> [0x00000000b5]'unsigned int'; [0x0000000055][004] {Coverage} 100.00%; [0x0000000056][004] {Location}; [0x0000000056][005] {Entry} Stack Offset: -20 (0xffffffffffffffec) [DW_OP_fbreg]; [0x000000008d][003] 4 {TypeAlias} 'INTEGER' -> [0x0000000099]'int'; [0x0000000000][003] 2 {Line} {NewStatement} '/test.cpp'; [0x0000000000][003] {Code} 'pushq	%rbp'; [0x0000000001][003] {Code} 'movq	%rsp, %rbp'; [0x0000000004][003] {Code} 'movb	%dl, %al'; [0x0000000006][003] {Code} 'movq	%rdi, -0x10(%rbp)'; [0x000000000a][003] {Code} 'movl	%esi, -0x14(%rbp)'; [0x000000000d][003] {Code} 'andb	$0x1, %al'; [0x000000000f][003] {Code} 'movb	%al, -0x15(%rbp)'; [0x0000000012][003] 3 {Line} {NewStatement} {PrologueEnd} '/test.cpp'; [0x0000000012][003] {Code} 'testb	$0x1, -0x15(%rbp)'; [0x0000000016][003] {Code} 'je	0x13'; [0x0000000032][003] 8 {Line} '/test.cpp'; [0x0000000032][003] {Code} 'movl	%eax, -0x4(%rbp)'; [0x0000000035][003] 9 {Line} {NewStatement} '/test.cpp'; [0x0000000035][003] {Code} 'movl	-0x4(%rbp), %eax'; [0x0000000038][003] {Code} 'popq	%rbp'; [0x0000000039][003] {Code} 'retq'; [0x000000003a][003] 9 {Line} {NewStatement} {EndSequence} '/test.cpp'. -----------------------------; Element Total Printed; -----------------------------; Scopes 3 3; Symbols 4 4; Types 5 5; Lines 25 25; -----------------------------; Total 37 37. Scope Sizes:; 189 (100.00%) : [0x000000000b][001] {CompileUnit} 'test.cpp'; 110 ( 58.20%) : [0x000000002a][002] 2 {Function} extern not_inlined 'foo' -> [0x0000000099]'int'; 27 ( 14.29%) : [0x0000000071][003] {Block}. Totals by lexical level:; [001]: 189 (100.00%); [002]: 110 ( 58.20%); [003]: 27 ( 14.29%). The **Scope Sizes** table shows the contribution in bytes to the debug; information by each scope, which can be used to determine unexpected; size changes in the DWARF sections between different versions of the; same toolchain. .. code-block:: none. [0x00",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:58064,test,test,58064,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['test'],['test']
Testability,"ck all of your preconditions and; assumptions, you never know when a bug (not necessarily even yours) might be; caught early by an assertion, which reduces debugging time dramatically. The; ""``<cassert>``"" header file is probably already included by the header files you; are using, so it doesn't cost anything to use it. To further assist with debugging, make sure to put some kind of error message in; the assertion statement, which is printed if the assertion is tripped. This; helps the poor debugger make sense of why an assertion is being made and; enforced, and hopefully what to do about it. Here is one complete example:. .. code-block:: c++. inline Value *getOperand(unsigned I) {; assert(I < Operands.size() && ""getOperand() out of range!"");; return Operands[I];; }. Here are more examples:. .. code-block:: c++. assert(Ty->isPointerType() && ""Can't allocate a non-pointer type!"");. assert((Opcode == Shl || Opcode == Shr) && ""ShiftInst Opcode invalid!"");. assert(idx < getNumSuccessors() && ""Successor # out of range!"");. assert(V1.getType() == V2.getType() && ""Constant types must be identical!"");. assert(isa<PHINode>(Succ->front()) && ""Only works on PHId BBs!"");. You get the idea. In the past, asserts were used to indicate a piece of code that should not be; reached. These were typically of the form:. .. code-block:: c++. assert(0 && ""Invalid radix for integer literal"");. This has a few issues, the main one being that some compilers might not; understand the assertion, or warn about a missing return in builds where; assertions are compiled out. Today, we have something much better: ``llvm_unreachable``:. .. code-block:: c++. llvm_unreachable(""Invalid radix for integer literal"");. When assertions are enabled, this will print the message if it's ever reached; and then exit the program. When assertions are disabled (i.e. in release; builds), ``llvm_unreachable`` becomes a hint to compilers to skip generating; code for this branch. If the compiler does not support this, it",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst:45990,assert,assert,45990,interpreter/llvm-project/llvm/docs/CodingStandards.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst,1,['assert'],['assert']
Testability,"ck_tryrdlock; pthread_rwlock_tryrwlock; lck_mtx_try_lock; lck_rw_try_lock_exclusive; lck_rw_try_lock_shared; pthread_mutex_unlock; pthread_rwlock_unlock; lck_mtx_unlock; lck_rw_done. pthread_mutex_t mtx;. void test() {; pthread_mutex_lock(&mtx);; pthread_mutex_lock(&mtx);; // warn: this lock has already been acquired; }. lck_mtx_t lck1, lck2;. void test() {; lck_mtx_lock(&lck1);; lck_mtx_lock(&lck2);; lck_mtx_unlock(&lck1);; // warn: this was not the most recently acquired lock; }. lck_mtx_t lck1, lck2;. void test() {; if (lck_mtx_try_lock(&lck1) == 0); return;. lck_mtx_lock(&lck2);; lck_mtx_unlock(&lck1);; // warn: this was not the most recently acquired lock; }. alpha.unix.SimpleStream; (C); Check for misuses of stream APIs:; fopen; fclose(demo checker, the subject of the demo; (Slides; ,Video); by Anna Zaks and Jordan Rose presented at the ; 2012 LLVM Developers' Meeting). void test() {; FILE *F = fopen(""myfile.txt"", ""w"");; } // warn: opened file is never closed. void test() {; FILE *F = fopen(""myfile.txt"", ""w"");. if (F); fclose(F);. fclose(F); // warn: closing a previously closed file stream; }. alpha.unix.Stream; (C); Check stream handling functions:fopen; tmpfile; fclose; fread; fwrite; fseek; ftell; rewind; fgetpos; fsetpos; clearerr; feof; ferror; fileno. void test() {; FILE *p = fopen(""foo"", ""r"");; } // warn: opened file is never closed. void test() {; FILE *p = fopen(""foo"", ""r"");; fseek(p, 1, SEEK_SET); // warn: stream pointer might be NULL; fclose(p);; }. void test() {; FILE *p = fopen(""foo"", ""r"");. if (p); fseek(p, 1, 3);; // warn: third arg should be SEEK_SET, SEEK_END, or SEEK_CUR. fclose(p);; }. void test() {; FILE *p = fopen(""foo"", ""r"");; fclose(p);; fclose(p); // warn: already closed; }. void test() {; FILE *p = tmpfile();; ftell(p); // warn: stream pointer might be NULL; fclose(p);; }. alpha.unix.cstring.BufferOverlap; (C); Checks for overlap in two buffer arguments; applies to:; memcpy; mempcpy. void test() {; int a[4] = {0};; memcpy(a + 2, a + 1,",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html:14181,test,test,14181,interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,1,['test'],['test']
Testability,"ckers. Name, DescriptionExample. alpha.security.ArrayBound; (C); Warn about buffer overflows (older checker). void test() {; char *s = """";; char c = s[1]; // warn; }. struct seven_words {; int c[7];; };. void test() {; struct seven_words a, *p;; p = &a; p[0] = a;; p[1] = a;; p[2] = a; // warn; }. // note: requires unix.Malloc or; // alpha.unix.MallocWithAnnotations checks enabled.; void test() {; int *p = malloc(12);; p[3] = 4; // warn; }. void test() {; char a[2];; int *b = (int*)a;; b[1] = 3; // warn; }. alpha.security.ArrayBoundV2; (C); Warn about buffer overflows (newer checker). void test() {; char *s = """";; char c = s[1]; // warn; }. void test() {; int buf[100];; int *p = buf;; p = p + 99;; p[1] = 1; // warn; }. // note: compiler has internal check for this.; // Use -Wno-array-bounds to suppress compiler warning.; void test() {; int buf[100][100];; buf[0][-1] = 1; // warn; }. // note: requires alpha.security.taint check turned on.; void test() {; char s[] = ""abc"";; int x = getchar();; char c = s[x]; // warn: index is tainted; }. alpha.security.MallocOverflow; (C); Check for overflows in the arguments to malloc(). void test(int n) {; void *p = malloc(n * sizeof(int)); // warn; }. alpha.security.MmapWriteExec; (C); Warn on mmap() calls that are both writable and executable. void test(int n) {; void *c = mmap(NULL, 32, PROT_READ | PROT_WRITE | PROT_EXEC,; MAP_PRIVATE | MAP_ANON, -1, 0);; // warn: Both PROT_WRITE and PROT_EXEC flags are set. This can lead to; // exploitable memory regions, which could be overwritten with malicious; // code; }. alpha.security.ReturnPtrRange; (C); Check for an out-of-bound pointer being returned to callers. static int A[10];. int *test() {; int *p = A + 10;; return p; // warn; }. int test(void) {; int x;; return x; // warn: undefined or garbage returned; }. alpha.security.taint.TaintPropagation; (C); Generate taint information used by other checkers. void test() {; char x = getchar(); // 'x' marked as tainted; system(&x); // warn: u",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html:10768,test,test,10768,interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,1,['test'],['test']
Testability,"cks, e.g.:. $ clang -cc1 -analyze -analyzer-checker=core test.cc -analyze-function='foo(int)'. The fully qualified name can be found from the; -analyzer-display-progress output. The bug reporter mechanism removes path diagnostics inside intermediate; function calls that have returned by the time the bug was found and contain; no interesting pieces. Usually it is up to the checkers to produce more; interesting pieces by adding custom BugReporterVisitor objects.; However, you can disable path pruning while debugging with the; -analyzer-config prune-paths=false option. Visualizing the Analysis; To dump the AST, which often helps understanding how the program should; behave:. $ clang -cc1 -ast-dump test.c. To view/dump CFG use debug.ViewCFG or debug.DumpCFG; checkers:. $ clang -cc1 -analyze -analyzer-checker=debug.ViewCFG test.c. ExplodedGraph (the state graph explored by the analyzer) can be; visualized with another debug checker:. $ clang -cc1 -analyze -analyzer-checker=debug.ViewExplodedGraph test.c. Or, equivalently, with -analyzer-viz-egraph-graphviz; option, which does the same thing - dumps the exploded graph in graphviz; .dot format.; You can convert .dot files into other formats - in; particular, converting to .svg and viewing in your web; browser might be more comfortable than using a .dot viewer:. $ dot -Tsvg ExprEngine-501e2e.dot -o ExprEngine-501e2e.svg. The -trim-egraph option removes all paths except those; leading to bug reports from the exploded graph dump. This is useful; because exploded graphs are often huge and hard to navigate.; Viewing ExplodedGraph is your most powerful tool for understanding; the analyzer's false positives, because it gives comprehensive information; on every decision made by the analyzer across all analysis paths.; There are more debug checkers available. To see all available debug checkers:. $ clang -cc1 -analyzer-checker-help | grep ""debug"". Debug Prints and Tricks; To view ""half-baked"" ExplodedGraph while debugging, jump to a",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html:21402,test,test,21402,interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,1,['test'],['test']
Testability,"cl>(Matcher, FromUnit);. Now we create the Importer and do the import:. .. code-block:: cpp. ASTImporter Importer(ToUnit->getASTContext(), ToUnit->getFileManager(),; FromUnit->getASTContext(), FromUnit->getFileManager(),; /*MinimalImport=*/true);; llvm::Expected<Decl *> ImportedOrErr = Importer.Import(From);. The ``Import`` call returns with ``llvm::Expected``, so, we must check for any error.; Please refer to the `error handling <https://llvm.org/docs/ProgrammersManual.html#recoverable-errors>`_ documentation for details. .. code-block:: cpp. if (!ImportedOrErr) {; llvm::Error Err = ImportedOrErr.takeError();; llvm::errs() << ""ERROR: "" << Err << ""\n"";; consumeError(std::move(Err));; return 1;; }. If there's no error then we can get the underlying value.; In this example we will print the AST of the ""to"" context. .. code-block:: cpp. Decl *Imported = *ImportedOrErr;; Imported->getTranslationUnitDecl()->dump();. Since we set **minimal import** in the constructor of the importer, the AST will not contain the declaration of the members (once we run the test tool). .. code-block:: bash. TranslationUnitDecl 0x68b9a8 <<invalid sloc>> <invalid sloc>; `-CXXRecordDecl 0x6c7e30 <line:2:7, col:13> col:13 class MyClass definition; `-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal; |-DefaultConstructor exists trivial needs_implicit; |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param; |-MoveConstructor exists simple trivial needs_implicit; |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param; |-MoveAssignment exists simple trivial needs_implicit; `-Destructor simple irrelevant trivial needs_implicit. We'd like to get the members too, so, we use ``ImportDefinition`` to copy the whole definition of ``MyClass`` into the ""to"" context.; Then we dump the AST again. .. code-block:: cpp. if (llvm::Error Err = Importer.ImportDefinition(From)) {; llvm::errs() << ""ERROR: "" << Err << ""\n"";; c",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTImporter.rst:6381,test,test,6381,interpreter/llvm-project/clang/docs/LibASTImporter.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTImporter.rst,1,['test'],['test']
Testability,"class: TH1F at 2240; key: h7 points to an object of class: TH1F at 2582; key: h8 points to an object of class: TH1F at 2937; key: h9 points to an object of class: TH1F at 3293; key: h10 points to an object of class: TH1F at 3639; key: h11 points to an object of class: TH1F at 3986; key: h12 points to an object of class: TH1F at 4339; key: h13 points to an object of class: TH1F at 4694; key: h14 points to an object of class: TH1F at 5038; ```. In addition to the list of keys, **`TFile`** also keeps two other lists:; **`TFile`**`::fFree` is a **`TList`** of free blocks used to recycle; freed up space in the file. ROOT tries to find the best free block. If a; free block matches the size of the new object to be stored, the object; is written in the free block and this free block is deleted from the; list. If not, the first free block bigger than the object is used.; `TFile::fListHead` contains a sorted list (**`TSortedList`**) of objects; in memory. The diagram below illustrates the logical view of the; **`TFile`** and **`TKey`**. ![ROOT File/Directory/Key description](pictures/030000E7.png). ### Viewing the Logical File Contents. **`TFile`** is a descendent of **`TDirectory`**, which means it behaves; like a **`TDirectory`**. We can list the contents, print the name, and; create subdirectories. In a ROOT session, you are always in a directory; and the directory you are in is called the current directory and is; stored in the global variable ***`gDirectory`***. Let us look at a more; detailed example of a ROOT file and its role as the current directory.; First, we create a ROOT file by executing a sample script. ``` {.cpp}; root[] .x $ROOTSYS/tutorials/hsimple.C; ```. Now you should have `hsimple.root` in your directory. The file was; closed by the script so we have to open it again to work with it. We; open the file with the intent to update it, and list its contents. ``` {.cpp}; root[] TFile f (""hsimple.root"",""UPDATE""); root[] f.ls(); TFile** hsimple.root; TFile* hsimp",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/InputOutput.md:19800,log,logical,19800,documentation/users-guide/InputOutput.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/InputOutput.md,1,['log'],['logical']
Testability,"close``; (demo checker, the subject of the demo (`Slides <https://llvm.org/devmtg/2012-11/Zaks-Rose-Checker24Hours.pdf>`_ ,; `Video <https://youtu.be/kdxlsP5QVPw>`_) by Anna Zaks and Jordan Rose presented at the; `2012 LLVM Developers' Meeting <https://llvm.org/devmtg/2012-11/>`_). .. code-block:: c. void test() {; FILE *F = fopen(""myfile.txt"", ""w"");; } // warn: opened file is never closed. void test() {; FILE *F = fopen(""myfile.txt"", ""w"");. if (F); fclose(F);. fclose(F); // warn: closing a previously closed file stream; }. .. _alpha-unix-Stream:. alpha.unix.Stream (C); """"""""""""""""""""""""""""""""""""""""""; Check stream handling functions: ``fopen, tmpfile, fclose, fread, fwrite, fseek, ftell, rewind, fgetpos,``; ``fsetpos, clearerr, feof, ferror, fileno``. .. code-block:: c. void test() {; FILE *p = fopen(""foo"", ""r"");; } // warn: opened file is never closed. void test() {; FILE *p = fopen(""foo"", ""r"");; fseek(p, 1, SEEK_SET); // warn: stream pointer might be NULL; fclose(p);; }. void test() {; FILE *p = fopen(""foo"", ""r"");. if (p); fseek(p, 1, 3);; // warn: third arg should be SEEK_SET, SEEK_END, or SEEK_CUR. fclose(p);; }. void test() {; FILE *p = fopen(""foo"", ""r"");; fclose(p);; fclose(p); // warn: already closed; }. void test() {; FILE *p = tmpfile();; ftell(p); // warn: stream pointer might be NULL; fclose(p);; }. .. _alpha-unix-cstring-BufferOverlap:. alpha.unix.cstring.BufferOverlap (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Checks for overlap in two buffer arguments. Applies to: ``memcpy, mempcpy, wmemcpy, wmempcpy``. .. code-block:: c. void test() {; int a[4] = {0};; memcpy(a + 2, a + 1, 8); // warn; }. .. _alpha-unix-cstring-NotNullTerminated:. alpha.unix.cstring.NotNullTerminated (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for arguments which are not null-terminated strings; applies to: ``strlen, strnlen, strcpy, strncpy, strcat, strncat, wcslen, wcsnlen``. .. code-block:: c. void test() {; int y = strlen((char *)&test); // warn; }. .. _alpha-unix-cstring-OutOfBoun",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:77372,test,test,77372,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"clude <new>. class A {; public:; ~A();; };. class B {};. void test() {; A *a = new A;; new(a) B;; a->~A();; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. void f(A*);. void test() {; B *b = new B;; new(b) C;; f(b); // warn; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return static_cast<A*>(b); // warn; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return dynamic_cast<A*>(b); // warn; }. undefbehavior.ObjLocChanges; (C++); Undefined behavior: the program must ensure that an object occupies the same; storage location when the implicit or explicit destructor call takes place.; Source: C++11 3.8p8. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B b;; new (&b) A;; } // warn. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B *b = new B;; new (b) A;; delete b; // warn; }. undefbehavior.ExprEvalOrderUndef; (C, C++03); Undefined behavior: a scalar object shall have its stored value modified at; most once by the evaluation of an expression.; Note: most cases are currently handled by the Clang core (search for 'multiple; unsequenced modifications' warning in Clang tests).; Source: C++03 5p4. int test () {; int i = 0;; i = ++i + 1; // warn; return i;; }. undefbehavior.StaticInitReentered; (C++); Undefined behavior: static declaration is re-entered while the object is being; initialized.; Source: C++11 6.7p4. int test(int i) {; static int s = test(2 * i); // warn; return i + 1;; }. undefbehavior.ConstModified; (C, C++); Undefined behavior: const object is being modified.; Source: C++03 7.1.5.1p4, C++11 7.1.6.1p4. void test() {; const int *cp = new const int (0);; int *p = const_cast<int *>(cp);; *p = 1; // warn; delete p;; }. class C {; public :; int i;; C();; };. void test() {; const C cb;. C* cp = const_cast<C *>(&cb);; cp->",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:8415,test,test,8415,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,clude/clc/math/fma.h; libclc/generic/include/clc/math/fmod.h; libclc/generic/include/clc/math/fract.h; libclc/generic/include/clc/math/frexp.h; libclc/generic/include/clc/math/half_cos.h; libclc/generic/include/clc/math/half_divide.h; libclc/generic/include/clc/math/half_exp.h; libclc/generic/include/clc/math/half_exp10.h; libclc/generic/include/clc/math/half_exp2.h; libclc/generic/include/clc/math/half_log.h; libclc/generic/include/clc/math/half_log10.h; libclc/generic/include/clc/math/half_log2.h; libclc/generic/include/clc/math/half_powr.h; libclc/generic/include/clc/math/half_recip.h; libclc/generic/include/clc/math/half_rsqrt.h; libclc/generic/include/clc/math/half_sin.h; libclc/generic/include/clc/math/half_sqrt.h; libclc/generic/include/clc/math/half_tan.h; libclc/generic/include/clc/math/hypot.h; libclc/generic/include/clc/math/ilogb.h; libclc/generic/include/clc/math/ldexp.h; libclc/generic/include/clc/math/lgamma.h; libclc/generic/include/clc/math/lgamma_r.h; libclc/generic/include/clc/math/log.h; libclc/generic/include/clc/math/log10.h; libclc/generic/include/clc/math/log1p.h; libclc/generic/include/clc/math/log2.h; libclc/generic/include/clc/math/logb.h; libclc/generic/include/clc/math/mad.h; libclc/generic/include/clc/math/maxmag.h; libclc/generic/include/clc/math/minmag.h; libclc/generic/include/clc/math/modf.h; libclc/generic/include/clc/math/native_cos.h; libclc/generic/include/clc/math/native_divide.h; libclc/generic/include/clc/math/native_exp.h; libclc/generic/include/clc/math/native_exp10.h; libclc/generic/include/clc/math/native_exp2.h; libclc/generic/include/clc/math/native_log.h; libclc/generic/include/clc/math/native_log10.h; libclc/generic/include/clc/math/native_log2.h; libclc/generic/include/clc/math/native_powr.h; libclc/generic/include/clc/math/native_recip.h; libclc/generic/include/clc/math/native_rsqrt.h; libclc/generic/include/clc/math/native_sin.h; libclc/generic/include/clc/math/native_sqrt.h; libclc/generic/include/clc/math/native_t,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:155629,log,log,155629,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['log'],['log']
Testability,"cluded by the header files you; are using, so it doesn't cost anything to use it. To further assist with debugging, make sure to put some kind of error message in; the assertion statement, which is printed if the assertion is tripped. This; helps the poor debugger make sense of why an assertion is being made and; enforced, and hopefully what to do about it. Here is one complete example:. .. code-block:: c++. inline Value *getOperand(unsigned I) {; assert(I < Operands.size() && ""getOperand() out of range!"");; return Operands[I];; }. Here are more examples:. .. code-block:: c++. assert(Ty->isPointerType() && ""Can't allocate a non-pointer type!"");. assert((Opcode == Shl || Opcode == Shr) && ""ShiftInst Opcode invalid!"");. assert(idx < getNumSuccessors() && ""Successor # out of range!"");. assert(V1.getType() == V2.getType() && ""Constant types must be identical!"");. assert(isa<PHINode>(Succ->front()) && ""Only works on PHId BBs!"");. You get the idea. In the past, asserts were used to indicate a piece of code that should not be; reached. These were typically of the form:. .. code-block:: c++. assert(0 && ""Invalid radix for integer literal"");. This has a few issues, the main one being that some compilers might not; understand the assertion, or warn about a missing return in builds where; assertions are compiled out. Today, we have something much better: ``llvm_unreachable``:. .. code-block:: c++. llvm_unreachable(""Invalid radix for integer literal"");. When assertions are enabled, this will print the message if it's ever reached; and then exit the program. When assertions are disabled (i.e. in release; builds), ``llvm_unreachable`` becomes a hint to compilers to skip generating; code for this branch. If the compiler does not support this, it will fall back; to the ""abort"" implementation. Use ``llvm_unreachable`` to mark a specific point in code that should never be; reached. This is especially desirable for addressing warnings about unreachable; branches, etc., but can be used",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst:46232,assert,asserts,46232,interpreter/llvm-project/llvm/docs/CodingStandards.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst,1,['assert'],['asserts']
Testability,"cmake_minimum_required(VERSION 3.20.0). if(NOT DEFINED LLVM_COMMON_CMAKE_UTILS); set(LLVM_COMMON_CMAKE_UTILS ${CMAKE_CURRENT_SOURCE_DIR}/../cmake); endif(); include(${LLVM_COMMON_CMAKE_UTILS}/Modules/CMakePolicy.cmake; NO_POLICY_SCOPE). # If we are not building as a part of LLVM, build Clang as an; # standalone project, using LLVM as an external library:; if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR); project(Clang); set(CLANG_BUILT_STANDALONE TRUE); endif(). # Must go below project(..); include(GNUInstallDirs). if(CLANG_BUILT_STANDALONE); set(CMAKE_CXX_STANDARD 17 CACHE STRING ""C++ standard to conform to""); set(CMAKE_CXX_STANDARD_REQUIRED YES); set(CMAKE_CXX_EXTENSIONS NO). if(NOT MSVC_IDE); set(LLVM_ENABLE_ASSERTIONS ${ENABLE_ASSERTIONS}; CACHE BOOL ""Enable assertions""); # Assertions should follow llvm-config's.; mark_as_advanced(LLVM_ENABLE_ASSERTIONS); endif(). find_package(LLVM REQUIRED HINTS ""${LLVM_CMAKE_DIR}""); list(APPEND CMAKE_MODULE_PATH ""${LLVM_DIR}""). # Turn into CACHE PATHs for overwritting; set(LLVM_INCLUDE_DIRS ${LLVM_INCLUDE_DIRS} CACHE PATH ""Path to llvm/include and any other header dirs needed""); set(LLVM_BINARY_DIR ""${LLVM_BINARY_DIR}"" CACHE PATH ""Path to LLVM build tree""); set(LLVM_MAIN_SRC_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/../llvm"" CACHE PATH ""Path to LLVM source tree""); set(LLVM_TOOLS_BINARY_DIR ""${LLVM_TOOLS_BINARY_DIR}"" CACHE PATH ""Path to llvm/bin""); set(LLVM_LIBRARY_DIR ""${LLVM_LIBRARY_DIR}"" CACHE PATH ""Path to llvm/lib""). find_program(LLVM_TABLEGEN_EXE ""llvm-tblgen"" ${LLVM_TOOLS_BINARY_DIR}; NO_DEFAULT_PATH). # They are used as destination of target generators.; set(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/bin); set(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib${LLVM_LIBDIR_SUFFIX}); if(WIN32 OR CYGWIN); # DLL platform -- put DLLs into bin.; set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_RUNTIME_OUTPUT_INTDIR}); else(); set(LLVM_SHLIB_OUTPUT_INTDIR ${LLVM_LIBRARY_OUTPUT_INTDIR}); endif(). opt",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:779,assert,assertions,779,interpreter/llvm-project/clang/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt,1,['assert'],['assertions']
Testability,"code name 1>,<opcode name 2>,... Specify the opcode to measure, by name. Several opcodes can be specified as; a comma-separated list. See example 1 for details.; Either `opcode-index`, `opcode-name` or `snippets-file` must be set. .. option:: --snippets-file=<filename>. Specify the custom code snippet to measure. See example 2 for details.; Either `opcode-index`, `opcode-name` or `snippets-file` must be set. .. option:: --mode=[latency|uops|inverse_throughput|analysis]. Specify the run mode. Note that some modes have additional requirements and options. `latency` mode can be make use of either RDTSC or LBR.; `latency[LBR]` is only available on X86 (at least `Skylake`).; To run in `latency` mode, a positive value must be specified; for `x86-lbr-sample-period` and `--repetition-mode=loop`. In `analysis` mode, you also need to specify at least one of the; `-analysis-clusters-output-file=` and `-analysis-inconsistencies-output-file=`. .. option:: --benchmark-phase=[prepare-snippet|prepare-and-assemble-snippet|assemble-measured-code|measure]. By default, when `-mode=` is specified, the generated snippet will be executed; and measured, and that requires that we are running on the hardware for which; the snippet was generated, and that supports performance measurements.; However, it is possible to stop at some stage before measuring. Choices are:; * ``prepare-snippet``: Only generate the minimal instruction sequence.; * ``prepare-and-assemble-snippet``: Same as ``prepare-snippet``, but also dumps an excerpt of the sequence (hex encoded).; * ``assemble-measured-code``: Same as ``prepare-and-assemble-snippet``. but also creates the full sequence that can be dumped to a file using ``--dump-object-to-disk``.; * ``measure``: Same as ``assemble-measured-code``, but also runs the measurement. .. option:: --x86-lbr-sample-period=<nBranches/sample>. Specify the LBR sampling period - how many branches before we take a sample.; When a positive value is specified for this option and w",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst:10485,benchmark,benchmark-phase,10485,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,1,['benchmark'],['benchmark-phase']
Testability,"code size. - `TEST_SUITE_USE_PERF`. Use the `perf` tool for time measurement instead of the `timeit` tool that; comes with the test-suite. The `perf` is usually available on linux systems. - `TEST_SUITE_SPEC2000_ROOT`, `TEST_SUITE_SPEC2006_ROOT`, `TEST_SUITE_SPEC2017_ROOT`, ... Specify installation directories of external benchmark suites. You can find; more information about expected versions or usage in the README files in the; `External` directory (such as `External/SPEC/README`). ### Common CMake Flags. - `-GNinja`. Generate build files for the ninja build tool. - `-Ctest-suite/cmake/caches/<cachefile.cmake>`. Use a CMake cache. The test-suite comes with several CMake caches which; predefine common or tricky build configurations. Displaying and Analyzing Results; --------------------------------. The `compare.py` script displays and compares result files. A result file is; produced when invoking lit with the `-o filename.json` flag. Example usage:. - Basic Usage:. ```text; % test-suite/utils/compare.py baseline.json; Warning: 'test-suite :: External/SPEC/CINT2006/403.gcc/403.gcc.test' has No metrics!; Tests: 508; Metric: exec_time. Program baseline. INT2006/456.hmmer/456.hmmer 1222.90; INT2006/464.h264ref/464.h264ref 928.70; ...; baseline; count 506.000000; mean 20.563098; std 111.423325; min 0.003400; 25% 0.011200; 50% 0.339450; 75% 4.067200; max 1222.896800; ```. - Show compile_time or text segment size metrics:. ```bash; % test-suite/utils/compare.py -m compile_time baseline.json; % test-suite/utils/compare.py -m size.__text baseline.json; ```. - Compare two result files and filter short running tests:. ```bash; % test-suite/utils/compare.py --filter-short baseline.json experiment.json; ...; Program baseline experiment diff. SingleSour.../Benchmarks/Linpack/linpack-pc 5.16 4.30 -16.5%; MultiSourc...erolling-dbl/LoopRerolling-dbl 7.01 7.86 12.2%; SingleSour...UnitTests/Vectorizer/gcc-loops 3.89 3.54 -9.0%; ...; ```. - Merge multiple baseline and experiment resu",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:7440,test,test-suite,7440,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['test'],['test-suite']
Testability,"code-block:: bash. # Comments are supported; [always]; fun:always_instrument; fun:log_arg1=arg1 # Log the first argument for the function. [never]; fun:never_instrument. These files can be provided through the ``-fxray-attr-list=`` flag to clang.; You may have multiple files loaded through multiple instances of the flag. XRay Runtime Library; --------------------. The XRay Runtime Library is part of the compiler-rt project, which implements; the runtime components that perform the patching and unpatching of inserted; instrumentation points. When you use ``clang`` to link your binaries and the; ``-fxray-instrument`` flag, it will automatically link in the XRay runtime. The default implementation of the XRay runtime will enable XRay instrumentation; before ``main`` starts, which works for applications that have a short; lifetime. This implementation also records all function entry and exit events; which may result in a lot of records in the resulting trace. Also by default the filename of the XRay trace is ``xray-log.XXXXXX`` where the; ``XXXXXX`` part is randomly generated. These options can be controlled through the ``XRAY_OPTIONS`` environment; variable, where we list down the options and their defaults below. +-------------------+-----------------+---------------+------------------------+; | Option | Type | Default | Description |; +===================+=================+===============+========================+; | patch_premain | ``bool`` | ``false`` | Whether to patch |; | | | | instrumentation points |; | | | | before main. |; +-------------------+-----------------+---------------+------------------------+; | xray_mode | ``const char*`` | ``""""`` | Default mode to |; | | | | install and initialize |; | | | | before ``main``. |; +-------------------+-----------------+---------------+------------------------+; | xray_logfile_base | ``const char*`` | ``xray-log.`` | Filename base for the |; | | | | XRay logfile. |; +-------------------+-----------------+------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRay.rst:5245,log,log,5245,interpreter/llvm-project/llvm/docs/XRay.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRay.rst,1,['log'],['log']
Testability,"code. * ``-fcuda-flush-denormals-to-zero`` (default: off) When this is enabled,; floating point operations may flush `denormal; <https://en.wikipedia.org/wiki/Denormal_number>`_ inputs and/or outputs to 0.; Operations on denormal numbers are often much slower than the same operations; on normal numbers. * ``-fcuda-approx-transcendentals`` (default: off) When this is enabled, the; compiler may emit calls to faster, approximate versions of transcendental; functions, instead of using the slower, fully IEEE-compliant versions. For; example, this flag allows clang to emit the ptx ``sin.approx.f32``; instruction. This is implied by ``-ffast-math``. Standard library support; ========================. In clang and nvcc, most of the C++ standard library is not supported on the; device side. ``<math.h>`` and ``<cmath>``; ----------------------------. In clang, ``math.h`` and ``cmath`` are available and `pass; <https://github.com/llvm/llvm-test-suite/blob/main/External/CUDA/math_h.cu>`_; `tests; <https://github.com/llvm/llvm-test-suite/blob/main/External/CUDA/cmath.cu>`_; adapted from libc++'s test suite. In nvcc ``math.h`` and ``cmath`` are mostly available. Versions of ``::foof``; in namespace std (e.g. ``std::sinf``) are not available, and where the standard; calls for overloads that take integral arguments, these are usually not; available. .. code-block:: c++. #include <math.h>; #include <cmath.h>. // clang is OK with everything in this function.; __device__ void test() {; std::sin(0.); // nvcc - ok; std::sin(0); // nvcc - error, because no std::sin(int) override is available.; sin(0); // nvcc - same as above. sinf(0.); // nvcc - ok; std::sinf(0.); // nvcc - no such function; }. ``<std::complex>``; ------------------. nvcc does not officially support ``std::complex``. It's an error to use; ``std::complex`` in ``__device__`` code, but it often works in ``__host__; __device__`` code due to nvcc's interpretation of the ""wrong-side rule"" (see; below). However, we have heard fr",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CompileCudaWithLLVM.rst:5916,test,tests,5916,interpreter/llvm-project/llvm/docs/CompileCudaWithLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CompileCudaWithLLVM.rst,1,['test'],['tests']
Testability,"col:14> col:14 implicit struct X; `-FieldDecl 0xe91600 <col:23, col:27> col:27 i 'int'. Error propagation; """""""""""""""""""""""""""""""""". If there is a dependent node we have to import before we could import a given node then the import error associated to the dependency propagates to the dependant node.; Let's modify the previous example and import a ``FieldDecl`` instead of the ``ClassTemplateSpecializationDecl``. .. code-block:: cpp. auto Matcher = fieldDecl(hasName(""i2""));; auto *From = getFirstDecl<FieldDecl>(Matcher, FromUnit);. In this case we can see that an error is associated (``getImportDeclErrorIfAny``) to the specialization also, not just to the field:. .. code-block:: cpp. llvm::Expected<Decl *> ImportedOrErr = Importer.Import(From);; if (!ImportedOrErr) {; llvm::Error Err = ImportedOrErr.takeError();; consumeError(std::move(Err));. // check that the ClassTemplateSpecializationDecl is also marked as; // erroneous.; auto *FromSpec = getFirstDecl<ClassTemplateSpecializationDecl>(; classTemplateSpecializationDecl(hasName(""X"")), FromUnit);; assert(Importer.getImportDeclErrorIfAny(FromSpec));; // Btw, the error is also set for the FieldDecl.; assert(Importer.getImportDeclErrorIfAny(From));; return 1;; }. Polluted AST; """""""""""""""""""""""". We may recognize an error during the import of a dependent node. However, by that time, we had already created the dependant.; In these cases we do not remove the existing erroneous node from the ""to"" context, rather we associate an error to that node.; Let's extend the previous example with another class ``Y``.; This class has a forward definition in the ""to"" context, but its definition is in the ""from"" context.; We'd like to import the definition, but it contains a member whose type conflicts with the type in the ""to"" context:. .. code-block:: cpp. std::unique_ptr<ASTUnit> ToUnit = buildASTFromCode(; R""(; // primary template; template <typename T>; struct X {};; // explicit specialization; template<>; struct X<int> { int i; };. class Y;; )",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTImporter.rst:16191,assert,assert,16191,interpreter/llvm-project/clang/docs/LibASTImporter.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTImporter.rst,1,['assert'],['assert']
Testability,"column number. The printed column numbers count bytes from the beginning of the; line; take care if your source contains multibyte characters. .. _opt_fshow-source-location:. .. option:: -f[no-]show-source-location. Print source file/line/column information in diagnostic. This option, which defaults to on, controls whether or not Clang; prints the filename, line number and column number of a diagnostic.; For example, when this is enabled, Clang will print something like:. ::. test.c:28:8: warning: extra tokens at end of #endif directive [-Wextra-tokens]; #endif bad; ^; //. When this is disabled, Clang will not print the ""test.c:28:8: ""; part. .. _opt_fcaret-diagnostics:. .. option:: -f[no-]caret-diagnostics. Print source line and ranges from source code in diagnostic.; This option, which defaults to on, controls whether or not Clang; prints the source line, source ranges, and caret when emitting a; diagnostic. For example, when this is enabled, Clang will print; something like:. ::. test.c:28:8: warning: extra tokens at end of #endif directive [-Wextra-tokens]; #endif bad; ^; //. .. option:: -f[no-]color-diagnostics. This option, which defaults to on when a color-capable terminal is; detected, controls whether or not Clang prints diagnostics in color. When this option is enabled, Clang will use colors to highlight; specific parts of the diagnostic, e.g.,. .. nasty hack to not lose our dignity. .. raw:: html. <pre>; <b><span style=""color:black"">test.c:28:8: <span style=""color:magenta"">warning</span>: extra tokens at end of #endif directive [-Wextra-tokens]</span></b>; #endif bad; <span style=""color:green"">^</span>; <span style=""color:green"">//</span>; </pre>. When this is disabled, Clang will just print:. ::. test.c:2:8: warning: extra tokens at end of #endif directive [-Wextra-tokens]; #endif bad; ^; //. If the ``NO_COLOR`` environment variable is defined and not empty; (regardless of value), color diagnostics are disabled. If ``NO_COLOR`` is; defined and ``-fcolor-",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:7045,test,test,7045,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"column numbers, includes 'caret diagnostics', and they; highlight regions of interesting code (e.g. the LHS and RHS of a binop).; * Full diagnostic customization by client (can format diagnostics however they; like, e.g. in an IDE or refactoring tool) through DiagnosticClient interface.; * Built as a framework, can be reused by multiple tools.; * All languages supported linked into same library (no cc1,cc1obj, ...).; * mmap's code in read-only, does not dirty the pages like GCC (mem footprint).; * LLVM License, can be linked into non-GPL projects.; * Full diagnostic control, per diagnostic. Diagnostics are identified by ID.; * Significantly faster than GCC at semantic analysis, parsing, preprocessing; and lexing.; * Defers exposing platform-specific stuff to as late as possible, tracks use of; platform-specific features (e.g. #ifdef PPC) to allow 'portable bytecodes'.; * The lexer doesn't rely on the ""lexer hack"": it has no notion of scope and; does not categorize identifiers as types or variables -- this is up to the; parser to decide. Potential Future Features:. * Fine grained diag control within the source (#pragma enable/disable warning).; * Better token tracking within macros? (Token came from this line, which is; a macro argument instantiated here, recursively instantiated here).; * Fast #import with a module system.; * Dependency tracking: change to header file doesn't recompile every function; that texually depends on it: recompile only those functions that need it.; This is aka 'incremental parsing'. IV. Missing Functionality / Improvements. Lexer:; * Source character mapping. GCC supports ASCII and UTF-8.; See GCC options: -ftarget-charset and -ftarget-wide-charset.; * Universal character support. Experimental in GCC, enabled with; -fextended-identifiers.; * -fpreprocessed mode. Preprocessor:; * #assert/#unassert; * MSExtension: ""L#param"" stringizes to a wide string literal.; * Add support for -M*. Traditional Preprocessor:; * Currently, we have none. :). ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HistoricalNotes/2007-OriginalClangReadme.txt:7563,assert,assert,7563,interpreter/llvm-project/llvm/docs/HistoricalNotes/2007-OriginalClangReadme.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HistoricalNotes/2007-OriginalClangReadme.txt,1,['assert'],['assert']
Testability,"com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests); model of github. A pull request (PR) should contain a set focused changes; organized in one or more [atomic commits](https://en.wikipedia.org/wiki/Atomic_commit#Revision_control).; PRs should be well-documented and well-tested in order to allow other community; members to use, maintain and modify. If the PR contains performance-critical; code consider writing a benchmark against the [rootbench repository](https://github.com/root-project/rootbench). ## Quality Assurance. Each contribution should contain developer documentation in the form of code; comments and sufficient amount of tests in the form of unit and/or integration; tests. Unit tests are relatively small and quick programs focused to check if; small pieces of code and API work as expected. Integration tests are checks; which ensure the synergy between different (unit tested) components. Put in; practice, unit tests verify (member) function behavior whereas integration tests; check classes and their cooperation. The boundary between both kinds of testing; is blurred. ROOT has support for both kinds of tests in the [roottest repository](https://github.com/root-project/roottest); and supports ""inline"" unit tests in each component's `test` folder. Unit testing; uses the [GTest and GMock](https://github.com/google/googletest) infrastructure; along with small ROOT-specific extensions located in; [TestSupport](../core/test_support/). The documentation of GTest; and GMock is rather extensive and we will describe some of the features of; ROOT::TestSupport. In order to write an inline unit test, add a new file in the; nearest to the tested component's `test` folder and call `ROOT_ADD_GTEST` in the; `CMakeLists.txt` file. In many cases using standard GTest facility is sufficient to write a good test.; However, we disallow error messages in gtests, or sometimes we want to test the; error conditions of an interface and its diagnostics. For ex",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/DEVELOPMENT.md:1099,test,tests,1099,README/DEVELOPMENT.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/DEVELOPMENT.md,2,['test'],['tests']
Testability,"comma-delimited list of one or; more verification prefixes that can be used to craft those special comments.; Each prefix must start with a letter and contain only alphanumeric characters,; hyphens, and underscores. ``-verify`` by itself is equivalent to; ``-verify=expected``, meaning that special comments will start with; ``expected``. Using different prefixes makes it easier to have separate; ``RUN:`` lines in the same test file which result in differing diagnostic; behavior. For example:. .. code-block:: c++. // RUN: %clang_cc1 -verify=foo,bar %s. int A = B; // foo-error {{use of undeclared identifier 'B'}}; int C = D; // bar-error {{use of undeclared identifier 'D'}}; int E = F; // expected-error {{use of undeclared identifier 'F'}}. The verifier will recognize ``foo-error`` and ``bar-error`` as special comments; but will not recognize ``expected-error`` as one because the ``-verify`` line; does not contain that as a prefix. Thus, this test would fail verification; because an unexpected diagnostic would appear on the declaration of ``E``. Multiple occurrences accumulate prefixes. For example,; ``-verify -verify=foo,bar -verify=baz`` is equivalent to; ``-verify=expected,foo,bar,baz``. Specifying Diagnostics; ^^^^^^^^^^^^^^^^^^^^^^; Indicating that a line expects an error or a warning is easy. Put a comment; on the line that has the diagnostic, use; ``expected-{error,warning,remark,note}`` to tag if it's an expected error,; warning, remark, or note (respectively), and place the expected text between; ``{{`` and ``}}`` markers. The full text doesn't have to be included, only; enough to ensure that the correct diagnostic was emitted. (Note: full text; should be included in test cases unless there is a compelling reason to use; truncated text instead.). For a full description of the matching behavior, including more complex; matching scenarios, see :ref:`matching <DiagnosticMatching>` below. Here's an example of the most commonly used way to specify expected; diagnos",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:156581,test,test,156581,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,1,['test'],['test']
Testability,"compilation is successful, the LLVM utilities should be able to; assemble, disassemble, analyze, and optimize LLVM bitcode. Code generation; should work as well, although the generated native code may not work on your; platform. Software; --------. Compiling LLVM requires that you have several software packages installed. The; table below lists those required packages. The Package column is the usual name; for the software package that LLVM depends on. The Version column provides; ""known to work"" versions of the package. The Notes column describes how LLVM; uses the package and provides other details. =========================================================== ============ ==========================================; Package Version Notes; =========================================================== ============ ==========================================; `CMake <http://cmake.org/>`__ >=3.20.0 Makefile/workspace generator; `python <http://www.python.org/>`_ >=3.6 Automated test suite\ :sup:`1`; `zlib <http://zlib.net>`_ >=1.2.3.4 Compression library\ :sup:`2`; `GNU Make <http://savannah.gnu.org/projects/make>`_ 3.79, 3.79.1 Makefile/build processor\ :sup:`3`; =========================================================== ============ ==========================================. .. note::. #. Only needed if you want to run the automated test suite in the; ``llvm/test`` directory.; #. Optional, adds compression / uncompression capabilities to selected LLVM; tools.; #. Optional, you can use any other build tool supported by CMake. Additionally, your compilation host is expected to have the usual plethora of; Unix utilities. Specifically:. * **ar** --- archive library builder; * **bzip2** --- bzip2 command for distribution generation; * **bunzip2** --- bunzip2 command for distribution checking; * **chmod** --- change permissions on a file; * **cat** --- output concatenation utility; * **cp** --- copy files; * **date** --- print the current date/time; * **echo** --- print to st",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst:10805,test,test,10805,interpreter/llvm-project/llvm/docs/GettingStarted.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst,1,['test'],['test']
Testability,"compiler-rt builtins for Arm; =====================================; We will be doing a standalone build of compiler-rt using the following cmake; options. * ``path/to/compiler-rt``; * ``-G Ninja``; * ``-DCMAKE_AR=/path/to/llvm-ar``; * ``-DCMAKE_ASM_COMPILER_TARGET=""arm-linux-gnueabihf""``; * ``-DCMAKE_ASM_FLAGS=""build-c-flags""``; * ``-DCMAKE_C_COMPILER=/path/to/clang``; * ``-DCMAKE_C_COMPILER_TARGET=""arm-linux-gnueabihf""``; * ``-DCMAKE_C_FLAGS=""build-c-flags""``; * ``-DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld""``; * ``-DCMAKE_NM=/path/to/llvm-nm``; * ``-DCMAKE_RANLIB=/path/to/llvm-ranlib``; * ``-DCOMPILER_RT_BUILD_BUILTINS=ON``; * ``-DCOMPILER_RT_BUILD_LIBFUZZER=OFF``; * ``-DCOMPILER_RT_BUILD_MEMPROF=OFF``; * ``-DCOMPILER_RT_BUILD_PROFILE=OFF``; * ``-DCOMPILER_RT_BUILD_SANITIZERS=OFF``; * ``-DCOMPILER_RT_BUILD_XRAY=OFF``; * ``-DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON``; * ``-DLLVM_CONFIG_PATH=/path/to/llvm-config``. The ``build-c-flags`` need to be sufficient to pass the C-make compiler check,; compile compiler-rt, and if you are running the tests, compile and link the; tests. When cross-compiling with clang we will need to pass sufficient; information to generate code for the Arm architecture we are targeting. We will; need to select the Arm target, select the Armv7-A architecture and choose; between using Arm or Thumb.; instructions. For example:. * ``--target=arm-linux-gnueabihf``; * ``-march=armv7a``; * ``-mthumb``. When using a GCC arm-linux-gnueabihf toolchain the following flags are; needed to pick up the includes and libraries:. * ``--gcc-toolchain=/path/to/dir/toolchain``; * ``--sysroot=/path/to/toolchain/arm-linux-gnueabihf/libc``. In this example we will be adding all of the command line options to both; ``CMAKE_C_FLAGS`` and ``CMAKE_ASM_FLAGS``. There are cmake flags to pass some of; these options individually which can be used to simplify the ``build-c-flags``:. * ``-DCMAKE_C_COMPILER_TARGET=""arm-linux-gnueabihf""``; * ``-DCMAKE_ASM_COMPILER_TARGET=""arm-linux-gnuea",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst:3481,test,tests,3481,interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst,2,['test'],['tests']
Testability,compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.h; compiler-rt/lib/hwasan/hwasan_preinit.cpp; compiler-rt/lib/interception/interception_mac.cpp; compiler-rt/lib/interception/tests/interception_test_main.cpp; compiler-rt/lib/lsan/lsan.h; compiler-rt/lib/lsan/lsan_common.cpp; compiler-rt/lib/lsan/lsan_thread.cpp; compiler-rt/lib/lsan/lsan_thread.h; compiler-rt/lib/memprof/memprof_allocator.cpp; compiler-rt/lib/memprof/memprof_allocator.h; compiler-rt/lib/memprof/memprof_descriptions.cpp; compiler-rt/lib/memprof/memprof_descriptions.h; compiler-rt/lib/memprof/memprof_flags.cpp; compiler-rt/lib/memprof/memprof_flags.h; compiler-rt/lib/memprof/memprof_init_version.h; compiler-rt/lib/memprof/memprof_interceptors.cpp; compiler-rt/lib/memprof/memprof_interceptors.h; compiler-rt/lib/memprof/memprof_interceptors_memintrinsics.cpp; compiler-rt/lib/memprof/memprof_interceptors_memintrinsics.h; compiler-rt/lib/memprof/memprof_interface_internal.h; compiler-rt/lib/memprof/memprof_internal.h; compiler-rt/lib/memprof/memprof_linux.cpp; compiler-rt/lib/memprof/memprof_malloc_linux.cpp; compiler-rt/lib/memprof/memprof_mibmap.cpp; compiler-rt/lib/memprof/memprof_mibmap.h; ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:94296,test,tests,94296,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,compiler-rt/lib/scudo/standalone/stats.h; compiler-rt/lib/scudo/standalone/string_utils.cpp; compiler-rt/lib/scudo/standalone/string_utils.h; compiler-rt/lib/scudo/standalone/trusty.cpp; compiler-rt/lib/scudo/standalone/trusty.h; compiler-rt/lib/scudo/standalone/tsd.h; compiler-rt/lib/scudo/standalone/tsd_exclusive.h; compiler-rt/lib/scudo/standalone/tsd_shared.h; compiler-rt/lib/scudo/standalone/vector.h; compiler-rt/lib/scudo/standalone/wrappers_c.cpp; compiler-rt/lib/scudo/standalone/wrappers_c.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_tes,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:102511,test,tests,102511,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,compiler-rt/lib/xray/xray_basic_logging.h; compiler-rt/lib/xray/xray_buffer_queue.cpp; compiler-rt/lib/xray/xray_buffer_queue.h; compiler-rt/lib/xray/xray_fdr_controller.h; compiler-rt/lib/xray/xray_fdr_flags.cpp; compiler-rt/lib/xray/xray_fdr_flags.h; compiler-rt/lib/xray/xray_fdr_logging.h; compiler-rt/lib/xray/xray_fdr_log_records.h; compiler-rt/lib/xray/xray_flags.cpp; compiler-rt/lib/xray/xray_flags.h; compiler-rt/lib/xray/xray_interface_internal.h; compiler-rt/lib/xray/xray_log_interface.cpp; compiler-rt/lib/xray/xray_mips.cpp; compiler-rt/lib/xray/xray_mips64.cpp; compiler-rt/lib/xray/xray_powerpc64.cpp; compiler-rt/lib/xray/xray_profile_collector.cpp; compiler-rt/lib/xray/xray_profile_collector.h; compiler-rt/lib/xray/xray_profiling.cpp; compiler-rt/lib/xray/xray_profiling_flags.cpp; compiler-rt/lib/xray/xray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:106624,test,tests,106624,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"configuration:. .. code-block:: console. $ cmake <path to source>/llvm -C <path to source>/clang/cmake/caches/BOLT.cmake. Then, build the BOLT-optimized binary by running the following ninja command:. .. code-block:: console. $ ninja clang-bolt. If you're seeing errors in the build process, try building with a recent; version of Clang/LLVM by setting the CMAKE_C_COMPILER and; CMAKE_CXX_COMPILER flags to the appropriate values. It is also possible to use BOLT on top of PGO and (Thin)LTO for an even more; significant runtime speedup. To configure a three stage PGO build with ThinLTO; that optimizes the resulting binary with BOLT, use the following CMake; configuration command:. .. code-block:: console. $ cmake -G Ninja <path to source>/llvm \; -C <path to source>/clang/cmake/caches/BOLT-PGO.cmake \; -DBOOTSTRAP_LLVM_ENABLE_LLD=ON \; -DBOOTSTRAP_BOOTSTRAP_LLVM_ENABLE_LLD=ON \; -DPGO_INSTRUMENT_LTO=Thin. Then, to build the final optimized binary, build the stage2-clang-bolt target:. .. code-block:: console. $ ninja stage2-clang-bolt. 3-Stage Non-Determinism; =======================. In the ancient lore of compilers non-determinism is like the multi-headed hydra.; Whenever its head pops up, terror and chaos ensue. Historically one of the tests to verify that a compiler was deterministic would; be a three stage build. The idea of a three stage build is you take your sources; and build a compiler (stage1), then use that compiler to rebuild the sources; (stage2), then you use that compiler to rebuild the sources a third time; (stage3) with an identical configuration to the stage2 build. At the end of; this, you have a stage2 and stage3 compiler that should be bit-for-bit; identical. You can perform one of these 3-stage builds with LLVM and clang using the; following commands:. .. code-block:: console. $ cmake -G Ninja -C <path to source>/clang/cmake/caches/3-stage.cmake <path to source>/llvm; $ ninja stage3. After the build you can compare the stage2 and stage3 compilers.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AdvancedBuilds.rst:11580,test,tests,11580,interpreter/llvm-project/llvm/docs/AdvancedBuilds.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AdvancedBuilds.rst,1,['test'],['tests']
Testability,"configure_lit_site_cfg(; ""${CMAKE_CURRENT_SOURCE_DIR}/tests/lit.site.cfg.in""; ""${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg""; ). add_lit_testsuite(check-mlgo-utils ""Running mlgo-utils tests""; ${CMAKE_CURRENT_BINARY_DIR}; DEPENDS ""FileCheck"" ""not"" ""count"" ""split-file"" ""yaml2obj"" ""llvm-objcopy""; ). set_target_properties(check-mlgo-utils PROPERTIES FOLDER ""Tests""); ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/CMakeLists.txt:54,test,tests,54,interpreter/llvm-project/llvm/utils/mlgo-utils/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/mlgo-utils/CMakeLists.txt,2,['test'],['tests']
Testability,cosf.h; libc/src/math/exp2f.h; libc/src/math/expf.h; libc/src/math/expm1f.h; libc/src/math/fabs.h; libc/src/math/fabsf.h; libc/src/math/fabsl.h; libc/src/math/fdim.h; libc/src/math/fdimf.h; libc/src/math/fdiml.h; libc/src/math/floor.h; libc/src/math/floorf.h; libc/src/math/floorl.h; libc/src/math/fma.cpp; libc/src/math/fma.h; libc/src/math/fmaf.cpp; libc/src/math/fmaf.h; libc/src/math/fmax.h; libc/src/math/fmaxf.h; libc/src/math/fmaxl.h; libc/src/math/fmin.h; libc/src/math/fminf.h; libc/src/math/fminl.h; libc/src/math/frexp.h; libc/src/math/frexpf.h; libc/src/math/frexpl.h; libc/src/math/hypot.h; libc/src/math/hypotf.h; libc/src/math/ilogb.h; libc/src/math/ilogbf.h; libc/src/math/ilogbl.h; libc/src/math/ldexp.h; libc/src/math/ldexpf.h; libc/src/math/ldexpl.h; libc/src/math/llrint.h; libc/src/math/llrintf.h; libc/src/math/llrintl.h; libc/src/math/llround.h; libc/src/math/llroundf.h; libc/src/math/llroundl.h; libc/src/math/log10f.h; libc/src/math/log1pf.h; libc/src/math/log2f.h; libc/src/math/logb.h; libc/src/math/logbf.h; libc/src/math/logbl.h; libc/src/math/logf.h; libc/src/math/lrint.h; libc/src/math/lrintf.h; libc/src/math/lrintl.h; libc/src/math/lround.h; libc/src/math/lroundf.h; libc/src/math/lroundl.h; libc/src/math/modf.h; libc/src/math/modff.h; libc/src/math/modfl.h; libc/src/math/nearbyint.h; libc/src/math/nearbyintf.h; libc/src/math/nearbyintl.h; libc/src/math/nextafter.h; libc/src/math/nextafterf.h; libc/src/math/nextafterl.h; libc/src/math/remainder.h; libc/src/math/remainderf.h; libc/src/math/remainderl.h; libc/src/math/remquo.h; libc/src/math/remquof.h; libc/src/math/remquol.h; libc/src/math/rint.h; libc/src/math/rintf.h; libc/src/math/rintl.h; libc/src/math/round.h; libc/src/math/roundf.h; libc/src/math/roundl.h; libc/src/math/sin.h; libc/src/math/sincosf.h; libc/src/math/sinf.h; libc/src/math/sqrt.h; libc/src/math/sqrtf.h; libc/src/math/sqrtl.h; libc/src/math/tan.h; libc/src/math/trunc.h; libc/src/math/truncf.h; libc/src/math/truncl.h; libc/src/math/a,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:135743,log,logb,135743,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['log'],['logb']
Testability,"cott Meyers ""More Effective C++"", item 11: Prevent exceptions from; leaving destructors. class A {; A() {}; ~A() { throw 1; } // warn; };. void f() throw(int);. class A {; A() {}; ~A() { f(); } // warn; };. ctordtor.PlacementSelfCopy; (C++11); For a placement copy or move, it is almost certainly an error if the; constructed object is also the object being copied from. class A {};. void test(A *dst, A *src) {; ::new (dst) A(*dst); // warn (should be 'src'); }. exceptions. Name, DescriptionExampleProgress. exceptions.ThrowSpecButNotThrow; (C++); Function declaration has a throw(type) specifier but the; function do not throw exceptions. void test() throw(int) {; } // warn. exceptions.NoThrowSpecButThrows; (C++); An exception is throw from a function having a throw(); specifier. void test() throw() {; throw(1); // warn; }. exceptions.ThrownTypeDiffersSpec; (C++); The type of a thrown exception differs from those specified in; a throw(type) specifier. struct S{};. void test() throw(int) {; S s;; throw (s); // warn; }. smart pointers. Name, DescriptionExampleProgress. smartptr.SmartPtrInit; (C++); C++03: auto_ptr should store a pointer to an object obtained via; new as allocated memory will be cleaned using delete.; C++11: one should use unique_ptr<type[]> to keep a; pointer to memory allocated by new[].; C++11: to keep a pointer to memory allocated by new[] in; a shared_ptr one should use a custom deleter that calls ; delete[]..; Source: C++03 20.4.5p1; C++11 auto_ptr is deprecated (D.10). #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p1(new int); // Ok; std::auto_ptr<int> p2(new int[3]); // warn; }. #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p((int *)malloc(sizeof(int))); // warn; }. dead code. Name, DescriptionExampleProgress. deadcode.UnmodifiedVariable; (C, C++); A variable is never modified but was not declared const and is not a; reference.(opt-in checker). extern int computeDelta();. int test(bool cond) {; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:3349,test,test,3349,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"cpp:11:0. bar; 6295592 4. $ cat addr3.txt; FILE:test.elf 0x400490; DATA BUILDID:123456789abcdef 0x601028. $ llvm-symbolizer < addr3.txt; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. Example 5 - CODE and DATA prefixes:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf ""CODE 0x400490"" ""DATA 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr4.txt; CODE test.elf 0x4004a0; DATA inlined.elf 0x601028. $ llvm-symbolizer < addr4.txt; main; /tmp/test.cpp:15:0. bar; 6295592 4. Example 6 - path-style options:. This example uses the same source file as above, but the source file's; full path is /tmp/foo/test.cpp and is compiled as follows. The first case; shows the default absolute path, the second --basenames, and the third; shows --relativenames. .. code-block:: console. $ pwd; /tmp; $ clang -g foo/test.cpp -o test.elf; $ llvm-symbolizer --obj=test.elf 0x4004a0; main; /tmp/foo/test.cpp:15:0; $ llvm-symbolizer --obj=test.elf 0x4004a0 --basenames; main; test.cpp:15:0; $ llvm-symbolizer --obj=test.elf 0x4004a0 --relativenames; main; foo/test.cpp:15:0. Example 7 - Addresses as symbol names:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf main; main; /tmp/test.cpp:14:0; $ llvm-symbolizer --obj=test.elf ""CODE foz""; foz; /tmp/test.h:1:0. OPTIONS; -------. .. option:: --adjust-vma <offset>. Add the specified offset to object file addresses when performing lookups.; This can be used to perform lookups as if the object were relocated by the; offset. .. option:: --basenames, -s. Print just the file's name without any directories, instead of the; absolute path. .. option:: --build-id. Look up the object using the given build ID, specified as a hexadecimal; string. Mutually exclusive with :option:`--obj`. .. option:: --color [=<always|auto|never>]. Specify whether to use color in :option:`--filter-markup` mode. Defaults to; ``auto``, which detects whether standard output supports color. Specifying; ``--color`` alone is equivalent to ``--color=always``. .. opt",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:4509,test,test,4509,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"cpp:11:0. bar; 6295592 4. Example 5 - CODE and DATA prefixes:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf ""CODE 0x400490"" ""DATA 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr4.txt; CODE test.elf 0x4004a0; DATA inlined.elf 0x601028. $ llvm-symbolizer < addr4.txt; main; /tmp/test.cpp:15:0. bar; 6295592 4. Example 6 - path-style options:. This example uses the same source file as above, but the source file's; full path is /tmp/foo/test.cpp and is compiled as follows. The first case; shows the default absolute path, the second --basenames, and the third; shows --relativenames. .. code-block:: console. $ pwd; /tmp; $ clang -g foo/test.cpp -o test.elf; $ llvm-symbolizer --obj=test.elf 0x4004a0; main; /tmp/foo/test.cpp:15:0; $ llvm-symbolizer --obj=test.elf 0x4004a0 --basenames; main; test.cpp:15:0; $ llvm-symbolizer --obj=test.elf 0x4004a0 --relativenames; main; foo/test.cpp:15:0. Example 7 - Addresses as symbol names:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf main; main; /tmp/test.cpp:14:0; $ llvm-symbolizer --obj=test.elf ""CODE foz""; foz; /tmp/test.h:1:0. OPTIONS; -------. .. option:: --adjust-vma <offset>. Add the specified offset to object file addresses when performing lookups.; This can be used to perform lookups as if the object were relocated by the; offset. .. option:: --basenames, -s. Print just the file's name without any directories, instead of the; absolute path. .. option:: --build-id. Look up the object using the given build ID, specified as a hexadecimal; string. Mutually exclusive with :option:`--obj`. .. option:: --color [=<always|auto|never>]. Specify whether to use color in :option:`--filter-markup` mode. Defaults to; ``auto``, which detects whether standard output supports color. Specifying; ``--color`` alone is equivalent to ``--color=always``. .. option:: --debug-file-directory <path>. Provide a path to a directory with a `.build-id` subdirectory to search for; debug information for stripped binaries",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:4658,test,test,4658,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,cpp; compiler-rt/lib/gwp_asan/optional/segv_handler_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/common_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/common_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_tls.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.h; compiler-rt/lib/gwp_asan/platform_specific/utilities_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/utilities_posix.cpp; compiler-rt/lib/gwp_asan/tests/backtrace.cpp; compiler-rt/lib/gwp_asan/tests/basic.cpp; compiler-rt/lib/gwp_asan/tests/compression.cpp; compiler-rt/lib/gwp_asan/tests/crash_handler_api.cpp; compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.cpp; compiler-rt/lib/hwasan/hwasan_poiso,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:93174,test,tests,93174,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,cpp; compiler-rt/lib/memprof/memprof_interceptors.h; compiler-rt/lib/memprof/memprof_interceptors_memintrinsics.cpp; compiler-rt/lib/memprof/memprof_interceptors_memintrinsics.h; compiler-rt/lib/memprof/memprof_interface_internal.h; compiler-rt/lib/memprof/memprof_internal.h; compiler-rt/lib/memprof/memprof_linux.cpp; compiler-rt/lib/memprof/memprof_malloc_linux.cpp; compiler-rt/lib/memprof/memprof_mibmap.cpp; compiler-rt/lib/memprof/memprof_mibmap.h; compiler-rt/lib/memprof/memprof_posix.cpp; compiler-rt/lib/memprof/memprof_preinit.cpp; compiler-rt/lib/memprof/memprof_rawprofile.cpp; compiler-rt/lib/memprof/memprof_rawprofile.h; compiler-rt/lib/memprof/memprof_rtl.cpp; compiler-rt/lib/memprof/memprof_shadow_setup.cpp; compiler-rt/lib/memprof/memprof_stack.cpp; compiler-rt/lib/memprof/memprof_stack.h; compiler-rt/lib/memprof/memprof_stats.cpp; compiler-rt/lib/memprof/memprof_stats.h; compiler-rt/lib/memprof/memprof_thread.cpp; compiler-rt/lib/memprof/memprof_thread.h; compiler-rt/lib/memprof/tests/driver.cpp; compiler-rt/lib/memprof/tests/rawprofile.cpp; compiler-rt/lib/msan/msan_chained_origin_depot.h; compiler-rt/lib/msan/msan_flags.h; compiler-rt/lib/msan/msan_poisoning.h; compiler-rt/lib/msan/msan_report.h; compiler-rt/lib/orc/adt.h; compiler-rt/lib/orc/debug.h; compiler-rt/lib/orc/elfnix_platform.cpp; compiler-rt/lib/orc/elfnix_platform.h; compiler-rt/lib/orc/endianness.h; compiler-rt/lib/orc/error.h; compiler-rt/lib/orc/executor_address.h; compiler-rt/lib/orc/extensible_rtti.cpp; compiler-rt/lib/orc/extensible_rtti.h; compiler-rt/lib/orc/log_error_to_stderr.cpp; compiler-rt/lib/orc/macho_ehframe_registration.cpp; compiler-rt/lib/orc/macho_platform.cpp; compiler-rt/lib/orc/macho_platform.h; compiler-rt/lib/orc/run_program_wrapper.cpp; compiler-rt/lib/orc/simple_packed_serialization.h; compiler-rt/lib/orc/wrapper_function_utils.h; compiler-rt/lib/orc/unittests/adt_test.cpp; compiler-rt/lib/orc/unittests/c_api_test.cpp; compiler-rt/lib/orc/unittests/endian_test.c,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:95845,test,tests,95845,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,cpp; compiler-rt/lib/tsan/rtl/tsan_shadow.h; compiler-rt/lib/tsan/rtl/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl/tsan_suppressions.h; compiler-rt/lib/tsan/rtl/tsan_symbolize.h; compiler-rt/lib/tsan/rtl/tsan_trace.h; compiler-rt/lib/tsan/rtl/tsan_vector_clock.h; compiler-rt/lib/tsan/rtl-old/tsan_fd.h; compiler-rt/lib/tsan/rtl-old/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl-old/tsan_ilist.h; compiler-rt/lib/tsan/rtl-old/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl-old/tsan_mman.h; compiler-rt/lib/tsan/rtl-old/tsan_mutexset.h; compiler-rt/lib/tsan/rtl-old/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl-old/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl-old/tsan_shadow.h; compiler-rt/lib/tsan/rtl-old/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl-old/tsan_suppressions.h; compiler-rt/lib/tsan/rtl-old/tsan_symbolize.h; compiler-rt/lib/tsan/rtl-old/tsan_vector_clock.h; compiler-rt/lib/tsan/tests/unit/tsan_ilist_test.cpp; compiler-rt/lib/tsan/tests/unit/tsan_trace_test.cpp; compiler-rt/lib/tsan/tests/unit/tsan_vector_clock_test.cpp; compiler-rt/lib/ubsan/ubsan_init_standalone_preinit.cpp; compiler-rt/lib/ubsan/ubsan_monitor.cpp; compiler-rt/lib/ubsan/ubsan_monitor.h; compiler-rt/lib/ubsan/ubsan_signals_standalone.h; compiler-rt/lib/ubsan/ubsan_win_dll_thunk.cpp; compiler-rt/lib/ubsan/ubsan_win_dynamic_runtime_thunk.cpp; compiler-rt/lib/ubsan/ubsan_win_weak_interception.cpp; compiler-rt/lib/xray/xray_AArch64.cpp; compiler-rt/lib/xray/xray_arm.cpp; compiler-rt/lib/xray/xray_basic_flags.cpp; compiler-rt/lib/xray/xray_basic_flags.h; compiler-rt/lib/xray/xray_basic_logging.h; compiler-rt/lib/xray/xray_buffer_queue.cpp; compiler-rt/lib/xray/xray_buffer_queue.h; compiler-rt/lib/xray/xray_fdr_controller.h; compiler-rt/lib/xray/xray_fdr_flags.cpp; compiler-rt/lib/xray/xray_fdr_flags.h; compiler-rt/lib/xray/xray_fdr_logging.h; compiler-rt/lib/xray/xray_fdr_log_records.h; compiler-rt/lib/xray/xray_flags.cpp; compiler-rt/lib/xray/xray_flags.h; compiler-rt/lib/xray/xray_interface_internal.h; ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:105080,test,tests,105080,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"cppyy-backend; =============. C/C++ wrapper around Cling, the LLVM-based interactive C++ interpreter, for; use by cppyy, providing stable C and C++ Reflection APIs. The compilation of cppyy-backend is very fast, but it will pull in; cppyy-cling, which takes a long time to install if there is no matching wheel; for your platform, forcing a build from source. By default, all cores will be; used, but it is also recommended to add the verbose flag to see progress:. $ python -m pip install --verbose cppyy-backend. For further details, see cppyy's installation instructions:; https://cppyy.readthedocs.io/en/latest/installation.html. Cling documentation is here:; https://root.cern.ch/cling. ----. Find the cppyy documentation here:; http://cppyy.readthedocs.io. Change log:; https://cppyy.readthedocs.io/en/latest/changelog.html. Bug reports/feedback:; https://bitbucket.org/wlav/cppyy/issues?status=new&status=open; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/README.rst:770,log,log,770,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/README.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/README.rst,1,['log'],['log']
Testability,"cppyy-cling; ===========. A repackaging of Cling, the LLVM-based interactive C++ interpreter, as a; library for use as the backend to cppyy. This version of Cling is patched for; improved performance and better use with Python. Wheels are available for the major platforms, but if you have to build from; source, building of LLVM will take a long time. By default, all cores will be; used, but it is also recommended to add the verbose flag to see progress:. $ python -m pip install --verbose cppyy-cling. For further details, see cppyy's installation instructions:; https://cppyy.readthedocs.io/en/latest/installation.html. Cling documentation is here:; https://root.cern.ch/cling. ----. Full cppyy documentation is here:; http://cppyy.readthedocs.io/. Change log:; https://cppyy.readthedocs.io/en/latest/changelog.html. Bug reports/feedback:; https://bitbucket.org/wlav/cppyy/issues?status=new&status=open; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/README.rst:761,log,log,761,bindings/pyroot/cppyy/cppyy-backend/cling/README.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/cling/README.rst,1,['log'],['log']
Testability,"cquire the given; capability, and returns a boolean value indicating success or failure.; The first argument must be ``true`` or ``false``, to specify which return value; indicates success, and the remaining arguments are interpreted in the same way; as ``ACQUIRE``. See :ref:`mutexheader`, below, for example uses. Because the analysis doesn't support conditional locking, a capability is; treated as acquired after the first branch on the return value of a try-acquire; function. .. code-block:: c++. Mutex mu;; int a GUARDED_BY(mu);. void foo() {; bool success = mu.TryLock();; a = 0; // Warning, mu is not locked.; if (success) {; a = 0; // Ok.; mu.Unlock();; } else {; a = 0; // Warning, mu is not locked.; }; }. ASSERT_CAPABILITY(...) and ASSERT_SHARED_CAPABILITY(...); --------------------------------------------------------. *Previously:* ``ASSERT_EXCLUSIVE_LOCK``, ``ASSERT_SHARED_LOCK``. These are attributes on a function or method which asserts the calling thread; already holds the given capability, for example by performing a run-time test; and terminating if the capability is not held. Presence of this annotation; causes the analysis to assume the capability is held after calls to the; annotated function. See :ref:`mutexheader`, below, for example uses. GUARDED_VAR and PT_GUARDED_VAR; ------------------------------. Use of these attributes has been deprecated. Warning flags; -------------. * ``-Wthread-safety``: Umbrella flag which turns on the following:. + ``-Wthread-safety-attributes``: Semantic checks for thread safety attributes.; + ``-Wthread-safety-analysis``: The core analysis.; + ``-Wthread-safety-precise``: Requires that mutex expressions match precisely.; This warning can be disabled for code which has a lot of aliases.; + ``-Wthread-safety-reference``: Checks when guarded members are passed by reference. :ref:`negative` are an experimental feature, which are enabled with:. * ``-Wthread-safety-negative``: Negative capabilities. Off by default. When new fe",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ThreadSafetyAnalysis.rst:15307,assert,asserts,15307,interpreter/llvm-project/clang/docs/ThreadSafetyAnalysis.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ThreadSafetyAnalysis.rst,2,"['assert', 'test']","['asserts', 'test']"
Testability,create_subdirectory_options(CLANG TOOL). add_clang_subdirectory(diagtool); add_clang_subdirectory(driver); add_clang_subdirectory(apinotes-test); add_clang_subdirectory(clang-diff); add_clang_subdirectory(clang-format); add_clang_subdirectory(clang-format-vs); add_clang_subdirectory(clang-fuzzer); add_clang_subdirectory(clang-import-test); add_clang_subdirectory(clang-linker-wrapper); add_clang_subdirectory(clang-offload-packager); add_clang_subdirectory(clang-offload-bundler); add_clang_subdirectory(clang-scan-deps); if(HAVE_CLANG_REPL_SUPPORT); add_clang_subdirectory(clang-repl); endif(). add_clang_subdirectory(c-index-test). add_clang_subdirectory(clang-rename); add_clang_subdirectory(clang-refactor); # For MinGW we only enable shared library if LLVM_LINK_LLVM_DYLIB=ON.; # Without that option resulting library is too close to 2^16 DLL exports limit.; if(UNIX OR (MINGW AND LLVM_LINK_LLVM_DYLIB)); add_clang_subdirectory(clang-shlib); endif(). if(CLANG_ENABLE_ARCMT); add_clang_subdirectory(arcmt-test); add_clang_subdirectory(c-arcmt-test); endif(). if(CLANG_ENABLE_STATIC_ANALYZER); add_clang_subdirectory(clang-check); add_clang_subdirectory(clang-extdef-mapping); add_clang_subdirectory(scan-build); add_clang_subdirectory(scan-build-py); add_clang_subdirectory(scan-view); endif(). # We support checking out the clang-tools-extra repository into the 'extra'; # subdirectory. It contains tools developed as part of the Clang/LLVM project; # on top of the Clang tooling platform. We keep them in a separate repository; # to keep the primary Clang repository small and focused.; # It also may be included by LLVM_EXTERNAL_CLANG_TOOLS_EXTRA_SOURCE_DIR.; add_llvm_external_project(clang-tools-extra extra). # libclang may require clang-tidy in clang-tools-extra.; add_clang_subdirectory(libclang). add_clang_subdirectory(amdgpu-arch); add_clang_subdirectory(nvptx-arch); ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/CMakeLists.txt:139,test,test,139,interpreter/llvm-project/clang/tools/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/CMakeLists.txt,5,['test'],['test']
Testability,"creates one in; the `ClassDef` macro that is defined in `$ROOTSYS/include/Rtypes.h`.; `ClassDef` defines several methods for any class, and one of them is the; `Streamer`. The automatically generated `Streamer `is complete and can; be used as long as no customization is needed. The `Event` class is defined in `$ROOTSYS/test/Event.h`. Looking at the; class definition, we find that it inherits from **`TObject`**. It is a; simple example of a class with diverse data members. ``` {.cpp}; class Event : public TObject {; private:; TDirectory *fTransient; //! current directory; Float_t fPt; //! transient value; char fType[20];; Int_t fNtrack;; Int_t fNseg;; Int_t fNvertex;; UInt_t fFlag;; Float_t fTemperature;; EventHeader fEvtHdr; //|| don't split; TClonesArray *fTracks; //->; TH1F *fH; //->; Int_t fMeasures[10];; Float_t fMatrix[4][4];; Float_t *fClosestDistance; //[fNvertex]; ...; ```. The Event class is added to the dictionary by the `rootcling`; utility. This is the `rootcling` statement in the; `$ROOTSYS/test/Makefile`:. ``` {.cpp}; @rootcling -f EventDict.cxx -c Event.h EventLinkDef.h; ```. The `EventDict.cxx` file contains the automatically generated; `Streamer `for Event:. ``` {.cpp}; void Event::Streamer(TBuffer &R__b){; // Stream an object of class Event.; if (R__b.IsReading()) {; Event::Class()->ReadBuffer(R__b, this);; } else {; Event::Class()->WriteBuffer(R__b, this);; }; }; ```. When writing an `Event` object, `TClass::WriteBuffer` is called.; `WriteBuffer` writes the current version number of the `Event class,`; and its contents into the buffer `R__b`. The `Streamer `calls; **`TClass::ReadBuffer`** when reading an `Event` object. The `ReadBuffer`; method reads the information from buffer `R__b` into the `Event`; object. ### Transient Data Members (//!). To prevent a data member from being written to the file, insert a ""`!`""; as the first character after the comment marks. It tells ROOT not to; save that data member in a root file when saving the class. For e",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/InputOutput.md:44845,test,test,44845,documentation/users-guide/InputOutput.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/InputOutput.md,1,['test'],['test']
Testability,"cribe a different type; system (such as the C type system), and performs type-based aliasing on top of; that. Further details are in the; `language reference <LangRef.html#tbaa-metadata>`_. What happens if a GEP computation overflows?; --------------------------------------------. If the GEP lacks the ``inbounds`` keyword, the value is the result from; evaluating the implied two's complement integer computation. However, since; there's no guarantee of where an object will be allocated in the address space,; such values have limited meaning. If the GEP has the ``inbounds`` keyword, the result value is ``poison``; if the GEP overflows (i.e. wraps around the end of the address space). As such, there are some ramifications of this for inbounds GEPs: scales implied; by array/vector/pointer indices are always known to be ""nsw"" since they are; signed values that are scaled by the element size. These values are also; allowed to be negative (e.g. ""``gep i32, ptr %P, i32 -1``"") but the pointer; itself is logically treated as an unsigned value. This means that GEPs have an; asymmetric relation between the pointer base (which is treated as unsigned) and; the offset applied to it (which is treated as signed). The result of the; additions within the offset calculation cannot have signed overflow, but when; applied to the base pointer, there can be signed overflow. How can I tell if my front-end is following the rules?; ------------------------------------------------------. There is currently no checker for the getelementptr rules. Currently, the only; way to do this is to manually check each place in your front-end where; GetElementPtr operators are created. It's not possible to write a checker which could find all rule violations; statically. It would be possible to write a checker which works by instrumenting; the code with dynamic checks though. Alternatively, it would be possible to; write a static checker which catches a subset of possible problems. However, no; such checke",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GetElementPtr.rst:18141,log,logically,18141,interpreter/llvm-project/llvm/docs/GetElementPtr.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GetElementPtr.rst,1,['log'],['logically']
Testability,"cribed in :doc:`ProgrammersManual` should be; used instead. In cases where this is not practical, ``report_fatal_error`` may; be used. Another issue is that values used only by assertions will produce an ""unused; value"" warning when assertions are disabled. For example, this code will warn:. .. code-block:: c++. unsigned Size = V.size();; assert(Size > 42 && ""Vector smaller than it should be"");. bool NewToSet = Myset.insert(Value);; assert(NewToSet && ""The value shouldn't be in the set yet"");. These are two interesting different cases. In the first case, the call to; ``V.size()`` is only useful for the assert, and we don't want it executed when; assertions are disabled. Code like this should move the call into the assert; itself. In the second case, the side effects of the call must happen whether; the assert is enabled or not. In this case, the value should be cast to void to; disable the warning. To be specific, it is preferred to write the code like; this:. .. code-block:: c++. assert(V.size() > 42 && ""Vector smaller than it should be"");. bool NewToSet = Myset.insert(Value); (void)NewToSet;; assert(NewToSet && ""The value shouldn't be in the set yet"");. Do Not Use ``using namespace std``; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. In LLVM, we prefer to explicitly prefix all identifiers from the standard; namespace with an ""``std::``"" prefix, rather than rely on ""``using namespace; std;``"". In header files, adding a ``'using namespace XXX'`` directive pollutes the; namespace of any source file that ``#include``\s the header, creating; maintenance issues. In implementation files (e.g. ``.cpp`` files), the rule is more of a stylistic; rule, but is still important. Basically, using explicit namespace prefixes; makes the code **clearer**, because it is immediately obvious what facilities; are being used and where they are coming from. And **more portable**, because; namespace clashes cannot occur between LLVM code and other namespaces. The; portability rule is important bec",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst:48578,assert,assert,48578,interpreter/llvm-project/llvm/docs/CodingStandards.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst,1,['assert'],['assert']
Testability,criptInterpreter/Lua/LuaTests.cpp; lldb/unittests/ScriptInterpreter/Lua/ScriptInterpreterTests.cpp; lldb/unittests/ScriptInterpreter/Python/PythonTestSuite.cpp; lldb/unittests/ScriptInterpreter/Python/PythonTestSuite.h; lldb/unittests/Signals/UnixSignalsTest.cpp; lldb/unittests/Symbol/LocateSymbolFileTest.cpp; lldb/unittests/Symbol/MangledTest.cpp; lldb/unittests/Symbol/SymbolTest.cpp; lldb/unittests/Symbol/SymtabTest.cpp; lldb/unittests/Symbol/TestClangASTImporter.cpp; lldb/unittests/Symbol/TestDWARFCallFrameInfo.cpp; lldb/unittests/Symbol/TestTypeSystem.cpp; lldb/unittests/SymbolFile/DWARF/DWARFASTParserClangTests.cpp; lldb/unittests/SymbolFile/DWARF/DWARFDIETest.cpp; lldb/unittests/SymbolFile/DWARF/DWARFIndexCachingTest.cpp; lldb/unittests/SymbolFile/DWARF/DWARFUnitTest.cpp; lldb/unittests/SymbolFile/DWARF/Inputs/test-dwarf.cpp; lldb/unittests/SymbolFile/NativePDB/PdbFPOProgramToDWARFExpressionTests.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-alt.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-nested.h; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-types.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb.h; lldb/unittests/Target/DynamicRegisterInfoTest.cpp; lldb/unittests/Target/ExecutionContextTest.cpp; lldb/unittests/Target/FindFileTest.cpp; lldb/unittests/Target/MemoryTagMapTest.cpp; lldb/unittests/Target/RemoteAwarePlatformTest.cpp; lldb/unittests/Target/StackFrameRecognizerTest.cpp; lldb/unittests/TestingSupport/MockTildeExpressionResolver.cpp; lldb/unittests/TestingSupport/MockTildeExpressionResolver.h; lldb/unittests/TestingSupport/SubsystemRAII.h; lldb/unittests/TestingSupport/TestUtilities.cpp; lldb/unittests/TestingSupport/Host/NativeProcessTestUtils.h; lldb/unittests/TestingSupport/Symbol/ClangTestUtils.h; lldb/unittests/TestingSupport/Symbol/YAMLModuleTester.cpp; lldb/unittests/TestingSupport/Symbol/YAMLModuleTester.h; lldb/unittests/Thread/ThreadTest.cpp; lldb/unittests/UnwindAssembly/PPC64,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:231789,test,test-pdb-nested,231789,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['test-pdb-nested']
Testability,"cripts are in the ``utils/release`` directory. test-release.sh; ---------------. This script will check-out, configure and compile LLVM+Clang (+ most add-ons,; like ``compiler-rt``, ``libcxx``, ``libomp`` and ``clang-extra-tools``) in; three stages, and will test the final stage.; It'll have installed the final binaries on the Phase3/Releasei(+Asserts); directory, and that's the one you should use for the test-suite and other; external tests. To run the script on a specific release candidate run::. ./test-release.sh \; -release 3.3 \; -rc 1 \; -no-64bit \; -test-asserts \; -no-compare-files. Each system will require different options. For instance, x86_64 will; obviously not need ``-no-64bit`` while 32-bit systems will, or the script will; fail. The important flags to get right are:. * On the pre-release, you should change ``-rc 1`` to ``-final``. On RC2,; change it to ``-rc 2`` and so on. * On non-release testing, you can use ``-final`` in conjunction with; ``-no-checkout``, but you'll have to create the ``final`` directory by hand; and link the correct source dir to ``final/llvm.src``. * For release candidates, you need ``-test-asserts``, or it won't create a; ""Release+Asserts"" directory, which is needed for release testing and; benchmarking. This will take twice as long. * On the final candidate you just need Release builds, and that's the binary; directory you'll have to pack. * On macOS, you must export ``MACOSX_DEPLOYMENT_TARGET=10.9`` before running; the script. This script builds three phases of Clang+LLVM twice each (Release and; Release+Asserts), so use screen or nohup to avoid headaches, since it'll take; a long time. Use the ``--help`` option to see all the options and chose it according to; your needs. findRegressions-nightly.py; --------------------------. TODO. .. _test-suite:. Test Suite; ==========. .. contents::; :local:. Follow the `LNT Quick Start Guide; <https://llvm.org/docs/lnt/quickstart.html>`__ link on how to set-up the; test-suite. The bin",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ReleaseProcess.rst:2478,test,testing,2478,interpreter/llvm-project/llvm/docs/ReleaseProcess.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ReleaseProcess.rst,1,['test'],['testing']
Testability,cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/windows_noncanonical_path/source; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_finish_test; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/expect_step_kind; - `5`; - `0`; - `5`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps; - `8`; - `2`; - `6`; - :part:`25%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools/clang-opt-bisect; - `2`; - `0`; - `2`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter-tests; - `15`; - `3`; - `12`; - :part:`20%`; * - cross-project-tests/debuginfo-tests/llgdb-tests; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb; - `2`; - `1`; - `1`; - :part:`50%`; * - flang/examples; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/examples/FlangOmpReport; - `3`; - `3`; - `0`; - :good:`100%`; * - flang/examples/PrintFlangFunctionNames; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/include/flang; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/include/flang/Common; - `21`; - `21`; - `0`; - :good:`100%`; * - flang/include/flang/Decimal; - `2`; - `2`; - `0`; - :good:`100%`; * - flang/include/flang/Evaluate; - `23`; - `23`; - `0`; - :good:`100%`; * - flang/include/flang/Frontend; - `11`; - `10`; - `1`; - :part:`90%`; * - flang/include/flang/FrontendTool; - `1`; - `1`; - `0`; ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:27329,test,tests,27329,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/windows_noncanonical_path/source; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_finish_test; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/expect_step_kind; - `5`; - `0`; - `5`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps; - `8`; - `2`; - `6`; - :part:`25%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools/clang-opt-bisect; - `2`; - `0`; - `2`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter-tests; - `15`; - `3`; - `12`; - :part:`20%`; * - cross-project-tests/debuginfo-tests/llgdb-tests; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb; - `2`; - `1`; - `1`; - :part:`50%`; * - flang/examples; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/examples/FlangOmpReport; - `3`; - `3`; - `0`; - :good:`100%`; * - flang/examples/PrintFlangFunctionNames; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/include/flang; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/include/flang/Common; - `21`; - `21`; - `0`; - :good:`100%`; * - flang/include/flang/Decimal; - `2`; - `2`; - `0`; - :good:`100%`; * - flang/include/flang/Evaluate; - `23`; - `23`; - `0`; - :good:`100%`; * - flang/include/flang/Frontend; - `11`; - `10`; - `1`; - :part:`90%`; * - flang/include/flang/FrontendTool; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/include/flang/Lower; - `25`; - `24`; - `1`; - :part:`96%`; * - flang/include/flang/Lower/Support; - `2`; - `2`; - `0`; - :good,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:27481,test,tests,27481,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,"ct (a *TestingConfig* instance) for the test suite,; which the config file is expected to populate. The following variables are also; available on the *config* object, some of which must be set by the config and; others are optional or predefined:. **name** *[required]* The name of the test suite, for use in reports and; diagnostics. **test_format** *[required]* The test format object which will be used to; discover and run tests in the test suite. Generally this will be a builtin test; format available from the *lit.formats* module. **test_source_root** The filesystem path to the test suite root. For out-of-dir; builds this is the directory that will be scanned for tests. **test_exec_root** For out-of-dir builds, the path to the test suite root inside; the object directory. This is where tests will be run and temporary output files; placed. **environment** A dictionary representing the environment to use when executing; tests in the suite. **standalone_tests** When true, mark a directory with tests expected to be run; standalone. Test discovery is disabled for that directory. *lit.suffixes* and; *lit.excludes* must be empty when this variable is true. **suffixes** For **lit** test formats which scan directories for tests, this; variable is a list of suffixes to identify test files. Used by: *ShTest*. **substitutions** For **lit** test formats which substitute variables into a test; script, the list of substitutions to perform. Used by: *ShTest*. **unsupported** Mark an unsupported directory, all tests within it will be; reported as unsupported. Used by: *ShTest*. **parent** The parent configuration, this is the config object for the directory; containing the test suite, or None. **root** The root configuration. This is the top-most :program:`lit` configuration in; the project. **pipefail** Normally a test using a shell pipe fails if any of the commands; on the pipe fail. If this is not desired, setting this variable to false; makes the test fail only if the last co",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:16258,test,tests,16258,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['tests']
Testability,"ct::Paint()`**. #### Physical IDs. TVirtualViewer3D provides for two methods of object addition:. ``` {.cpp}; virtual Int_t AddObject(const TBuffer3D &buffer,; Bool_t * addChildren = 0); virtual Int_t AddObject(UInt_t physicalID,; const TBuffer3D & buffer,; Bool_t *addChildren = 0); ```. If you use the first (simple) case a viewer using logical/physical pairs; will generate sequential IDs for each physical object internally. Scene; rebuilds will require destruction and recreation of all physical; objects. For the second you can specify an identifier from the client; side, which must be unique and stable - i.e. the IDs of a published; object is consistent, regardless of changes in termination of contained; child geometry branches. In this case the viewer can safely cache the; physical objects across scene rebuilds, discarding those no longer of; interest. #### Child Objects. In many geometries there is a rigid containment hierarchy, and so if the; viewer is not interested in a certain object due to limits/size then it; will also not be interest in any of the contained branch of siblings.; Both `TBuffer3D::AddObject()` methods have an `addChildren` return; parameter. The viewer will complete this (if passed) indicating if; children of the object just sent are worth sending. #### Recycling TBuffer3D. Once add `TBuffer3D::AddObject()` has been called, the contents are; copied to the viewer's internal data structures. You are free to destroy; this **`TBuffer3D`**, or recycle it for the next object if suitable. #### Examples. For an example of a simple geometry, working in master reference frame; examine the code under `$ROOTSYS/g3d`. For a more complex example, which; works in both master and local frames, and uses logical`/`physical; division of shape geometry and placement, examine the code under; `$ROOTSYS/geom` - in particular **`TGeoShape`** hierarchy, and the; painter object **`TGeoPainter`** (under geopainter) where the; negotiation with the viewer is performed.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md:139260,log,logical,139260,documentation/users-guide/Graphics.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md,1,['log'],['logical']
Testability,"ction GVN hoists the fully redundant value of *res, but nothing; moves the store out. This gives us this code:. bb:		; preds = %bb2, %entry; 	%.rle = phi i32 [ 0, %entry ], [ %.rle6, %bb2 ]	; 	%i.05 = phi i32 [ 0, %entry ], [ %indvar.next, %bb2 ]; 	%1 = load i32* %cond, align 4; 	%2 = icmp eq i32 %1, 0; 	br i1 %2, label %bb2, label %bb1. bb1:		; preds = %bb; 	%3 = xor i32 %.rle, 234	; 	store i32 %3, i32* %res, align 4; 	br label %bb2. bb2:		; preds = %bb, %bb1; 	%.rle6 = phi i32 [ %3, %bb1 ], [ %.rle, %bb ]	; 	%indvar.next = add i32 %i.05, 1	; 	%exitcond = icmp eq i32 %indvar.next, %n; 	br i1 %exitcond, label %return, label %bb. DSE should sink partially dead stores to get the store out of the loop. Here's another partial dead case:; http://gcc.gnu.org/bugzilla/show_bug.cgi?id=12395. //===---------------------------------------------------------------------===//. Scalar PRE hoists the mul in the common block up to the else:. int test (int a, int b, int c, int g) {; int d, e;; if (a); d = b * c;; else; d = b - c;; e = b * c + g;; return d + e;; }. It would be better to do the mul once to reduce codesize above the if.; This is GCC PR38204. //===---------------------------------------------------------------------===//; This simple function from 179.art:. int winner, numf2s;; struct { double y; int reset; } *Y;. void find_match() {; int i;; winner = 0;; for (i=0;i<numf2s;i++); if (Y[i].y > Y[winner].y); winner =i;; }. Compiles into (with clang TBAA):. for.body: ; preds = %for.inc, %bb.nph; %indvar = phi i64 [ 0, %bb.nph ], [ %indvar.next, %for.inc ]; %i.01718 = phi i32 [ 0, %bb.nph ], [ %i.01719, %for.inc ]; %tmp4 = getelementptr inbounds %struct.anon* %tmp3, i64 %indvar, i32 0; %tmp5 = load double* %tmp4, align 8, !tbaa !4; %idxprom7 = sext i32 %i.01718 to i64; %tmp10 = getelementptr inbounds %struct.anon* %tmp3, i64 %idxprom7, i32 0; %tmp11 = load double* %tmp10, align 8, !tbaa !4; %cmp12 = fcmp ogt double %tmp5, %tmp11; br i1 %cmp12, label %if.then, label %for.inc. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt:29497,test,test,29497,interpreter/llvm-project/llvm/lib/Target/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt,1,['test'],['test']
Testability,"ction and function pointer; comparison even if the function's implementation is never compiled, or if it is; compiled more than once (due to, for example, recompiling the function at a; higher optimization level) and changes address. The second utility, the compile; callback, represents a re-entry point from the program into the compiler that; will trigger compilation and then execution of a function. By initializing the; function's stub to point at the function's compile callback, we enable lazy; compilation: The first attempted call to the function will follow the function; pointer and trigger the compile callback instead. The compile callback will; compile the function, update the function pointer for the stub, then execute; the function. On all subsequent calls to the function, the function pointer; will point at the already-compiled function, so there is no further overhead; from the compiler. We will look at this process in more detail in the next; chapter of this tutorial, but for now we'll trust the CompileOnDemandLayer to; set all the stubs and callbacks up for us. All we need to do is to add the; CompileOnDemandLayer to the top of our stack and we'll get the benefits of; lazy compilation. We just need a few changes to the source:. .. code-block:: c++. ...; #include ""llvm/ExecutionEngine/SectionMemoryManager.h""; #include ""llvm/ExecutionEngine/Orc/CompileOnDemandLayer.h""; #include ""llvm/ExecutionEngine/Orc/CompileUtils.h""; ... ...; class KaleidoscopeJIT {; private:; std::unique_ptr<TargetMachine> TM;; const DataLayout DL;; RTDyldObjectLinkingLayer ObjectLayer;; IRCompileLayer<decltype(ObjectLayer), SimpleCompiler> CompileLayer;. using OptimizeFunction =; std::function<std::shared_ptr<Module>(std::shared_ptr<Module>)>;. IRTransformLayer<decltype(CompileLayer), OptimizeFunction> OptimizeLayer;. std::unique_ptr<JITCompileCallbackManager> CompileCallbackManager;; CompileOnDemandLayer<decltype(OptimizeLayer)> CODLayer;. public:; using ModuleHandle = decltype(CODLa",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT3.rst:3610,stub,stubs,3610,interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT3.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT3.rst,1,['stub'],['stubs']
Testability,"ction as much as possible. Finally, ``bugpoint``; deletes any individual LLVM instructions whose absence does not eliminate the; failure. At the end, ``bugpoint`` should tell you what passes crash, give you a; bitcode file, and give you instructions on how to reproduce the failure with; ``opt`` or ``llc``. .. _code generator debugger:. Code generator debugger; -----------------------. The code generator debugger attempts to narrow down the amount of code that is; being miscompiled by the selected code generator. To do this, it takes the test; program and partitions it into two pieces: one piece which it compiles with the; ""safe"" backend (into a shared object), and one piece which it runs with either; the JIT or the static LLC compiler. It uses several techniques to reduce the; amount of code pushed through the LLVM code generator, to reduce the potential; scope of the problem. After it is finished, it emits two bitcode files (called; ""test"" [to be compiled with the code generator] and ""safe"" [to be compiled with; the ""safe"" backend], respectively), and instructions for reproducing the; problem. The code generator debugger assumes that the ""safe"" backend produces; good code. .. _miscompilation debugger:. Miscompilation debugger; -----------------------. The miscompilation debugger works similarly to the code generator debugger. It; works by splitting the test program into two pieces, running the optimizations; specified on one piece, linking the two pieces back together, and then executing; the result. It attempts to narrow down the list of passes to the one (or few); which are causing the miscompilation, then reduce the portion of the test; program which is being miscompiled. The miscompilation debugger assumes that; the selected code generator is working properly. Advice for using bugpoint; =========================. ``bugpoint`` can be a remarkably useful tool, but it sometimes works in; non-obvious ways. Here are some hints and tips:. * In the code generator and ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst:4723,test,test,4723,interpreter/llvm-project/llvm/docs/Bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst,1,['test'],['test']
Testability,"ction returns the bitwise logical and of its two; operands. Arguments:; """""""""""""""""""". The two arguments to the '``and``' instruction must be; :ref:`integer <t_integer>` or :ref:`vector <t_vector>` of integer values. Both; arguments must have identical types. Semantics:; """""""""""""""""""". The truth table used for the '``and``' instruction is:. +-----+-----+-----+; | In0 | In1 | Out |; +-----+-----+-----+; | 0 | 0 | 0 |; +-----+-----+-----+; | 0 | 1 | 0 |; +-----+-----+-----+; | 1 | 0 | 0 |; +-----+-----+-----+; | 1 | 1 | 1 |; +-----+-----+-----+. Example:; """""""""""""""". .. code-block:: text. <result> = and i32 4, %var ; yields i32:result = 4 & %var; <result> = and i32 15, 40 ; yields i32:result = 8; <result> = and i32 4, 8 ; yields i32:result = 0. .. _i_or:. '``or``' Instruction; ^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. <result> = or <ty> <op1>, <op2> ; yields ty:result; <result> = or disjoint <ty> <op1>, <op2> ; yields ty:result. Overview:; """""""""""""""""". The '``or``' instruction returns the bitwise logical inclusive or of its; two operands. Arguments:; """""""""""""""""""". The two arguments to the '``or``' instruction must be; :ref:`integer <t_integer>` or :ref:`vector <t_vector>` of integer values. Both; arguments must have identical types. Semantics:; """""""""""""""""""". The truth table used for the '``or``' instruction is:. +-----+-----+-----+; | In0 | In1 | Out |; +-----+-----+-----+; | 0 | 0 | 0 |; +-----+-----+-----+; | 0 | 1 | 1 |; +-----+-----+-----+; | 1 | 0 | 1 |; +-----+-----+-----+; | 1 | 1 | 1 |; +-----+-----+-----+. ``disjoint`` means that for each bit, that bit is zero in at least one of the; inputs. This allows the Or to be treated as an Add since no carry can occur from; any bit. If the disjoint keyword is present, the result value of the ``or`` is a; :ref:`poison value <poisonvalues>` if both inputs have a one in the same bit; position. For vectors, only the element containing the bit is poison. Example:; """""""""""""""". ::. <result> = or i32 4, %var ; yields i32:result = 4 | %var; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:398248,log,logical,398248,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['log'],['logical']
Testability,"ction with ""``CHECK-NOT:``""; (described below). For example, the following works like you'd expect:. .. code-block:: llvm. !0 = !DILocation(line: 5, scope: !1, inlinedAt: !2). ; CHECK: !DILocation(line: 5,; ; CHECK-NOT: column:; ; CHECK-SAME: scope: ![[SCOPE:[0-9]+]]. ""``CHECK-SAME:``"" directives reject the input if there are any newlines between; it and the previous directive. ""``CHECK-SAME:``"" is also useful to avoid writing matchers for irrelevant; fields. For example, suppose you're writing a test which parses a tool that; generates output like this:. .. code-block:: text. Name: foo; Field1: ...; Field2: ...; Field3: ...; Value: 1. Name: bar; Field1: ...; Field2: ...; Field3: ...; Value: 2. Name: baz; Field1: ...; Field2: ...; Field3: ...; Value: 1. To write a test that verifies ``foo`` has the value ``1``, you might first; write this:. .. code-block:: text. CHECK: Name: foo; CHECK: Value: 1{{$}}. However, this would be a bad test: if the value for ``foo`` changes, the test; would still pass because the ""``CHECK: Value: 1``"" line would match the value; from ``baz``. To fix this, you could add ``CHECK-NEXT`` matchers for every; ``FieldN:`` line, but that would be verbose, and need to be updated when; ``Field4`` is added. A more succinct way to write the test using the; ""``CHECK-SAME:``"" matcher would be as follows:. .. code-block:: text. CHECK: Name: foo; CHECK: Value:; CHECK-SAME: {{ 1$}}. This verifies that the *next* time ""``Value:``"" appears in the output, it has; the value ``1``. Note: a ""``CHECK-SAME:``"" cannot be the first directive in a file. The ""CHECK-EMPTY:"" directive; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. If you need to check that the next line has nothing on it, not even whitespace,; you can use the ""``CHECK-EMPTY:``"" directive. .. code-block:: llvm. declare void @foo(). declare void @bar(); ; CHECK: foo; ; CHECK-EMPTY:; ; CHECK-NEXT: bar. Just like ""``CHECK-NEXT:``"" the directive will fail if there is more than one; newline before it finds the next blank li",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst:15458,test,test,15458,interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,2,['test'],['test']
Testability,"ction-exit, tsc: 5434426048067316 }. Controlling Fidelity; --------------------. So far in our examples, we haven't been getting full coverage of the functions; we have in the binary. To get that, we need to modify the compiler flags so; that we can instrument more (if not all) the functions we have in the binary.; We have two options for doing that, and we explore both of these below. Instruction Threshold; `````````````````````. The first ""blunt"" way of doing this is by setting the minimum threshold for; function bodies to 1. We can do that with the; ``-fxray-instruction-threshold=N`` flag when building our binary. We rebuild; ``llc`` with this option and observe the results:. ::. $ rm CMakeCache.txt; $ cmake -GNinja ../llvm -DCMAKE_BUILD_TYPE=Release \; -DCMAKE_C_FLAGS_RELEASE=""-fxray-instrument -fxray-instruction-threshold=1"" \; -DCMAKE_CXX_FLAGS=""-fxray-instrument -fxray-instruction-threshold=1""; $ ninja llc; $ XRAY_OPTIONS=""patch_premain=true"" ./bin/llc input.ll; ==69819==XRay: Log file in 'xray-log.llc.5rqxkU'. $ llvm-xray account xray-log.llc.5rqxkU --top=10 --sort=sum --sortorder=dsc --instr_map=./bin/llc; Functions with latencies: 36652; funcid count [ min, med, 90p, 99p, max] sum function; 75 1 [ 0.672368, 0.672368, 0.672368, 0.672368, 0.672368] 0.672368 llc.cpp:271:0: main; 78 1 [ 0.626455, 0.626455, 0.626455, 0.626455, 0.626455] 0.626455 llc.cpp:381:0: compileModule(char**, llvm::LLVMContext&); 139617 1 [ 0.472618, 0.472618, 0.472618, 0.472618, 0.472618] 0.472618 LegacyPassManager.cpp:1723:0: llvm::legacy::PassManager::run(llvm::Module&); 139610 1 [ 0.472618, 0.472618, 0.472618, 0.472618, 0.472618] 0.472618 LegacyPassManager.cpp:1681:0: llvm::legacy::PassManagerImpl::run(llvm::Module&); 139612 1 [ 0.470948, 0.470948, 0.470948, 0.470948, 0.470948] 0.470948 LegacyPassManager.cpp:1564:0: (anonymous namespace)::MPPassManager::runOnModule(llvm::Module&); 139607 2 [ 0.147345, 0.315994, 0.315994, 0.315994, 0.315994] 0.463340 LegacyPassManager.cpp:1530:0: llvm::",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRayExample.rst:8262,log,log,8262,interpreter/llvm-project/llvm/docs/XRayExample.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRayExample.rst,1,['log'],['log']
Testability,"ction-type-strict]; 24 | return decltype(fun_ptr)( f_ptr /*comment*/);; | ^~~~~~~~~~~~~~~~~~~~~~~~. After:. .. code-block:: text. warning: cast from 'long (*)(const int &)' to 'decltype(fun_ptr)' (aka 'long (*)(int &)') converts to incompatible function type [-Wcast-function-type-strict]; 24 | return decltype(fun_ptr)( f_ptr /*comment*/);; | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. - ``-Wzero-as-null-pointer-constant`` diagnostic is no longer emitted when using ``__null``; (or, more commonly, ``NULL`` when the platform defines it as ``__null``) to be more consistent; with GCC.; - Clang will warn on deprecated specializations used in system headers when their instantiation; is caused by user code.; - Clang will now print ``static_assert`` failure details for arithmetic binary operators.; Example:. .. code-block:: cpp. static_assert(1 << 4 == 15);. will now print:. .. code-block:: text. error: static assertion failed due to requirement '1 << 4 == 15'; 48 | static_assert(1 << 4 == 15);; | ^~~~~~~~~~~~; note: expression evaluates to '16 == 15'; 48 | static_assert(1 << 4 == 15);; | ~~~~~~~^~~~~. - Clang now diagnoses definitions of friend function specializations, e.g. ``friend void f<>(int) {}``.; - Clang now diagnoses narrowing conversions involving const references.; (`#63151 <https://github.com/llvm/llvm-project/issues/63151>`_).; - Clang now diagnoses unexpanded packs within the template argument lists of function template specializations.; - The warning `-Wnan-infinity-disabled` is now emitted when ``INFINITY``; or ``NAN`` are used in arithmetic operations or function arguments in; floating-point mode where ``INFINITY`` or ``NAN`` don't have the expected; values. - Clang now diagnoses attempts to bind a bitfield to an NTTP of a reference type as erroneous; converted constant expression and not as a reference to subobject.; - Clang now diagnoses ``auto`` and ``decltype(auto)`` in declarations of conversion function template; (`CWG1878 <https://cplusplus.github.io/CWG/",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst:29856,assert,assertion,29856,interpreter/llvm-project/clang/docs/ReleaseNotes.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst,1,['assert'],['assertion']
Testability,"ctiondags. //===---------------------------------------------------------------------===//. Take the following code; (from http://gcc.gnu.org/bugzilla/show_bug.cgi?id=34653):; extern unsigned long table[];; unsigned long foo(unsigned char *p) {; unsigned long tag = *p;; return table[tag >> 4] + table[tag & 0xf];; }. Current code generated:; 	movzbl	(%rdi), %eax; 	movq	%rax, %rcx; 	andq	$240, %rcx; 	shrq	%rcx; 	andq	$15, %rax; 	movq	table(,%rax,8), %rax; 	addq	table(%rcx), %rax; 	ret. Issues:; 1. First movq should be movl; saves a byte.; 2. Both andq's should be andl; saves another two bytes. I think this was; implemented at one point, but subsequently regressed.; 3. shrq should be shrl; saves another byte.; 4. The first andq can be completely eliminated by using a slightly more; expensive addressing mode. //===---------------------------------------------------------------------===//. Consider the following (contrived testcase, but contains common factors):. #include <stdarg.h>; int test(int x, ...) {; int sum, i;; va_list l;; va_start(l, x);; for (i = 0; i < x; i++); sum += va_arg(l, int);; va_end(l);; return sum;; }. Testcase given in C because fixing it will likely involve changing the IR; generated for it. The primary issue with the result is that it doesn't do any; of the optimizations which are possible if we know the address of a va_list; in the current function is never taken:; 1. We shouldn't spill the XMM registers because we only call va_arg with ""int"".; 2. It would be nice if we could sroa the va_list.; 3. Probably overkill, but it'd be cool if we could peel off the first five; iterations of the loop. Other optimizations involving functions which use va_arg on floats which don't; have the address of a va_list taken:; 1. Conversely to the above, we shouldn't spill general registers if we only; call va_arg on ""double"".; 2. If we know nothing more than 64 bits wide is read from the XMM registers,; we can change the spilling code to reduce the amount of stack",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README-X86-64.txt:5011,test,test,5011,interpreter/llvm-project/llvm/lib/Target/X86/README-X86-64.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README-X86-64.txt,1,['test'],['test']
Testability,"ctive moving of the frame; - nozoomx - disable zooming on X axis; - nozoomy - disable zooming on Y axis; - cpXY - create palette XY for the canvas like cp50; - nopalette - ignore palette stored with TCanvas; - nocolors - ignore colors list stored with TCanvas; - lcolors - use only locally colors list stored with TCanvas; - nomargins - clear frame margins. ## Superimposing draw objects. In the URL string one could use ""+"" sign to specify objects superposition:. - [item=hpx+hprof](https://root.cern/js/latest/?file=../files/hsimple.root&item=hpx+hprof). With similar syntax one could specify individual draw options for superimposed objects. - [item=hpx+hprof&opt=logy+hist](https://root.cern/js/latest/?file=../files/hsimple.root&item=hpx+hprof&opt=logy+hist). Here ""logy"" option will be used for ""hpx1"" item and ""hist"" option for ""hprof;1"" item. While draw option can include ""+"" sign itself, for superposition one could specify arrays of items and draw options like:. - [item=[hpx;1,hprof;1]&opt=[logy,hist]](https://root.cern/js/latest/?file=../files/hsimple.root&item=[hpx;1,hprof;1]&opt=[logy,hist]). ## TTree draw. JSROOT provides possibility to display TTree data, using [TTree::Draw](https://root.cern/doc/master/classTTree.html) syntax:. - [opt=px](https://root.cern/js/latest/?file=../files/hsimple.root&item=ntuple;1&opt=px); - [opt=px:py](https://root.cern/js/latest/?file=../files/hsimple.root&item=ntuple;1&opt=px:py); - [opt=px:py:pz](https://root.cern/js/latest/?file=../files/hsimple.root&item=ntuple;1&opt=px:py:pz). It is also possible to use branch by id number specifying name like ""br_0"", ""br_1"" and so on:. - [opt=br_0:br_1](https://root.cern/js/latest/?file=../files/hsimple.root&item=ntuple&opt=br_0:br_1). Histogram ranges and binning defined after reading first 1000 entries from the tree.; Like in ROOT, one could configure histogram binning and range directly:. - [opt=px:py>>h(50,-5,5,50,-5,5)](https://root.cern/js/latest/?file=../files/hsimple.root&item=ntuple&opt=",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/JSROOT/JSROOT.md:14477,log,logy,14477,documentation/JSROOT/JSROOT.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/JSROOT/JSROOT.md,1,['log'],['logy']
Testability,"ctive; ~~~~~~~~~~~~~~~~~~~~. Sometimes you want to disable a FileCheck directive without removing it; entirely, or you want to write comments that mention a directive by name. The; ""``COM:``"" directive makes it easy to do this. For example, you might have:. .. code-block:: llvm. ; X32: pinsrd_1:; ; X32: pinsrd $1, 4(%esp), %xmm0. ; COM: FIXME: X64 isn't working correctly yet for this part of codegen, but; ; COM: X64 will have something similar to X32:; ; COM:; ; COM: X64: pinsrd_1:; ; COM: X64: pinsrd $1, %edi, %xmm0. Without ""``COM:``"", you would need to use some combination of rewording and; directive syntax mangling to prevent FileCheck from recognizing the commented; occurrences of ""``X32:``"" and ""``X64:``"" above as directives. Moreover,; FileCheck diagnostics have been proposed that might complain about the above; occurrences of ""``X64``"" that don't have the trailing ""``:``"" because they look; like directive typos. Dodging all these problems can be tedious for a test; author, and directive syntax mangling can make the purpose of test code unclear.; ""``COM:``"" avoids all these problems. A few important usage notes:. * ""``COM:``"" within another directive's pattern does *not* comment out the; remainder of the pattern. For example:. .. code-block:: llvm. ; X32: pinsrd $1, 4(%esp), %xmm0 COM: This is part of the X32 pattern!. If you need to temporarily comment out part of a directive's pattern, move it; to another line. The reason is that FileCheck parses ""``COM:``"" in the same; manner as any other directive: only the first directive on the line is; recognized as a directive. * For the sake of LIT, FileCheck treats ""``RUN:``"" just like ""``COM:``"". If this; is not suitable for your test environment, see :option:`--comment-prefixes`. * FileCheck does not recognize ""``COM``"", ""``RUN``"", or any user-defined comment; prefix as a comment directive if it's combined with one of the usual check; directive suffixes, such as ""``-NEXT:``"" or ""``-NOT:``"", discussed below.; FileCh",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst:11752,test,test,11752,interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,2,['test'],['test']
Testability,"ctives reject the input if there are any newlines between; it and the previous directive. ""``CHECK-SAME:``"" is also useful to avoid writing matchers for irrelevant; fields. For example, suppose you're writing a test which parses a tool that; generates output like this:. .. code-block:: text. Name: foo; Field1: ...; Field2: ...; Field3: ...; Value: 1. Name: bar; Field1: ...; Field2: ...; Field3: ...; Value: 2. Name: baz; Field1: ...; Field2: ...; Field3: ...; Value: 1. To write a test that verifies ``foo`` has the value ``1``, you might first; write this:. .. code-block:: text. CHECK: Name: foo; CHECK: Value: 1{{$}}. However, this would be a bad test: if the value for ``foo`` changes, the test; would still pass because the ""``CHECK: Value: 1``"" line would match the value; from ``baz``. To fix this, you could add ``CHECK-NEXT`` matchers for every; ``FieldN:`` line, but that would be verbose, and need to be updated when; ``Field4`` is added. A more succinct way to write the test using the; ""``CHECK-SAME:``"" matcher would be as follows:. .. code-block:: text. CHECK: Name: foo; CHECK: Value:; CHECK-SAME: {{ 1$}}. This verifies that the *next* time ""``Value:``"" appears in the output, it has; the value ``1``. Note: a ""``CHECK-SAME:``"" cannot be the first directive in a file. The ""CHECK-EMPTY:"" directive; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. If you need to check that the next line has nothing on it, not even whitespace,; you can use the ""``CHECK-EMPTY:``"" directive. .. code-block:: llvm. declare void @foo(). declare void @bar(); ; CHECK: foo; ; CHECK-EMPTY:; ; CHECK-NEXT: bar. Just like ""``CHECK-NEXT:``"" the directive will fail if there is more than one; newline before it finds the next blank line, and it cannot be the first; directive in a file. The ""CHECK-NOT:"" directive; ~~~~~~~~~~~~~~~~~~~~~~~~~~. The ""``CHECK-NOT:``"" directive is used to verify that a string doesn't occur; between two matches (or before the first match, or after the last match). For; example, to verify that a ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst:15791,test,test,15791,interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,1,['test'],['test']
Testability,"ctly handle `same0` draw option for TH2; 5. Fix several issues with axis reverse order, support on lego plots; 6. Support more kinds of log scales - ln and logN where N is any positive integer; 7. Adjust TAxis title positioning to native ROOT behavior; 8. Add interactivity (moving, context menu) for TLine, TBox, TText, TLatex, TDiamond, TGaxis, TASImage; 9. Use new gStyle attributes for candle and violin plots; 10. Implement autoplace for TLegend, also via context menu; 11. Change algorithm of building smooth (bezier) curves; 12. Let change physical node visibility in TGeo drawings; 13. Use TGaxis attributes from gStyle - fAxisMaxDigits, fStripDecimals and exponent offset; 14. Implement ""projxy"" draw option for TH2 - like projxy3 or projx1_y5; 15. Support custom function in TGaxis - when drawn in TWebCanvas; 16. Introduce settings.WithCredentials, set xhr.withCredentials = true when submitting HTTP requests; 17. Let superimpose TH3 and geo drawings; 18. Apply pad draw options like 'gridx' or 'logy' to all subpads; 19. Support new TScatter and TAnnotation classes; 20. Implement moving and resizing of subpads; 21. Implement zooming in the TASImage; 22. Let configure position and direction of camera for TGeo, let create URL for that; 23. Support labels rotation for simple axis in geometry; 24. Support many orthographic cameras with overlayed grid/labels; 25. Support InstancedMesh for TGeo drawing, let show really large geometries; 26. Implement 'inject=path/script_name.js' url option to inject scripts without emulating of v6; 27. Exclude 'HEAD' http request when reading ROOT file, all necessary info can be get from first real HTTP request; 28. Provide makeImage function for generation of svg, png and jpeg images in batch and interactively (#257); 29. Implement interactive zoom shifting when middle-mouse button down or single-touch moving; 30. Several improvements for touch devices or devices with small displays; 31. Remove settings.FrameNDC, use Style.fPadLeft/Right/To",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/changes.md:13181,log,logy,13181,js/changes.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/changes.md,1,['log'],['logy']
Testability,"ctness might be considered overly pedantic for the commonly; used ``getenv`` implementations. To enable this option, use:; ``-analyzer-config security.cert.env.InvalidPtr:InvalidatingGetEnv=true``. By default, this option is set to *false*. When this option is enabled, warnings will be generated for scenarios like the; following:. .. code-block:: c. char* p = getenv(""VAR"");; char* pp = getenv(""VAR2""); // assumes this call can invalidate `env`; strlen(p); // warns about accessing invalid ptr. .. _security-FloatLoopCounter:. security.FloatLoopCounter (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on using a floating point value as a loop counter (CERT: FLP30-C, FLP30-CPP). .. code-block:: c. void test() {; for (float x = 0.1f; x <= 1.0f; x += 0.1f) {} // warn; }. .. _security-insecureAPI-UncheckedReturn:. security.insecureAPI.UncheckedReturn (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of functions whose return values must be always checked. .. code-block:: c. void test() {; setuid(1); // warn; }. .. _security-insecureAPI-bcmp:. security.insecureAPI.bcmp (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'bcmp' function. .. code-block:: c. void test() {; bcmp(ptr0, ptr1, n); // warn; }. .. _security-insecureAPI-bcopy:. security.insecureAPI.bcopy (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'bcopy' function. .. code-block:: c. void test() {; bcopy(src, dst, n); // warn; }. .. _security-insecureAPI-bzero:. security.insecureAPI.bzero (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'bzero' function. .. code-block:: c. void test() {; bzero(ptr, n); // warn; }. .. _security-insecureAPI-getpw:. security.insecureAPI.getpw (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'getpw' function. .. code-block:: c. void test() {; char buff[1024];; getpw(2, buff); // warn; }. .. _security-insecureAPI-gets:. security.insecureAPI.gets (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'gets' function. .. code-block:: c. void test() {; char ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:22752,test,test,22752,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,ctor.h; compiler-rt/lib/xray/xray_profiling.cpp; compiler-rt/lib/xray/xray_profiling_flags.cpp; compiler-rt/lib/xray/xray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpR,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107293,test,tests,107293,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,3,['test'],"['test', 'tests']"
Testability,"ctor/assignment operator can throw an exception.; The effects are undefined if an exception is thrown. class C {; public:; int i, j;; C (const C &c) {; i = c.i;; throw 1; // warn; j = c.j;; };; };. class C {; public:; int i, j;; C &operator=(const C &c) {; i = c.i;; throw 1; // warn; j = c.j;; };; };. undefbehavior.ValarrayArgBound; (C++); Undefined behavior: the value of the n argument passed; to valarray constructor is greater than the number of values; pointed to by the first argument (source).; Source: C++03 26.3.2.1p4; C++11 26.6.2.2p4. #include <valarray>. struct S {; int i;; S(int ii) : i(ii) {};; };. void test(void) {; S s[] = { S(1), S(2) };; std::valarray<S> v(s,3); // warn; }. undefbehavior.ValarrayLengthDiffer; (C++); Undefined behavior: valarray operands are of different length.; Source: C++03 26.3.2.2p1, 26.3.2.6p3, 26.3.3.1p3, 26.3.3.2p3;; C++11 defined (26.6.2.3p1), 26.6.2.7p3, 26.6.3.1p3,; 26.6.3.2p3. // C++03; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a = b; // warn; b.resize(1);; a = b; // ok; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a *= b; // warn; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a = a + b; // warn; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; std::valarray<bool> c(false, 1);; c = a == b; // warn; }. undefbehavior.ValarrayZeroLength; (C++); Undefined behavior: calling sum()/min()/; max() methods of a zero length valarray the behavior is; undefined.; Source: C++03 26.3.2.7p2, p3, p4; C++11 26.6.2.8p5, p6,; p7. #include <valarray>. void test(void) {; std::valarray<int> v(0, 0);; v.sum(); // warn; }. undefbehavior.ValarrayBadIndirection; (C++); Undefined behavior: element is specified more than once in an indirection.; Source: C++03 26.3.9.2p2, 26.3.9.3p2; C++11 26.6.9.2p2,; 26.6.9.3p2. #include <valarray>. void test() {; // '1' is specifie",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:16140,test,test,16140,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"ctorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(te",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1353,test,testBukin,1353,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,2,['test'],['testBukin']
Testability,ctorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTES,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1584,test,testBernstein,1584,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,2,['test'],['testBernstein']
Testability,"cts that come from, e.g., a library adopting the feature and providing; benefits to its users.; A specific need to reside within the Clang tree: There are some extensions; that would be better expressed as a separate tool, and should remain as; separate tools even if they end up being hosted as part of the LLVM umbrella; project.; A specification: The specification must be sufficient to understand the; design of the feature as well as interpret the meaning of specific examples.; The specification should be detailed enough that another compiler vendor; could implement the feature.; Representation within the appropriate governing organization: For; extensions to a language governed by a standards committee (C, C++, OpenCL),; the extension itself must have an active proposal and proponent within that; committee and have a reasonable chance of acceptance. Clang should drive the; standard, not diverge from it. This criterion does not apply to all; extensions, since some extensions fall outside of the realm of the standards; bodies.; A long-term support plan: increasingly large or complex extensions to; Clang need matching commitments to supporting them over time, including; improving their implementation and specification as Clang evolves. The; capacity of the contributor to make that commitment is as important as the; commitment itself.; A high-quality implementation: The implementation must fit well into; Clang's architecture, follow LLVM's coding conventions, and meet Clang's; quality standards, including diagnostics and complete AST; representations. This is particularly important for language extensions,; because users will learn how those extensions work through the behavior of the; compiler.; A test suite: Extensive testing is crucial to ensure that the language; extension is not broken by ongoing maintenance in Clang. The test suite; should be complete enough that another compiler vendor could conceivably; validate their implementation of the feature against it. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/get_involved.html:4447,test,test,4447,interpreter/llvm-project/clang/www/get_involved.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/get_involved.html,3,['test'],"['test', 'testing']"
Testability,"cts:@""Foo"", ""Bar"", nil];; // warn: argument should be an ObjC pointer type, not 'char *'; }. .. _osx-coreFoundation-CFError:. osx.coreFoundation.CFError (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check usage of CFErrorRef* parameters. .. code-block:: c. void test(CFErrorRef *error) {; // warn: function accepting CFErrorRef* should have a; // non-void return; }. int foo(CFErrorRef *error) {; *error = 0; // warn: potential null dereference; return 0;; }. .. _osx-coreFoundation-CFNumber:. osx.coreFoundation.CFNumber (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for proper uses of CFNumber APIs. .. code-block:: c. CFNumberRef test(unsigned char x) {; return CFNumberCreate(0, kCFNumberSInt16Type, &x);; // warn: 8 bit integer is used to initialize a 16 bit integer; }. .. _osx-coreFoundation-CFRetainRelease:. osx.coreFoundation.CFRetainRelease (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for null arguments to CFRetain/CFRelease/CFMakeCollectable. .. code-block:: c. void test(CFTypeRef p) {; if (!p); CFRetain(p); // warn; }. void test(int x, CFTypeRef p) {; if (p); return;. CFRelease(p); // warn; }. .. _osx-coreFoundation-containers-OutOfBounds:. osx.coreFoundation.containers.OutOfBounds (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Checks for index out-of-bounds when using 'CFArray' API. .. code-block:: c. void test() {; CFArrayRef A = CFArrayCreate(0, 0, 0, &kCFTypeArrayCallBacks);; CFArrayGetValueAtIndex(A, 0); // warn; }. .. _osx-coreFoundation-containers-PointerSizedValues:. osx.coreFoundation.containers.PointerSizedValues (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warns if 'CFArray', 'CFDictionary', 'CFSet' are created with non-pointer-size values. .. code-block:: c. void test() {; int x[] = { 1 };; CFArrayRef A = CFArrayCreate(0, (const void """""""""""""""""""""""""""""""""""""""""""""""")x, 1,; &kCFTypeArrayCallBacks); // warn; }. Fuchsia; ^^^^^^^. Fuchsia is an open source capability-based operating system currently being; developed by Google. This section describes c",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:42885,test,test,42885,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"cture, we prefer relying on regression tests for testing; transformations and analysis on the IR. Regression tests; ----------------. The regression tests are small pieces of code that test a specific; feature of LLVM or trigger a specific bug in LLVM. The language they are; written in depends on the part of LLVM being tested. These tests are driven by; the :doc:`Lit <CommandGuide/lit>` testing tool (which is part of LLVM), and; are located in the ``llvm/test`` directory. Typically when a bug is found in LLVM, a regression test containing just; enough code to reproduce the problem should be written and placed; somewhere underneath this directory. For example, it can be a small; piece of LLVM IR distilled from an actual application or benchmark. Testing Analysis; ----------------. An analysis is a pass that infer properties on some part of the IR and not; transforming it. They are tested in general using the same infrastructure as the; regression tests, by creating a separate ""Printer"" pass to consume the analysis; result and print it on the standard output in a textual format suitable for; FileCheck.; See `llvm/test/Analysis/BranchProbabilityInfo/loop.ll <https://github.com/llvm/llvm-project/blob/main/llvm/test/Analysis/BranchProbabilityInfo/loop.ll>`_; for an example of such test. ``test-suite``; --------------. The test suite contains whole programs, which are pieces of code which; can be compiled and linked into a stand-alone program that can be; executed. These programs are generally written in high level languages; such as C or C++. These programs are compiled using a user specified compiler and set of; flags, and then executed to capture the program output and timing; information. The output of these programs is compared to a reference; output to ensure that the program is being compiled correctly. In addition to compiling and executing programs, whole program tests; serve as a way of benchmarking LLVM performance, both in terms of the; efficiency of the progr",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:2699,test,tested,2699,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,2,['test'],"['tested', 'tests']"
Testability,"culator with a Poisson problem, reproduces; results from table IV and V of the original; paper�Phys.Rev.D57:3873-3889,1998.; rs401d_FeldmanCousins.C Demonstrates use of; FeldmanCousins interval calculator with the neutrino oscillation toy; example described in the original paper�Phys.Rev.D57:3873-3889,1998.; Reproduces figure 12.; rs_bernsteinCorrection.C Demonstrates use of; BernsteinCorrection class, which corrects a nominal PDF with a polynomial; to agree with observed or simulated data. TestStatistic interface and implementations; We added a new interface class called TestStatistic. It defines the; method Evaluate(data, parameterPoint), which returns a double. �This; class can be used in�conjunction�with the ToyMCSampler class to generate; sampling distributions for a user-defined test statistic. �; The following concrete implementations of the TestStatistic interface; are currently available. ProfileLikelihoodTestStatReturns the log of profile; likelihood ratio. �Generally a powerful test statistic. ; NumEventsTestStatReturns the number of events in the; dataset. �Useful for number counting experiments.; DebuggingTestStat Simply returns a uniform random number; between 0,1. �Useful for debugging. SamplingDistribution and the�TestStatSampler interface and; implementations; We introduced a ``result'' or data model class called; SamplingDistribution, which holds the sampling distribution of an; arbitrary real valued test statistic. �The class also can return the; inverse of the cumulative distribution function (with or without; interpolation). �; We introduced an interface for any tool that can produce a; SamplingDistribution, called TestStatSampler. �The interface is; essentially GetSamplingDistribution(parameterPoint) which returns a; SamplingDistribution based on a given probability density function. �We; foresee a few versions of this tool based on toy Monte Carlo, importance; sampling, Fourier transforms, etc. �The following concrete implementation; of the Te",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v524/index.html:26305,test,test,26305,roofit/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v524/index.html,1,['test'],['test']
Testability,"current CFA location description. *Since the CFA location description is required to be a memory byte address; location description, the value of val_offset(N) will also be a memory byte; address location description since it is offsetting the CFA location; description by N bytes. Furthermore, the value of val_offset(N) will be a; memory byte address in the same address space as the CFA location; description.*. .. note::. Should DWARF allow the address size to be a different size to the size of; the register? Requiring them to be the same bit size avoids any issue of; conversion as the bit contents of the register is simply interpreted as a; value of the address. GDB has a per register hook that allows a target specific conversion on a; register by register basis. It defaults to truncation of bigger registers,; and to actually reading bytes from the next register (or reads out of bounds; for the last register) for smaller registers. There are no GDB tests that; read a register out of bounds (except an illegal hand written assembly; test). *register(R)*; This register has been stored in another register numbered R. The previous value of this register is the location description obtained using; the call frame information for the current frame and current program location; for register R. The DWARF is ill-formed if the size of this register does not match the size; of register R or if there is a cyclic dependency in the call frame; information. .. note::. Should this also allow R to be larger than this register? If so is the value; stored in the low order bits and it is undefined what is stored in the; extra upper bits?. *expression(E)*; The previous value of this register is located at the location description; produced by evaluating the DWARF operation expression E (see; :ref:`amdgpu-dwarf-operation-expressions`). E is evaluated with the current context, except the result kind is a location; description, the compilation unit is unspecified, the object is unspecified,",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AMDGPUDwarfExtensionsForHeterogeneousDebugging.rst:193708,test,tests,193708,interpreter/llvm-project/llvm/docs/AMDGPUDwarfExtensionsForHeterogeneousDebugging.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AMDGPUDwarfExtensionsForHeterogeneousDebugging.rst,2,['test'],"['test', 'tests']"
Testability,"cutable relative to itself for static analysis. One can override this; behavior with this option by using the 'clang' packaged with Xcode (on OS X) or; from the PATH. ; A complete list of options can be obtained by running scan-build; with no arguments.; Output of scan-build. The output of scan-build is a set of HTML files, each one which represents a; separate bug report. A single index.html file is generated for; surveying all of the bugs. You can then just open index.html in a web; browser to view the bug reports. Where the HTML files are generated is specified with a -o option to; scan-build. If -o isn't specified, a directory in /tmp; is created to store the files (scan-build will print a message telling; you where they are). If you want to view the reports immediately after the build; completes, pass -V to scan-build. Recommended Usage Guidelines; This section describes a few recommendations with running the analyzer.; ALWAYS analyze a project in its ""debug"" configuration; Most projects can be built in a ""debug"" mode that enables assertions.; Assertions are picked up by the static analyzer to prune infeasible paths, which; in some cases can greatly reduce the number of false positives (bogus error; reports) emitted by the tool.; Another option is to use --force-analyze-debug-code flag of; scan-build tool which would enable assertions automatically.; Use verbose output when debugging scan-build; scan-build takes a -v option to emit verbose output about; what it's doing; two -v options emit more information. Redirecting the; output of scan-build to a text file (make sure to redirect standard; error) is useful for filing bug reports against scan-build or the; analyzer, as we can see the exact options (and files) passed to the analyzer.; For more comprehensible logs, don't perform a parallel build.; Run './configure' through scan-build; If an analyzed project uses an autoconf generated configure script,; you will probably need to run configure script through; scan",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:6235,assert,assertions,6235,interpreter/llvm-project/clang/www/analyzer/scan-build.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html,1,['assert'],['assertions']
Testability,cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regressio,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5844,test,testMethodDLAdamOptimizationCpu,5844,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testMethodDLAdamOptimizationCpu']
Testability,"d Argument Hacking (BUGPOINT USE ONLY; DO NOT USE); -----------------------------------------------------------------------. Same as dead argument elimination, but deletes arguments to functions which are; external. This is only for use by :doc:`bugpoint <Bugpoint>`. ``extract-blocks``: Extract Basic Blocks From Module (for bugpoint use); -----------------------------------------------------------------------. This pass is used by bugpoint to extract all blocks from the module into their; own functions. ``instnamer``: Assign names to anonymous instructions; -----------------------------------------------------. This is a little utility pass that gives instructions names, this is mostly; useful when diffing the effect of an optimization because deleting an unnamed; instruction can change all other instruction numbering, making the diff very; noisy. .. _passes-verify:. ``verify``: Module Verifier; ---------------------------. Verifies an LLVM IR code. This is useful to run after an optimization which is; undergoing testing. Note that llvm-as verifies its input before emitting; bitcode, and also that malformed bitcode is likely to make LLVM crash. All; language front-ends are therefore encouraged to verify their output before; performing optimizing transformations. #. Both of a binary operator's parameters are of the same type.; #. Verify that the indices of mem access instructions match other operands.; #. Verify that arithmetic and other things are only performed on first-class; types. Verify that shifts and logicals only happen on integrals f.e.; #. All of the constants in a switch statement are of the correct type.; #. The code is in valid SSA form.; #. It is illegal to put a label into any other type (like a structure) or to; return one.; #. Only phi nodes can be self referential: ``%x = add i32 %x``, ``%x`` is; invalid.; #. PHI nodes must have an entry for each predecessor, with no extras.; #. PHI nodes must be the first thing in a basic block, all grouped togeth",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Passes.rst:41059,test,testing,41059,interpreter/llvm-project/llvm/docs/Passes.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Passes.rst,1,['test'],['testing']
Testability,d COMMAND testLSTMForwardPass). # LSTM - Backpropagation Reference; #ROOT_EXECUTABLE(testLSTMBackpropagation TestLSTMBackpropagation.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-Backpropagation COMMAND testLSTMBackpropagation). # LSTM - Full Test Reference; #ROOT_EXECUTABLE(testFullLSTM TestFullLSTM.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-LSTM-FullLSTM COMMAND testFullLSTM). #--- CUDA tests. ---------------------------; if (tmva-gpu AND tmva-cudnn); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testLSTMForwardPassCudnn TestLSTMForwardPassCudnn.cxx); target_link_libraries(testLSTMForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forwaed-Cudnn COMMAND testLSTMForwardPassCudnn). add_executable(testLSTMBackpropagationCudnn TestLSTMBackpropagationCudnn.cxx); target_link_libraries(testLSTMBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-BackpropagationCudnn COMMAND testLSTMBackpropagationCudnn); # Test crashes on ubuntu2404-cuda-12.6.1. See root-project/root#16790:; set_tests_properties(TMVA-DNN-LSTM-BackpropagationCudnn PROPERTIES DISABLED True). # LSTM - Full Test GPU; add_executable(testFullLSTMCudnn TestFullLSTMCudnn.cxx); target_link_libraries(testFullLSTMCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Full-Cudnn COMMAND testFullLSTMCudnn). endif (tmva-gpu AND tmva-cudnn). #--- CPU tests. ----------------------------; if (BLAS_FOUND AND imt). # LSTM - Forward CPU; ROOT_EXECUTABLE(testLSTMForwardPassCpu TestLSTMForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Forward-Cpu COMMAND testLSTMForwardPassCpu). # LSTM - Backward CPU; ROOT_EXECUTABLE(testLSTMBackpropagationCpu TestLSTMBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-LSTM-Backward-Cpu COMMAND testLSTMBackpropagationCpu). # LSTM - Full Test Reference; ROOT_EXECUTABLE(testFullLSTM,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt:1329,test,testLSTMBackpropagationCudnn,1329,tmva/tmva/test/DNN/LSTM/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/LSTM/CMakeLists.txt,2,['test'],['testLSTMBackpropagationCudnn']
Testability,"d Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception();; // warn (did you mean 'throw std::exception()'?); }. different.StaticArrayPtrCompare; (C); Pointer to static array is being compared to NULL. May the subscripting is; missing. void test() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C++); Odd implicit conversion to boolean.; Note: possibly merge with ; alpha.core.BoolAssignment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull = sll; // warn; return ull;; }. void f(unsigned int i);. void test(int si) {; f(si); // warn; }. unsigned int test(int i) {; return i;; }. different.NumericTruncation; (C); Numeric truncation might take place.; Source: ; CWE-197. unsign",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:24213,test,test,24213,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"d Fortran version,; with almost equivalent numerical accuracy and computational performances.; Furthermore, it contains new functionality, like the possibility to set single side parameter limits or; the FUMILI algorithm, which is an optimized method for least square and log likelihood minimizations.; The package has been originally developed by M. Winkler and F. James.; More information on the new C++ version can be found on the; MINUIT Web Site. Minuit2, originally developed in the SEAL project, is now distributed within %ROOT.; The API has been then changed in this new version to follow the %ROOT coding convention (function names starting with capital letters) and the classes have been moved inside the namespace ROOT::Minuit2.; In addition, the %ROOT distribution contains classes needed to integrate Minuit2 in the %ROOT framework. A new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements the interface; ROOT::Math::Minimizer. Within %ROOT, it can be instantiates also using the %ROOT plug-in manager. This class provides a convenient entry point for using Minuit2. An example of using this interface is; the %ROOT tutorial tutorials/fit/NumericalMinimization.C or; the Minuit2 test program testMinimize.cxx. A standalone version of Minuit2 (independent of %ROOT) can be downloaded from here. It does not contain the %ROOT interface and it is therefore totally independent of external packages and can be simply build using the configure script and then make. Example tests are provided in the directory test/MnSim and test/MnTutorial and they can be built with the make check command. The Minuit2 User Guide provides all the information needed for using directly (without add-on packages like %ROOT) Minuit2. References. F. James, Fortran MINUIT Reference Manual (html);; F. James and M. Winkler, C++ MINUIT User's Guide (html and; pdf);; F. James, Minuit Tutorial on Function Minimization (pdf);; F. James, The Interpretation of Errors in Minuit (pdf);. */; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html:1485,test,test,1485,math/minuit2/doc/Minuit2.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.html,5,['test'],"['test', 'testMinimize', 'tests']"
Testability,"d a way to handle arbitrary mutable; variables without the need to create Phi nodes at all:. #. Each mutable variable becomes a stack allocation.; #. Each read of the variable becomes a load from the stack.; #. Each update of the variable becomes a store to the stack.; #. Taking the address of a variable just uses the stack address; directly. While this solution has solved our immediate problem, it introduced; another one: we have now apparently introduced a lot of stack traffic; for very simple and common operations, a major performance problem.; Fortunately for us, the LLVM optimizer has a highly-tuned optimization; pass named ""mem2reg"" that handles this case, promoting allocas like this; into SSA registers, inserting Phi nodes as appropriate. If you run this; example through the pass, for example, you'll get:. .. code-block:: bash. $ llvm-as < example.ll | opt -passes=mem2reg | llvm-dis; @G = weak global i32 0; @H = weak global i32 0. define i32 @test(i1 %Condition) {; entry:; br i1 %Condition, label %cond_true, label %cond_false. cond_true:; %X.0 = load i32, i32* @G; br label %cond_next. cond_false:; %X.1 = load i32, i32* @H; br label %cond_next. cond_next:; %X.01 = phi i32 [ %X.1, %cond_false ], [ %X.0, %cond_true ]; ret i32 %X.01; }. The mem2reg pass implements the standard ""iterated dominance frontier""; algorithm for constructing SSA form and has a number of optimizations; that speed up (very common) degenerate cases. The mem2reg optimization; pass is the answer to dealing with mutable variables, and we highly; recommend that you depend on it. Note that mem2reg only works on; variables in certain circumstances:. #. mem2reg is alloca-driven: it looks for allocas and if it can handle; them, it promotes them. It does not apply to global variables or heap; allocations.; #. mem2reg only looks for alloca instructions in the entry block of the; function. Being in the entry block guarantees that the alloca is only; executed once, which makes analysis simpler.; #. mem",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl07.rst:7071,test,test,7071,interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl07.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl07.rst,1,['test'],['test']
Testability,"d be passed to the analyzer core; by calling CheckerContext::emitReport. AST Visitors; Some checks might not require path-sensitivity to be effective. Simple AST walk; might be sufficient. If that is the case, consider implementing a Clang; compiler warning. On the other hand, a check might not be acceptable as a compiler; warning; for example, because of a relatively high false positive rate. In this; situation, AST callbacks checkASTDecl and; checkASTCodeBody are your best friends. Testing; Every patch should be well tested with Clang regression tests. The checker tests; live in clang/test/Analysis folder. To run all of the analyzer tests,; execute the following from the clang build directory:; ; $ bin/llvm-lit -sv ../llvm/tools/clang/test/Analysis; ; Useful Commands/Debugging Hints; Attaching the Debugger; When your command contains the -cc1 flag, you can attach the; debugger to it directly:. $ gdb --args clang -cc1 -analyze -analyzer-checker=core test.c; $ lldb -- clang -cc1 -analyze -analyzer-checker=core test.c. Otherwise, if your command line contains --analyze,; the actual clang instance would be run in a separate process. In; order to debug it, use the -### flag for obtaining; the command line of the child process:. $ clang --analyze test.c -\#\#\#. Below we describe a few useful command line arguments, all of which assume that; you are running clang -cc1. Narrowing Down the Problem; While investigating a checker-related issue, instruct the analyzer to only; execute a single checker:. $ clang -cc1 -analyze -analyzer-checker=osx.KeychainAPI test.c. If you are experiencing a crash, to see which function is failing while; processing a large file use the -analyzer-display-progress; option.; To selectively analyze only the given function, use the; -analyze-function option:. $ clang -cc1 -analyze -analyzer-checker=core test.c -analyzer-display-progress; ANALYZE (Syntax): test.c foo; ANALYZE (Syntax): test.c bar; ANALYZE (Path, Inline_Regular): test.c bar; ANALYZE ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html:19085,test,test,19085,interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,1,['test'],['test']
Testability,"d builds a library. Naturally, we should; # build pcm files, however, building module MathCore requires specific -I to; # build the needed VecCore and Vc components. This test does not have access; # to the include relevant include paths. Secondly, if we want to reuse the; # modules from ROOT which makes most sense we can't because we get a hard; # error such as: fatal error: malformed or corrupted AST file:; # 'SourceLocation remap refers to unknown module, cannot find include/pcms/1WYSNQV9VBZK7/stl-2OZGQN92C38MI.pcm; #; # FIXME: We can fix the first point by moving out all VecCore-related headers; # such as Math/Types.h and all of its includers in a separate module. Thus,; # the current test will not require the VecCore (as in the textual case).; # Alternatively, we can trace the origin of the fatal error and try to remap; # the source locations.; if(MSVC); set(build_generator_args --build-generator ${CMAKE_GENERATOR}); if(CMAKE_GENERATOR_PLATFORM); list(APPEND build_generator_args --build-generator-platform ${CMAKE_GENERATOR_PLATFORM}); endif(); if(CMAKE_GENERATOR_TOOLSET); list(APPEND build_generator_args --build-generator-toolset ${CMAKE_GENERATOR_TOOLSET}); endif(); ROOT_ADD_TEST(test-periodic-build; COMMAND ${CMAKE_CTEST_COMMAND} ${build_generator_args}; --build-and-test ${CMAKE_CURRENT_SOURCE_DIR}/periodic periodic-build; --build-options -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}; ); else(); ROOT_ADD_TEST(test-periodic-build; COMMAND; env CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}; ${CMAKE_CTEST_COMMAND} --build-generator ${CMAKE_GENERATOR}; --build-and-test ${CMAKE_CURRENT_SOURCE_DIR}/periodic periodic-build; --build-options -DCMAKE_PREFIX_PATH=${CMAKE_BINARY_DIR}; ); endif(); endif(). #--canary tests------------------------------------------------------------------------------------; if(asserts AND NOT MSVC); ROOT_EXECUTABLE(checkAssertsNDEBUG checkAssertsNDEBUG.cxx LIBRARIES Core); ROOT_ADD_TEST(checkAssertsNDEBUG COMMAND checkAssertsNDEBUG); endif(); ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:20662,test,test-periodic-build,20662,test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt,6,"['assert', 'test']","['asserts', 'test', 'test-periodic-build', 'tests']"
Testability,"d by fuzzing or acquired by other means); you may want to minimize it while still preserving the full coverage. One way to do that; is to use the `-merge=1` flag:. .. code-block:: console. mkdir NEW_CORPUS_DIR # Store minimized corpus here.; ./my_fuzzer -merge=1 NEW_CORPUS_DIR FULL_CORPUS_DIR. You may use the same flag to add more interesting items to an existing corpus.; Only the inputs that trigger new coverage will be added to the first corpus. .. code-block:: console. ./my_fuzzer -merge=1 CURRENT_CORPUS_DIR NEW_POTENTIALLY_INTERESTING_INPUTS_DIR. Running; -------. To run the fuzzer, first create a Corpus_ directory that holds the; initial ""seed"" sample inputs:. .. code-block:: console. mkdir CORPUS_DIR; cp /some/input/samples/* CORPUS_DIR. Then run the fuzzer on the corpus directory:. .. code-block:: console. ./my_fuzzer CORPUS_DIR # -max_len=1000 -jobs=20 ... As the fuzzer discovers new interesting test cases (i.e. test cases that; trigger coverage of new paths through the code under test), those test cases; will be added to the corpus directory. By default, the fuzzing process will continue indefinitely – at least until; a bug is found. Any crashes or sanitizer failures will be reported as usual,; stopping the fuzzing process, and the particular input that triggered the bug; will be written to disk (typically as ``crash-<sha1>``, ``leak-<sha1>``,; or ``timeout-<sha1>``). Parallel Fuzzing; ----------------. Each libFuzzer process is single-threaded, unless the library under test starts; its own threads. However, it is possible to run multiple libFuzzer processes in; parallel with a shared corpus directory; this has the advantage that any new; inputs found by one fuzzer process will be available to the other fuzzer; processes (unless you disable this with the ``-reload=0`` option). This is primarily controlled by the ``-jobs=N`` option, which indicates that; that `N` fuzzing jobs should be run to completion (i.e. until a bug is found or; time/iteration limits ar",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst:5942,test,test,5942,interpreter/llvm-project/llvm/docs/LibFuzzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst,3,['test'],['test']
Testability,"d by) main at /tmp/test.cpp:15:0. foo() at /tmp/test.cpp:6:3. $ llvm-symbolizer --output-style=LLVM --obj=inlined.elf 0x4004be 0x400486 -p --no-inlines; main at /tmp/test.cpp:11:18. foo() at /tmp/test.cpp:6:3. $ llvm-symbolizer --output-style=GNU --obj=inlined.elf 0x4004be 0x400486 -p --no-inlines; baz() at /tmp/test.cpp:11; foo() at /tmp/test.cpp:6. $ clang -g -fdebug-info-for-profiling test.cpp -o profiling.elf; $ llvm-symbolizer --output-style=GNU --obj=profiling.elf 0x401167 -p --no-inlines; main at /tmp/test.cpp:15 (discriminator 2). $ llvm-symbolizer --output-style=JSON --obj=inlined.elf 0x4004be 0x400486 -p; [; {; ""Address"": ""0x4004be"",; ""ModuleName"": ""inlined.elf"",; ""Symbol"": [; {; ""Column"": 18,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""baz()"",; ""Line"": 11,; ""StartAddress"": ""0x4004be"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 9; },; {; ""Column"": 0,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""main"",; ""Line"": 15,; ""StartAddress"": ""0x4004be"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 14; }; ]; },; {; ""Address"": ""0x400486"",; ""ModuleName"": ""inlined.elf"",; ""Symbol"": [; {; ""Column"": 3,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""foo()"",; ""Line"": 6,; ""StartAddress"": ""0x400486"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 5; }; ]; }; ]. .. option:: --pretty-print, -p. Print human readable output. If :option:`--inlining` is specified, the; enclosing scope is prefixed by (inlined by).; For JSON output, the option will cause JSON to be indented and split over; new lines. Otherwise, the JSON output will be printed in a compact form. .. code-block:: console. $ llvm-symbolizer --obj=inlined.elf 0x4004be --inlining --pretty-print; baz() at /tmp/test.cpp:11:18; (inlined by) main at /tmp/test.cpp:15:0. .. option:: --print-address, --addresses, -a. Print address before the source code location. Defaults to false. .. code-block:: console. $ llvm-symbolizer --obj=inlined.elf --print-",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:10338,test,test,10338,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"d clang_analyzer_explain(int);; void clang_analyzer_explain(void *);. // Useful in C code; void clang_analyzer_explain_int(int);. void foo(int param, void *ptr) {; clang_analyzer_explain(param); // expected-warning{{argument 'param'}}; clang_analyzer_explain_int(param); // expected-warning{{argument 'param'}}; if (!ptr); clang_analyzer_explain(ptr); // expected-warning{{memory address '0'}}; }. - ``void clang_analyzer_dump( /* a single argument of any type */);``. Similar to clang_analyzer_explain, but produces a raw dump of the value,; same as SVal::dump(). Example usage::. void clang_analyzer_dump(int);; void foo(int x) {; clang_analyzer_dump(x); // expected-warning{{reg_$0<x>}}; }. - ``size_t clang_analyzer_getExtent(void *);``. This function returns the value that represents the extent of a memory region; pointed to by the argument. This value is often difficult to obtain otherwise,; because no valid code that produces this value. However, it may be useful; for testing purposes, to see how well does the analyzer model region extents. Example usage::. void foo() {; int x, *y;; size_t xs = clang_analyzer_getExtent(&x);; clang_analyzer_explain(xs); // expected-warning{{'4'}}; size_t ys = clang_analyzer_getExtent(&y);; clang_analyzer_explain(ys); // expected-warning{{'8'}}; }. - ``void clang_analyzer_printState();``. Dumps the current ProgramState to the stderr. Quickly lookup the program state; at any execution point without ViewExplodedGraph or re-compiling the program.; This is not very useful for writing tests (apart from testing how ProgramState; gets printed), but useful for debugging tests. Also, this method doesn't; produce a warning, so it gets printed on the console before all other; ExprInspection warnings. Example usage::. void foo() {; int x = 1;; clang_analyzer_printState(); // Read the stderr!; }. - ``void clang_analyzer_hashDump(int);``. The analyzer can generate a hash to identify reports. To debug what information; is used to calculate this hash it ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst:7879,test,testing,7879,interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst,1,['test'],['testing']
Testability,"d cut range (set per variable). VarProp Yes NotEnforced NotEnforced, FMax, FMin, FSmart Categorisation of cuts. Configuration options for MVA method :. Configuration options reference for MVA method: PDEFoam. Option Array Default value Predefined values Description. V No False − Verbose output (short form of VerbosityLevel below - overrides the latter one). VerbosityLevel No Default Default, Debug, Verbose, Info, Warning, Error, Fatal Verbosity level. VarTransform No None − List of variable transformations performed before training, e.g., D_Background,P_Signal,G,N_AllClasses for: Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed). H No False − Print method-specific help message. CreateMVAPdfs No False − Create PDFs for classifier outputs (signal and background). IgnoreNegWeightsInTraining No False − Events with negative weights are ignored in the training (but are included for testing and performance evaluation). SigBgSeparate No False − Separate foams for signal and background. TailCut No 0.001 − Fraction of outlier events that are excluded from the foam in each dimension. VolFrac No 0.0666667 − Size of sampling box, used for density calculation during foam build-up (maximum value: 1.0 is equivalent to volume of entire foam). nActiveCells No 500 − Maximum number of active cells to be created by the foam. nSampl No 2000 − Number of generated MC events per cell. nBin No 5 − Number of bins in edge histograms. Compress No True − Compress foam output file. MultiTargetRegression No False − Do regression with multiple targets. Nmin No 100 − Number of events in cell required to split cell. MaxDepth No 0 − Maximum depth of cell tree (0=unlimited). FillFoamWithOrigWeights No False − Fill foam with original or boost weights. UseYesNoCell No False − Return -1 or 1 for bkg or signal like events. DTLogic No None None, GiniIndex, M",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html:26559,test,testing,26559,documentation/tmva/UsersGuide/optionRef.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html,1,['test'],['testing']
Testability,"d directory, all tests within it will be; reported as unsupported. Used by: *ShTest*. **parent** The parent configuration, this is the config object for the directory; containing the test suite, or None. **root** The root configuration. This is the top-most :program:`lit` configuration in; the project. **pipefail** Normally a test using a shell pipe fails if any of the commands; on the pipe fail. If this is not desired, setting this variable to false; makes the test fail only if the last command in the pipe fails. **available_features** A set of features that can be used in `XFAIL`,; `REQUIRES`, and `UNSUPPORTED` directives. TEST DISCOVERY; ~~~~~~~~~~~~~~. Once test suites are located, :program:`lit` recursively traverses the source; directory (following *test_source_root*) looking for tests. When :program:`lit`; enters a sub-directory, it first checks to see if a nested test suite is; defined in that directory. If so, it loads that test suite recursively,; otherwise it instantiates a local test config for the directory (see; :ref:`local-configuration-files`). Tests are identified by the test suite they are contained within, and the; relative path inside that suite. Note that the relative path may not refer to; an actual file on disk; some test formats (such as *GoogleTest*) define; ""virtual tests"" which have a path that contains both the path to the actual; test file and a subpath to identify the virtual test. .. _local-configuration-files:. LOCAL CONFIGURATION FILES; ~~~~~~~~~~~~~~~~~~~~~~~~~. When :program:`lit` loads a subdirectory in a test suite, it instantiates a; local test configuration by cloning the configuration for the parent directory; --- the root of this configuration chain will always be a test suite. Once the; test configuration is cloned :program:`lit` checks for a *lit.local.cfg* file; in the subdirectory. If present, this file will be loaded and can be used to; specialize the configuration for each individual directory. This facility can; be used",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:17701,test,test,17701,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,2,['test'],['test']
Testability,"d f(int);. void test() {; int *p = new int[0];; f(*p); // warn; delete[] p;; }. D8273. undefbehavior.DeadReferenced; (C++); Undefined behavior: the following usage of the pointer to the object whose; lifetime has ended can result in undefined behavior:; The object will be or was of a class type with a non-trivial destructor and; the pointer is used as the operand of a delete-expression; The object will be or was of a non-POD class type (C++11: any class type) and; the pointer is used to access a non-static data member or call a; non-static member function of the object; the pointer is implicitly converted to a pointer to a base class; type; the pointer is used as the operand of a static_cast (except; when the conversion is to void*, or to void* and; subsequently to char*, or unsigned char*); the pointer is used as the operand of a dynamic_cast; Source: C++03 3.8p5, p7; C++11 3.8p5, p7. #include <new>. class A {; public:; ~A();; };. class B : public A {};. void test() {; A *a = new A;; new(a) B;; delete a; // warn; }. #include <new>. class A {; public:; ~A();; };. class B {};. void test() {; A *a = new A;; new(a) B;; a->~A();; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. void f(A*);. void test() {; B *b = new B;; new(b) C;; f(b); // warn; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return static_cast<A*>(b); // warn; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return dynamic_cast<A*>(b); // warn; }. undefbehavior.ObjLocChanges; (C++); Undefined behavior: the program must ensure that an object occupies the same; storage location when the implicit or explicit destructor call takes place.; Source: C++11 3.8p8. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B b;; new (&b) A;; } // warn. #include <new>. class A {};. class B {; public:; ~B();; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:7380,test,test,7380,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"d fits........... OK; Test 5 : Test graphics & PostScript ............................OK; Test 6 : Test subdirectories in a Root file.................... OK; Test 7 : TNtuple, selections, TCutG, TEventList.......... OK; Test 8 : Trees split and compression modes..................... OK; Test 9 : Analyze Event.root file of stress 8................... OK; Test 10 : Create 10 files starting from Event.root.............. OK; Test 11 : Test chains of Trees using the 10 files............... OK; Test 12 : Compare histograms of test 9 and 11................... OK; Test 13 : Test merging files of a chain......................... OK; Test 14 : Check correct rebuilt of Event.root in test 13........ OK; Test 15 : Divert Tree branches to separate files................ OK; Test 16 : Cling test (3 nested loops) with LHCb trigger.......... OK; ******************************************************************; * IRIX64 fnpat1 6.5 01221553 IP27; ******************************************************************; stress : Total I/O = 75.3 Mbytes, I = 59.2, O = 16.1; stress : Compr I/O = 75.7 Mbytes, I = 60.0, O = 15.7; stress : Real Time = 307.61 seconds Cpu Time = 292.82 seconds; ******************************************************************; * ROOTMARKS = 53.7 * Root2.25/00 20000710/1022; ```. ### guitest - A Graphical User Interface; \index{GUI application}. The `guitest` example, created by compiling `guitest.cxx`, tests and; illustrates the use of the native GUI widgets such as cascading menus,; dialog boxes, sliders and tab panels. It is a very useful example to; study when designing a GUI. Some examples of the output of `guitest` are; shown next. To run it type `guitest` at the system prompt in the; `$ROOTSYS/test` directory. We have included an entire chapter on this; subject where we explore `guitest` in detail and use it to explain how; to build our own ROOT application with a GUI. See ""Writing a Graphical; User Interface"". ![Native GUI widgets](pictures/030001FC.png); ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/TutorialsandTests.md:16444,test,tests,16444,documentation/users-guide/TutorialsandTests.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/TutorialsandTests.md,2,['test'],"['test', 'tests']"
Testability,"d for internal LLVM research and will not work outside of the; LLVM research group. They may still be valuable, however, as a guide to; writing your own TEST Makefile for any optimization or analysis passes; that you develop with LLVM. Generating Test Output; ======================. There are a number of ways to run the tests and generate output. The; most simple one is simply running ``gmake`` with no arguments. This will; compile and run all programs in the tree using a number of different; methods and compare results. Any failures are reported in the output,; but are likely drowned in the other output. Passes are not reported; explicitly. Somewhat better is running ``gmake TEST=sometest test``, which runs the; specified test and usually adds per-program summaries to the output; (depending on which sometest you use). For example, the ``nightly`` test; explicitly outputs TEST-PASS or TEST-FAIL for every test after each; program. Though these lines are still drowned in the output, it's easy; to grep the output logs in the Output directories. Even better are the ``report`` and ``report.format`` targets (where; ``format`` is one of ``html``, ``csv``, ``text`` or ``graphs``). The; exact contents of the report are dependent on which ``TEST`` you are; running, but the text results are always shown at the end of the run and; the results are always stored in the ``report.<type>.format`` file (when; running with ``TEST=<type>``). The ``report`` also generate a file; called ``report.<type>.raw.out`` containing the output of the entire; test run. Writing Custom Tests for the test-suite; =======================================. Assuming you can run the test suite, (e.g.; ""``gmake TEST=nightly report``"" should work), it is really easy to run; optimizations or code generator components against every program in the; tree, collecting statistics or running custom checks for correctness. At; base, this is how the nightly tester works, it's just one example of a; general framework. L",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst:4438,log,logs,4438,interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,1,['log'],['logs']
Testability,"d forward substituting; the string directly into the printf, this eliminates reads from globalarray.; Since this pattern occurs frequently in crafty (due to the ""DisplayTime"" and; other similar functions) there are many stores to ""out"". Once all the printfs; stop using ""out"", all that is left is the memcpy's into it. This should allow; globalopt to remove the ""stored only"" global. //===---------------------------------------------------------------------===//. This code:. define inreg i32 @foo(i8* inreg %p) nounwind {; %tmp0 = load i8* %p; %tmp1 = ashr i8 %tmp0, 5; %tmp2 = sext i8 %tmp1 to i32; ret i32 %tmp2; }. could be dagcombine'd to a sign-extending load with a shift.; For example, on x86 this currently gets this:. 	movb	(%eax), %al; 	sarb	$5, %al; 	movsbl	%al, %eax. while it could get this:. 	movsbl	(%eax), %eax; 	sarl	$5, %eax. //===---------------------------------------------------------------------===//. GCC PR31029:. int test(int x) { return 1-x == x; } // --> return false; int test2(int x) { return 2-x == x; } // --> return x == 1 ?. Always foldable for odd constants, what is the rule for even?. //===---------------------------------------------------------------------===//. PR 3381: GEP to field of size 0 inside a struct could be turned into GEP; for next field in struct (which is at same address). For example: store of float into { {{}}, float } could be turned into a store to; the float directly. //===---------------------------------------------------------------------===//. The arg promotion pass should make use of nocapture to make its alias analysis; stuff much more precise. //===---------------------------------------------------------------------===//. The following functions should be optimized to use a select instead of a; branch (from gcc PR40072):. char char_int(int m) {if(m>7) return 0; return m;}; int int_char(char m) {if(m>7) return 0; return m;}. //===---------------------------------------------------------------------===//. int func(int",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt:42807,test,test,42807,interpreter/llvm-project/llvm/lib/Target/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt,1,['test'],['test']
Testability,"d from TH1/TH2 classes as histograms #269. ## Changes in 7.4.3; 1. Fix - correctly use GMT specifier in time format; 2. Fix - logical error in `decodeUrl`; 3. Fix - member-wise streaming of std::map #262. ## Changes in 7.4.2; 1. Fix - unzoom z on lego2 plots; 2. Fix - browsing TLists with nullptr inside; 3. Fix - check NaN values when performing TTree::Draw(); 4. Fix - support standard log function in TF1/TF2. ## Changes in 7.4.1; 1. Fix - context menu position on lego plots; 2. Fix - add missing math functions Chebyshev0 and normalized Gaus; 3. Fix - correctly render TPolyLine3D; 4. Fix - properly add interactive resize elements for paves and frame; 5. Fix - drag and drop handling on tabs layout. ## Changes in 7.4.0; 1. Upgrade d3.js v7.6.1 -> v7.8.4; 2. Upgrade three.js r146 -> r151; 3. Support `[cutg]` draw option for TH2; 4. Correctly handle `same0` draw option for TH2; 5. Fix several issues with axis reverse order, support on lego plots; 6. Support more kinds of log scales - ln and logN where N is any positive integer; 7. Adjust TAxis title positioning to native ROOT behavior; 8. Add interactivity (moving, context menu) for TLine, TBox, TText, TLatex, TDiamond, TGaxis, TASImage; 9. Use new gStyle attributes for candle and violin plots; 10. Implement autoplace for TLegend, also via context menu; 11. Change algorithm of building smooth (bezier) curves; 12. Let change physical node visibility in TGeo drawings; 13. Use TGaxis attributes from gStyle - fAxisMaxDigits, fStripDecimals and exponent offset; 14. Implement ""projxy"" draw option for TH2 - like projxy3 or projx1_y5; 15. Support custom function in TGaxis - when drawn in TWebCanvas; 16. Introduce settings.WithCredentials, set xhr.withCredentials = true when submitting HTTP requests; 17. Let superimpose TH3 and geo drawings; 18. Apply pad draw options like 'gridx' or 'logy' to all subpads; 19. Support new TScatter and TAnnotation classes; 20. Implement moving and resizing of subpads; 21. Implement zooming in the ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/changes.md:12309,log,log,12309,js/changes.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/changes.md,2,['log'],"['log', 'logN']"
Testability,"d from; ``configure``. Running Different Tests; =======================. In addition to the regular ""whole program"" tests, the ``test-suite``; module also provides a mechanism for compiling the programs in different; ways. If the variable TEST is defined on the ``gmake`` command line, the; test system will include a Makefile named; ``TEST.<value of TEST variable>.Makefile``. This Makefile can modify; build rules to yield different results. For example, the LLVM nightly tester uses ``TEST.nightly.Makefile`` to; create the nightly test reports. To run the nightly tests, run; ``gmake TEST=nightly``. There are several TEST Makefiles available in the tree. Some of them are; designed for internal LLVM research and will not work outside of the; LLVM research group. They may still be valuable, however, as a guide to; writing your own TEST Makefile for any optimization or analysis passes; that you develop with LLVM. Generating Test Output; ======================. There are a number of ways to run the tests and generate output. The; most simple one is simply running ``gmake`` with no arguments. This will; compile and run all programs in the tree using a number of different; methods and compare results. Any failures are reported in the output,; but are likely drowned in the other output. Passes are not reported; explicitly. Somewhat better is running ``gmake TEST=sometest test``, which runs the; specified test and usually adds per-program summaries to the output; (depending on which sometest you use). For example, the ``nightly`` test; explicitly outputs TEST-PASS or TEST-FAIL for every test after each; program. Though these lines are still drowned in the output, it's easy; to grep the output logs in the Output directories. Even better are the ``report`` and ``report.format`` targets (where; ``format`` is one of ``html``, ``csv``, ``text`` or ``graphs``). The; exact contents of the report are dependent on which ``TEST`` you are; running, but the text results are always shown at",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst:3734,test,tests,3734,interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,1,['test'],['tests']
Testability,"d has the format described for ``TypeTestAssumeVCalls``,; and each Arg is an integer argument number. TypeCheckedLoadConstVCalls; """""""""""""""""""""""""""""""""""""""""""""""""""". .. code-block:: text. typeCheckedLoadConstVCalls: (ConstVCall[, ConstVCall]*). Where each ConstVCall has the format described for; ``TypeTestAssumeConstVCalls``. .. _typeid_summary:. Type ID Summary Entry; ---------------------. Each type id summary entry corresponds to a type identifier resolution; which is generated during the LTO link portion of the compile when building; with `Control Flow Integrity <https://clang.llvm.org/docs/ControlFlowIntegrity.html>`_,; so these are only present in a combined summary index. Example:. .. code-block:: text. ^4 = typeid: (name: ""_ZTS1A"", summary: (typeTestRes: (kind: allOnes, sizeM1BitWidth: 7[, alignLog2: 0]?[, sizeM1: 0]?[, bitMask: 0]?[, inlineBits: 0]?)[, WpdResolutions]?)) ; guid = 7004155349499253778. The ``typeTestRes`` gives the type test resolution ``kind`` (which may; be ``unsat``, ``byteArray``, ``inline``, ``single``, or ``allOnes``), and; the ``size-1`` bit width. It is followed by optional flags, which default to 0,; and an optional WpdResolutions (whole program devirtualization resolution); field that looks like:. .. code-block:: text. wpdResolutions: ((offset: 0, WpdRes)[, (offset: 1, WpdRes)]*. where each entry is a mapping from the given byte offset to the whole-program; devirtualization resolution WpdRes, that has one of the following formats:. .. code-block:: text. wpdRes: (kind: branchFunnel); wpdRes: (kind: singleImpl, singleImplName: ""_ZN1A1nEi""); wpdRes: (kind: indir). Additionally, each wpdRes has an optional ``resByArg`` field, which; describes the resolutions for calls with all constant integer arguments:. .. code-block:: text. resByArg: (ResByArg[, ResByArg]*). where ResByArg is:. .. code-block:: text. args: (Arg[, Arg]*), byArg: (kind: UniformRetVal[, info: 0][, byte: 0][, bit: 0]). Where the ``kind`` can be ``Indir``, ``UniformRetVal``, ``Uniq",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:348960,test,test,348960,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"d in finding semantic differences in the debug; information produced by different toolchain versions or even completely; different toolchains altogether (For example a compiler producing DWARF; can be directly compared against a completely different compiler that; produces CodeView). Given the previous example we found the above debug information issue; (related to the previous invalid scope location for the **'typedef int; INTEGER'**) by comparing against another compiler. Using GCC to generate test-dwarf-gcc.o, we can apply a selection pattern; with the printing mode to obtain the following logical view output. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level; --select-regex --select-nocase --select=INTe; --report=list; --print=symbols,types; test-dwarf-clang.o test-dwarf-gcc.o. Logical View:; [000] {File} 'test-dwarf-clang.o'. [001] {CompileUnit} 'test.cpp'; [003] 4 {TypeAlias} 'INTEGER' -> 'int'; [004] 5 {Variable} 'CONSTANT' -> 'const INTEGER'. Logical View:; [000] {File} 'test-dwarf-gcc.o'. [001] {CompileUnit} 'test.cpp'; [004] 4 {TypeAlias} 'INTEGER' -> 'int'; [004] 5 {Variable} 'CONSTANT' -> 'const INTEGER'. The output shows that both objects contain the same elements. But the; **'typedef INTEGER'** is located at different scope level. The GCC; generated object, shows **'4'**, which is the correct value. Note that there is no requirement that GCC must produce identical or; similar DWARF to Clang to allow the comparison. We're only comparing; the semantics. The same case when comparing CodeView debug information; generated by MSVC and Clang. There are 2 comparison methods: logical view and logical elements. LOGICAL VIEW; """"""""""""""""""""""""; It compares the logical view as a whole unit; for a match, each compared; logical element must have the same parents and children. Using the :program:`llvm-debuginfo-analyzer` comparison functionality,; that issue can be seen in a more global context, that can include the; logical view. The output shows in view for",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:29141,test,test-dwarf-gcc,29141,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['test'],['test-dwarf-gcc']
Testability,"d in one or more [atomic commits](https://en.wikipedia.org/wiki/Atomic_commit#Revision_control).; PRs should be well-documented and well-tested in order to allow other community; members to use, maintain and modify. If the PR contains performance-critical; code consider writing a benchmark against the [rootbench repository](https://github.com/root-project/rootbench). ## Quality Assurance. Each contribution should contain developer documentation in the form of code; comments and sufficient amount of tests in the form of unit and/or integration; tests. Unit tests are relatively small and quick programs focused to check if; small pieces of code and API work as expected. Integration tests are checks; which ensure the synergy between different (unit tested) components. Put in; practice, unit tests verify (member) function behavior whereas integration tests; check classes and their cooperation. The boundary between both kinds of testing; is blurred. ROOT has support for both kinds of tests in the [roottest repository](https://github.com/root-project/roottest); and supports ""inline"" unit tests in each component's `test` folder. Unit testing; uses the [GTest and GMock](https://github.com/google/googletest) infrastructure; along with small ROOT-specific extensions located in; [TestSupport](../core/test_support/). The documentation of GTest; and GMock is rather extensive and we will describe some of the features of; ROOT::TestSupport. In order to write an inline unit test, add a new file in the; nearest to the tested component's `test` folder and call `ROOT_ADD_GTEST` in the; `CMakeLists.txt` file. In many cases using standard GTest facility is sufficient to write a good test.; However, we disallow error messages in gtests, or sometimes we want to test the; error conditions of an interface and its diagnostics. For example,. ```cpp. void MyROOTFunc(unsigned x); {; if (x == 0) {; Error(""MyROOTFunc"", ""x should be greater than 0!"");; return;; }; /* some work */; }. ```. In order ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/DEVELOPMENT.md:1294,test,tests,1294,README/DEVELOPMENT.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/DEVELOPMENT.md,1,['test'],['tests']
Testability,"d is available. Automatic reference counting; ----------------------------. Clang provides support for :doc:`automated reference counting; <AutomaticReferenceCounting>` in Objective-C, which eliminates the need; for manual ``retain``/``release``/``autorelease`` message sends. There are three; feature macros associated with automatic reference counting:; ``__has_feature(objc_arc)`` indicates the availability of automated reference; counting in general, while ``__has_feature(objc_arc_weak)`` indicates that; automated reference counting also includes support for ``__weak`` pointers to; Objective-C objects. ``__has_feature(objc_arc_fields)`` indicates that C structs; are allowed to have fields that are pointers to Objective-C objects managed by; automatic reference counting. .. _objc-weak:. Weak references; ---------------. Clang supports ARC-style weak and unsafe references in Objective-C even; outside of ARC mode. Weak references must be explicitly enabled with; the ``-fobjc-weak`` option; use ``__has_feature((objc_arc_weak))``; to test whether they are enabled. Unsafe references are enabled; unconditionally. ARC-style weak and unsafe references cannot be used; when Objective-C garbage collection is enabled. Except as noted below, the language rules for the ``__weak`` and; ``__unsafe_unretained`` qualifiers (and the ``weak`` and; ``unsafe_unretained`` property attributes) are just as laid out; in the :doc:`ARC specification <AutomaticReferenceCounting>`.; In particular, note that some classes do not support forming weak; references to their instances, and note that special care must be; taken when storing weak references in memory where initialization; and deinitialization are outside the responsibility of the compiler; (such as in ``malloc``-ed memory). Loading from a ``__weak`` variable always implicitly retains the; loaded value. In non-ARC modes, this retain is normally balanced; by an implicit autorelease. This autorelease can be suppressed; by performing the load",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LanguageExtensions.rst:71758,test,test,71758,interpreter/llvm-project/clang/docs/LanguageExtensions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LanguageExtensions.rst,1,['test'],['test']
Testability,"d is the explicit vector length of the; operation. Semantics:; """""""""""""""""""". The '``llvm.vp.fshr``' intrinsic performs fshr (:ref:`fshr <int_fshr>`) of the first, second, and third; vector operand on each enabled lane. The result on disabled lanes is a :ref:`poison value <poisonvalues>`. Examples:; """""""""""""""""". .. code-block:: llvm. %r = call <4 x i32> @llvm.vp.fshr.v4i32(<4 x i32> %a, <4 x i32> %b, <4 x i32> %c, <4 x i1> %mask, i32 %evl); ;; For all lanes below %evl, %r is lane-wise equivalent to %also.r. %t = call <4 x i32> @llvm.fshr.v4i32(<4 x i32> %a, <4 x i32> %b, <4 x i32> %c); %also.r = select <4 x i1> %mask, <4 x i32> %t, <4 x i32> poison. '``llvm.vp.is.fpclass.*``' Intrinsics; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """"""""""""""; This is an overloaded intrinsic. ::. declare <vscale x 2 x i1> @llvm.vp.is.fpclass.nxv2f32(<vscale x 2 x float> <op>, i32 <test>, <vscale x 2 x i1> <mask>, i32 <vector_length>); declare <2 x i1> @llvm.vp.is.fpclass.v2f16(<2 x half> <op>, i32 <test>, <2 x i1> <mask>, i32 <vector_length>). Overview:; """""""""""""""""". Predicated llvm.is.fpclass :ref:`llvm.is.fpclass <llvm.is.fpclass>`. Arguments:; """""""""""""""""""". The first operand is a floating-point vector, the result type is a vector of; boolean with the same number of elements as the first argument. The second; operand specifies, which tests to perform :ref:`llvm.is.fpclass <llvm.is.fpclass>`.; The third operand is the vector mask and has the same number of elements as the; result vector type. The fourth operand is the explicit vector length of the; operation. Semantics:; """""""""""""""""""". The '``llvm.vp.is.fpclass``' intrinsic performs llvm.is.fpclass (:ref:`llvm.is.fpclass <llvm.is.fpclass>`). Examples:; """""""""""""""""". .. code-block:: llvm. %r = call <2 x i1> @llvm.vp.is.fpclass.v2f16(<2 x half> %x, i32 3, <2 x i1> %m, i32 %evl); %t = call <vscale x 2 x i1> @llvm.vp.is.fpclass.nxv2f16(<vscale x 2 x half> %x, i32 3, <vscale x 2 x i1> %m, i32 %evl). .. _int_mload_mstore:. Masked Vector Load and Store I",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:841631,test,test,841631,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"d option to suppress correlation outputs; - Improvements in the support for multi-class classification.; - Improvements in the Gradient Boostig Trees; - Deprecate the TMVA DNN Reference Implementation. Support now only CPU and GPU implementations. . ## 2D Graphics Libraries; - The method TColor::InvertPalette inverts the current palette. The top color becomes; bottom and vice versa. This was [suggested by Karl Smith](https://root-forum.cern.ch/t/inverted-color-palettes/24826/2).; - New method `TColor::SetColorThreshold(Float_t t)` to specify the color; threshold used by GetColor to retrieve a color.; - Improvements in candle plots:; - LogZ for violins; - scaling of candles and violins with respect to each other; - static functions for WhiskerRange and BoxRange; - In some case it was not possible to zoom a 1D histogram using the mouse; on the X axis. This was described; [here](https://root-forum.cern.ch/t/axis-blocked-when-overlaying-two-histograms/25326); - When drawing an histogram with option ""BOX"" with log scale along the Z axis; the bins were not visible in some case. This was described; [here](https://root-forum.cern.ch/t/set-logscale-on-z-axis-in-2d-histo/25385).; - When a TGraph2D was plotted with the option ""PCOLZ"" with a log scale along the; Z axis, there was a mismatch between the markers' colors and the color palette; displayed. It is now fixed. It was reported; [here](https://sft.its.cern.ch/jira/browse/ROOT-8200).; - It is now possible to set the titles and the axis ranges of a TMultiGraph drawn as 3D lines.; - Implement the option ""Z"" (to draw the palette) for 3D histograms drawn with; the option ""BOX2"".; - With the option `HBAR` the histogram grid was painted over the stat box.; - The `TGraph`'s options ""F"" and ""L"" respectively draw a filled polygon and; a line plot. They can be combined when calling `TGraph::Draw`. Doing that; produced a filled polygon only. Now it produces a filled polygon and a line plot.; - `TH1::SetOption()` method didn't work whe",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v612/index.md:20107,log,log,20107,README/ReleaseNotes/v612/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v612/index.md,1,['log'],['log']
Testability,"d per test case (involves; setting a unique value to LLVM_PROFILE_FILE for each RUN). The coverage; data files will be emitted in the directory specified by `config.test_exec_root`. .. option:: --max-failures N. Stop execution after the given number ``N`` of failures.; An integer argument should be passed on the command line; prior to execution. .. option:: --max-tests=N. Run at most ``N`` tests and then terminate. .. option:: --max-time=N. Spend at most ``N`` seconds (approximately) running tests and then terminate.; Note that this is not an alias for :option:`--timeout`; the two are; different kinds of maximums. .. option:: --num-shards=M. Divide the set of selected tests into ``M`` equal-sized subsets or; ""shards"", and run only one of them. Must be used with the; ``--run-shard=N`` option, which selects the shard to run. The environment; variable ``LIT_NUM_SHARDS`` can also be used in place of this; option. These two options provide a coarse mechanism for partitioning large; testsuites, for parallel execution on separate machines (say in a large; testing farm). .. option:: --order={lexical,random,smart}. Define the order in which tests are run. The supported values are:. - lexical - tests will be run in lexical order according to the test file; path. This option is useful when predictable test order is desired. - random - tests will be run in random order. - smart - tests that failed previously will be run first, then the remaining; tests, all in descending execution time order. This is the default as it; optimizes concurrency. .. option:: --run-shard=N. Select which shard to run, assuming the ``--num-shards=M`` option was; provided. The two options must be used together, and the value of ``N``; must be in the range ``1..M``. The environment variable; ``LIT_RUN_SHARD`` can also be used in place of this option. .. option:: --timeout=N. Spend at most ``N`` seconds (approximately) running each individual test.; ``0`` means no time limit, and ``0`` is the default. Note",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:6976,test,testsuites,6976,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,2,['test'],"['testing', 'testsuites']"
Testability,"d use the; command:. .. code-block:: console. % make -j2. There are several special targets which are useful when working with the LLVM; source code:. ``make clean``. Removes all files generated by the build. This includes object files,; generated C/C++ files, libraries, and executables. ``make install``. Installs LLVM header files, libraries, tools, and documentation in a hierarchy; under ``$PREFIX``, specified with ``CMAKE_INSTALL_PREFIX``, which; defaults to ``/usr/local``. ``make docs-llvm-html``. If configured with ``-DLLVM_ENABLE_SPHINX=On``, this will generate a directory; at ``OBJ_ROOT/docs/html`` which contains the HTML formatted documentation. Cross-Compiling LLVM; --------------------. It is possible to cross-compile LLVM itself. That is, you can create LLVM; executables and libraries to be hosted on a platform different from the platform; where they are built (a Canadian Cross build). To generate build files for; cross-compiling CMake provides a variable ``CMAKE_TOOLCHAIN_FILE`` which can; define compiler flags and variables used during the CMake test operations. The result of such a build is executables that are not runnable on the build; host but can be executed on the target. As an example the following CMake; invocation can generate build files targeting iOS. This will work on macOS; with the latest Xcode:. .. code-block:: console. % cmake -G ""Ninja"" -DCMAKE_OSX_ARCHITECTURES=""armv7;armv7s;arm64""; -DCMAKE_TOOLCHAIN_FILE=<PATH_TO_LLVM>/cmake/platforms/iOS.cmake; -DCMAKE_BUILD_TYPE=Release -DLLVM_BUILD_RUNTIME=Off -DLLVM_INCLUDE_TESTS=Off; -DLLVM_INCLUDE_EXAMPLES=Off -DLLVM_ENABLE_BACKTRACES=Off [options]; <PATH_TO_LLVM>. Note: There are some additional flags that need to be passed when building for; iOS due to limitations in the iOS SDK. Check :doc:`HowToCrossCompileLLVM` and `Clang docs on how to cross-compile in general; <https://clang.llvm.org/docs/CrossCompilation.html>`_ for more information; about cross-compiling. The Location of LLVM Object Fil",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst:31070,test,test,31070,interpreter/llvm-project/llvm/docs/GettingStarted.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst,1,['test'],['test']
Testability,"d using ands instead of; tst. This will probably require whole function isel.; 3. GCC emits:; 	tst	r1, #256; we emit:; mov r1, #1; lsl r1, r1, #8; tst r2, r1. //===---------------------------------------------------------------------===//. When spilling in thumb mode and the sp offset is too large to fit in the ldr /; str offset field, we load the offset from a constpool entry and add it to sp:. ldr r2, LCPI; add r2, sp; ldr r2, [r2]. These instructions preserve the condition code which is important if the spill; is between a cmp and a bcc instruction. However, we can use the (potentially); cheaper sequence if we know it's ok to clobber the condition register. add r2, sp, #255 * 4; add r2, #132; ldr r2, [r2, #7 * 4]. This is especially bad when dynamic alloca is used. The all fixed size stack; objects are referenced off the frame pointer with negative offsets. See; oggenc for an example. //===---------------------------------------------------------------------===//. Poor codegen test/CodeGen/ARM/select.ll f7:. 	ldr r5, LCPI1_0; LPC0:; 	add r5, pc; 	ldr r6, LCPI1_1; 	ldr r2, LCPI1_2; 	mov r3, r6; 	mov lr, pc; 	bx r5. //===---------------------------------------------------------------------===//. Make register allocator / spiller smarter so we can re-materialize ""mov r, imm"",; etc. Almost all Thumb instructions clobber condition code. //===---------------------------------------------------------------------===//. Thumb load / store address mode offsets are scaled. The values kept in the; instruction operands are pre-scale values. This probably ought to be changed; to avoid extra work when we convert Thumb2 instructions to Thumb1 instructions. //===---------------------------------------------------------------------===//. We need to make (some of the) Thumb1 instructions predicable. That will allow; shrinking of predicated Thumb2 instructions. To allow this, we need to be able; to toggle the 's' bit since they do not set CPSR when they are inside IT blocks. //===--",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/README-Thumb.txt:4754,test,test,4754,interpreter/llvm-project/llvm/lib/Target/ARM/README-Thumb.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/README-Thumb.txt,1,['test'],['test']
Testability,"d values are:. * ``fast`` (fuse across statements disregarding pragmas, default for CUDA); * ``on`` (fuse in the same statement unless dictated by pragmas, default for languages other than CUDA/HIP); * ``off`` (never fuse); * ``fast-honor-pragmas`` (fuse across statements unless dictated by pragmas, default for HIP). .. option:: -f[no-]honor-infinities. Allow floating-point optimizations that assume arguments and results are; not +-Inf.; Defaults to ``-fhonor-infinities``. If both ``-fno-honor-infinities`` and ``-fno-honor-nans`` are used,; has the same effect as specifying ``-ffinite-math-only``. .. option:: -f[no-]honor-nans. Allow floating-point optimizations that assume arguments and results are; not NaNs.; Defaults to ``-fhonor-nans``. If both ``-fno-honor-infinities`` and ``-fno-honor-nans`` are used,; has the same effect as specifying ``-ffinite-math-only``. .. option:: -f[no-]approx-func. Allow certain math function calls (such as ``log``, ``sqrt``, ``pow``, etc); to be replaced with an approximately equivalent set of instructions; or alternative math function calls. For example, a ``pow(x, 0.25)``; may be replaced with ``sqrt(sqrt(x))``, despite being an inexact result; in cases where ``x`` is ``-0.0`` or ``-inf``.; Defaults to ``-fno-approx-func``. .. option:: -f[no-]signed-zeros. Allow optimizations that ignore the sign of floating point zeros.; Defaults to ``-fsigned-zeros``. .. option:: -f[no-]associative-math. Allow floating point operations to be reassociated.; Defaults to ``-fno-associative-math``. .. option:: -f[no-]reciprocal-math. Allow division operations to be transformed into multiplication by a; reciprocal. This can be significantly faster than an ordinary division; but can also have significantly less precision. Defaults to; ``-fno-reciprocal-math``. .. option:: -f[no-]unsafe-math-optimizations. Allow unsafe floating-point optimizations.; ``-funsafe-math-optimizations`` also implies:. * ``-fapprox-func``; * ``-fassociative-math``; * ``-frecip",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:58348,log,log,58348,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['log'],['log']
Testability,"d-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in non-optimised mode; # if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL ""aarch64"" AND CMAKE_BUILD_TYPE STREQUAL ""Debug"") ); # ROOT_ADD_TEST(TMVA-DNN-Minimization COMMAND testM",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:8013,test,testBackpropagation,8013,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testBackpropagation']
Testability,"d. The problem is shufps is a destructive opcode. Since it; appears as operand two in more than one shufps ops. It resulted in a number of; copies. Note icc also suffers from the same problem. Either the instruction; selector should select pshufd or The register allocator can made the two-address; to three-address transformation. It also exposes some other problems. See MOV32ri -3 and the spills. //===---------------------------------------------------------------------===//. Consider:. __m128 test(float a) {; return _mm_set_ps(0.0, 0.0, 0.0, a*a);; }. This compiles into:. movss 4(%esp), %xmm1; mulss %xmm1, %xmm1; xorps %xmm0, %xmm0; movss %xmm1, %xmm0; ret. Because mulss doesn't modify the top 3 elements, the top elements of ; xmm1 are already zero'd. We could compile this to:. movss 4(%esp), %xmm0; mulss %xmm0, %xmm0; ret. //===---------------------------------------------------------------------===//. Here's a sick and twisted idea. Consider code like this:. __m128 test(__m128 a) {; float b = *(float*)&A;; ...; return _mm_set_ps(0.0, 0.0, 0.0, b);; }. This might compile to this code:. movaps c(%esp), %xmm1; xorps %xmm0, %xmm0; movss %xmm1, %xmm0; ret. Now consider if the ... code caused xmm1 to get spilled. This might produce; this code:. movaps c(%esp), %xmm1; movaps %xmm1, c2(%esp); ... xorps %xmm0, %xmm0; movaps c2(%esp), %xmm1; movss %xmm1, %xmm0; ret. However, since the reload is only used by these instructions, we could ; ""fold"" it into the uses, producing something like this:. movaps c(%esp), %xmm1; movaps %xmm1, c2(%esp); ... movss c2(%esp), %xmm0; ret. ... saving two instructions. The basic idea is that a reload from a spill slot, can, if only one 4-byte ; chunk is used, bring in 3 zeros the one element instead of 4 elements.; This can be used to simplify a variety of shuffle operations, where the; elements are fixed zeros. //===---------------------------------------------------------------------===//. This code generates ugly code, probably due to costs",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt:7194,test,test,7194,interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt,1,['test'],['test']
Testability,"d. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception();; // warn (did you mean 'throw std::exception()'?); }. different.StaticArrayPtrCompare; (C); Pointer to static array is being compared to NULL. May the subscripting is; missing. void test() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C++); Odd implicit conversion to boolean.; Note: possibly merge with ; alpha.core.BoolAssignment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull = sll; // warn; return ull;; }. void f(unsigned int i);. void test(int si) {; f(si); // warn; }. unsigned int test(int i) {; return i;; }. different.NumericTruncation; (C); Numeric truncation might take place.; Source: ; CWE-197. unsigned long test(unsigned long long ull) {; unsigned long ul = ull; // warn; return ul;; }. void f(int i);. void test(long long sll) {; f(sll); // warn; }. int f();. short test(long long sll) {; short ss = f();; return ss;; }. differ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:24448,test,test,24448,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"d: ""all paths through this function will call itself"">,. The string that appears in DiagnosticSemaKinds.td is the one that is; printed by Clang. \*.td files define tables - in this case it's a list; of warnings and errors clang can emit and their messages. Let's update; the message in your favorite editor:. .. code:: console. $ vi ../clang/include/clang/Basic/DiagnosticSemaKinds.td. Find the message (it should be under; ``warn_infinite_recursive_function``). Change the message to ""in order to; understand recursion, you must first understand recursion"". Test again; ----------. To verify our change, we can build clang and manually check that it; works. .. code:: console. $ ninja clang; $ bin/clang -Wall ~/test.cc; /path/test.cc:1:124: warning: in order to understand recursion, you must; first understand recursion [-Winfinite-recursion]. We should also run the tests to make sure we didn't break something. .. code:: console. $ ninja check-clang. Notice that it is much faster to build this time, but the tests take; just as long to run. Ninja doesn't know which tests might be affected,; so it runs them all. .. code:: console. ********************; Testing Time: 408.84s; ********************; Failing Tests (1):; Clang :: SemaCXX/warn-infinite-recursion.cpp. Well, that makes sense… and the test output suggests it's looking for; the old string ""call itself"" and finding our new message instead.; Note that more tests may fail in a similar way as new tests are; added time to time. Let's fix it by updating the expectation in the test. .. code:: console. $ vi ../clang/test/SemaCXX/warn-infinite-recursion.cpp. Everywhere we see `// expected-warning{{call itself}}` (or something similar; from the original warning text), let's replace it with; `// expected-warning{{to understand recursion}}`. Now we could run **all** the tests again, but this is a slow way to; iterate on a change! Instead, let's find a way to re-run just the; specific test. There are two main types of tests in LLVM:.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst:6525,test,tests,6525,interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,1,['test'],['tests']
Testability,"d; by the :program:`llvm-cov report` command, but presented in JSON or lcov; format rather than text. .. option:: -ignore-filename-regex=<PATTERN>. Skip source code files with file paths that match the given regular expression. .. option:: -skip-expansions. Skip exporting macro expansion coverage data. .. option:: -skip-functions. Skip exporting per-function coverage data. .. option:: -num-threads=N, -j=N. Use N threads to export coverage data. When N=0, llvm-cov auto-detects an; appropriate number of threads to use. This is the default. .. option:: -compilation-dir=<dir>. Directory used as a base for relative coverage mapping paths. Only applicable; when binaries have been compiled with one of `-fcoverage-prefix-map`; `-fcoverage-compilation-dir`, or `-ffile-compilation-dir`. .. option:: -debuginfod. Attempt to look up coverage mapping from objects using debuginfod. This is; attempted by default for binary IDs present in the profile but not provided on; the command line, so long as debuginfod is compiled in and configured via; DEBUGINFOD_URLS. .. option:: -debug-file-directory=<dir>. Provides a directory to search for objects corresponding to binary IDs in the; profile. .. option:: -check-binary-ids. Fail if an object file cannot be found for a binary ID present in the profile,; neither on the command line nor via binary ID lookup. CONVERT-FOR-TESTING COMMAND; ---------------------------. .. warning::; This command is for the LLVM developers who are working on ``llvm-cov`` only. SYNOPSIS; ^^^^^^^^. :program:`llvm-cov convert-for-testing` *BIN* -o *OUT*. DESCRIPTION; ^^^^^^^^^^^. The :program:`llvm-cov convert-for-testing` command serves the purpose of; testing `llvm-cov` itself. It can extract all code coverage data from the; binary *BIN* to the file *OUT*, thereby reducing the size of test files. The; output file typically bears the :program:`.covmapping` extension. The :program:`.covmapping` files can be read back by ``llvm-cov`` just as; ordinary binary files.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-cov.rst:19380,test,testing,19380,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-cov.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-cov.rst,4,['test'],"['test', 'testing']"
Testability,"d; completes, pass -V to scan-build. Recommended Usage Guidelines; This section describes a few recommendations with running the analyzer.; ALWAYS analyze a project in its ""debug"" configuration; Most projects can be built in a ""debug"" mode that enables assertions.; Assertions are picked up by the static analyzer to prune infeasible paths, which; in some cases can greatly reduce the number of false positives (bogus error; reports) emitted by the tool.; Another option is to use --force-analyze-debug-code flag of; scan-build tool which would enable assertions automatically.; Use verbose output when debugging scan-build; scan-build takes a -v option to emit verbose output about; what it's doing; two -v options emit more information. Redirecting the; output of scan-build to a text file (make sure to redirect standard; error) is useful for filing bug reports against scan-build or the; analyzer, as we can see the exact options (and files) passed to the analyzer.; For more comprehensible logs, don't perform a parallel build.; Run './configure' through scan-build; If an analyzed project uses an autoconf generated configure script,; you will probably need to run configure script through; scan-build in order to analyze the project.; Example. $ scan-build ./configure; $ scan-build --keep-cc make. The reason configure also needs to be run through; scan-build is because scan-build scans your source files by; interposing on the compiler. This interposition is currently done by; scan-build temporarily setting the environment variable CC to; ccc-analyzer. The program ccc-analyzer acts like a fake; compiler, forwarding its command line arguments over to the compiler to perform; regular compilation and clang to perform static analysis.; Running configure typically generates makefiles that have hardwired; paths to the compiler, and by running configure through; scan-build that path is set to ccc-analyzer. Analyzing iPhone Projects; Conceptually Xcode projects for iPhone applications are",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html:6977,log,logs,6977,interpreter/llvm-project/clang/www/analyzer/scan-build.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/scan-build.html,1,['log'],['logs']
Testability,"d; how to find and run the tests inside the test suite. Once :program:`lit` has mapped the inputs into test suites it traverses the; list of inputs adding tests for individual files and recursively searching for; tests in directories. This behavior makes it easy to specify a subset of tests to run, while still; allowing the test suite configuration to control exactly how tests are; interpreted. In addition, :program:`lit` always identifies tests by the test; suite they are in, and their relative path inside the test suite. For; appropriately configured projects, this allows :program:`lit` to provide; convenient and flexible support for out-of-tree builds. .. _test-status-results:. TEST STATUS RESULTS; -------------------. Each test ultimately produces one of the following eight results:. **PASS**. The test succeeded. **FLAKYPASS**. The test succeeded after being re-run more than once. This only applies to; tests containing an ``ALLOW_RETRIES:`` annotation. **XFAIL**. The test failed, but that is expected. This is used for test formats which allow; specifying that a test does not currently work, but wish to leave it in the test; suite. **XPASS**. The test succeeded, but it was expected to fail. This is used for tests which; were specified as expected to fail, but are now succeeding (generally because; the feature they test was broken and has been fixed). **FAIL**. The test failed. **UNRESOLVED**. The test result could not be determined. For example, this occurs when the test; could not be run, the test itself is invalid, or the test was interrupted. **UNSUPPORTED**. The test is not supported in this environment. This is used by test formats; which can report unsupported tests. **TIMEOUT**. The test was run, but it timed out before it was able to complete. This is; considered a failure. Depending on the test format tests may produce additional information about; their status (generally only for failures). See the :ref:`output-options`; section for more information. .. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:12636,test,test,12636,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,dDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation).,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7178,test,testDataLoaderCpu,7178,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testDataLoaderCpu']
Testability,dDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7381,test,tests,7381,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,2,['test'],['tests']
Testability,dDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMV,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6793,test,testMethodDLAdadeltaOptimizationCpu,6793,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testMethodDLAdadeltaOptimizationCpu']
Testability,dart); endif(). #---Reference test. if (Test_Reference). # RNN - BackPropagation Reference; ROOT_EXECUTABLE(testRecurrentBackpropagation TestRecurrentBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-Backpropagation COMMAND testRecurrentBackpropagation); #; # RNN - Forward Reference; ROOT_EXECUTABLE(testRecurrentForwardPass TestRecurrentForwardPass.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-Forward COMMAND testRecurrentForwardPass). # RNN - Full Test Reference; ROOT_EXECUTABLE(testFullRNN TestFullRNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-FullRNN COMMAND testFullRNN). endif(). #--- CUDA tests. ---------------------------; if (tmva-gpu). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES}). add_executable(testRecurrentBackpropagationCuda TestRecurrentBackpropagationCuda.cxx); target_link_libraries(testRecurrentBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-BackpropagationCuda COMMAND testRecurrentBackpropagationCuda); #mark the native Cuda test failing since RNN are supported only with Cudnn; set_tests_properties(TMVA-DNN-RNN-BackpropagationCuda PROPERTIES WILL_FAIL true). if (tmva-cudnn). add_executable(testRecurrentForwardPassCudnn TestRecurrentForwardPassCudnn.cxx); target_link_libraries(testRecurrentForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-Forwaed-Cudnn COMMAND testRecurrentForwardPassCudnn). add_executable(testRecurrentBackpropagationCudnn TestRecurrentBackpropagationCudnn.cxx); target_link_libraries(testRecurrentBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-BackpropagationCudnn COMMAND testRecurrentBackpropagationCudnn). # Full Test GPU; add_executable(testFullRNNCudnn TestFullRNNCudnn.cxx); target_link_libraries(testFullRNNCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-Full-Cudnn COMMAND testFullRNNCudnn). endif(). endif(). #--- CPU tests. ----------------------------; if ((BLA,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/CMakeLists.txt:1373,test,testRecurrentBackpropagationCuda,1373,tmva/tmva/test/DNN/RNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/CMakeLists.txt,3,['test'],"['test', 'testRecurrentBackpropagationCuda']"
Testability,"darwin`` format only affects Mach-O input files. If an input of a different; file format is specified, :program:`llvm-size` falls back to ``berkeley``; format. When producing ``darwin`` format, the tool displays information about; segments and sections:. .. code-block:: console. $ llvm-size --format=darwin macho.obj macho2.obj; macho.obj:; Segment : 12; Section (__TEXT, __text): 4; Section (__DATA, __data): 8; total 12; total 12; macho2.obj:; Segment : 48; Section (__TEXT, __text): 16; Section (__DATA, __data): 32; total 48; total 48. .. option:: --help, -h. Display a summary of command line options. .. option:: -m. Equivalent to :option:`--format` with a value of ``darwin``. .. option:: -o. Equivalent to :option:`--radix` with a value of ``8``. .. option:: --radix=<value>. Display size information in the specified radix. Permitted values are ``8``,; ``10`` (the default) and ``16`` for octal, decimal and hexadecimal output; respectively. Example:. .. code-block:: console. $ llvm-size --radix=8 test.o; text data bss oct hex filename; 0152 04 04 162 72 test.o. $ llvm-size --radix=10 test.o; text data bss dec hex filename; 106 4 4 114 72 test.o. $ llvm-size --radix=16 test.o; text data bss dec hex filename; 0x6a 0x4 0x4 114 72 test.o. .. option:: --totals, -t. Applies only to ``berkeley`` output format. Display the totals for all listed; fields, in addition to the individual file listings. Example:. .. code-block:: console. $ llvm-size --totals test.elf test2.o; text data bss dec hex filename; 182 16 5 203 cb test.elf; 82 8 1 91 5b test2.o; 264 24 6 294 126 (TOTALS). .. option:: --version. Display the version of the :program:`llvm-size` executable. .. option:: -x. Equivalent to :option:`--radix` with a value of ``16``. .. option:: @<FILE>. Read command-line options from response file ``<FILE>``. EXIT STATUS; -----------. :program:`llvm-size` exits with a non-zero exit code if there is an error.; Otherwise, it exits with code 0. BUGS; ----. To report bugs, please visit ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-size.rst:3479,test,test,3479,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-size.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-size.rst,1,['test'],['test']
Testability,"date, and commit it. This can be done by running; the following:. ::. git pull --rebase https://github.com/llvm/llvm-project.git main; git show # Ensure the patch looks correct.; ninja check-$whatever # Rerun the appropriate tests if needed.; git push https://github.com/llvm/llvm-project.git HEAD:main. Abandoning a change; -------------------. If you decide you should not commit the patch, you should explicitly abandon; the review so that reviewers don't think it is still open. In the web UI,; scroll to the bottom of the page where normally you would enter an overall; comment. In the drop-down Action list, which defaults to ""Comment,"" you should; select ""Abandon Revision"" and then enter a comment explaining why. Click the; Submit button to finish closing the review. Status; ------. Please let us know whether you like it and what could be improved! We're still; working on setting up a bug tracker, but you can email klimek-at-google-dot-com; and chandlerc-at-gmail-dot-com and CC the llvm-dev mailing list with questions; until then. We also could use help implementing improvements. This sadly is; really painful and hard because the Phabricator codebase is in PHP and not as; testable as you might like. However, we've put exactly what we're deploying up; on an `llvm-reviews GitHub project`_ where folks can hack on it and post pull; requests. We're looking into what the right long-term hosting for this is, but; note that it is a derivative of an existing open source project, and so not; trivially a good fit for an official LLVM project. .. _LLVM's Phabricator: https://reviews.llvm.org; .. _`https://reviews.llvm.org`: https://reviews.llvm.org; .. _Code Repository Browser: https://reviews.llvm.org/diffusion/; .. _Arcanist Quick Start: https://secure.phabricator.com/book/phabricator/article/arcanist_quick_start/; .. _Arcanist User Guide: https://secure.phabricator.com/book/phabricator/article/arcanist/; .. _llvm-reviews GitHub project: https://github.com/r4nt/llvm-reviews/; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Phabricator.rst:16954,test,testable,16954,interpreter/llvm-project/llvm/docs/Phabricator.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Phabricator.rst,1,['test'],['testable']
Testability,"dated to reflect new features, bug; fixes, new known issues, and changes in the list of supported platforms.; The ""Getting Started Guide"" should be updated to reflect the new release; version number tag available from Subversion and changes in basic system; requirements. .. _tag:. Tag the LLVM Final Release; ^^^^^^^^^^^^^^^^^^^^^^^^^^. Tag the final release sources:. ::. $ git tag -sa llvmorg-X.Y.Z; $ git push https://github.com/llvm/llvm-project.git llvmorg-X.Y.Z. Update the LLVM Website; ^^^^^^^^^^^^^^^^^^^^^^^. The website must be updated before the release announcement is sent out. Here; is what to do:. #. Check out the ``www-releases`` module from GitHub. #. Create a new sub-directory ``X.Y.Z`` in the releases directory. #. Copy and commit the ``llvm/docs`` and ``LICENSE.txt`` files into this new; directory. #. Update the ``releases/download.html`` file with links to the release; binaries on GitHub. #. Update the ``releases/index.html`` with the new release and link to release; documentation. #. After you push the changes to the www-releases repo, someone with admin; access must login to prereleases-origin.llvm.org and manually pull the new; changes into /data/www-releases/. This is where the website is served from. #. Finally checkout the llvm-www repo and update the main page; (``index.html`` and sidebar) to point to the new release and release; announcement. Announce the Release; ^^^^^^^^^^^^^^^^^^^^. Create a new post in the `Announce Category <https://discourse.llvm.org/c/announce>`_; once all the release tasks are complete. For X.1.0 releases, make sure to include a; link to the release notes in the post. For X.1.1+ releases, generate a changelog; using this command and add it to the post. ::. $ git log --format=""- %aN: [%s (%h)](https://github.com/llvm/llvm-project/commit/%H)"" llvmorg-X.1.N-1..llvmorg-X.1.N. Once the release has been announced add a link to the announcement on the llvm; homepage (from the llvm-www repo) in the ""Release Emails"" section.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst:15158,log,login,15158,interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,2,['log'],"['log', 'login']"
Testability,"dation is important. However, if community input is not reached before the; release is out, all bugs reported will have to go on the next stable release. The official release managers are:. * Even releases: Tom Stellard (tstellar@redhat.com); * Odd releases: Tobias Hieta (tobias@hieta.se). The official release testers are volunteered from the community and have; consistently validated and released binaries for their targets/OSs. To contact; them, you should post on the `Discourse forums (Project; Infrastructure - Release Testers). <https://discourse.llvm.org/c/infrastructure/release-testers/66>`_. The official testers list is in the file ``RELEASE_TESTERS.TXT``, in the ``LLVM``; repository. Community Testing; -----------------. Once all testing has been completed and appropriate bugs filed, the release; candidate tarballs are put on the website and the LLVM community is notified. We ask that all LLVM developers test the release in any the following ways:. #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang``; binary. Build LLVM. Run ``make check`` and the full LLVM test suite (``make; TEST=nightly report``). #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the ``clang`` sources. Compile; everything. Run ``make check`` and the full LLVM test suite (``make; TEST=nightly report``). #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang``; binary. Build whole programs with it (ex. Chromium, Firefox, Apache) for; your platform. #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang``; binary. Build *your* programs with it and check for conformance and; performance regressions. #. Run the :doc:`release process <ReleaseProcess>`, if your platform is; *different* than that which is officially supported, and report back errors; only if they were not reported by the official release tester for that; architecture. We also ask that the OS distribution release managers test their packages with; the first candidate of every ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst:8234,test,test-X,8234,interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,1,['test'],['test-X']
Testability,"dd; [closing keywords](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue); to the PR description. Once a PR is created, a member of the ROOT team will review it as quickly as possible. If you are familiar with the; ROOT community, it may be beneficial to add a suggested reviewer to the PR in order to get quicker attention.; Please ping people :wave: should you not get timely feedback, for instance with `@root-project/core ping!`. ## Tests. As you contribute code, this code will likely fix an issue or add a feature.; Whatever it is: this requires you to add a new test, or to extend an existing test. Depending on the size and complexity; of this test, it exists either in the `test/` subdirectory of each part of ROOT (see for instance; [`tree/dataframe/test`](https://github.com/root-project/root/tree/master/tree/dataframe/test)), or in; [roottest](https://github.com/root-project/roottest.git). Tests in `test/` subdirectories are unit tests, mostly based on; [Google Test](https://github.com/google/googletest) and easily extended. Tests in; [roottest](https://github.com/root-project/roottest.git) are more involved (e.g., tests requiring custom dictionaries or; data files). When you create a branch in the main ROOT repository (i.e., this repository) and add a test to `roottest`,; make sure to do this under the same branch name (and open a PR for it). Our CI infrastructure automatically picks up the; changes defined in the `roottest` PR based on this branch name, and uses that for testing your PR here. ## Continuous Integration. To prevent bad surprises and make a better first impression, we; strongly encourage new developers to [run the tests](https://root.cern/for_developers/run_the_tests/); _before_ submitting a pull request. ROOT has automated CI tests :cop: that are used for pull requests:; - *Build and test*: a [Jenkins-based CI workflow](https://github.com/phsft-bot/build-configuration/blob/master/README.md); as well ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/CONTRIBUTING.md:5875,test,test,5875,CONTRIBUTING.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CONTRIBUTING.md,2,['test'],"['test', 'tests']"
Testability,"de the dot. For example for ""t."" the names where ""t._"" and ""t..fValue"" and are now ""t_"" and ""t.fValue"". . ## RDataFrame. ### New features. - Introduce `ROOT::RDF::RunGraphs`, which allows to compute the results of multiple `RDataFrame`s (or better, multiple independent computation graphs) concurrently while sharing the same thread pool. The computation may be more efficient than running the `RDataFrame`s sequentially if an analysis consists of several computation graphs that individually do not fully utilize the available resources. See e.g. [this tutorial](https://root.cern/doc/master/df104__HiggsToTwoPhotons_8py.html) for an example usage.; - `RDataFrame` now supports reading friend `TTree`s with a `TTreeIndex`, aka ""indexed friends"". More details at [ROOT-9559](https://sft.its.cern.ch/jira/browse/ROOT-9559).; - Experimental logging capabilities have been added to `RDataFrame`. To activate logging, define the following variable before creating the `RDataFrame` object: `auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel.kInfo);`.; - With [ROOT-10023](https://sft.its.cern.ch/jira/browse/ROOT-10023) fixed, `RDataFrame` can now read and write certain branches containing unsplit objects, i.e. `TBranchObjects`. More information is available at [ROOT-10022](https://sft.its.cern.ch/jira/browse/ROOT-10022).; - CSV files can now be opened and processed from remote HTTP(S) locations; - `RDataFrame` results produced by the same action in different computation graphs can now be merged thanks to the new interface provided by `ROOT::Detail::RDF::RMergeableValue`, introduced in [#5552](https://github.com/root-project/root/pull/5552). A feature originally requested with [ROOT-9869](https://sft.its.cern.ch/jira/browse/ROOT-9869), it helps streamline `RDataFrame` workflows in a distributed environment. Currently only a subset of `RDataFrame` actions have their corresponding mergeable class, but in the future it w",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v624/index.md:6487,log,logging,6487,README/ReleaseNotes/v624/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v624/index.md,1,['log'],['logging']
Testability,"de via `SavePrimitive` . ## Histogram Stacks. A **`THStack`** is a collection of **`TH1`** (or derived) objects. Use; **`THStack`**`::Add(` **`TH1`** `*h)` to add a histogram to the stack.; The **`THStack`** does not own the objects in the list. ![Stacked histograms](pictures/0300003D.png). By default, **`THStack`**`::Draw` draws the histograms stacked as; shown in the left pad in the picture above. If the option `""nostack""`; is used, the histograms are superimposed as if they were drawn one at; a time using the `""same""` draw option `.` The right pad in this; picture illustrates the **`THStack`** drawn with the `""nostack""`; option. ``` {.cpp}; hs->Draw(""nostack"");; ```. Next is a simple example, for a more complex one see; `$ROOTSYS/tutorials/hist/hstack.C.`. ``` {.cpp}; {; THStack hs(""hs"",""test stacked histograms"");; TH1F *h1 = new TH1F(""h1"",""test hstack"",100,-4,4);; h1->FillRandom(""gaus"",20000);; h1->SetFillColor(kRed);; hs.Add(h1);; TH1F *h2 = new TH1F(""h2"",""test hstack"",100,-4,4);; h2->FillRandom(""gaus"",15000);; h2->SetFillColor(kBlue);; hs.Add(h2);; TH1F *h3 = new TH1F(""h3"",""test hstack"",100,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs.Add(h3);; TCanvas c1(""c1"",""stacked hists"",10,10,700,900);; c1.Divide (1,2);; c1.cd(1);; hs.Draw();; c1.cd(2);; hs->Draw(""nostack"");; }; ```. ## TH2Poly. `TH2Poly` is a 2D Histogram class allowing to define polygonal bins of; arbitrary shape. Each bin in the `TH2Poly` histogram is a `TH2PolyBin` object.; `TH2PolyBin` is a very simple class containing the vertices and; contents of the polygonal bin as well as several related functions. Bins are defined using one of the `AddBin()` methods. The bin; definition should be done before filling. The following very simple macro shows how to build and fill a; `TH2Poly`:. ``` {.cpp}; {; TH2Poly *h2p = new TH2Poly();; Double_t x1[] = {0, 5, 5};; Double_t y1[] = {0, 0, 5};; Double_t x2[] = {0, -1, -1, 0};; Double_t y2[] = {0, 0, -1, -1};; Double_t x3[] = {4, 3, 0, 1, 2.4",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Histograms.md:59883,test,test,59883,documentation/users-guide/Histograms.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Histograms.md,1,['test'],['test']
Testability,"debugging information tests simply add the ``cross-project-tests``; project to your ``LLVM_ENABLE_PROJECTS`` define on the cmake; command-line. Regression test structure; =========================. The LLVM regression tests are driven by :program:`lit` and are located in the; ``llvm/test`` directory. This directory contains a large array of small tests that exercise; various features of LLVM and to ensure that regressions do not occur.; The directory is broken into several sub-directories, each focused on a; particular area of LLVM. Writing new regression tests; ----------------------------. The regression test structure is very simple, but does require some; information to be set. This information is gathered via ``cmake``; and is written to a file, ``test/lit.site.cfg.py`` in the build directory.; The ``llvm/test`` Makefile does this work for you. In order for the regression tests to work, each directory of tests must; have a ``lit.local.cfg`` file. :program:`lit` looks for this file to determine; how to run the tests. This file is just Python code and thus is very; flexible, but we've standardized it for the LLVM regression tests. If; you're adding a directory of tests, just copy ``lit.local.cfg`` from; another directory to get running. The standard ``lit.local.cfg`` simply; specifies which files to look in for tests. Any directory that contains; only directories does not need the ``lit.local.cfg`` file. Read the :doc:`Lit; documentation <CommandGuide/lit>` for more information. Each test file must contain lines starting with ""RUN:"" that tell :program:`lit`; how to run it. If there are no RUN lines, :program:`lit` will issue an error; while running a test. RUN lines are specified in the comments of the test program using the; keyword ``RUN`` followed by a colon, and lastly the command (pipeline); to execute. Together, these lines form the ""script"" that :program:`lit`; executes to run the test case. The syntax of the RUN lines is similar to a; shell's syntax for pi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:7790,test,tests,7790,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['tests']
Testability,"declaration is not a single token,; e.g. for destructors. You could use NamedDecl::getNameAsString for those cases.; Note that this method is much slower and should be used sparringly, e.g. only when generating reports; but not during analysis.; Is -analyzer-checker=core included in all test RUN: lines? It was never supported; to run the analyzer with the core checks disabled. It might cause unexpected behavior and; crashes. You should do all your testing with the core checks enabled. Patterns that you should most likely avoid even if they're not technically wrong:. BugReporterVisitor should most likely not match the AST of the current program point; to decide when to emit a note. It is much easier to determine that by observing changes in; the program state.; In State->getSVal(Region), if Region is not known to be a TypedValueRegion; and the optional type argument is not specified, the checker may accidentally try to dereference a; void pointer.; Checker logic should not depend on whether a certain value is a Loc or NonLoc.; It should be immediately obvious whether the SVal is a Loc or a; NonLoc depending on the AST that is being checked. Checking whether a value; is Loc or Unknown/Undefined or whether the value is; NonLoc or Unknown/Undefined is totally fine.; New symbols should not be constructed in the checker via direct calls to SymbolManager,; unless they are of SymbolMetadata class tagged by the checker,; or they represent newly created values such as the return value in evalCall.; For modeling arithmetic/bitwise/comparison operations, SValBuilder should be used.; Custom ProgramPointTags should not be created within the checker. There is usually; no good reason for a checker to chain multiple nodes together, because checkers aren't worklists. Checkers are encouraged to actively participate in the analysis by sharing; their knowledge about the program state with the rest of the analyzer,; but they should not be disrupting the analysis unnecessarily:. If a chec",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html:26457,log,logic,26457,interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,1,['log'],['logic']
Testability,"ded below:. .. code-block:: c++. // Patch the sleds, if we haven't yet.; auto patch_status = __xray_patch();. // Maybe handle the patch_status errors. // When we want to flush the log, we need to finalize it first, to give; // threads a chance to return buffers to the queue.; auto finalize_status = __xray_log_finalize();; if (finalize_status != XRAY_LOG_FINALIZED) {; // maybe retry, or bail out.; }. // At this point, we are sure that the log is finalized, so we may try; // flushing the log.; auto flush_status = __xray_log_flushLog();; if (flush_status != XRAY_LOG_FLUSHED) {; // maybe retry, or bail out.; }. The default settings for the FDR mode implementation will create logs named; similarly to the basic log implementation, but will have a different log; format. All the trace analysis tools (and the trace reading library) will; support all versions of the FDR mode format as we add more functionality and; record types in the future. **NOTE:** We do not promise perpetual support for when we update the log; versions we support going forward. Deprecation of the formats will be; announced and discussed on the developers mailing list. Trace Analysis Tools; --------------------. We currently have the beginnings of a trace analysis tool in LLVM, which can be; found in the ``tools/llvm-xray`` directory. The ``llvm-xray`` tool currently; supports the following subcommands:. - ``extract``: Extract the instrumentation map from a binary, and return it as; YAML.; - ``account``: Performs basic function call accounting statistics with various; options for sorting, and output formats (supports CSV, YAML, and; console-friendly TEXT).; - ``convert``: Converts an XRay log file from one format to another. We can; convert from binary XRay traces (both basic and FDR mode) to YAML,; `flame-graph <https://github.com/brendangregg/FlameGraph>`_ friendly text; formats, as well as `Chrome Trace Viewer (catapult); <https://github.com/catapult-project/catapult>` formats.; - ``graph``: Generates a",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRay.rst:10972,log,log,10972,interpreter/llvm-project/llvm/docs/XRay.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRay.rst,1,['log'],['log']
Testability,"defending against. ## Implementation Details. There are a number of complex details impacting the implementation of this; technique, both on a particular architecture and within a particular compiler.; We discuss proposed implementation techniques for the x86 architecture and the; LLVM compiler. These are primarily to serve as an example, as other; implementation techniques are very possible. ### x86 Implementation Details. On the x86 platform we break down the implementation into three core; components: accumulating the predicate state through the control flow graph,; checking the loads, and checking control transfers between procedures. #### Accumulating Predicate State. Consider baseline x86 instructions like the following, which test three; conditions and if all pass, loads data from memory and potentially leaks it; through some side channel:; ```; # %bb.0: # %entry; pushq %rax; testl %edi, %edi; jne .LBB0_4; # %bb.1: # %then1; testl %esi, %esi; jne .LBB0_4; # %bb.2: # %then2; testl %edx, %edx; je .LBB0_3; .LBB0_4: # %exit; popq %rax; retq; .LBB0_3: # %danger; movl (%rcx), %edi; callq leak; popq %rax; retq; ```. When we go to speculatively execute the load, we want to know whether any of; the dynamically executed predicates have been misspeculated. To track that,; along each conditional edge, we need to track the data which would allow that; edge to be taken. On x86, this data is stored in the flags register used by the; conditional jump instruction. Along both edges after this fork in control flow,; the flags register remains alive and contains data that we can use to build up; our accumulated predicate state. We accumulate it using the x86 conditional; move instruction which also reads the flag registers where the state resides.; These conditional move instructions are known to not be predicted on any x86; processors, making them immune to misprediction that could reintroduce the; vulnerability. When we insert the conditional moves, the code ends up looking; li",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md:15419,test,testl,15419,interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,1,['test'],['testl']
Testability,"dencies**.0; - Support for CGI, SSI, HTTP digest (MD5) authorization, WebSocket,; WebDAV.; - HTTPS (SSL/TLS) support using [OpenSSL](https://www.openssl.org/).; - Optional support for authentication using client side X.509 certificates.; - Resumed download, URL rewrite, file blacklist, IP-based ACL.; - May run as Windows service.; - Download speed limit based on client subnet or URI pattern.; - Simple and clean embedding API.; - The source is in single file to make things easy.; - Embedding examples included.; - HTTP client capable of sending arbitrary HTTP/HTTPS requests.; - Websocket client functionality available (WS/WSS). ### Optionally included software. [![Lua](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/lua-logo.jpg ""Lua Logo"")](http://lua.org). [![Sqlite3](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/sqlite3-logo.jpg ""Sqlite3 Logo"")](http://sqlite.org). [![LuaFileSystem](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/luafilesystem-logo.jpg ""LuaFileSystem Logo"")](http://keplerproject.github.io/luafilesystem/). [![LuaSQLite3](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/luasqlite-logo.jpg ""LuaSQLite3 Logo"")](http://lua.sqlite.org/index.cgi/index). [![LuaXML](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/luaxml-logo.jpg ""LuaXML Logo"")](https://github.com/n1tehawk/LuaXML). [![Duktape](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/duktape-logo.png ""Duktape Logo"")](http://duktape.org). ### Optional depencencies. [![zlib](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/zlib3d-b1.png ""zlib Logo"")](https://zlib.net). [![OpenSSL](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/OpenSSL_logo.png ""OpenSSL Logo"")](https://www.openssl.org/). [![Mbed TLS](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/mbedTLS_logo.png ""mbedTLS Logo"")](https://github.com/ARMmbed/mbedtls). S",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/README.md:7109,log,logo,7109,net/http/civetweb/README.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/README.md,1,['log'],['logo']
Testability,"der to; complete ~10-15 builds an hour. Resource Appropriately; At 10-15 builds per hour, we need to complete a new build on average every; 4 to 6 minutes. For anything except the fastest of hardware/build configs,; this is going to be well beyond the ability of a single machine. In buildbot; terms, we likely going to need multiple workers to build requests in parallel; under a single builder configuration. For some rough back of the envelope; numbers, if your build config takes e.g. 30 minutes, you will need something; on the order of 5-8 workers. If your build config takes ~2 hours, you'll; need something on the order of 20-30 workers. The rest of this section; focuses on how to reduce cycle times. Restrict what you build and test; Think hard about why you're setting up a bot, and restrict your build; configuration as much as you can. Basic functionality is probably; already covered by other bots, and you don't need to duplicate that; testing. You only need to be building and testing the *unique* parts; of the configuration. (e.g. For a multi-stage clang builder, you probably; don't need to be enabling every target or building all the various utilities.). It can sometimes be worthwhile splitting a single builder into two or more,; if you have multiple distinct purposes for the same builder. As an example,; if you want to both a) confirm that all of LLVM builds with your host; compiler, and b) want to do a multi-stage clang build on your target, you; may be better off with two separate bots. Splitting increases resource; consumption, but makes it easy for each bot to keep up with commit flow.; Additionally, splitting bots may assist in triage by narrowing attention to; relevant parts of the failing configuration. In general, we recommend Release build types with Assertions enabled. This; generally provides a good balance between build times and bug detection for; most buildbots. There may be room for including some debug info (e.g. with; `-gmlt`), but in general the",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToAddABuilder.rst:9638,test,testing,9638,interpreter/llvm-project/llvm/docs/HowToAddABuilder.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToAddABuilder.rst,1,['test'],['testing']
Testability,"der.h""' .; Import the dataset stager daemon 'afdsmgrd' into ROOT; this is used; to manage data staging based on the dataset information (see; http://code.google.com/p/afdsmgrd/ for more info). The daemon is; located under $ROOTSYS/proof/afdsmgrd .; New PROOF bench suite, a framework to run CPU and IO benchmarks with; default selectors/data or with user-provided ones. The code is located; under proof/proofbench.; Add the possibility to access the files on the workers via the same; port used by PROOF. This is useful for cases when it is not possible to; start a file server daemon on a different port (because, for eample, of; a firewall or just inconvenience) and workers do not share a file; system. Internally this works by forking a 'rootd' after identifying a; file request and trasferring the connection to it. The client side is a; TNetFile and it is triggered by the protocol ""rootd://"" (the just; implemented etc/plugins/TFile/P120_TNetFile.C includes this; protocol).; Add support for log file truncation. Truncation is disabled by; default. Enabling is controlled by the rootrc variable.           ; ProofServ.LogFileMaxSize  ; {<bytes>|<kilobytes>K|<megabytes>M|<gigabytes>G}.  indicating the max number of bytes. The number can be followed by; a {K,M,G} to indicate KBytes, MBytes or GBytes, respectively.; Add new derivation of TList (TProofOutputList) to be used on the; PROOF client to filter out PROOF internal objects when displaying or; printing the list. By default objects was names start with 'PROOF_' are; not shown. The presence of a non empty missing file list is; notified.; In the PROOF monitoring to: send additional information about memory; usage during the query, the name and size (# of files) of the dataset; processed (if any); add possibility to send the information to multiple; monitoring collectors.; Add support for block activation/deactivation of workers.; Add possibility to start the proofserv with 'system()' instead of; 'fork()' as done in PROOF-Lite.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v530/index.html:1653,log,log,1653,proof/doc/v530/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v530/index.html,1,['log'],['log']
Testability,"ders (e.g., macOS). Generating a PCH File; ^^^^^^^^^^^^^^^^^^^^^. To generate a PCH file using Clang, one invokes Clang with the; `-x <language>-header` option. This mirrors the interface in GCC; for generating PCH files:. .. code-block:: console. $ gcc -x c-header test.h -o test.h.gch; $ clang -x c-header test.h -o test.h.pch. Using a PCH File; ^^^^^^^^^^^^^^^^. A PCH file can then be used as a prefix header when a ``-include-pch``; option is passed to ``clang``:. .. code-block:: console. $ clang -include-pch test.h.pch test.c -o test. The ``clang`` driver will check if the PCH file ``test.h.pch`` is; available; if so, the contents of ``test.h`` (and the files it includes); will be processed from the PCH file. Otherwise, Clang will report an error. .. note::. Clang does *not* automatically use PCH files for headers that are directly; included within a source file or indirectly via :option:`-include`.; For example:. .. code-block:: console. $ clang -x c-header test.h -o test.h.pch; $ cat test.c; #include ""test.h""; $ clang test.c -o test. In this example, ``clang`` will not automatically use the PCH file for; ``test.h`` since ``test.h`` was included directly in the source file and not; specified on the command line using ``-include-pch``. Relocatable PCH Files; ^^^^^^^^^^^^^^^^^^^^^. It is sometimes necessary to build a precompiled header from headers; that are not yet in their final, installed locations. For example, one; might build a precompiled header within the build tree that is then; meant to be installed alongside the headers. Clang permits the creation; of ""relocatable"" precompiled headers, which are built with a given path; (into the build directory) and can later be used from an installed; location. To build a relocatable precompiled header, place your headers into a; subdirectory whose structure mimics the installed location. For example,; if you want to build a precompiled header for the header ``mylib.h``; that will be installed into ``/usr/include``, c",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:47572,test,test,47572,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"des some real binary files to show how to use; :program:`llvm-debuginfo-analyzer` to print a logical view and to; diagnose possible debug information issues. TEST CASE 1 - GENERAL OPTIONS; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; The below example is used to show different output generated by; :program:`llvm-debuginfo-analyzer`. We compiled the example for an X86; ELF target with Clang (-O0 -g):. .. code-block:: c++. 1 using INTPTR = const int *;; 2 int foo(INTPTR ParamPtr, unsigned ParamUnsigned, bool ParamBool) {; 3 if (ParamBool) {; 4 typedef int INTEGER;; 5 const INTEGER CONSTANT = 7;; 6 return CONSTANT;; 7 }; 8 return ParamUnsigned;; 9 }. PRINTING MODE; ^^^^^^^^^^^^^; In this mode :program:`llvm-debuginfo-analyzer` prints the *logical view*; or portions of it, based on criteria patterns (including regular; expressions) to select the kind of *logical elements* to be included in; the output. BASIC DETAILS; """"""""""""""""""""""""""; The following command prints basic details for all the logical elements; sorted by the debug information internal offset; it includes its lexical; level and debug info format. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level,format; --output-sort=offset; --print=scopes,symbols,types,lines,instructions; test-dwarf-clang.o. or. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level,format; --output-sort=offset; --print=elements; test-dwarf-clang.o. Each row represents an element that is present within the debug; information. The first column represents the scope level, followed by; the associated line number (if any), and finally the description of; the element. .. code-block:: none. Logical View:; [000] {File} 'test-dwarf-clang.o' -> elf64-x86-64. [001] {CompileUnit} 'test.cpp'; [002] 2 {Function} extern not_inlined 'foo' -> 'int'; [003] 2 {Parameter} 'ParamPtr' -> 'INTPTR'; [003] 2 {Parameter} 'ParamUnsigned' -> 'unsigned int'; [003] 2 {Parameter} 'ParamBool' -> 'bool'; [003] {Block}; [004] 5 {Variable} 'CONSTANT' -> 'const INTEGER'",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:24652,log,logical,24652,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['log'],['logical']
Testability,"detailed information about this language refer to the C++ for OpenCL; Programming Language Documentation available; in `the latest build; <https://www.khronos.org/opencl/assets/CXX_for_OpenCL.html>`_; or in `the official release; <https://github.com/KhronosGroup/OpenCL-Docs/releases/tag/cxxforopencl-docrev2021.12>`_. To enable the C++ for OpenCL mode, pass one of following command line options when; compiling ``.clcpp`` file:. - C++ for OpenCL 1.0: ``-cl-std=clc++``, ``-cl-std=CLC++``, ``-cl-std=clc++1.0``,; ``-cl-std=CLC++1.0``, ``-std=clc++``, ``-std=CLC++``, ``-std=clc++1.0`` or; ``-std=CLC++1.0``. - C++ for OpenCL 2021: ``-cl-std=clc++2021``, ``-cl-std=CLC++2021``,; ``-std=clc++2021``, ``-std=CLC++2021``. Example of use:; .. code-block:: c++. template<class T> T add( T x, T y ); {; return x + y;; }. __kernel void test( __global float* a, __global float* b); {; auto index = get_global_id(0);; a[index] = add(b[index], b[index+1]);; }. .. code-block:: console. clang -cl-std=clc++1.0 test.clcpp; clang -cl-std=clc++ -c --target=spirv64 test.cl. By default, files with ``.clcpp`` extension are compiled with the C++ for; OpenCL 1.0 mode. .. code-block:: console. clang test.clcpp. For backward compatibility files with ``.cl`` extensions can also be compiled; in C++ for OpenCL mode but the desirable language mode must be activated with; a flag. .. code-block:: console. clang -cl-std=clc++ test.cl. Support of C++ for OpenCL 2021 is currently in experimental phase, refer to; :doc:`OpenCLSupport` for more details. C++ for OpenCL kernel sources can also be compiled online in drivers supporting; `cl_ext_cxx_for_opencl; <https://www.khronos.org/registry/OpenCL/extensions/ext/cl_ext_cxx_for_opencl.html>`_; extension. Constructing and destroying global objects; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Global objects with non-trivial constructors require the constructors to be run; before the first kernel using the global objects is executed. Similarly global; objects with non-t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:153643,test,test,153643,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"detect_stack_use_after_return=0``).; * ``always``: Enables detection of UAR errors in all cases. (reduces code; size, but not as much as ``never``). Memory leak detection; ---------------------. For more information on leak detector in AddressSanitizer, see; :doc:`LeakSanitizer`. The leak detection is turned on by default on Linux,; and can be enabled using ``ASAN_OPTIONS=detect_leaks=1`` on macOS;; however, it is not yet supported on other platforms. Issue Suppression; =================. AddressSanitizer is not expected to produce false positives. If you see one,; look again; most likely it is a true positive!. Suppressing Reports in External Libraries; -----------------------------------------; Runtime interposition allows AddressSanitizer to find bugs in code that is; not being recompiled. If you run into an issue in external libraries, we; recommend immediately reporting it to the library maintainer so that it; gets addressed. However, you can use the following suppression mechanism; to unblock yourself and continue on with the testing. This suppression; mechanism should only be used for suppressing issues in external code; it; does not work on code recompiled with AddressSanitizer. To suppress errors; in external libraries, set the ``ASAN_OPTIONS`` environment variable to point; to a suppression file. You can either specify the full path to the file or the; path of the file relative to the location of your executable. .. code-block:: bash. ASAN_OPTIONS=suppressions=MyASan.supp. Use the following format to specify the names of the functions or libraries; you want to suppress. You can see these in the error report. Remember that; the narrower the scope of the suppression, the more bugs you will be able to; catch. .. code-block:: bash. interceptor_via_fun:NameOfCFunctionToSuppress; interceptor_via_fun:-[ClassName objCMethodToSuppress:]; interceptor_via_lib:NameOfTheLibraryToSuppress. Conditional Compilation with ``__has_feature(address_sanitizer)``; --------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/AddressSanitizer.rst:7555,test,testing,7555,interpreter/llvm-project/clang/docs/AddressSanitizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/AddressSanitizer.rst,1,['test'],['testing']
Testability,"developing against the existing LLVM git; mirrors. You have one or more git branches that you want to migrate; to the ""final monorepo"". The simplest way to migrate such branches is with the; ``migrate-downstream-fork.py`` tool at; https://github.com/jyknight/llvm-git-migration. Basic migration; ---------------. Basic instructions for ``migrate-downstream-fork.py`` are in the; Python script and are expanded on below to a more general recipe::. # Make a repository which will become your final local mirror of the; # monorepo.; mkdir my-monorepo; git -C my-monorepo init. # Add a remote to the monorepo.; git -C my-monorepo remote add upstream/monorepo https://github.com/llvm/llvm-project.git. # Add remotes for each git mirror you use, from upstream as well as; # your local mirror. All projects are listed here but you need only; # import those for which you have local branches.; my_projects=( clang; clang-tools-extra; compiler-rt; debuginfo-tests; libcxx; libcxxabi; libunwind; lld; lldb; llvm; openmp; polly ); for p in ${my_projects[@]}; do; git -C my-monorepo remote add upstream/split/${p} https://github.com/llvm-mirror/${p}.git; git -C my-monorepo remote add local/split/${p} https://my.local.mirror.org/${p}.git; done. # Pull in all the commits.; git -C my-monorepo fetch --all. # Run migrate-downstream-fork to rewrite local branches on top of; # the upstream monorepo.; (; cd my-monorepo; migrate-downstream-fork.py \; refs/remotes/local \; refs/tags \; --new-repo-prefix=refs/remotes/upstream/monorepo \; --old-repo-prefix=refs/remotes/upstream/split \; --source-kind=split \; --revmap-out=monorepo-map.txt; ). # Octopus-merge the resulting local split histories to unify them. # Assumes local work on local split mirrors is on main (and; # upstream is presumably represented by some other branch like; # upstream/main).; my_local_branch=""main"". git -C my-monorepo branch --no-track local/octopus/main \; $(git -C my-monorepo merge-base refs/remotes/upstream/monorepo/main \; refs/re",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/GitHubMove.rst:21075,test,tests,21075,interpreter/llvm-project/llvm/docs/Proposals/GitHubMove.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/GitHubMove.rst,1,['test'],['tests']
Testability,"df>`_. * `Signal Processing Engine (SPE) Programming Environments Manual: A Supplement to the EREF <https://www.nxp.com/docs/en/reference-manual/SPEPEM.pdf>`_. * `Variable-Length Encoding (VLE) Programming Environments Manual: A Supplement to the EREF <https://www.nxp.com/docs/en/reference-manual/VLEPEM.pdf>`_. Other documents, collections, notes; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. * `PowerPC Compiler Writer's Guide <http://www.ibm.com/chips/techlib/techlib.nsf/techdocs/852569B20050FF7785256996007558C6>`_; * `Intro to PowerPC Architecture <http://www.ibm.com/developerworks/linux/library/l-powarch/>`_; * `Various IBM specifications and white papers <https://www.power.org/documentation/?document_company=105&document_category=all&publish_year=all&grid_order=DESC&grid_sort=title>`_; * `PowerPC ABI documents <http://penguinppc.org/dev/#library>`_; * `PowerPC64 alignment of long doubles (from GCC) <http://gcc.gnu.org/ml/gcc-patches/2003-09/msg00997.html>`_; * `Long branch stubs for powerpc64-linux (from binutils) <http://sources.redhat.com/ml/binutils/2002-04/msg00573.html>`_. AMDGPU; ------. Refer to :doc:`AMDGPUUsage` for additional documentation. RISC-V; ------; * `RISC-V User-Level ISA Specification <https://riscv.org/specifications/>`_. C-SKY; ------; * `C-SKY Architecture User Guide <https://github.com/c-sky/csky-doc/blob/master/CSKY%20Architecture%20user_guide.pdf>`_; * `C-SKY V2 ABI <https://github.com/c-sky/csky-doc/blob/master/C-SKY_V2_CPU_Applications_Binary_Interface_Standards_Manual.pdf>`_. LoongArch; ---------; * `LoongArch Reference Manual - Volume 1: Basic Architecture <https://loongson.github.io/LoongArch-Documentation/LoongArch-Vol1-EN.html>`_; * `LoongArch ELF ABI specification <https://loongson.github.io/LoongArch-Documentation/LoongArch-ELF-ABI-EN.html>`_. SPARC; -----. * `SPARC standards <http://sparc.org/standards>`_; * `SPARC V9 ABI <http://sparc.org/standards/64.psabi.1.35.ps.Z>`_; * `SPARC V8 ABI <http://sparc.org/standards/psABI3rd.pdf>`_. Sys",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CompilerWriterInfo.rst:4391,stub,stubs,4391,interpreter/llvm-project/llvm/docs/CompilerWriterInfo.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CompilerWriterInfo.rst,1,['stub'],['stubs']
Testability,"dicates no reminders"");; if (reminderCount == 1) {; // Warning: Plural cases are not supported across all languages.; // Use a .stringsdict file instead; reminderText =; NSLocalizedString(@""1 Reminder"", @""Indicates single reminder"");; } else if (reminderCount >= 2) {; // Warning: Plural cases are not supported across all languages.; // Use a .stringsdict file instead; reminderText =; [NSString stringWithFormat:; NSLocalizedString(@""%@ Reminders"", @""Indicates multiple reminders""),; reminderCount];; }. alpha.security; ^^^^^^^^^^^^^^. .. _alpha-security-ArrayBound:. alpha.security.ArrayBound (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn about buffer overflows (older checker). .. code-block:: c. void test() {; char *s = """";; char c = s[1]; // warn; }. struct seven_words {; int c[7];; };. void test() {; struct seven_words a, *p;; p = &a;; p[0] = a;; p[1] = a;; p[2] = a; // warn; }. // note: requires unix.Malloc or; // alpha.unix.MallocWithAnnotations checks enabled.; void test() {; int *p = malloc(12);; p[3] = 4; // warn; }. void test() {; char a[2];; int *b = (int*)a;; b[1] = 3; // warn; }. .. _alpha-security-ArrayBoundV2:. alpha.security.ArrayBoundV2 (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn about buffer overflows (newer checker). .. code-block:: c. void test() {; char *s = """";; char c = s[1]; // warn; }. void test() {; int buf[100];; int *p = buf;; p = p + 99;; p[1] = 1; // warn; }. // note: compiler has internal check for this.; // Use -Wno-array-bounds to suppress compiler warning.; void test() {; int buf[100][100];; buf[0][-1] = 1; // warn; }. // note: requires alpha.security.taint check turned on.; void test() {; char s[] = ""abc"";; int x = getchar();; char c = s[x]; // warn: index is tainted; }. .. _alpha-security-MallocOverflow:. alpha.security.MallocOverflow (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for overflows in the arguments to ``malloc()``.; It tries to catch ``malloc(n * c)`` patterns, where:. - ``n``: a variable or member access of an object; - ``c``: a ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:60760,test,test,60760,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"dif(); endif(). #--stressHistogram------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHistogram stressHistogram.cxx LIBRARIES Hist RIO); ROOT_ADD_TEST(test-stresshistogram COMMAND stressHistogram FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stresshistogram-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistogram.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistogram ). #--stressGUI---------------------------------------------------------------------------------------; if(ROOT_asimage_FOUND); ROOT_EXECUTABLE(stressGUI stressGUI.cxx LIBRARIES Gui Recorder GuiHtml ASImageGui); endif(). #--stressSpectrum----------------------------------------------------------------------------------; if (spectrum); ROOT_EXECUTABLE(stressSpectrum stressSpectrum.cxx LIBRARIES Hist Spectrum Gpad); ROOT_ADD_TEST(test-stressspectrum COMMAND stressSpectrum -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressspectrum-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressSpectrum.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressspectrum LABELS longtest); endif(). #--stressVector------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressVector stressVector.cxx LIBRARIES Physics GenVector); ROOT_ADD_TEST(test-stressvector COMMAND stressVector FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressvector-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressVector.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressvector). #--stressMathMore----------------------------------------------------------------------------------; if(ROOT_mathmore_FOUND); ROOT_EXECUTABLE(stressMathMore stressMathMore.cxx LIBRARIES MathMore Smatrix); ROOT_ADD_TEST(test-stressmathmore COMMAND stressMathMore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathmor",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:10296,test,test-stressspectrum,10296,test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt,2,['test'],"['test-stressspectrum', 'test-stressspectrum-interpreted']"
Testability,diml.cpp; libc/src/math/generic/floor.cpp; libc/src/math/generic/floorf.cpp; libc/src/math/generic/floorl.cpp; libc/src/math/generic/fmax.cpp; libc/src/math/generic/fmaxf.cpp; libc/src/math/generic/fmaxl.cpp; libc/src/math/generic/fmin.cpp; libc/src/math/generic/fminf.cpp; libc/src/math/generic/fminl.cpp; libc/src/math/generic/frexp.cpp; libc/src/math/generic/frexpf.cpp; libc/src/math/generic/frexpl.cpp; libc/src/math/generic/hypot.cpp; libc/src/math/generic/hypotf.cpp; libc/src/math/generic/ilogb.cpp; libc/src/math/generic/ilogbf.cpp; libc/src/math/generic/ilogbl.cpp; libc/src/math/generic/ldexp.cpp; libc/src/math/generic/ldexpf.cpp; libc/src/math/generic/ldexpl.cpp; libc/src/math/generic/llrint.cpp; libc/src/math/generic/llrintf.cpp; libc/src/math/generic/llrintl.cpp; libc/src/math/generic/llround.cpp; libc/src/math/generic/llroundf.cpp; libc/src/math/generic/llroundl.cpp; libc/src/math/generic/log10f.cpp; libc/src/math/generic/log1pf.cpp; libc/src/math/generic/log2f.cpp; libc/src/math/generic/logb.cpp; libc/src/math/generic/logbf.cpp; libc/src/math/generic/logbl.cpp; libc/src/math/generic/logf.cpp; libc/src/math/generic/lrint.cpp; libc/src/math/generic/lrintf.cpp; libc/src/math/generic/lrintl.cpp; libc/src/math/generic/lround.cpp; libc/src/math/generic/lroundf.cpp; libc/src/math/generic/lroundl.cpp; libc/src/math/generic/math_utils.cpp; libc/src/math/generic/math_utils.h; libc/src/math/generic/modf.cpp; libc/src/math/generic/modff.cpp; libc/src/math/generic/modfl.cpp; libc/src/math/generic/nearbyint.cpp; libc/src/math/generic/nearbyintf.cpp; libc/src/math/generic/nearbyintl.cpp; libc/src/math/generic/nextafter.cpp; libc/src/math/generic/nextafterf.cpp; libc/src/math/generic/nextafterl.cpp; libc/src/math/generic/remainder.cpp; libc/src/math/generic/remainderf.cpp; libc/src/math/generic/remainderl.cpp; libc/src/math/generic/remquo.cpp; libc/src/math/generic/remquof.cpp; libc/src/math/generic/remquol.cpp; libc/src/math/generic/rint.cpp; libc/src/math/generic/rintf.c,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:138815,log,logb,138815,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['log'],['logb']
Testability,"directories(""${LLVM_BINARY_DIR}/include"" ""${LLVM_MAIN_INCLUDE_DIR}""); link_directories(""${LLVM_LIBRARY_DIR}""). # set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin ); # set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} ); # set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib${LLVM_LIBDIR_SUFFIX} ). if(LLVM_INCLUDE_TESTS OR clingtest); find_package(Python3 3.8 REQUIRED COMPONENTS Interpreter). # Check prebuilt llvm/utils.; if(EXISTS ${LLVM_TOOLS_BINARY_DIR}/FileCheck${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/count${CMAKE_EXECUTABLE_SUFFIX}; AND EXISTS ${LLVM_TOOLS_BINARY_DIR}/not${CMAKE_EXECUTABLE_SUFFIX}); set(LLVM_UTILS_PROVIDED ON); endif(); set(ROOT_LLVM_MAIN_SRC_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/llvm-project/llvm/""); if(EXISTS ${ROOT_LLVM_MAIN_SRC_DIR}/utils/lit/lit.py); # Note: path not really used, except for checking if lit was found; set(LLVM_LIT ${ROOT_LLVM_MAIN_SRC_DIR}/utils/lit/lit.py CACHE PATH ""The location of the lit test runner.""); if(NOT LLVM_UTILS_PROVIDED); add_subdirectory(${ROOT_LLVM_MAIN_SRC_DIR}/utils/FileCheck utils/FileCheck); add_subdirectory(${ROOT_LLVM_MAIN_SRC_DIR}/utils/count utils/count); add_subdirectory(${ROOT_LLVM_MAIN_SRC_DIR}/utils/not utils/not); set(LLVM_UTILS_PROVIDED ON); set(CLANG_TEST_DEPS FileCheck count not); endif(); # We do not run llvm tests in ROOT.; #set(UNITTEST_DIR ${ROOT_LLVM_MAIN_SRC_DIR}/utils/unittest); #if(EXISTS ${UNITTEST_DIR}/googletest/include/gtest/gtest.h; # AND NOT EXISTS ${LLVM_LIBRARY_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gtest${CMAKE_STATIC_LIBRARY_SUFFIX}; # AND EXISTS ${UNITTEST_DIR}/CMakeLists.txt); # add_subdirectory(${UNITTEST_DIR} utils/unittest); #endif(); else(); # Seek installed Lit.; find_program(LLVM_LIT; NAMES llvm-lit lit.py lit; PATHS ""${ROOT_LLVM_MAIN_SRC_DIR}/utils/lit""; DOC ""Path to lit.py""); endif(). if(LLVM_LIT); # Define the default arguments to use with 'lit', and an option for the user; # to override.; set(LIT_ARGS_D",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt:17405,test,test,17405,interpreter/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/CMakeLists.txt,1,['test'],['test']
Testability,"dir}/bin/clang``; * ``-DCMAKE_C_COMPILER_TARGET=""your *-none-eabi target""``; * ``-DCMAKE_ASM_COMPILER_TARGET=""your *-none-eabi target""``; * ``-DCMAKE_AR=/path/to/llvm-ar``; * ``-DCMAKE_NM=/path/to/llvm-nm``; * ``-DCMAKE_RANLIB=/path/to/llvm-ranlib``; * ``-DCOMPILER_RT_BAREMETAL_BUILD=ON``; * ``-DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON``; * ``-DLLVM_CONFIG_PATH=/path/to/llvm-config``; * ``-DCMAKE_C_FLAGS=""build-c-flags""``; * ``-DCMAKE_ASM_FLAGS=""build-c-flags""``; * ``-DCOMPILER_RT_EMULATOR=""qemu-arm -L /path/to/armv7-A/sysroot""``; * ``-DCOMPILER_RT_INCLUDE_TESTS=ON``; * ``-DCOMPILER_RT_TEST_COMPILER=""/path/to/clang""``; * ``-DCOMPILER_RT_TEST_COMPILER_CFLAGS=""test-c-flags""``. The Armv6-M builtins will use the soft-float ABI. When compiling the tests for; Armv7-A we must include ``""-mthumb -mfloat-abi=soft -mfpu=none""`` in the; test-c-flags. We must use an Armv7-A soft-float abi sysroot for ``qemu-arm``. Depending on the linker used for the test cases you may encounter BuildAttribute; mismatches between the M-profile objects from compiler-rt and the A-profile; objects from the test. The lld linker does not check the profile; BuildAttribute so it can be used to link the tests by adding -fuse-ld=lld to the; ``COMPILER_RT_TEST_COMPILER_CFLAGS``. Alternative using a cmake cache; -------------------------------; If you wish to build, but not test compiler-rt for Armv6-M, Armv7-M or Armv7E-M; the easiest way is to use the BaremetalARM.cmake recipe in clang/cmake/caches. You will need a bare metal sysroot such as that provided by the GNU ARM; Embedded toolchain. The libraries can be built with the cmake options:. * ``-DBAREMETAL_ARMV6M_SYSROOT=/path/to/bare/metal/toolchain/arm-none-eabi``; * ``-DBAREMETAL_ARMV7M_SYSROOT=/path/to/bare/metal/toolchain/arm-none-eabi``; * ``-DBAREMETAL_ARMV7EM_SYSROOT=/path/to/bare/metal/toolchain/arm-none-eabi``; * ``-C /path/to/llvm/source/tools/clang/cmake/caches/BaremetalARM.cmake``; * ``/path/to/llvm``. **Note** that for the recipe to work the co",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst:12097,test,test,12097,interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst,2,['test'],['test']
Testability,"displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: clients will; now; receive a message containing the low level reason for the failure and a; hint for getting more informationIn; TProofOutputFile, support the ""<user>"" and ""<group>""; placeholders in the output file name to automatically re-direct the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. . Fixes. Enable; the max number of sessions ('mxsess' parameter in the xpd.schedparam; directive); users are just refused to start a session if this limit is; reached.Make sure to collect consistently input messages when running in asynchronous modeFix; a few problems with TProof::SendFile (used by UploadPackage, Load); appearing when a rapid sequence of these commands was submitted Invalidate the TProofMgr when the physical connection is; closed; avoids; crashing when trying to get the logs after a failure. ; Fix a memory leak in log retrieval (the TProofLog object; was never; deleted); Add protections for the cases the manager cannot be; initialized; Fix a race condition possibly affecting the handling of; workers death; Avoid duplicating worker logs in the master log file; unless; when explicitly needed by the request (Exec(...), Print(...)) or when; an error occuredFix; problem with the determination and transmission of the name of the; object to be processed. The problem appeared when processing files; containing >1 trees in changing order.Fix problem with TProof::Load loading the macro to one worker only per machineFix wrong return code preventing the correct propagation of the full ClearPackage to workersFix a problem causing the whole query to stop even in the case a worker was terminated gently with SIGTERM.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:6422,log,logs,6422,proof/doc/v522/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html,1,['log'],['logs']
Testability,"dition to potential cache misses, this can't help decoding as I; imagine there has to be some kind of complicated decoder reset and realignment; to grab the bytes from the next cacheline. 532 532 0x3cfc movb (1809(%esp, %esi), %bl <<<--- spans 2 64 byte lines; 942 942 0x3d03 movl %dh, (1809(%esp, %esi); 937 937 0x3d0a incl %esi; 3 3 0x3d0b cmpb %bl, %dl; 27 27 0x3d0d jnz 0x000062db <main+11707>. //===---------------------------------------------------------------------===//. In c99 mode, the preprocessor doesn't like assembly comments like #TRUNCATE. //===---------------------------------------------------------------------===//. This could be a single 16-bit load. int f(char *p) {; if ((p[0] == 1) & (p[1] == 2)) return 1;; return 0;; }. //===---------------------------------------------------------------------===//. We should inline lrintf and probably other libc functions. //===---------------------------------------------------------------------===//. This code:. void test(int X) {; if (X) abort();; }. is currently compiled to:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne LBB1_1; addl $12, %esp; ret; LBB1_1:; call L_abort$stub. It would be better to produce:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne L_abort$stub; addl $12, %esp; ret. This can be applied to any no-return function call that takes no arguments etc.; Alternatively, the stack save/restore logic could be shrink-wrapped, producing; something like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; subl $12, %esp; call L_abort$stub. Both are useful in different situations. Finally, it could be shrink-wrapped; and tail called, like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; pop %eax # realign stack.; call L_abort$stub. Though this probably isn't worth it. //===---------------------------------------------------------------------===//. Sometimes it is better to codegen subtractions from a constant (e.g. 7-x) with; a neg instead of a sub instruction. Consider:. int test(char ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:11753,test,test,11753,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt,1,['test'],['test']
Testability,"ditional initial adjustment. .. code-block:: c++. enum RelocationType {; reloc_pcrel_word = 0, // add reloc value after adjusting for the PC loc; reloc_picrel_word = 1, // add reloc value after adjusting for the PIC base; reloc_absolute_word = 2, // absolute relocation; no additional adjustment; reloc_absolute_dword = 3 // absolute relocation; no additional adjustment; };. Target JIT Info; ---------------. ``XXXJITInfo.cpp`` implements the JIT interfaces for target-specific; code-generation activities, such as emitting machine code and stubs. At; minimum, a target-specific version of ``XXXJITInfo`` implements the following:. * ``getLazyResolverFunction`` --- Initializes the JIT, gives the target a; function that is used for compilation. * ``emitFunctionStub`` --- Returns a native function with a specified address; for a callback function. * ``relocate`` --- Changes the addresses of referenced globals, based on; relocation types. * Callback function that are wrappers to a function stub that is used when the; real target is not initially known. ``getLazyResolverFunction`` is generally trivial to implement. It makes the; incoming parameter as the global ``JITCompilerFunction`` and returns the; callback function that will be used a function wrapper. For the Alpha target; (in ``AlphaJITInfo.cpp``), the ``getLazyResolverFunction`` implementation is; simply:. .. code-block:: c++. TargetJITInfo::LazyResolverFn AlphaJITInfo::getLazyResolverFunction(; JITCompilerFn F) {; JITCompilerFunction = F;; return AlphaCompilationCallback;; }. For the X86 target, the ``getLazyResolverFunction`` implementation is a little; more complicated, because it returns a different callback function for; processors with SSE instructions and XMM registers. The callback function initially saves and later restores the callee register; values, incoming arguments, and frame and return address. The callback; function needs low-level access to the registers or stack, so it is typically; implemented with a",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/WritingAnLLVMBackend.rst:82653,stub,stub,82653,interpreter/llvm-project/llvm/docs/WritingAnLLVMBackend.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/WritingAnLLVMBackend.rst,1,['stub'],['stub']
Testability,"dle negative offset on time axis; 4. Fix - do not use `inset` because of old Chrome browsers; 5. Fix - properly provide object hints. ## Changes in 7.5.3; 1. Fix - draw histograms with negative bins #276; 2. Fix - correctly read TLeaf with fixed-size array; 3. Fix - bug in options handling in startGUI; 4. Fix - greyscale support in TLegend drawing; 5. Fix - correctly use text font for TGaxis title; 6. Fix - preserve auto colors in THStack #277; 7. Fix - correctly set pave name #278. ## Changes in 7.5.2; 1. Fix - proper fit pars display in stats, proper #chi^{2}; 2. Fix - several bugs in TFormula parsing; 3. Fix - correctly use saved buffer in TF1/TF2; 4. Fix - properly adjust size of stats box; 5. Fix - support pol0..pol9 functions; 6. Fix - TGraph bar width should be at least 1 pixel; 7. Fix - prevent drawing of empty TGraph. ## Changes in 7.5.1; 1. Fix - expand item in hierarchy painter; 2. Fix - correctly use saved TF1 values for non-equidistant bins #270; 3. Fix - in log scales replace 10^1 label by 10; 4. Fix - vertical align of log labels on X axis; 5. Fix - second click of the same item in hierarchy painter. ## Changes in 7.5.0; 1. Correctly implement `TH2` projections like MERCATOR or PARABOLIC, add MOLLWEIDE; 2. Support ""pol"", ""cyl"", ""sph"" and ""psr"" coordinates systems for lego and surf plots; 3. Support orthographic camera for lego and surface plots; 4. Implement ""tri1"", ""tri2"", ""triw"" draw options for `TGraph2D` with Delaunay algorithm; 5. Add support of `TProfile3D` and `TPaveClass` classes; 6. Use ""col"" as default draw option for `TH2`, ""box2"" for `TH3`; 7. Draw axes grids in front of objects - making it equivalent to original ROOT; 8. Change `TF1` and `TF2` drawing - always convert into histogram, support TWebCanvas, handle log scales; 9. Provide ""Bring to front"" menu command for different objects like pave, box, marker, ...; 10. Provide ""Build legend"" context menu command for the pad; 11. Let toggle vertical/horizontal flag for color palette via contex",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/changes.md:8700,log,log,8700,js/changes.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/changes.md,1,['log'],['log']
Testability,"dless of; file format, rather than restricting the search to certain sections of object; files. If ""``-``"" is specified as an ``input``, or no ``input`` is specified,; the program reads from the standard input stream. EXAMPLE; -------. .. code-block:: console. $ cat input.txt; bars; foo; wibble blob; $ llvm-strings input.txt; bars; wibble blob. OPTIONS; -------. .. option:: --all, -a. Silently ignored. Present for GNU :program:`strings` compatibility. .. option:: --bytes=<length>, -n. Set the minimum number of printable ASCII characters required for a sequence of; bytes to be considered a string. The default value is 4. .. option:: --help, -h. Display a summary of command line options. .. option:: --print-file-name, -f. Display the name of the containing file before each string. Example:. .. code-block:: console. $ llvm-strings --print-file-name test.o test.elf; test.o: _Z5hellov; test.o: some_bss; test.o: test.cpp; test.o: main; test.elf: test.cpp; test.elf: test2.cpp; test.elf: _Z5hellov; test.elf: main; test.elf: some_bss. .. option:: --radix=<radix>, -t. Display the offset within the file of each string, before the string and using; the specified radix. Valid ``<radix>`` values are ``o``, ``d`` and ``x`` for; octal, decimal and hexadecimal respectively. Example:. .. code-block:: console. $ llvm-strings --radix=o test.o; 1054 _Z5hellov; 1066 .rela.text; 1101 .comment; 1112 some_bss; 1123 .bss; 1130 test.cpp; 1141 main; $ llvm-strings --radix=d test.o; 556 _Z5hellov; 566 .rela.text; 577 .comment; 586 some_bss; 595 .bss; 600 test.cpp; 609 main; $ llvm-strings -t x test.o; 22c _Z5hellov; 236 .rela.text; 241 .comment; 24a some_bss; 253 .bss; 258 test.cpp; 261 main. .. option:: --version. Display the version of the :program:`llvm-strings` executable. .. option:: @<FILE>. Read command-line options from response file ``<FILE>``. EXIT STATUS; -----------. :program:`llvm-strings` exits with a non-zero exit code if there is an error.; Otherwise, it exits with code 0. BUGS; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst:1693,test,test,1693,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst,1,['test'],['test']
Testability,dnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND tes,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4557,test,testLossFunctionsCpu,4557,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testLossFunctionsCpu']
Testability,do/standalone/report.h; compiler-rt/lib/scudo/standalone/secondary.h; compiler-rt/lib/scudo/standalone/size_class_map.h; compiler-rt/lib/scudo/standalone/stack_depot.h; compiler-rt/lib/scudo/standalone/stats.h; compiler-rt/lib/scudo/standalone/string_utils.cpp; compiler-rt/lib/scudo/standalone/string_utils.h; compiler-rt/lib/scudo/standalone/trusty.cpp; compiler-rt/lib/scudo/standalone/trusty.h; compiler-rt/lib/scudo/standalone/tsd.h; compiler-rt/lib/scudo/standalone/tsd_exclusive.h; compiler-rt/lib/scudo/standalone/tsd_shared.h; compiler-rt/lib/scudo/standalone/vector.h; compiler-rt/lib/scudo/standalone/wrappers_c.cpp; compiler-rt/lib/scudo/standalone/wrappers_c.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp;,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:102340,test,tests,102340,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"does not evenly divide the vectorization and unroll factors. When the; vectorization and unroll factors are large, it's possible for loops with smaller; trip counts to end up spending most of their time in the scalar (rather than; the vector) code. In order to address this issue, the inner loop vectorizer is; enhanced with a feature that allows it to vectorize epilogue loops with a; vectorization and unroll factor combination that makes it more likely for small; trip count loops to still execute in vectorized code. The diagram below shows; the CFG for a typical epilogue vectorized loop with runtime checks. As; illustrated the control flow is structured in a way that avoids duplicating the; runtime pointer checks and optimizes the path length for loops that have very; small trip counts. .. image:: epilogue-vectorization-cfg.png. Performance; -----------. This section shows the execution time of Clang on a simple benchmark:; `gcc-loops <https://github.com/llvm/llvm-test-suite/tree/main/SingleSource/UnitTests/Vectorizer>`_.; This benchmarks is a collection of loops from the GCC autovectorization; `page <http://gcc.gnu.org/projects/tree-ssa/vectorization.html>`_ by Dorit Nuzman. The chart below compares GCC-4.7, ICC-13, and Clang-SVN with and without loop vectorization at -O3, tuned for ""corei7-avx"", running on a Sandybridge iMac.; The Y-axis shows the time in msec. Lower is better. The last column shows the geomean of all the kernels. .. image:: gcc-loops.png. And Linpack-pc with the same configuration. Result is Mflops, higher is better. .. image:: linpack-pc.png. Ongoing Development Directions; ------------------------------. .. toctree::; :hidden:. VectorizationPlan. :doc:`VectorizationPlan`; Modeling the process and upgrading the infrastructure of LLVM's Loop Vectorizer. .. _slp-vectorizer:. The SLP Vectorizer; ==================. Details; -------. The goal of SLP vectorization (a.k.a. superword-level parallelism) is; to combine similar independent instructions; in",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Vectorizers.rst:12396,test,test-suite,12396,interpreter/llvm-project/llvm/docs/Vectorizers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Vectorizers.rst,1,['test'],['test-suite']
Testability,"don't want `git fetch` (or `git pull`) to download user branches, use:. ``sed 's#fetch = +refs/heads/\*:refs/remotes/origin/\*#fetch = +refs/heads/main:refs/remotes/origin/main#' -i llvm-project/.git/config``. #. Configure and build LLVM and Clang:. * ``cd llvm-project``; * ``cmake -S llvm -B build -G <generator> [options]``. Some common build system generators are:. * ``Ninja`` --- for generating `Ninja <https://ninja-build.org>`_; build files. Most llvm developers use Ninja.; * ``Unix Makefiles`` --- for generating make-compatible parallel makefiles.; * ``Visual Studio`` --- for generating Visual Studio projects and; solutions.; * ``Xcode`` --- for generating Xcode projects. * See the `CMake docs; <https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html>`_; for a more comprehensive list. Some common options:. * ``-DLLVM_ENABLE_PROJECTS='...'`` --- semicolon-separated list of the LLVM; subprojects you'd like to additionally build. Can include any of: clang,; clang-tools-extra, lldb, lld, polly, or cross-project-tests. For example, to build LLVM, Clang, and LLD, use; ``-DLLVM_ENABLE_PROJECTS=""clang;lld""``. * ``-DCMAKE_INSTALL_PREFIX=directory`` --- Specify for *directory* the full; pathname of where you want the LLVM tools and libraries to be installed; (default ``/usr/local``). * ``-DCMAKE_BUILD_TYPE=type`` --- Controls optimization level and debug; information of the build. Valid options for *type* are ``Debug``,; ``Release``, ``RelWithDebInfo``, and ``MinSizeRel``. For more detailed; information see :ref:`CMAKE_BUILD_TYPE <cmake_build_type>`. * ``-DLLVM_ENABLE_ASSERTIONS=ON`` --- Compile with assertion checks enabled; (default is ON for Debug builds, OFF for all other build types). * ``-DLLVM_USE_LINKER=lld`` --- Link with the `lld linker`_, assuming it; is installed on your system. This can dramatically speed up link times; if the default linker is slow. * ``-DLLVM_PARALLEL_{COMPILE,LINK}_JOBS=N`` --- Limit the number of; compile/link jobs running in p",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst:2623,test,tests,2623,interpreter/llvm-project/llvm/docs/GettingStarted.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst,1,['test'],['tests']
Testability,"dows,; ; and is disabled when targeting Linux, except for Android Linux.; ; UNSUPPORTED: system-windows, target={{.*linux.*}} && !target={{.*android.*}}; ; This test is expected to fail when targeting PowerPC or running on Darwin.; ; XFAIL: target=powerpc{{.*}}, system-darwin. Tips for writing constraints; ----------------------------. **``REQUIRES`` and ``UNSUPPORTED``**. These are logical inverses. In principle, ``UNSUPPORTED`` isn't absolutely; necessary (the logical negation could be used with ``REQUIRES`` to get; exactly the same effect), but it can make these clauses easier to read and; understand. Generally, people use ``REQUIRES`` to state things that the test; depends on to operate correctly, and ``UNSUPPORTED`` to exclude cases where; the test is expected never to work. **``UNSUPPORTED`` and ``XFAIL``**. Both of these indicate that the test isn't expected to work; however, they; have different effects. ``UNSUPPORTED`` causes the test to be skipped;; this saves execution time, but then you'll never know whether the test; actually would start working. Conversely, ``XFAIL`` actually runs the test; but expects a failure output, taking extra execution time but alerting you; if/when the test begins to behave correctly (an XPASS test result). You; need to decide which is more appropriate in each case. **Using ``target=...``**. Checking the target triple can be tricky; it's easy to mis-specify. For; example, ``target=mips{{.*}}`` will match not only mips, but also mipsel,; mips64, and mips64el. ``target={{.*}}-linux-gnu`` will match; x86_64-unknown-linux-gnu, but not armv8l-unknown-linux-gnueabihf.; Prefer to use hyphens to delimit triple components (``target=mips-{{.*}}``); and it's generally a good idea to use a trailing wildcard to allow for; unexpected suffixes. Also, it's generally better to write regular expressions that use entire; triple components, than to do something clever to shorten them. For; example, to match both freebsd and netbsd in an expression",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:22431,test,test,22431,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,2,['test'],['test']
Testability,"dprivate variables are generated the same way as thread; local variables, using TLS support. If `-fno-openmp-use-tls`; is provided or target does not support TLS, code generation for threadprivate; variables relies on OpenMP runtime library. .. _opencl:. OpenCL Features; ===============. Clang can be used to compile OpenCL kernels for execution on a device; (e.g. GPU). It is possible to compile the kernel into a binary (e.g. for AMDGPU); that can be uploaded to run directly on a device (e.g. using; `clCreateProgramWithBinary; <https://www.khronos.org/registry/OpenCL/specs/opencl-1.1.pdf#111>`_) or; into generic bitcode files loadable into other toolchains. Compiling to a binary using the default target from the installation can be done; as follows:. .. code-block:: console. $ echo ""kernel void k(){}"" > test.cl; $ clang test.cl. Compiling for a specific target can be done by specifying the triple corresponding; to the target, for example:. .. code-block:: console. $ clang --target=nvptx64-unknown-unknown test.cl; $ clang --target=amdgcn-amd-amdhsa -mcpu=gfx900 test.cl. Compiling to bitcode can be done as follows:. .. code-block:: console. $ clang -c -emit-llvm test.cl. This will produce a file `test.bc` that can be used in vendor toolchains; to perform machine code generation. Note that if compiled to bitcode for generic targets such as SPIR/SPIR-V,; portable IR is produced that can be used with various vendor; tools as well as open source tools such as `SPIRV-LLVM Translator; <https://github.com/KhronosGroup/SPIRV-LLVM-Translator>`_; to produce SPIR-V binary. More details are provided in `the offline; compilation from OpenCL kernel sources into SPIR-V using open source; tools; <https://github.com/KhronosGroup/OpenCL-Guide/blob/main/chapters/os_tooling.md>`_.; From clang 14 onwards SPIR-V can be generated directly as detailed in; :ref:`the SPIR-V support section <spir-v>`. Clang currently supports OpenCL C language standards up to v2.0. Clang mainly; supports full pro",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:141131,test,test,141131,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,ds/perfect/dex_declare_file/precompiled_binary_different_dir/source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/windows_noncanonical_path/source; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_finish_test; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/expect_step_kind; - `5`; - `0`; - `5`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps; - `8`; - `2`; - `6`; - :part:`25%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools/clang-opt-bisect; - `2`; - `0`; - `2`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter-tests; - `15`; - `3`; - `12`; - :part:`20%`; * - cross-project-tests/debuginfo-tests/llgdb-tests; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb; - `2`; - `1`; - `1`; - :part:`50%`; * - flang/examples; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/examples/FlangOmpReport; - `3`; - `3`; - `0`; - :good:`100%`; * - flang/examples/PrintFlangFunctionNames; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/include/flang; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/include/flang/Common; - `21`; - `21`; - `0`; - :good:`100%`; * - flang/include/flang/Decimal; - `2`; - `2`; - `0`; - :good:`100%`; * - flang/include/flang/Evaluate; - `23`; - `23`; - `0`; - :good:`100%`; * - flang/include/flang/Frontend; - `11`; - `10`; - `1`; - :part:`90%`; * - flang/include/flang/FrontendTool; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/include/flang/Lower; - `25`; - `24`; - `1`; - :part:`96%`; * - flang/include/flang/Lower/Support; - `2`; - `2`; - `0`; - :good:`100%`; * - flang/include/flang/Optimizer/Builder; - `7`; - `7,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:27544,test,tests,27544,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,"dware-loop trip count but also produce a value identical to the input; that can be used as the input to the loop. They are placed in the loop; preheader basic block and the output is expected to be the input to the; phi for the induction variable of the loop, decremented by the; '``llvm.loop.decrement.reg.*``'. Arguments:; """""""""""""""""""". The integer operand is the loop trip count of the hardware-loop, and thus; not e.g. the loop back-edge taken count. Semantics:; """""""""""""""""""". The '``llvm.start.loop.iterations.*``' intrinsics do not perform any arithmetic; on their operand. It's a hint to the backend that can use this to set up the; hardware-loop count with a target specific instruction, usually a move of this; value to a special register or a hardware-loop instruction. '``llvm.test.set.loop.iterations.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. ::. declare i1 @llvm.test.set.loop.iterations.i32(i32); declare i1 @llvm.test.set.loop.iterations.i64(i64). Overview:; """""""""""""""""". The '``llvm.test.set.loop.iterations.*``' intrinsics are used to specify the; the loop trip count, and also test that the given count is not zero, allowing; it to control entry to a while-loop. They are placed in the loop preheader's; predecessor basic block, and are marked as ``IntrNoDuplicate`` to avoid; optimizers duplicating these instructions. Arguments:; """""""""""""""""""". The integer operand is the loop trip count of the hardware-loop, and thus; not e.g. the loop back-edge taken count. Semantics:; """""""""""""""""""". The '``llvm.test.set.loop.iterations.*``' intrinsics do not perform any; arithmetic on their operand. It's a hint to the backend that can use this to; set up the hardware-loop count with a target specific instruction, usually a; move of this value to a special register or a hardware-loop instruction.; The result is the conditional value of whether the given count is not zero. '``llvm.test.start.loop.iterations.*``' Intrinsic; ^",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:645458,test,test,645458,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"e - Number of instructions removed; 86 indvars - Number of canonical indvars added; 87 indvars - Number of aux indvars removed; 25 instcombine - Number of dead inst eliminate; 434 instcombine - Number of insts combined; 248 licm - Number of load insts hoisted; 1298 licm - Number of insts hoisted to a loop pre-header; 3 licm - Number of insts hoisted to multiple loop preds (bad, no loop pre-header); 75 mem2reg - Number of alloca's promoted; 1444 cfgsimplify - Number of blocks simplified. Obviously, with so many optimizations, having a unified framework for this stuff; is very nice. Making your pass fit well into the framework makes it more; maintainable and useful. .. _DebugCounters:. Adding debug counters to aid in debugging your code; ---------------------------------------------------. Sometimes, when writing new passes, or trying to track down bugs, it; is useful to be able to control whether certain things in your pass; happen or not. For example, there are times the minimization tooling; can only easily give you large testcases. You would like to narrow; your bug down to a specific transformation happening or not happening,; automatically, using bisection. This is where debug counters help.; They provide a framework for making parts of your code only execute a; certain number of times. The ``llvm/Support/DebugCounter.h`` (`doxygen; <https://llvm.org/doxygen/DebugCounter_8h_source.html>`__) file; provides a class named ``DebugCounter`` that can be used to create; command line counter options that control execution of parts of your code. Define your DebugCounter like this:. .. code-block:: c++. DEBUG_COUNTER(DeleteAnInstruction, ""passname-delete-instruction"",; 		""Controls which instructions get delete"");. The ``DEBUG_COUNTER`` macro defines a static variable, whose name; is specified by the first argument. The name of the counter; (which is used on the command line) is specified by the second; argument, and the description used in the help is specified by the; thi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst:50024,test,testcases,50024,interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,1,['test'],['testcases']
Testability,"e -Wno-array-bounds to suppress compiler warning.; void test() {; int buf[100][100];; buf[0][-1] = 1; // warn; }. // note: requires alpha.security.taint check turned on.; void test() {; char s[] = ""abc"";; int x = getchar();; char c = s[x]; // warn: index is tainted; }. alpha.security.MallocOverflow; (C); Check for overflows in the arguments to malloc(). void test(int n) {; void *p = malloc(n * sizeof(int)); // warn; }. alpha.security.MmapWriteExec; (C); Warn on mmap() calls that are both writable and executable. void test(int n) {; void *c = mmap(NULL, 32, PROT_READ | PROT_WRITE | PROT_EXEC,; MAP_PRIVATE | MAP_ANON, -1, 0);; // warn: Both PROT_WRITE and PROT_EXEC flags are set. This can lead to; // exploitable memory regions, which could be overwritten with malicious; // code; }. alpha.security.ReturnPtrRange; (C); Check for an out-of-bound pointer being returned to callers. static int A[10];. int *test() {; int *p = A + 10;; return p; // warn; }. int test(void) {; int x;; return x; // warn: undefined or garbage returned; }. alpha.security.taint.TaintPropagation; (C); Generate taint information used by other checkers. void test() {; char x = getchar(); // 'x' marked as tainted; system(&x); // warn: untrusted data is passed to a system call; }. // note: compiler internally checks if the second param to; // sprintf is a string literal or not.; // Use -Wno-format-security to suppress compiler warning.; void test() {; char s[10], buf[10];; fscanf(stdin, ""%s"", s); // 's' marked as tainted. sprintf(buf, s); // warn: untrusted data as a format string; }. void test() {; size_t ts;; scanf(""%zd"", &ts); // 'ts' marked as tainted; int *p = (int *)malloc(ts * sizeof(int));; // warn: untrusted data as buffer size; }. Unix Alpha Checkers. Name, DescriptionExample. alpha.unix.BlockInCriticalSection; (C); Check for calls to blocking functions inside a critical section. Applies to:. lock; unlock; sleep; getc; fgets; read; revc; pthread_mutex_lock; pthread_mutex_unlock; mtx_lock; mtx_t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html:11558,test,test,11558,interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,1,['test'],['test']
Testability,"e ARMv6 and ARMv7 architectures and may be inapplicable to older chips. #. The most popular Linaro/Ubuntu OS's for ARM boards, e.g., the; Pandaboard, have become hard-float platforms. There are a number of; choices when using CMake. Autoconf usage is deprecated as of 3.8. Building LLVM/Clang in ``Release`` mode is preferred since it consumes; a lot less memory. Otherwise, the building process will very likely; fail due to insufficient memory. It's also a lot quicker to only build; the relevant back-ends (ARM and AArch64), since it's very unlikely that; you'll use an ARM board to cross-compile to other arches. If you're; running Compiler-RT tests, also include the x86 back-end, or some tests; will fail. .. code-block:: bash. cmake $LLVM_SRC_DIR -DCMAKE_BUILD_TYPE=Release \; -DLLVM_TARGETS_TO_BUILD=""ARM;X86;AArch64"". Other options you can use are:. .. code-block:: bash. Use Ninja instead of Make: ""-G Ninja""; Build with assertions on: ""-DLLVM_ENABLE_ASSERTIONS=True""; Local (non-sudo) install path: ""-DCMAKE_INSTALL_PREFIX=$HOME/llvm/install""; CPU flags: ""DCMAKE_C_FLAGS=-mcpu=cortex-a15"" (same for CXX_FLAGS). After that, just typing ``make -jN`` or ``ninja`` will build everything.; ``make -jN check-all`` or ``ninja check-all`` will run all compiler tests. For; running the test suite, please refer to :doc:`TestingGuide`. #. If you are building LLVM/Clang on an ARM board with 1G of memory or less,; please use ``gold`` rather then GNU ``ld``. In any case it is probably a good; idea to set up a swap partition, too. .. code-block:: bash. $ sudo ln -sf /usr/bin/ld /usr/bin/ld.gold. #. ARM development boards can be unstable and you may experience that cores; are disappearing, caches being flushed on every big.LITTLE switch, and; other similar issues. To help ease the effect of this, set the Linux; scheduler to ""performance"" on **all** cores using this little script:. .. code-block:: bash. # The code below requires the package 'cpufrequtils' to be installed.; for ((cpu=0; cpu<`gr",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToBuildOnARM.rst:1651,assert,assertions,1651,interpreter/llvm-project/llvm/docs/HowToBuildOnARM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToBuildOnARM.rst,1,['assert'],['assertions']
Testability,"e C++20 standard these constructs are; well-defined, so activating pedantic mode in C++20 has no effect.). **Examples**. .. code-block:: cpp. static_assert(sizeof(int) == 4, ""assuming 32-bit int""). void basic_examples(int a, int b) {; if (b < 0) {; b = a << b; // warn: right operand is negative in left shift; } else if (b >= 32) {; b = a >> b; // warn: right shift overflows the capacity of 'int'; }; }. int pedantic_examples(int a, int b) {; if (a < 0) {; return a >> b; // warn: left operand is negative in right shift; }; a = 1000u << 31; // OK, overflow of unsigned value is well-defined, a == 0; if (b > 10) {; a = b << 31; // this is undefined before C++20, but the checker doesn't; // warn because it doesn't know the exact value of b; }; return 1000 << 31; // warn: this overflows the capacity of 'int'; }. **Solution**. Ensure the shift operands are in proper range before shifting. .. _core-CallAndMessage:. core.CallAndMessage (C, C++, ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for logical errors for function calls and Objective-C message expressions (e.g., uninitialized arguments, null function pointers). .. literalinclude:: checkers/callandmessage_example.c; :language: objc. .. _core-DivideZero:. core.DivideZero (C, C++, ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for division by zero. .. literalinclude:: checkers/dividezero_example.c; :language: c. .. _core-NonNullParamChecker:. core.NonNullParamChecker (C, C++, ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for null pointers passed as arguments to a function whose arguments are references or marked with the 'nonnull' attribute. .. code-block:: cpp. int f(int *p) __attribute__((nonnull));. void test(int *p) {; if (!p); f(p); // warn; }. .. _core-NullDereference:. core.NullDereference (C, C++, ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for dereferences of null pointers. This checker specifically does; not report null pointer dereferences for x86 and x86-64 targets when the; address space is 256",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:2810,log,logical,2810,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['log'],['logical']
Testability,"e ID; that is generated only in *debug* builds. .. option:: --internal=<value[,value,...]>. With **value** being one of the options in the following list. .. code-block:: text. =all: Include all the below options. The following options allow to check the integrity of the logical view;; collect the debug tags that are processed or not implemented; ignore the; logical element line number, to facilitate the logical view comparison; when using external comparison tools; print the command line options; used to invoke :program:`llvm-debuginfo-analyzer`. .. code-block:: text. =id: Print unique element ID.; =cmdline: Print command line.; =integrity: Check elements integrity.; =none: Ignore element line number.; =tag: Debug information tags. **Note:** For ELF format, the collected tags represent the debug tags; that are not processed. For PE/COFF format, they represent the tags; that are processed. EXAMPLES; --------; This section includes some real binary files to show how to use; :program:`llvm-debuginfo-analyzer` to print a logical view and to; diagnose possible debug information issues. TEST CASE 1 - GENERAL OPTIONS; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; The below example is used to show different output generated by; :program:`llvm-debuginfo-analyzer`. We compiled the example for an X86; ELF target with Clang (-O0 -g):. .. code-block:: c++. 1 using INTPTR = const int *;; 2 int foo(INTPTR ParamPtr, unsigned ParamUnsigned, bool ParamBool) {; 3 if (ParamBool) {; 4 typedef int INTEGER;; 5 const INTEGER CONSTANT = 7;; 6 return CONSTANT;; 7 }; 8 return ParamUnsigned;; 9 }. PRINTING MODE; ^^^^^^^^^^^^^; In this mode :program:`llvm-debuginfo-analyzer` prints the *logical view*; or portions of it, based on criteria patterns (including regular; expressions) to select the kind of *logical elements* to be included in; the output. BASIC DETAILS; """"""""""""""""""""""""""; The following command prints basic details for all the logical elements; sorted by the debug information internal offset; it includ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:23762,log,logical,23762,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['log'],['logical']
Testability,"e LLVM system, review the requirements given; below. This may save you some trouble by knowing ahead of time what hardware; and software you will need. Hardware; --------; Any system that can adequately run Visual Studio 2019 is fine. The LLVM; source tree including the git index consumes approximately 3GB.; Object files, libraries and executables consume approximately 5GB in; Release mode and much more in Debug mode. SSD drive and >16GB RAM are; recommended. Software; --------; You will need `Visual Studio <https://visualstudio.microsoft.com/>`_ 2019 or; later, with the latest Update installed. Visual Studio Community Edition; suffices. You will also need the `CMake <http://www.cmake.org/>`_ build system since it; generates the project files you will use to build with. CMake is bundled with; Visual Studio 2019 so separate installation is not required. If you do install; CMake separately, Visual Studio 2022 will require CMake Version 3.21 or later. If you would like to run the LLVM tests you will need `Python; <http://www.python.org/>`_. Version 3.6 and newer are known to work. You can; install Python with Visual Studio 2019, from the Microsoft store or from; the `Python web site <http://www.python.org/>`_. We recommend the latter since it; allows you to adjust installation options. You will need `Git for Windows <https://git-scm.com/>`_ with bash tools, too.; Git for Windows is also bundled with Visual Studio 2019. Getting Started; ===============; Here's the short story for getting up and running quickly with LLVM.; These instruction were tested with Visual Studio 2019 and Python 3.9.6:. 1. Download and install `Visual Studio <https://visualstudio.microsoft.com/>`_.; 2. In the Visual Studio installer, Workloads tab, select the; **Desktop development with C++** workload. Under Individual components tab,; select **Git for Windows**.; 3. Complete the Visual Studio installation.; 4. Download and install the latest `Python 3 release <http://www.python.org/>`_.; 5. In t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStartedVS.rst:2271,test,tests,2271,interpreter/llvm-project/llvm/docs/GettingStartedVS.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStartedVS.rst,1,['test'],['tests']
Testability,e PRIVATE PCRE2::PCRE2); set_source_files_properties(src/TPRegexp.cxx; TARGET_DIRECTORY Core; PROPERTIES COMPILE_DEFINITIONS USE_PCRE2); else(); target_link_libraries(Core PRIVATE PCRE::PCRE); endif(). ROOT_INSTALL_HEADERS(${BASE_HEADER_DIRS}). file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/man). if(NOT MSVC); #---addRootC++CmdMan-------------------------------------------------------------------------; generateManual(rootMan ${CMAKE_CURRENT_SOURCE_DIR}/src/root-argparse.py ${CMAKE_BINARY_DIR}/man/root.1); generateManual(haddMan ${CMAKE_SOURCE_DIR}/main/src/hadd-argparse.py ${CMAKE_BINARY_DIR}/man/hadd.1); generateManual(rootclingMan ${CMAKE_SOURCE_DIR}/core/dictgen/src/rootcling-argparse.py ${CMAKE_BINARY_DIR}/man/rootcling.1). #---addRootPyCmdMan---------------------------------------------------------------------------; #generateManual(rootbrowseMan ${CMAKE_SOURCE_DIR}/main/python/rootbrowse.py ${CMAKE_BINARY_DIR}/man/rootbrowse.1); #generateManual(rootcpMan ${CMAKE_SOURCE_DIR}/main/python/rootcp.py ${CMAKE_BINARY_DIR}/man/rootcp.1); #generateManual(rootdrawtreeMan ${CMAKE_SOURCE_DIR}/main/python/rootdrawtree.py ${CMAKE_BINARY_DIR}/man/rootdrawtree.1); #generateManual(rooteventselectorMan ${CMAKE_SOURCE_DIR}/main/python/rooteventselector.py ${CMAKE_BINARY_DIR}/man/rooteventselector.1); #generateManual(rootlsMan ${CMAKE_SOURCE_DIR}/main/python/rootls.py ${CMAKE_BINARY_DIR}/man/rootls.1); #generateManual(rootmkdirMan ${CMAKE_SOURCE_DIR}/main/python/rootmkdir.py ${CMAKE_BINARY_DIR}/man/rootmkdir.1); #generateManual(rootmvMan ${CMAKE_SOURCE_DIR}/main/python/rootmv.py ${CMAKE_BINARY_DIR}/man/rootmv.1); #generateManual(rootprintMan ${CMAKE_SOURCE_DIR}/main/python/rootprint.py ${CMAKE_BINARY_DIR}/man/rootprint.1); #generateManual(rootrmMan ${CMAKE_SOURCE_DIR}/main/python/rootrm.py ${CMAKE_BINARY_DIR}/man/rootrm.1); #generateManual(rootslimtreeMan ${CMAKE_SOURCE_DIR}/main/python/rootslimtree.py ${CMAKE_BINARY_DIR}/man/rootslimtree.1); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/CMakeLists.txt:6443,test,test,6443,core/base/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/CMakeLists.txt,1,['test'],['test']
Testability,"e RIO); ROOT_ADD_GTEST(testTH2PolyAdd test_TH2Poly_Add.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH2PolyGetNumberOfBins test_TH2Poly_GetNumberOfBins.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTHn THn.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH1 test_TH1.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTHStack test_THStack.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testProject3Dname test_Project3D_name.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTFormula test_TFormula.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTKDE test_tkde.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTH1FindFirstBinAbove test_TH1_FindFirstBinAbove.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_TEfficiency test_TEfficiency.cxx LIBRARIES Hist); ROOT_ADD_GTEST(TGraphMultiErrorsTests TGraphMultiErrorsTests.cxx LIBRARIES Hist RIO); ROOT_ADD_GTEST(test_TF123_Moments test_TF123_Moments.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_THBinIterator test_THBinIterator.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTMultiGraphGetHistogram test_TMultiGraph_GetHistogram.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testMapCppName test_MapCppName.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testTGraphSorting test_TGraph_sorting.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testSpline test_spline.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF1Simple test_tf1_simple.cxx LIBRARIES Hist RIO). if(fftw3); ROOT_ADD_GTEST(testTF1 test_tf1.cxx LIBRARIES Hist); endif(). ROOT_ADD_GTEST(testTF2 test_tf2.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF3 test_tf3.cxx LIBRARIES Hist). ROOT_ADD_GTEST(testTH1sa test_TH1_SaveAs.cxx LIBRARIES Hist). if(clad); ROOT_ADD_GTEST(TFormulaGradientTests TFormulaGradientTests.cxx LIBRARIES Core MathCore Hist); ROOT_ADD_GTEST(TFormulaHessianTests TFormulaHessianTests.cxx LIBRARIES Core MathCore Hist); endif(). # Regression test for https://github.com/root-project/root/issues/13691; # The test needs the following to be actually useful:; # - It must be compiled and run as a standalone executable, as it depends on; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt:1367,test,testTMultiGraphGetHistogram,1367,hist/hist/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt,1,['test'],['testTMultiGraphGetHistogram']
Testability,e ROOTTMVASofieParser); set_target_properties(emitFromONNX PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version 3.17; target_compile_options(emitFromONNX PRIVATE -Wno-unused-parameter -Wno-array-bounds). # Automatic compilation of headers from onnx files; add_custom_target(SofieCompileModels_ONNX); add_dependencies(SofieCompileModels_ONNX emitFromONNX). add_custom_command(TARGET SofieCompileModels_ONNX POST_BUILD; 		COMMAND ${CMAKE_COMMAND} -E env ROOTIGNOREPREFIX=1 ./emitFromONNX ${onnx_file} ${CMAKE_CURRENT_BINARY_DIR}/${fname}; 		USES_TERMINAL ). # Creating a Google Test; if (tmva-cpu) # we need BLAS for compiling the models; ROOT_ADD_GTEST(TestCustomModelsFromONNX TestCustomModelsFromONNX.cxx; LIBRARIES; ROOTTMVASofie; ${BLAS_LINKER_FLAGS}; ${BLAS_LIBRARIES}; INCLUDE_DIRS; ${CMAKE_CURRENT_BINARY_DIR}; ). add_dependencies(TestCustomModelsFromONNX SofieCompileModels_ONNX); endif(). #For testing serialisation of RModel object. add_executable(emitFromROOT; EmitFromRoot_all.cxx; ); target_include_directories(emitFromROOT PRIVATE; ${CMAKE_SOURCE_DIR}/tmva/sofie/inc; ${SOFIE_PARSERS_DIR}/inc; ${CMAKE_SOURCE_DIR}/tmva/inc; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(emitFromROOT protobuf::libprotobuf ROOTTMVASofie ROOTTMVASofieParser); set_target_properties(emitFromROOT PROPERTIES POSITION_INDEPENDENT_CODE TRUE); ## silence protobuf warnings seen in version 3.0 and 3.6. Not needed from protobuf version 3.17; target_compile_options(emitFromROOT PRIVATE -Wno-unused-parameter -Wno-array-bounds). # Automatic compilation of headers from root files; add_custom_target(SofieCompileModels_ROOT); # onepcm or modules dependency is needed for using ROOT I/O when converting a model in a ROOT file; if (runtime_cxxmodules); add_dependencies(SofieCompileModels_ROOT emitFromROOT modules_idx); else(); add_dependencies(SofieCompileModels_ROOT emitFromROOT onepcm); endif(). add_custom_command(TARGET ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt:2792,test,testing,2792,tmva/sofie/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/CMakeLists.txt,1,['test'],['testing']
Testability,"e `fID` is; found, the shape is cached already - and the costly tessellation does; not need to be sent again. The viewer can also perform internal GL; specific caching (display lists) with considerable performance gains in; these cases. For this to work correctly the logical object in must be; described in **`TBuffer3D`** in the local reference frame, complete with; the local`/`master translation. In some cases you will not have a real; object you can reasonably set **`TBuffer3D::fID` to, or the object is; recycled or temporary. To suppress internal caching in the GL Viewer in; these cases, set `TBuffer3D::fID` to 0 (null).**. The viewer indicates it can support local frame objects through the; **`TVirtualViewer3D`** interface method: `PreferLocalFrame()`. If this; returns `kTRUE` you can make repeated calls to `AddObject()`, with; **`TBuffer3D`** containing the same `fID`, and different `fLocalMaster`; placements. For viewers supporting logical/physical objects, the TBuffer3D content; refers to the properties of the logical object, with the exception of:. - `fLocalMaster` transform. - `fColor `. - `fTransparency`. attributes, which can be varied for **each** physical object. As **a minimum requirement** all clients must be capable of filling the; raw tessellation of the object buffer, in the master reference frame.; Conversely viewers must always be capable of displaying the object; described by this buffer. If either does not meet this requirement the; object may not be displayed. #### Scene Rebuilds. `TBuffer3D::AddObject` is not an explicit command to the viewer - it may; for various reasons decide to ignore it:. - It already has the object internally cached. - The object falls outside some 'interest' limits of the viewer; camera. - The object is too small to be worth drawing. In all these cases `TBuffer3D::AddObject()` returns kNone, as it does; for successful addition, indicating it does not require further; information about this object. Hence you should not ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md:135974,log,logical,135974,documentation/users-guide/Graphics.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md,2,['log'],['logical']
Testability,"e a simple; example: we want to plot `fPx` of the first 100 tracks of each entry. We; have a ROOT tree with a branch for each data member in the ""`Event`""; object. To build this file and tree follow the instructions on how to; build the examples in `$ROOTSYS/test`. Execute `Event` and instruct it; to split the object with this command (from the UNIX command line). ``` {.cpp}; > $ROOTSYS/test/Event 400 1 2 1; ```. This creates an `Event.root` file with 400 events, compressed, split,; and filled. See `$ROOTSYS/test/MainEvent.cxx` for more info. The person who designed the tree makes a shared library available to; you, which defines the classes needed. In this case, the classes are; Event, `EventHeader`, and Track and they are defined in the shared; library `libEvent.so`. The designer also gives you the `Event.h` file to; see the definition of the classes. You can locate `Event.h` in; `$ROOTSYS/test`, and if you have not yet built `libEvent.so`, please see; the instructions of how to build it (typing make in \$ROOTSYS/test is; enough). If you have already built it, you can now use it again. ### Creating a Class with MakeClass. First, we load the shared library and open `Event.root`. ``` {.cpp}; root[] .L libEvent.so; root[] TFile *f = new TFile(""Event.root"");; root[] f->ls();; TFile** Event.root TTree benchmark ROOT file; TFile* Event.root TTree benchmark ROOT file; KEY: TH1F htime;1 Real-Time to write versus time; KEY: TTree T;1 An example of a ROOT tree; ```. We can see there is a tree ""`T`"", and just to verify that we are working; with the correct one, we print the tree, which will show us the header; and branches. ``` {.cpp}; root[] T->Print();; ```. From the output of print we can see that the tree has one branch for; each data member of `Event`, `Track`, and `EventHeader`. Now we can use; `TTree::MakeClass` on our tree ""`T`"". `MakeClass` takes one parameter, a; string containing the name of the class to be made. In the command; below, the name of our class will b",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md:123004,test,test,123004,documentation/users-guide/Trees.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md,1,['test'],['test']
Testability,"e a virtual method one is involved; (instead of having C++ hide it for you behind ""syntactic sugar""). > And the old array syntax:; > type [ int, int, ...]; > is just much more familiar and clear to people than anything new you; > introduce, no matter how logical it is. . Erm... excuse me but how is this the ""old array syntax""? If you are; arguing for consistency with C, you should be asking for 'type int []',; which is significantly different than the above (beside the above; introduces a new operator and duplicates information; needlessly). Basically what I am suggesting is exactly the above without; the fluff. So instead of:. type [ int, int, ...]. you use:. type [ int ]. > Introducing a new syntax that may; > make function pointers easier but makes arrays much more difficult seems; > very risky to me. This is not about function pointers. This is about consistency in the; type system, and consistency with the rest of the language. The point; above does not make arrays any more difficult to use, and makes the; structure of types much more obvious than the ""c way"". > > In my opinion, it is critically important to have clear and concise type; > > specifications, because types are going to be all over the programs.; > ; > I absolutely agree. But the question is, what is more clear and concise?; > The syntax programmers are used to out of years of experience or a new; > syntax that they have never seen that has a more logical structure. I think; > the answer is the former. Sometimes, you have to give up a better idea; > because you can't overcome sociological barriers to it. Qwerty keyboards; > and Windows are two classic examples of bad technology that are difficult to; > root out. Very true, but you seem to be advocating a completely different Type; system than C has, in addition to it not offering the advantages of clear; structure that the system I recommended does... so you seem to not have a; problem with changing this, just with what I change it to. :). -Chris. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HistoricalNotes/2001-02-06-TypeNotationDebateResp4.txt:3824,log,logical,3824,interpreter/llvm-project/llvm/docs/HistoricalNotes/2001-02-06-TypeNotationDebateResp4.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HistoricalNotes/2001-02-06-TypeNotationDebateResp4.txt,1,['log'],['logical']
Testability,"e and Building; --------------------------. Finally, if you're using your platform compiler, run:. .. code-block:: bash. $ cmake -G Ninja <source-dir> -DCMAKE_BUILD_TYPE=<type> <options above>. If you're using Clang as the cross-compiler, run:. .. code-block:: bash. $ CC='clang' CXX='clang++' cmake -G Ninja <source-dir> -DCMAKE_BUILD_TYPE=<type> <options above>. If you have ``clang``/``clang++`` on the path, it should just work, and special; Ninja files will be created in the build directory. I strongly suggest; you to run ``cmake`` on a separate build directory, *not* inside the; source tree. To build, simply type:. .. code-block:: bash. $ ninja. It should automatically find out how many cores you have, what are; the rules that needs building and will build the whole thing. You can't run ``ninja check-all`` on this tree because the created; binaries are targeted to ARM, not x86_64. Installing and Using; --------------------. After the LLVM/Clang has built successfully, you should install it; via:. .. code-block:: bash. $ ninja install. which will create a sysroot on the install-dir. You can then tar; that directory into a binary with the full triple name (for easy; identification), like:. .. code-block:: bash. $ ln -sf <install-dir> arm-linux-gnueabihf-clang; $ tar zchf arm-linux-gnueabihf-clang.tar.gz arm-linux-gnueabihf-clang. If you copy that tarball to your target board, you'll be able to use; it for running the test-suite, for example. Follow the guidelines at; https://llvm.org/docs/lnt/quickstart.html, unpack the tarball in the; test directory, and use options:. .. code-block:: bash. $ ./sandbox/bin/python sandbox/bin/lnt runtest nt \; --sandbox sandbox \; --test-suite `pwd`/test-suite \; --cc `pwd`/arm-linux-gnueabihf-clang/bin/clang \; --cxx `pwd`/arm-linux-gnueabihf-clang/bin/clang++. Remember to add the ``-jN`` options to ``lnt`` to the number of CPUs; on your board. Also, the path to your clang has to be absolute, so; you'll need the `pwd` trick above.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToCrossCompileLLVM.rst:7563,test,test-suite,7563,interpreter/llvm-project/llvm/docs/HowToCrossCompileLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToCrossCompileLLVM.rst,8,"['sandbox', 'test']","['sandbox', 'test', 'test-suite']"
Testability,"e and C++-style linkage to illustrate how these names are; printed differently (see :option:`--demangle`). .. code-block:: c. // test.h; extern ""C"" inline int foz() {; return 1234;; }. .. code-block:: c. // test.cpp; #include ""test.h""; int bar=42;. int foo() {; return bar;; }. int baz() {; volatile int k = 42;; return foz() + k;; }. int main() {; return foo() + baz();; }. These files are built as follows:. .. code-block:: console. $ clang -g test.cpp -o test.elf; $ clang -g -O2 test.cpp -o inlined.elf. Example 1 - addresses and object on command-line:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf 0x4004d0 0x400490; foz; /tmp/test.h:1:0. baz(); /tmp/test.cpp:11:0. Example 2 - addresses on standard input:. .. code-block:: console. $ cat addr.txt; 0x4004a0; 0x400490; 0x4004d0; $ llvm-symbolizer --obj=test.elf < addr.txt; main; /tmp/test.cpp:15:0. baz(); /tmp/test.cpp:11:0. foz; /tmp/./test.h:1:0. Example 3 - object specified with address:. .. code-block:: console. $ llvm-symbolizer ""test.elf 0x400490"" ""FILE:inlined.elf 0x400480""; baz(); /tmp/test.cpp:11:0. foo(); /tmp/test.cpp:8:10. $ cat addr2.txt; FILE:test.elf 0x4004a0; inlined.elf 0x400480. $ llvm-symbolizer < addr2.txt; main; /tmp/test.cpp:15:0. foo(); /tmp/test.cpp:8:10. Example 4 - BUILDID and FILE prefixes:. .. code-block:: console. $ llvm-symbolizer ""FILE:test.elf 0x400490"" ""DATA BUILDID:123456789abcdef 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr3.txt; FILE:test.elf 0x400490; DATA BUILDID:123456789abcdef 0x601028. $ llvm-symbolizer < addr3.txt; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. Example 5 - CODE and DATA prefixes:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf ""CODE 0x400490"" ""DATA 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr4.txt; CODE test.elf 0x4004a0; DATA inlined.elf 0x601028. $ llvm-symbolizer < addr4.txt; main; /tmp/test.cpp:15:0. bar; 6295592 4. Example 6 - path-style options:. This example uses the same source file as above, but ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:3079,test,test,3079,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"e and password the build master will be using; to authenticate your buildbot-worker. #. Create a buildbot-worker in context of that buildbot-worker account. Point it; to the **lab.llvm.org** port **9994** (see `Buildbot documentation,; Creating a worker; <http://docs.buildbot.net/current/tutorial/firstrun.html#creating-a-worker>`_; for more details) by running the following command:. .. code-block:: bash. $ buildbot-worker create-worker <buildbot-worker-root-directory> \; lab.llvm.org:9994 \; <buildbot-worker-access-name> \; <buildbot-worker-access-password>. Only once a new worker is stable, and; approval from Galina has been received (see last step) should it; be pointed at the main buildmaster. Now start the worker:. .. code-block:: bash. $ buildbot-worker start <buildbot-worker-root-directory>. This will cause your new worker to connect to the staging buildmaster; which is silent by default. Try this once then check the log file; ``<buildbot-worker-root-directory>/worker/twistd.log``. If your settings; are correct you will see a refused connection. This is good and expected,; as the credentials have not been established on both ends. Now stop the; worker and proceed to the next steps. #. Fill the buildbot-worker description and admin name/e-mail. Here is an; example of the buildbot-worker description::. Windows 7 x64; Core i7 (2.66GHz), 16GB of RAM. g++.exe (TDM-1 mingw32) 4.4.0; GNU Binutils 2.19.1; cmake version 2.8.4; Microsoft(R) 32-bit C/C++ Optimizing Compiler Version 16.00.40219.01 for 80x86. See `here <http://docs.buildbot.net/current/manual/installation/worker.html>`_; for which files to edit. #. Send a patch which adds your build worker and your builder to; `zorg <https://github.com/llvm/llvm-zorg>`_. Use the typical LLVM; `workflow <https://llvm.org/docs/Contributing.html#how-to-submit-a-patch>`_. * workers are added to ``buildbot/osuosl/master/config/workers.py``; * builders are added to ``buildbot/osuosl/master/config/builders.py``. Please make sure",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToAddABuilder.rst:4439,log,log,4439,interpreter/llvm-project/llvm/docs/HowToAddABuilder.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToAddABuilder.rst,1,['log'],['log']
Testability,"e are never expanded.; For example, this can be used in tests with multiple RUN lines,; which reference the test file's line numbers. **LLVM-specific substitutions:**. ``%shlibext``; The suffix for the host platforms shared library files. This includes the; period as the first character. Example: ``.so`` (Linux), ``.dylib`` (macOS), ``.dll`` (Windows). ``%exeext``; The suffix for the host platforms executable files. This includes the; period as the first character. Example: ``.exe`` (Windows), empty on Linux. **Clang-specific substitutions:**. ``%clang``; Invokes the Clang driver. ``%clang_cpp``; Invokes the Clang driver for C++. ``%clang_cl``; Invokes the CL-compatible Clang driver. ``%clangxx``; Invokes the G++-compatible Clang driver. ``%clang_cc1``; Invokes the Clang frontend. ``%itanium_abi_triple``, ``%ms_abi_triple``; These substitutions can be used to get the current target triple adjusted to; the desired ABI. For example, if the test suite is running with the; ``i686-pc-win32`` target, ``%itanium_abi_triple`` will expand to; ``i686-pc-mingw32``. This allows a test to run with a specific ABI without; constraining it to a specific triple. **FileCheck-specific substitutions:**. ``%ProtectFileCheckOutput``; This should precede a ``FileCheck`` call if and only if the call's textual; output affects test results. It's usually easy to tell: just look for; redirection or piping of the ``FileCheck`` call's stdout or stderr. .. _Test-specific substitutions:. **Test-specific substitutions:**. Additional substitutions can be defined as follows:. - Lit configuration files (e.g., ``lit.cfg`` or ``lit.local.cfg``) can define; substitutions for all tests in a test directory. They do so by extending the; substitution list, ``config.substitutions``. Each item in the list is a tuple; consisting of a pattern and its replacement, which lit applies using python's; ``re.sub`` function.; - To define substitutions within a single test file, lit supports the; ``DEFINE:`` and ``REDEFIN",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:28018,test,test,28018,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"e assignment operators for self assignment. .. _cplusplus-StringChecker:. cplusplus.StringChecker (C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Checks std::string operations. Checks if the cstring pointer from which the ``std::string`` object is; constructed is ``NULL`` or not.; If the checker cannot reason about the nullness of the pointer it will assume; that it was non-null to satisfy the precondition of the constructor. This checker is capable of checking the `SEI CERT C++ coding rule STR51-CPP.; Do not attempt to create a std::string from a null pointer; <https://wiki.sei.cmu.edu/confluence/x/E3s-BQ>`__. .. code-block:: cpp. #include <string>. void f(const char *p) {; if (!p) {; std::string msg(p); // warn: The parameter must not be null; }; }. .. _deadcode-checkers:. deadcode; ^^^^^^^^. Dead Code Checkers. .. _deadcode-DeadStores:. deadcode.DeadStores (C); """"""""""""""""""""""""""""""""""""""""""""""; Check for values stored to variables that are never read afterwards. .. code-block:: c. void test() {; int x;; x = 1; // warn; }. The ``WarnForDeadNestedAssignments`` option enables the checker to emit; warnings for nested dead assignments. You can disable with the; ``-analyzer-config deadcode.DeadStores:WarnForDeadNestedAssignments=false``.; *Defaults to true*. Would warn for this e.g.:; if ((y = make_int())) {; }. .. _nullability-checkers:. nullability; ^^^^^^^^^^^. Objective C checkers that warn for null pointer passing and dereferencing errors. .. _nullability-NullPassedToNonnull:. nullability.NullPassedToNonnull (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warns when a null pointer is passed to a pointer which has a _Nonnull type. .. code-block:: objc. if (name != nil); return;; // Warning: nil passed to a callee that requires a non-null 1st parameter; NSString *greeting = [@""Hello "" stringByAppendingString:name];. .. _nullability-NullReturnedFromNonnull:. nullability.NullReturnedFromNonnull (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warns when a null pointer is returned fro",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:10368,test,test,10368,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"e below describes; `ntrack` to be written as a 16-bit integer (rather than a 32-bit; integer). ``` {.cpp}; ""ntrack/I2""; ```. With this Branch method, you can also add a leaf that holds an entire; array of variables. To add an array of floats use the `f[n]` notation; when describing the leaf. ``` {.cpp}; Float_t f[10];; tree->Branch(""fBranch"",f,""f[10]/F"");; ```. You can also add an array of variable length:. ``` {.cpp}; {; TFile *f = new TFile(""peter.root"",""recreate"");; Int_t nPhot;; Float_t E[500];; TTree* nEmcPhotons = new TTree(""nEmcPhotons"",""EMC Photons"");; nEmcPhotons->Branch(""nPhot"",&nPhot,""nPhot/I"");; nEmcPhotons->Branch(""E"",E,""E[nPhot]/F"");; }; ```. See ""Example 2: A Tree with a C Structure"" below; (`$ROOTSYS/tutorials/tree/tree2.C`) and `staff.C` at the beginning of; this chapter. ## Adding a TBranch to Hold an Object. To write a branch to hold an event object, we need to load the; definition of the `Event` class, which is in `$ROOTSYS/test/libEvent.so`; (if it doesn't exist type make in `$ROOTSYS/test`). An object can be; saved in a tree if a ROOT dictionary for its class has been generated; and loaded. ``` {.cpp}; root[] .L libEvent.so; ```. First, we need to open a file and create a tree. ``` {.cpp}; root[] TFile *f = new TFile(""AFile.root"",""RECREATE""); root[] TTree *tree = new TTree(""T"",""A Root Tree""); ```. We need to create a pointer to an `Event` object that will be used as a; reference in the `TTree::Branch` method. Then we create a branch; with the `TTree::Branch` method. ``` {.cpp}; root[] Event *event = new Event(); root[] tree->Branch(""EventBranch"",""Event"",&event,32000,99); ```. To add a branch to hold an object we use the signature above. The first; parameter is the name of the branch. The second parameter is the name of; the class of the object to be stored. The third parameter is the address; of a pointer to the object to be stored. Note that it is an address of a pointer to the object, not just a; pointer to the object. The fourth parameter is",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md:23305,test,test,23305,documentation/users-guide/Trees.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md,1,['test'],['test']
Testability,"e best values; given the information in the Tree header. TFile f(""myfile.root"");; TTree *T = (TTree*)f.Get(""mytreename"");; T->Print(); //show the branch buffer sizes before optimization; T->OptimizeBaskets(10000000,1,""d"");; T->Print(); //show the branch buffer sizes after optimization. New interface functions to customize the TreeCache; virtual void AddBranchToCache(const char *bname, Bool_t subbranches = kFALSE);; virtual void AddBranchToCache(TBranch *branch, Bool_t subbranches = kFALSE);; virtual void PrintCacheStats(Option_t* option = """") const;; virtual void SetParallelUnzip(Bool_t opt=kTRUE);; virtual void SetCacheEntryRange(Long64_t first, Long64_t last);; virtual void SetCacheLearnEntries(Int_t n=10);; virtual void StopCacheLearningPhase();; New functionality AutoFlush (and changes to AutoSave). Implement a new member fAutoFlush in TTree with its getter and setter:. void TTree::SetAutoFlush(Long64_t autof). The logic of the AutoFlush mechanism is optimized such that the TreeCache; will read always up to the point where FlushBaskets has been called.; This minimizes the number of cases where one has to seek backward when reading. This function may be called at the start of a program to change; the default value for fAutoFlush. CASE 1 : autof > 0. autof is the number of consecutive entries after which TTree::Fill will; flush all branch buffers to disk. CASE 2 : autof < 0. When filling the Tree the branch buffers will be flushed to disk when; more than autof bytes have been written to the file. At the first FlushBaskets; TTree::Fill will replace fAutoFlush by the current value of fEntries. Calling this function with autof < 0 is interesting when it is hard to estimate; the size of one entry. This value is also independent of the Tree. When calling SetAutoFlush with no arguments, the; default value is -30000000, ie that the first AutoFlush will be done when; 30 MBytes of data are written to the file. CASE 3 : autof = 0; The AutoFlush mechanism is disabled. Flushi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/doc/v526/index.html:5948,log,logic,5948,tree/doc/v526/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/doc/v526/index.html,1,['log'],['logic']
Testability,"e bodies go out of scope; when the bodies are finished (see `Defvar in a Record Body`_ for more details). The ``if`` statement can also be used in a record :token:`Body`. ``assert`` --- check that a condition is true; ---------------------------------------------. The ``assert`` statement checks a boolean condition to be sure that it is true; and prints an error message if it is not. .. productionlist::; Assert: ""assert"" `condition` "","" `message` "";"". If the boolean condition is true, the statement does nothing. If the; condition is false, it prints a nonfatal error message. The **message**, which; can be an arbitrary string expression, is included in the error message as a; note. The exact behavior of the ``assert`` statement depends on its; placement. * At top level, the assertion is checked immediately. * In a record definition, the statement is saved and all assertions are; checked after the record is completely built. * In a class definition, the assertions are saved and inherited by all; the subclasses and records that inherit from the class. The assertions are; then checked when the records are completely built. * In a multiclass definition, the assertions are saved with the other; components of the multiclass and then checked each time the multiclass; is instantiated with ``defm``. Using assertions in TableGen files can simplify record checking in TableGen; backends. Here is an example of an ``assert`` in two class definitions. .. code-block:: text. class PersonName<string name> {; assert !le(!size(name), 32), ""person name is too long: "" # name;; string Name = name;; }. class Person<string name, int age> : PersonName<name> {; assert !and(!ge(age, 1), !le(age, 120)), ""person age is invalid: "" # age;; int Age = age;; }. def Rec20 : Person<""Donald Knuth"", 60> {; ...; }. Additional Details; ==================. Directed acyclic graphs (DAGs); ------------------------------. A directed acyclic graph can be represented directly in TableGen using the; ``dag`` dataty",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:49637,assert,assertions,49637,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,1,['assert'],['assertions']
Testability,"e bzero function. void test() {; bzero(ptr, n); // warn; }. security.insecureAPI.getpw; (C); Warn on uses of the getpw function. void test() {; char buff[1024];; getpw(2, buff); // warn; }. security.insecureAPI.gets; (C); Warn on uses of the gets function. void test() {; char buff[1024];; gets(buff); // warn; }. security.insecureAPI.mkstemp; (C); Warn when mktemp, mkstemp, mkstemps or; mkdtemp is passed fewer than 6; X's in the format string. void test() {; mkstemp(""XX""); // warn; }. security.insecureAPI.mktemp; (C); Warn on uses of the mktemp function. void test() {; char *x = mktemp(""/tmp/zxcv""); // warn: insecure, use mkstemp; }. security.insecureAPI.rand; (C); Warn on uses of inferior random number generating functions (only if arc4random; function is available):; drand48; erand48; jrand48; lcong48; lrand48; mrand48; nrand48; random; rand_r. void test() {; random(); // warn; }. security.insecureAPI.strcpy; (C); Warn on uses of the strcpy and strcat functions. void test() {; char x[4];; char *y = ""abcd"";. strcpy(x, y); // warn; }. security.insecureAPI.vfork; (C); Warn on uses of the vfork function. void test() {; vfork(); // warn; }. security.insecureAPI.decodeValueOfObjCType; (ObjC); Warn on uses of the -[NSCoder decodeValueOfObjCType:at:] method.; The safe alternative is -[NSCoder decodeValueOfObjCType:at:size:]. void test(NSCoder *decoder) {; // This would be a vulnerability on 64-bit platforms; // but not on 32-bit platforms.; NSUInteger x;; [decoder decodeValueOfObjCType:""I"" at:&x]; // warn; }. Unix Checkers. Name, DescriptionExample. unix.API; (C); Check calls to various UNIX/POSIX functions:; open; pthread_once; calloc; malloc; realloc; alloca. // Currently the check is performed for apple targets only.; void test(const char *path) {; int fd = open(path, O_CREAT);; // warn: call to 'open' requires a third argument when the; // 'O_CREAT' flag is set; }. void f();. void test() {; pthread_once_t pred = {0x30B1BCBA, {0}};; pthread_once(&pred, f);; // warn: cal",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:22699,test,test,22699,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"e can process a whole module, and merge all; equal functions. In this case, we have to compare every function with every another function. As; the reader may notice, this way seems to be quite expensive. Of course we could; introduce hashing and other helpers, but it is still just an optimization, and; thus the level of O(N*N) complexity. Can we reach another level? Could we introduce logarithmical search, or random; access lookup? The answer is: ""yes"". Random-access; """"""""""""""""""""""""""; How it could this be done? Just convert each function to a number, and gather; all of them in a special hash-table. Functions with equal hashes are equal.; Good hashing means, that every function part must be taken into account. That; means we have to convert every function part into some number, and then add it; into the hash. The lookup-up time would be small, but such an approach adds some; delay due to the hashing routine. Logarithmical search; """"""""""""""""""""""""""""""""""""""""; We could introduce total ordering among the functions set, once ordered we; could then implement a logarithmical search. Lookup time still depends on N,; but adds a little of delay (*log(N)*). Present state; """"""""""""""""""""""""""; Both of the approaches (random-access and logarithmical) have been implemented; and tested and both give a very good improvement. What was most; surprising is that logarithmical search was faster; sometimes by up to 15%. The; hashing method needs some extra CPU time, which is the main reason why it works; slower; in most cases, total ""hashing"" time is greater than total; ""logarithmical-search"" time. So, preference has been granted to the ""logarithmical search"". Though in the case of need, *logarithmical-search* (read ""total-ordering"") could; be used as a milestone on our way to the *random-access* implementation. Every comparison is based either on the numbers or on the flags comparison. In; the *random-access* approach, we could use the same comparison algorithm.; During comparison, we exit once we find",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MergeFunctions.rst:6239,log,logarithmical,6239,interpreter/llvm-project/llvm/docs/MergeFunctions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MergeFunctions.rst,1,['log'],['logarithmical']
Testability,"e cases. Cumulative distributions functions that are calculated numerically are handled slightly differently; that standard running integrals: their values is constructed to converge to exactly zero at the lower bound; and exactly 1 at the upper bound so that algorithms that make use of that property of c.d.f can do so reliably. Constraints management. New tools have been added to simplify studies with fits involving (external) constraints on parameters.; The general philosophy is that constraints on parameters can be represented as probability density functions; and can thus be modeled by RooAbsPdf classes (e.g. a RooGaussian for a simple Gaussian constraint on a parameter).; There are two modes of operation: you can add parameter constraints to your problem definition by multiplying; the constraint p.d.f.s with your 'master' p.d.f. or you specify them externally in each operation. The; first mode of operation keeps all information in your master p.d.f and may make the logistics of non-trivial; fitting problems easier. It works as follows: first you define your regular p.d.f, then you define your; constraint p.d.f and you multiply them with RooProdPdf. // Construct constraint; RooGaussian fconstraint(""fconstraint"",""fconstraint"",f,RooConst(0.8),RooConst(0.1)) ;. // Multiply constraint with p.d.f; RooProdPdf pdfc(""pdfc"",""p.d.f with constraint"",RooArgSet(p.d.f,fconstraint)) ;. If your top level p.d.f is already a RooProdPdf it also fine to multiply all terms together in one go.; Constraints do not need to be specified a the top-level RooProdPdf, constraint p.d.f.s in any component; RooProdPdf lower in the expression tree are used as well. Constraints are not used by default in fitting; if present in a p.d.f. To activate the use of a constraint in fitting, use the Constrain() argument in fitTo(). // Fit with internal constraint; RooFitResult* r2 = pdfc.fitTo(*d,Constrain(f)) ;; ; This will instruct RooAbsPdf::fitTo() to included any constraint p.d.f on parameter f in th",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v520/index.html:7233,log,logistics,7233,roofit/doc/v520/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v520/index.html,1,['log'],['logistics']
Testability,"e categories are mappings from state names; to state index, this is now reflected in the interface. Among others, this is now possible:; | ROOT 6.22 | Before (still supported) |; |------------------------------------------------|----------------------------------------------------------------|; | `RooCategory cat(""cat"", ""Lepton flavour"");` | `RooCategory cat(""cat"", ""Lepton flavour"");` |; | `cat[""electron""] = 1;` | `cat.defineType(""electron"", 1);` |; | `cat[""muon""] = 2;` | `cat.defineType(""muon"", 2);` |. See also [Category reference guide](https://root.cern.ch/doc/master/classRooCategory.html). ### Type-safe proxies for RooFit objects; RooFit's proxy classes have been modernised. The class `RooTemplateProxy` allows for access to other RooFit objects; similarly to a smart pointer. In older versions of RooFit, the objects held by *e.g.* `RooRealProxy` had to be; accessed like this:; RooAbsArg* absArg = realProxy.absArg();; RooAbsPdf* pdf = dynamic_cast<RooAbsPdf*>(absArg);; assert(pdf); // This *should* work, but the proxy doesn't have a way to check; pdf->fitTo(...);; That is, a `RooRealProxy` stores a pointer to a RooAbsArg, and this pointer has to be cast. There was no type; safety, *i.e.*, any object deriving from RooAbsArg could be stored in that proxy, and the user had to take care; of ensuring that types are correct.; Now, if one uses; RooTemplateProxy<RooAbsPdf> pdfProxy;; instead of; RooRealProxy realProxy;; in RooFit classes, the above code can be simplified to; pdfProxy->fitTo(...);. Check the [doxygen reference guide](https://root.cern.ch/doc/master/classRooTemplateProxy.html) for `RooTemplateProxy` for; more information on how to modernise old code. ### HistFactory. #### Switch default statistical MC errors to Poisson; When defining HistFactory samples with statistical errors from C++, e.g.; Sample background1( ""background1"", ""background1"", InputFile );; background1.ActivateStatError();; statistical MC errors now have Poisson instead of Gaussian constraint",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v622/index.md:4454,assert,assert,4454,README/ReleaseNotes/v622/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v622/index.md,1,['assert'],['assert']
Testability,"e client:. ```{.cpp}. // get connection id for the first connection in the list. if (win->NumConnections() > 0) {; unsigned connid = win->GetConnectionId();; std::string msg = ""Hello, world"";; win->Send(msg, connid);; }. ```. ## Display window. To display window in the browser, one should call `win->Show()` method.; This will starts new window (or new tab) in the default browser and show content of HTML page,; configured for the window. As argument of `Show()` method one can specify browser kind like; ""chromium"" or ""firefox"" or just full path to the program which should be invoked.; With the method `win->GetUrl()` one obtains URL string, which can be typed in the browser address string directly. Same window can be displayed several times in different browsers or different browser tabs - one only; must allow appropriate number of connections calling `win->SetConnLimit(3)`. For the local displays **Chromium Embeded Framework (CEF)** is used. It provides functionality; of Chrome web browser in ROOT application without need to create and start real http server.; If CEF was configured correctly, it is enough to call `win->Show(""cef"")` to display window in CEF. ## Client code. There is no limitations which framework should be used on the client side.; The minimal HTML/JavaScript code, which establish connection with the server, looks like:. ``` {.html}; <!DOCTYPE HTML>; <html>; <head>; <meta charset=""utf-8"">; <title>RWebWindow Example</title>; </head>; <body>; <div id=""main""></div>; <script type=""module"">; import { connectWebWindow } from './jsrootsys/modules/webwindow.mjs';; connectWebWindow({; receiver: {; onWebsocketOpened(handle) {; console.log('Connected');; handle.send('Init msg from client');; },; onWebsocketMsg(handle, msg) {; console.log('Get message ' + msg);; document.getElementById('main').innerHTML = msg;; },; onWebsocketClosed(handle) {; // when connection closed, close panel as well; if (window) window.close();; }; }; });; </script>; </body>; </html>. ```; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/WebDisplay.md:3124,log,log,3124,documentation/users-guide/WebDisplay.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/WebDisplay.md,2,['log'],['log']
Testability,"e debug; information produced by different toolchain versions or even completely; different toolchains altogether (For example a compiler producing DWARF; can be directly compared against a completely different compiler that; produces CodeView). Given the previous example we found the above debug information issue; (related to the previous invalid scope location for the **'typedef int; INTEGER'**) by comparing against another compiler. Using GCC to generate test-dwarf-gcc.o, we can apply a selection pattern; with the printing mode to obtain the following logical view output. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level; --select-regex --select-nocase --select=INTe; --report=list; --print=symbols,types; test-dwarf-clang.o test-dwarf-gcc.o. Logical View:; [000] {File} 'test-dwarf-clang.o'. [001] {CompileUnit} 'test.cpp'; [003] 4 {TypeAlias} 'INTEGER' -> 'int'; [004] 5 {Variable} 'CONSTANT' -> 'const INTEGER'. Logical View:; [000] {File} 'test-dwarf-gcc.o'. [001] {CompileUnit} 'test.cpp'; [004] 4 {TypeAlias} 'INTEGER' -> 'int'; [004] 5 {Variable} 'CONSTANT' -> 'const INTEGER'. The output shows that both objects contain the same elements. But the; **'typedef INTEGER'** is located at different scope level. The GCC; generated object, shows **'4'**, which is the correct value. Note that there is no requirement that GCC must produce identical or; similar DWARF to Clang to allow the comparison. We're only comparing; the semantics. The same case when comparing CodeView debug information; generated by MSVC and Clang. There are 2 comparison methods: logical view and logical elements. LOGICAL VIEW; """"""""""""""""""""""""; It compares the logical view as a whole unit; for a match, each compared; logical element must have the same parents and children. Using the :program:`llvm-debuginfo-analyzer` comparison functionality,; that issue can be seen in a more global context, that can include the; logical view. The output shows in view form the **missing (-), added (+)** elemen",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:29181,test,test,29181,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['test'],['test']
Testability,"e demo; (Slides; ,Video); by Anna Zaks and Jordan Rose presented at the ; 2012 LLVM Developers' Meeting). void test() {; FILE *F = fopen(""myfile.txt"", ""w"");; } // warn: opened file is never closed. void test() {; FILE *F = fopen(""myfile.txt"", ""w"");. if (F); fclose(F);. fclose(F); // warn: closing a previously closed file stream; }. alpha.unix.Stream; (C); Check stream handling functions:fopen; tmpfile; fclose; fread; fwrite; fseek; ftell; rewind; fgetpos; fsetpos; clearerr; feof; ferror; fileno. void test() {; FILE *p = fopen(""foo"", ""r"");; } // warn: opened file is never closed. void test() {; FILE *p = fopen(""foo"", ""r"");; fseek(p, 1, SEEK_SET); // warn: stream pointer might be NULL; fclose(p);; }. void test() {; FILE *p = fopen(""foo"", ""r"");. if (p); fseek(p, 1, 3);; // warn: third arg should be SEEK_SET, SEEK_END, or SEEK_CUR. fclose(p);; }. void test() {; FILE *p = fopen(""foo"", ""r"");; fclose(p);; fclose(p); // warn: already closed; }. void test() {; FILE *p = tmpfile();; ftell(p); // warn: stream pointer might be NULL; fclose(p);; }. alpha.unix.cstring.BufferOverlap; (C); Checks for overlap in two buffer arguments; applies to:; memcpy; mempcpy. void test() {; int a[4] = {0};; memcpy(a + 2, a + 1, 8); // warn; }. alpha.unix.cstring.NotNullTerminated; (C); Check for arguments which are not null-terminated strings; applies; to:; strlen; strnlen; strcpy; strncpy; strcat; strncat. void test() {; int y = strlen((char *)&test); // warn; }. alpha.unix.cstring.OutOfBounds; (C); Check for out-of-bounds access in string functions; applies; to:; strncopy; strncat. void test(char *y) {; char x[4];; if (strlen(y) == 4); strncpy(x, y, 5); // warn; }. Non-determinism Alpha Checkers. Name, DescriptionExample. alpha.nondeterminism.PointerIteration; (C++); Check for non-determinism caused by iterating unordered containers of pointers. // C++; void test() {; int a = 1, b = 2;; std::unordered_set UnorderedPtrSet = {&a, &b};. for (auto i : UnorderedPtrSet) // warn; f(i);; }. alpha.nonde",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html:14934,test,test,14934,interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,1,['test'],['test']
Testability,"e directly. * The default target (i.e. ``cmake --build build`` or ``make -C build``); will build all of LLVM. * The ``check-all`` target (i.e. ``ninja check-all``) will run the; regression tests to ensure everything is in working order. * CMake will generate build targets for each tool and library, and most; LLVM sub-projects generate their own ``check-<project>`` target. * Running a serial build will be **slow**. To improve speed, try running a; parallel build. That's done by default in Ninja; for ``make``, use the; option ``-j NN``, where ``NN`` is the number of parallel jobs, e.g. the; number of available CPUs. * A basic CMake and build/test invocation which only builds LLVM and no other; subprojects:. ``cmake -S llvm -B build -G Ninja -DCMAKE_BUILD_TYPE=Debug``. ``ninja -C build check-llvm``. This will setup an LLVM build with debugging info, then compile LLVM and; run LLVM tests. * For more detailed information on CMake options, see `CMake <CMake.html>`__. * If you get build or test failures, see `below`_. Consult the `Getting Started with LLVM`_ section for detailed information on; configuring and compiling LLVM. Go to `Directory Layout`_ to learn about the; layout of the source code tree. Stand-alone Builds; ------------------. Stand-alone builds allow you to build a sub-project against a pre-built; version of the clang or llvm libraries that is already present on your; system. You can use the source code from a standard checkout of the llvm-project; (as described above) to do stand-alone builds, but you may also build; from a :ref:`sparse checkout<workflow-multicheckout-nocommit>` or from the; tarballs available on the `releases <https://github.com/llvm/llvm-project/releases/>`_; page. For stand-alone builds, you must have an llvm install that is configured; properly to be consumable by stand-alone builds of the other projects.; This could be a distro provided LLVM install, or you can build it yourself,; like this:. .. code-block:: console. cmake -G Ninja -S ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst:4909,test,test,4909,interpreter/llvm-project/llvm/docs/GettingStarted.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst,1,['test'],['test']
Testability,"e end-point URL for local; files; Improve realtime notification during 'verify'. TProofDraw. Fix a problem with the axis ranges of the underlying; histogram in PolyMarker3D; Allow to use the default pad instead of forcing; creation of one pad per object; Add wrapper to handle the feedback default canvas. TEventIter. Fix a problem with changing the tree cache size: the; size was reset to the default value after the first file. TDataSetManagerFile. Solve a consistency problem in checking URLs for; duplication when adding them to the relevant TFileInfo; During dataset validation, do not fail on duplications; but notify and add them to the bad file list. TPacketizerAdaptive, TPacketizer. Improve data node / worker matching by always using the; host FQDN. TPacketizerUnit, TEventIter. Make sure that the entry; number passed to TSelector::Process is unique and in increasing order; for non-data driven processing (packetizer TPacketizerUnit). This; allows to give a meaning to this variable, for example to related it to; one dimension of an integration. Fixes in PROOF-Lite:. Make sure that with envs settings via TProof::AddEnvVar; are effective; this enables, for example, the automatic valgrind setup; introduced in 5.24/00 or the experiment specific settings via the; script defined by the env PROOF_INIT; Fix a problem with TProof::Load so that now it can be; also be used for PROOF-Lite. TProofPlayerRemote. In SendSelector, add misisng; option kCpBin when sending the selector source; the binary files were;  never retrieved, even if present and valid. TProofPlayerSlave. In; Process, fix a problem with cache directory locking while building; the selector;  the net effect was that each worker process was; re-buidling its own selector binary. . TProofServ; Fix; the order in which the log file is sent in asynchronous processing; the; wrong order was screwing up an immediate synchronous query submission; after an asynchronous run; this case occured, for example, in; 'stressProof' . ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:9847,log,log,9847,proof/doc/v526/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html,1,['log'],['log']
Testability,"e entire; directory to your area. The script `hsimple.C` displays a histogram as; it is being filled, and creates a ROOT file used by the other examples. To execute it type:. ``` {.cpp}; $ cd $ROOTSYS/tutorials; $ root; -------------------------------------------------------------------------; | Welcome to ROOT 6.10/01 http://root.cern.ch |; | (c) 1995-2017, The ROOT Team |; | Built for macosx64 |; | From heads/v6-10-00-patches@v6-10-00-25-g9f78c3a, Jul 03 2017, 11:39:44 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; -------------------------------------------------------------------------. root [0] .x hsimple.C; ```. Now execute `demos.C`, which brings up the button bar shown on the left.; You can click on any button to execute another example. To see the; source, open the corresponding source file (for example `fit1.C`). Once; you are done, and want to quit the ROOT session, you can do so by typing; **`.q`**. ``` {.cpp}; root[] .x demos.C; root[] .q; ```. ## \$ROOTSYS/test. The test directory contains a set of examples that represent all areas; of the framework. When a new release is cut, the examples in this; directory are compiled and run to test the new release's backward; compatibility. We see these source files:. +-------------------+--------------------------------------------------------+; | `Makefile` | Makefile to build all test programs. |; +-------------------+--------------------------------------------------------+; | `hsimple.cxx` | Simple test program that creates and saves some |; | | histograms |; +-------------------+--------------------------------------------------------+; | `MainEvent.cxx` | Simple test program that creates a ROOT Tree object |; | | and fills it with some simple structures but also with |; | | complete histograms. This program uses the files |; | | `Event.cxx`, `EventCint.cxx` and `Event.h`. An example |; | | of a procedure to link this program is in |; | | `bind_Event`. Note that the `Makefile` invokes the ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/TutorialsandTests.md:1495,test,test,1495,documentation/users-guide/TutorialsandTests.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/TutorialsandTests.md,1,['test'],['test']
Testability,"e even; the requirements of languages with very complex plural forms, as many Baltic; languages have. The argument consists of a series of expression/form pairs,; separated by "":"", where the first form whose expression evaluates to true is; the result of the modifier. An expression can be empty, in which case it is always true. See the example; at the top. Otherwise, it is a series of one or more numeric conditions,; separated by "","". If any condition matches, the expression matches. Each; numeric condition can take one of three forms. * number: A simple decimal number matches if the argument is the same as the; number. Example: ``""%plural{1:mouse|:mice}0""``; * range: A range in square brackets matches if the argument is within the; range. Then range is inclusive on both ends. Example:; ``""%plural{0:none|1:one|[2,5]:some|:many}0""``; * modulo: A modulo operator is followed by a number, and equals sign and; either a number or a range. The tests are the same as for plain numbers; and ranges, but the argument is taken modulo the number first. Example:; ``""%plural{%100=0:even hundred|%100=[1,50]:lower half|:everything else}1""``. The parser is very unforgiving. A syntax error, even whitespace, will abort,; as will a failure to match the argument against any expression. **""ordinal"" format**. Example:; ``""ambiguity in %ordinal0 argument""``; Class:; Integers; Description:; This is a formatter which represents the argument number as an ordinal: the; value ``1`` becomes ``1st``, ``3`` becomes ``3rd``, and so on. Values less; than ``1`` are not supported. This formatter is currently hard-coded to use; English ordinals. **""objcclass"" format**. Example:; ``""method %objcclass0 not found""``; Class:; ``DeclarationName``; Description:; This is a simple formatter that indicates the ``DeclarationName`` corresponds; to an Objective-C class method selector. As such, it prints the selector; with a leading ""``+``"". **""objcinstance"" format**. Example:; ``""method %objcinstance0 not found""``;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:13024,test,tests,13024,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,1,['test'],['tests']
Testability,"e export.sh script in utils/release. Tarballs, release binaries, or any other release artifacts must be uploaded to; GitHub. This can be done using the github-upload-release.py script in utils/release. ::. $ github-upload-release.py upload --token <github-token> --release X.Y.Z-rcN --files <release_files>. ::. $ ./export.sh -release X.Y.Z -rc $RC. This will generate source tarballs for each LLVM project being validated, which; can be uploaded to github for further testing. Build The Binary Distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Creating the binary distribution requires following the instructions; :doc:`here <ReleaseProcess>`. That process will perform both Release+Asserts and Release builds but only; pack the Release build for upload. You should use the Release+Asserts sysroot,; normally under ``final/Phase3/Release+Asserts/llvmCore-3.8.1-RCn.install/``,; for test-suite and run-time benchmarks, to make sure nothing serious has; passed through the net. For compile-time benchmarks, use the Release version. The minimum required version of the tools you'll need are :doc:`here <GettingStarted>`. Release Qualification Criteria; ------------------------------. There are no official release qualification criteria. It is up to the; the release manager to determine when a release is ready. The release manager; should pay attention to the results of community testing, the number of outstanding; bugs, and then number of regressions when determining whether or not to make a; release. The community values time based releases, so releases should not be delayed for; too long unless there are critical issues remaining. In most cases, the only; kind of bugs that are critical enough to block a release would be a major regression; from a previous release. Official Testing; ----------------. A few developers in the community have dedicated time to validate the release; candidates and volunteered to be the official release testers for each; architecture. These will be the ones te",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst:5995,benchmark,benchmarks,5995,interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,1,['benchmark'],['benchmarks']
Testability,"e files can include it simply with; **#include ""jazz/note.h""**. **tools**. This subdirectory should contain all of your source code for executables.; For each program that you build, you will have one directory in **tools**; that will contain that program's source code. **test**. This subdirectory should contain tests that verify that your code works; correctly. Automated tests are especially useful. Currently, the LLVM build system provides basic support for tests. The LLVM; system provides the following:. * LLVM contains regression tests in ``llvm/test``. These tests are run by the; :doc:`Lit <CommandGuide/lit>` testing tool. This test procedure uses ``RUN``; lines in the actual test case to determine how to run the test. See the; :doc:`TestingGuide` for more details. * LLVM contains an optional package called ``llvm-test``, which provides; benchmarks and programs that are known to compile with the Clang front; end. You can use these programs to test your code, gather statistical; information, and compare it to the current LLVM performance statistics. Currently, there is no way to hook your tests directly into the ``llvm/test``; testing harness. You will simply need to find a way to use the source; provided within that directory on your own. Typically, you will want to build your **lib** directory first followed by your; **tools** directory. Writing LLVM Style Makefiles; ============================. The LLVM build system provides a convenient way to build libraries and; executables. Most of your project Makefiles will only need to define a few; variables. Below is a list of the variables one can set and what they can; do:. Required Variables; ------------------. ``LEVEL``. This variable is the relative path from this ``Makefile`` to the top; directory of your project's source code. For example, if your source code; is in ``/tmp/src``, then the ``Makefile`` in ``/tmp/src/jump/high``; would set ``LEVEL`` to ``""../..""``. Variables for Building Subdirectories; ------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Projects.rst:3689,test,test,3689,interpreter/llvm-project/llvm/docs/Projects.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Projects.rst,1,['test'],['test']
Testability,"e first-order; recurrence; an interleave group of strided gathers or scatters may effectively; move to one place where they are replaced with shuffles and a common wide vector; load or store; new instructions may be introduced to compute masks, shuffle the; elements of vectors, and pack scalar values into vectors or vice-versa. In order for VPlan to support making instruction-level decisions and analyses,; it needs to model the relevant instructions along with their def/use relations.; This too follows a staged approach: first, the new instructions that compute; masks are modeled as VPInstructions, along with their induced def/use subgraph.; This effectively models masks in VPlan, facilitating VPlan-based predication.; Next, the logic embedded within each Recipe for generating its instructions at; VPlan execution time, will instead take part in the planning process by modeling; them as VPInstructions. Finally, only logic that applies to instructions as a; group will remain in Recipes, such as interleave groups and potentially other; idiom groups having synergistic cost. Related LLVM components; -----------------------; 1. SLP Vectorizer: one can compare the VPlan model with LLVM's existing SLP; tree, where TSLP [3]_ adds Plan Step 2.b. 2. RegionInfo: one can compare VPlan's H-CFG with the Region Analysis as used by; Polly [7]_. 3. Loop Vectorizer: the Vectorization Plan aims to upgrade the infrastructure of; the Loop Vectorizer and extend it to handle outer loops [8]_, [9]_. References; ----------; .. [1] ""Outer-loop vectorization: revisited for short SIMD architectures"", Dorit; Nuzman and Ayal Zaks, PACT 2008. .. [2] ""Proposal for function vectorization and loop vectorization with function; calls"", Xinmin Tian, [`cfe-dev; <http://lists.llvm.org/pipermail/cfe-dev/2016-March/047732.html>`_].,; March 2, 2016.; See also `review <https://reviews.llvm.org/D22792>`_. .. [3] ""Throttling Automatic Vectorization: When Less is More"", Vasileios; Porpodas and Tim Jones, PACT 20",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/VectorizationPlan.rst:10066,log,logic,10066,interpreter/llvm-project/llvm/docs/VectorizationPlan.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/VectorizationPlan.rst,1,['log'],['logic']
Testability,"e for X,Y,Z axes; - gridx - enable grid for X axis; - gridy - enable grid for X axis; - grid - enable grid for X and Y axes; - tickx - enable ticks for X axis; - ticky - enable ticks for X axis; - tick - enable ticks for X and Y axes; - rx - reverse X axis; - ry - reverse Y axis; - rotate - rotate frame; - fixframe - disable interactive moving of the frame; - nozoomx - disable zooming on X axis; - nozoomy - disable zooming on Y axis; - cpXY - create palette XY for the canvas like cp50; - nopalette - ignore palette stored with TCanvas; - nocolors - ignore colors list stored with TCanvas; - lcolors - use only locally colors list stored with TCanvas; - nomargins - clear frame margins. ## Superimposing draw objects. In the URL string one could use ""+"" sign to specify objects superposition:. - [item=hpx+hprof](https://root.cern/js/latest/?file=../files/hsimple.root&item=hpx+hprof). With similar syntax one could specify individual draw options for superimposed objects. - [item=hpx+hprof&opt=logy+hist](https://root.cern/js/latest/?file=../files/hsimple.root&item=hpx+hprof&opt=logy+hist). Here ""logy"" option will be used for ""hpx1"" item and ""hist"" option for ""hprof;1"" item. While draw option can include ""+"" sign itself, for superposition one could specify arrays of items and draw options like:. - [item=[hpx;1,hprof;1]&opt=[logy,hist]](https://root.cern/js/latest/?file=../files/hsimple.root&item=[hpx;1,hprof;1]&opt=[logy,hist]). ## TTree draw. JSROOT provides possibility to display TTree data, using [TTree::Draw](https://root.cern/doc/master/classTTree.html) syntax:. - [opt=px](https://root.cern/js/latest/?file=../files/hsimple.root&item=ntuple;1&opt=px); - [opt=px:py](https://root.cern/js/latest/?file=../files/hsimple.root&item=ntuple;1&opt=px:py); - [opt=px:py:pz](https://root.cern/js/latest/?file=../files/hsimple.root&item=ntuple;1&opt=px:py:pz). It is also possible to use branch by id number specifying name like ""br_0"", ""br_1"" and so on:. - [opt=br_0:br_1](https://root.cer",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/JSROOT/JSROOT.md:14141,log,logy,14141,documentation/JSROOT/JSROOT.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/JSROOT/JSROOT.md,1,['log'],['logy']
Testability,"e for the output list to significantly speed up names lookups during merging.; - Add support for dynamic addition of workers to a currently running process (currently supported by the unit packetizer).; - Automatization of the usage of file-based technology to handle outputs.; - [Improved dataset management model](https://root.cern/doc/v628/classTDataSetManagerAliEn.html); where the PROOF (ROOT) dataset manager is a light frontend to the experiment file catalogs; TDataSetManagerFile is still; used as local cache of the experiment information or to store the work-in-progress status of the dataset manager daemon. This model addresses the scalability issues observed at ALICE AFs.; - Improvements in [TProofBench](https://root.cern.ch/doc/master/classTProofBench.html):; - Recording and display of the maximum rate during query, CPU efficiency calculation for PROOF-Lite runs, better measurement of wall time.; - Support for dynamic startup mode. - Test program xpdtest to test the status of xproofd (see also man page under $ROOTSYS/man/man1):. ``` {.sh}; $ xpdtest [options]; --help, -h; Gives a short list of options avaliable, and exit; -t <test>; type of test to be run:; 0 ping the daemon (includes process existence check if pid specified; see below); 1 ping the daemon and check connection for default user; 2 ping the daemon and check connection for the default user and all recent users; ...; ```; - Interface with **igprof** for fast statistic profiling. Like valgrind, it can be specified as option to TProof::Open and the output is available via the log viewer technology:. ``` {.cpp}; root[] p = TProof::Open(""master"", ""igprof-pp""); ```; - Miscellanea:; - Added functions [Getenv](http://root.cern.ch/root/htmldoc/TProof.html#TProof:Getenv) and [GetRC](http://root.cern.ch/root/htmldoc/TProof.html#TProof:GetRC); in TProof to retrieve environment information from the nodes, typically from the master.; - Add support unix secondary groups in group access control. This allows more f",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v600/index.md:1509,test,test,1509,proof/doc/v600/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v600/index.md,1,['test'],['test']
Testability,"e from 456.hmmer:. int f(int M, int *mc, int *mpp, int *tpmm, int *ip, int *tpim, int *dpp,; int *tpdm, int xmb, int *bp, int *ms) {; int k, sc;; for (k = 1; k <= M; k++) {; mc[k] = mpp[k-1] + tpmm[k-1];; if ((sc = ip[k-1] + tpim[k-1]) > mc[k]) mc[k] = sc;; if ((sc = dpp[k-1] + tpdm[k-1]) > mc[k]) mc[k] = sc;; if ((sc = xmb + bp[k]) > mc[k]) mc[k] = sc;; mc[k] += ms[k];; }; }. It is very profitable for this benchmark to turn the conditional stores to mc[k]; into a conditional move (select instr in IR) and allow the final store to do the; store. See GCC PR27313 for more details. Note that this is valid to xform even; with the new C++ memory model, since mc[k] is previously loaded and later; stored. //===---------------------------------------------------------------------===//. [SCALAR PRE]; There are many PRE testcases in testsuite/gcc.dg/tree-ssa/ssa-pre-*.c in the; GCC testsuite. //===---------------------------------------------------------------------===//. There are some interesting cases in testsuite/gcc.dg/tree-ssa/pred-comm* in the; GCC testsuite. For example, we get the first example in predcom-1.c, but ; miss the second one:. unsigned fib[1000];; unsigned avg[1000];. __attribute__ ((noinline)); void count_averages(int n) {; int i;; for (i = 1; i < n; i++); avg[i] = (((unsigned long) fib[i - 1] + fib[i] + fib[i + 1]) / 3) & 0xffff;; }. which compiles into two loads instead of one in the loop. predcom-2.c is the same as predcom-1.c. predcom-3.c is very similar but needs loads feeding each other instead of; store->load. //===---------------------------------------------------------------------===//. [ALIAS ANALYSIS]. Type based alias analysis:; http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14705. We should do better analysis of posix_memalign. At the least it should; no-capture its pointer argument, at best, we should know that the out-value; result doesn't point to anything (like malloc). One example of this is in; SingleSource/Benchmarks/Misc/dt.c. //===------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt:34905,test,testsuite,34905,interpreter/llvm-project/llvm/lib/Target/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt,1,['test'],['testsuite']
Testability,"e functions to the minimizers. Only Minuit2 (see below) has the capabilities of using this external Hessian. The `GradFunctor` class has been improved by providing a new constructor taking an `std::function` implementing the full gradient calculations instead of the single partial derivative. The specialized methods for least-square/likelihood functions such as Fumili, Fumili2 and GSLMultiFit have been improved in case of binned likelihood fits, where a better approximation is used than before. This makes these method work better (conerging with less number of function calls) for these types of fits. ### Minuit2. The support for using an External Hessian calculator has been added. The external Hessian can be used for both the initial seeding, using only the diagonal part, if the strategy is equal to 1 (the default value) and in `MnHesse`, after the minimization, to compute the covariance and correlation matrices. The print log of Minuit2 has been improved, especially when printing vector and matrices with large number of parameters (when the print level = 3). ### KahanSum updates. The `ROOT::Math::KahanSum` class was slightly modified:; - The behavior of `operator-=` and `operator+=` on a `KahanSum` were not symmetric, leading to slight bit-wise inaccuracies. In fits, where such operations are done a lot of times (e.g. through the offsetting mechanism in RooFit which subtracts a constant `KahanSum` term after each likelihood evaluation), this can add up to significant numerical divergence. An improved algorithm was implemented, based on an algorithm for combining Kahan sums and carry terms (Tian et al. 2012). (PR #11940); - The auto-conversion to type `T` and implicit type `T` constructor in `KahanSum` made it hard to debug `KahanSum`, because it is easy to overlook implicit conversions in code, especially in lines where the type of the return value is `auto`. These auto-conversions were removed. Where necessary, they should be replaced with an explicit construction ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v628/index.md:16597,log,log,16597,README/ReleaseNotes/v628/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v628/index.md,1,['log'],['log']
Testability,"e go in TProof::Process(const char; *dataset, ...).; Two options are provided:;  - 'grand; dataset':   the datasets are added up; and considered as a single dataset (syntax:; ""dataset1|dataset2|..."");  - 'keep; separated':; the datasets are processed one after the other; the user is notified in; the selector of the change of dataset so they have the opportunity to; separate the results. A new packetizer, TPacketizerMulti, has been; developed for this case: it basically contains a list of standard; packetizers (one for each dataset) and loops over them (syntax:; ""dataset1,dataset2,..."" or dataset1 dataset2 ..."").; In; both cases, entry-list can be applied using the syntax; ""dataset<<entrylist"", e.g.; ""dataset1<<el1|dataset2<<el2|"".; The datasets to be processed can also be specified on one or multiple lines in a text file.; Add; support for automatic download of a package when available on the; master but not locally. The downloaded packages are store under <sandbox>/packages/downloaded; and automatically checked for updates against the master repository. If; a local version of the same package is created (using the; UploadPackage) the entry in downloaded is; cleared, so that the behaviour is unchanged.; Add; the possibility to remap the server for the files in a dataset. This; allows, for example, to reuse the dataset information for the same; files stored in a different cluster.; Add a local cache for; TDataSetManagerFile. This is mainly used to improve the speed of; TDataSetManager::ShowDataSets, which is run very often by users and may; be very slow if the number of dataset is large. The cache is also used; to cache frequently received dataset objects.Add the possibility to audit the activity on the nodes via syslog. .; New packetizer TPacketizerFile generating packets which contain a single; file path to be used in processing single files. Used, for example, in; tasks generating files. The files are specified into a TMap - named; 'PROOF_FilesToProcess' - contain",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v528/index.html:1047,sandbox,sandbox,1047,proof/doc/v528/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v528/index.html,1,['sandbox'],['sandbox']
Testability,"e is a comment prefix (see :option:`--comment-prefixes` below). .. option:: --check-prefixes prefix1,prefix2,... An alias of :option:`--check-prefix` that allows multiple prefixes to be; specified as a comma separated list. .. option:: --comment-prefixes prefix1,prefix2,... By default, FileCheck ignores any occurrence in ``match-filename`` of any check; prefix if it is preceded on the same line by ""``COM:``"" or ""``RUN:``"". See the; section `The ""COM:"" directive`_ for usage details. These default comment prefixes can be overridden by; :option:`--comment-prefixes` if they are not appropriate for your testing; environment. However, doing so is not recommended in LLVM's LIT-based test; suites, which should be easier to maintain if they all follow a consistent; comment style. In that case, consider proposing a change to the default; comment prefixes instead. .. option:: --allow-unused-prefixes. This option controls the behavior when using more than one prefix as specified; by :option:`--check-prefix` or :option:`--check-prefixes`, and some of these; prefixes are missing in the test file. If true, this is allowed, if false,; FileCheck will report an error, listing the missing prefixes. The default value; is false. .. option:: --input-file filename. File to check (defaults to stdin). .. option:: --match-full-lines. By default, FileCheck allows matches of anywhere on a line. This; option will require all positive matches to cover an entire; line. Leading and trailing whitespace is ignored, unless; :option:`--strict-whitespace` is also specified. (Note: negative; matches from ``CHECK-NOT`` are not affected by this option!). Passing this option is equivalent to inserting ``{{^ *}}`` or; ``{{^}}`` before, and ``{{ *$}}`` or ``{{$}}`` after every positive; check pattern. .. option:: --strict-whitespace. By default, FileCheck canonicalizes input horizontal whitespace (spaces and; tabs) which causes it to ignore these differences (a space will match a tab).; The :option:`--strict-",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst:2829,test,test,2829,interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,1,['test'],['test']
Testability,"e is a sample run:. ``` {.cpp}; % root -b; root[] .x stress.cxx(30). Test 1 : Functions, Random Numbers, Histogram Fits............. OK; Test 2 : Check size & compression factor of a Root file........ OK; Test 3 : Purge, Reuse of gaps in TFile......................... OK; Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; Test 5 : Test graphics & PostScript ............................OK; Test 6 : Test subdirectories in a Root file.................... OK; Test 7 : TNtuple, selections, TCutG, TEventList.......... OK; Test 8 : Trees split and compression modes..................... OK; Test 9 : Analyze Event.root file of stress 8................... OK; Test 10 : Create 10 files starting from Event.root.............. OK; Test 11 : Test chains of Trees using the 10 files............... OK; Test 12 : Compare histograms of test 9 and 11................... OK; Test 13 : Test merging files of a chain......................... OK; Test 14 : Check correct rebuilt of Event.root in test 13........ OK; Test 15 : Divert Tree branches to separate files................ OK; Test 16 : Cling test (3 nested loops) with LHCb trigger.......... OK; ******************************************************************; * IRIX64 fnpat1 6.5 01221553 IP27; ******************************************************************; stress : Total I/O = 75.3 Mbytes, I = 59.2, O = 16.1; stress : Compr I/O = 75.7 Mbytes, I = 60.0, O = 15.7; stress : Real Time = 307.61 seconds Cpu Time = 292.82 seconds; ******************************************************************; * ROOTMARKS = 53.7 * Root2.25/00 20000710/1022; ```. ### guitest - A Graphical User Interface; \index{GUI application}. The `guitest` example, created by compiling `guitest.cxx`, tests and; illustrates the use of the native GUI widgets such as cascading menus,; dialog boxes, sliders and tab panels. It is a very useful example to; study when designing a GUI. Some examples of the output of `guitest` are; shown next. To run it typ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/TutorialsandTests.md:15696,test,test,15696,documentation/users-guide/TutorialsandTests.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/TutorialsandTests.md,1,['test'],['test']
Testability,"e is set. Scope and assumptions; =====================. A symbolizing filter implementation will be independent both of the target; operating system and machine architecture where the logs are generated and of; the host operating system and machine architecture where the filter runs. This format assumes that the symbolizing filter processes intact whole lines. If; long lines might be split during some stage of a logging pipeline, they must be; reassembled to restore the original line breaks before feeding lines into the; symbolizing filter. Most markup elements must appear entirely on a single line; (often with other text before and/or after the markup element). There are some; markup elements that are specified to span lines, with line breaks in the middle; of the element. Even in those cases, the filter is not expected to handle line; breaks in arbitrary places inside a markup element, but only inside certain; fields. This format assumes that the symbolizing filter processes a coherent stream of; log lines from a single process address space context. If a logging stream; interleaves log lines from more than one process, these must be collated into; separate per-process log streams and each stream processed by a separate; instance of the symbolizing filter. Because the kernel and user processes use; disjoint address regions in most operating systems, a single user process; address space plus the kernel address space can be treated as a single address; space for symbolization purposes if desired. Dependence on Build IDs; =======================. The symbolizer markup scheme relies on contextual information about runtime; memory address layout to make it possible to convert markup elements into useful; symbolic form. This relies on having an unmistakable identification of which; binary was loaded at each address. An ELF Build ID is the payload of an ELF note with name ``""GNU""`` and type; ``NT_GNU_BUILD_ID``, a unique byte sequence that identifies a particular binary; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst:2970,log,log,2970,interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst,1,['log'],['log']
Testability,"e latest Update installed. Visual Studio Community Edition; suffices. You will also need the `CMake <http://www.cmake.org/>`_ build system since it; generates the project files you will use to build with. CMake is bundled with; Visual Studio 2019 so separate installation is not required. If you do install; CMake separately, Visual Studio 2022 will require CMake Version 3.21 or later. If you would like to run the LLVM tests you will need `Python; <http://www.python.org/>`_. Version 3.6 and newer are known to work. You can; install Python with Visual Studio 2019, from the Microsoft store or from; the `Python web site <http://www.python.org/>`_. We recommend the latter since it; allows you to adjust installation options. You will need `Git for Windows <https://git-scm.com/>`_ with bash tools, too.; Git for Windows is also bundled with Visual Studio 2019. Getting Started; ===============; Here's the short story for getting up and running quickly with LLVM.; These instruction were tested with Visual Studio 2019 and Python 3.9.6:. 1. Download and install `Visual Studio <https://visualstudio.microsoft.com/>`_.; 2. In the Visual Studio installer, Workloads tab, select the; **Desktop development with C++** workload. Under Individual components tab,; select **Git for Windows**.; 3. Complete the Visual Studio installation.; 4. Download and install the latest `Python 3 release <http://www.python.org/>`_.; 5. In the first install screen, select both **Install launcher for all users**; and **Add Python to the PATH**. This will allow installing psutil for all; users for the regression tests and make Python available from the command; line.; 6. In the second install screen, select (again) **Install for all users** and; if you want to develop `lldb <https://lldb.llvm.org/>`_, selecting; **Download debug binaries** is useful.; 7. Complete the Python installation.; 8. Run a ""Developer Command Prompt for VS 2019"" **as administrator**. This command; prompt provides correct path and envir",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStartedVS.rst:2841,test,tested,2841,interpreter/llvm-project/llvm/docs/GettingStartedVS.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStartedVS.rst,1,['test'],['tested']
Testability,"e markup; elements that give the contextual information necessary to make sense of the raw; data, such as memory layout details. This format identifies markup elements with a syntax that is both simple and; distinctive. It's simple enough to be matched and parsed with straightforward; code. It's distinctive enough that character sequences that look like the start; or end of a markup element should rarely if ever appear incidentally in logging; text. It's specifically intended not to require sanitizing plain text, such as; the HTML/XML requirement to replace ``<`` with ``&lt;`` and the like. :doc:`llvm-symbolizer <CommandGuide/llvm-symbolizer>` includes a symbolizing; filter via its ``--filter-markup`` option. Also, LLVM utilites emit stack; traces as markup when the ``LLVM_ENABLE_SYMBOLIZER_MARKUP`` environment; variable is set. Scope and assumptions; =====================. A symbolizing filter implementation will be independent both of the target; operating system and machine architecture where the logs are generated and of; the host operating system and machine architecture where the filter runs. This format assumes that the symbolizing filter processes intact whole lines. If; long lines might be split during some stage of a logging pipeline, they must be; reassembled to restore the original line breaks before feeding lines into the; symbolizing filter. Most markup elements must appear entirely on a single line; (often with other text before and/or after the markup element). There are some; markup elements that are specified to span lines, with line breaks in the middle; of the element. Even in those cases, the filter is not expected to handle line; breaks in arbitrary places inside a markup element, but only inside certain; fields. This format assumes that the symbolizing filter processes a coherent stream of; log lines from a single process address space context. If a logging stream; interleaves log lines from more than one process, these must be collated into; s",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst:2140,log,logs,2140,interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst,1,['log'],['logs']
Testability,"e memory issues detected by; ASan. Furthermore, GWP-ASan's bug detection capabilities are only probabilistic.; As such, we recommend using ASan over GWP-ASan in testing, as well as anywhere; else that guaranteed error detection is more valuable than the 2x execution; slowdown/binary size bloat. For the majority of production environments, this; impact is too high, and GWP-ASan proves extremely useful. Design; ======. **Please note:** The implementation of GWP-ASan is largely in-flux, and these; details are subject to change. There are currently other implementations of; GWP-ASan, such as the implementation featured in; `Chromium <https://cs.chromium.org/chromium/src/components/gwp_asan/>`_. The; long-term support goal is to ensure feature-parity where reasonable, and to; support compiler-rt as the reference implementation. Allocator Support; -----------------. GWP-ASan is not a replacement for a traditional allocator. Instead, it works by; inserting stubs into a supporting allocator to redirect allocations to GWP-ASan; when they're chosen to be sampled. These stubs are generally implemented in the; implementation of ``malloc()``, ``free()`` and ``realloc()``. The stubs are; extremely small, which makes using GWP-ASan in most allocators fairly trivial.; The stubs follow the same general pattern (example ``malloc()`` pseudocode; below):. .. code:: cpp. #ifdef INSTALL_GWP_ASAN_STUBS; gwp_asan::GuardedPoolAllocator GWPASanAllocator;; #endif. void* YourAllocator::malloc(..) {; #ifdef INSTALL_GWP_ASAN_STUBS; if (GWPASanAllocator.shouldSample(..)); return GWPASanAllocator.allocate(..);; #endif. // ... the rest of your allocator code here.; }. Then, all the supporting allocator needs to do is compile with; ``-DINSTALL_GWP_ASAN_STUBS`` and link against the GWP-ASan library! For; performance reasons, we strongly recommend static linkage of the GWP-ASan; library. Guarded Allocation Pool; -----------------------. The core of GWP-ASan is the guarded allocation pool. Each sampled",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GwpAsan.rst:2216,stub,stubs,2216,interpreter/llvm-project/llvm/docs/GwpAsan.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GwpAsan.rst,1,['stub'],['stubs']
Testability,"e normalization parameter norm:. ``` {.cpp}; Double_t scale = norm/h->Integral();; h->Scale(scale);; ```. ## Saving/Reading Histograms to/from a File. The following statements create a ROOT file and store a histogram on; the file. Because **`TH1`** derives from **`TNamed`** , the key; identifier on the file is the histogram name:. ``` {.cpp}; TFile f(""histos.root"",""new"");; TH1F h1(""hgaus"",""histo from a gaussian"",100,-3,3);; h1.FillRandom(""gaus"",10000);; h1->Write();; ```. To read this histogram in another ROOT session, do:. ``` {.cpp}; TFile f(""histos.root"");; TH1F *h = (TH1F*)f.Get(""hgaus"");; ```. One can save all histograms in memory to the file by:. ``` {.cpp}; file->Write();; ```. For a more detailed explanation, see ""Input/Output"". ## Miscellaneous Operations. - **`TH1`**`::KolmogorovTest(` **`TH1`**`* h2,Option_t *option)` is; statistical test of compatibility in shape between two histograms.; The parameter `option` is a character string that specifies:. - ""`U`"" include Underflows in test (also for 2-dim). - ""`O`"" include Overflows (also valid for 2-dim). - ""`N`"" include comparison of normalizations. - ""`D`"" put out a line of ""Debug"" printout. - ""`M`"" return the maximum Kolmogorov distance instead of `prob`. - ""`X`"" run the pseudo experiments post-processor with the following; procedure: it makes pseudo experiments based on random values from; the parent distribution and compare the KS distance of the pseudo; experiment to the parent distribution. Bin the KS distances in a; histogram, and then take the integral of all the KS values above; the value obtained from the original data to Monte Carlo; distribution. The number of pseudo-experiments NEXPT is currently; fixed at 1000. The function returns the integral. Note that this; option ""`X`"" is much slower. - **`TH1`**`::Smooth` - smoothes the bin contents of a 1D histogram. - **`TH1`**`::Integral(Option_t *opt)-`returns the integral of bin; contents in a given bin range. If the option ""`width`"" is; specified, the",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Histograms.md:50518,test,test,50518,documentation/users-guide/Histograms.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Histograms.md,1,['test'],['test']
Testability,"e not shown. * Prints an address's debug-data discriminator when it is non-zero. One way to; produce discriminators is to compile with clang's -fdebug-info-for-profiling. ``JSON`` style provides a machine readable output in JSON. If addresses are; supplied via stdin, the output JSON will be a series of individual objects.; Otherwise, all results will be contained in a single array. .. code-block:: console. $ llvm-symbolizer --obj=inlined.elf 0x4004be 0x400486 -p; baz() at /tmp/test.cpp:11:18; (inlined by) main at /tmp/test.cpp:15:0. foo() at /tmp/test.cpp:6:3. $ llvm-symbolizer --output-style=LLVM --obj=inlined.elf 0x4004be 0x400486 -p --no-inlines; main at /tmp/test.cpp:11:18. foo() at /tmp/test.cpp:6:3. $ llvm-symbolizer --output-style=GNU --obj=inlined.elf 0x4004be 0x400486 -p --no-inlines; baz() at /tmp/test.cpp:11; foo() at /tmp/test.cpp:6. $ clang -g -fdebug-info-for-profiling test.cpp -o profiling.elf; $ llvm-symbolizer --output-style=GNU --obj=profiling.elf 0x401167 -p --no-inlines; main at /tmp/test.cpp:15 (discriminator 2). $ llvm-symbolizer --output-style=JSON --obj=inlined.elf 0x4004be 0x400486 -p; [; {; ""Address"": ""0x4004be"",; ""ModuleName"": ""inlined.elf"",; ""Symbol"": [; {; ""Column"": 18,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""baz()"",; ""Line"": 11,; ""StartAddress"": ""0x4004be"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 9; },; {; ""Column"": 0,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""main"",; ""Line"": 15,; ""StartAddress"": ""0x4004be"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 14; }; ]; },; {; ""Address"": ""0x400486"",; ""ModuleName"": ""inlined.elf"",; ""Symbol"": [; {; ""Column"": 3,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""foo()"",; ""Line"": 6,; ""StartAddress"": ""0x400486"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 5; }; ]; }; ]. .. option:: --pretty-print, -p. Print human readable output. If :option:`--inlining` is specified, the; enclosing scope is prefixed by (inline",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:9806,test,test,9806,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"e ntuple is called 'PROOF_ProgressPerfNtuple'.; Add support for worker autodiscovery in PROOF using the; Avahi/Bonjour technology. The new functionality is supported on Mac; (MacOsX >= 10.4; no need of additional installs) and linux (requires; the Avahi framework, available by default on most of the; distributions). To use this functionality (instead-of or in-addition-to; the the static worker configuration via proof.conf or xpd.worker) the; new directive 'xpd.bonjour' must be used. Improvements. Improve support for valgrind runs in PROOF-Lite; Add the possibility to add files to a dataset. This is; achieved with a new option 'U' (for update) to RegisterDataSet.; Add; methof TProof::GetStatistics to allow the client to retrieve the; correct values of fBytesRead, fRealTime and fCpuTime at any moment;; this will be used to setup a sort of ROOTmarks in stressProof .; Several improvements in the test program 'stressProof'; and in the tutorials under 'tutorials/proof'; Avoid; contacting the DNS when initializing TProofMgr as base class of; TProofMgrLite: it is not needed and it may introduce long startup; delays.; Make TProof::LogViewer("""") start the viewer for; a Lite session, in parallel to whats happen for TProof::Open("""").; Several; improvements in the handling of wild cards in the dataset manager; for; example, issuing a GetDataSet(...) on a dataset URI containign wild; cards will return a grand dataset sum of all the datasets matching the; URI.; Add options to get a list of all dataset registered names; from ScanDataSets (option kList; the result is a TMap of {TObjString,; TObjString} with the second TObjString empty).Improved version of the PQ2 scripts; the scripts now invoke a dedicated ROOT application (named pq2) available under $ROOTSYS/bin .Add; support for recursive reading of group config files via the 'include; sub-file' directive. This allows to have a common part and, for; example, customize differently the quotas.Fix an issue with TTreeFriends. New tuto",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v528/index.html:4534,test,test,4534,proof/doc/v528/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v528/index.html,1,['test'],['test']
Testability,"e operands need not have the same type as each; other, or as the result. The other builtins may implicitly promote or; convert their operands before performing the operation. Query for this feature with ``__has_builtin(__builtin_add_overflow)``, etc. Floating point builtins; ---------------------------------------. ``__builtin_isfpclass``; -----------------------. ``__builtin_isfpclass`` is used to test if the specified floating-point values; fall into one of the specified floating-point classes. **Syntax**:. .. code-block:: c++. int __builtin_isfpclass(fp_type expr, int mask); int_vector __builtin_isfpclass(fp_vector expr, int mask). **Example of use**:. .. code-block:: c++. if (__builtin_isfpclass(x, 448)) {; // `x` is positive finite value; 	 ...; }. **Description**:. The ``__builtin_isfpclass()`` builtin is a generalization of functions ``isnan``,; ``isinf``, ``isfinite`` and some others defined by the C standard. It tests if; the floating-point value, specified by the first argument, falls into any of data; classes, specified by the second argument. The latter is an integer constant; bitmask expression, in which each data class is represented by a bit; using the encoding:. ========== =================== ======================; Mask value Data class Macro; ========== =================== ======================; 0x0001 Signaling NaN __FPCLASS_SNAN; 0x0002 Quiet NaN __FPCLASS_QNAN; 0x0004 Negative infinity __FPCLASS_NEGINF; 0x0008 Negative normal __FPCLASS_NEGNORMAL; 0x0010 Negative subnormal __FPCLASS_NEGSUBNORMAL; 0x0020 Negative zero __FPCLASS_NEGZERO; 0x0040 Positive zero __FPCLASS_POSZERO; 0x0080 Positive subnormal __FPCLASS_POSSUBNORMAL; 0x0100 Positive normal __FPCLASS_POSNORMAL; 0x0200 Positive infinity __FPCLASS_POSINF; ========== =================== ======================. For convenience preprocessor defines macros for these values. The function; returns 1 if ``expr`` falls into one of the specified data classes, 0 otherwise. In the example above the mask",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LanguageExtensions.rst:129940,test,tests,129940,interpreter/llvm-project/clang/docs/LanguageExtensions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LanguageExtensions.rst,1,['test'],['tests']
Testability,"e position but not -1.; To avoid possible false-positives ``errno`` is allowed to be used in this; case. .. _unix-Malloc:. unix.Malloc (C); """"""""""""""""""""""""""""""; Check for memory leaks, double free, and use-after-free problems. Traces memory managed by malloc()/free(). .. literalinclude:: checkers/unix_malloc_example.c; :language: c. .. _unix-MallocSizeof:. unix.MallocSizeof (C); """"""""""""""""""""""""""""""""""""""""""; Check for dubious ``malloc`` arguments involving ``sizeof``. .. code-block:: c. void test() {; long *p = malloc(sizeof(short));; // warn: result is converted to 'long *', which is; // incompatible with operand type 'short'; free(p);; }. .. _unix-MismatchedDeallocator:. unix.MismatchedDeallocator (C, C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for mismatched deallocators. .. literalinclude:: checkers/mismatched_deallocator_example.cpp; :language: c. .. _unix-Vfork:. unix.Vfork (C); """"""""""""""""""""""""""""; Check for proper usage of ``vfork``. .. code-block:: c. int test(int x) {; pid_t pid = vfork(); // warn; if (pid != 0); return 0;. switch (x) {; case 0:; pid = 1;; execl("""", """", 0);; _exit(1);; break;; case 1:; x = 0; // warn: this assignment is prohibited; break;; case 2:; foo(); // warn: this function call is prohibited; break;; default:; return 0; // warn: return is prohibited; }. while(1);; }. .. _unix-cstring-BadSizeArg:. unix.cstring.BadSizeArg (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""; Check the size argument passed into C string functions for common erroneous patterns. Use ``-Wno-strncat-size`` compiler option to mute other ``strncat``-related compiler warnings. .. code-block:: c. void test() {; char dest[3];; strncat(dest, """"""""""""""""""""""""""""""""""""""""""""""""""*"", sizeof(dest));; // warn: potential buffer overflow; }. .. _unix-cstring-NullArg:. unix.cstring.NullArg (C); """"""""""""""""""""""""""""""""""""""""""""""""; Check for null pointers being passed as arguments to C string functions:; ``strlen, strnlen, strcpy, strncpy, strcat, strncat, strcmp, strncmp, strcasecmp, strncasecmp, wcslen, wcsnlen``. .. code-b",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:29525,test,test,29525,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"e predicted incorrectly when returning from; a function. These code patterns are also vulnerable to Spectre variant #2, and as such are; best mitigated with a; [retpoline](https://support.google.com/faqs/answer/7625886) on x86 platforms.; When a mitigation technique like retpoline is used, speculation simply cannot; proceed through an indirect control flow edge (or it cannot be mispredicted in; the case of a filled RSB) and so it is also protected from variant #1 style; attacks. However, some architectures, micro-architectures, or vendors do not; employ the retpoline mitigation, and on future x86 hardware (both Intel and; AMD) it is expected to become unnecessary due to hardware-based mitigation. When not using a retpoline, these edges will need independent protection from; variant #1 style attacks. The analogous approach to that used for conditional; control flow should work:; ```; uintptr_t all_ones_mask = std::numerical_limits<uintptr_t>::max();; uintptr_t all_zeros_mask = 0;; void leak(int data);; void example(int* pointer1, int* pointer2) {; uintptr_t predicate_state = all_ones_mask;; switch (condition) {; case 0:; // Assuming ?: is implemented using branchless logic...; predicate_state = (condition != 0) ? all_zeros_mask : predicate_state;; // ... lots of code ...; //; // Harden the pointer so it can't be loaded; pointer1 &= predicate_state;; leak(*pointer1);; break;. case 1:; predicate_state = (condition != 1) ? all_zeros_mask : predicate_state;; // ... more code ...; //; // Alternative: Harden the loaded value; int value2 = *pointer2 & predicate_state;; leak(value2);; break;. // ...; }; }; ```. The core idea remains the same: validate the control flow using data-flow and; use that validation to check that loads cannot leak information along; misspeculated paths. Typically this involves passing the desired target of such; control flow across the edge and checking that it is correct afterwards. Note; that while it is tempting to think that this mitigates varian",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md:10033,log,logic,10033,interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,1,['log'],['logic']
Testability,"e profile runtime and is initially set to zero, meaning no; relocation. The runtime can map the profile into memory at arbitrary locations,; and set bias to the offset between the original and the new counter location,; at which point every subsequent counter access will be to the new location,; which allows updating profile directly akin to the continuous mode. The advantage of this approach is that doesn't require any special OS support.; The disadvantage is the extra overhead due to additional instructions required; for each counter access (overhead both in terms of binary size and performance); plus duplication of counters (i.e. one copy in the binary itself and another; copy that's mapped into memory). This implementation can be also enabled for; other platforms by passing the ``-runtime-counter-relocation`` option to the; backend during compilation. For a program such as the `Lit <https://llvm.org/docs/CommandGuide/lit.html>`_; testing tool which invokes other programs, it may be necessary to set; ``LLVM_PROFILE_FILE`` for each invocation. The pattern strings ""%p"" or ""%Nm""; may help to avoid corruption due to concurrency. Note that ""%p"" is also a Lit; token and needs to be escaped as ""%%p"". .. code-block:: console. % clang++ -fprofile-instr-generate -fcoverage-mapping -mllvm -runtime-counter-relocation foo.cc -o foo. Creating coverage reports; =========================. Raw profiles have to be **indexed** before they can be used to generate; coverage reports. This is done using the ""merge"" tool in ``llvm-profdata``; (which can combine multiple raw profiles and index them at the same time):. .. code-block:: console. # Step 3(a): Index the raw profile.; % llvm-profdata merge -sparse foo.profraw -o foo.profdata. For an example of merging multiple profiles created by testing,; see the LLVM `coverage build script <https://github.com/llvm/llvm-zorg/blob/main/zorg/jenkins/jobs/jobs/llvm-coverage>`_. There are multiple different ways to render coverage reports. The si",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/SourceBasedCodeCoverage.rst:5450,test,testing,5450,interpreter/llvm-project/clang/docs/SourceBasedCodeCoverage.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/SourceBasedCodeCoverage.rst,1,['test'],['testing']
Testability,"e reduction strategy to obtain much smaller test; cases that still have the same property as the original one. This will be done; via classic delta debugging and by adding some IR-specific reductions (e.g.; replacing globals, removing unused instructions, etc), similar to what; already exists, but with more in-depth minimization. Granted, if the community differs on this proposal, the legacy code could still; be present in the tool, but with the caveat of still being documented and; designed towards delta reduction. ### Command-Line Options; We are proposing to reduce the plethora of bugpoint’s options to just two: an; interesting-ness test and the arguments for said test, similar to other delta; reduction tools such as CReduce, Delta, and Lithium; the tool should feel less; cluttered, and there should also be no uncertainty about how to operate it. The interesting-ness test that’s going to be run to reduce the code is given; by name:; `--test=<test_name>`; If a `--test` option is not given, the program exits; this option is similar; to bugpoint’s current `-compile-custom` option, which lets the user run a; custom script. The interesting-ness test would be defined as a script that returns 0 when the; IR achieves a user-defined behaviour (e.g. failure to compile on clang) and a; nonzero value when otherwise. Leaving the user the freedom to determine what is; and isn’t interesting to the tool, and thus, streamlining the process of; reducing a test-case. If the test accepts any arguments (excluding the input ll/bc file), they are; given via the following flag:; `--test_args=<test_arguments>`; If unspecified, the test is run as given. It’s worth noting that the input file; would be passed as a parameter to the test, similar how `-compile-custom`; currently operates. ### Implementation; The tool would behave similar to CReduce’s functionality in that it would have a; list of passes that try to minimize the given test-case. We should be able to; modularize the tool’s beha",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/BugpointRedesign.md:1365,test,test,1365,interpreter/llvm-project/llvm/docs/BugpointRedesign.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/BugpointRedesign.md,3,['test'],['test']
Testability,"e show how to extend; it with control flow operations ('if' statement and a 'for' loop). This; gives us a chance to talk about SSA construction and control; flow.; - `Chapter #6: Extending the Language: User-defined Operators; <LangImpl06.html>`_ - This chapter extends the language to let; users define arbitrary unary and binary operators - with assignable; precedence! This allows us to build a significant piece of the; ""language"" as library routines.; - `Chapter #7: Extending the Language: Mutable Variables; <LangImpl07.html>`_ - This chapter talks about adding user-defined local; variables along with an assignment operator. This shows how easy it is; to construct SSA form in LLVM: LLVM does *not* require your front-end; to construct SSA form in order to use it!; - `Chapter #8: Compiling to Object Files <LangImpl08.html>`_ - This; chapter explains how to take LLVM IR and compile it down to object; files, like a static compiler does.; - `Chapter #9: Debug Information <LangImpl09.html>`_ - A real language; needs to support debuggers, so we; add debug information that allows setting breakpoints in Kaleidoscope; functions, print out argument variables, and call functions!; - `Chapter #10: Conclusion and other tidbits <LangImpl10.html>`_ - This; chapter wraps up the series by discussing ways to extend the language; and includes pointers to info on ""special topics"" like adding garbage; collection support, exceptions, debugging, support for ""spaghetti; stacks"", etc. By the end of the tutorial, we'll have written a bit less than 1000 lines; of (non-comment, non-blank) lines of code. With this small amount of; code, we'll have built up a nice little compiler for a non-trivial; language including a hand-written lexer, parser, AST, as well as code; generation support - both static and JIT! The breadth of this is a great; testament to the strengths of LLVM and shows why it is such a popular; target for language designers and others who need high performance code; generation.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/index.rst:4553,test,testament,4553,interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/index.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/index.rst,1,['test'],['testament']
Testability,"e specific protocol. The new; binary accepts the same arguments as 'xrootd' and parses the same; directives form the same configuration file, with the exception of; 'xpd.protocol xproofd libXrdProofd.so' which should now be dropped. AN; alternative port can be specified via the new 'xpd.port' directive (see; above).; Add support for 'MasterOnly' mode in starting a PROOF; session. This avoids starting the workers when one wants just to browse; the datasets or retrieve results. To start a session in 'MasterOnly'; mode enter ""masteronly""; as second argument to TProof::Open, e.g.;  ;          root[]; TProof *p = TProof::Open(""<masterurl>"", ""masteronly""); Add full support for placeholders; <uid>,; <gid>, <group> and <homedir>; for the directives specified via 'xpd.putenv'; Add the configuration directive 'proofservparents' to; allow specifying a different list of parent names for the 'proofserv'; tasks. This is needed to avoid untimely killing of 'proofserv'; instances in test setups when multiple instances of the daemons are; running on the same machines under different names.; Add the possibility to switch to asynchronous mode while; running synchronously. A new button ""Run; in background"" has been added; to the dialog box. The behaviour of Ctrl-C has also been modified: the; user is prompted for a choice among continuing asynchronously, stopping; (terminating) or aborting the query.; Add the possibility to define the dataset information; sources via the directive 'xpd.datasetsrc'.; In this way the permissions; should be set correctly and the related problems disappear.; Record the logs from the ROOT version validation tests; (proofserv forked in test mode). In case of failure - or if the debug; flag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the '/' replaced by '-'). This should; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF ses",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:2683,test,test,2683,proof/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html,1,['test'],['test']
Testability,"e static analyzer that I don't care about a specific dead store?; How do I tell the static analyzer that I don't care about a specific unused instance variable in Objective C?; How do I tell the static analyzer that I don't care about a specific unlocalized string?; How do I tell the analyzer that my instance variable does not need to be released in -dealloc under Manual Retain/Release?; How do I decide whether a method's return type should be _Nullable or _Nonnull?; How do I tell the analyzer that I am intentionally violating nullability?; The analyzer assumes that a loop body is never entered. How can I tell it that the loop body will be entered at least once?; How can I suppress a specific analyzer warning?; How can I selectively exclude code the analyzer examines?. Q: How do I tell the analyzer that I do not want the bug being; reported here since my custom error handler will safely end the execution before; the bug is reached?. You can tell the analyzer that this path is unreachable by teaching it about your custom assertion handlers. For example, you can modify the code segment as following. void customAssert() __attribute__((analyzer_noreturn));; int foo(int *b) {; if (!b); customAssert();; return *b;; }; Q: The analyzer reports a null dereference, but I know that the; pointer is never null. How can I tell the analyzer that a pointer can never be; null?. The reason the analyzer often thinks that a pointer can be null is because the preceding code checked compared it against null. So if you are absolutely sure that it cannot be null, remove the preceding check and, preferably, add an assertion as well. For example, in the code segment above, it will be sufficient to remove the if (!b) check. . void usePointer(int *b);; int foo(int *b) {; usePointer(b);; return *b;; }; Q: How do I tell the static analyzer that I don't care about a specific dead store?; When the analyzer sees that a value stored into a variable is never used, it's going to produce a message simil",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/faq.html:1465,assert,assertion,1465,interpreter/llvm-project/clang/www/analyzer/faq.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/faq.html,1,['assert'],['assertion']
Testability,"e systems is that a ; compiler may fall in anywhere in a ""continuum of compilation"" to do its ; job. On one side, scripting languages statically compile nothing and ; dynamically compile (or equivalently, interpret) everything. On the far ; other side, traditional static compilers process everything statically and ; nothing dynamically. These approaches have typically been seen as a ; tradeoff between performance and portability. On a deeper level, however, ; there are two reasons that optimal system performance may be obtained by a; system somewhere in between these two extremes: Dynamic application ; behavior and social constraints. From a technical perspective, pure static compilation cannot ever give ; optimal performance in all cases, because applications have varying dynamic; behavior that the static compiler cannot take into consideration. Even ; compilers that support profile guided optimization generate poor code in ; the real world, because using such optimization tunes that application ; to one particular usage pattern, whereas real programs (as opposed to ; benchmarks) often have several different usage patterns. On a social level, static compilation is a very shortsighted solution to ; the performance problem. Instruction set architectures (ISAs) continuously ; evolve, and each implementation of an ISA (a processor) must choose a set ; of tradeoffs that make sense in the market context that it is designed for. ; With every new processor introduced, the vendor faces two fundamental ; problems: First, there is a lag time between when a processor is introduced ; to when compilers generate quality code for the architecture. Secondly, ; even when compilers catch up to the new architecture there is often a large ; body of legacy code that was compiled for previous generations and will ; not or can not be upgraded. Thus a large percentage of code running on a ; processor may be compiled quite sub-optimally for the current ; characteristics of the dynamic execu",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HistoricalNotes/2001-04-16-DynamicCompilation.txt:1589,benchmark,benchmarks,1589,interpreter/llvm-project/llvm/docs/HistoricalNotes/2001-04-16-DynamicCompilation.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HistoricalNotes/2001-04-16-DynamicCompilation.txt,1,['benchmark'],['benchmarks']
Testability,"e test will be placed under; a created Output directory.; During the run of make test, the terminal output will; display a line similar to the following:; --- Running clang tests for i686-pc-linux-gnu ---; followed by a line continually overwritten with the current test; file being compiled, and an overall completion percentage.; After the make test run completes, the absence of any; Failing Tests (count): message indicates that no tests; failed unexpectedly. If any tests did fail, the; Failing Tests (count): message will be followed by a list; of the test source file paths that failed. For example:. Failing Tests (3):; /home/john/llvm/tools/clang/test/SemaCXX/member-name-lookup.cpp; /home/john/llvm/tools/clang/test/SemaCXX/namespace-alias.cpp; /home/john/llvm/tools/clang/test/SemaCXX/using-directive.cpp. If you used the make VERBOSE=1 option, the terminal; output will reflect the error messages from the compiler and; test runner.; The regression suite can also be run with Valgrind by running; make test VG=1 in the top-level clang directory.; For more intensive changes, running; the LLVM; Test Suite with clang is recommended. Currently the best way to; override LLVMGCC, as in: make LLVMGCC=""clang -std=gnu89""; TEST=nightly report (make sure clang is in your PATH or use the; full path). Testing using Visual Studio on Windows. The Clang test suite can be run from either Visual Studio or; the command line.; Note that the test runner is based on; Python, which must be installed. Find Python at:; https://www.python.org/downloads/.; Download the latest stable version.; The GnuWin32 tools are also necessary for running the tests.; Get them from ; http://getgnuwin32.sourceforge.net/.; If the environment variable %PATH% does not have GnuWin32,; or if other grep(s) supercedes GnuWin32 on %PATH%,; you should specify LLVM_LIT_TOOLS_DIR; to CMake explicitly.; The cmake build tool is set up to create Visual Studio project files; for running the tests, ""check-clang"" being the root. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html:4310,test,test,4310,interpreter/llvm-project/clang/www/hacking.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html,1,['test'],['test']
Testability,"e the following, which eliminates a branch:; 	xorl $1, %edi; 	cmpl	$4, %edi; 	ja	.LBB0_2; 	ret; .LBB0_2:; 	jmp	foo # TAILCALL. //===---------------------------------------------------------------------===//. We compile this:. int foo(int a) { return (a & (~15)) / 16; }. Into:. define i32 @foo(i32 %a) nounwind readnone ssp {; entry:; %and = and i32 %a, -16; %div = sdiv i32 %and, 16; ret i32 %div; }. but this code (X & -A)/A is X >> log2(A) when A is a power of 2, so this case; should be instcombined into just ""a >> 4"". We do get this at the codegen level, so something knows about it, but ; instcombine should catch it earlier:. _foo: ## @foo; ## %bb.0: ## %entry; 	movl	%edi, %eax; 	sarl	$4, %eax; 	ret. //===---------------------------------------------------------------------===//. This code (from GCC PR28685):. int test(int a, int b) {; int lt = a < b;; int eq = a == b;; if (lt); return 1;; return eq;; }. Is compiled to:. define i32 @test(i32 %a, i32 %b) nounwind readnone ssp {; entry:; %cmp = icmp slt i32 %a, %b; br i1 %cmp, label %return, label %if.end. if.end: ; preds = %entry; %cmp5 = icmp eq i32 %a, %b; %conv6 = zext i1 %cmp5 to i32; ret i32 %conv6. return: ; preds = %entry; ret i32 1; }. it could be:. define i32 @test__(i32 %a, i32 %b) nounwind readnone ssp {; entry:; %0 = icmp sle i32 %a, %b; %retval = zext i1 %0 to i32; ret i32 %retval; }. //===---------------------------------------------------------------------===//. This code can be seen in viterbi:. %64 = call noalias i8* @malloc(i64 %62) nounwind; ...; %67 = call i64 @llvm.objectsize.i64(i8* %64, i1 false) nounwind; %68 = call i8* @__memset_chk(i8* %64, i32 0, i64 %62, i64 %67) nounwind. llvm.objectsize.i64 should be taught about malloc/calloc, allowing it to; fold to %62. This is a security win (overflows of malloc will get caught); and also a performance win by exposing more memsets to the optimizer. This occurs several times in viterbi. Note that this would change the semantics of @llvm.objectsize whi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt:53408,test,test,53408,interpreter/llvm-project/llvm/lib/Target/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt,1,['test'],['test']
Testability,"e the format of the tests they contain, the; logic for finding those tests, and any additional information to run the tests. :program:`lit` identifies test suites as directories containing ``lit.cfg`` or; ``lit.site.cfg`` files (see also :option:`--config-prefix`). Test suites are; initially discovered by recursively searching up the directory hierarchy for; all the input files passed on the command line. You can use; :option:`--show-suites` to display the discovered test suites at startup. Once a test suite is discovered, its config file is loaded. Config files; themselves are Python modules which will be executed. When the config file is; executed, two important global variables are predefined:. **lit_config**. The global **lit** configuration object (a *LitConfig* instance), which defines; the builtin test formats, global configuration parameters, and other helper; routines for implementing test configurations. **config**. This is the config object (a *TestingConfig* instance) for the test suite,; which the config file is expected to populate. The following variables are also; available on the *config* object, some of which must be set by the config and; others are optional or predefined:. **name** *[required]* The name of the test suite, for use in reports and; diagnostics. **test_format** *[required]* The test format object which will be used to; discover and run tests in the test suite. Generally this will be a builtin test; format available from the *lit.formats* module. **test_source_root** The filesystem path to the test suite root. For out-of-dir; builds this is the directory that will be scanned for tests. **test_exec_root** For out-of-dir builds, the path to the test suite root inside; the object directory. This is where tests will be run and temporary output files; placed. **environment** A dictionary representing the environment to use when executing; tests in the suite. **standalone_tests** When true, mark a directory with tests expected to be run; sta",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:15289,test,test,15289,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"e these macro-based; boolean expressions in the overall branch coverage count for a function or; source file. Branch coverage is not tracked for constant folded branch conditions since; branches are not generated for these cases. In the source-based file-level; sub-view, these branches will simply be shown as ``[Folded - Ignored]`` so that; users are informed about what happened. Branch coverage is tied directly to branch-generating conditions in the source; code. Users should not see hidden branches that aren't actually tied to the; source code. MC/DC Instrumentation; ---------------------. When instrumenting for Modified Condition/Decision Coverage (MC/DC) using the; clang option ``-fcoverage-mcdc``, users are limited to at most **six** leaf-level; conditions in a boolean expression. A warning will be generated for boolean; expressions that contain more than six, and they will not be instrumented for; MC/DC. Also, if a boolean expression is embedded in the nest of another boolean; expression but separated by a non-logical operator, this is also not supported.; For example, in ``x = (a && b && c && func(d && f))``, the ``d && f`` case; starts a new boolean expression that is separated from the other conditions by; the operator ``func()``. When this is encountered, a warning will be generated; and the boolean expression will not be instrumented. Switch statements; -----------------. The region mapping for a switch body consists of a gap region that covers the; entire body (starting from the '{' in 'switch (...) {', and terminating where the; last case ends). This gap region has a zero count: this causes ""gap"" areas in; between case statements, which contain no executable code, to appear uncovered. When a switch case is visited, the parent region is extended: if the parent; region has no start location, its start location becomes the start of the case.; This is used to support switch statements without a ``CompoundStmt`` body, in; which the switch body and the single",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/SourceBasedCodeCoverage.rst:21231,log,logical,21231,interpreter/llvm-project/clang/docs/SourceBasedCodeCoverage.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/SourceBasedCodeCoverage.rst,1,['log'],['logical']
Testability,"e ticks for X axis; - ticky - enable ticks for X axis; - tick - enable ticks for X and Y axes; - rx - reverse X axis; - ry - reverse Y axis; - rotate - rotate frame; - fixframe - disable interactive moving of the frame; - nozoomx - disable zooming on X axis; - nozoomy - disable zooming on Y axis; - cpXY - create palette XY for the canvas like cp50; - nopalette - ignore palette stored with TCanvas; - nocolors - ignore colors list stored with TCanvas; - lcolors - use only locally colors list stored with TCanvas; - nomargins - clear frame margins. ## Superimposing draw objects. In the URL string one could use ""+"" sign to specify objects superposition:. - [item=hpx+hprof](https://root.cern/js/latest/?file=../files/hsimple.root&item=hpx+hprof). With similar syntax one could specify individual draw options for superimposed objects. - [item=hpx+hprof&opt=logy+hist](https://root.cern/js/latest/?file=../files/hsimple.root&item=hpx+hprof&opt=logy+hist). Here ""logy"" option will be used for ""hpx1"" item and ""hist"" option for ""hprof;1"" item. While draw option can include ""+"" sign itself, for superposition one could specify arrays of items and draw options like:. - [item=[hpx;1,hprof;1]&opt=[logy,hist]](https://root.cern/js/latest/?file=../files/hsimple.root&item=[hpx;1,hprof;1]&opt=[logy,hist]). ## TTree draw. JSROOT provides possibility to display TTree data, using [TTree::Draw](https://root.cern/doc/master/classTTree.html) syntax:. - [opt=px](https://root.cern/js/latest/?file=../files/hsimple.root&item=ntuple;1&opt=px); - [opt=px:py](https://root.cern/js/latest/?file=../files/hsimple.root&item=ntuple;1&opt=px:py); - [opt=px:py:pz](https://root.cern/js/latest/?file=../files/hsimple.root&item=ntuple;1&opt=px:py:pz). It is also possible to use branch by id number specifying name like ""br_0"", ""br_1"" and so on:. - [opt=br_0:br_1](https://root.cern/js/latest/?file=../files/hsimple.root&item=ntuple&opt=br_0:br_1). Histogram ranges and binning defined after reading first 1000 entries f",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/JSROOT/JSROOT.md:14245,log,logy,14245,documentation/JSROOT/JSROOT.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/JSROOT/JSROOT.md,1,['log'],['logy']
Testability,"e to a decision tree.; Variable importance ranking by counting the number of cuts made in each; dimension. The variable, for which the most cuts were done is ranked highest. Fixed the size of the sampling box in PDEFoam:; In TMVA 4.1.0 the size of the PDEFoam sampling box in each dimension was; 2*VolFrac times the foam size. This was contrary to the intention and the; documentation in the UserGuide and is now corrected: In TMVA 4.1.1 the size; of the PDEFoam sampling box in each dimension is now VolFrac times the foam; size. This implies that in TMVA 4.1.1 the VolFrac value for training a PDEFoam; must be doubled in order to give the same results as in TMVA 4.1.0. The default; VolFrac value was also changed from 0.0333 to 0.0666.; New configuration variable ""NbinsMVAoutput"" defining the bins of the MVA output; variables in the TMVA training plots produced via the GUI. As always, Config; settings can be modified in the training script via, eg, the command. (TMVA::gConfig().GetVariablePlotting()).fNbinsMVAoutput = 50;. to be called AFTER initialising the TMVA Factory object. Bug fixes. Requested number of training and testing events was not; correct when pre-selection cuts were applied. Now the number of; requested events scales with the preselection efficiency and hence; does not need to be adjusted with the pre-selection. This also; corrects the problems seen in the Category classifierm, where; pre-selection is used to build the categories.; Correct histogram boundaries in PlotVariable.; Correct scanning procedure in OptimizeTuningParameters.; Print the significance formula that is actually used; Small speed improvement for PDEFoam functions.; Fix for MethodBoost which ensures that the method options for the boosted; classifier are handled correctly during boosting.; Fixed problems in classification of some methods when booking background; training tree before signal one.; Fixed preprocessing transformation bug in HMatrix; Several minor bug fixes for version 4.1.2. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v530/index.html:1688,test,testing,1688,tmva/doc/v530/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v530/index.html,1,['test'],['testing']
Testability,"e to inlining creating nested exception; handling scopes. Restrictions; ------------. The unwinder delegates the decision of whether to stop in a call frame to that; call frame's language-specific personality function. Not all unwinders guarantee; that they will stop to perform cleanups. For example, the GNU C++ unwinder; doesn't do so unless the exception is actually caught somewhere further up the; stack. In order for inlining to behave correctly, landing pads must be prepared to; handle selector results that they did not originally advertise. Suppose that a; function catches exceptions of type ``A``, and it's inlined into a function that; catches exceptions of type ``B``. The inliner will update the ``landingpad``; instruction for the inlined landing pad to include the fact that ``B`` is also; caught. If that landing pad assumes that it will only be entered to catch an; ``A``, it's in for a rude awakening. Consequently, landing pads must test for; the selector results they understand and then resume exception propagation with; the `resume instruction <LangRef.html#i_resume>`_ if none of the conditions; match. Exception Handling Intrinsics; =============================. In addition to the ``landingpad`` and ``resume`` instructions, LLVM uses several; intrinsic functions (name prefixed with ``llvm.eh``) to provide exception; handling information at various points in generated code. .. _llvm.eh.typeid.for:. ``llvm.eh.typeid.for``; ----------------------. .. code-block:: llvm. i32 @llvm.eh.typeid.for(i8* %type_info). This intrinsic returns the type info index in the exception table of the current; function. This value can be used to compare against the result of; ``landingpad`` instruction. The single argument is a reference to a type info. Uses of this intrinsic are generated by the C++ front-end. .. _llvm.eh.exceptionpointer:. ``llvm.eh.exceptionpointer``; ----------------------------. .. code-block:: text. i8 addrspace(N)* @llvm.eh.padparam.pNi8(token %catchpad). ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExceptionHandling.rst:14903,test,test,14903,interpreter/llvm-project/llvm/docs/ExceptionHandling.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExceptionHandling.rst,1,['test'],['test']
Testability,"e tree. Specific variables of the tree can be explicit selected by list them in; column separated list:. ``` {.cpp}; root[] MyTree->Scan(""var1:var2:var3"");; ```. will print the values of `var1`, `var2` and `var3`. A selection can be; applied in the second argument:. ``` {.cpp}; root[] MyTree->Scan(""var1:var2:var3"",""var1==0"");; ```. will print the values of `var1`, `var2` and `var3` for the entries where; var1 is exactly 0. `TTree::Scan` returns the number of entries passing the selection. By; default 50 rows are shown before `TTree::Scan` pauses and ask you to; press the Enter key to see the next 50 rows. You can change the default; number of rows to be shown before \<CR\> via; `mytree->SetScanfield(maxrows)` where maxrows is 50 by default. If; maxrows is set to 0 all rows of the **`Tree`** are shown. This option is; interesting when dumping the contents of a Tree to an ascii file, eg; from the command line:. ``` {.cpp}; root[] tree->SetScanField(0);; root[] tree->Scan(""*""); >tree.log; ```. will create a file `tree.log`. Arrays (within an entry) are printed in their linear forms. If several; arrays with multiple dimensions are printed together, they will NOT be; synchronized. For example, with a tree containing `arr1[4][2] `and; `arr2[2][3]`,. ``` {.cpp}; root[] MyTree(""arr1:arr2"");; ```. will results in a printing similar to:. ``` {.cpp}; ************************************************; * Row * Instance * arr1 * arr2 *; ***********************************************; * x * 0 * arr1[0][0]* arr2[0][0]*; * x * 1 * arr1[0][1]* arr2[0][1]*; * x * 2 * arr1[1][0]* arr2[0][2]*; * x * 3 * arr1[1][1]* arr2[1][0]*; * x * 4 * arr1[2][0]* arr2[1][1]*; * x * 5 * arr1[2][1]* arr2[1][2]*; * x * 6 * arr1[3][0]* *; * x * 7 * arr1[3][1]* *; ```. However, if there is a selection criterium which is an array, then all; the formulas will be synchronized with the selection criterium (see; **`TTree::Draw` for more information).**. The third parameter of `TTree::Scan` can be use to specifi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md:105949,log,log,105949,documentation/users-guide/Trees.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md,1,['log'],['log']
Testability,"e type is ""dependent"" (``Type::isDependentType()``) or whether a; subexpression is type-dependent (``Expr::isTypeDependent()``). If any of; these return ``true``, then you're inside a template and you can't do much; type-checking now. That's normal, and your AST node (when you get there); will have to deal with this case. At this point, you can write tests that; use your expression within templates, but don't try to instantiate the; templates.; * For each subexpression, be sure to call ``Sema::CheckPlaceholderExpr()``; to deal with ""weird"" expressions that don't behave well as subexpressions.; Then, determine whether you need to perform lvalue-to-rvalue conversions; (``Sema::DefaultLvalueConversions``) or the usual unary conversions; (``Sema::UsualUnaryConversions``), for places where the subexpression is; producing a value you intend to use.; * Your ``BuildXXX`` function will probably just return ``ExprError()`` at; this point, since you don't have an AST. That's perfectly fine, and; shouldn't impact your testing. #. Introduce an AST node for your new expression. This starts with declaring; the node in ``include/Basic/StmtNodes.td`` and creating a new class for your; expression in the appropriate ``include/AST/Expr*.h`` header. It's best to; look at the class for a similar expression to get ideas, and there are some; specific things to watch for:. * If you need to allocate memory, use the ``ASTContext`` allocator to; allocate memory. Never use raw ``malloc`` or ``new``, and never hold any; resources in an AST node, because the destructor of an AST node is never; called.; * Make sure that ``getSourceRange()`` covers the exact source range of your; expression. This is needed for diagnostics and for IDE support.; * Make sure that ``children()`` visits all of the subexpressions. This is; important for a number of features (e.g., IDE support, C++ variadic; templates). If you have sub-types, you'll also need to visit those; sub-types in ``RecursiveASTVisitor``.; * Add pri",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:147909,test,testing,147909,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,1,['test'],['testing']
Testability,"e unlikely; to scale well to large applications. We are proposing a comprehensive; mitigation approach that would apply automatically across an entire program; rather than through manual changes to the code. While this is likely to have a; high performance cost, some applications may be in a good position to take this; performance / security tradeoff. The specific technique we propose is to cause loads to be checked using; branchless code to ensure that they are executing along a valid control flow; path. Consider the following C-pseudo-code representing the core idea of a; predicate guarding potentially invalid loads:; ```; void leak(int data);; void example(int* pointer1, int* pointer2) {; if (condition) {; // ... lots of code ...; leak(*pointer1);; } else {; // ... more code ...; leak(*pointer2);; }; }; ```. This would get transformed into something resembling the following:; ```; uintptr_t all_ones_mask = std::numerical_limits<uintptr_t>::max();; uintptr_t all_zeros_mask = 0;; void leak(int data);; void example(int* pointer1, int* pointer2) {; uintptr_t predicate_state = all_ones_mask;; if (condition) {; // Assuming ?: is implemented using branchless logic...; predicate_state = !condition ? all_zeros_mask : predicate_state;; // ... lots of code ...; //; // Harden the pointer so it can't be loaded; pointer1 &= predicate_state;; leak(*pointer1);; } else {; predicate_state = condition ? all_zeros_mask : predicate_state;; // ... more code ...; //; // Alternative: Harden the loaded value; int value2 = *pointer2 & predicate_state;; leak(value2);; }; }; ```. The result should be that if the `if (condition) {` branch is mis-predicted,; there is a *data* dependency on the condition used to zero out any pointers; prior to loading through them or to zero out all of the loaded bits. Even; though this code pattern may still execute speculatively, *invalid* speculative; executions are prevented from leaking secret data from memory (but note that; this data might still be loade",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md:3837,log,logic,3837,interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,1,['log'],['logic']
Testability,"e unrelated. id date = [NSDate date];. // Warning: Object has a dynamic type 'NSDate *' which is; // incompatible with static type 'NSNumber *'""; NSNumber *number = date;; [number doubleValue];. alpha.core.FixedAddr; (C); Check for assignment of a fixed address to a pointer. void test() {; int *p;; p = (int *) 0x10000; // warn; }. alpha.core.IdenticalExpr; (C, C++); Warn about suspicious uses of identical expressions. // C; void test() {; int a = 5;; int b = a | 4 | a; // warn: identical expr on both sides; }. // C++; bool f(void);. void test(bool b) {; int i = 10;; if (f()) { // warn: true and false branches are identical; do {; i--;; } while (f());; } else {; do {; i--;; } while (f());; }; }. alpha.core.PointerArithm; (C); Check for pointer arithmetic on locations other than array; elements. void test() {; int x;; int *p;; p = &x + 1; // warn; }. alpha.core.PointerSub; (C); Check for pointer subtractions on two pointers pointing to different memory; chunks. void test() {; int x, y;; int d = &y - &x; // warn; }. alpha.core.SizeofPtr; (C); Warn about unintended use of sizeof() on pointer; expressions. struct s {};. int test(struct s *p) {; return sizeof(p);; // warn: sizeof(ptr) can produce an unexpected result; }. alpha.core.StackAddressAsyncEscape; (C); Check that addresses to stack memory do not escape the function that involves; dispatch_after or dispatch_async. This checker is; a part of core.StackAddressEscape, but is; temporarily disabled until some; false positives are fixed. dispatch_block_t test_block_inside_block_async_leak() {; int x = 123;; void (^inner)(void) = ^void(void) {; int y = x;; ++y;; };; void (^outer)(void) = ^void(void) {; int z = x;; ++z;; inner();; };; return outer; // warn: address of stack-allocated block is captured by a; // returned block; }. alpha.core.TestAfterDivZero; (C, C++, ObjC); Check for division by variable that is later compared against 0.; Either the comparison is useless or there is division by zero. void test(int x) {; var",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html:3221,test,test,3221,interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,1,['test'],['test']
Testability,e will; automatically use `path/to/clang++` as the C++ compiler. See; [https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER.html](https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER.html). - `CMAKE_Fortran_COMPILER`. Select the Fortran compiler executable to be used. Not set by default and not; required unless running the Fortran Test Suite. - `CMAKE_BUILD_TYPE`. Select a build type like `OPTIMIZE` or `DEBUG` selecting a set of predefined; compiler flags. These flags are applied regardless of the `CMAKE_C_FLAGS`; option and may be changed by modifying `CMAKE_C_FLAGS_OPTIMIZE` etc. See; [https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html](https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html). - `TEST_SUITE_FORTRAN`. Activate that Fortran tests. This is a work in progress. More information can be; found in the [Flang documentation](https://flang.llvm.org/docs/FortranLLVMTestSuite.html). - `TEST_SUITE_RUN_UNDER`. Prefix test invocations with the given tool. This is typically used to run; cross-compiled tests within a simulator tool. - `TEST_SUITE_BENCHMARKING_ONLY`. Disable tests that are unsuitable for performance measurements. The disabled; tests either run for a very short time or are dominated by I/O performance; making them unsuitable as compiler performance tests. - `TEST_SUITE_SUBDIRS`. Semicolon-separated list of directories to include. This can be used to only; build parts of the test-suite or to include external suites. This option; does not work reliably with deeper subdirectories as it skips intermediate; `CMakeLists.txt` files which may be required. - `TEST_SUITE_COLLECT_STATS`. Collect internal LLVM statistics. Appends `-save-stats=obj` when invoking the; compiler and makes the lit runner collect and merge the statistic files. - `TEST_SUITE_RUN_BENCHMARKS`. If this is set to `OFF` then lit will not actually run the tests but just; collect build statistics like compile time and code size. - `TEST_SUITE_,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:5456,test,test,5456,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['test'],['test']
Testability,"e with pedantic enabled."" ON); option(LLVM_ENABLE_WERROR ""Fail and stop if a warning is triggered."" OFF). option(LLVM_ENABLE_DUMP ""Enable dump functions even when assertions are disabled"" OFF); option(LLVM_UNREACHABLE_OPTIMIZE ""Optimize llvm_unreachable() as undefined behavior (default), guaranteed trap when OFF"" ON). if( NOT uppercase_CMAKE_BUILD_TYPE STREQUAL ""DEBUG"" ); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" OFF); else(); option(LLVM_ENABLE_ASSERTIONS ""Enable assertions"" ON); endif(). option(LLVM_ENABLE_EXPENSIVE_CHECKS ""Enable expensive checks"" OFF). # While adding scalable vector support to LLVM, we temporarily want to; # allow an implicit conversion of TypeSize to uint64_t, and to allow; # code to get the fixed number of elements from a possibly scalable vector.; # This CMake flag enables a more strict mode where it asserts that the type; # is not a scalable vector type.; #; # Enabling this flag makes it easier to find cases where the compiler makes; # assumptions on the size being 'fixed size', when building tests for; # SVE/SVE2 or other scalable vector architectures.; option(LLVM_ENABLE_STRICT_FIXED_SIZE_VECTORS; ""Enable assertions that type is not scalable in implicit conversion from TypeSize to uint64_t and calls to getNumElements"" OFF). set(LLVM_ABI_BREAKING_CHECKS ""WITH_ASSERTS"" CACHE STRING; ""Enable abi-breaking checks. Can be WITH_ASSERTS, FORCE_ON or FORCE_OFF.""). option(LLVM_FORCE_USE_OLD_TOOLCHAIN; ""Set to ON to force using an old, unsupported host toolchain."" OFF). set(LLVM_LOCAL_RPATH """" CACHE FILEPATH; ""If set, an absolute path added as rpath on binaries that do not already contain an executable-relative rpath.""). option(LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN; ""Set to ON to only warn when using a toolchain which is about to be deprecated, instead of emitting an error."" OFF). option(LLVM_USE_INTEL_JITEVENTS; ""Use Intel JIT API to inform Intel(R) VTune(TM) Amplifier XE 2011 about JIT code""; OFF). if( LLVM_USE_INTEL_JITEVENTS ); # Verify we ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:25946,test,tests,25946,interpreter/llvm-project/llvm/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt,1,['test'],['tests']
Testability,"e with:. ```bash; % git clone https://github.com/llvm/llvm-test-suite.git test-suite; ```. 3. Create a build directory and use CMake to configure the suite. Use the; `CMAKE_C_COMPILER` option to specify the compiler to test. Use a cache file; to choose a typical build configuration:. ```bash; % mkdir test-suite-build; % cd test-suite-build; % cmake -DCMAKE_C_COMPILER=<path to llvm build>/bin/clang \; -C../test-suite/cmake/caches/O3.cmake \; ../test-suite; ```. **NOTE!** if you are using your built clang, and you want to build and run the; MicroBenchmarks/XRay microbenchmarks, you need to add `compiler-rt` to your; `LLVM_ENABLE_RUNTIMES` cmake flag. 4. Build the benchmarks:. ```text; % make; Scanning dependencies of target timeit-target; [ 0%] Building C object tools/CMakeFiles/timeit-target.dir/timeit.c.o; [ 0%] Linking C executable timeit-target; ...; ```. 5. Run the tests with lit:. ```text; % llvm-lit -v -j 1 -o results.json .; -- Testing: 474 tests, 1 threads --; PASS: test-suite :: MultiSource/Applications/ALAC/decode/alacconvert-decode.test (1 of 474); ********** TEST 'test-suite :: MultiSource/Applications/ALAC/decode/alacconvert-decode.test' RESULTS **********; compile_time: 0.2192; exec_time: 0.0462; hash: ""59620e187c6ac38b36382685ccd2b63b""; size: 83348; **********; PASS: test-suite :: MultiSource/Applications/ALAC/encode/alacconvert-encode.test (2 of 474); ...; ```. 6. Show and compare result files (optional):. ```bash; # Make sure pandas and scipy are installed. Prepend `sudo` if necessary.; % pip install pandas scipy; # Show a single result file:; % test-suite/utils/compare.py results.json; # Compare two result files:; % test-suite/utils/compare.py results_a.json results_b.json; ```. Structure; ---------. The test-suite contains benchmark and test programs. The programs come with; reference outputs so that their correctness can be checked. The suite comes; with tools to collect metrics such as benchmark runtime, compilation time and; code size. The test-s",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:1491,test,tests,1491,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,2,['test'],"['test-suite', 'tests']"
Testability,"e wrapper' proxy type; (tuple of references), which combined with the structured bindings declaration; makes ``Letter`` and ``Count`` references to range elements. Any modification; to these references will affect the elements of ``Letters`` or ``Counts``. The ``zip``\ * functions support temporary ranges, for example:. .. code-block:: c++. for (auto [Letter, Count] : zip(SmallVector<char>{'a', 'b', 'c'}, Counts)); errs() << Letter << "": "" << Count << ""\n"";. The difference between the functions in the ``zip`` family is how they behave; when the supplied ranges have different lengths:. * ``zip_equal`` -- requires all input ranges have the same length.; * ``zip`` -- iteration stops when the end of the shortest range is reached.; * ``zip_first`` -- requires the first range is the shortest one.; * ``zip_longest`` -- iteration continues until the end of the longest range is; reached. The non-existent elements of shorter ranges are replaced with; ``std::nullopt``. The length requirements are checked with ``assert``\ s. As a rule of thumb, prefer to use ``zip_equal`` when you expect all; ranges to have the same lengths, and consider alternative ``zip`` functions only; when this is not the case. This is because ``zip_equal`` clearly communicates; this same-length assumption and has the best (release-mode) runtime performance. .. _uf_enumerate:. ``enumerate``; ^^^^^^^^^^^^^. The ``enumerate`` functions allows to iterate over one or more ranges while; keeping track of the index of the current loop iteration. For example:. .. code-block:: c++. for (auto [Idx, BB, Value] : enumerate(Phi->blocks(),; Phi->incoming_values())); errs() << ""#"" << Idx << "" "" << BB->getName() << "": "" << *Value << ""\n"";. The current element index is provided as the first structured bindings element.; Alternatively, the index and the element value can be obtained with the; ``index()`` and ``value()`` member functions:. .. code-block:: c++. char Letters[26] = ...;; for (auto En : enumerate(Letters)); errs",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst:101610,assert,assert,101610,interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,1,['assert'],['assert']
Testability,"e {...}``, the; ``else`` associates with the inner ``if`` rather than the outer one. The :token:`IfBody` of the then and else arms of the ``if`` establish an; inner scope. Any ``defvar`` variables defined in the bodies go out of scope; when the bodies are finished (see `Defvar in a Record Body`_ for more details). The ``if`` statement can also be used in a record :token:`Body`. ``assert`` --- check that a condition is true; ---------------------------------------------. The ``assert`` statement checks a boolean condition to be sure that it is true; and prints an error message if it is not. .. productionlist::; Assert: ""assert"" `condition` "","" `message` "";"". If the boolean condition is true, the statement does nothing. If the; condition is false, it prints a nonfatal error message. The **message**, which; can be an arbitrary string expression, is included in the error message as a; note. The exact behavior of the ``assert`` statement depends on its; placement. * At top level, the assertion is checked immediately. * In a record definition, the statement is saved and all assertions are; checked after the record is completely built. * In a class definition, the assertions are saved and inherited by all; the subclasses and records that inherit from the class. The assertions are; then checked when the records are completely built. * In a multiclass definition, the assertions are saved with the other; components of the multiclass and then checked each time the multiclass; is instantiated with ``defm``. Using assertions in TableGen files can simplify record checking in TableGen; backends. Here is an example of an ``assert`` in two class definitions. .. code-block:: text. class PersonName<string name> {; assert !le(!size(name), 32), ""person name is too long: "" # name;; string Name = name;; }. class Person<string name, int age> : PersonName<name> {; assert !and(!ge(age, 1), !le(age, 120)), ""person age is invalid: "" # age;; int Age = age;; }. def Rec20 : Person<""Donald Knuth"",",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:49455,assert,assertion,49455,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,1,['assert'],['assertion']
Testability,"e"" execution; tool. **--gcc-tool-args** *gcc tool args*. Pass all arguments specified after **--gcc-tool-args** to the invocation of; **gcc**. **--opt-args** *opt args*. Pass all arguments specified after **--opt-args** to the invocation of **opt**. **--disable-{dce,simplifycfg}**. Do not run the specified passes to clean up and reduce the size of the test; program. By default, **bugpoint** uses these passes internally when attempting to; reduce test programs. If you're trying to find a bug in one of these passes,; **bugpoint** may crash. **--enable-valgrind**. Use valgrind to find faults in the optimization phase. This will allow; bugpoint to find otherwise asymptomatic problems caused by memory; mis-management. **-find-bugs**. Continually randomize the specified passes and run them on the test program; until a bug is found or the user kills **bugpoint**. **-help**. Print a summary of command line options. **--input** *filename*. Open *filename* and redirect the standard input of the test program, whenever; it runs, to come from that file. **--load** *plugin*. Load the dynamic object *plugin* into **bugpoint** itself. This object should; register new optimization passes. Once loaded, the object will add new command; line options to enable various optimizations. To see the new complete list of; optimizations, use the **-help** and **--load** options together; for example:. .. code-block:: bash. bugpoint --load myNewPass.so -help. **--mlimit** *megabytes*. Specifies an upper limit on memory usage of the optimization and codegen. Set; to zero to disable the limit. **--output** *filename*. Whenever the test program produces output on its standard output stream, it; should match the contents of *filename* (the ""reference output""). If you; do not use this option, **bugpoint** will attempt to generate a reference output; by compiling the program with the ""safe"" backend and running it. **--run-{int,jit,llc,custom}**. Whenever the test program is compiled, **bugpoint** shou",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst:3235,test,test,3235,interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst,1,['test'],['test']
Testability,"e"" method that returns one of 3; possible values:. -1, left is *less* than right,. 0, left and right are *equal*,. 1, left is *greater* than right. Of course it means, that we have to maintain; *strict and non-strict order relation properties*:. * reflexivity (``a <= a``, ``a == a``, ``a >= a``),; * antisymmetry (if ``a <= b`` and ``b <= a`` then ``a == b``),; * transitivity (``a <= b`` and ``b <= c``, then ``a <= c``); * asymmetry (if ``a < b``, then ``a > b`` or ``a == b``). As mentioned before, the comparison routine consists of; ""sub-comparison-routines"", with each of them also consisting of; ""sub-comparison-routines"", and so on. Finally, it ends up with primitive; comparison. Below, we will use the following operations:. #. ``cmpNumbers(number1, number2)`` is a method that returns -1 if left is less; than right; 0, if left and right are equal; and 1 otherwise. #. ``cmpFlags(flag1, flag2)`` is a hypothetical method that compares two flags.; The logic is the same as in ``cmpNumbers``, where ``true`` is 1, and; ``false`` is 0. The rest of the article is based on *MergeFunctions.cpp* source code; (found in *<llvm_dir>/lib/Transforms/IPO/MergeFunctions.cpp*). We would like; to ask reader to keep this file open, so we could use it as a reference; for further explanations. Now, we're ready to proceed to the next chapter and see how it works. Functions comparison; ====================; At first, let's define how exactly we compare complex objects. Complex object comparison (function, basic-block, etc) is mostly based on its; sub-object comparison results. It is similar to the next ""tree"" objects; comparison:. #. For two trees *T1* and *T2* we perform *depth-first-traversal* and have; two sequences as a product: ""*T1Items*"" and ""*T2Items*"". #. We then compare chains ""*T1Items*"" and ""*T2Items*"" in; the most-significant-item-first order. The result of items comparison; would be the result of *T1* and *T2* comparison itself. FunctionComparator::compare(void); --------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MergeFunctions.rst:10771,log,logic,10771,interpreter/llvm-project/llvm/docs/MergeFunctions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MergeFunctions.rst,1,['log'],['logic']
Testability,"e's line numbers. **LLVM-specific substitutions:**. ``%shlibext``; The suffix for the host platforms shared library files. This includes the; period as the first character. Example: ``.so`` (Linux), ``.dylib`` (macOS), ``.dll`` (Windows). ``%exeext``; The suffix for the host platforms executable files. This includes the; period as the first character. Example: ``.exe`` (Windows), empty on Linux. **Clang-specific substitutions:**. ``%clang``; Invokes the Clang driver. ``%clang_cpp``; Invokes the Clang driver for C++. ``%clang_cl``; Invokes the CL-compatible Clang driver. ``%clangxx``; Invokes the G++-compatible Clang driver. ``%clang_cc1``; Invokes the Clang frontend. ``%itanium_abi_triple``, ``%ms_abi_triple``; These substitutions can be used to get the current target triple adjusted to; the desired ABI. For example, if the test suite is running with the; ``i686-pc-win32`` target, ``%itanium_abi_triple`` will expand to; ``i686-pc-mingw32``. This allows a test to run with a specific ABI without; constraining it to a specific triple. **FileCheck-specific substitutions:**. ``%ProtectFileCheckOutput``; This should precede a ``FileCheck`` call if and only if the call's textual; output affects test results. It's usually easy to tell: just look for; redirection or piping of the ``FileCheck`` call's stdout or stderr. .. _Test-specific substitutions:. **Test-specific substitutions:**. Additional substitutions can be defined as follows:. - Lit configuration files (e.g., ``lit.cfg`` or ``lit.local.cfg``) can define; substitutions for all tests in a test directory. They do so by extending the; substitution list, ``config.substitutions``. Each item in the list is a tuple; consisting of a pattern and its replacement, which lit applies using python's; ``re.sub`` function.; - To define substitutions within a single test file, lit supports the; ``DEFINE:`` and ``REDEFINE:`` directives, described in detail below. So that; they have no effect on other test files, these directives modif",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:28151,test,test,28151,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"e().` This call tells the Window Manager that it; should not resize the window. The option `kFixedSize` works only for; embedded frames like **`TGCompositeFrame`** and derived classes (in; combination with layout hints). The **`TGVerticalFrame`** and **`TGHorizontalFrame`** are composite; frames that lay out their child frames in vertical or horizontal way in; the same order as they were added and according to their hints; preferences. The **`TGTransientFrame`** class defines transient windows that; typically are used for dialogs. They extend and complete an interaction; within a limited context. Always transient frames are displayed from; another window or another dialog. They may appear because of a command; button being activated or a menu item being selected. They may also; present automatically when an additional input and the user attention; are required by a certain condition. The **`TGGroupFrame`** class presents a very convenient frame which; surrounds visually a group of logically connected widgets: radio; buttons, related check boxes, two or more functionally related controls. ![](pictures/02000207.jpg). It is a composite frame with a border and a title. The title explains; the purpose of the group and should be a noun or noun phrase. Here is an; example taken from `guitest.C`:. ``` {.cpp}; groupFrame = new TGGroupFrame(tf,""Options"",kVerticalFrame);; groupFrame->SetTitlePos(TGGroupFrame::kLeft);; ```. The second line sets the title position on the left. You can change it; to be centered or right aligned if you use **`TGGroupFrame::kCenter`** or; `TGGroupFrame::kRight` as a parameter. ![](pictures/02000208.jpg). Be conservative in the use of borders because of the potential for; clutter. Do not place them around single entry fields, single combo; boxes, list boxes and groups of command buttons. The design of these; widgets provides them with a border. The picture above provides kind of; borders to avoid. ## Layout Management. The layout process is an integ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/WritingGUI.md:32630,log,logically,32630,documentation/users-guide/WritingGUI.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/WritingGUI.md,1,['log'],['logically']
Testability,"e, etc). If the definition your test is looking for doesn't match (because; of a bug in the compiler), it may match further away from the use, and mask; real bugs away. In those cases, to enforce the order, use a non-DAG directive between DAG-blocks. A ``CHECK-DAG:`` directive skips matches that overlap the matches of any; preceding ``CHECK-DAG:`` directives in the same ``CHECK-DAG:`` block. Not only; is this non-overlapping behavior consistent with other directives, but it's; also necessary to handle sets of non-unique strings or patterns. For example,; the following directives look for unordered log entries for two tasks in a; parallel program, such as the OpenMP runtime:. .. code-block:: text. // CHECK-DAG: [[THREAD_ID:[0-9]+]]: task_begin; // CHECK-DAG: [[THREAD_ID]]: task_end; //; // CHECK-DAG: [[THREAD_ID:[0-9]+]]: task_begin; // CHECK-DAG: [[THREAD_ID]]: task_end. The second pair of directives is guaranteed not to match the same log entries; as the first pair even though the patterns are identical and even if the text; of the log entries is identical because the thread ID manages to be reused. The ""CHECK-LABEL:"" directive; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Sometimes in a file containing multiple tests divided into logical blocks, one; or more ``CHECK:`` directives may inadvertently succeed by matching lines in a; later block. While an error will usually eventually be generated, the check; flagged as causing the error may not actually bear any relationship to the; actual source of the problem. In order to produce better error messages in these cases, the ""``CHECK-LABEL:``""; directive can be used. It is treated identically to a normal ``CHECK``; directive except that FileCheck makes an additional assumption that a line; matched by the directive cannot also be matched by any other check present in; ``match-filename``; this is intended to be used for lines containing labels or; other unique identifiers. Conceptually, the presence of ``CHECK-LABEL`` divides; the input",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst:21118,log,log,21118,interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,2,['log'],['log']
Testability,"e, setting the limit to 2 would cause lit to make a second pass; that expands ``%{inner}`` in the ``RUN:`` line, and the output from the ``echo``; command when then be:. .. code-block:: shell. expanded. To improve performance, lit will stop making passes when it notices the ``RUN:``; line has stopped changing. In the above example, setting the limit higher than; 2 is thus harmless. To facilitate debugging, after reaching the limit, lit will make one extra pass; and report an error if the ``RUN:`` line changes again. In the above example,; setting the limit to 1 will thus cause lit to report an error instead of; producing incorrect output. Options; -------. The llvm lit configuration allows to customize some things with user options:. ``llc``, ``opt``, ...; Substitute the respective llvm tool name with a custom command line. This; allows to specify custom paths and default arguments for these tools.; Example:. % llvm-lit ""-Dllc=llc -verify-machineinstrs"". ``run_long_tests``; Enable the execution of long running tests. ``llvm_site_config``; Load the specified lit configuration instead of the default one. Other Features; --------------. To make RUN line writing easier, there are several helper programs. These; helpers are in the PATH when running tests, so you can just call them using; their name. For example:. ``not``; This program runs its arguments and then inverts the result code from it.; Zero result codes become 1. Non-zero result codes become 0. To make the output more useful, :program:`lit` will scan; the lines of the test case for ones that contain a pattern that matches; ``PR[0-9]+``. This is the syntax for specifying a PR (Problem Report) number; that is related to the test case. The number after ""PR"" specifies the; LLVM Bugzilla number. When a PR number is specified, it will be used in; the pass/fail reporting. This is useful to quickly get some context when; a test fails. Finally, any line that contains ""END."" will cause the special; interpretation of line",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:38071,test,tests,38071,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['tests']
Testability,"e-block:: bash. # Same as the above example.; $ opt -enable-debugify -pass-to-test sample.ll. # Suppresses verbose debugify output.; $ opt -enable-debugify -debugify-quiet -pass-to-test sample.ll. # Prepend -debugify before and append -check-debugify -strip after; # each pass on the pipeline (similar to -verify-each).; $ opt -debugify-each -O2 sample.ll. In order for ``check-debugify`` to work, the DI must be coming from; ``debugify``. Thus, modules with existing DI will be skipped. ``debugify`` can be used to test a backend, e.g:. .. code-block:: bash. $ opt -debugify < sample.ll | llc -o -. There is also a MIR-level debugify pass that can be run before each backend; pass, see:; :ref:`Mutation testing for MIR-level transformations<MIRDebugify>`. ``debugify`` in regression tests; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The output of the ``debugify`` pass must be stable enough to use in regression; tests. Changes to this pass are not allowed to break existing tests. .. note::. Regression tests must be robust. Avoid hardcoding line/variable numbers in; check lines. In cases where this can't be avoided (say, if a test wouldn't; be precise enough), moving the test to its own file is preferred. .. _MIRDebugify:. Test original debug info preservation in optimizations; ------------------------------------------------------. In addition to automatically generating debug info, the checks provided by; the ``debugify`` utility pass can also be used to test the preservation of; pre-existing debug info metadata. It could be run as follows:. .. code-block:: bash. # Run the pass by checking original Debug Info preservation.; $ opt -verify-debuginfo-preserve -pass-to-test sample.ll. # Check the preservation of original Debug Info after each pass.; $ opt -verify-each-debuginfo-preserve -O2 sample.ll. Limit number of observed functions to speed up the analysis:. .. code-block:: bash. # Test up to 100 functions (per compile unit) per pass.; $ opt -verify-each-debuginfo-preserve -O2 -debugify",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst:13392,test,tests,13392,interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,1,['test'],['tests']
Testability,"e-block:: cpp. // C; void test() {; int a = 5;; int b = a | 4 | a; // warn: identical expr on both sides; }. // C++; bool f(void);. void test(bool b) {; int i = 10;; if (f()) { // warn: true and false branches are identical; do {; i--;; } while (f());; } else {; do {; i--;; } while (f());; }; }. .. _alpha-core-PointerArithm:. alpha.core.PointerArithm (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for pointer arithmetic on locations other than array elements. .. code-block:: c. void test() {; int x;; int *p;; p = &x + 1; // warn; }. .. _alpha-core-PointerSub:. alpha.core.PointerSub (C); """"""""""""""""""""""""""""""""""""""""""""""""""; Check for pointer subtractions on two pointers pointing to different memory chunks. .. code-block:: c. void test() {; int x, y;; int d = &y - &x; // warn; }. .. _alpha-core-SizeofPtr:. alpha.core.SizeofPtr (C); """"""""""""""""""""""""""""""""""""""""""""""""; Warn about unintended use of ``sizeof()`` on pointer expressions. .. code-block:: c. struct s {};. int test(struct s *p) {; return sizeof(p);; // warn: sizeof(ptr) can produce an unexpected result; }. .. _alpha-core-StackAddressAsyncEscape:. alpha.core.StackAddressAsyncEscape (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check that addresses to stack memory do not escape the function that involves dispatch_after or dispatch_async.; This checker is a part of ``core.StackAddressEscape``, but is temporarily disabled until some false positives are fixed. .. code-block:: c. dispatch_block_t test_block_inside_block_async_leak() {; int x = 123;; void (^inner)(void) = ^void(void) {; int y = x;; ++y;; };; void (^outer)(void) = ^void(void) {; int z = x;; ++z;; inner();; };; return outer; // warn: address of stack-allocated block is captured by a; // returned block; }. .. _alpha-core-StdVariant:. alpha.core.StdVariant (C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""; Check if a value of active type is retrieved from an ``std::variant`` instance with ``std::get``.; In case of bad variant type access (the accessed type differs from the active type); a warning",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:50891,test,test,50891,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"e-block:: llvm. define void @sub1(i32* %p, i32 %v) {; entry:; ; CHECK: sub1:; ; CHECK: subl; %0 = tail call i32 @llvm.atomic.load.sub.i32.p0i32(i32* %p, i32 %v); ret void; }. define void @inc4(i64* %p) {; entry:; ; CHECK: inc4:; ; CHECK: incq; %0 = tail call i64 @llvm.atomic.load.add.i64.p0i64(i64* %p, i64 1); ret void; }. Here you can see some ""``CHECK:``"" lines specified in comments. Now you can; see how the file is piped into ``llvm-as``, then ``llc``, and the machine code; output is what we are verifying. FileCheck checks the machine code output to; verify that it matches what the ""``CHECK:``"" lines specify. The syntax of the ""``CHECK:``"" lines is very simple: they are fixed strings that; must occur in order. FileCheck defaults to ignoring horizontal whitespace; differences (e.g. a space is allowed to match a tab) but otherwise, the contents; of the ""``CHECK:``"" line is required to match some thing in the test file exactly. One nice thing about FileCheck (compared to grep) is that it allows merging; test cases together into logical groups. For example, because the test above; is checking for the ""``sub1:``"" and ""``inc4:``"" labels, it will not match; unless there is a ""``subl``"" in between those labels. If it existed somewhere; else in the file, that would not count: ""``grep subl``"" matches if ""``subl``""; exists anywhere in the file. The FileCheck -check-prefix option; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The FileCheck `-check-prefix` option allows multiple test; configurations to be driven from one `.ll` file. This is useful in many; circumstances, for example, testing different architectural variants with; :program:`llc`. Here's a simple example:. .. code-block:: llvm. ; RUN: llvm-as < %s | llc -mtriple=i686-apple-darwin9 -mattr=sse41 \; ; RUN: | FileCheck %s -check-prefix=X32; ; RUN: llvm-as < %s | llc -mtriple=x86_64-apple-darwin9 -mattr=sse41 \; ; RUN: | FileCheck %s -check-prefix=X64. define <4 x i32> @pinsrd_1(i32 %s, <4 x i32> %tmp) nounwind {; %tmp1 = ins",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst:9491,test,test,9491,interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,2,"['log', 'test']","['logical', 'test']"
Testability,e-block:: none. Logical View:; [000] {File} 'pr-43860-codeview-msvc.o' -> COFF-i386. [001] {CompileUnit} 'pr-43860.cpp'; [002] {Producer} 'Microsoft (R) Optimizing Compiler'; [002] {Function} extern not_inlined 'InlineFunction' -> 'int'; [003] {Block}; [004] {Variable} 'Var_2' -> 'int'; [003] {Variable} 'Param' -> 'int'; [003] {Variable} 'Var_1' -> 'int'; [002] {Function} extern not_inlined 'test' -> 'int'; [003] {Variable} 'A' -> 'int'; [003] {Variable} 'Param_1' -> 'int'; [003] {Variable} 'Param_2' -> 'int'. DWARF - Clang (Linux); ^^^^^^^^^^^^^^^^^^^^^. .. code-block:: none. Logical View:; [000] {File} 'pr-43860-dwarf-clang.o' -> elf64-x86-64. [001] {CompileUnit} 'pr-43860.cpp'; [002] {Producer} 'clang version 14.0.0'; [002] 2 {Function} extern inlined 'InlineFunction' -> 'int'; [003] {Block}; [004] 5 {Variable} 'Var_2' -> 'int'; [003] 2 {Parameter} 'Param' -> 'int'; [003] 3 {Variable} 'Var_1' -> 'int'; [002] 11 {Function} extern not_inlined 'test' -> 'int'; [003] 12 {Variable} 'A' -> 'int'; [003] 14 {InlinedFunction} inlined 'InlineFunction' -> 'int'; [004] {Block}; [005] {Variable} 'Var_2' -> 'int'; [004] {Parameter} 'Param' -> 'int'; [004] {Variable} 'Var_1' -> 'int'; [003] 11 {Parameter} 'Param_1' -> 'int'; [003] 11 {Parameter} 'Param_2' -> 'int'. DWARF - GCC (Linux); ^^^^^^^^^^^^^^^^^^^. .. code-block:: none. Logical View:; [000] {File} 'pr-43860-dwarf-gcc.o' -> elf64-x86-64. [001] {CompileUnit} 'pr-43860.cpp'; [002] {Producer} 'GNU C++14 9.3.0'; [002] 2 {Function} extern declared_inlined 'InlineFunction' -> 'int'; [003] {Block}; [004] 5 {Variable} 'Var_2' -> 'int'; [003] 2 {Parameter} 'Param' -> 'int'; [003] 3 {Variable} 'Var_1' -> 'int'; [002] 11 {Function} extern not_inlined 'test' -> 'int'; [003] 12 {Variable} 'A' -> 'int'; [003] 13 {InlinedFunction} declared_inlined 'InlineFunction' -> 'int'; [004] {Block}; [005] {Variable} 'Var_2' -> 'int'; [004] {Parameter} 'Param' -> 'int'; [004] {Variable} 'Var_1' -> 'int'; [003] 11 {Parameter} 'Param_1' -> 'int'; [0,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:51870,test,test,51870,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['test'],['test']
Testability,"e-level; debug information. There are two metadata primitives: strings and nodes. Metadata does not have a type, and is not a value. If referenced from a; ``call`` instruction, it uses the ``metadata`` type. All metadata are identified in syntax by an exclamation point ('``!``'). .. _metadata-string:. Metadata Nodes and Metadata Strings; -----------------------------------. A metadata string is a string surrounded by double quotes. It can; contain any character by escaping non-printable characters with; ""``\xx``"" where ""``xx``"" is the two digit hex code. For example:; ""``!""test\00""``"". Metadata nodes are represented with notation similar to structure; constants (a comma separated list of elements, surrounded by braces and; preceded by an exclamation point). Metadata nodes can have any values as; their operand. For example:. .. code-block:: llvm. !{ !""test\00"", i32 10}. Metadata nodes that aren't uniqued use the ``distinct`` keyword. For example:. .. code-block:: text. !0 = distinct !{!""test\00"", i32 10}. ``distinct`` nodes are useful when nodes shouldn't be merged based on their; content. They can also occur when transformations cause uniquing collisions; when metadata operands change. A :ref:`named metadata <namedmetadatastructure>` is a collection of; metadata nodes, which can be looked up in the module symbol table. For; example:. .. code-block:: llvm. !foo = !{!4, !3}. Metadata can be used as function arguments. Here the ``llvm.dbg.value``; intrinsic is using three metadata arguments:. .. code-block:: llvm. call void @llvm.dbg.value(metadata !24, metadata !25, metadata !26). Metadata can be attached to an instruction. Here metadata ``!21`` is attached; to the ``add`` instruction using the ``!dbg`` identifier:. .. code-block:: llvm. %indvar.next = add i64 %indvar, 1, !dbg !21. Instructions may not have multiple metadata attachments with the same; identifier. Metadata can also be attached to a function or a global variable. Here metadata; ``!22`` is attached to the",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:243748,test,test,243748,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"e-merge checks, please; `create a new issue <https://github.com/google/llvm-premerge-checks/issues/new>`_; or give a ❤️ to an existing one. Requirements; ^^^^^^^^^^^^. To get a patch on Phabricator tested, the build server must be able to apply the; patch to the checked out git repository. Please make sure that either:. * You set a git hash as ``sourceControlBaseRevision`` in Phabricator which is; available on the GitHub repository,; * **or** you define the dependencies of your patch in Phabricator,; * **or** your patch can be applied to the main branch. Only then can the build server apply the patch locally and run the builds and; tests. Accessing build results; ^^^^^^^^^^^^^^^^^^^^^^^; Phabricator will automatically trigger a build for every new patch you upload or; modify. Phabricator shows the build results at the top of the entry. Clicking on; the links (in the red box) will show more details:. .. image:: Phabricator_premerge_results.png. The CI will compile and run tests, run clang-format and clang-tidy on lines; changed. If a unit test failed, this is shown below the build status. You can also expand; the unit test to see the details:. .. image:: Phabricator_premerge_unit_tests.png. Opting Out; ^^^^^^^^^^. In case you want to opt-out entirely of pre-merge testing, add yourself to the; `OPT OUT project <https://reviews.llvm.org/project/view/83/>`_. If you decide; to opt-out, please let us know why, so we might be able to improve in the future. Operational Details; ^^^^^^^^^^^^^^^^^^^. The code responsible for running the pre-merge flow can be found in the `external; repository <https://github.com/google/llvm-premerge-checks>`_. For enhancement; ideas and most bugs, please file an issue on said repository. For immediate; operational problems, the point of contact is; `Mikhail Goncharov <mailto:goncharo@google.com>`_. Background on the pre-merge infrastructure can be found in `this 2020 DevMeeting; talk <https://llvm.org/devmtg/2020-09/slides/Goncharov-Pre-merge",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Phabricator.rst:12129,test,tests,12129,interpreter/llvm-project/llvm/docs/Phabricator.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Phabricator.rst,1,['test'],['tests']
Testability,"e. Each minimizer can be configured using the `ROOT::Math::MinimizerOptions` class. The list of possible option that can be set are:. * *Minimizer type* (`MinimizerOptions::SetMinimizerType(const char *)`) .; * *Minimizer algorithm* (`MinimizerOptions::SetMinimizerAlgorithm(const char *)`).; * *Print Level* (`MinimizerOptions::SetPrintLevel(int )`) to set the verbose printing level (default is 0).; * *Tolerance* (`MinimizerOptions::SetTolerance(double )`) tolerance used to control the iterations.; * *Maximum number of function calls* (`MinimizerOptions::SetMaxFunctionCalls(int )`).; * *Maximum number of iterations* (`MinimizerOptions::SetMaxIterations(int )`). Note that this is not used by *Minuit*; * *FCN Upper value for Error Definition* (`MinimizerOptions::SetErrorDef(double )`). Value in the minimization function used to compute the parameter errors.; The default is to get the uncertainties at the 68% CL is a value of 1 for a chi-squared function minimization and 0.5 for a log-likelihood function.; * *Strategy* (`MinimizerOptions::SetStrategy(int )`), minimization strategy used. For each minimization strategy *Minuit* uses different configuration parameters; (e.g. different requirements in computing derivatives, computing full Hessian (strategy = 2) or an approximate version. The default is a value of 1. In this case the full Hessian matrix; is computed only after the minimization.; * *Precision* (`MinimizerOptions::SetPrecision(double )`). Precision value in the evaluation of the minimization function. Default is numerical double precision. Note that not all the options are implemented by all the minimizers.; For example in *Minuit* is possible to set the maximum number of function calls, but not the maximum number of iterations. The Strategy and the Precision options apply instead only for *Minuit* (and; *Minuit2*). The class supports also setting global default values for the options, by using the static functions `MinimizerOptions::SetDefault...` (for exampl",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/FittingHistograms.md:43650,log,log-likelihood,43650,documentation/users-guide/FittingHistograms.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/FittingHistograms.md,1,['log'],['log-likelihood']
Testability,"e. a dense set). .. _dss_smallbitvector:. SmallBitVector; ^^^^^^^^^^^^^^. The SmallBitVector container provides the same interface as BitVector, but it is; optimized for the case where only a small number of bits, less than 25 or so,; are needed. It also transparently supports larger bit counts, but slightly less; efficiently than a plain BitVector, so SmallBitVector should only be used when; larger counts are rare. At this time, SmallBitVector does not support set operations (and, or, xor), and; its operator[] does not provide an assignable lvalue. .. _dss_sparsebitvector:. SparseBitVector; ^^^^^^^^^^^^^^^. The SparseBitVector container is much like BitVector, with one major difference:; Only the bits that are set, are stored. This makes the SparseBitVector much; more space efficient than BitVector when the set is sparse, as well as making; set operations O(number of set bits) instead of O(size of universe). The; downside to the SparseBitVector is that setting and testing of random bits is; O(N), and on large SparseBitVectors, this can be slower than BitVector. In our; implementation, setting or testing bits in sorted order (either forwards or; reverse) is O(1) worst case. Testing and setting bits within 128 bits (depends; on size) of the current bit is also O(1). As a general statement,; testing/setting bits in a SparseBitVector is O(distance away from last set bit). .. _dss_coalescingbitvector:. CoalescingBitVector; ^^^^^^^^^^^^^^^^^^^. The CoalescingBitVector container is similar in principle to a SparseBitVector,; but is optimized to represent large contiguous ranges of set bits compactly. It; does this by coalescing contiguous ranges of set bits into intervals. Searching; for a bit in a CoalescingBitVector is O(log(gaps between contiguous ranges)). CoalescingBitVector is a better choice than BitVector when gaps between ranges; of set bits are large. It's a better choice than SparseBitVector when find(); operations must have fast, predictable performance. Howev",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst:98348,test,testing,98348,interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,1,['test'],['testing']
Testability,"e., more than a single background and signal; class) has been enabled for these methods: MLP (NN), BDTG,; FDA.; The multiclass; functionality can be enabled with the Factory option; ""AnalysisType=multiclass"". Training data is; specified with an additional classname, e.g. via; factory->AddTree(tree,""classname"");. After the; training a genetic algorithm is invoked to determine the best; cuts for selecting a specific class, based on the figure of; merit: purity*efficiency. TMVA comes with two examples in; $ROOTSYS/tmva/test: TMVAMulticlass.C; and TMVAMulticlassApplication.C. New TMVA event vector building. The code; for splitting the input data into training and test samples for; all classes and the mixing of those samples to one training and; one test sample has been rewritten completely. The new code is; more performant and has a clearer structure. This fixes several; bugs which have been reported by some users of TMVA.; Code and performance test framework: A unit; test framework for daily software and method performance; validation has been implemented.; . Methods. BDT Automatic parameter optimisation for building the; tree architecture: The optimisation procedure uses the; performance of the trained classifier on the ""test sample"" for; finding the set of optimal parameters. Two different methods to; traverse the parameter space are available (scanning, genetic; algorithm). Currently parameter optimization is implemented only; for these three parameters that influence the tree architectur:; the maximum depth of a tree, MaxDepth, the minimum; number of events in each node, NodeMinEvents, and; the number of tress, NTrees. Optimization can; is invoked by calling; factory->OptimizeAllMethods(); prior to the call; factory->TrainAllMethods();. Automated and configurable parameter optimization is soon to; be enabled for all methods (for those parameters where; optimization is applicable).; . BDT node splitting: While Decision Trees; typically have only univariate splits, in",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v528/index.html:1430,test,test,1430,tmva/doc/v528/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v528/index.html,2,['test'],['test']
Testability,e/Matmul.cpp; flang/unittests/Runtime/MiscIntrinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/math/TwoInputSingleOutputDiff.h; libc/fuzzing/stdl,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129636,benchmark,benchmarks,129636,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,e/clc/image; - `2`; - `0`; - `2`; - :none:`0%`; * - libclc/generic/include/clc/integer; - `16`; - `13`; - `3`; - :part:`81%`; * - libclc/generic/include/clc/math; - `95`; - `92`; - `3`; - :part:`96%`; * - libclc/generic/include/clc/misc; - `2`; - `0`; - `2`; - :none:`0%`; * - libclc/generic/include/clc/relational; - `18`; - `12`; - `6`; - :part:`66%`; * - libclc/generic/include/clc/shared; - `5`; - `3`; - `2`; - :part:`60%`; * - libclc/generic/include/clc/synchronization; - `2`; - `2`; - `0`; - :good:`100%`; * - libclc/generic/include/clc/workitem; - `8`; - `8`; - `0`; - :good:`100%`; * - libclc/generic/include/integer; - `1`; - `1`; - `0`; - :good:`100%`; * - libclc/generic/include/math; - `15`; - `15`; - `0`; - :good:`100%`; * - libclc/generic/lib; - `1`; - `0`; - `1`; - :none:`0%`; * - libclc/generic/lib/math; - `8`; - `1`; - `7`; - :part:`12%`; * - libclc/generic/lib/relational; - `1`; - `0`; - `1`; - :none:`0%`; * - libclc/utils; - `1`; - `0`; - `1`; - :none:`0%`; * - libcxx/benchmarks; - `28`; - `10`; - `18`; - :part:`35%`; * - libcxx/include; - `22`; - `0`; - `22`; - :none:`0%`; * - libcxx/include/__algorithm; - `102`; - `15`; - `87`; - :part:`14%`; * - libcxx/include/__bit; - `2`; - `0`; - `2`; - :none:`0%`; * - libcxx/include/__charconv; - `3`; - `0`; - `3`; - :none:`0%`; * - libcxx/include/__chrono; - `8`; - `0`; - `8`; - :none:`0%`; * - libcxx/include/__compare; - `13`; - `1`; - `12`; - :part:`7%`; * - libcxx/include/__concepts; - `22`; - `0`; - `22`; - :none:`0%`; * - libcxx/include/__coroutine; - `4`; - `0`; - `4`; - :none:`0%`; * - libcxx/include/__filesystem; - `16`; - `3`; - `13`; - :part:`18%`; * - libcxx/include/__format; - `17`; - `2`; - `15`; - :part:`11%`; * - libcxx/include/__functional; - `27`; - `0`; - `27`; - :none:`0%`; * - libcxx/include/__ios; - `1`; - `0`; - `1`; - :none:`0%`; * - libcxx/include/__iterator; - `36`; - `0`; - `36`; - :none:`0%`; * - libcxx/include/__memory; - `19`; - `1`; - `18`; - :part:`5%`; * - libcxx/include/__numeric; ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:37815,benchmark,benchmarks,37815,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['benchmark'],['benchmarks']
Testability,e/clc/workitem/get_global_size.h; libclc/generic/include/clc/workitem/get_group_id.h; libclc/generic/include/clc/workitem/get_local_id.h; libclc/generic/include/clc/workitem/get_local_size.h; libclc/generic/include/clc/workitem/get_num_groups.h; libclc/generic/include/clc/workitem/get_work_dim.h; libclc/generic/include/integer/popcount.h; libclc/generic/include/math/clc_exp10.h; libclc/generic/include/math/clc_fma.h; libclc/generic/include/math/clc_fmod.h; libclc/generic/include/math/clc_hypot.h; libclc/generic/include/math/clc_ldexp.h; libclc/generic/include/math/clc_nextafter.h; libclc/generic/include/math/clc_pow.h; libclc/generic/include/math/clc_pown.h; libclc/generic/include/math/clc_powr.h; libclc/generic/include/math/clc_remainder.h; libclc/generic/include/math/clc_remquo.h; libclc/generic/include/math/clc_rootn.h; libclc/generic/include/math/clc_sqrt.h; libclc/generic/include/math/clc_tan.h; libclc/generic/include/math/clc_tanpi.h; libclc/generic/lib/math/ep_log.h; libcxx/benchmarks/format.bench.cpp; libcxx/benchmarks/formatted_size.bench.cpp; libcxx/benchmarks/formatter_float.bench.cpp; libcxx/benchmarks/format_to.bench.cpp; libcxx/benchmarks/format_to_n.bench.cpp; libcxx/benchmarks/to_chars.bench.cpp; libcxx/benchmarks/util_smartptr.bench.cpp; libcxx/benchmarks/variant_visit_1.bench.cpp; libcxx/benchmarks/variant_visit_2.bench.cpp; libcxx/benchmarks/variant_visit_3.bench.cpp; libcxx/include/__algorithm/adjacent_find.h; libcxx/include/__algorithm/all_of.h; libcxx/include/__algorithm/any_of.h; libcxx/include/__algorithm/count.h; libcxx/include/__algorithm/count_if.h; libcxx/include/__algorithm/find.h; libcxx/include/__algorithm/find_first_of.h; libcxx/include/__algorithm/find_if.h; libcxx/include/__algorithm/find_if_not.h; libcxx/include/__algorithm/for_each.h; libcxx/include/__algorithm/for_each_n.h; libcxx/include/__algorithm/iter_swap.h; libcxx/include/__algorithm/mismatch.h; libcxx/include/__algorithm/none_of.h; libcxx/include/__algorithm/swap_ranges.h;,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:159429,benchmark,benchmarks,159429,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,e/secondary.h; compiler-rt/lib/scudo/standalone/size_class_map.h; compiler-rt/lib/scudo/standalone/stack_depot.h; compiler-rt/lib/scudo/standalone/stats.h; compiler-rt/lib/scudo/standalone/string_utils.cpp; compiler-rt/lib/scudo/standalone/string_utils.h; compiler-rt/lib/scudo/standalone/trusty.cpp; compiler-rt/lib/scudo/standalone/trusty.h; compiler-rt/lib/scudo/standalone/tsd.h; compiler-rt/lib/scudo/standalone/tsd_exclusive.h; compiler-rt/lib/scudo/standalone/tsd_shared.h; compiler-rt/lib/scudo/standalone/vector.h; compiler-rt/lib/scudo/standalone/wrappers_c.cpp; compiler-rt/lib/scudo/standalone/wrappers_c.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_t,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:102396,test,tests,102396,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"e; -config : print ./configure options; ```. - -b ROOT session runs in batch mode, without graphics display. This; mode is useful in case one does not want to set the DISPLAY or; cannot do it for some reason. - -n usually, launching a ROOT session will execute a logon script; and quitting will execute a logoff script. This option prevents; the execution of these two scripts. - it is also possible to execute a script without entering a ROOT; session. One simply adds the name of the script(s) after the ROOT; command. Be warned: after finishing the execution of the script,; ROOT will normally enter a new session. - -q process command line script files and exit. For example if you would like to run a script `myMacro.C` in the; background, redirect the output into a file `myMacro.log`, and exit; after the script execution, use the following syntax:. ```; root -b -q myMacro.C > myMacro.log; ```. If you need to pass a parameter to the script use:. ```; root -b -q 'myMacro.C(3)' > myMacro.log; ```. Be mindful of the quotes, i.e. if you need to pass a string as a; parameter, the syntax is:. ```; root -b -q 'myMacro.C(""text"")' > myMacro.log; ```. You can build a shared library with ACLiC and then use this shared; library on the command line for a quicker execution (i.e. the compiled; speed rather than the interpreted speed). See also ""Cling the C++; Interpreter"". ```; root -b -q myMacro.so > myMacro.log; ```. ROOT has a powerful C/C++ interpreter giving you access to all available; ROOT classes, global variables, and functions via the command line. By; typing C++ statements at the prompt, you can create objects, call; functions, execute scripts, etc. For example:. ``` {.cpp}; root[] 1+sqrt(9); (const double)4.00000000000000000e+00; root[] for (int i = 0; i<4; i++) cout << ""Hello"" << i << endl; Hello 0; Hello 1; Hello 2; Hello 3; root[] .q; ```. To exit the ROOT session, type `.q`. ``` {.cpp}; root[] .q; ```. ## Using the GUI. The basic whiteboard on which an object is drawn in",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/GettingStarted.md:4318,log,log,4318,documentation/users-guide/GettingStarted.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/GettingStarted.md,1,['log'],['log']
Testability,"e; // container is; // expected; }. .. _alpha-cplusplus-MisusedMovedObject:. alpha.cplusplus.MisusedMovedObject (C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Method calls on a moved-from object and copying a moved-from object will be reported. .. code-block:: cpp. struct A {; void foo() {}; };. void f() {; A a;; A b = std::move(a); // note: 'a' became 'moved-from' here; a.foo(); // warn: method call on a 'moved-from' object 'a'; }. .. _alpha-cplusplus-SmartPtr:. alpha.cplusplus.SmartPtr (C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for dereference of null smart pointers. .. code-block:: cpp. void deref_smart_ptr() {; std::unique_ptr<int> P;; *P; // warn: dereference of a default constructed smart unique_ptr; }. alpha.deadcode; ^^^^^^^^^^^^^^; .. _alpha-deadcode-UnreachableCode:. alpha.deadcode.UnreachableCode (C, C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check unreachable code. .. code-block:: cpp. // C; int test() {; int x = 1;; while(x);; return x; // warn; }. // C++; void test() {; int a = 2;. while (a > 1); a--;. if (a > 1); a++; // warn; }. // Objective-C; void test(id x) {; return;; [x retain]; // warn; }. alpha.fuchsia; ^^^^^^^^^^^^^. .. _alpha-fuchsia-lock:. alpha.fuchsia.Lock; """"""""""""""""""""""""""""""""""""; Similarly to :ref:`alpha.unix.PthreadLock <alpha-unix-PthreadLock>`, checks for; the locking/unlocking of fuchsia mutexes. .. code-block:: cpp. spin_lock_t mtx1;. void bad1(void); {; spin_lock(&mtx1);; spin_lock(&mtx1);	// warn: This lock has already been acquired; }. alpha.llvm; ^^^^^^^^^^. .. _alpha-llvm-Conventions:. alpha.llvm.Conventions; """""""""""""""""""""""""""""""""""""""""""". Check code for LLVM codebase conventions:. * A StringRef should not be bound to a temporary std::string whose lifetime is shorter than the StringRef's.; * Clang AST nodes should not have fields that can allocate memory. alpha.osx; ^^^^^^^^^. .. _alpha-osx-cocoa-DirectIvarAssignment:. alpha.osx.cocoa.DirectIvarAssignment (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for direct assignm",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:56214,test,test,56214,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"e; it cannot be guaranteed that all options will have been initialised. Hence it; should be called from ``main``. This function can be used to gain access to options declared in libraries that; the tool writer may not have direct access to. The function retrieves a :ref:`StringMap <dss_stringmap>` that maps the option; string (e.g. ``-help``) to an ``Option*``. Here is an example of how the function could be used:. .. code-block:: c++. using namespace llvm;; int main(int argc, char **argv) {; cl::OptionCategory AnotherCategory(""Some options"");. StringMap<cl::Option*> &Map = cl::getRegisteredOptions();. //Unhide useful option and put it in a different category; assert(Map.count(""print-all-options"") > 0);; Map[""print-all-options""]->setHiddenFlag(cl::NotHidden);; Map[""print-all-options""]->setCategory(AnotherCategory);. //Hide an option we don't want to see; assert(Map.count(""enable-no-infs-fp-math"") > 0);; Map[""enable-no-infs-fp-math""]->setHiddenFlag(cl::Hidden);. //Change --version to --show-version; assert(Map.count(""version"") > 0);; Map[""version""]->setArgStr(""show-version"");. //Change --help description; assert(Map.count(""help"") > 0);; Map[""help""]->setDescription(""Shows help"");. cl::ParseCommandLineOptions(argc, argv, ""This is a small program to demo the LLVM CommandLine API"");; ...; }. .. _cl::ParseCommandLineOptions:. The ``cl::ParseCommandLineOptions`` function; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The ``cl::ParseCommandLineOptions`` function is designed to be called directly; from ``main``, and is used to fill in the values of all of the command line; option variables once ``argc`` and ``argv`` are available. The ``cl::ParseCommandLineOptions`` function requires two parameters (``argc``; and ``argv``), but may also take an optional third parameter which holds; `additional extra text`_ to emit when the ``-help`` option is invoked. The ``cl::SetVersionPrinter`` function; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The ``cl::SetVersionPrinter`` function is des",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandLine.rst:52619,assert,assert,52619,interpreter/llvm-project/llvm/docs/CommandLine.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandLine.rst,1,['assert'],['assert']
Testability,"e; output is what we are verifying. FileCheck checks the machine code output to; verify that it matches what the ""``CHECK:``"" lines specify. The syntax of the ""``CHECK:``"" lines is very simple: they are fixed strings that; must occur in order. FileCheck defaults to ignoring horizontal whitespace; differences (e.g. a space is allowed to match a tab) but otherwise, the contents; of the ""``CHECK:``"" line is required to match some thing in the test file exactly. One nice thing about FileCheck (compared to grep) is that it allows merging; test cases together into logical groups. For example, because the test above; is checking for the ""``sub1:``"" and ""``inc4:``"" labels, it will not match; unless there is a ""``subl``"" in between those labels. If it existed somewhere; else in the file, that would not count: ""``grep subl``"" matches if ""``subl``""; exists anywhere in the file. The FileCheck -check-prefix option; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The FileCheck `-check-prefix` option allows multiple test; configurations to be driven from one `.ll` file. This is useful in many; circumstances, for example, testing different architectural variants with; :program:`llc`. Here's a simple example:. .. code-block:: llvm. ; RUN: llvm-as < %s | llc -mtriple=i686-apple-darwin9 -mattr=sse41 \; ; RUN: | FileCheck %s -check-prefix=X32; ; RUN: llvm-as < %s | llc -mtriple=x86_64-apple-darwin9 -mattr=sse41 \; ; RUN: | FileCheck %s -check-prefix=X64. define <4 x i32> @pinsrd_1(i32 %s, <4 x i32> %tmp) nounwind {; %tmp1 = insertelement <4 x i32>; %tmp, i32 %s, i32 1; ret <4 x i32> %tmp1; ; X32: pinsrd_1:; ; X32: pinsrd $1, 4(%esp), %xmm0. ; X64: pinsrd_1:; ; X64: pinsrd $1, %edi, %xmm0; }. In this case, we're testing that we get the expected code generation with; both 32-bit and 64-bit code generation. The ""COM:"" directive; ~~~~~~~~~~~~~~~~~~~~. Sometimes you want to disable a FileCheck directive without removing it; entirely, or you want to write comments that mention a directive by name. The; """,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst:9956,test,test,9956,interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,1,['test'],['test']
Testability,"e; the ``indirectbr`` instruction. Finally, some targets may provide defined semantics when using the value; as the operand to an inline assembly, but that is target specific. .. _dso_local_equivalent:. DSO Local Equivalent; --------------------. ``dso_local_equivalent @func``. A '``dso_local_equivalent``' constant represents a function which is; functionally equivalent to a given function, but is always defined in the; current linkage unit. The resulting pointer has the same type as the underlying; function. The resulting pointer is permitted, but not required, to be different; from a pointer to the function, and it may have different values in different; translation units. The target function may not have ``extern_weak`` linkage. ``dso_local_equivalent`` can be implemented as such:. - If the function has local linkage, hidden visibility, or is; ``dso_local``, ``dso_local_equivalent`` can be implemented as simply a pointer; to the function.; - ``dso_local_equivalent`` can be implemented with a stub that tail-calls the; function. Many targets support relocations that resolve at link time to either; a function or a stub for it, depending on if the function is defined within the; linkage unit; LLVM will use this when available. (This is commonly called a; ""PLT stub"".) On other targets, the stub may need to be emitted explicitly. This can be used wherever a ``dso_local`` instance of a function is needed without; needing to explicitly make the original function ``dso_local``. An instance where; this can be used is for static offset calculations between a function and some other; ``dso_local`` symbol. This is especially useful for the Relative VTables C++ ABI,; where dynamic relocations for function pointers in VTables can be replaced with; static relocations for offsets between the VTable and virtual functions which; may not be ``dso_local``. This is currently only supported for ELF binary formats. .. _no_cfi:. No CFI; ------. ``no_cfi @func``. With `Control-Flow Integr",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:201777,stub,stub,201777,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['stub'],['stub']
Testability,"eBPF is reusing most of the opcode encoding from classic to simplify conversion; of classic BPF to eBPF. For arithmetic and jump instructions the 8-bit 'code'; field is divided into three parts:. ::. +----------------+--------+--------------------+; | 4 bits | 1 bit | 3 bits |; | operation code | source | instruction class |; +----------------+--------+--------------------+; (MSB) (LSB). Three LSB bits store instruction class which is one of:. ::. BPF_LD 0x0; BPF_LDX 0x1; BPF_ST 0x2; BPF_STX 0x3; BPF_ALU 0x4; BPF_JMP 0x5; (unused) 0x6; BPF_ALU64 0x7. When BPF_CLASS(code) == BPF_ALU or BPF_ALU64 or BPF_JMP,; 4th bit encodes source operand. ::. BPF_X 0x1 use src_reg register as source operand; BPF_K 0x0 use 32 bit immediate as source operand. and four MSB bits store operation code. ::. BPF_ADD 0x0 add; BPF_SUB 0x1 subtract; BPF_MUL 0x2 multiply; BPF_DIV 0x3 divide; BPF_OR 0x4 bitwise logical OR; BPF_AND 0x5 bitwise logical AND; BPF_LSH 0x6 left shift; BPF_RSH 0x7 right shift (zero extended); BPF_NEG 0x8 arithmetic negation; BPF_MOD 0x9 modulo; BPF_XOR 0xa bitwise logical XOR; BPF_MOV 0xb move register to register; BPF_ARSH 0xc right shift (sign extended); BPF_END 0xd endianness conversion. If BPF_CLASS(code) == BPF_JMP, BPF_OP(code) is one of. ::. BPF_JA 0x0 unconditional jump; BPF_JEQ 0x1 jump ==; BPF_JGT 0x2 jump >; BPF_JGE 0x3 jump >=; BPF_JSET 0x4 jump if (DST & SRC); BPF_JNE 0x5 jump !=; BPF_JSGT 0x6 jump signed >; BPF_JSGE 0x7 jump signed >=; BPF_CALL 0x8 function call; BPF_EXIT 0x9 function return. Instruction encoding (load, store); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; For load and store instructions the 8-bit 'code' field is divided as:. ::. +--------+--------+-------------------+; | 3 bits | 2 bits | 3 bits |; | mode | size | instruction class |; +--------+--------+-------------------+; (MSB) (LSB). Size modifier is one of. ::. BPF_W 0x0 word; BPF_H 0x1 half word; BPF_B 0x2 byte; BPF_DW 0x3 double word. Mode modifier is one of. ::. BPF_IMM 0x0 immediate; BPF_",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodeGenerator.rst:104395,log,logical,104395,interpreter/llvm-project/llvm/docs/CodeGenerator.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodeGenerator.rst,3,['log'],['logical']
Testability,"eCheck issues, such as; discarded overlapping ``CHECK-DAG:`` matches, implicit EOF pattern matches,; and ``CHECK-NOT:`` patterns that do not have matches. Implies ``-v``.; However, if ``-dump-input=fail`` or ``-dump-input=always``, just add that; information as input annotations instead. .. option:: --allow-deprecated-dag-overlap. Enable overlapping among matches in a group of consecutive ``CHECK-DAG:``; directives. This option is deprecated and is only provided for convenience; as old tests are migrated to the new non-overlapping ``CHECK-DAG:``; implementation. .. option:: --allow-empty. Allow checking empty input. By default, empty input is rejected. .. option:: --color. Use colors in output (autodetected by default). EXIT STATUS; -----------. If :program:`FileCheck` verifies that the file matches the expected contents,; it exits with 0. Otherwise, if not, or if an error occurs, it will exit with a; non-zero value. TUTORIAL; --------. FileCheck is typically used from LLVM regression tests, being invoked on the RUN; line of the test. A simple example of using FileCheck from a RUN line looks; like this:. .. code-block:: llvm. ; RUN: llvm-as < %s | llc -march=x86-64 | FileCheck %s. This syntax says to pipe the current file (""``%s``"") into ``llvm-as``, pipe; that into ``llc``, then pipe the output of ``llc`` into ``FileCheck``. This; means that FileCheck will be verifying its standard input (the llc output); against the filename argument specified (the original ``.ll`` file specified by; ""``%s``""). To see how this works, let's look at the rest of the ``.ll`` file; (after the RUN line):. .. code-block:: llvm. define void @sub1(i32* %p, i32 %v) {; entry:; ; CHECK: sub1:; ; CHECK: subl; %0 = tail call i32 @llvm.atomic.load.sub.i32.p0i32(i32* %p, i32 %v); ret void; }. define void @inc4(i64* %p) {; entry:; ; CHECK: inc4:; ; CHECK: incq; %0 = tail call i64 @llvm.atomic.load.add.i64.p0i64(i64* %p, i64 1); ret void; }. Here you can see some ""``CHECK:``"" lines specified in com",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst:7854,test,tests,7854,interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,2,['test'],"['test', 'tests']"
Testability,"e];. nullability.NullReturnedFromNonnull; (ObjC); Warns when a null pointer is returned from a function that has; _Nonnull return type. - (nonnull id)firstChild {; id result = nil;; if ([_children count] > 0); result = _children[0];. // Warning: nil returned from a method that is expected; // to return a non-null value; return result;; }. nullability.NullableDereferenced; (ObjC); Warns when a nullable pointer is dereferenced. struct LinkedList {; int data;; struct LinkedList *next;; };. struct LinkedList * _Nullable getNext(struct LinkedList *l);. void updateNextData(struct LinkedList *list, int newData) {; struct LinkedList *next = getNext(list);; // Warning: Nullable pointer is dereferenced; next->data = 7;; }. nullability.NullablePassedToNonnull; (ObjC); Warns when a nullable pointer is passed to a pointer which has a _Nonnull type. typedef struct Dummy { int val; } Dummy;; Dummy *_Nullable returnsNullable();; void takesNonnull(Dummy *_Nonnull);. void test() {; Dummy *p = returnsNullable();; takesNonnull(p); // warn; }. Optin Checkers. Name, DescriptionExample. cplusplus.UninitializedObject; (C++); This checker reports uninitialized fields in objects created after a constructor; call. It doesn't only find direct uninitialized fields, but rather makes a deep; inspection of the object, analyzing all of it's fields subfields. ; The checker regards inherited fields as direct fields, so one will recieve; warnings for uninitialized inherited data members as well. . It has several options:. ""Pedantic"" (boolean). If its not set or is set to false, the; checker won't emit warnings for objects that don't have at least one; initialized field. This may be set with ; -analyzer-config cplusplus.UninitializedObject:Pedantic=true.; . ""NotesAsWarnings"" (boolean). If set to true, the checker will; emit a warning for each uninitalized field, as opposed to emitting one; warning per constructor call, and listing the uninitialized fields that; belongs to it in notes. Defaults to false.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:7499,test,test,7499,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,e_tests/commands/perfect/dex_declare_address; - `7`; - `0`; - `7`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/windows_noncanonical_path/source; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_finish_test; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/expect_step_kind; - `5`; - `0`; - `5`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps; - `8`; - `2`; - `6`; - :part:`25%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools/clang-opt-bisect; - `2`; - `0`; - `2`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter-tests; - `15`; - `3`; - `12`; - :part:`20%`; * - cross-project-tests/debuginfo-tests/llgdb-tests; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb; - `2`; - `1`; - `1`; - :part:`50%`; * - flang/examples; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/examples/FlangOmpReport; - `3`; - `3`; - `0`; - :good:`100%`; * - flang/examples/PrintFlangFunctionNames; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/include/flang; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/include/flang/Common; - `21`; - `21`; - `0`; - :good:`100%`; * - flang/include/flang/Decimal; - `2`; -,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:27096,test,tests,27096,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,"e`**`::Draw` . Once bin labels have been created, they become; persistent if the histogram is written to a file or when generating; the C++ code via `SavePrimitive` . ## Histogram Stacks. A **`THStack`** is a collection of **`TH1`** (or derived) objects. Use; **`THStack`**`::Add(` **`TH1`** `*h)` to add a histogram to the stack.; The **`THStack`** does not own the objects in the list. ![Stacked histograms](pictures/0300003D.png). By default, **`THStack`**`::Draw` draws the histograms stacked as; shown in the left pad in the picture above. If the option `""nostack""`; is used, the histograms are superimposed as if they were drawn one at; a time using the `""same""` draw option `.` The right pad in this; picture illustrates the **`THStack`** drawn with the `""nostack""`; option. ``` {.cpp}; hs->Draw(""nostack"");; ```. Next is a simple example, for a more complex one see; `$ROOTSYS/tutorials/hist/hstack.C.`. ``` {.cpp}; {; THStack hs(""hs"",""test stacked histograms"");; TH1F *h1 = new TH1F(""h1"",""test hstack"",100,-4,4);; h1->FillRandom(""gaus"",20000);; h1->SetFillColor(kRed);; hs.Add(h1);; TH1F *h2 = new TH1F(""h2"",""test hstack"",100,-4,4);; h2->FillRandom(""gaus"",15000);; h2->SetFillColor(kBlue);; hs.Add(h2);; TH1F *h3 = new TH1F(""h3"",""test hstack"",100,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs.Add(h3);; TCanvas c1(""c1"",""stacked hists"",10,10,700,900);; c1.Divide (1,2);; c1.cd(1);; hs.Draw();; c1.cd(2);; hs->Draw(""nostack"");; }; ```. ## TH2Poly. `TH2Poly` is a 2D Histogram class allowing to define polygonal bins of; arbitrary shape. Each bin in the `TH2Poly` histogram is a `TH2PolyBin` object.; `TH2PolyBin` is a very simple class containing the vertices and; contents of the polygonal bin as well as several related functions. Bins are defined using one of the `AddBin()` methods. The bin; definition should be done before filling. The following very simple macro shows how to build and fill a; `TH2Poly`:. ``` {.cpp}; {; TH2Poly *h2p = new TH2Poly();; Double_t x1",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Histograms.md:59709,test,test,59709,documentation/users-guide/Histograms.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Histograms.md,2,['test'],['test']
Testability,"e`; : (`WhiteSpaceOrAnyComment`)* `LineEnd`; PreElse: `LineBegin` (`WhiteSpaceOrCComment`)*; : ""#else"" (`WhiteSpaceOrAnyComment`)* `LineEnd`; PreEndif: `LineBegin` (`WhiteSpaceOrCComment`)*; : ""#endif"" (`WhiteSpaceOrAnyComment`)* `LineEnd`. ..; PreRegContentException: `PreIfdef` | `PreElse` | `PreEndif` | EOF; PreRegion: .* - `PreRegContentException`; :| `PreIfdef`; : (`PreRegion`)*; : [`PreElse`]; : (`PreRegion`)*; : `PreEndif`. A :token:`MacroName` can be defined anywhere in a TableGen file. The name has; no value; it can only be tested to see whether it is defined. A macro test region begins with an ``#ifdef`` or ``#ifndef`` directive. If; the macro name is defined (``#ifdef``) or undefined (``#ifndef``), then the; source code between the directive and the corresponding ``#else`` or; ``#endif`` is processed. If the test fails but there is an ``#else``; clause, the source code between the ``#else`` and the ``#endif`` is; processed. If the test fails and there is no ``#else`` clause, then no; source code in the test region is processed. Test regions may be nested, but they must be properly nested. A region; started in a file must end in that file; that is, must have its; ``#endif`` in the same file. A :token:`MacroName` may be defined externally using the ``-D`` option on the; ``*-tblgen`` command line::. llvm-tblgen self-reference.td -Dmacro1 -Dmacro3. Appendix A: Bang Operators; ==========================. Bang operators act as functions in value expressions. A bang operator takes; one or more arguments, operates on them, and produces a result. If the; operator produces a boolean result, the result value will be 1 for true or 0; for false. When an operator tests a boolean argument, it interprets 0 as false; and non-0 as true. .. warning::; The ``!getop`` and ``!setop`` bang operators are deprecated in favor of; ``!getdagop`` and ``!setdagop``. ``!add(``\ *a*\ ``,`` *b*\ ``, ...)``; This operator adds *a*, *b*, etc., and produces the sum. ``!and(``\ *a*\ ``,`` *b*",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:58332,test,test,58332,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,2,['test'],['test']
Testability,"e`` to the first line, and the scripts will skip that test. It; is a good idea to explain why generated assertions will not work for the test; so future developers will understand what is going on. These are the most common scripts and their purposes/applications in generating; assertions:. .. code-block:: none. update_analyze_test_checks.py; opt -passes='print<cost-model>'. update_cc_test_checks.py; C/C++, or clang/clang++ (IR checks). update_llc_test_checks.py; llc (assembly checks). update_mca_test_checks.py; llvm-mca. update_mir_test_checks.py; llc (MIR checks). update_test_checks.py; opt. Precommit workflow for tests; ----------------------------. If the test does not crash, assert, or infinite loop, commit the test with; baseline check-lines first. That is, the test will show a miscompile or; missing optimization. Add a ""TODO"" or ""FIXME"" comment to indicate that; something is expected to change in a test. A follow-up patch with code changes to the compiler will then show check-line; differences to the tests, so it is easier to see the effect of the patch.; Remove TODO/FIXME comments added in the previous step if a problem is solved. Baseline tests (no-functional-change or NFC patch) may be pushed to main; without pre-commit review if you have commit access. Best practices for regression tests; -----------------------------------. - Use auto-generated check lines (produced by the scripts mentioned above); whenever feasible.; - Include comments about what is tested/expected in a particular test. If there; are relevant issues in the bug tracker, add references to those bug reports; (for example, ""See PR999 for more details"").; - Avoid undefined behavior and poison/undef values unless necessary. For; example, do not use patterns like ``br i1 undef``, which are likely to break; as a result of future optimizations.; - Minimize tests by removing unnecessary instructions, metadata, attributes,; etc. Tools like ``llvm-reduce`` can help automate this.; - Outside PhaseOrd",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:13127,test,tests,13127,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['tests']
Testability,"e``. By default, this option is set to *false*. When this option is enabled, warnings will be generated for scenarios like the; following:. .. code-block:: c. char* p = getenv(""VAR"");; char* pp = getenv(""VAR2""); // assumes this call can invalidate `env`; strlen(p); // warns about accessing invalid ptr. .. _security-FloatLoopCounter:. security.FloatLoopCounter (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on using a floating point value as a loop counter (CERT: FLP30-C, FLP30-CPP). .. code-block:: c. void test() {; for (float x = 0.1f; x <= 1.0f; x += 0.1f) {} // warn; }. .. _security-insecureAPI-UncheckedReturn:. security.insecureAPI.UncheckedReturn (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of functions whose return values must be always checked. .. code-block:: c. void test() {; setuid(1); // warn; }. .. _security-insecureAPI-bcmp:. security.insecureAPI.bcmp (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'bcmp' function. .. code-block:: c. void test() {; bcmp(ptr0, ptr1, n); // warn; }. .. _security-insecureAPI-bcopy:. security.insecureAPI.bcopy (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'bcopy' function. .. code-block:: c. void test() {; bcopy(src, dst, n); // warn; }. .. _security-insecureAPI-bzero:. security.insecureAPI.bzero (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'bzero' function. .. code-block:: c. void test() {; bzero(ptr, n); // warn; }. .. _security-insecureAPI-getpw:. security.insecureAPI.getpw (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'getpw' function. .. code-block:: c. void test() {; char buff[1024];; getpw(2, buff); // warn; }. .. _security-insecureAPI-gets:. security.insecureAPI.gets (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'gets' function. .. code-block:: c. void test() {; char buff[1024];; gets(buff); // warn; }. .. _security-insecureAPI-mkstemp:. security.insecureAPI.mkstemp (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn when 'mkstemp' is passed fewer than 6 X's in the",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:22940,test,test,22940,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"ead generates a format that can be used with Brendan Gregg's; FlameGraph tool, currently available on `github; <https://github.com/brendangregg/FlameGraph>`_. To generate output for a flamegraph, a few more options are necessary. - ``--all-stacks`` - Emits all of the stacks.; - ``--stack-format`` - Choose the flamegraph output format 'flame'.; - ``--aggregation-type`` - Choose the metric to graph. You may pipe the command output directly to the flamegraph tool to obtain an; svg file. ::. $ llvm-xray stack xray-log.llc.5rqxkU --instr_map=./bin/llc --stack-format=flame --aggregation-type=time --all-stacks | \; /path/to/FlameGraph/flamegraph.pl > flamegraph.svg. If you open the svg in a browser, mouse events allow exploring the call stacks. Chrome Trace Viewer Visualization; ---------------------------------. We can also generate a trace which can be loaded by the Chrome Trace Viewer; from the same generated trace:. ::. $ llvm-xray convert --symbolize --instr_map=./bin/llc \; --output-format=trace_event xray-log.llc.5rqxkU \; | gzip > llc-trace.txt.gz. From a Chrome browser, navigating to ``chrome:///tracing`` allows us to load; the ``sample-trace.txt.gz`` file to visualize the execution trace. Further Exploration; -------------------. The ``llvm-xray`` tool has a few other subcommands that are in various stages; of being developed. One interesting subcommand that can highlight a few; interesting things is the ``graph`` subcommand. Given for example the following; toy program that we build with XRay instrumentation, we can see how the; generated graph may be a helpful indicator of where time is being spent for the; application. .. code-block:: c++. // sample.cc; #include <iostream>; #include <thread>. [[clang::xray_always_instrument]] void f() {; std::cerr << '.';; }. [[clang::xray_always_instrument]] void g() {; for (int i = 0; i < 1 << 10; ++i) {; std::cerr << '-';; }; }. int main(int argc, char* argv[]) {; std::thread t1([] {; for (int i = 0; i < 1 << 10; ++i); f();;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRayExample.rst:13621,log,log,13621,interpreter/llvm-project/llvm/docs/XRayExample.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRayExample.rst,1,['log'],['log']
Testability,"ead, one should use HybridCalculator's; ForcePriorNuisanceNull and ForcePriorNuisanceAlt. HybridCalculatorOriginal. Apply a fix for test statistic = 3 (profile likelihood); Apply a fix for using non-extended pdf. TestStatSampler and TestStatistics. Cleanup of the interfaces.; TestStatistics now have a method PValueIsRightTail to specify the sign conventions for the test statistic. This is used when making plots and calculating p-values.; make clear that TestStatistic::Evaluate should take data and values of the parameters that define the null.; Add method TestStatSampler::SetParametersForTestStat that ; allows for greater control of parameters used for generating toy data; and parameters used for evaluating the test statistic.; ProfileLikelihoodTestStatUsing the raw profile likelihood while reviewing the old algorithm used to provide robustness in situations with local minima.; New test statistic classes:; ; SimpleLikelihoodRatioTestStat : log L_1 / L_0; RatioOfProfiledLikelihoodsTestStat: log L(mu_1, hat(nu_1))/L(mu_0,hat(nu_0)); MaxLikelihoodEstimateTestStat: the MLE of a specified parameter. ToyMCSampler. New version of ToyMCSampler which can smear the nuisance; parameters according to their distributions for use with; HybridCalculator; Updated class structure: ToyMCSampler is a particular implementation of a TestStatSampler and runs with any TestStatistic. It returns the result in an instance of SamplingDistribution.; Supports Importance Sampling: Improves sampling the tails of a distribution by generating toys from a user supplied importance density and a reweighing procedure of the result.; Supports Adaptive Sampling: extends the run until a given number of toys is reached in the tail(s).; Parallelization using PROOF(-Lite) is supported. It is enabled by supplying a ProofConfig instance. BayesianCalculator. Improve the way the class performs the numerical integration to; find the interval and/or the posterior function.; In case of complex; numerical calculatio",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v528/index.html:7101,test,test,7101,roofit/doc/v528/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v528/index.html,3,"['log', 'test']","['log', 'test']"
Testability,"ead; local variables, using TLS support. If `-fno-openmp-use-tls`; is provided or target does not support TLS, code generation for threadprivate; variables relies on OpenMP runtime library. .. _opencl:. OpenCL Features; ===============. Clang can be used to compile OpenCL kernels for execution on a device; (e.g. GPU). It is possible to compile the kernel into a binary (e.g. for AMDGPU); that can be uploaded to run directly on a device (e.g. using; `clCreateProgramWithBinary; <https://www.khronos.org/registry/OpenCL/specs/opencl-1.1.pdf#111>`_) or; into generic bitcode files loadable into other toolchains. Compiling to a binary using the default target from the installation can be done; as follows:. .. code-block:: console. $ echo ""kernel void k(){}"" > test.cl; $ clang test.cl. Compiling for a specific target can be done by specifying the triple corresponding; to the target, for example:. .. code-block:: console. $ clang --target=nvptx64-unknown-unknown test.cl; $ clang --target=amdgcn-amd-amdhsa -mcpu=gfx900 test.cl. Compiling to bitcode can be done as follows:. .. code-block:: console. $ clang -c -emit-llvm test.cl. This will produce a file `test.bc` that can be used in vendor toolchains; to perform machine code generation. Note that if compiled to bitcode for generic targets such as SPIR/SPIR-V,; portable IR is produced that can be used with various vendor; tools as well as open source tools such as `SPIRV-LLVM Translator; <https://github.com/KhronosGroup/SPIRV-LLVM-Translator>`_; to produce SPIR-V binary. More details are provided in `the offline; compilation from OpenCL kernel sources into SPIR-V using open source; tools; <https://github.com/KhronosGroup/OpenCL-Guide/blob/main/chapters/os_tooling.md>`_.; From clang 14 onwards SPIR-V can be generated directly as detailed in; :ref:`the SPIR-V support section <spir-v>`. Clang currently supports OpenCL C language standards up to v2.0. Clang mainly; supports full profile. There is only very limited support of the embe",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:141188,test,test,141188,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"ease, etc.) via; --param=build_config=(build config). You may also need to specify; the build mode (Win32, etc) via --param=build_mode=(build mode).; Additionally, you will need to specify the lit site configuration which; lives in (build dir)\tools\clang\test, via; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg.; ; To run a single test:. python (path to llvm)\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg; (path to llvm)\llvm\tools\clang\test\(dir)\(test). For example:. python C:\Tools\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site_config=C:\Tools\build\tools\clang\test\lit.site.cfg; C:\Tools\llvm\tools\clang\test\Sema\wchar.c. The -sv option above tells the runner to show the test output if; any tests failed, to help you determine the cause of failure.; You can also pass in the --no-progress-bar option if you wish to disable; progress indications while the tests are running.; Your output might look something like this:; lit.py: lit.cfg:152: note: using clang: 'C:\Tools\llvm\bin\Release\clang.EXE'; -- Testing: Testing: 2534 tests, 4 threads --; Testing: 0 .. 10.. 20.. 30.. 40.. 50.. 60.. 70.. 80.. 90..; Testing Time: 81.52s; Passed : 2503; Expectedly Failed: 28; Unsupported : 3. The statistic, ""Failed"" (not shown if all tests pass), is the important one. Testing changes affecting libc++. Some changes in Clang affect libc++,; for example:. Changing the output of Clang's diagnostics.; Changing compiler builtins, especially the builtins used for type traits; or replacements of library functions like std::move or; std::forward. After adjusting libc++ to work with the changes, the next revision will be; tested by libc++'s; pre-commit CI. For most configurations, the pre-commit CI uses a recent; nightly build of Clang from LLVM's main; branch. These configurations do not use the Clang changes in the; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html:7483,test,tests,7483,interpreter/llvm-project/clang/www/hacking.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html,1,['test'],['tests']
Testability,"ebugging or you may be required to put the files; into %USERPROFILE%\Documents\Visual Studio <version>\Visualizers; or create a symbolic link so they update automatically. See; ; Microsoft's documentation for more details on use of NATVIS. Testing. Testing on Unix-like Systems. Clang includes a basic regression suite in the tree which can be; run with make test from the top-level clang directory, or; just make in the test sub-directory.; make VERBOSE=1 can be used to show more detail; about what is being run.; If you built LLVM and Clang using CMake, the test suite can be run; with make check-clang from the top-level LLVM directory.; The tests primarily consist of a test runner script running the compiler; under test on individual test files grouped in the directories under the; test directory. The individual test files include comments at the; beginning indicating the Clang compile options to use, to be read; by the test runner. Embedded comments also can do things like telling; the test runner that an error is expected at the current line.; Any output files produced by the test will be placed under; a created Output directory.; During the run of make test, the terminal output will; display a line similar to the following:; --- Running clang tests for i686-pc-linux-gnu ---; followed by a line continually overwritten with the current test; file being compiled, and an overall completion percentage.; After the make test run completes, the absence of any; Failing Tests (count): message indicates that no tests; failed unexpectedly. If any tests did fail, the; Failing Tests (count): message will be followed by a list; of the test source file paths that failed. For example:. Failing Tests (3):; /home/john/llvm/tools/clang/test/SemaCXX/member-name-lookup.cpp; /home/john/llvm/tools/clang/test/SemaCXX/namespace-alias.cpp; /home/john/llvm/tools/clang/test/SemaCXX/using-directive.cpp. If you used the make VERBOSE=1 option, the terminal; output will reflect the error messages f",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html:3205,test,test,3205,interpreter/llvm-project/clang/www/hacking.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html,1,['test'],['test']
Testability,"ebuginfo-analyzer --attribute=level,format; --output-sort=name; --select-types=Typedef; --report=list; --print=types; pr-44884-*.o. Logical View:; [000] {File} 'pr-44884-codeview-clang.o' -> COFF-x86-64. [001] {CompileUnit} 'pr_44884.cpp'; [003] {TypeAlias} 'FLOAT' -> 'float'; [003] {TypeAlias} 'INT' -> 'int'. Logical View:; [000] {File} 'pr-44884-codeview-msvc.o' -> COFF-i386. [001] {CompileUnit} 'pr_44884.cpp'; [004] {TypeAlias} 'FLOAT' -> 'float'; [003] {TypeAlias} 'INT' -> 'int'. Logical View:; [000] {File} 'pr-44884-dwarf-clang.o' -> elf64-x86-64. [001] {CompileUnit} 'pr_44884.cpp'; [003] 7 {TypeAlias} 'FLOAT' -> 'float'; [003] 4 {TypeAlias} 'INT' -> 'int'. Logical View:; [000] {File} 'pr-44884-dwarf-gcc.o' -> elf32-littlearm. [001] {CompileUnit} 'pr_44884.cpp'; [004] 7 {TypeAlias} 'FLOAT' -> 'float'; [003] 4 {TypeAlias} 'INT' -> 'int'. It also shows, that the CodeView debug information does not generate; source code line numbers for the those logical types. The logical view; is sorted by the types name. TEST CASE 4 - MISSING NESTED ENUMERATIONS; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; The below example is used to show different output generated by; :program:`llvm-debuginfo-analyzer`. We compiled the example for an X86; Codeview and ELF targets with recent versions of Clang, GCC and MSVC; (-O0 -g). .. code-block:: c++. 1 struct Struct {; 2 union Union {; 3 enum NestedEnum { RED, BLUE };; 4 };; 5 Union U;; 6 };; 7; 8 Struct S;; 9 int test() {; 10 return S.U.BLUE;; 11 }. The above test is used to illustrate a scope issue found in the Clang; compiler:; `PR46466 (Bugs LLVM) <https://bugs.llvm.org/show_bug.cgi?id=46466>`_ /; `PR45811 (GitHub LLVM) <https://github.com/llvm/llvm-project/issues/45811>`_. These are the logical views that :program:`llvm-debuginfo-analyzer`; generates for 3 different compilers (MSVC, Clang and GCC), emitting; different debug information formats (CodeView, DWARF) on different; platforms. .. code-block:: none. llvm-debuginfo-analyzer --at",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:41947,log,logical,41947,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['log'],['logical']
Testability,"ecause it is a work in progress and is not yet finished:. * Overall, there is no way to define or match SelectionDAG nodes that define; multiple values (e.g. ``SMUL_LOHI``, ``LOAD``, ``CALL``, etc). This is the; biggest reason that you currently still *have to* write custom C++ code; for your instruction selector. * There is no great way to support matching complex addressing modes yet. In; the future, we will extend pattern fragments to allow them to define multiple; values (e.g. the four operands of the `X86 addressing mode`_, which are; currently matched with custom C++ code). In addition, we'll extend fragments; so that a fragment can match multiple different patterns. * We don't automatically infer flags like ``isStore``/``isLoad`` yet. * We don't automatically generate the set of supported registers and operations; for the `Legalizer`_ yet. * We don't have a way of tying in custom legalized nodes yet. Despite these limitations, the instruction selector generator is still quite; useful for most of the binary and logical operations in typical instruction; sets. If you run into any problems or can't figure out how to do something,; please let Chris know!. .. _Scheduling and Formation:; .. _SelectionDAG Scheduling and Formation:. SelectionDAG Scheduling and Formation Phase; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The scheduling phase takes the DAG of target instructions from the selection; phase and assigns an order. The scheduler can pick an order depending on; various constraints of the machines (i.e. order for minimal register pressure or; try to cover instruction latencies). Once an order is established, the DAG is; converted to a list of :raw-html:`<tt>` `MachineInstr`_\s :raw-html:`</tt>` and; the SelectionDAG is destroyed. Note that this phase is logically separate from the instruction selection phase,; but is tied to it closely in the code because it operates on SelectionDAGs. Future directions for the SelectionDAG; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodeGenerator.rst:53242,log,logical,53242,interpreter/llvm-project/llvm/docs/CodeGenerator.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodeGenerator.rst,1,['log'],['logical']
Testability,"ecause; the feature they test was broken and has been fixed). **FAIL**. The test failed. **UNRESOLVED**. The test result could not be determined. For example, this occurs when the test; could not be run, the test itself is invalid, or the test was interrupted. **UNSUPPORTED**. The test is not supported in this environment. This is used by test formats; which can report unsupported tests. **TIMEOUT**. The test was run, but it timed out before it was able to complete. This is; considered a failure. Depending on the test format tests may produce additional information about; their status (generally only for failures). See the :ref:`output-options`; section for more information. .. _lit-infrastructure:. LIT INFRASTRUCTURE; ------------------. This section describes the :program:`lit` testing architecture for users interested in; creating a new :program:`lit` testing implementation, or extending an existing one. :program:`lit` proper is primarily an infrastructure for discovering and running; arbitrary tests, and to expose a single convenient interface to these; tests. :program:`lit` itself doesn't know how to run tests, rather this logic is; defined by *test suites*. TEST SUITES; ~~~~~~~~~~~. As described in :ref:`test-discovery`, tests are always located inside a *test; suite*. Test suites serve to define the format of the tests they contain, the; logic for finding those tests, and any additional information to run the tests. :program:`lit` identifies test suites as directories containing ``lit.cfg`` or; ``lit.site.cfg`` files (see also :option:`--config-prefix`). Test suites are; initially discovered by recursively searching up the directory hierarchy for; all the input files passed on the command line. You can use; :option:`--show-suites` to display the discovered test suites at startup. Once a test suite is discovered, its config file is loaded. Config files; themselves are Python modules which will be executed. When the config file is; executed, two important globa",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:13977,test,tests,13977,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,2,['test'],['tests']
Testability,"ecific files in a build, without affecting the main compilation flags; used for the other files in the project. In these cases, you can use the flag ``-fno-profile-instr-generate`` (or; ``-fno-profile-generate``) to disable profile generation, and; ``-fno-profile-instr-use`` (or ``-fno-profile-use``) to disable profile use. Note that these flags should appear after the corresponding profile; flags to have an effect. .. note::. When none of the translation units inside a binary is instrumented, in the; case of Fuchsia the profile runtime will not be linked into the binary and; no profile will be produced, while on other platforms the profile runtime; will be linked and profile will be produced but there will not be any; counters. Instrumenting only selected files or functions; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sometimes it's useful to only instrument certain files or functions. For; example in automated testing infrastructure, it may be desirable to only; instrument files or functions that were modified by a patch to reduce the; overhead of instrumenting a full system. This can be done using the ``-fprofile-list`` option. .. option:: -fprofile-list=<pathname>. This option can be used to apply profile instrumentation only to selected; files or functions. ``pathname`` should point to a file in the; :doc:`SanitizerSpecialCaseList` format which selects which files and; functions to instrument. .. code-block:: console. $ clang++ -O2 -fprofile-instr-generate -fprofile-list=fun.list code.cc -o code. The option can be specified multiple times to pass multiple files. .. code-block:: console. $ clang++ -O2 -fprofile-instr-generate -fcoverage-mapping -fprofile-list=fun.list -fprofile-list=code.list code.cc -o code. Supported sections are ``[clang]``, ``[llvm]``, and ``[csllvm]`` representing; clang PGO, IRPGO, and CSIRPGO, respectively. Supported prefixes are ``function``; and ``source``. Supported categories are ``allow``, ``skip``, and ``forbid``.; ``skip`` adds ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:115997,test,testing,115997,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['testing']
Testability,"ecifies the number of bytes to be used when; copying the variable to the output buffer. The line below describes; `ntrack` to be written as a 16-bit integer (rather than a 32-bit; integer). ``` {.cpp}; ""ntrack/I2""; ```. With this Branch method, you can also add a leaf that holds an entire; array of variables. To add an array of floats use the `f[n]` notation; when describing the leaf. ``` {.cpp}; Float_t f[10];; tree->Branch(""fBranch"",f,""f[10]/F"");; ```. You can also add an array of variable length:. ``` {.cpp}; {; TFile *f = new TFile(""peter.root"",""recreate"");; Int_t nPhot;; Float_t E[500];; TTree* nEmcPhotons = new TTree(""nEmcPhotons"",""EMC Photons"");; nEmcPhotons->Branch(""nPhot"",&nPhot,""nPhot/I"");; nEmcPhotons->Branch(""E"",E,""E[nPhot]/F"");; }; ```. See ""Example 2: A Tree with a C Structure"" below; (`$ROOTSYS/tutorials/tree/tree2.C`) and `staff.C` at the beginning of; this chapter. ## Adding a TBranch to Hold an Object. To write a branch to hold an event object, we need to load the; definition of the `Event` class, which is in `$ROOTSYS/test/libEvent.so`; (if it doesn't exist type make in `$ROOTSYS/test`). An object can be; saved in a tree if a ROOT dictionary for its class has been generated; and loaded. ``` {.cpp}; root[] .L libEvent.so; ```. First, we need to open a file and create a tree. ``` {.cpp}; root[] TFile *f = new TFile(""AFile.root"",""RECREATE""); root[] TTree *tree = new TTree(""T"",""A Root Tree""); ```. We need to create a pointer to an `Event` object that will be used as a; reference in the `TTree::Branch` method. Then we create a branch; with the `TTree::Branch` method. ``` {.cpp}; root[] Event *event = new Event(); root[] tree->Branch(""EventBranch"",""Event"",&event,32000,99); ```. To add a branch to hold an object we use the signature above. The first; parameter is the name of the branch. The second parameter is the name of; the class of the object to be stored. The third parameter is the address; of a pointer to the object to be stored. Note that it is an",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md:23242,test,test,23242,documentation/users-guide/Trees.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md,1,['test'],['test']
Testability,eclare_file/precompiled_binary_different_dir/source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/windows_noncanonical_path/source; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_finish_test; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/expect_step_kind; - `5`; - `0`; - `5`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps; - `8`; - `2`; - `6`; - :part:`25%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools/clang-opt-bisect; - `2`; - `0`; - `2`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter-tests; - `15`; - `3`; - `12`; - :part:`20%`; * - cross-project-tests/debuginfo-tests/llgdb-tests; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb; - `2`; - `1`; - `1`; - :part:`50%`; * - flang/examples; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/examples/FlangOmpReport; - `3`; - `3`; - `0`; - :good:`100%`; * - flang/examples/PrintFlangFunctionNames; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/include/flang; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/include/flang/Common; - `21`; - `21`; - `0`; - :good:`100%`; * - flang/include/flang/Decimal; - `2`; - `2`; - `0`; - :good:`100%`; * - flang/include/flang/Evaluate; - `23`; - `23`; - `0`; - :good:`100%`; * - flang/include/flang/Frontend; - `11`; - `10`; - `1`; - :part:`90%`; * - flang/include/flang/FrontendTool; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/include/flang/Lower; - `25`; - `24`; - `1`; - :part:`96%`; * - flang/include/flang/Lower/Support; - `2`; - `2`; - `0`; - :good:`100%`; * - flang/include/flang/Optimizer/Builder; - `7`; - `7`; - `0`; - :goo,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:27560,test,tests,27560,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,"ecover=; <controlling-code-generation>` flag. Forward-Edge CFI for Virtual Calls; ==================================. This scheme checks that virtual calls take place using a vptr of the correct; dynamic type; that is, the dynamic type of the called object must be a; derived class of the static type of the object used to make the call.; This CFI scheme can be enabled on its own using ``-fsanitize=cfi-vcall``. For this scheme to work, all translation units containing the definition; of a virtual member function (whether inline or not), other than members; of :ref:`ignored <cfi-ignorelist>` types or types with public :doc:`LTO; visibility <LTOVisibility>`, must be compiled with ``-flto`` or ``-flto=thin``; enabled and be statically linked into the program. Performance; -----------. A performance overhead of less than 1% has been measured by running the; Dromaeo benchmark suite against an instrumented version of the Chromium; web browser. Another good performance benchmark for this mechanism is the; virtual-call-heavy SPEC 2006 xalancbmk. Note that this scheme has not yet been optimized for binary size; an increase; of up to 15% has been observed for Chromium. Bad Cast Checking; =================. This scheme checks that pointer casts are made to an object of the correct; dynamic type; that is, the dynamic type of the object must be a derived class; of the pointee type of the cast. The checks are currently only introduced; where the class being casted to is a polymorphic class. Bad casts are not in themselves control flow integrity violations, but they; can also create security vulnerabilities, and the implementation uses many; of the same mechanisms. There are two types of bad cast that may be forbidden: bad casts; from a base class to a derived class (which can be checked with; ``-fsanitize=cfi-derived-cast``), and bad casts from a pointer of; type ``void*`` or another unrelated type (which can be checked with; ``-fsanitize=cfi-unrelated-cast``). The difference betwe",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ControlFlowIntegrity.rst:4980,benchmark,benchmark,4980,interpreter/llvm-project/clang/docs/ControlFlowIntegrity.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ControlFlowIntegrity.rst,1,['benchmark'],['benchmark']
Testability,"ecrease overall compile time by 20%. This guide walks you through how to build Clang with PGO, though it also applies; to other subprojects, such as LLD. If you want to build other software with PGO, see the `end-user documentation; for PGO <https://clang.llvm.org/docs/UsersManual.html#profile-guided-optimization>`_. Using preconfigured CMake caches; ================================. See https://llvm.org/docs/AdvancedBuilds.html#multi-stage-pgo. Using the script; ================. We have a script at ``utils/collect_and_build_with_pgo.py``. This script is; tested on a few Linux flavors, and requires a checkout of LLVM, Clang, and; compiler-rt. Despite the name, it performs four clean builds of Clang, so it; can take a while to run to completion. Please see the script's ``--help`` for; more information on how to run it, and the different options available to you.; If you want to get the most out of PGO for a particular use-case (e.g. compiling; a specific large piece of software), please do read the section below on; 'benchmark' selection. Please note that this script is only tested on a few Linux distros. Patches to; add support for other platforms, as always, are highly appreciated. :). This script also supports a ``--dry-run`` option, which causes it to print; important commands instead of running them. Selecting 'benchmarks'; ======================. PGO does best when the profiles gathered represent how the user plans to use the; compiler. Notably, highly accurate profiles of llc building x86_64 code aren't; incredibly helpful if you're going to be targeting ARM. By default, the script above does two things to get solid coverage. It:. - runs all of Clang and LLVM's lit tests, and; - uses the instrumented Clang to build Clang, LLVM, and all of the other; LLVM subprojects available to it. Together, these should give you:. - solid coverage of building C++,; - good coverage of building C,; - great coverage of running optimizations,; - great coverage of the backend fo",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToBuildWithPGO.rst:1412,benchmark,benchmark,1412,interpreter/llvm-project/llvm/docs/HowToBuildWithPGO.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToBuildWithPGO.rst,1,['benchmark'],['benchmark']
Testability,"ect metrics such as benchmark runtime, compilation time and; code size. The test-suite is divided into several directories:. - `SingleSource/`. Contains test programs that are only a single source file in size. A; subdirectory may contain several programs. - `MultiSource/`. Contains subdirectories which entire programs with multiple source files.; Large benchmarks and whole applications go here. - `MicroBenchmarks/`. Programs using the [google-benchmark](https://github.com/google/benchmark); library. The programs define functions that are run multiple times until the; measurement results are statistically significant. - `External/`. Contains descriptions and test data for code that cannot be directly; distributed with the test-suite. The most prominent members of this; directory are the SPEC CPU benchmark suites.; See [External Suites](#external-suites). - `Bitcode/`. These tests are mostly written in LLVM bitcode. - `CTMark/`. Contains symbolic links to other benchmarks forming a representative sample; for compilation performance measurements. ### Benchmarks. Every program can work as a correctness test. Some programs are unsuitable for; performance measurements. Setting the `TEST_SUITE_BENCHMARKING_ONLY` CMake; option to `ON` will disable them. Configuration; -------------. The test-suite has configuration options to customize building and running the; benchmarks. CMake can print a list of them:. ```bash; % cd test-suite-build; # Print basic options:; % cmake -LH; # Print all options:; % cmake -LAH; ```. ### Common Configuration Options. - `CMAKE_C_FLAGS`. Specify extra flags to be passed to C compiler invocations. The flags are; also passed to the C++ compiler and linker invocations. See; [https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_FLAGS.html](https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_FLAGS.html). - `CMAKE_C_COMPILER`. Select the C compiler executable to be used. Note that the C++ compiler is; inferred automatically i.e. when specifying ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:3424,benchmark,benchmarks,3424,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['benchmark'],['benchmarks']
Testability,"ect thing to do is, and write it down here. #. Configure and build ``llvm``. #. Configure and build ``llvm-gcc``. #. Install ``llvm-gcc`` somewhere. #. *Re-configure* ``llvm`` from the top level of each build tree (LLVM; object directory tree) in which you want to run the test suite, just; as you do before building LLVM. During the *re-configuration*, you must either: (1) have ``llvm-gcc``; you just built in your path, or (2) specify the directory where your; just-built ``llvm-gcc`` is installed using; ``--with-llvmgccdir=$LLVM_GCC_DIR``. You must also tell the configure machinery that the test suite is; available so it can be configured for your build tree:. .. code-block:: bash. % cd $LLVM_OBJ_ROOT ; $LLVM_SRC_ROOT/configure [--with-llvmgccdir=$LLVM_GCC_DIR]. [Remember that ``$LLVM_GCC_DIR`` is the directory where you; *installed* llvm-gcc, not its src or obj directory.]. #. You can now run the test suite from your build tree as follows:. .. code-block:: bash. % cd $LLVM_OBJ_ROOT/projects/test-suite; % make. Note that the second and third steps only need to be done once. After; you have the suite checked out and configured, you don't need to do it; again (unless the test code or configure script changes). Configuring External Tests; ==========================. In order to run the External tests in the ``test-suite`` module, you; must specify *--with-externals*. This must be done during the; *re-configuration* step (see above), and the ``llvm`` re-configuration; must recognize the previously-built ``llvm-gcc``. If any of these is; missing or neglected, the External tests won't work. * *--with-externals*. * *--with-externals=<directory>*. This tells LLVM where to find any external tests. They are expected to; be in specifically named subdirectories of <``directory``>. If; ``directory`` is left unspecified, ``configure`` uses the default value; ``/home/vadve/shared/benchmarks/speccpu2000/benchspec``. Subdirectory; names known to LLVM include:. * spec95. * speccpu2000.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst:1648,test,test-suite,1648,interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,1,['test'],['test-suite']
Testability,"ectively. If neither is specified, ""CODE"" is assumed. DATA is; symbolized as address and symbol size rather than line number. :program:`llvm-symbolizer` parses options from the environment variable; ``LLVM_SYMBOLIZER_OPTS`` after parsing options from the command line.; ``LLVM_SYMBOLIZER_OPTS`` is primarily useful for supplementing the command-line; options when :program:`llvm-symbolizer` is invoked by another program or; runtime. EXAMPLES; --------. All of the following examples use the following two source files as input. They; use a mixture of C-style and C++-style linkage to illustrate how these names are; printed differently (see :option:`--demangle`). .. code-block:: c. // test.h; extern ""C"" inline int foz() {; return 1234;; }. .. code-block:: c. // test.cpp; #include ""test.h""; int bar=42;. int foo() {; return bar;; }. int baz() {; volatile int k = 42;; return foz() + k;; }. int main() {; return foo() + baz();; }. These files are built as follows:. .. code-block:: console. $ clang -g test.cpp -o test.elf; $ clang -g -O2 test.cpp -o inlined.elf. Example 1 - addresses and object on command-line:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf 0x4004d0 0x400490; foz; /tmp/test.h:1:0. baz(); /tmp/test.cpp:11:0. Example 2 - addresses on standard input:. .. code-block:: console. $ cat addr.txt; 0x4004a0; 0x400490; 0x4004d0; $ llvm-symbolizer --obj=test.elf < addr.txt; main; /tmp/test.cpp:15:0. baz(); /tmp/test.cpp:11:0. foz; /tmp/./test.h:1:0. Example 3 - object specified with address:. .. code-block:: console. $ llvm-symbolizer ""test.elf 0x400490"" ""FILE:inlined.elf 0x400480""; baz(); /tmp/test.cpp:11:0. foo(); /tmp/test.cpp:8:10. $ cat addr2.txt; FILE:test.elf 0x4004a0; inlined.elf 0x400480. $ llvm-symbolizer < addr2.txt; main; /tmp/test.cpp:15:0. foo(); /tmp/test.cpp:8:10. Example 4 - BUILDID and FILE prefixes:. .. code-block:: console. $ llvm-symbolizer ""FILE:test.elf 0x400490"" ""DATA BUILDID:123456789abcdef 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 62955",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:2517,test,test,2517,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"ector of size 3 ( v[0]=v[1]=v[2]=0); SVector<double,3> v;; double d[3] = {1,2,3};; SVector<double,3> v(d,3); //create a vector from a C array; ```. #### Accessing and Setting Methods. The single vector elements can be set or retrieved using the; `operator[i]`, `operator(i)` or the iterator interface. Notice that the; index starts from zero and not from one as in FORTRAN. Also no check is; performed on the passed index. The full vector elements can be set also; by using the SetElements function passing a generic iterator. ``` {.cpp}; double x = m(i); // return the i-th element; x = *(m.begin()+i); // return the i-th element; v[0] = 1; // set the first element; v(1) = 2; // set the second element; *(v.begin()+3) = 3; // set the third element; std::vector<double> w(3);. // set vector elements from a std::vector<double>::iterator; v.SetElements(w.begin(),w.end());; ```. In addition there are methods to place a sub-vector in a vector. If the; size of the sub-vector is larger than the vector size a static assert (a; compilation error) is produced. ``` {.cpp}; SVector>double,N> v;; SVector>double,M> w;; // M <= N otherwise a compilation error is obtained later; // place a vector of size M starting from; // element ioff, v[ioff+i]=w[i]; v.Place_at(w,ioff);; // return a sub-vector of size M starting from; // v[ioff]: w[i]=v[ioff+i]; w = v.Sub < SVector>double,M> > (ioff);; ```. For the vector functions see later in the Matrix and Vector Operators; and Functions paragraph. ### Example: Matrix Class (SMatrix). The template class **`ROOT::Math::SMatrix`** represents a matrix of; arbitrary type with `nrows` `x` `ncol` dimension. The class has 4; template parameters, which define at compile time, its properties:. - type of the contained elements, T, for example float or double;. - number of rows;. - number of columns;. - representation type. This is a class describing the underlined; storage model of the Matrix. Presently exists only two types of this; class:. - **`ROOT::Math::Ma",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/MathLibraries.md:104156,assert,assert,104156,documentation/users-guide/MathLibraries.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/MathLibraries.md,1,['assert'],['assert']
Testability,"ects ``-fwrapv`` and ``-ftrapv`` for ``__builtin_abs`` and; ``abs`` builtins.; (`#45129 <https://github.com/llvm/llvm-project/issues/45129>`_,; `#45794 <https://github.com/llvm/llvm-project/issues/45794>`_); - Fixed an issue where accesses to the local variables of a coroutine during; ``await_suspend`` could be misoptimized, including accesses to the awaiter; object itself.; (`#56301 <https://github.com/llvm/llvm-project/issues/56301>`_); The current solution may bring performance regressions if the awaiters have; non-static data members. See; `#64945 <https://github.com/llvm/llvm-project/issues/64945>`_ for details.; - Clang now prints unnamed members in diagnostic messages instead of giving an; empty ''. Fixes; (`#63759 <https://github.com/llvm/llvm-project/issues/63759>`_); - Fix crash in __builtin_strncmp and related builtins when the size value; exceeded the maximum value representable by int64_t. Fixes; (`#64876 <https://github.com/llvm/llvm-project/issues/64876>`_); - Fixed an assertion if a function has cleanups and fatal erors.; (`#48974 <https://github.com/llvm/llvm-project/issues/48974>`_); - Clang now emits an error if it is not possible to deduce array size for a; variable with incomplete array type.; (`#37257 <https://github.com/llvm/llvm-project/issues/37257>`_); - Clang's ``-Wunused-private-field`` no longer warns on fields whose type is; declared with ``[[maybe_unused]]``.; (`#61334 <https://github.com/llvm/llvm-project/issues/61334>`_); - For function multi-versioning using the ``target``, ``target_clones``, or; ``target_version`` attributes, remove comdat for internal linkage functions.; (`#65114 <https://github.com/llvm/llvm-project/issues/65114>`_); - Clang now reports ``-Wformat`` for bool value and char specifier confusion; in scanf. Fixes; (`#64987 <https://github.com/llvm/llvm-project/issues/64987>`_); - Support MSVC predefined macro expressions in constant expressions and in; local structs.; - Correctly parse non-ascii identifiers that appe",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst:34764,assert,assertion,34764,interpreter/llvm-project/clang/docs/ReleaseNotes.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst,1,['assert'],['assertion']
Testability,ecurrentForwardPass.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-Forward COMMAND testRecurrentForwardPass). # RNN - Full Test Reference; ROOT_EXECUTABLE(testFullRNN TestFullRNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-FullRNN COMMAND testFullRNN). endif(). #--- CUDA tests. ---------------------------; if (tmva-gpu). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES}). add_executable(testRecurrentBackpropagationCuda TestRecurrentBackpropagationCuda.cxx); target_link_libraries(testRecurrentBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-BackpropagationCuda COMMAND testRecurrentBackpropagationCuda); #mark the native Cuda test failing since RNN are supported only with Cudnn; set_tests_properties(TMVA-DNN-RNN-BackpropagationCuda PROPERTIES WILL_FAIL true). if (tmva-cudnn). add_executable(testRecurrentForwardPassCudnn TestRecurrentForwardPassCudnn.cxx); target_link_libraries(testRecurrentForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-Forwaed-Cudnn COMMAND testRecurrentForwardPassCudnn). add_executable(testRecurrentBackpropagationCudnn TestRecurrentBackpropagationCudnn.cxx); target_link_libraries(testRecurrentBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-BackpropagationCudnn COMMAND testRecurrentBackpropagationCudnn). # Full Test GPU; add_executable(testFullRNNCudnn TestFullRNNCudnn.cxx); target_link_libraries(testFullRNNCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-Full-Cudnn COMMAND testFullRNNCudnn). endif(). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). # DNN - Forward CPU; ROOT_EXECUTABLE(testRecurrentForwardPassCpu TestRecurrentForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-Forward-Cpu COMMAND testRecurrentForwardPassCpu). ROOT_EXECUTABLE(testRecurrentBackpropagationCpu TestRecurrentBackpropagationCpu.cxx LIBRARIES ${Libraries}); R,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/CMakeLists.txt:1811,test,testRecurrentForwardPassCudnn,1811,tmva/tmva/test/DNN/RNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/CMakeLists.txt,2,['test'],['testRecurrentForwardPassCudnn']
Testability,"ecursively searching for; tests in directories. This behavior makes it easy to specify a subset of tests to run, while still; allowing the test suite configuration to control exactly how tests are; interpreted. In addition, :program:`lit` always identifies tests by the test; suite they are in, and their relative path inside the test suite. For; appropriately configured projects, this allows :program:`lit` to provide; convenient and flexible support for out-of-tree builds. .. _test-status-results:. TEST STATUS RESULTS; -------------------. Each test ultimately produces one of the following eight results:. **PASS**. The test succeeded. **FLAKYPASS**. The test succeeded after being re-run more than once. This only applies to; tests containing an ``ALLOW_RETRIES:`` annotation. **XFAIL**. The test failed, but that is expected. This is used for test formats which allow; specifying that a test does not currently work, but wish to leave it in the test; suite. **XPASS**. The test succeeded, but it was expected to fail. This is used for tests which; were specified as expected to fail, but are now succeeding (generally because; the feature they test was broken and has been fixed). **FAIL**. The test failed. **UNRESOLVED**. The test result could not be determined. For example, this occurs when the test; could not be run, the test itself is invalid, or the test was interrupted. **UNSUPPORTED**. The test is not supported in this environment. This is used by test formats; which can report unsupported tests. **TIMEOUT**. The test was run, but it timed out before it was able to complete. This is; considered a failure. Depending on the test format tests may produce additional information about; their status (generally only for failures). See the :ref:`output-options`; section for more information. .. _lit-infrastructure:. LIT INFRASTRUCTURE; ------------------. This section describes the :program:`lit` testing architecture for users interested in; creating a new :program:`lit` testing",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:12818,test,test,12818,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"ed in the LEB128 format, which is; used throughout for storing integers. It also contains a compressed payload. * The first three LEB128-encoded numbers in the sample specify the number of; filenames, the length of the uncompressed filenames, and the length of the; compressed payload (or 0 if compression is disabled). In this sample, there; is 1 filename that is 21 bytes in length (uncompressed), and stored in 29; bytes (compressed). * The coverage mapping from the first function record is encoded in this string:. .. code-block:: llvm. c""\01\00\00\01\01\01\0C\02\02"". This string consists of the following bytes:. +----------+-------------------------------------------------------------------------------------------------------------------------+; | ``0x01`` | The number of file ids used by this function. There is only one file id used by the mapping data in this function. |; +----------+-------------------------------------------------------------------------------------------------------------------------+; | ``0x00`` | An index into the filenames array which corresponds to the file ""/Users/alex/test.c"". |; +----------+-------------------------------------------------------------------------------------------------------------------------+; | ``0x00`` | The number of counter expressions used by this function. This function doesn't use any expressions. |; +----------+-------------------------------------------------------------------------------------------------------------------------+; | ``0x01`` | The number of mapping regions that are stored in an array for the function's file id #0. |; +----------+-------------------------------------------------------------------------------------------------------------------------+; | ``0x01`` | The coverage mapping counter for the first region in this function. The value of 1 tells us that it's a coverage |; | | mapping counter that is a reference to the profile instrumentation counter with an index of 0. |; +----------+----",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CoverageMappingFormat.rst:19949,test,test,19949,interpreter/llvm-project/llvm/docs/CoverageMappingFormat.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CoverageMappingFormat.rst,1,['test'],['test']
Testability,"ed inside a multiclass definition, and the *name* does not; reference any template arguments of the multiclass, then a record by; that name must have been instantiated earlier; in the source file. If *name* does reference; a template argument, then the lookup is delayed until ``defm`` statements; instantiating the multiclass (or later, if the defm occurs in another; multiclass and template arguments of the inner multiclass that are; referenced by *name* are substituted by values that themselves contain; references to template arguments of the outer multiclass). If the type of *a* does not match *type*, TableGen raises an error. ``!con(``\ *a*\ ``,`` *b*\ ``, ...)``; This operator concatenates the DAG nodes *a*, *b*, etc. Their operations; must equal. ``!con((op a1:$name1, a2:$name2), (op b1:$name3))``. results in the DAG node ``(op a1:$name1, a2:$name2, b1:$name3)``. ``!cond(``\ *cond1* ``:`` *val1*\ ``,`` *cond2* ``:`` *val2*\ ``, ...,`` *condn* ``:`` *valn*\ ``)``; This operator tests *cond1* and returns *val1* if the result is true.; If false, the operator tests *cond2* and returns *val2* if the result is; true. And so forth. An error is reported if no conditions are true. This example produces the sign word for an integer::. !cond(!lt(x, 0) : ""negative"", !eq(x, 0) : ""zero"", true : ""positive""). ``!dag(``\ *op*\ ``,`` *arguments*\ ``,`` *names*\ ``)``; This operator creates a DAG node with the given operator and; arguments. The *arguments* and *names* arguments must be lists; of equal length or uninitialized (``?``). The *names* argument; must be of type ``list<string>``. Due to limitations of the type system, *arguments* must be a list of items; of a common type. In practice, this means that they should either have the; same type or be records with a common parent class. Mixing ``dag`` and; non-``dag`` items is not possible. However, ``?`` can be used. Example: ``!dag(op, [a1, a2, ?], [""name1"", ""name2"", ""name3""])`` results in; ``(op a1-value:$name1, a2-value:$nam",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:61171,test,tests,61171,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,1,['test'],['tests']
Testability,"ed on the command line, see; :ref:`selection-options` for more information. :program:`lit` parses options from the environment variable ``LIT_OPTS`` after; parsing options from the command line. ``LIT_OPTS`` is primarily useful for; supplementing or overriding the command-line options supplied to :program:`lit`; by ``check`` targets defined by a project's build system. :program:`lit` can also read options from response files which are specified as; inputs using the ``@path/to/file.rsp`` syntax. Arguments read from a file must; be one per line and are treated as if they were in the same place as the; original file referencing argument on the command line. A response file can; reference other response files. Users interested in the :program:`lit` architecture or designing a; :program:`lit` testing implementation should see :ref:`lit-infrastructure`. GENERAL OPTIONS; ---------------. .. option:: -h, --help. Show the :program:`lit` help message. .. option:: -j N, --workers=N. Run ``N`` tests in parallel. By default, this is automatically chosen to; match the number of detected available CPUs. .. option:: --config-prefix=NAME. Search for :file:`{NAME}.cfg` and :file:`{NAME}.site.cfg` when searching for; test suites, instead of :file:`lit.cfg` and :file:`lit.site.cfg`. .. option:: -D NAME[=VALUE], --param NAME[=VALUE]. Add a user defined parameter ``NAME`` with the given ``VALUE`` (or the empty; string if not given). The meaning and use of these parameters is test suite; dependent. .. _output-options:. OUTPUT OPTIONS; --------------. .. option:: -q, --quiet. Suppress any output except for test failures. .. option:: -s, --succinct. Show less output, for example don't show information on tests that pass.; Also show a progress bar, unless ``--no-progress-bar`` is specified. .. option:: -v, --verbose. Show more information on test failures, for example the entire test output; instead of just the test result. Each command is printed before it is executed. This can be valuable f",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:2457,test,tests,2457,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['tests']
Testability,"ed with the aid of computers. A; usable tool therefore must contain easy-to-use and efficient methods for; storing and handling data. In Quantum mechanics, models typically only predict the probability; density function (""pdf"") of measurements depending on a number of; parameters, and the aim of the experimental analysis is to extract the; parameters from the observed distribution of frequencies at which; certain values of the measurement are observed. Measurements of this; kind require means to generate and visualize frequency distributions,; so-called histograms, and stringent statistical treatment to extract the; model parameters from purely statistical distributions. Simulation of expected data is another important aspect in data; analysis. By repeated generation of ""pseudo-data"", which are analysed in; the same manner as intended for the real data, analysis procedures can; be validated or compared. In many cases, the distribution of the; measurement errors is not precisely known, and simulation offers the; possibility to test the effects of different assumptions. A powerful software framework addressing all of the above requirements; is ROOT, an open source project coordinated by the European Organisation for; Nuclear Research, CERN in Geneva. ROOT is very flexible and provides both a programming interface to use in own; applications and a graphical user interface for interactive data analysis. The; purpose of this document is to serve as a beginners guide and provides extendable; examples for your own use cases, based on typical problems addressed in; student labs. This guide will hopefully lay the ground for more complex; applications in your future scientific work building on a modern,; state-of the art tool for data analysis. This guide in form of a tutorial is intended to introduce you quickly to the; ROOT package. This goal will be accomplished using concrete examples, according; to the ""learning by doing"" principle. Also because of this reason, this guid",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/primer/Introduction.md:2923,test,test,2923,documentation/primer/Introduction.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/primer/Introduction.md,1,['test'],['test']
Testability,"ed.; %:p On Windows, %/p but a ``:`` is removed if its the second character.; Otherwise, %p but with a single leading ``/`` removed.; %:t On Windows, %/t but a ``:`` is removed if its the second character.; Otherwise, %t but with a single leading ``/`` removed.; %:T On Windows, %/T but a ``:`` is removed if its the second character.; Otherwise, %T but with a single leading ``/`` removed.; ======================= ==============. Other substitutions are provided that are variations on this base set and; further substitution patterns can be defined by each test module. See the; modules :ref:`local-configuration-files`. More detailed information on substitutions can be found in the; :doc:`../TestingGuide`. TEST RUN OUTPUT FORMAT; ~~~~~~~~~~~~~~~~~~~~~~. The :program:`lit` output for a test run conforms to the following schema, in; both short and verbose modes (although in short mode no PASS lines will be; shown). This schema has been chosen to be relatively easy to reliably parse by; a machine (for example in buildbot log scraping), and for other tools to; generate. Each test result is expected to appear on a line that matches:. .. code-block:: none. <result code>: <test name> (<progress info>). where ``<result-code>`` is a standard test result such as PASS, FAIL, XFAIL,; XPASS, UNRESOLVED, or UNSUPPORTED. The performance result codes of IMPROVED and; REGRESSED are also allowed. The ``<test name>`` field can consist of an arbitrary string containing no; newline. The ``<progress info>`` field can be used to report progress information such; as (1/300) or can be empty, but even when empty the parentheses are required. Each test result may include additional (multiline) log information in the; following format:. .. code-block:: none. <log delineator> TEST '(<test name>)' <trailing delineator>; ... log message ...; <log delineator>. where ``<test name>`` should be the name of a preceding reported test, ``<log; delineator>`` is a string of ""*"" characters *at least* four char",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:22475,log,log,22475,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['log'],['log']
Testability,"ed.elf 0x4004be --pretty-print --print-address; 0x4004be: baz() at /tmp/test.cpp:11:18; (inlined by) main at /tmp/test.cpp:15:0. .. option:: --print-source-context-lines <N>. Print ``N`` lines of source context for each symbolized address. .. code-block:: console. $ llvm-symbolizer --obj=test.elf 0x400490 --print-source-context-lines=3; baz(); /tmp/test.cpp:11:0; 10 : volatile int k = 42;; 11 >: return foz() + k;; 12 : }. .. option:: --relativenames. Print the file's path relative to the compilation directory, instead; of the absolute path. If the command-line to the compiler included; the full path, this will be the same as the default. .. option:: --verbose. Print verbose address, line and column information. .. code-block:: console. $ llvm-symbolizer --obj=inlined.elf --verbose 0x4004be; baz(); Filename: /tmp/test.cpp; Function start filename: /tmp/test.cpp; Function start line: 9; Function start address: 0x4004b6; Line: 11; Column: 18; main; Filename: /tmp/test.cpp; Function start filename: /tmp/test.cpp; Function start line: 14; Function start address: 0x4004b0; Line: 15; Column: 18. .. option:: --version, -v. Print version information for the tool. .. option:: @<FILE>. Read command-line options from response file `<FILE>`. WINDOWS/PDB SPECIFIC OPTIONS; -----------------------------. .. option:: --dia. Use the Windows DIA SDK for symbolization. If the DIA SDK is not found,; llvm-symbolizer will fall back to the native implementation. MACH-O SPECIFIC OPTIONS; -----------------------. .. option:: --default-arch <arch>. If a binary contains object files for multiple architectures (e.g. it is a; Mach-O universal binary), symbolize the object file for a given architecture.; You can also specify the architecture by writing ``binary_name:arch_name`` in; the input (see example below). If the architecture is not specified in either; way, the address will not be symbolized. Defaults to empty string. .. code-block:: console. $ cat addr.txt; /tmp/mach_universal_binary:i386",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:12418,test,test,12418,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"ed; for instrumentation, use this option to show the correlated functions from the; raw profile. .. option:: --covered. Show only the functions that have been executed, i.e., functions with non-zero; counts. .. program:: llvm-profdata overlap. .. _profdata-overlap:. OVERLAP; -------. SYNOPSIS; ^^^^^^^^. :program:`llvm-profdata overlap` [*options*] [*base profile file*] [*test profile file*]. DESCRIPTION; ^^^^^^^^^^^. :program:`llvm-profdata overlap` takes two profile data files and displays the; *overlap* of counter distribution between the whole files and between any of the; specified functions. In this command, *overlap* is defined as follows:; Suppose *base profile file* has the following counts:; {c1_1, c1_2, ..., c1_n, c1_u_1, c2_u_2, ..., c2_u_s},; and *test profile file* has; {c2_1, c2_2, ..., c2_n, c2_v_1, c2_v_2, ..., c2_v_t}.; Here c{1|2}_i (i = 1 .. n) are matched counters and c1_u_i (i = 1 .. s) and; c2_v_i (i = 1 .. v) are unmatched counters (or counters only existing in); *base profile file* and *test profile file*, respectively.; Let sum_1 = c1_1 + c1_2 + ... + c1_n + c1_u_1 + c2_u_2 + ... + c2_u_s, and; sum_2 = c2_1 + c2_2 + ... + c2_n + c2_v_1 + c2_v_2 + ... + c2_v_t.; *overlap* = min(c1_1/sum_1, c2_1/sum_2) + min(c1_2/sum_1, c2_2/sum_2) + ...; + min(c1_n/sum_1, c2_n/sum_2). The result overlap distribution is a percentage number, ranging from 0.0% to; 100.0%, where 0.0% means there is no overlap and 100.0% means a perfect; overlap. Here is an example, if *base profile file* has counts of {400, 600}, and; *test profile file* has matched counts of {60000, 40000}. The *overlap* is 80%. OPTIONS; ^^^^^^^. .. option:: --function=<string>. Print details for a function if the function's name contains the given string. .. option:: --help. Print a summary of command line options. .. option:: --output=<output>, -o. Specify the output file name. If *output* is ``-`` or it isn't specified,; then the output is sent to standard output. .. option:: --value-cutoff=<n",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-profdata.rst:12314,test,test,12314,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-profdata.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-profdata.rst,1,['test'],['test']
Testability,"ed; to valarray constructor is greater than the number of values; pointed to by the first argument (source).; Source: C++03 26.3.2.1p4; C++11 26.6.2.2p4. #include <valarray>. struct S {; int i;; S(int ii) : i(ii) {};; };. void test(void) {; S s[] = { S(1), S(2) };; std::valarray<S> v(s,3); // warn; }. undefbehavior.ValarrayLengthDiffer; (C++); Undefined behavior: valarray operands are of different length.; Source: C++03 26.3.2.2p1, 26.3.2.6p3, 26.3.3.1p3, 26.3.3.2p3;; C++11 defined (26.6.2.3p1), 26.6.2.7p3, 26.6.3.1p3,; 26.6.3.2p3. // C++03; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a = b; // warn; b.resize(1);; a = b; // ok; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a *= b; // warn; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a = a + b; // warn; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; std::valarray<bool> c(false, 1);; c = a == b; // warn; }. undefbehavior.ValarrayZeroLength; (C++); Undefined behavior: calling sum()/min()/; max() methods of a zero length valarray the behavior is; undefined.; Source: C++03 26.3.2.7p2, p3, p4; C++11 26.6.2.8p5, p6,; p7. #include <valarray>. void test(void) {; std::valarray<int> v(0, 0);; v.sum(); // warn; }. undefbehavior.ValarrayBadIndirection; (C++); Undefined behavior: element is specified more than once in an indirection.; Source: C++03 26.3.9.2p2, 26.3.9.3p2; C++11 26.6.9.2p2,; 26.6.9.3p2. #include <valarray>. void test() {; // '1' is specified more then once; size_t addr[] = {0, 1, 1};; std::valarray<size_t>indirect(addr, 3);; std::valarray<int> a(0, 5), b(1, 3);; a[indirect] = b; //warn; }. #include <valarray>. void test() {; // '1' is specified more then once; size_t addr[] = {0, 1, 1};; std::valarray<size_t>indirect(addr, 3);; std::valarray<int> a(0, 5), b(1, 3);; a[indirect] *= b; //warn; }. undefbehavior.IosBaseDestroyedBefo",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:16515,test,test,16515,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,edArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayer,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:4157,test,testConvNetLoss,4157,tmva/tmva/test/DNN/CNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt,1,['test'],['testConvNetLoss']
Testability,"edByCharactersInSet:; - initWithFormat:. .. code-block:: objc. NSComparisonResult test(NSString *s) {; NSString *aString = nil;; return [s caseInsensitiveCompare:aString];; // warn: argument to 'NSString' method; // 'caseInsensitiveCompare:' cannot be nil; }. .. _osx-cocoa-NonNilReturnValue:. osx.cocoa.NonNilReturnValue; """"""""""""""""""""""""""""""""""""""""""""""""""""""; Models the APIs that are guaranteed to return a non-nil value. .. _osx-cocoa-ObjCGenerics:. osx.cocoa.ObjCGenerics (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for type errors when using Objective-C generics. .. code-block:: objc. NSMutableArray *names = [NSMutableArray array];; NSMutableArray *birthDates = names;. // Warning: Conversion from value of type 'NSDate *'; // to incompatible type 'NSString *'; [birthDates addObject: [NSDate date]];. .. _osx-cocoa-RetainCount:. osx.cocoa.RetainCount (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for leaks and improper reference count management. .. code-block:: objc. void test() {; NSString *s = [[NSString alloc] init]; // warn; }. CFStringRef test(char *bytes) {; return CFStringCreateWithCStringNoCopy(; 0, bytes, NSNEXTSTEPStringEncoding, 0); // warn; }. .. _osx-cocoa-RunLoopAutoreleaseLeak:. osx.cocoa.RunLoopAutoreleaseLeak; """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for leaked memory in autorelease pools that will never be drained. .. _osx-cocoa-SelfInit:. osx.cocoa.SelfInit (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""; Check that 'self' is properly initialized inside an initializer method. .. code-block:: objc. @interface MyObj : NSObject {; id x;; }; - (id)init;; @end. @implementation MyObj; - (id)init {; [super init];; x = 0; // warn: instance variable used while 'self' is not; // initialized; return 0;; }; @end. @interface MyObj : NSObject; - (id)init;; @end. @implementation MyObj; - (id)init {; [super init];; return self; // warn: returning uninitialized 'self'; }; @end. .. _osx-cocoa-SuperDealloc:. osx.cocoa.SuperDealloc (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn about improper use o",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:40077,test,test,40077,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"edCFDate(); // Always report a leak.; }. - (NSDate*) returnsNSRetained {; return (NSDate*) returnsRetainedCFDate(); // Report a leak when using GC.; }; @end. Running scan-build on this example produces the following output:. Attribute 'cf_returns_not_retained'; (Clang-specific); The 'cf_returns_not_retained' attribute is the complement of 'cf_returns_retained'. Where a function or; method may appear to obey the Core Foundation or Cocoa conventions and return; a retained Core Foundation object, this attribute can be used to indicate that; the object reference returned should not be considered as an; ""owning"" reference being returned to the caller. The; CoreFoundation framework defines a macro CF_RETURNS_NOT_RETAINED; that is functionally equivalent to the one shown below.; Usage is identical to cf_returns_retained. When using the; attribute, be sure to declare it within the proper macro that checks for; its availability, as it is not available in earlier versions of the analyzer:. $ cat test.m; #ifndef __has_feature // Optional.; #define __has_feature(x) 0 // Compatibility with non-clang compilers.; #endif. #ifndef CF_RETURNS_NOT_RETAINED; #if __has_feature(attribute_cf_returns_not_retained); #define CF_RETURNS_NOT_RETAINED __attribute__((cf_returns_not_retained)); #else; #define CF_RETURNS_NOT_RETAINED; #endif; #endif. Attribute 'ns_consumed'; (Clang-specific); The 'ns_consumed' attribute can be placed on a specific parameter in either; the declaration of a function or an Objective-C method. It indicates to the; static analyzer that a release message is implicitly sent to the; parameter upon completion of the call to the given function or method. The; Foundation framework defines a macro NS_RELEASES_ARGUMENT that; is functionally equivalent to the NS_CONSUMED macro shown below.; Example. $ cat test.m; #ifndef __has_feature // Optional.; #define __has_feature(x) 0 // Compatibility with non-clang compilers.; #endif. #ifndef NS_CONSUMED; #if __has_feature(attribute_ns_",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html:9351,test,test,9351,interpreter/llvm-project/clang/www/analyzer/annotations.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html,1,['test'],['test']
Testability,"edReturn:. security.insecureAPI.UncheckedReturn (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of functions whose return values must be always checked. .. code-block:: c. void test() {; setuid(1); // warn; }. .. _security-insecureAPI-bcmp:. security.insecureAPI.bcmp (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'bcmp' function. .. code-block:: c. void test() {; bcmp(ptr0, ptr1, n); // warn; }. .. _security-insecureAPI-bcopy:. security.insecureAPI.bcopy (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'bcopy' function. .. code-block:: c. void test() {; bcopy(src, dst, n); // warn; }. .. _security-insecureAPI-bzero:. security.insecureAPI.bzero (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'bzero' function. .. code-block:: c. void test() {; bzero(ptr, n); // warn; }. .. _security-insecureAPI-getpw:. security.insecureAPI.getpw (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'getpw' function. .. code-block:: c. void test() {; char buff[1024];; getpw(2, buff); // warn; }. .. _security-insecureAPI-gets:. security.insecureAPI.gets (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'gets' function. .. code-block:: c. void test() {; char buff[1024];; gets(buff); // warn; }. .. _security-insecureAPI-mkstemp:. security.insecureAPI.mkstemp (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn when 'mkstemp' is passed fewer than 6 X's in the format string. .. code-block:: c. void test() {; mkstemp(""XX""); // warn; }. .. _security-insecureAPI-mktemp:. security.insecureAPI.mktemp (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the ``mktemp`` function. .. code-block:: c. void test() {; char *x = mktemp(""/tmp/zxcv""); // warn: insecure, use mkstemp; }. .. _security-insecureAPI-rand:. security.insecureAPI.rand (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of inferior random number generating functions (only if arc4random function is available):; ``drand48, erand48, jrand48, lcong48, lrand48, mrand48, nrand48, random, rand_r``. .. cod",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:23539,test,test,23539,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"ed_inlined 'InlineFunction' -> 'int'; [003] {Block}; [004] 5 {Variable} 'Var_2' -> 'int'; [003] 2 {Parameter} 'Param' -> 'int'; [003] 3 {Variable} 'Var_1' -> 'int'; [002] 11 {Function} extern not_inlined 'test' -> 'int'; [003] 12 {Variable} 'A' -> 'int'; [003] 13 {InlinedFunction} declared_inlined 'InlineFunction' -> 'int'; [004] {Block}; [005] {Variable} 'Var_2' -> 'int'; [004] {Parameter} 'Param' -> 'int'; [004] {Variable} 'Var_1' -> 'int'; [003] 11 {Parameter} 'Param_1' -> 'int'; [003] 11 {Parameter} 'Param_2' -> 'int'. From the previous logical views, we can see that the CodeView debug; information generated by the Clang compiler shows the variables **Var_1**; and **Var_2** are at the same lexical scope (**4**) in the function; **InlineFuction**. The DWARF generated by GCC/Clang and CodeView; generated by MSVC, show those variables at the correct lexical scope:; **3** and **4** respectively. Using the :program:`llvm-debuginfo-analyzer` selection facilities, we; can produce a simple tabular output showing just the logical elements; that have in their name the *var* pattern. The logical view is sorted; by the variables name. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level,format; --output-sort=name; --select-regex --select-nocase --select=Var; --report=list; --print=symbols; pr-43860-*.o. .. code-block:: none. Logical View:; [000] {File} 'pr-43860-codeview-clang.o' -> COFF-x86-64. [001] {CompileUnit} 'pr-43860.cpp'; [004] {Variable} 'Var_1' -> 'int'; [004] {Variable} 'Var_2' -> 'int'. Logical View:; [000] {File} 'pr-43860-codeview-msvc.o' -> COFF-i386. [001] {CompileUnit} 'pr-43860.cpp'; [003] {Variable} 'Var_1' -> 'int'; [004] {Variable} 'Var_2' -> 'int'. Logical View:; [000] {File} 'pr-43860-dwarf-clang.o' -> elf64-x86-64. [001] {CompileUnit} 'pr-43860.cpp'; [004] {Variable} 'Var_1' -> 'int'; [003] 3 {Variable} 'Var_1' -> 'int'; [005] {Variable} 'Var_2' -> 'int'; [004] 5 {Variable} 'Var_2' -> 'int'. Logical View:; [000] {File} 'pr-43860-dwarf-gcc.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:53454,log,logical,53454,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['log'],['logical']
Testability,"edefined:. **lit_config**. The global **lit** configuration object (a *LitConfig* instance), which defines; the builtin test formats, global configuration parameters, and other helper; routines for implementing test configurations. **config**. This is the config object (a *TestingConfig* instance) for the test suite,; which the config file is expected to populate. The following variables are also; available on the *config* object, some of which must be set by the config and; others are optional or predefined:. **name** *[required]* The name of the test suite, for use in reports and; diagnostics. **test_format** *[required]* The test format object which will be used to; discover and run tests in the test suite. Generally this will be a builtin test; format available from the *lit.formats* module. **test_source_root** The filesystem path to the test suite root. For out-of-dir; builds this is the directory that will be scanned for tests. **test_exec_root** For out-of-dir builds, the path to the test suite root inside; the object directory. This is where tests will be run and temporary output files; placed. **environment** A dictionary representing the environment to use when executing; tests in the suite. **standalone_tests** When true, mark a directory with tests expected to be run; standalone. Test discovery is disabled for that directory. *lit.suffixes* and; *lit.excludes* must be empty when this variable is true. **suffixes** For **lit** test formats which scan directories for tests, this; variable is a list of suffixes to identify test files. Used by: *ShTest*. **substitutions** For **lit** test formats which substitute variables into a test; script, the list of substitutions to perform. Used by: *ShTest*. **unsupported** Mark an unsupported directory, all tests within it will be; reported as unsupported. Used by: *ShTest*. **parent** The parent configuration, this is the config object for the directory; containing the test suite, or None. **root** The root config",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:15989,test,test,15989,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"ediated by the free and reallocation. As an exception to this is with the :ref:`noalias <noalias>` keyword;; the ""irrelevant"" dependencies are ignored. The ``MayAlias`` response is used whenever the two pointers might refer to the; same object. The ``PartialAlias`` response is used when the two memory objects are known to; be overlapping in some way, regardless whether they start at the same address; or not. The ``MustAlias`` response may only be returned if the two memory objects are; guaranteed to always start at exactly the same location. A ``MustAlias``; response does not imply that the pointers compare equal. The ``getModRefInfo`` methods; -----------------------------. The ``getModRefInfo`` methods return information about whether the execution of; an instruction can read or modify a memory location. Mod/Ref information is; always conservative: if an instruction **might** read or write a location,; ``ModRef`` is returned. The ``AliasAnalysis`` class also provides a ``getModRefInfo`` method for testing; dependencies between function calls. This method takes two call sites (``CS1``; & ``CS2``), returns ``NoModRef`` if neither call writes to memory read or; written by the other, ``Ref`` if ``CS1`` reads memory written by ``CS2``,; ``Mod`` if ``CS1`` writes to memory read or written by ``CS2``, or ``ModRef`` if; ``CS1`` might read or write memory written to by ``CS2``. Note that this; relation is not commutative. Other useful ``AliasAnalysis`` methods; --------------------------------------. Several other tidbits of information are often collected by various alias; analysis implementations and can be put to good use by various clients. The ``getModRefInfoMask`` method; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The ``getModRefInfoMask`` method returns a bound on Mod/Ref information for; the supplied pointer, based on knowledge about whether the pointer points to; globally-constant memory (for which it returns ``NoModRef``) or; locally-invariant memory (for which it returns ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AliasAnalysis.rst:6340,test,testing,6340,interpreter/llvm-project/llvm/docs/AliasAnalysis.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AliasAnalysis.rst,1,['test'],['testing']
Testability,ee $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT core/meta package; ############################################################################. set_property(TARGET Core APPEND PROPERTY DICT_HEADERS; TBaseClass.h; TClassGenerator.h; TClass.h; TClassRef.h; TClassStreamer.h; TDataMember.h; TDataType.h; TDictAttributeMap.h; TDictionary.h; TEnumConstant.h; TEnum.h; TFileMergeInfo.h; TFunction.h; TFunctionTemplate.h; TGenericClassInfo.h; TGlobal.h; TInterpreter.h; TInterpreterValue.h; TIsAProxy.h; TListOfDataMembers.h; TListOfEnums.h; TListOfEnumsWithLock.h; TListOfFunctions.h; TListOfFunctionTemplates.h; TMemberStreamer.h; TMethodArg.h; TMethodCall.h; TMethod.h; TProtoClass.h; TRealData.h; TSchemaHelper.h; TSchemaRule.h; TSchemaRuleSet.h; TStatusBitsChecker.h; TStreamerElement.h; TStreamer.h; TVirtualIsAProxy.h; TVirtualRefProxy.h; TVirtualStreamerInfo.h; TVirtualArray.h; TVirtualObject.h; ). target_sources(Core PRIVATE; src/TBaseClass.cxx; src/TClass.cxx; src/TClassGenerator.cxx; src/TClassRef.cxx; src/TDataMember.cxx; src/TDataType.cxx; src/TDictAttributeMap.cxx; src/TDictionary.cxx; src/TEnum.cxx; src/TEnumConstant.cxx; src/TFunction.cxx; src/TFunctionTemplate.cxx; src/TGenericClassInfo.cxx; src/TGlobal.cxx; src/TInterpreter.cxx; src/TIsAProxy.cxx; src/TListOfDataMembers.cxx; src/TListOfEnums.cxx; src/TListOfEnumsWithLock.cxx; src/TListOfFunctions.cxx; src/TListOfFunctionTemplates.cxx; src/TMethod.cxx; src/TMethodArg.cxx; src/TMethodCall.cxx; src/TProtoClass.cxx; src/TRealData.cxx; src/TSchemaRule.cxx; src/TSchemaRuleSet.cxx; src/TStatusBitsChecker.cxx; src/TStreamerElement.cxx; src/TViewPubDataMembers.cxx; src/TViewPubFunctions.cxx; src/TVirtualStreamerInfo.cxx; ). target_include_directories(Core; PUBLIC; $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>; ). ROOT_INSTALL_HEADERS(); ROOT_ADD_TEST_SUBDIRECTORY(test); ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/CMakeLists.txt:2106,test,test,2106,core/meta/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/CMakeLists.txt,1,['test'],['test']
Testability,"ee/dataframe/test)), or in; [roottest](https://github.com/root-project/roottest.git). Tests in `test/` subdirectories are unit tests, mostly based on; [Google Test](https://github.com/google/googletest) and easily extended. Tests in; [roottest](https://github.com/root-project/roottest.git) are more involved (e.g., tests requiring custom dictionaries or; data files). When you create a branch in the main ROOT repository (i.e., this repository) and add a test to `roottest`,; make sure to do this under the same branch name (and open a PR for it). Our CI infrastructure automatically picks up the; changes defined in the `roottest` PR based on this branch name, and uses that for testing your PR here. ## Continuous Integration. To prevent bad surprises and make a better first impression, we; strongly encourage new developers to [run the tests](https://root.cern/for_developers/run_the_tests/); _before_ submitting a pull request. ROOT has automated CI tests :cop: that are used for pull requests:; - *Build and test*: a [Jenkins-based CI workflow](https://github.com/phsft-bot/build-configuration/blob/master/README.md); as well as a GitHub Actions CI workflow tests PRs automatically; only a; [project member](https://github.com/orgs/root-project/people) is allowed to initiate this build.; The results are posted to the pull request.; Compared to ROOT's nightly builds, PRs are tested with less tests, on less platforms.; - *Formatting check*: `clang-format` automatically checks that a PR; [follows](https://github.com/root-project/root/blob/master/.clang-format) ROOT's; [coding conventions](https://root.cern/contribute/coding_conventions/).; If coding violations are found, it provides you with a `patch` output that you likely want to apply to your PR.; - *Simple Static Analysis*: PRs are analyzed using [`clang-tidy`](https://clang.llvm.org/extra/clang-tidy/). Typically, PRs must pass all these tests; we will ask you to fix any issues that may arise.; Some tests are run only outside t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/CONTRIBUTING.md:6735,test,tests,6735,CONTRIBUTING.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CONTRIBUTING.md,2,['test'],"['test', 'tests']"
Testability,"eed for each run; default value '1'). EstimatorType No MSE MSE, CE, linear, sigmoid, tanh, radial MSE (Mean Square Estimator) for Gaussian Likelihood or CE(Cross-Entropy) for Bernoulli Likelihood. NeuronInputType No sum sum, sqsum, abssum Neuron input function type. V No False − Verbose output (short form of VerbosityLevel below - overrides the latter one). VerbosityLevel No Default Default, Debug, Verbose, Info, Warning, Error, Fatal Verbosity level. VarTransform No None − List of variable transformations performed before training, e.g., D_Background,P_Signal,G,N_AllClasses for: Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed). H No False − Print method-specific help message. CreateMVAPdfs No False − Create PDFs for classifier outputs (signal and background). IgnoreNegWeightsInTraining No False − Events with negative weights are ignored in the training (but are included for testing and performance evaluation). TrainingMethod No BP BP, GA, BFGS Train with Back-Propagation (BP), BFGS Algorithm (BFGS), or Genetic Algorithm (GA - slower and worse). LearningRate No 0.02 − ANN learning rate parameter. DecayRate No 0.01 − Decay rate for learning parameter. TestRate No 10 − Test for overtraining performed at each #th epochs. EpochMonitoring No False − Provide epoch-wise monitoring plots according to TestRate (caution: causes big ROOT output file!). Sampling No 1 − Only 'Sampling' (randomly selected) events are trained each epoch. SamplingEpoch No 1 − Sampling is used for the first 'SamplingEpoch' epochs, afterwards, all events are taken for training. SamplingImportance No 1 − The sampling weights of events in epochs which successful (worse estimator than before) are multiplied with SamplingImportance, else they are divided. SamplingTraining No True − The training sample is sampled. SamplingTesting No False − The testing sa",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html:22219,test,testing,22219,documentation/tmva/UsersGuide/optionRef.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html,1,['test'],['testing']
Testability,"ef:`breaking` for more details. Code reviewers are encouraged to request a release note if they think one is; warranted when performing a code review. Quality; -------. The minimum quality standards that any change must satisfy before being; committed to the main development branch are:. #. Code must adhere to the `LLVM Coding Standards <CodingStandards.html>`_. #. Code must compile cleanly (no errors, no warnings) on at least one platform. #. Bug fixes and new features should `include a testcase`_ so we know if the; fix/feature ever regresses in the future. #. Code must pass the ``llvm/test`` test suite. #. The code must not cause regressions on a reasonable subset of llvm-test,; where ""reasonable"" depends on the contributor's judgement and the scope of; the change (more invasive changes require more testing). A reasonable subset; might be something like ""``llvm-test/MultiSource/Benchmarks``"". #. Ensure that links in source code and test files point to publicly available; resources and are used primarily to add additional information rather than; to supply critical context. The surrounding comments should be sufficient; to provide the context behind such links. Additionally, the committer is responsible for addressing any problems found in; the future that the change is responsible for. For example:. * The code should compile cleanly on all supported platforms. * The changes should not cause any correctness regressions in the ``llvm-test``; suite and must not cause any major performance regressions. * The change set should not cause performance or correctness regressions for the; LLVM tools. * The changes should not cause performance or correctness regressions in code; compiled by LLVM on all applicable targets. * You are expected to address any `GitHub Issues <https://github.com/llvm/llvm-project/issues>`_ that; result from your change. We prefer for this to be handled before submission but understand that it isn't; possible to test all of this for every submission",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst:13094,test,test,13094,interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,1,['test'],['test']
Testability,"efail** Normally a test using a shell pipe fails if any of the commands; on the pipe fail. If this is not desired, setting this variable to false; makes the test fail only if the last command in the pipe fails. **available_features** A set of features that can be used in `XFAIL`,; `REQUIRES`, and `UNSUPPORTED` directives. TEST DISCOVERY; ~~~~~~~~~~~~~~. Once test suites are located, :program:`lit` recursively traverses the source; directory (following *test_source_root*) looking for tests. When :program:`lit`; enters a sub-directory, it first checks to see if a nested test suite is; defined in that directory. If so, it loads that test suite recursively,; otherwise it instantiates a local test config for the directory (see; :ref:`local-configuration-files`). Tests are identified by the test suite they are contained within, and the; relative path inside that suite. Note that the relative path may not refer to; an actual file on disk; some test formats (such as *GoogleTest*) define; ""virtual tests"" which have a path that contains both the path to the actual; test file and a subpath to identify the virtual test. .. _local-configuration-files:. LOCAL CONFIGURATION FILES; ~~~~~~~~~~~~~~~~~~~~~~~~~. When :program:`lit` loads a subdirectory in a test suite, it instantiates a; local test configuration by cloning the configuration for the parent directory; --- the root of this configuration chain will always be a test suite. Once the; test configuration is cloned :program:`lit` checks for a *lit.local.cfg* file; in the subdirectory. If present, this file will be loaded and can be used to; specialize the configuration for each individual directory. This facility can; be used to define subdirectories of optional tests, or to change other; configuration parameters --- for example, to change the test format, or the; suffixes which identify test files. SUBSTITUTIONS; ~~~~~~~~~~~~~. :program:`lit` allows patterns to be substituted inside RUN commands. It also; provides the followin",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:18014,test,test,18014,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,4,['test'],"['test', 'tests']"
Testability,"efault(private); #pragma omp parallel default(firstprivate); #pragma omp parallel. ``ompDefaultClause()`` matches ``default(none)``, ``default(shared)``,; `` default(private)`` and ``default(firstprivate)``. Matcher<QualType>qualTypeMatcher<QualType>...; Matches QualTypes in the clang AST. Matcher<Stmt>addrLabelExprMatcher<AddrLabelExpr>...; Matches address of label statements (GNU extension). Given; FOO: bar();; void *ptr = &&FOO;; goto *bar;; addrLabelExpr(); matches '&&FOO'. Matcher<Stmt>arrayInitIndexExprMatcher<ArrayInitIndexExpr>...; The arrayInitIndexExpr consists of two subexpressions: a common expression; (the source array) that is evaluated once up-front, and a per-element initializer; that runs once for each array element. Within the per-element initializer,; the current index may be obtained via an ArrayInitIndexExpr. Given; void testStructBinding() {; int a[2] = {1, 2};; auto [x, y] = a;; }; arrayInitIndexExpr() matches the array index that implicitly iterates; over the array `a` to copy each element to the anonymous array; that backs the structured binding `[x, y]` elements of which are; referred to by their aliases `x` and `y`. Matcher<Stmt>arrayInitLoopExprMatcher<ArrayInitLoopExpr>...; Matches a loop initializing the elements of an array in a number of contexts:; * in the implicit copy/move constructor for a class with an array member; * when a lambda-expression captures an array by value; * when a decomposition declaration decomposes an array. Given; void testLambdaCapture() {; int a[10];; auto Lam1 = [a]() {; return;; };; }; arrayInitLoopExpr() matches the implicit loop that initializes each element of; the implicit array field inside the lambda object, that represents the array `a`; captured by value. Matcher<Stmt>arraySubscriptExprMatcher<ArraySubscriptExpr>...; Matches array subscript expressions. Given; int i = a[1];; arraySubscriptExpr(); matches ""a[1]"". Matcher<Stmt>asmStmtMatcher<AsmStmt>...; Matches asm statements. int i = 100;; __asm(""mov ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTMatchersReference.html:21836,test,testStructBinding,21836,interpreter/llvm-project/clang/docs/LibASTMatchersReference.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTMatchersReference.html,1,['test'],['testStructBinding']
Testability,"eference for MVA method: Cuts. Option Array Default value Predefined values Description. V No False − Verbose output (short form of VerbosityLevel below - overrides the latter one). VerbosityLevel No Default Default, Debug, Verbose, Info, Warning, Error, Fatal Verbosity level. VarTransform No None − List of variable transformations performed before training, e.g., D_Background,P_Signal,G,N_AllClasses for: Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed). H No False − Print method-specific help message. CreateMVAPdfs No False − Create PDFs for classifier outputs (signal and background). IgnoreNegWeightsInTraining No False − Events with negative weights are ignored in the training (but are included for testing and performance evaluation). FitMethod No GA GA, SA, MC, MCEvents, MINUIT, EventScan Minimisation Method (GA, SA, and MC are the primary methods to be used; the others have been introduced for testing purposes and are depreciated). EffMethod No EffSel EffSel, EffPDF Selection Method. CutRangeMin Yes -1 − Minimum of allowed cut range (set per variable). CutRangeMax Yes -1 − Maximum of allowed cut range (set per variable). VarProp Yes NotEnforced NotEnforced, FMax, FMin, FSmart Categorisation of cuts. Configuration options for MVA method :. Configuration options reference for MVA method: PDEFoam. Option Array Default value Predefined values Description. V No False − Verbose output (short form of VerbosityLevel below - overrides the latter one). VerbosityLevel No Default Default, Debug, Verbose, Info, Warning, Error, Fatal Verbosity level. VarTransform No None − List of variable transformations performed before training, e.g., D_Background,P_Signal,G,N_AllClasses for: Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes,",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html:25318,test,testing,25318,documentation/tmva/UsersGuide/optionRef.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html,1,['test'],['testing']
Testability,"eference in the JIT standard library:. .. code-block:: c++. extern MyJIT *__MyJITInstance;. void log(const char *Msg) { __MyJITInstance->log(Msg); }. And then make our JIT object visible to the JIT standard library with an; absolute symbol definition when the JIT is started:. .. code-block:: c++. MyJIT J = ...;. auto &JITStdLibJD = ... ;. JITStdLibJD.define(absoluteSymbols(SymbolMap({; { Mangle(""__MyJITInstance""),; { ExecutorAddr::fromPtr(&J), JITSymbolFlags() } }; });. Aliases and Reexports; ---------------------. Aliases and reexports allow you to define new symbols that map to existing; symbols. This can be useful for changing linkage relationships between symbols; across sessions without having to recompile code. For example, imagine that; JIT'd code has access to a log function, ``void log(const char*)`` for which; there are two implementations in the JIT standard library: ``log_fast`` and; ``log_detailed``. Your JIT can choose which one of these definitions will be; used when the ``log`` symbol is referenced by setting up an alias at JIT startup; time:. .. code-block:: c++. auto &JITStdLibJD = ... ;. auto LogImplementationSymbol =; Verbose ? Mangle(""log_detailed"") : Mangle(""log_fast"");. JITStdLibJD.define(; symbolAliases(SymbolAliasMap({; { Mangle(""log""),; { LogImplementationSymbol; JITSymbolFlags::Exported | JITSymbolFlags::Callable } }; });. The ``symbolAliases`` function allows you to define aliases within a single; JITDylib. The ``reexports`` function provides the same functionality, but; operates across JITDylib boundaries. E.g. .. code-block:: c++. auto &JD1 = ... ;; auto &JD2 = ... ;. // Make 'bar' in JD2 an alias for 'foo' from JD1.; JD2.define(; reexports(JD1, SymbolAliasMap({; { Mangle(""bar""), { Mangle(""foo""), JITSymbolFlags::Exported } }; });. The reexports utility can be handy for composing a single JITDylib interface by; re-exporting symbols from several other JITDylibs. .. _Laziness:. Laziness; ========. Laziness in ORC is provided by a utility ca",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ORCv2.rst:15630,log,log,15630,interpreter/llvm-project/llvm/docs/ORCv2.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ORCv2.rst,1,['log'],['log']
Testability,"eferences in the syntax, HLSL does use; reference types in the AST, and we intend to use pointer decay in the AST in; the Clang implementation. HLSL ``this`` Keyword; ---------------------. HLSL does support member functions, and (in HLSL 2021) limited operator; overloading. With member function support, HLSL also has a ``this`` keyword. The; ``this`` keyword is an example of one of the places where HLSL relies on; references in the AST, because ``this`` is a reference. Bitshifts; ---------. In deviation from C, HLSL bitshifts are defined to mask the shift count by the; size of the type. In DXC, the semantics of LLVM IR were altered to accommodate; this, in Clang we intend to generate the mask explicitly in the IR. In cases; where the shift value is constant, this will be constant folded appropriately,; in other cases we can clean it up in the DXIL target. Non-short Circuiting Logical Operators; --------------------------------------. In HLSL 2018 and earlier, HLSL supported logical operators (and the ternary; operator) on vector types. This behavior required that operators not short; circuit. The non-short circuiting behavior applies to all data types until HLSL; 2021. In HLSL 2021, logical and ternary operators do not support vector types; instead builtin functions ``and``, ``or`` and ``select`` are available, and; operators short circuit matching C behavior. Precise Qualifier; -----------------. HLSL has a ``precise`` qualifier that behaves unlike anything else in the C; language. The support for this qualifier in DXC is buggy, so our bar for; compatibility is low. The ``precise`` qualifier applies in the inverse direction from normal; qualifiers. Rather than signifying that the declaration containing ``precise``; qualifier be precise, it signifies that the operations contributing to the; declaration's value be ``precise``. Additionally, ``precise`` is a misnomer:; values attributed as ``precise`` comply with IEEE-754 floating point semantics,; and are prevented ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/HLSL/HLSLSupport.rst:7604,log,logical,7604,interpreter/llvm-project/clang/docs/HLSL/HLSLSupport.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/HLSL/HLSLSupport.rst,1,['log'],['logical']
Testability,efile.cmake>`. Use a CMake cache. The test-suite comes with several CMake caches which; predefine common or tricky build configurations. Displaying and Analyzing Results; --------------------------------. The `compare.py` script displays and compares result files. A result file is; produced when invoking lit with the `-o filename.json` flag. Example usage:. - Basic Usage:. ```text; % test-suite/utils/compare.py baseline.json; Warning: 'test-suite :: External/SPEC/CINT2006/403.gcc/403.gcc.test' has No metrics!; Tests: 508; Metric: exec_time. Program baseline. INT2006/456.hmmer/456.hmmer 1222.90; INT2006/464.h264ref/464.h264ref 928.70; ...; baseline; count 506.000000; mean 20.563098; std 111.423325; min 0.003400; 25% 0.011200; 50% 0.339450; 75% 4.067200; max 1222.896800; ```. - Show compile_time or text segment size metrics:. ```bash; % test-suite/utils/compare.py -m compile_time baseline.json; % test-suite/utils/compare.py -m size.__text baseline.json; ```. - Compare two result files and filter short running tests:. ```bash; % test-suite/utils/compare.py --filter-short baseline.json experiment.json; ...; Program baseline experiment diff. SingleSour.../Benchmarks/Linpack/linpack-pc 5.16 4.30 -16.5%; MultiSourc...erolling-dbl/LoopRerolling-dbl 7.01 7.86 12.2%; SingleSour...UnitTests/Vectorizer/gcc-loops 3.89 3.54 -9.0%; ...; ```. - Merge multiple baseline and experiment result files by taking the minimum; runtime each:. ```bash; % test-suite/utils/compare.py base0.json base1.json base2.json vs exp0.json exp1.json exp2.json; ```. ### Continuous Tracking with LNT. LNT is a set of client and server tools for continuously monitoring; performance. You can find more information at; [https://llvm.org/docs/lnt](https://llvm.org/docs/lnt). The official LNT instance; of the LLVM project is hosted at [http://lnt.llvm.org](http://lnt.llvm.org). External Suites; ---------------. External suites such as SPEC can be enabled by either. - placing (or linking) them into the `test-suite/,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:8076,test,tests,8076,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['test'],['tests']
Testability,"efined; compiler flags. These flags are applied regardless of the `CMAKE_C_FLAGS`; option and may be changed by modifying `CMAKE_C_FLAGS_OPTIMIZE` etc. See; [https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html](https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html). - `TEST_SUITE_FORTRAN`. Activate that Fortran tests. This is a work in progress. More information can be; found in the [Flang documentation](https://flang.llvm.org/docs/FortranLLVMTestSuite.html). - `TEST_SUITE_RUN_UNDER`. Prefix test invocations with the given tool. This is typically used to run; cross-compiled tests within a simulator tool. - `TEST_SUITE_BENCHMARKING_ONLY`. Disable tests that are unsuitable for performance measurements. The disabled; tests either run for a very short time or are dominated by I/O performance; making them unsuitable as compiler performance tests. - `TEST_SUITE_SUBDIRS`. Semicolon-separated list of directories to include. This can be used to only; build parts of the test-suite or to include external suites. This option; does not work reliably with deeper subdirectories as it skips intermediate; `CMakeLists.txt` files which may be required. - `TEST_SUITE_COLLECT_STATS`. Collect internal LLVM statistics. Appends `-save-stats=obj` when invoking the; compiler and makes the lit runner collect and merge the statistic files. - `TEST_SUITE_RUN_BENCHMARKS`. If this is set to `OFF` then lit will not actually run the tests but just; collect build statistics like compile time and code size. - `TEST_SUITE_USE_PERF`. Use the `perf` tool for time measurement instead of the `timeit` tool that; comes with the test-suite. The `perf` is usually available on linux systems. - `TEST_SUITE_SPEC2000_ROOT`, `TEST_SUITE_SPEC2006_ROOT`, `TEST_SUITE_SPEC2017_ROOT`, ... Specify installation directories of external benchmark suites. You can find; more information about expected versions or usage in the README files in the; `External` directory (such as `External/SPEC/README`",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:5934,test,test-suite,5934,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['test'],['test-suite']
Testability,"efinitions of the sized deallocation functions, either by providing them; explicitly or by using a C++ standard library that does. libstdc++; added these functions in version 5.0, and libc++ added them in; version 3.7. C++11 implementation status; Clang 3.3 and later implement all of the ISO; C++ 2011 standard.; You can use Clang in C++11 mode with the -std=c++11; option. Clang's C++11 mode can be used with; libc++ or with gcc's libstdc++. List of features and minimum Clang version with support. Language Feature; C++11 Proposal; Available in Clang?. Rvalue references; N2118; Clang 2.9; ; P1825R0 (DR); Clang 13.     Rvalue references for *this; N2439; Clang 2.9. Initialization of class objects by rvalues; N1610; Clang 2.9. Non-static data member initializers; N2756; Clang 3.0. Variadic templates; N2242; Clang 2.9.     Extending variadic template template parameters; N2555; Clang 2.9. Initializer lists; N2672; Clang 3.1. ; P1009R2 (DR); Clang 9. ; P1957R2 (DR); Clang 11. Static assertions; N1720; Clang 2.9. auto-typed variables; N1984; Clang 2.9.     Multi-declarator auto; N1737; Clang 2.9.     Removal of auto as a storage-class specifier; N2546; Clang 2.9.     New function declarator syntax; N2541; Clang 2.9. Lambda expressions; N2927; Clang 3.1. P0588R1 (DR); No. Declared type of an expression; N2343; Clang 2.9.     Incomplete return types; N3276; Clang 3.1. Right angle brackets; N1757; Clang 2.9. Default template arguments for function templates; DR226; Clang 2.9. Solving the SFINAE problem for expressions; DR339; Clang 2.9. Alias templates; N2258; Clang 3.0. Extern templates; N1987; Clang 2.9. Null pointer constant; N2431; Clang 3.0. Strongly-typed enums; N2347; Clang 2.9. Forward declarations for enums; N2764; DR1206; Clang 3.1. Standardized attribute syntax; N2761; Clang 3.3 (1). Generalized constant expressions; N2235; Clang 3.1. P0859R0 (DR); Clang 8. Alignment support; N2341; Clang 3.3. Conditionally-support behavior; N1627; Clang 2.9. Changing undefined behav",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/cxx_status.html:15362,assert,assertions,15362,interpreter/llvm-project/clang/www/cxx_status.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/cxx_status.html,1,['assert'],['assertions']
Testability,"efore, to; run the test from Visual Studio, right-click the check-clang project; and select ""Build"". Please see also; Getting Started; with the LLVM System using Microsoft Visual Studio and; Building LLVM with CMake.; . Testing on the Command Line. If you want more control over how the tests are run, it may; be convenient to run the test harness on the command-line directly. Before; running tests from the command line, you will need to ensure that; lit.site.cfg files have been created for your build. You can do; this by running the tests as described in the previous sections. Once the; tests have started running, you can stop them with control+C, as the; files are generated before running any tests.; Once that is done, to run all the tests from the command line,; execute a command like the following:. python (path to llvm)\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg; (path to llvm)\llvm\tools\clang\test. For CMake builds e.g. on Windows with Visual Studio, you will need; to specify your build configuration (Debug, Release, etc.) via; --param=build_config=(build config). You may also need to specify; the build mode (Win32, etc) via --param=build_mode=(build mode).; Additionally, you will need to specify the lit site configuration which; lives in (build dir)\tools\clang\test, via; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg.; ; To run a single test:. python (path to llvm)\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg; (path to llvm)\llvm\tools\clang\test\(dir)\(test). For example:. python C:\Tools\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site_config=C:\Tools\build\tools\clang\test\lit.site.cfg; C:\Tools\llvm\tools\clang\test\Sema\wchar.c. The -sv option above tells the runner to show the te",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html:6317,test,test,6317,interpreter/llvm-project/clang/www/hacking.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html,1,['test'],['test']
Testability,"eful for; supplementing or overriding the command-line options supplied to :program:`lit`; by ``check`` targets defined by a project's build system. :program:`lit` can also read options from response files which are specified as; inputs using the ``@path/to/file.rsp`` syntax. Arguments read from a file must; be one per line and are treated as if they were in the same place as the; original file referencing argument on the command line. A response file can; reference other response files. Users interested in the :program:`lit` architecture or designing a; :program:`lit` testing implementation should see :ref:`lit-infrastructure`. GENERAL OPTIONS; ---------------. .. option:: -h, --help. Show the :program:`lit` help message. .. option:: -j N, --workers=N. Run ``N`` tests in parallel. By default, this is automatically chosen to; match the number of detected available CPUs. .. option:: --config-prefix=NAME. Search for :file:`{NAME}.cfg` and :file:`{NAME}.site.cfg` when searching for; test suites, instead of :file:`lit.cfg` and :file:`lit.site.cfg`. .. option:: -D NAME[=VALUE], --param NAME[=VALUE]. Add a user defined parameter ``NAME`` with the given ``VALUE`` (or the empty; string if not given). The meaning and use of these parameters is test suite; dependent. .. _output-options:. OUTPUT OPTIONS; --------------. .. option:: -q, --quiet. Suppress any output except for test failures. .. option:: -s, --succinct. Show less output, for example don't show information on tests that pass.; Also show a progress bar, unless ``--no-progress-bar`` is specified. .. option:: -v, --verbose. Show more information on test failures, for example the entire test output; instead of just the test result. Each command is printed before it is executed. This can be valuable for; debugging test failures, as the last printed command is the one that failed.; Moreover, :program:`lit` inserts ``'RUN: at line N'`` before each; command pipeline in the output to help you locate the source line of; the",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:2678,test,test,2678,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"egment). See `X86/X86-64 Language Extensions; <https://clang.llvm.org/docs/LanguageExtensions.html#memory-references-to-specified-segments>`__; for reference. The ``SuppressAddressSpaces`` option suppresses; warnings for null dereferences of all pointers with address spaces. You can; disable this behavior with the option; ``-analyzer-config core.NullDereference:SuppressAddressSpaces=false``.; *Defaults to true*. .. code-block:: objc. // C; void test(int *p) {; if (p); return;. int x = p[0]; // warn; }. // C; void test(int *p) {; if (!p); *p = 0; // warn; }. // C++; class C {; public:; int x;; };. void test() {; C *pc = 0;; int k = pc->x; // warn; }. // Objective-C; @interface MyClass {; @public; int x;; }; @end. void test() {; MyClass *obj = 0;; obj->x = 1; // warn; }. .. _core-StackAddressEscape:. core.StackAddressEscape (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""; Check that addresses to stack memory do not escape the function. .. code-block:: c. char const *p;. void test() {; char const str[] = ""string"";; p = str; // warn; }. void* test() {; return __builtin_alloca(12); // warn; }. void test() {; static int *x;; int y;; x = &y; // warn; }. .. _core-UndefinedBinaryOperatorResult:. core.UndefinedBinaryOperatorResult (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for undefined results of binary operators. .. code-block:: c. void test() {; int x;; int y = x + 1; // warn: left operand is garbage; }. .. _core-VLASize:. core.VLASize (C); """"""""""""""""""""""""""""""""; Check for declarations of Variable Length Arrays of undefined or zero size. Check for declarations of VLA of undefined or zero size. .. code-block:: c. void test() {; int x;; int vla1[x]; // warn: garbage as size; }. void test() {; int x = 0;; int vla2[x]; // warn: zero size; }. .. _core-uninitialized-ArraySubscript:. core.uninitialized.ArraySubscript (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for uninitialized values used as array subscripts. .. code-block:: c. void test() {; int i, a[10];; int x = a[i]; // warn: arra",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:4839,test,test,4839,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"eing lowered, which prevents the dag combiner from; turning 'select (load CPI1), (load CPI2)' -> 'load (select CPI1, CPI2)'. The pattern isel got this one right. //===---------------------------------------------------------------------===//. Lower memcpy / memset to a series of SSE 128 bit move instructions when it's; feasible. //===---------------------------------------------------------------------===//. Codegen:; if (copysign(1.0, x) == copysign(1.0, y)); into:; if (x^y & mask); when using SSE. //===---------------------------------------------------------------------===//. Use movhps to update upper 64-bits of a v4sf value. Also movlps on lower half; of a v4sf value. //===---------------------------------------------------------------------===//. Better codegen for vector_shuffles like this { x, 0, 0, 0 } or { x, 0, x, 0}.; Perhaps use pxor / xorp* to clear a XMM register first?. //===---------------------------------------------------------------------===//. External test Nurbs exposed some problems. Look for; __ZN15Nurbs_SSE_Cubic17TessellateSurfaceE, bb cond_next140. This is what icc; emits:. movaps (%edx), %xmm2 #59.21; movaps (%edx), %xmm5 #60.21; movaps (%edx), %xmm4 #61.21; movaps (%edx), %xmm3 #62.21; movl 40(%ecx), %ebp #69.49; shufps $0, %xmm2, %xmm5 #60.21; movl 100(%esp), %ebx #69.20; movl (%ebx), %edi #69.20; imull %ebp, %edi #69.49; addl (%eax), %edi #70.33; shufps $85, %xmm2, %xmm4 #61.21; shufps $170, %xmm2, %xmm3 #62.21; shufps $255, %xmm2, %xmm2 #63.21; lea (%ebp,%ebp,2), %ebx #69.49; negl %ebx #69.49; lea -3(%edi,%ebx), %ebx #70.33; shll $4, %ebx #68.37; addl 32(%ecx), %ebx #68.37; testb $15, %bl #91.13; jne L_B1.24 # Prob 5% #91.13. This is the llvm code after instruction scheduling:. cond_next140 (0xa910740, LLVM BB @0xa90beb0):; 	%reg1078 = MOV32ri -3; 	%reg1079 = ADD32rm %reg1078, %reg1068, 1, %noreg, 0; 	%reg1037 = MOV32rm %reg1024, 1, %noreg, 40; 	%reg1080 = IMUL32rr %reg1079, %reg1037; 	%reg1081 = MOV32rm %reg1058, 1, %noreg, 0; 	%reg1",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt:3707,test,test,3707,interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt,1,['test'],['test']
Testability,"elease notes are updated. * Finally, release!. * Announce bug fix release schedule to the LLVM community and update the website. * Do bug-fix releases every two weeks until X.1.5 or X.1.6 (if necessary). Release Process; ===============. .. contents::; :local:. Release Administrative Tasks; ----------------------------. This section describes a few administrative tasks that need to be done for the; release process to begin. Specifically, it involves:. * Updating version numbers,. * Creating the release branch, and. * Tagging release candidates for the release team to begin testing. Create Release Branch; ^^^^^^^^^^^^^^^^^^^^^. Branch the Git trunk using the following procedure:. #. Remind developers that the release branching is imminent and to refrain from; committing patches that might break the build. E.g., new features, large; patches for works in progress, an overhaul of the type system, an exciting; new TableGen feature, etc. #. Verify that the current git trunk is in decent shape by; examining nightly tester and buildbot results. #. Bump the version in trunk to N.0.0git and tag the commit with llvmorg-N-init.; If ``X`` is the version to be released, then ``N`` is ``X + 1``. ::. $ git tag -sa llvmorg-N-init. #. Clear the release notes in trunk. #. Create the release branch from the last known good revision from before the; version bump. The branch's name is release/X.x where ``X`` is the major version; number and ``x`` is just the letter ``x``. #. On the newly-created release branch, immediately bump the version; to X.1.0git (where ``X`` is the major version of the branch.). #. All tags and branches need to be created in both the llvm/llvm-project and; llvm/llvm-test-suite repos. Update LLVM Version; ^^^^^^^^^^^^^^^^^^^. After creating the LLVM release branch, update the release branches'; version with the script in ``llvm/utils/release/bump-version.py``. Tagging the LLVM Release Candidates; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Tag release candidates:. ::. $ g",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst:3901,test,tester,3901,interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,1,['test'],['tester']
Testability,"else; return 4;; }. _test:; 	movl 8(%esp), %eax; 	movaps (%eax), %xmm0; 	movl 4(%esp), %eax; 	movaps (%eax), %xmm1; 	comiss %xmm0, %xmm1; 	setae %al; 	movzbl %al, %ecx; 	movl $3, %eax; 	movl $4, %edx; 	cmpl $0, %ecx; 	cmove %edx, %eax; 	ret. Note the setae, movzbl, cmpl, cmove can be replaced with a single cmovae. There; are a number of issues. 1) We are introducing a setcc between the result of the; intrisic call and select. 2) The intrinsic is expected to produce a i32 value; so a any extend (which becomes a zero extend) is added. We probably need some kind of target DAG combine hook to fix this. //===---------------------------------------------------------------------===//. We generate significantly worse code for this than GCC:; http://gcc.gnu.org/bugzilla/show_bug.cgi?id=21150; http://gcc.gnu.org/bugzilla/attachment.cgi?id=8701. There is also one case we do worse on PPC. //===---------------------------------------------------------------------===//. For this:. int test(int a); {; return a * 3;; }. We currently emits; 	imull $3, 4(%esp), %eax. Perhaps this is what we really should generate is? Is imull three or four; cycles? Note: ICC generates this:; 	movl	4(%esp), %eax; 	leal	(%eax,%eax,2), %eax. The current instruction priority is based on pattern complexity. The former is; more ""complex"" because it folds a load so the latter will not be emitted. Perhaps we should use AddedComplexity to give LEA32r a higher priority? We; should always try to match LEA first since the LEA matching code does some; estimate to determine whether the match is profitable. However, if we care more about code size, then imull is better. It's two bytes; shorter than movl + leal. On a Pentium M, both variants have the same characteristics with regard; to throughput; however, the multiplication has a latency of four cycles, as; opposed to two cycles for the movl+lea variant. //===---------------------------------------------------------------------===//. It appears gcc place string da",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:6761,test,test,6761,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt,1,['test'],['test']
Testability,"ely, ``'all'`` can be used to enable; or disable all known extensions. Example disabling double support for the 64-bit SPIR-V target:. .. code-block:: console. $ clang -c --target=spirv64 -cl-ext=-cl_khr_fp64 test.cl. Enabling all extensions except double support in R600 AMD GPU can be done using:. .. code-block:: console. $ clang --target=r600 -cl-ext=-all,+cl_khr_fp16 test.cl. Note that some generic targets e.g. SPIR/SPIR-V enable all extensions/features in; clang by default. OpenCL Targets; --------------. OpenCL targets are derived from the regular Clang target classes. The OpenCL; specific parts of the target representation provide address space mapping as; well as a set of supported extensions. Specific Targets; ^^^^^^^^^^^^^^^^. There is a set of concrete HW architectures that OpenCL can be compiled for. - For AMD target:. .. code-block:: console. $ clang --target=amdgcn-amd-amdhsa -mcpu=gfx900 test.cl. - For Nvidia architectures:. .. code-block:: console. $ clang --target=nvptx64-unknown-unknown test.cl. Generic Targets; ^^^^^^^^^^^^^^^. - A SPIR-V binary can be produced for 32 or 64 bit targets. .. code-block:: console. $ clang --target=spirv32 -c test.cl; $ clang --target=spirv64 -c test.cl. More details can be found in :ref:`the SPIR-V support section <spir-v>`. - SPIR is available as a generic target to allow portable bitcode to be produced; that can be used across GPU toolchains. The implementation follows `the SPIR; specification <https://www.khronos.org/spir>`_. There are two flavors; available for 32 and 64 bits. .. code-block:: console. $ clang --target=spir test.cl -emit-llvm -c; $ clang --target=spir64 test.cl -emit-llvm -c. Clang will generate SPIR v1.2 compatible IR for OpenCL versions up to 2.0 and; SPIR v2.0 for OpenCL v2.0 or C++ for OpenCL. - x86 is used by some implementations that are x86 compatible and currently; remains for backwards compatibility (with older implementations prior to; SPIR target support). For ""non-SPMD"" targets which can",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:145211,test,test,145211,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"em is to check for target-specific output, for example sizes; of structures, paths and architecture names, for example:. * Tests containing Windows paths will fail on Linux and vice-versa.; * Tests that check for ``x86_64`` somewhere in the text will fail anywhere else.; * Tests where the debug information calculates the size of types and structures. Also, if the test rely on any behaviour that is coded in any back-end, it must; go in its own directory. So, for instance, code generator tests for ARM go; into ``test/CodeGen/ARM`` and so on. Those directories contain a special; ``lit`` configuration file that ensure all tests in that directory will; only run if a specific back-end is compiled and available. For instance, on ``test/CodeGen/ARM``, the ``lit.local.cfg`` is:. .. code-block:: python. config.suffixes = ['.ll', '.c', '.cpp', '.test']; if not 'ARM' in config.root.targets:; config.unsupported = True. Other platform-specific tests are those that depend on a specific feature; of a specific sub-architecture, for example only to Intel chips that support ``AVX2``. For instance, ``test/CodeGen/X86/psubus.ll`` tests three sub-architecture; variants:. .. code-block:: llvm. ; RUN: llc -mcpu=core2 < %s | FileCheck %s -check-prefix=SSE2; ; RUN: llc -mcpu=corei7-avx < %s | FileCheck %s -check-prefix=AVX1; ; RUN: llc -mcpu=core-avx2 < %s | FileCheck %s -check-prefix=AVX2. And the checks are different:. .. code-block:: llvm. ; SSE2: @test1; ; SSE2: psubusw LCPI0_0(%rip), %xmm0; ; AVX1: @test1; ; AVX1: vpsubusw LCPI0_0(%rip), %xmm0, %xmm0; ; AVX2: @test1; ; AVX2: vpsubusw LCPI0_0(%rip), %xmm0, %xmm0. So, if you're testing for a behaviour that you know is platform-specific or; depends on special features of sub-architectures, you must add the specific; triple, test with the specific FileCheck and put it into the specific; directory that will filter out all other architectures. Constraining test execution; ---------------------------. Some tests can be run only in specific con",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:18536,test,tests,18536,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['tests']
Testability,"ember or base class of a class with a; non-trivial constructor is referred before constructor begins execution.; Source: C++03 12.7p1; C++11 12.7p1. struct non_POD {; int i;; non_POD();; };. extern non_POD non_pod;. int *p = &non_pod.i; // warn. struct POD {; int i;; };. struct non_POD : public POD {; POD pod;; };. extern non_POD non_pod;. int *p = &non_pod.pod.i; // warn. struct POD {; int i;; };. struct non_POD : public POD {};. extern non_POD non_pod;. POD *p = &non_pod; // warn. struct non_POD {; int i;; non_POD();; };. struct S {; int *k;; non_POD non_pod;; S() : k(&non_pod.i) {} // warn; };. undefbehavior.MemberRefAfterDtor; (C++); C++03: Undefined behavior: non-static member of non-POD class type is referred; after destructor ends execution.; C++11: Undefined behavior: non-static member of a class with a non-trivial; destructor is referred after destructor ends execution.; Source: C++03 12.7p1; C++11 12.7p1. class C {; public:; C();; void f();; };. void test() {; C *c = new C();; c->~C();; c->f(); // warn; }. undefbehavior.CtorForeignCall; (C++); Undefined behavior: call to virtual function of an object under construction; whose type is neither the constructors own class or one of its bases.; Source: C++11 12.7p4. class A {; public:; virtual void f() {};; };. class B {; public:; B(A* a) { a->f(); } // warn; };. class C : public A, B {; public:; C() : B((A*)this) {}; };. undefbehavior.CtorForeignTypeid; (C++); Undefined behavior: the operand of typeid is an object under; construction whose type is neither the constructors own class or one of its; bases.; Source: C++11 12.7p5. #include <typeinfo>. class A {};. class B {; public:; B(A* a) {; (void)typeid(*a); // warn; }; };. class C : public A, B {; public:; C() : B((A*)this) {}; };. undefbehavior.CtorForeignCast; (C++); Undefined behavior: the operand of dynamic_cast is an object under; construction whose type is neither the constructors own class or one of its; bases.; Source: C++11 12.7p6. #include <typeinfo>",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:11153,test,test,11153,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"embly; tests and check the MIR output of a specific code generation pass. Testing Individual Code Generation Passes; -----------------------------------------. The ``-run-pass`` option in llc allows you to create MIR tests that invoke just; a single code generation pass. When this option is used, llc will parse an; input MIR file, run the specified code generation pass(es), and output the; resulting MIR code. You can generate an input MIR file for the test by using the ``-stop-after`` or; ``-stop-before`` option in llc. For example, if you would like to write a test; for the post register allocation pseudo instruction expansion pass, you can; specify the machine copy propagation pass in the ``-stop-after`` option, as it; runs just before the pass that we are trying to test:. ``llc -stop-after=machine-cp bug-trigger.ll -o test.mir``. If the same pass is run multiple times, a run index can be included; after the name with a comma. ``llc -stop-after=dead-mi-elimination,1 bug-trigger.ll -o test.mir``. After generating the input MIR file, you'll have to add a run line that uses; the ``-run-pass`` option to it. In order to test the post register allocation; pseudo instruction expansion pass on X86-64, a run line like the one shown; below can be used:. ``# RUN: llc -o - %s -mtriple=x86_64-- -run-pass=postrapseudos | FileCheck %s``. The MIR files are target dependent, so they have to be placed in the target; specific test directories (``lib/CodeGen/TARGETNAME``). They also need to; specify a target triple or a target architecture either in the run line or in; the embedded LLVM IR module. Simplifying MIR files; ^^^^^^^^^^^^^^^^^^^^^. The MIR code coming out of ``-stop-after``/``-stop-before`` is very verbose;; Tests are more accessible and future proof when simplified:. - Use the ``-simplify-mir`` option with llc. - Machine function attributes often have default values or the test works just; as well with default values. Typical candidates for this are: `alignment:`,; `expose",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MIRLangRef.rst:2358,test,test,2358,interpreter/llvm-project/llvm/docs/MIRLangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MIRLangRef.rst,1,['test'],['test']
Testability,"ement; -------------------------------------. Expressions and statements are one of the most fundamental constructs within a; compiler, because they interact with many different parts of the AST, semantic; analysis, and IR generation. Therefore, adding a new expression or statement; kind into Clang requires some care. The following list details the various; places in Clang where an expression or statement needs to be introduced, along; with patterns to follow to ensure that the new expression or statement works; well across all of the C languages. We focus on expressions, but statements; are similar. #. Introduce parsing actions into the parser. Recursive-descent parsing is; mostly self-explanatory, but there are a few things that are worth keeping; in mind:. * Keep as much source location information as possible! You'll want it later; to produce great diagnostics and support Clang's various features that map; between source code and the AST.; * Write tests for all of the ""bad"" parsing cases, to make sure your recovery; is good. If you have matched delimiters (e.g., parentheses, square; brackets, etc.), use ``Parser::BalancedDelimiterTracker`` to give nice; diagnostics when things go wrong. #. Introduce semantic analysis actions into ``Sema``. Semantic analysis should; always involve two functions: an ``ActOnXXX`` function that will be called; directly from the parser, and a ``BuildXXX`` function that performs the; actual semantic analysis and will (eventually!) build the AST node. It's; fairly common for the ``ActOnCXX`` function to do very little (often just; some minor translation from the parser's representation to ``Sema``'s; representation of the same thing), but the separation is still important:; C++ template instantiation, for example, should always call the ``BuildXXX``; variant. Several notes on semantic analysis before we get into construction; of the AST:. * Your expression probably involves some types and some subexpressions.; Make sure to fully check ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:145413,test,tests,145413,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,1,['test'],['tests']
Testability,"ementPtr; GlobalISel/index; GwpAsan; HowToSetUpLLVMStyleRTTI; HowToUseAttributes; InAlloca; LangRef; LibFuzzer; MarkedUpDisassembly; MIRLangRef; OptBisect; PCSectionsMetadata; PDB/index; PointerAuth; ScudoHardenedAllocator; MemTagSanitizer; Security; SecurityTransparencyReports; SegmentedStacks; StackMaps; SpeculativeLoadHardening; Statepoints; SymbolizerMarkupFormat; SystemLibrary; TestingGuide; TransformMetadata; TypeMetadata; XRay; XRayExample; XRayFDRFormat; YamlIO. API Reference; -------------. `Doxygen generated documentation <https://llvm.org/doxygen/>`_; (`classes <https://llvm.org/doxygen/inherits.html>`_). :doc:`HowToUseAttributes`; Answers some questions about the new Attributes infrastructure. LLVM Reference; --------------. ======================; Command Line Utilities; ======================. :doc:`LLVM Command Guide <CommandGuide/index>`; A reference manual for the LLVM command line utilities (""man"" pages for LLVM; tools). :doc:`Bugpoint`; Automatic bug finder and test-case reducer description and usage; information. :doc:`OptBisect`; A command line option for debugging optimization-induced failures. :doc:`SymbolizerMarkupFormat`; A reference for the log symbolizer markup accepted by ``llvm-symbolizer``. :doc:`The Microsoft PDB File Format <PDB/index>`; A detailed description of the Microsoft PDB (Program Database) file format. ==================; Garbage Collection; ==================. :doc:`GarbageCollection`; The interfaces source-language compilers should use for compiling GC'd; programs. :doc:`Statepoints`; This describes a set of experimental extensions for garbage; collection support. =========; LibFuzzer; =========. :doc:`LibFuzzer`; A library for writing in-process guided fuzzers. :doc:`FuzzingLLVM`; Information on writing and using Fuzzers to find bugs in LLVM. ========; LLVM IR; ========. :doc:`LLVM Language Reference Manual <LangRef>`; Defines the LLVM intermediate representation and the assembly form of the; different nodes. :doc:`InAllo",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Reference.rst:1369,test,test-case,1369,interpreter/llvm-project/llvm/docs/Reference.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Reference.rst,1,['test'],['test-case']
Testability,"ementation MyObj; @end. .. _osx-cocoa-VariadicMethodTypes:. osx.cocoa.VariadicMethodTypes (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for passing non-Objective-C types to variadic collection; initialization methods that expect only Objective-C types. .. code-block:: objc. void test() {; [NSSet setWithObjects:@""Foo"", ""Bar"", nil];; // warn: argument should be an ObjC pointer type, not 'char *'; }. .. _osx-coreFoundation-CFError:. osx.coreFoundation.CFError (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check usage of CFErrorRef* parameters. .. code-block:: c. void test(CFErrorRef *error) {; // warn: function accepting CFErrorRef* should have a; // non-void return; }. int foo(CFErrorRef *error) {; *error = 0; // warn: potential null dereference; return 0;; }. .. _osx-coreFoundation-CFNumber:. osx.coreFoundation.CFNumber (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for proper uses of CFNumber APIs. .. code-block:: c. CFNumberRef test(unsigned char x) {; return CFNumberCreate(0, kCFNumberSInt16Type, &x);; // warn: 8 bit integer is used to initialize a 16 bit integer; }. .. _osx-coreFoundation-CFRetainRelease:. osx.coreFoundation.CFRetainRelease (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for null arguments to CFRetain/CFRelease/CFMakeCollectable. .. code-block:: c. void test(CFTypeRef p) {; if (!p); CFRetain(p); // warn; }. void test(int x, CFTypeRef p) {; if (p); return;. CFRelease(p); // warn; }. .. _osx-coreFoundation-containers-OutOfBounds:. osx.coreFoundation.containers.OutOfBounds (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Checks for index out-of-bounds when using 'CFArray' API. .. code-block:: c. void test() {; CFArrayRef A = CFArrayCreate(0, 0, 0, &kCFTypeArrayCallBacks);; CFArrayGetValueAtIndex(A, 0); // warn; }. .. _osx-coreFoundation-containers-PointerSizedValues:. osx.coreFoundation.containers.PointerSizedValues (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warns if 'CFArray', 'CFDictionary', 'CFSet' are created with non-pointer-size ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:42531,test,test,42531,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"ementing methods follow the signature of the static type.; It is undefined behavior if ARC is exposed to an invalid pointer. For ARC's purposes, a valid object is one with ""well-behaved"" retaining; operations. Specifically, the object must be laid out such that the; Objective-C message send machinery can successfully send it the following; messages:. * ``retain``, taking no arguments and returning a pointer to the object.; * ``release``, taking no arguments and returning ``void``.; * ``autorelease``, taking no arguments and returning a pointer to the object. The behavior of these methods is constrained in the following ways. The term; :arc-term:`high-level semantics` is an intentionally vague term; the intent is; that programmers must implement these methods in a way such that the compiler,; modifying code in ways it deems safe according to these constraints, will not; violate their requirements. For example, if the user puts logging statements; in ``retain``, they should not be surprised if those statements are executed; more or less often depending on optimization settings. These constraints are; not exhaustive of the optimization opportunities: values held in local; variables are subject to additional restrictions, described later in this; document. It is undefined behavior if a computation history featuring a send of; ``retain`` followed by a send of ``release`` to the same object, with no; intervening ``release`` on that object, is not equivalent under the high-level; semantics to a computation history in which these sends are removed. Note that; this implies that these methods may not raise exceptions. It is undefined behavior if a computation history features any use whatsoever; of an object following the completion of a send of ``release`` that is not; preceded by a send of ``retain`` to the same object. The behavior of ``autorelease`` must be equivalent to sending ``release`` when; one of the autorelease pools currently in scope is popped. It may not throw a",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/AutomaticReferenceCounting.rst:13758,log,logging,13758,interpreter/llvm-project/clang/docs/AutomaticReferenceCounting.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/AutomaticReferenceCounting.rst,1,['log'],['logging']
Testability,"en it and the previous directive. A ""``CHECK-NEXT:``"" cannot be; the first directive in a file. The ""CHECK-SAME:"" directive; ~~~~~~~~~~~~~~~~~~~~~~~~~~~. Sometimes you want to match lines and would like to verify that matches happen; on the same line as the previous match. In this case, you can use ""``CHECK:``""; and ""``CHECK-SAME:``"" directives to specify this. If you specified a custom; check prefix, just use ""``<PREFIX>-SAME:``"". ""``CHECK-SAME:``"" is particularly powerful in conjunction with ""``CHECK-NOT:``""; (described below). For example, the following works like you'd expect:. .. code-block:: llvm. !0 = !DILocation(line: 5, scope: !1, inlinedAt: !2). ; CHECK: !DILocation(line: 5,; ; CHECK-NOT: column:; ; CHECK-SAME: scope: ![[SCOPE:[0-9]+]]. ""``CHECK-SAME:``"" directives reject the input if there are any newlines between; it and the previous directive. ""``CHECK-SAME:``"" is also useful to avoid writing matchers for irrelevant; fields. For example, suppose you're writing a test which parses a tool that; generates output like this:. .. code-block:: text. Name: foo; Field1: ...; Field2: ...; Field3: ...; Value: 1. Name: bar; Field1: ...; Field2: ...; Field3: ...; Value: 2. Name: baz; Field1: ...; Field2: ...; Field3: ...; Value: 1. To write a test that verifies ``foo`` has the value ``1``, you might first; write this:. .. code-block:: text. CHECK: Name: foo; CHECK: Value: 1{{$}}. However, this would be a bad test: if the value for ``foo`` changes, the test; would still pass because the ""``CHECK: Value: 1``"" line would match the value; from ``baz``. To fix this, you could add ``CHECK-NEXT`` matchers for every; ``FieldN:`` line, but that would be verbose, and need to be updated when; ``Field4`` is added. A more succinct way to write the test using the; ""``CHECK-SAME:``"" matcher would be as follows:. .. code-block:: text. CHECK: Name: foo; CHECK: Value:; CHECK-SAME: {{ 1$}}. This verifies that the *next* time ""``Value:``"" appears in the output, it has; the value ``1``.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst:15016,test,test,15016,interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,1,['test'],['test']
Testability,"enCL published extensions; <https://www.khronos.org/registry/OpenCL>`_; or any vendor extension. Alternatively, ``'all'`` can be used to enable; or disable all known extensions. Example disabling double support for the 64-bit SPIR-V target:. .. code-block:: console. $ clang -c --target=spirv64 -cl-ext=-cl_khr_fp64 test.cl. Enabling all extensions except double support in R600 AMD GPU can be done using:. .. code-block:: console. $ clang --target=r600 -cl-ext=-all,+cl_khr_fp16 test.cl. Note that some generic targets e.g. SPIR/SPIR-V enable all extensions/features in; clang by default. OpenCL Targets; --------------. OpenCL targets are derived from the regular Clang target classes. The OpenCL; specific parts of the target representation provide address space mapping as; well as a set of supported extensions. Specific Targets; ^^^^^^^^^^^^^^^^. There is a set of concrete HW architectures that OpenCL can be compiled for. - For AMD target:. .. code-block:: console. $ clang --target=amdgcn-amd-amdhsa -mcpu=gfx900 test.cl. - For Nvidia architectures:. .. code-block:: console. $ clang --target=nvptx64-unknown-unknown test.cl. Generic Targets; ^^^^^^^^^^^^^^^. - A SPIR-V binary can be produced for 32 or 64 bit targets. .. code-block:: console. $ clang --target=spirv32 -c test.cl; $ clang --target=spirv64 -c test.cl. More details can be found in :ref:`the SPIR-V support section <spir-v>`. - SPIR is available as a generic target to allow portable bitcode to be produced; that can be used across GPU toolchains. The implementation follows `the SPIR; specification <https://www.khronos.org/spir>`_. There are two flavors; available for 32 and 64 bits. .. code-block:: console. $ clang --target=spir test.cl -emit-llvm -c; $ clang --target=spir64 test.cl -emit-llvm -c. Clang will generate SPIR v1.2 compatible IR for OpenCL versions up to 2.0 and; SPIR v2.0 for OpenCL v2.0 or C++ for OpenCL. - x86 is used by some implementations that are x86 compatible and currently; remains for backward",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:145107,test,test,145107,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"en_complete, it indicates; the coroutine must reach the final suspend point when it get destroyed. This attribute only works for switched-resume coroutines now. Metadata; ========. '``coro.outside.frame``' Metadata; ---------------------------------. ``coro.outside.frame`` metadata may be attached to an alloca instruction to; to signify that it shouldn't be promoted to the coroutine frame, useful for; filtering allocas out by the frontend when emitting internal control mechanisms.; Additionally, this metadata is only used as a flag, so the associated; node must be empty. .. code-block:: text. %__coro_gro = alloca %struct.GroType, align 1, !coro.outside.frame !0. ...; !0 = !{}. Areas Requiring Attention; =========================; #. When coro.suspend returns -1, the coroutine is suspended, and it's possible; that the coroutine has already been destroyed (hence the frame has been freed).; We cannot access anything on the frame on the suspend path.; However there is nothing that prevents the compiler from moving instructions; along that path (e.g. LICM), which can lead to use-after-free. At the moment; we disabled LICM for loops that have coro.suspend, but the general problem still; exists and requires a general solution. #. Take advantage of the lifetime intrinsics for the data that goes into the; coroutine frame. Leave lifetime intrinsics as is for the data that stays in; allocas. #. The CoroElide optimization pass relies on coroutine ramp function to be; inlined. It would be beneficial to split the ramp function further to; increase the chance that it will get inlined into its caller. #. Design a convention that would make it possible to apply coroutine heap; elision optimization across ABI boundaries. #. Cannot handle coroutines with `inalloca` parameters (used in x86 on Windows). #. Alignment is ignored by coro.begin and coro.free intrinsics. #. Make required changes to make sure that coroutine optimizations work with; LTO. #. More tests, more tests, more tests; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Coroutines.rst:59477,test,tests,59477,interpreter/llvm-project/llvm/docs/Coroutines.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Coroutines.rst,3,['test'],['tests']
Testability,"ence and target) with the; missing and added elements. LOGICAL ELEMENTS; """"""""""""""""""""""""""""""""; It compares individual logical elements without considering if their; parents are the same. For both comparison methods, the equal criteria; includes the name, source code location, type, lexical scope level. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level; --compare=types; --report=list; --print=symbols,types,summary; test-dwarf-clang.o test-dwarf-gcc.o. Reference: 'test-dwarf-clang.o'; Target: 'test-dwarf-gcc.o'. (1) Missing Types:; -[003] 4 {TypeAlias} 'INTEGER' -> 'int'. (1) Added Types:; +[004] 4 {TypeAlias} 'INTEGER' -> 'int'. ----------------------------------------; Element Expected Missing Added; ----------------------------------------; Scopes 4 0 0; Symbols 0 0 0; Types 2 1 1; Lines 0 0 0; ----------------------------------------; Total 6 1 1. Changing the *Reference* and *Target* order:. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level; --compare=types; --report=list; --print=symbols,types,summary; test-dwarf-gcc.o test-dwarf-clang.o. Reference: 'test-dwarf-gcc.o'; Target: 'test-dwarf-clang.o'. (1) Missing Types:; -[004] 4 {TypeAlias} 'INTEGER' -> 'int'. (1) Added Types:; +[003] 4 {TypeAlias} 'INTEGER' -> 'int'. ----------------------------------------; Element Expected Missing Added; ----------------------------------------; Scopes 4 0 0; Symbols 0 0 0; Types 2 1 1; Lines 0 0 0; ----------------------------------------; Total 6 1 1. As the *Reference* and *Target* are switched, the *Added Types* from; the first case now are listed as *Missing Types*. TEST CASE 2 - ASSEMBLER INSTRUCTIONS; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; The below example is used to show different output generated by; :program:`llvm-debuginfo-analyzer`. We compiled the example for an X86; Codeview and ELF targets with recent versions of Clang, GCC and MSVC; (-O0 -g) for Windows and Linux. .. code-block:: c++. 1 extern int printf(const char * format, ... );; 2; 3 ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:32030,test,test-dwarf-gcc,32030,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['test'],['test-dwarf-gcc']
Testability,ence architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_T,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:4402,test,testConvNetPred,4402,tmva/tmva/test/DNN/CNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt,1,['test'],['testConvNetPred']
Testability,"end. void test() {; MyClass *obj1;; id i = obj1.x; // warn: uninitialized object pointer; }. // Objective-C; @interface Subscriptable : NSObject; - (id)objectAtIndexedSubscript:(unsigned int)index;; @end. @interface MyClass : Subscriptable; @property (readwrite,assign) id x;; - (long double)longDoubleM;; @end. void test() {; MyClass *obj1;; id i = obj1[0]; // warn: uninitialized object pointer; }. core.DivideZero; (C, C++, ObjC); Check for division by zero.co. void test(int z) {; if (z == 0); int x = 1 / z; // warn; }. void test() {; int x = 1;; int y = x % 0; // warn; }. core.NonNullParamChecker; (C, C++, ObjC); Check for null pointers passed as arguments to a function whose arguments are; marked with the nonnull attribute. int f(int *p) __attribute__((nonnull));. void test(int *p) {; if (!p); f(p); // warn; }. core.NullDereference; (C, C++, ObjC); Check for dereferences of null pointers. // C; void test(int *p) {; if (p); return;. int x = p[0]; // warn; }. // C; void test(int *p) {; if (!p); *p = 0; // warn; }. // C++; class C {; public:; int x;; };. void test() {; C *pc = 0;; int k = pc->x; // warn; }. // Objective-C; @interface MyClass {; @public; int x;; }; @end. void test() {; MyClass *obj = 0;; obj->x = 1; // warn; }. core.StackAddressEscape; (C); Check that addresses of stack memory do not escape the function. char const *p;. void test() {; char const str[] = ""string"";; p = str; // warn; }. void* test() {; return __builtin_alloca(12); // warn; }. void test() {; static int *x;; int y;; x = &y; // warn; }. core.UndefinedBinaryOperatorResult; (C); Check for undefined results of binary operators. void test() {; int x;; int y = x + 1; // warn: left operand is garbage; }. core.VLASize; (C); Check for declarations of VLA of undefined or zero size. void test() {; int x;; int vla1[x]; // warn: garbage as size; }. void test() {; int x = 0;; int vla2[x]; // warn: zero size; }. core.uninitialized.ArraySubscript; (C); Check for uninitialized values used as array subscrip",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:3347,test,test,3347,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"enerate good code) to; generate a reference output. Once ``bugpoint`` has a reference output for the; test program, it tries executing it with the selected code generator. If the; selected code generator crashes, ``bugpoint`` starts the `crash debugger`_ on; the code generator. Otherwise, if the resulting output differs from the; reference output, it assumes the difference resulted from a code generator; failure, and starts the `code generator debugger`_. Finally, if the output of the selected code generator matches the reference; output, ``bugpoint`` runs the test program after all of the LLVM passes have; been applied to it. If its output differs from the reference output, it assumes; the difference resulted from a failure in one of the LLVM passes, and enters the; `miscompilation debugger`_. Otherwise, there is no problem ``bugpoint`` can; debug. .. _crash debugger:. Crash debugger; --------------. If an optimizer or code generator crashes, ``bugpoint`` will try as hard as it; can to reduce the list of passes (for optimizer crashes) and the size of the; test program. First, ``bugpoint`` figures out which combination of optimizer; passes triggers the bug. This is useful when debugging a problem exposed by; ``opt``, for example, because it runs over 38 passes. Next, ``bugpoint`` tries removing functions from the test program, to reduce its; size. Usually it is able to reduce a test program to a single function, when; debugging intraprocedural optimizations. Once the number of functions has been; reduced, it attempts to delete various edges in the control flow graph, to; reduce the size of the function as much as possible. Finally, ``bugpoint``; deletes any individual LLVM instructions whose absence does not eliminate the; failure. At the end, ``bugpoint`` should tell you what passes crash, give you a; bitcode file, and give you instructions on how to reproduce the failure with; ``opt`` or ``llc``. .. _code generator debugger:. Code generator debugger; -------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst:3223,test,test,3223,interpreter/llvm-project/llvm/docs/Bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst,1,['test'],['test']
Testability,"eneration for threadprivate; variables relies on OpenMP runtime library. .. _opencl:. OpenCL Features; ===============. Clang can be used to compile OpenCL kernels for execution on a device; (e.g. GPU). It is possible to compile the kernel into a binary (e.g. for AMDGPU); that can be uploaded to run directly on a device (e.g. using; `clCreateProgramWithBinary; <https://www.khronos.org/registry/OpenCL/specs/opencl-1.1.pdf#111>`_) or; into generic bitcode files loadable into other toolchains. Compiling to a binary using the default target from the installation can be done; as follows:. .. code-block:: console. $ echo ""kernel void k(){}"" > test.cl; $ clang test.cl. Compiling for a specific target can be done by specifying the triple corresponding; to the target, for example:. .. code-block:: console. $ clang --target=nvptx64-unknown-unknown test.cl; $ clang --target=amdgcn-amd-amdhsa -mcpu=gfx900 test.cl. Compiling to bitcode can be done as follows:. .. code-block:: console. $ clang -c -emit-llvm test.cl. This will produce a file `test.bc` that can be used in vendor toolchains; to perform machine code generation. Note that if compiled to bitcode for generic targets such as SPIR/SPIR-V,; portable IR is produced that can be used with various vendor; tools as well as open source tools such as `SPIRV-LLVM Translator; <https://github.com/KhronosGroup/SPIRV-LLVM-Translator>`_; to produce SPIR-V binary. More details are provided in `the offline; compilation from OpenCL kernel sources into SPIR-V using open source; tools; <https://github.com/KhronosGroup/OpenCL-Guide/blob/main/chapters/os_tooling.md>`_.; From clang 14 onwards SPIR-V can be generated directly as detailed in; :ref:`the SPIR-V support section <spir-v>`. Clang currently supports OpenCL C language standards up to v2.0. Clang mainly; supports full profile. There is only very limited support of the embedded; profile.; From clang 9 a C++ mode is available for OpenCL (see; :ref:`C++ for OpenCL <cxx_for_opencl>`). OpenC",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:141290,test,test,141290,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"enient; way to specify instructions, lines, scopes, symbols and types all at; once. .. code-block:: text. =elements: Instructions, lines, scopes, symbols and types.; =instructions: Assembler instructions for code sections.; =lines: Source lines referenced in the debug information.; =scopes: Lexical blocks (function, class, namespace, etc).; =symbols: Symbols (variable, member, parameter, etc).; =types: Types (pointer, reference, type alias, etc). The following options print information, collected during the creation; of the elements, such as: scope contributions to the debug information;; summary of elements created, printed or matched (:option:`--select`);; warnings produced during the view creation. .. code-block:: text. =sizes: Debug Information scopes contributions.; =summary: Summary of elements allocated, selected or printed.; =warnings: Warnings detected. Note: The **--print=sizes** option is ELF specific. .. _output_:. OUTPUT; ~~~~~~; The following options describe how to control the output generated when; printing the logical elements. .. option:: --output-file=<path>. Redirect the output to a file specified by <path>, where - is the; standard output stream. :program:`llvm-debuginfo-analyzer` has the concept of **split view**.; When redirecting the output from a complex binary format, it is; **divided** into individual files, each one containing the logical view; output for a single compilation unit. .. option:: --output-folder=<name>. The folder to write a file per compilation unit when **--output=split**; is specified. .. option:: --output-level=<level>. Only print elements up to the given **lexical level** value. The input; file is at lexical level zero and a compilation unit is at lexical level; one. .. option:: --output=<value[,value,...]>. With **value** being one of the options in the following lists. .. code-block:: text. =all: Include all the below outputs. .. code-block:: text. =json: Use JSON as the output format (Not implemented).; =split: Split",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:10728,log,logical,10728,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['log'],['logical']
Testability,"ens for errors that we don’t have; graceful recovery. Prior to Recovery AST, a mismatched-argument function call; expression was dropped though a CallExpr was created for semantic analysis. With these strategies, clang surfaces better diagnostics, and provides AST; consumers a rich AST reflecting the written source code as much as possible even; for broken code. Recovery AST; ^^^^^^^^^^^^. The idea of Recovery AST is to use recovery nodes which act as a placeholder to; maintain the rough structure of the parsing tree, preserve locations and; children but have no language semantics attached to them. For example, consider the following mismatched function call:. .. code-block:: c++. int NoArg();; void test(int abc) {; NoArg(abc); // oops, mismatched function arguments.; }. Without Recovery AST, the invalid function call expression (and its child; expressions) would be dropped in the AST:. ::. |-FunctionDecl <line:1:1, col:11> NoArg 'int ()'; `-FunctionDecl <line:2:1, line:4:1> test 'void (int)'; |-ParmVarDecl <col:11, col:15> col:15 used abc 'int'; `-CompoundStmt <col:20, line:4:1>. With Recovery AST, the AST looks like:. ::. |-FunctionDecl <line:1:1, col:11> NoArg 'int ()'; `-FunctionDecl <line:2:1, line:4:1> test 'void (int)'; |-ParmVarDecl <col:11, col:15> used abc 'int'; `-CompoundStmt <col:20, line:4:1>; `-RecoveryExpr <line:3:3, col:12> 'int' contains-errors; |-UnresolvedLookupExpr <col:3> '<overloaded function type>' lvalue (ADL) = 'NoArg'; `-DeclRefExpr <col:9> 'int' lvalue ParmVar 'abc' 'int'. An alternative is to use existing Exprs, e.g. CallExpr for the above example.; This would capture more call details (e.g. locations of parentheses) and allow; it to be treated uniformly with valid CallExprs. However, jamming the data we; have into CallExpr forces us to weaken its invariants, e.g. arg count may be; wrong. This would introduce a huge burden on consumers of the AST to handle such; ""impossible"" cases. So when we're representing (rather than correcting) erro",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:86285,test,test,86285,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,1,['test'],['test']
Testability,"ent = 0;. If addr is not zero and the pointer addr points at is; also not zero, then the caller has allocated a branch; object and is asking us to use it. The caller owns it; and must delete it when it is no longer needed. Example:. Event* event = new Event();; branch->SetAddress(&event);; ... Do some work.; delete event;; event = 0;. These rules affect users of TTree::Branch(),; TTree::SetBranchAddress(), and TChain::SetBranchAddress(); as well because those routines call this one. An example of a tree with branches with objects allocated; and owned by us:. TFile* f1 = new TFile(""myfile_original.root"");; TTree* t1 = (TTree*) f->Get(""MyTree"");; TFile* f2 = new TFile(""myfile_copy.root"", ""recreate"");; TTree* t2 = t1->Clone(0);; for (Int_t i = 0; i < 10; ++i) {; t1->GetEntry(i);; t2->Fill();; }; t2->Write(); delete f2;; f2 = 0;; delete f1;; f1 = 0;. An example of a branch with an object allocated by us,; but owned by the caller:. TFile* f = new TFile(""myfile.root"", ""recreate"");; TTree* t = new TTree(""t"", ""A test tree.""); Event* event = 0;; TBranchElement* br = t->Branch(""event."", &event);; for (Int_t i = 0; i < 10; ++i) {; ... Fill event with meaningful data in some way.; t->Fill();; }; t->Write();; delete event;; event = 0;; delete f;; f = 0;. Notice that the only difference between this example; and the following example is that the event pointer; is zero when the branch is created. An example of a branch with an object allocated and; owned by the caller:. TFile* f = new TFile(""myfile.root"", ""recreate"");; TTree* t = new TTree(""t"", ""A test tree.""); Event* event = new Event();; TBranchElement* br = t->Branch(""event."", &event);; for (Int_t i = 0; i < 10; ++i) {; ... Fill event with meaningful data in some way.; t->Fill();; }; t->Write();; delete event;; event = 0;; delete f;; f = 0;. TTreeFormula (TTree::Draw, TTree::Scan). Fix CollectionTree->Scan(""reco_ee_et[][2]:reco_ee_et[0][2]""); where reco_ee_et is a vector<vector<double> > See http://root.cern/phpBB2/viewtopic.ph",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/doc/v520/index.html:2418,test,test,2418,tree/doc/v520/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/doc/v520/index.html,1,['test'],['test']
Testability,"ent at CERN. NA49; has generated an impressive amount of data, around 10 Terabytes per; run. This rate provided the ideal environment to develop and test the; next generation data analysis. ROOT was, and still is, developed in the ""Bazaar style"", a term from; the book ""The Cathedral and the Bazaar"" by Eric S. Raymond. It means a; liberal, informal development style that heavily relies on the diverse; and deep talent of the user community. The result is that physicists; developed ROOT for themselves; this made it specific, appropriate,; useful, and over time refined and very powerful. The development of; ROOT is a continuous conversation between users and developers with; the line between the two blurring at times and the users becoming; co-developers. When it comes to storing and mining large amount of data, physics; plows the way with its Terabytes, but other fields and industry follow; close behind as they acquiring more and more data over time. They are; ready to use the true and tested technologies physics has invented. In; this way, other fields and industries have found ROOT useful and they; have started to use it also. In the bazaar view, software is released early and frequently to; expose it to thousands of eager co-developers to pound on, report; bugs, and contribute possible fixes. More users find more bugs,; because they stress the program in different ways. By now, after ten; years, the age of ROOT is quite mature. Most likely, you will find the; features you are looking for, and if you have found a hole, you are; encouraged to participate in the dialog and post your suggestion or; even implementation on the ROOT forum. ## The ROOT forum. If you have a question, it is likely that it has been asked, answered,; and stored in the ROOT Forum. Please use; the search engine to see if your question has already been answered; before posting a topic in the; Forum. You can access the ROOT forum at: <https://root-forum.cern.ch>. ## Contact Information. Several aut",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Introduction.md:1713,test,tested,1713,documentation/users-guide/Introduction.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Introduction.md,1,['test'],['tested']
Testability,"ent directory; --- the root of this configuration chain will always be a test suite. Once the; test configuration is cloned :program:`lit` checks for a *lit.local.cfg* file; in the subdirectory. If present, this file will be loaded and can be used to; specialize the configuration for each individual directory. This facility can; be used to define subdirectories of optional tests, or to change other; configuration parameters --- for example, to change the test format, or the; suffixes which identify test files. SUBSTITUTIONS; ~~~~~~~~~~~~~. :program:`lit` allows patterns to be substituted inside RUN commands. It also; provides the following base set of substitutions, which are defined in; TestRunner.py:. ======================= ==============; Macro Substitution; ======================= ==============; %s source path (path to the file currently being run); %S source dir (directory of the file currently being run); %p same as %S; %{pathsep} path separator; %{fs-src-root} root component of file system paths pointing to the LLVM checkout; %{fs-tmp-root} root component of file system paths pointing to the test's temporary directory; %{fs-sep} file system path separator; %t temporary file name unique to the test; %basename_t The last path component of %t but without the ``.tmp`` extension; %T parent directory of %t (not unique, deprecated, do not use); %% %; %/s %s but ``\`` is replaced by ``/``; %/S %S but ``\`` is replaced by ``/``; %/p %p but ``\`` is replaced by ``/``; %/t %t but ``\`` is replaced by ``/``; %/T %T but ``\`` is replaced by ``/``; %{s:real} %s after expanding all symbolic links and substitute drives; %{S:real} %S after expanding all symbolic links and substitute drives; %{p:real} %p after expanding all symbolic links and substitute drives; %{t:real} %t after expanding all symbolic links and substitute drives; %{T:real} %T after expanding all symbolic links and substitute drives; %{/s:real} %/s after expanding all symbolic links and substitute drives; %{",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:19535,test,test,19535,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,2,['test'],['test']
Testability,"ent has a set of; **attributes**, such as *types*, *classes*, *functions*, *variables*,; *parameters*, etc. The :option:`--attribute` can be used to specify which; attributes to include when printing a logical element. A logical element; may have a **kind** that describes specific types of elements. For; instance, a *scope* could have a kind value of *function*, *class*,; *namespace*. :program:`llvm-debuginfo-analyzer` defaults to print a pre-defined; layout of logical elements and attributes. The command line options can; be used to control the printed elements (:option:`--print`), using a; specific layout (:option:`--report`), matching a given pattern; (:option:`--select`, :option:`--select-offsets`). Also, the output can; be limited to specified logical elements using (:option:`--select-lines`,; :option:`--select-scopes`, :option:`--select-symbols`,; :option:`--select-types`). :program:`llvm-debuginfo-analyzer` can also compare a set of logical; views (:option:`--compare`), to find differences and identify possible; debug information syntax issues (:option:`--warning`) in any object file. OPTIONS; -------; :program:`llvm-debuginfo-analyzer` options are separated into several; categories, each tailored to a different purpose:. * :ref:`general_` - Standard LLVM options to display help, version, etc.; * :ref:`attributes_` - Describe how to include different details when; printing an element.; * :ref:`print_` - Specify which elements will be included when printing; the view.; * :ref:`output_` - Describe the supported formats when printing the view.; * :ref:`report_` - Describe the format layouts for view printing.; * :ref:`select_` - Allows to use specific criteria or conditions to; select which elements to print.; * :ref:`compare_` - Compare logical views and print missing and/or; added elements.; * :ref:`warning_` - Print the warnings detected during the creation; of the view.; * :ref:`internal_` - Internal analysis of the logical view. .. _general_:. GENERAL; ~~~~",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:2264,log,logical,2264,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['log'],['logical']
Testability,"ent in the code itself. In this way assertions make implicit assumptions; explicit in the code, which not only makes the analyzer more accurate when; finding bugs, but can help others better able to understand your code as well.; It can also help remove certain kinds of analyzer false positives by pruning off; false paths.; In order to exploit assertions, however, the analyzer must understand when it; encounters an ""assertion handler."" Typically assertions are; implemented with a macro, with the macro performing a check for the assertion; condition and, when the check fails, calling an assertion handler. For example, consider the following code; fragment:. void foo(int *p) {; assert(p != NULL);; }. When this code is preprocessed on Mac OS X it expands to the following:. void foo(int *p) {; (__builtin_expect(!(p != NULL), 0) ? __assert_rtn(__func__, ""t.c"", 4, ""p != NULL"") : (void)0);; }. In this example, the assertion handler is __assert_rtn. When called,; most assertion handlers typically print an error and terminate the program. The; analyzer can exploit such semantics by ending the analysis of a path once it; hits a call to an assertion handler.; The trick, however, is that the analyzer needs to know that a called function; is an assertion handler; otherwise the analyzer might assume the function call; returns and it will continue analyzing the path where the assertion condition; failed. This can lead to false positives, as the assertion condition usually; implies a safety condition (e.g., a pointer is not null) prior to performing; some action that depends on that condition (e.g., dereferencing a pointer).; The analyzer knows about several well-known assertion handlers, but can; automatically infer if a function should be treated as an assertion handler if; it is annotated with the 'noreturn' attribute or the (Clang-specific); 'analyzer_noreturn' attribute. Note that, currently, clang does not support; these attributes on Objective-C methods and C++ methods.; Att",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html:20820,assert,assertion,20820,interpreter/llvm-project/clang/www/analyzer/annotations.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html,1,['assert'],['assertion']
Testability,"ent info; metadata follows the SPIR address space mapping as defined in the SPIR; specification `section 2.2; <https://www.khronos.org/registry/spir/specs/spir_spec-2.0.pdf#18>`_. OpenCL Specific Options; -----------------------. In addition to the options described in :doc:`UsersManual` there are the; following options specific to the OpenCL frontend. All the options in this section are frontend-only and therefore if used; with regular clang driver they require frontend forwarding, e.g. ``-cc1``; or ``-Xclang``. .. _opencl_finclude_default_header:. .. option:: -finclude-default-header. Adds most of builtin types and function declarations during compilations. By; default the OpenCL headers are not loaded by the frontend and therefore certain; builtin types and most of builtin functions are not declared. To load them; automatically this flag can be passed to the frontend (see also :ref:`the; section on the OpenCL Header <opencl_header>`):. .. code-block:: console. $ clang -Xclang -finclude-default-header test.cl. Alternatively the internal header `opencl-c.h` containing the declarations; can be included manually using ``-include`` or ``-I`` followed by the path; to the header location. The header can be found in the clang source tree or; installation directory. .. code-block:: console. $ clang -I<path to clang sources>/lib/Headers/opencl-c.h test.cl; $ clang -I<path to clang installation>/lib/clang/<llvm version>/include/opencl-c.h/opencl-c.h test.cl. In this example it is assumed that the kernel code contains; ``#include <opencl-c.h>`` just as a regular C include. Because the header is very large and long to parse, PCH (:doc:`PCHInternals`); and modules (:doc:`Modules`) can be used internally to improve the compilation; speed. To enable modules for OpenCL:. .. code-block:: console. $ clang --target=spir-unknown-unknown -c -emit-llvm -Xclang -finclude-default-header -fmodules -fimplicit-module-maps -fmodules-cache-path=<path to the generated module> test.cl. Another w",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/OpenCLSupport.rst:3220,test,test,3220,interpreter/llvm-project/clang/docs/OpenCLSupport.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/OpenCLSupport.rst,1,['test'],['test']
Testability,"ent is a reference manual for the Machine IR (MIR) serialization; format. MIR is a human readable serialization format that is used to represent; LLVM's :ref:`machine specific intermediate representation; <machine code representation>`. The MIR serialization format is designed to be used for testing the code; generation passes in LLVM. Overview; ========. The MIR serialization format uses a YAML container. YAML is a standard; data serialization language, and the full YAML language spec can be read at; `yaml.org; <http://www.yaml.org/spec/1.2/spec.html#Introduction>`_. A MIR file is split up into a series of `YAML documents`_. The first document; can contain an optional embedded LLVM IR module, and the rest of the documents; contain the serialized machine functions. .. _YAML documents: http://www.yaml.org/spec/1.2/spec.html#id2800132. MIR Testing Guide; =================. You can use the MIR format for testing in two different ways:. - You can write MIR tests that invoke a single code generation pass using the; ``-run-pass`` option in llc. - You can use llc's ``-stop-after`` option with existing or new LLVM assembly; tests and check the MIR output of a specific code generation pass. Testing Individual Code Generation Passes; -----------------------------------------. The ``-run-pass`` option in llc allows you to create MIR tests that invoke just; a single code generation pass. When this option is used, llc will parse an; input MIR file, run the specified code generation pass(es), and output the; resulting MIR code. You can generate an input MIR file for the test by using the ``-stop-after`` or; ``-stop-before`` option in llc. For example, if you would like to write a test; for the post register allocation pseudo instruction expansion pass, you can; specify the machine copy propagation pass in the ``-stop-after`` option, as it; runs just before the pass that we are trying to test:. ``llc -stop-after=machine-cp bug-trigger.ll -o test.mir``. If the same pass is run mult",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MIRLangRef.rst:1197,test,tests,1197,interpreter/llvm-project/llvm/docs/MIRLangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MIRLangRef.rst,1,['test'],['tests']
Testability,"ent objects inside pad - axes, histograms, pavestats etc.; 3D objects can be rotated.; has a simple editor to modify pad's parameters : fill color, logarithmic scale, grid, ticks, etc. ""RootBrowser"" app; This application is a simplified version of TBrowser and TCanvas; for iOS. User can open ROOT's file (application uses TWebFile) and; browse file's contents.; RootBrower registers *.root file extension in a system, so for; example, attached root files from a mail client can be opened by; RootBrowser.; Application has several views. In a top level view, user can see; opened files, open new files, close files (long press gesture on; a file icon):. Tap gesture on a file's icon will open ""File contents"" view. This; view shows objects and nested directories. For objects small; previews are generated. Tapping on a directory's icon will open; new view with directory's contents. Simple search is supported; (in the current TDirectoryFile). Tap on a object's preview will open detailed view for this object.; Using pinch gesture or double tap, you can zoom in/zoom out pad's; contents.; If you have several objects in a file or directory, you can; navigate through directory contents by using swipe gesture,; scrolling your objects. It's possible to modify properties of objects the same way you; can do it in TCanvas - RootBrowser has an editor. After you; press ""Edit"" button, you can pick histogram, axis, frame,; pavestats, etc. in a pad and modify its properties in the; editor (selected object is highlihgted in a pad).; At the moment, there are editors for:. TH1 objects; TGraph objects; Objects derived from TAttLine (line attributes); Objects derived from TAttFill (filled area attributes); Pad object (fill properties, log scales, ticks, grid); Markers. Using pan gesture along the selected axis, you can change the; axis range - ""zoom"".; Modified object can be saved locally (in application's directory); and sent as an e-mail attachment (""Save"" functionality will be; improved soon). ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/doc/v532/index.html:3913,log,log,3913,graf2d/doc/v532/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/doc/v532/index.html,1,['log'],['log']
Testability,"ent() {; std::string s = ""llvm"";; const char *c = s.data(); // note: pointer to inner buffer of 'std::string' obtained here; s = ""clang""; // note: inner buffer of 'std::string' reallocated by call to 'operator='; consume(c); // warn: inner pointer of container used after re/deallocation; }. const char *return_temp(int x) {; return std::to_string(x).c_str(); // warn: inner pointer of container used after re/deallocation; // note: pointer to inner buffer of 'std::string' obtained here; // note: inner buffer of 'std::string' deallocated by call to destructor; }. .. _cplusplus-NewDelete:. cplusplus.NewDelete (C++); """"""""""""""""""""""""""""""""""""""""""""""""""; Check for double-free and use-after-free problems. Traces memory managed by new/delete. .. literalinclude:: checkers/newdelete_example.cpp; :language: cpp. .. _cplusplus-NewDeleteLeaks:. cplusplus.NewDeleteLeaks (C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for memory leaks. Traces memory managed by new/delete. .. code-block:: cpp. void test() {; int *p = new int;; } // warn. .. _cplusplus-PlacementNew:. cplusplus.PlacementNew (C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""; Check if default placement new is provided with pointers to sufficient storage capacity. .. code-block:: cpp. #include <new>. void f() {; short s;; long *lp = ::new (&s) long; // warn; }. .. _cplusplus-SelfAssignment:. cplusplus.SelfAssignment (C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Checks C++ copy and move assignment operators for self assignment. .. _cplusplus-StringChecker:. cplusplus.StringChecker (C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Checks std::string operations. Checks if the cstring pointer from which the ``std::string`` object is; constructed is ``NULL`` or not.; If the checker cannot reason about the nullness of the pointer it will assume; that it was non-null to satisfy the precondition of the constructor. This checker is capable of checking the `SEI CERT C++ coding rule STR51-CPP.; Do not attempt to create a std::string from a null pointer; <https://wiki.sei.cmu.ed",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:8948,test,test,8948,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"ent, nothing can be said about the value of ``foo[0]``,; because ``foo[i]`` may have overwritten it! Thus, *binding to a region with a; symbolic offset invalidates the entire concrete offset region.* We know; ``foo[i]`` is somewhere within ``foo``, so we don't have to invalidate; anything else, but we do have to be conservative about all other bindings within; ``foo``. Continuing the example:. .. code-block:: cpp. foo[i] = i;; foo[0] = 0;. After this latest assignment, nothing can be said about the value of ``foo[i]``,; because ``foo[0]`` may have overwritten it! *Binding to a region R with a; concrete offset invalidates any symbolic offset bindings whose concrete offset; region is a super-region **or** sub-region of R.* All we know about ``foo[i]``; is that it is somewhere within ``foo``, so changing *anything* within ``foo``; might change ``foo[i]``, and changing *all* of ``foo`` (or its base region) will; *definitely* change ``foo[i]``. This logic could be improved by using the current constraints on ``i``, at the; cost of speed. The latter case could also be improved by matching region kinds,; i.e. changing ``foo[0].a`` is unlikely to affect ``foo[i].b``, no matter what; ``i`` is. For more detail, read through ``RegionStoreManager::removeSubRegionBindings`` in; RegionStore.cpp. ObjCIvarRegions; ---------------. Objective-C instance variables require a bit of special handling. Like struct; fields, they are not base regions, and when their parent object region is; invalidated, all the instance variables must be invalidated as well. However,; they have no concrete compile-time offsets (in the modern, ""non-fragile""; runtime), and so cannot easily be represented as an offset from the start of; the object in the analyzer. Moreover, this means that invalidating a single; instance variable should *not* invalidate the rest of the object, since unlike; struct fields or array elements there is no way to perform pointer arithmetic; to access another instance variable. Conseq",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/RegionStore.rst:2282,log,logic,2282,interpreter/llvm-project/clang/docs/analyzer/developer-docs/RegionStore.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/RegionStore.rst,1,['log'],['logic']
Testability,"ent.pcm; ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/Event.pcm); endif(); endif(); ROOT_EXECUTABLE(eventexe MainEvent.cxx LIBRARIES Event RIO Tree TreePlayer Hist Net); ROOT_ADD_TEST(test-event COMMAND eventexe). #---guitest------------------------------------------------------------------------------------; ROOT_EXECUTABLE(guitest guitest.cxx LIBRARIES RIO Gui Gpad Hist). #---hsimple------------------------------------------------------------------------------------; #ROOT_EXECUTABLE(hsimple hsimple.cxx LIBRARIES RIO Tree Hist); #ROOT_ADD_TEST(test-hsimple COMMAND hsimple). #---invalid pointer checks---------------------------------------------------------------------; if(NOT (APPLE AND CMAKE_SYSTEM_PROCESSOR MATCHES arm64) OR M1_BROKEN_TESTS); ROOT_ADD_TEST(test-check-nullptr; COMMAND ${ROOT_root_CMD} -b -q -l --ptrcheck -e ""int*ptr=(int*)0"" -e ""*ptr""; PASSREGEX ""dereference null pointer""). if(NOT MSVC OR win_broken_tests); ROOT_ADD_TEST(test-check-invalidptr; COMMAND ${ROOT_root_CMD} -b -q -l --ptrcheck -e ""int*ptr=(int*)1"" -e ""*ptr""; PASSREGEX ""invalid memory address""); endif(); endif(). #--minexam-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(minexam minexam.cxx LIBRARIES Minuit); ROOT_ADD_TEST(test-minexam COMMAND minexam). #--tstring-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tstring tstring.cxx LIBRARIES Core); configure_file(tstring.cxx tstring.cxx COPYONLY); ROOT_ADD_TEST(test-tstring COMMAND tstring). #--tcollex-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tcollex tcollex.cxx LIBRARIES Core); ROOT_ADD_TEST(test-tcollex COMMAND tcollex). #--tcollbm------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tcollbm tcollbm.cxx LIBRARIES Core MathCore); ROOT_ADD_TEST(test-tcollbm COMMAND tcollbm 1000 1000000 LABELS longtest). #--vvector-------------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:3376,test,test-check-invalidptr,3376,test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt,1,['test'],['test-check-invalidptr']
Testability,"ented by adjusting such functions to either encrypt the stack pointer when; storing it in the heap (as already done e.g., by ``setjmp``/``longjmp``; implementation in glibc), or store it in a safe region instead. The `CPI paper <https://dslab.epfl.ch/pubs/cpi.pdf>`_ describes two alternative,; stronger safe stack protection mechanisms, that rely on software fault; isolation, or hardware segmentation (as available on x86-32 and some x86-64; CPUs). At the moment, SafeStack assumes that the compiler's implementation is correct.; This has not been verified except through manual code inspection, and could; always regress in the future. It's therefore desirable to have a separate; static or dynamic binary verification tool that would check the correctness of; the SafeStack instrumentation in final binaries. Usage; =====. To enable SafeStack, just pass ``-fsanitize=safe-stack`` flag to both compile; and link command lines. Supported Platforms; -------------------. SafeStack was tested on Linux, NetBSD, FreeBSD and macOS. Low-level API; -------------. ``__has_feature(safe_stack)``; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In some rare cases one may need to execute different code depending on; whether SafeStack is enabled. The macro ``__has_feature(safe_stack)`` can; be used for this purpose. .. code-block:: c. #if __has_feature(safe_stack); // code that builds only under SafeStack; #endif. ``__attribute__((no_sanitize(""safe-stack"")))``; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Use ``__attribute__((no_sanitize(""safe-stack"")))`` on a function declaration; to specify that the safe stack instrumentation should not be applied to that; function, even if enabled globally (see ``-fsanitize=safe-stack`` flag). This; attribute may be required for functions that make assumptions about the; exact layout of their stack frames. All local variables in functions with this attribute will be stored on the safe; stack. The safe stack remains unprotected against memory errors when accessing; thes",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/SafeStack.rst:6145,test,tested,6145,interpreter/llvm-project/clang/docs/SafeStack.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/SafeStack.rst,1,['test'],['tested']
Testability,"entially create; this would have to ensure that it doesn't, and there is valid code that can; create this sort of construct (in dead code). The sorts of things that can; cause this to happen are fairly contrived, but we still need to accept them.; Here's an example:. .. code-block:: llvm. define fastcc void @foo() {; ret void; }; define internal void @bar(void()* %FP, i1 %cond) {; br i1 %cond, label %T, label %F; T:; call void %FP(); ret void; F:; call fastcc void %FP(); ret void; }; define void @test() {; %X = or i1 false, false; call void @bar(void()* @foo, i1 %X); ret void; }. In this example, ""test"" always passes ``@foo``/``false`` into ``bar``, which; ensures that it is dynamically called with the right calling conv (thus, the; code is perfectly well defined). If you run this through the inliner, you; get this (the explicit ""or"" is there so that the inliner doesn't dead code; eliminate a bunch of stuff):. .. code-block:: llvm. define fastcc void @foo() {; ret void; }; define void @test() {; %X = or i1 false, false; br i1 %X, label %T.i, label %F.i; T.i:; call void @foo(); br label %bar.exit; F.i:; call fastcc void @foo(); br label %bar.exit; bar.exit:; ret void; }. Here you can see that the inlining pass made an undefined call to ``@foo``; with the wrong calling convention. We really don't want to make the inliner; have to know about this sort of thing, so it needs to be valid code. In this; case, dead code elimination can trivially remove the undefined code. However,; if ``%X`` was an input argument to ``@test``, the inliner would produce this:. .. code-block:: llvm. define fastcc void @foo() {; ret void; }. define void @test(i1 %X) {; br i1 %X, label %T.i, label %F.i; T.i:; call void @foo(); br label %bar.exit; F.i:; call fastcc void @foo(); br label %bar.exit; bar.exit:; ret void; }. The interesting thing about this is that ``%X`` *must* be false for the; code to be well-defined, but no amount of dead code elimination will be able; to delete the broken call ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/FAQ.rst:11235,test,test,11235,interpreter/llvm-project/llvm/docs/FAQ.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/FAQ.rst,1,['test'],['test']
Testability,"ents: true; AlignCaseColons: false. Nested configuration flags:. Alignment options. * ``bool Enabled`` Whether aligning is enabled. .. code-block:: c++. true:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; default: return """";; }. false:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; default: return """";; }. * ``bool AcrossEmptyLines`` Whether to align across empty lines. .. code-block:: c++. true:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";. default: return """";; }. false:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";. default: return """";; }. * ``bool AcrossComments`` Whether to align across comments. .. code-block:: c++. true:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; /* A comment. */; default: return """";; }. false:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; /* A comment. */; default: return """";; }. * ``bool AlignCaseColons`` Whether aligned case labels are aligned on the colon, or on the; , or on the tokens after the colon. .. code-block:: c++. true:; switch (level) {; case log::info : return ""info:"";; case log::warning: return ""warning:"";; default : return """";; }. false:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; default: return """";; }. .. _AlignEscapedNewlines:. **AlignEscapedNewlines** (``EscapedNewlineAlignmentStyle``) :versionbadge:`clang-format 5` :ref:`¶ <AlignEscapedNewlines>`; Options for aligning backslashes in escaped newlines. Possible values:. * ``ENAS_DontAlign`` (in configuration: ``DontAlign``); Don't align escaped newlines. .. code-block:: c++. #define A \; int aaaa; \; int b; \; int dddddddddd;. * ``ENAS_Left`` (in configuration: ``Left``); Align escaped newlines as far left as possible. .. code-block:: c++. true:; #define A \; int",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst:20064,log,log,20064,interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,2,['log'],['log']
Testability,"entsAlignmentStyle``) :versionbadge:`clang-format 17` :ref:`¶ <AlignConsecutiveShortCaseStatements>`; Style of aligning consecutive short case labels.; Only applies if ``AllowShortCaseLabelsOnASingleLine`` is ``true``. .. code-block:: yaml. # Example of usage:; AlignConsecutiveShortCaseStatements:; Enabled: true; AcrossEmptyLines: true; AcrossComments: true; AlignCaseColons: false. Nested configuration flags:. Alignment options. * ``bool Enabled`` Whether aligning is enabled. .. code-block:: c++. true:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; default: return """";; }. false:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; default: return """";; }. * ``bool AcrossEmptyLines`` Whether to align across empty lines. .. code-block:: c++. true:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";. default: return """";; }. false:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";. default: return """";; }. * ``bool AcrossComments`` Whether to align across comments. .. code-block:: c++. true:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; /* A comment. */; default: return """";; }. false:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; /* A comment. */; default: return """";; }. * ``bool AlignCaseColons`` Whether aligned case labels are aligned on the colon, or on the; , or on the tokens after the colon. .. code-block:: c++. true:; switch (level) {; case log::info : return ""info:"";; case log::warning: return ""warning:"";; default : return """";; }. false:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; default: return """";; }. .. _AlignEscapedNewlines:. **AlignEscapedNewlines** (``EscapedNewlineAlignmentStyle``) :versionbadge:`clang-format 5` :ref:`¶ <AlignEscapedNewlines>`; Options for aligning ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst:19722,log,log,19722,interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,2,['log'],['log']
Testability,"environment** A dictionary representing the environment to use when executing; tests in the suite. **standalone_tests** When true, mark a directory with tests expected to be run; standalone. Test discovery is disabled for that directory. *lit.suffixes* and; *lit.excludes* must be empty when this variable is true. **suffixes** For **lit** test formats which scan directories for tests, this; variable is a list of suffixes to identify test files. Used by: *ShTest*. **substitutions** For **lit** test formats which substitute variables into a test; script, the list of substitutions to perform. Used by: *ShTest*. **unsupported** Mark an unsupported directory, all tests within it will be; reported as unsupported. Used by: *ShTest*. **parent** The parent configuration, this is the config object for the directory; containing the test suite, or None. **root** The root configuration. This is the top-most :program:`lit` configuration in; the project. **pipefail** Normally a test using a shell pipe fails if any of the commands; on the pipe fail. If this is not desired, setting this variable to false; makes the test fail only if the last command in the pipe fails. **available_features** A set of features that can be used in `XFAIL`,; `REQUIRES`, and `UNSUPPORTED` directives. TEST DISCOVERY; ~~~~~~~~~~~~~~. Once test suites are located, :program:`lit` recursively traverses the source; directory (following *test_source_root*) looking for tests. When :program:`lit`; enters a sub-directory, it first checks to see if a nested test suite is; defined in that directory. If so, it loads that test suite recursively,; otherwise it instantiates a local test config for the directory (see; :ref:`local-configuration-files`). Tests are identified by the test suite they are contained within, and the; relative path inside that suite. Note that the relative path may not refer to; an actual file on disk; some test formats (such as *GoogleTest*) define; ""virtual tests"" which have a path that contains",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:17082,test,test,17082,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"eport for LLVM, and the `clear-profile-data` utility target; to delete captured profile data. See documentation for; *LLVM_CODE_COVERAGE_TARGETS* and *LLVM_COVERAGE_SOURCE_DIRS* for more; information on configuring code coverage reports. **LLVM_CODE_COVERAGE_TARGETS**:STRING; If set to a semicolon separated list of targets, those targets will be used; to drive the code coverage reports. If unset, the target list will be; constructed using the LLVM build's CMake export list. **LLVM_COVERAGE_SOURCE_DIRS**:STRING; If set to a semicolon separated list of directories, the coverage reports; will limit code coverage summaries to just the listed directories. If unset,; coverage reports will include all sources identified by the tooling. **LLVM_INDIVIDUAL_TEST_COVERAGE**:BOOL; Enable individual test case coverage. When set to ON, code coverage data for; each test case will be generated and stored in a separate directory under the; config.test_exec_root path. This feature allows code coverage analysis of each; individual test case. Defaults to OFF. **LLVM_BUILD_LLVM_DYLIB**:BOOL; If enabled, the target for building the libLLVM shared library is added.; This library contains all of LLVM's components in a single shared library.; Defaults to OFF. This cannot be used in conjunction with BUILD_SHARED_LIBS.; Tools will only be linked to the libLLVM shared library if LLVM_LINK_LLVM_DYLIB; is also ON.; The components in the library can be customised by setting LLVM_DYLIB_COMPONENTS; to a list of the desired components.; This option is not available on Windows. **LLVM_BUILD_TESTS**:BOOL; Include LLVM unit tests in the 'all' build target. Defaults to OFF. Targets; for building each unit test are generated in any case. You can build a; specific unit test using the targets defined under *unittests*, such as; ADTTests, IRTests, SupportTests, etc. (Search for ``add_llvm_unittest`` in; the subdirectories of *unittests* for a complete list of unit tests.) It is; possible to build all unit te",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst:16114,test,test,16114,interpreter/llvm-project/llvm/docs/CMake.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst,1,['test'],['test']
Testability,"eport=list; --print=symbols,types; test-dwarf-clang.o test-dwarf-gcc.o. Logical View:; [000] {File} 'test-dwarf-clang.o'. [001] {CompileUnit} 'test.cpp'; [003] 4 {TypeAlias} 'INTEGER' -> 'int'; [004] 5 {Variable} 'CONSTANT' -> 'const INTEGER'. Logical View:; [000] {File} 'test-dwarf-gcc.o'. [001] {CompileUnit} 'test.cpp'; [004] 4 {TypeAlias} 'INTEGER' -> 'int'; [004] 5 {Variable} 'CONSTANT' -> 'const INTEGER'. The output shows that both objects contain the same elements. But the; **'typedef INTEGER'** is located at different scope level. The GCC; generated object, shows **'4'**, which is the correct value. Note that there is no requirement that GCC must produce identical or; similar DWARF to Clang to allow the comparison. We're only comparing; the semantics. The same case when comparing CodeView debug information; generated by MSVC and Clang. There are 2 comparison methods: logical view and logical elements. LOGICAL VIEW; """"""""""""""""""""""""; It compares the logical view as a whole unit; for a match, each compared; logical element must have the same parents and children. Using the :program:`llvm-debuginfo-analyzer` comparison functionality,; that issue can be seen in a more global context, that can include the; logical view. The output shows in view form the **missing (-), added (+)** elements,; giving more context by swapping the reference and target object files. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level; --compare=types; --report=view; --print=symbols,types; test-dwarf-clang.o test-dwarf-gcc.o. Reference: 'test-dwarf-clang.o'; Target: 'test-dwarf-gcc.o'. Logical View:; [000] {File} 'test-dwarf-clang.o'. [001] {CompileUnit} 'test.cpp'; [002] 1 {TypeAlias} 'INTPTR' -> '* const int'; [002] 2 {Function} extern not_inlined 'foo' -> 'int'; [003] {Block}; [004] 5 {Variable} 'CONSTANT' -> 'const INTEGER'; +[004] 4 {TypeAlias} 'INTEGER' -> 'int'; [003] 2 {Parameter} 'ParamBool' -> 'bool'; [003] 2 {Parameter} 'ParamPtr' -> 'INTPTR'; [003] 2 {Parameter} 'Param",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:29834,log,logical,29834,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,2,['log'],['logical']
Testability,eptors.h; compiler-rt/lib/memprof/memprof_interceptors_memintrinsics.cpp; compiler-rt/lib/memprof/memprof_interceptors_memintrinsics.h; compiler-rt/lib/memprof/memprof_interface_internal.h; compiler-rt/lib/memprof/memprof_internal.h; compiler-rt/lib/memprof/memprof_linux.cpp; compiler-rt/lib/memprof/memprof_malloc_linux.cpp; compiler-rt/lib/memprof/memprof_mibmap.cpp; compiler-rt/lib/memprof/memprof_mibmap.h; compiler-rt/lib/memprof/memprof_posix.cpp; compiler-rt/lib/memprof/memprof_preinit.cpp; compiler-rt/lib/memprof/memprof_rawprofile.cpp; compiler-rt/lib/memprof/memprof_rawprofile.h; compiler-rt/lib/memprof/memprof_rtl.cpp; compiler-rt/lib/memprof/memprof_shadow_setup.cpp; compiler-rt/lib/memprof/memprof_stack.cpp; compiler-rt/lib/memprof/memprof_stack.h; compiler-rt/lib/memprof/memprof_stats.cpp; compiler-rt/lib/memprof/memprof_stats.h; compiler-rt/lib/memprof/memprof_thread.cpp; compiler-rt/lib/memprof/memprof_thread.h; compiler-rt/lib/memprof/tests/driver.cpp; compiler-rt/lib/memprof/tests/rawprofile.cpp; compiler-rt/lib/msan/msan_chained_origin_depot.h; compiler-rt/lib/msan/msan_flags.h; compiler-rt/lib/msan/msan_poisoning.h; compiler-rt/lib/msan/msan_report.h; compiler-rt/lib/orc/adt.h; compiler-rt/lib/orc/debug.h; compiler-rt/lib/orc/elfnix_platform.cpp; compiler-rt/lib/orc/elfnix_platform.h; compiler-rt/lib/orc/endianness.h; compiler-rt/lib/orc/error.h; compiler-rt/lib/orc/executor_address.h; compiler-rt/lib/orc/extensible_rtti.cpp; compiler-rt/lib/orc/extensible_rtti.h; compiler-rt/lib/orc/log_error_to_stderr.cpp; compiler-rt/lib/orc/macho_ehframe_registration.cpp; compiler-rt/lib/orc/macho_platform.cpp; compiler-rt/lib/orc/macho_platform.h; compiler-rt/lib/orc/run_program_wrapper.cpp; compiler-rt/lib/orc/simple_packed_serialization.h; compiler-rt/lib/orc/wrapper_function_utils.h; compiler-rt/lib/orc/unittests/adt_test.cpp; compiler-rt/lib/orc/unittests/c_api_test.cpp; compiler-rt/lib/orc/unittests/endian_test.cpp; compiler-rt/lib/orc/unittests/error_tes,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:95887,test,tests,95887,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"equal hashes are equal.; Good hashing means, that every function part must be taken into account. That; means we have to convert every function part into some number, and then add it; into the hash. The lookup-up time would be small, but such an approach adds some; delay due to the hashing routine. Logarithmical search; """"""""""""""""""""""""""""""""""""""""; We could introduce total ordering among the functions set, once ordered we; could then implement a logarithmical search. Lookup time still depends on N,; but adds a little of delay (*log(N)*). Present state; """"""""""""""""""""""""""; Both of the approaches (random-access and logarithmical) have been implemented; and tested and both give a very good improvement. What was most; surprising is that logarithmical search was faster; sometimes by up to 15%. The; hashing method needs some extra CPU time, which is the main reason why it works; slower; in most cases, total ""hashing"" time is greater than total; ""logarithmical-search"" time. So, preference has been granted to the ""logarithmical search"". Though in the case of need, *logarithmical-search* (read ""total-ordering"") could; be used as a milestone on our way to the *random-access* implementation. Every comparison is based either on the numbers or on the flags comparison. In; the *random-access* approach, we could use the same comparison algorithm.; During comparison, we exit once we find the difference, but here we might have; to scan the whole function body every time (note, it could be slower). Like in; ""total-ordering"", we will track every number and flag, but instead of; comparison, we should get the numbers sequence and then create the hash number.; So, once again, *total-ordering* could be considered as a milestone for even; faster (in theory) random-access approach. MergeFunctions, main fields and runOnModule; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; There are two main important fields in the class:. ``FnTree`` – the set of all unique functions. It keeps items that couldn't be; merge",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MergeFunctions.rst:6806,log,logarithmical,6806,interpreter/llvm-project/llvm/docs/MergeFunctions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MergeFunctions.rst,1,['log'],['logarithmical']
Testability,"equested it; # and we allow it to be set to something newer than the required standard but otherwise we fail.; if(DEFINED CMAKE_CXX_STANDARD AND CMAKE_CXX_STANDARD LESS ${LLVM_REQUIRED_CXX_STANDARD}); message(FATAL_ERROR ""Requested CMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} which is less than the required ${LLVM_REQUIRED_CXX_STANDARD}.""); endif(). set(CMAKE_CXX_STANDARD ${LLVM_REQUIRED_CXX_STANDARD} CACHE STRING ""C++ standard to conform to""); set(CMAKE_CXX_STANDARD_REQUIRED YES). if (CYGWIN); # Cygwin is a bit stricter and lack things like 'strdup', 'stricmp', etc in; # c++xx mode.; set(CMAKE_CXX_EXTENSIONS YES); else(); set(CMAKE_CXX_EXTENSIONS NO); endif(). if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES); message(FATAL_ERROR ""; No build type selected. You need to pass -DCMAKE_BUILD_TYPE=<type> in order to configure LLVM.; Available options are:; * -DCMAKE_BUILD_TYPE=Release - For an optimized build with no assertions or debug info.; * -DCMAKE_BUILD_TYPE=Debug - For an unoptimized build with assertions and debug info.; * -DCMAKE_BUILD_TYPE=RelWithDebInfo - For an optimized build with no assertions but with debug info.; * -DCMAKE_BUILD_TYPE=MinSizeRel - For a build optimized for size instead of speed.; Learn more about these options in our documentation at https://llvm.org/docs/CMake.html#cmake-build-type; ""); endif(). # Set default build type for cmake's try_compile module.; # CMake 3.17 or newer sets CMAKE_DEFAULT_BUILD_TYPE to one of the; # items from CMAKE_CONFIGURATION_TYPES. Logic below can be further; # simplified once LLVM's minimum CMake version is updated to 3.17.; if(CMAKE_DEFAULT_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_DEFAULT_BUILD_TYPE}); else(); if(CMAKE_CONFIGURATION_TYPES); list(GET CMAKE_CONFIGURATION_TYPES 0 CMAKE_TRY_COMPILE_CONFIGURATION); elseif(CMAKE_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_BUILD_TYPE}); endif(); endif(). # Side-by-side subprojects layout: automatically set the; # LLVM_EXTERNAL_${proje",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:4131,assert,assertions,4131,interpreter/llvm-project/llvm/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt,1,['assert'],['assertions']
Testability,"equires much less memory. Merging in; one-go (the previous default) can be activated by passing 'H' in the; constructor options.; In ProofBench, add possibility to change the location of the; generated files via the third argument of TProofBench::MakeDataSet.; Several optimizations in the low level PROOF event loop; (TProofPlayer::Process),  allowing to reduce dramatically the; overhead introduced by the operations PROOF needs to perform during the; event loop. A measurement of the overhead can be obtained from a very; light computational task, for example, generating one random number and; filling one histogram; executing this task within a PROOF-Lite session; with 1 worker now takes only 1.8 times the time required by a straight; loop in the parent ROOT session; the same number before was about 13. ; In TDrawFeedback::Feedback, call method Draw() of objects not; identified as TH1 derivation. This allows user-defined objects; implementing Draw to be displayed via this utility class.; In TProof::LoadPackageOnClient, do not create a symlink; 'pack_name' to the package dir, but add directly the package dir to the; include path. This solves the longstanding annoying problem of failure; when a directory or file with the name of the package did already exist; in the local working directory. . Fixes; ; Fix merging issue affecting automatic dataset creation when; only one worker is active.; Fix the realtime reported by TProof::GetRealTime() for masters; (it was overwritten with the ones coming from workers).; Fix serious problem with TProof::Load: additional files were; not copied in the master sandbox but left in the cache. A workaround; for backward compatibility has also been implemented.; Fix a problem preventing actions requiring access to worker; nodes (log file retrieval, reset) to work on workers where the username; is different from the one o the master, e.g. PoD on gLite.; Fix issue with the specification of the working directory; template in 'xpd.multiuser'.; . ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v534/index.html:4783,sandbox,sandbox,4783,proof/doc/v534/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v534/index.html,2,"['log', 'sandbox']","['log', 'sandbox']"
Testability,"er TFiles too.; Now, the hook for the Close() func triggers sending of a; packet containing various information about the performance related to; that file only.; Added support also for performance monitoring when writing. RGLITE: A ROOT GRID interface. RGLite plug-in - a ROOT plug-in module, which implements the ROOT Grid; interface and offers to ROOT users possibilities to perform a number of; operations using gLite middleware from within ROOT. Supported features:. Workload Management System operations:; ; job submission – normal, DAG and parametric; jobs (gLite; WMProxy API), ; smart look-up algorithm for WMP-Endpoints, ; job status querying (gLite LB API), ; job output retrieving (Globus GridFTP). . File Catalog operations (gLite/LCG LFC API):; ; smart session manager, ; set/query the current working catalog directory, ; list files, directories and their stats, ; add/remove files in a catalog namespace, ; add/remove directories, ; add/remove replicas from a given file. . An executive logging. ; Support of an external XML configuration file with; according XML; schema. . Usage examples:. Job operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // submitting Grid job. TGridJob *job = gGrid->Submit(""JDLs/simple.jdl"");; // getting status object. TGridJobStatus *status = job->GetJobStatus();; // getting status of the job. TGridJobStatus::EGridJobStatus st( status->GetStatus() );; // when the st is; TGridJobStatus::kDONE you can; retrieve job's output. job->GetOutputSandbox(""/tmp"");. File Catalog operations. // loading RGLite plug-in. TGrid::Connect(""glite"");; // changing the current directory to; ""/grid/dech"". gGrid->Cd(""/grid/dech"");; // using Mkdir to create a new; directory. Bool_t b = gGrid->Mkdir(""root_test2"");; // listing the current directory. TGridResult* result = gGrid->Ls();; // full file information. result->Print(""all"");; // removing the directory . b = gGrid->Rmdir(""root_test2"");. Documentation: ; http://www-linux.gsi.de/%7Emanafov/D-Grid/doc",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html:3814,log,logging,3814,net/doc/v520/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v520/index.html,1,['log'],['logging']
Testability,"er files that are global to your; project. By global, we mean that they are used by more than one library or; executable of your project. By placing your header files in **include**, they will be found; automatically by the LLVM build system. For example, if you have a file; **include/jazz/note.h**, then your source files can include it simply with; **#include ""jazz/note.h""**. **tools**. This subdirectory should contain all of your source code for executables.; For each program that you build, you will have one directory in **tools**; that will contain that program's source code. **test**. This subdirectory should contain tests that verify that your code works; correctly. Automated tests are especially useful. Currently, the LLVM build system provides basic support for tests. The LLVM; system provides the following:. * LLVM contains regression tests in ``llvm/test``. These tests are run by the; :doc:`Lit <CommandGuide/lit>` testing tool. This test procedure uses ``RUN``; lines in the actual test case to determine how to run the test. See the; :doc:`TestingGuide` for more details. * LLVM contains an optional package called ``llvm-test``, which provides; benchmarks and programs that are known to compile with the Clang front; end. You can use these programs to test your code, gather statistical; information, and compare it to the current LLVM performance statistics. Currently, there is no way to hook your tests directly into the ``llvm/test``; testing harness. You will simply need to find a way to use the source; provided within that directory on your own. Typically, you will want to build your **lib** directory first followed by your; **tools** directory. Writing LLVM Style Makefiles; ============================. The LLVM build system provides a convenient way to build libraries and; executables. Most of your project Makefiles will only need to define a few; variables. Below is a list of the variables one can set and what they can; do:. Required Variables; ----------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Projects.rst:3368,test,test,3368,interpreter/llvm-project/llvm/docs/Projects.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Projects.rst,3,['test'],['test']
Testability,"er for the kinds of strings we are; interested in. Although it has some holes (it allows ""``123KKK``"" for example),; it is good enough for this example. Note that we use the option itself to print; out the error message (the ``error`` method always returns true) in order to get; a nice error message (shown below). Now that we have our parser class, we can; use it like this:. .. code-block:: c++. static cl::opt<unsigned, false, FileSizeParser>; MFS(""max-file-size"", cl::desc(""Maximum file size to accept""),; cl::value_desc(""size""));. Which adds this to the output of our program:. ::. OPTIONS:; -help - display available options (-help-hidden for more); ...; -max-file-size=<size> - Maximum file size to accept. And we can test that our parse works correctly now (the test program just prints; out the max-file-size argument value):. ::. $ ./test; MFS: 0; $ ./test -max-file-size=123MB; MFS: 128974848; $ ./test -max-file-size=3G; MFS: 3221225472; $ ./test -max-file-size=dog; -max-file-size option: 'dog' value invalid for file size argument!. It looks like it works. The error message that we get is nice and helpful, and; we seem to accept reasonable file sizes. This wraps up the ""custom parser""; tutorial. Exploiting external storage; ---------------------------. Several of the LLVM libraries define static ``cl::opt`` instances that will; automatically be included in any program that links with that library. This is; a feature. However, sometimes it is necessary to know the value of the command; line option outside of the library. In these cases the library does or should; provide an external storage location that is accessible to users of the; library. Examples of this include the ``llvm::DebugFlag`` exported by the; ``lib/Support/Debug.cpp`` file and the ``llvm::TimePassesIsEnabled`` flag; exported by the ``lib/IR/PassManager.cpp`` file. .. todo::. TODO: complete this section. .. _dynamically loaded options:. Dynamically adding command line options; ---------------------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandLine.rst:66175,test,test,66175,interpreter/llvm-project/llvm/docs/CommandLine.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandLine.rst,1,['test'],['test']
Testability,"er function support, HLSL also has a ``this`` keyword. The; ``this`` keyword is an example of one of the places where HLSL relies on; references in the AST, because ``this`` is a reference. Bitshifts; ---------. In deviation from C, HLSL bitshifts are defined to mask the shift count by the; size of the type. In DXC, the semantics of LLVM IR were altered to accommodate; this, in Clang we intend to generate the mask explicitly in the IR. In cases; where the shift value is constant, this will be constant folded appropriately,; in other cases we can clean it up in the DXIL target. Non-short Circuiting Logical Operators; --------------------------------------. In HLSL 2018 and earlier, HLSL supported logical operators (and the ternary; operator) on vector types. This behavior required that operators not short; circuit. The non-short circuiting behavior applies to all data types until HLSL; 2021. In HLSL 2021, logical and ternary operators do not support vector types; instead builtin functions ``and``, ``or`` and ``select`` are available, and; operators short circuit matching C behavior. Precise Qualifier; -----------------. HLSL has a ``precise`` qualifier that behaves unlike anything else in the C; language. The support for this qualifier in DXC is buggy, so our bar for; compatibility is low. The ``precise`` qualifier applies in the inverse direction from normal; qualifiers. Rather than signifying that the declaration containing ``precise``; qualifier be precise, it signifies that the operations contributing to the; declaration's value be ``precise``. Additionally, ``precise`` is a misnomer:; values attributed as ``precise`` comply with IEEE-754 floating point semantics,; and are prevented from optimizations which could decrease *or increase*; precision. Differences in Templates; ------------------------. HLSL uses templates to define builtin types and methods, but disallowed; user-defined templates until HLSL 2021. HLSL also allows omitting empty template; parameter lis",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/HLSL/HLSLSupport.rst:7817,log,logical,7817,interpreter/llvm-project/clang/docs/HLSL/HLSLSupport.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/HLSL/HLSLSupport.rst,1,['log'],['logical']
Testability,"er macro definition is intended to have an effect on the API of that module. .. note::. The ``exhaustive`` attribute implies that any macro definitions; for macros not listed as configuration macros should be ignored; completely when building the module. As an optimization, the; compiler could reduce the number of unique module variants by not; considering these non-configuration macros. This optimization is not; yet implemented in Clang. A translation unit shall not import the same module under different definitions of the configuration macros. .. note::. Clang implements a weak form of this requirement: the definitions; used for configuration macros are fixed based on the definitions; provided by the command line. If an import occurs and the definition; of any configuration macro has changed, the compiler will produce a; warning (under the control of ``-Wconfig-macros``). **Example:** A logging library might provide different API (e.g., in the form of different definitions for a logging macro) based on the ``NDEBUG`` macro setting:. .. parsed-literal::. module MyLogger {; umbrella header ""MyLogger.h""; config_macros [exhaustive] NDEBUG; }. Conflict declarations; ~~~~~~~~~~~~~~~~~~~~~; A *conflict-declaration* describes a case where the presence of two different modules in the same translation unit is likely to cause a problem. For example, two modules may provide similar-but-incompatible functionality. .. parsed-literal::. *conflict-declaration*:; ``conflict`` *module-id* ',' *string-literal*. The *module-id* of the *conflict-declaration* specifies the module with which the enclosing module conflicts. The specified module shall not have been imported in the translation unit when the enclosing module is imported. The *string-literal* provides a message to be provided as part of the compiler diagnostic when two modules conflict. .. note::. Clang emits a warning (under the control of ``-Wmodule-conflict``); when a module conflict is discovered. **Example:**. .. parsed-",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/Modules.rst:48039,log,logging,48039,interpreter/llvm-project/clang/docs/Modules.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/Modules.rst,1,['log'],['logging']
Testability,"er(nullptr /*Dump to stdout.*/,; this->ASTDumpFilter);; if (this->ASTPrint.operator _Bool()); return clang::CreateASTPrinter(&llvm::outs(), this->ASTDumpFilter);; return new clang::ASTConsumer();; }. Using Ninja Build System; =======================================. Optionally you can use the `Ninja`_ build system instead of make. It is; aimed at making your builds faster. Currently this step will require; building Ninja from sources. To take advantage of using Clang Tools along with Ninja build you need; at least CMake 2.8.9. Clone the Ninja git repository and build Ninja from sources:. .. code-block:: console. $ git clone git://github.com/martine/ninja.git; $ cd ninja/; $ ./bootstrap.py. This will result in a single binary ``ninja`` in the current directory.; It doesn't require installation and can just be copied to any location; inside ``$PATH``, say ``/usr/local/bin/``:. .. code-block:: console. $ sudo cp ninja /usr/local/bin/; $ sudo chmod a+rx /usr/local/bin/ninja. After doing all of this, you'll need to generate Ninja build files for; LLVM with CMake. You need to make a build directory and run CMake from; it:. .. code-block:: console. $ mkdir your/build/directory; $ cd your/build/directory; $ cmake -G Ninja -DCMAKE_EXPORT_COMPILE_COMMANDS=ON path/to/llvm/sources. If you want to use clang instead of GCC, you can add; ``-DCMAKE_C_COMPILER=/path/to/clang -DCMAKE_CXX_COMPILER=/path/to/clang++``.; You can also use ``ccmake``, which provides a curses interface to configure; CMake variables in an interactive manner. As a result, the new ``compile_commands.json`` file should appear in the; current directory. You should link it to the LLVM source tree so that; Clang Tooling is able to use it:. .. code-block:: console. $ ln -s $PWD/compile_commands.json path/to/llvm/source/. Now you are ready to build and test LLVM using Ninja:. .. code-block:: console. $ ninja check-all. Other target names can be used in the same way as with make. .. _Ninja: https://ninja-build.org/; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/HowToSetupToolingForLLVM.rst:9308,test,test,9308,interpreter/llvm-project/clang/docs/HowToSetupToolingForLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/HowToSetupToolingForLLVM.rst,1,['test'],['test']
Testability,"er). .. code-block:: c. void test() {; char *s = """";; char c = s[1]; // warn; }. struct seven_words {; int c[7];; };. void test() {; struct seven_words a, *p;; p = &a;; p[0] = a;; p[1] = a;; p[2] = a; // warn; }. // note: requires unix.Malloc or; // alpha.unix.MallocWithAnnotations checks enabled.; void test() {; int *p = malloc(12);; p[3] = 4; // warn; }. void test() {; char a[2];; int *b = (int*)a;; b[1] = 3; // warn; }. .. _alpha-security-ArrayBoundV2:. alpha.security.ArrayBoundV2 (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn about buffer overflows (newer checker). .. code-block:: c. void test() {; char *s = """";; char c = s[1]; // warn; }. void test() {; int buf[100];; int *p = buf;; p = p + 99;; p[1] = 1; // warn; }. // note: compiler has internal check for this.; // Use -Wno-array-bounds to suppress compiler warning.; void test() {; int buf[100][100];; buf[0][-1] = 1; // warn; }. // note: requires alpha.security.taint check turned on.; void test() {; char s[] = ""abc"";; int x = getchar();; char c = s[x]; // warn: index is tainted; }. .. _alpha-security-MallocOverflow:. alpha.security.MallocOverflow (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for overflows in the arguments to ``malloc()``.; It tries to catch ``malloc(n * c)`` patterns, where:. - ``n``: a variable or member access of an object; - ``c``: a constant foldable integral. This checker was designed for code audits, so expect false-positive reports.; One is supposed to silence this checker by ensuring proper bounds checking on; the variable in question using e.g. an ``assert()`` or a branch. .. code-block:: c. void test(int n) {; void *p = malloc(n * sizeof(int)); // warn; }. void test2(int n) {; if (n > 100) // gives an upper-bound; return;; void *p = malloc(n * sizeof(int)); // no warning; }. void test3(int n) {; assert(n <= 100 && ""Contract violated."");; void *p = malloc(n * sizeof(int)); // no warning; }. Limitations:. - The checker won't warn for variables involved in explicit casts,; since that might",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:61412,test,test,61412,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,er. See; [https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER.html](https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER.html). - `CMAKE_Fortran_COMPILER`. Select the Fortran compiler executable to be used. Not set by default and not; required unless running the Fortran Test Suite. - `CMAKE_BUILD_TYPE`. Select a build type like `OPTIMIZE` or `DEBUG` selecting a set of predefined; compiler flags. These flags are applied regardless of the `CMAKE_C_FLAGS`; option and may be changed by modifying `CMAKE_C_FLAGS_OPTIMIZE` etc. See; [https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html](https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html). - `TEST_SUITE_FORTRAN`. Activate that Fortran tests. This is a work in progress. More information can be; found in the [Flang documentation](https://flang.llvm.org/docs/FortranLLVMTestSuite.html). - `TEST_SUITE_RUN_UNDER`. Prefix test invocations with the given tool. This is typically used to run; cross-compiled tests within a simulator tool. - `TEST_SUITE_BENCHMARKING_ONLY`. Disable tests that are unsuitable for performance measurements. The disabled; tests either run for a very short time or are dominated by I/O performance; making them unsuitable as compiler performance tests. - `TEST_SUITE_SUBDIRS`. Semicolon-separated list of directories to include. This can be used to only; build parts of the test-suite or to include external suites. This option; does not work reliably with deeper subdirectories as it skips intermediate; `CMakeLists.txt` files which may be required. - `TEST_SUITE_COLLECT_STATS`. Collect internal LLVM statistics. Appends `-save-stats=obj` when invoking the; compiler and makes the lit runner collect and merge the statistic files. - `TEST_SUITE_RUN_BENCHMARKS`. If this is set to `OFF` then lit will not actually run the tests but just; collect build statistics like compile time and code size. - `TEST_SUITE_USE_PERF`. Use the `perf` tool for time measurement instead o,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:5540,test,tests,5540,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['test'],['tests']
Testability,"er.; Source: ; boost docs: shared_ptr. void f(int, int);; int g(void *);; int h() __attribute__((noreturn));. void test() {; // It is possible that 'malloc(1)' is called first,; // then 'h()', that is (or calls) noreturn and eventually; // 'g()' is never called.; f(g(malloc(1)), h()); // warn: 'g()' may never be called.; }. void f(int, int);; int g(int *);; int h() { throw 1; };. void test() {; // It is possible that 'new int' is called first,; // then 'h()', that throws an exception and eventually; // 'g()' is never called.; f(g(new int), h()); // warn: 'g()' may never be called.; }. memory.DstBufferTooSmall; (C, C++); Destination buffer passed to memory function is too small.; Note: security.insecureAPI.strcpy currently warns; on usage of strcpy and suggests to replace it.; Note: alpha.unix.CStringChecker contains some similar checks.; Source: CWE-120. void test() {; const char* s1 = ""abc"";; char *s2 = new char;; strcpy(s2, s1); // warn; }. void test() {; int* p1 = new int[3];; int* p2 = new int;; memcpy(p2, p1, 3); // warn; }. memory.NegativeArraySize; (C, C++); 'n' is used to specify the buffer size may be negative.; Note: possibly an enhancement to ; alpha.security.MallocOverflow.; Source: CWE-20,; Example 2. void test() {; int *p;; int n1 = -1;; p = new int[n1]; // warn; }. memory.ZeroAlloc; (C, C++); Allocation of zero bytes.; Note: an enhancement to unix.Malloc.; Note: unix.API perform C-checks for zero; allocation. This should be moved to unix.Malloc.; Source: C++03 3.7.3.1p2; C++11 3.7.4.1p2. #include <stdlib.h>. void test() {; int *p = malloc(0); // warn; free(p);; }. void test() {; int *p = new int[0]; // warn; delete[] p;; }. D6178. constructors/destructors. Name, DescriptionExampleProgress. ctordtor.ExptInsideDtor; (C++); It is dangerous to let an exception leave a destructor.; Using try..catch solves the problem.; Source: Scott Meyers ""More Effective C++"", item 11: Prevent exceptions from; leaving destructors. class A {; A() {}; ~A() { throw 1; } // wa",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:1462,test,test,1462,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,er.h; compiler-rt/lib/xray/xray_fdr_flags.cpp; compiler-rt/lib/xray/xray_fdr_flags.h; compiler-rt/lib/xray/xray_fdr_logging.h; compiler-rt/lib/xray/xray_fdr_log_records.h; compiler-rt/lib/xray/xray_flags.cpp; compiler-rt/lib/xray/xray_flags.h; compiler-rt/lib/xray/xray_interface_internal.h; compiler-rt/lib/xray/xray_log_interface.cpp; compiler-rt/lib/xray/xray_mips.cpp; compiler-rt/lib/xray/xray_mips64.cpp; compiler-rt/lib/xray/xray_powerpc64.cpp; compiler-rt/lib/xray/xray_profile_collector.cpp; compiler-rt/lib/xray/xray_profile_collector.h; compiler-rt/lib/xray/xray_profiling.cpp; compiler-rt/lib/xray/xray_profiling_flags.cpp; compiler-rt/lib/xray/xray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:106788,test,tests,106788,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"er:. > [Automatic Differentiation of Binned Likelihoods with RooFit and Clad](https://arxiv.org/abs/2304.02650). ## Overview on RooFit implementation details to access source code transformation AD. In RooFit jargon, what is meant by a ""RooFit class"" is a class inheriting from; RooAbsArg that represents a mathematical function, a PDF, or any other; transformation of inputs that are also represented by RooAbsArg objects.; Almost all final classes deriving from RooAbsArg have RooAbsReal as an; intermediate base class, which is the base class for all RooAbsArg that; represent real-valued nodes in the computation graph.; As such RooFit objects are so prevalent in practice, the names RooAbsArg and; RooAbsReal are used interchangeably in this guide. Users take these classes to build a computational graph that represents the; PDF (also called ""model"") that they want to use for fitting the data.; The user then passes his final PDF and a RooAbsData object to the; RooAbsPdf::fitTo() method, which implicitly creates a negative-log likelihood; (NLL) that RooFit minimizes for parameter estimation.; The NLL object, internally created by RooAbsPdf::createNLL(), is a RooAbsArg; itself.; In technical terms, it's another larger computation graph that encompasses the; computation graph representing the PDF. To enable source code transformation AD for RooFit NLLs with Clad, RooFit has a; routine that can traverse a computation graph made of RooAbsArg objects and; transform it to much simpler C++ code that mathematically represents the same; computation, but without any overhead that is hard to digest by the AD tool. On a high level, this *code generation* is implemented as follows:. 1. The computation graph is visited recursively by a; RooFit::Detail::CodeSquashContext object, via the virtual; RooAbsArg::translate() function that implements the translation of a; given RooFit class to minimal C++ code. This is an example of the visitor; pattern. 2. The generated code is processed by a Ro",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/roofit_ad.md:3753,log,log,3753,roofit/doc/developers/roofit_ad.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/roofit_ad.md,1,['log'],['log']
Testability,"erOfBins.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTHn THn.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH1 test_TH1.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTHStack test_THStack.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testProject3Dname test_Project3D_name.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTFormula test_TFormula.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTKDE test_tkde.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTH1FindFirstBinAbove test_TH1_FindFirstBinAbove.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_TEfficiency test_TEfficiency.cxx LIBRARIES Hist); ROOT_ADD_GTEST(TGraphMultiErrorsTests TGraphMultiErrorsTests.cxx LIBRARIES Hist RIO); ROOT_ADD_GTEST(test_TF123_Moments test_TF123_Moments.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_THBinIterator test_THBinIterator.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTMultiGraphGetHistogram test_TMultiGraph_GetHistogram.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testMapCppName test_MapCppName.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testTGraphSorting test_TGraph_sorting.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testSpline test_spline.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF1Simple test_tf1_simple.cxx LIBRARIES Hist RIO). if(fftw3); ROOT_ADD_GTEST(testTF1 test_tf1.cxx LIBRARIES Hist); endif(). ROOT_ADD_GTEST(testTF2 test_tf2.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF3 test_tf3.cxx LIBRARIES Hist). ROOT_ADD_GTEST(testTH1sa test_TH1_SaveAs.cxx LIBRARIES Hist). if(clad); ROOT_ADD_GTEST(TFormulaGradientTests TFormulaGradientTests.cxx LIBRARIES Core MathCore Hist); ROOT_ADD_GTEST(TFormulaHessianTests TFormulaHessianTests.cxx LIBRARIES Core MathCore Hist); endif(). # Regression test for https://github.com/root-project/root/issues/13691; # The test needs the following to be actually useful:; # - It must be compiled and run as a standalone executable, as it depends on; # gROOT not being initialized yet.; # - It must link to any library that is not in `core`. See the linked issue; # for details.; ROOT_EXECUTABLE(tdirectoryfile",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt:1538,test,testTGraphSorting,1538,hist/hist/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt,1,['test'],['testTGraphSorting']
Testability,"erOffset / HashValueBufferLength** - The offset and size within; the TPI Hash Stream of the list of hash values. It should be assumed that; there are either 0 hash values, or a number equal to the number of type; records in the TPI stream (``TypeIndexEnd - TypeEndBegin``). Thus, if; ``HashBufferLength`` is not equal to ``(TypeIndexEnd - TypeEndBegin) *; HashKeySize`` we can consider the PDB malformed. - **IndexOffsetBufferOffset / IndexOffsetBufferLength** - The offset and size; within the TPI Hash Stream of the Type Index Offsets Buffer. This is a list; of pairs of uint32_t's where the first value is a :ref:`Type Index; <type_indices>` and the second value is the offset in the type record data of; the type with this index. This can be used to do a binary search followed by; a linear search to get O(log n) lookup by type index. - **HashAdjBufferOffset / HashAdjBufferLength** - The offset and size within; the TPI hash stream of a serialized hash table whose keys are the hash values; in the hash value buffer and whose values are type indices. This appears to; be useful in incremental linking scenarios, so that if a type is modified an; entry can be created mapping the old hash value to the new type index so that; a PDB file consumer can always have the most up to date version of the type; without forcing the incremental linker to garbage collect and update; references that point to the old version to now point to the new version.; The layout of this hash table is described in :doc:`HashTable`. .. _tpi_records:. CodeView Type Record List; =========================; Following the header, there are ``TypeRecordBytes`` bytes of data that; represent a variable length array of :doc:`CodeView type records; <CodeViewTypes>`. The number of such records (e.g. the length of the array); can be determined by computing the value ``Header.TypeIndexEnd -; Header.TypeIndexBegin``. O(log(n)) access is provided by way of the Type Index Offsets array (if; present) described previously.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/PDB/TpiStream.rst:11699,log,log,11699,interpreter/llvm-project/llvm/docs/PDB/TpiStream.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/PDB/TpiStream.rst,1,['log'],['log']
Testability,"eral multi-variate methods. ; A lot of effort went into consolidation of the software,; i.e. method performance and robustness, and framework; stability. The changes with respect to ROOT 5.27 / TMVA 4.0.7 are; in detail:. Framework. Multi-class support. The support of multiple; output classes (i.e., more than a single background and signal; class) has been enabled for these methods: MLP (NN), BDTG,; FDA.; The multiclass; functionality can be enabled with the Factory option; ""AnalysisType=multiclass"". Training data is; specified with an additional classname, e.g. via; factory->AddTree(tree,""classname"");. After the; training a genetic algorithm is invoked to determine the best; cuts for selecting a specific class, based on the figure of; merit: purity*efficiency. TMVA comes with two examples in; $ROOTSYS/tmva/test: TMVAMulticlass.C; and TMVAMulticlassApplication.C. New TMVA event vector building. The code; for splitting the input data into training and test samples for; all classes and the mixing of those samples to one training and; one test sample has been rewritten completely. The new code is; more performant and has a clearer structure. This fixes several; bugs which have been reported by some users of TMVA.; Code and performance test framework: A unit; test framework for daily software and method performance; validation has been implemented.; . Methods. BDT Automatic parameter optimisation for building the; tree architecture: The optimisation procedure uses the; performance of the trained classifier on the ""test sample"" for; finding the set of optimal parameters. Two different methods to; traverse the parameter space are available (scanning, genetic; algorithm). Currently parameter optimization is implemented only; for these three parameters that influence the tree architectur:; the maximum depth of a tree, MaxDepth, the minimum; number of events in each node, NodeMinEvents, and; the number of tress, NTrees. Optimization can; is invoked by calling; factory->Optimi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v528/index.html:1143,test,test,1143,tmva/doc/v528/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v528/index.html,2,['test'],['test']
Testability,"erate and grossly; negligent acts) or agreed to in writing, shall any Contributor be; liable to You for damages, including any direct, indirect, special,; incidental, or consequential damages of any character arising as a; result of this License or out of the use or inability to use the; Work (including but not limited to damages for loss of goodwill,; work stoppage, computer failure or malfunction, or any and all; other commercial damages or losses), even if such Contributor; has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing; the Work or Derivative Works thereof, You may choose to offer,; and charge a fee for, acceptance of support, warranty, indemnity,; or other liability obligations and/or rights consistent with this; License. However, in accepting such obligations, You may act only; on Your own behalf and on Your sole responsibility, not on behalf; of any other Contributor, and only if You agree to indemnify,; defend, and hold each Contributor harmless for any liability; incurred by, or claims asserted against, such Contributor by reason; of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS. APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following; boilerplate notice, with the fields enclosed by brackets ""[]""; replaced with your own identifying information. (Don't include; the brackets!) The text should be enclosed in the appropriate; comment syntax for the file format. We also recommend that a; file or class name and description of purpose be included on the; same ""printed page"" as the copyright notice for easier; identification within third-party archives. Copyright [yyyy] [name of copyright owner]. Licensed under the Apache License, Version 2.0 (the ""License"");; you may not use this file except in compliance with the License.; You may obtain a copy of the License at. http://www.apache.org/lice",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT:9358,assert,asserted,9358,interpreter/llvm-project/clang/LICENSE.TXT,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/LICENSE.TXT,4,['assert'],['asserted']
Testability,"erated problems (very long triangles instead of the obvious ones); in some cases when the X and Y axis had very different ranges. Having two; scale factors, one for the X axis and one for the Y axis, cures the problem. TGraph2D. In case all the points are in the same Z-plane Z0 (zmin = zmax), the graph; minimum is set to Z0-0.01*Z0 and the maximum to Z0+0.01*Z0. This; allow to make TGraph2D like:; ; {; double *x = new double[2];; double *y = new double[2];; double *z = new double[2];; x[0] = 6215.;; x[1] = 5542.;; y[0] = 3853.;; y[1] = 5270.;; z[0] = 2723.;; z[1] = 2723.;; TGraph2D * g = new TGraph2D(2, x, y, z);; g->Draw(""LINE"");; }; . TGraph2DPainter. When a TGraph2D was painted with the option TRI1 the; color distribution in case of log scale along the Z axis was wrong. THistPainter. After executing the following macro, zooming the X axis interactively; generated the error message:; ; Error in <TGraphPainter::PaintGraphHist>: X must have N+1 values with option N . {; int n = 70;; TH1F h(""h"",""test"",n,0.,30.);; TRandom3 rndm_engine;; for (int i=0; i<10000; ++i) h->Fill(rndm_engine->Gaus(15.,4.));; TF1 f(""f"",""gaus"");; h->Fit(""f"");; gPad->SetLogx();; }; . The following macro didn't draw any box. Because of a precision; problem the filled bin was not drawn.; ; {; double yarr[] = { 1.0, 2.0, 3.0, 4.0 };; double xarr[] = { 0.01, 0.02, 0.03, 0.04 };; TH2D *h = new TH2D(""h"",""h"",3,xarr,3,yarr);; h->Fill(0.011,2.5);; h->Draw(""box"");; }; . The following macro displayed the histogram out of the frame; (option ""bar""):; ; {; gStyle->SetHistMinimumZero();; TH1F* h = new TH1F(""h"",""h"", 44, -0.5, 43.5);; h->SetBarWidth(0.7);; h->SetBarOffset(0.2);; h->SetFillColor(kGreen);; for (int i=0;i<44; i++ ) h->Fill(i, -i-60);; h->DrawCopy(""bar1"");; }; . The setting gStyle->SetHistMinimumZero() now works for horizontal; plots produced with the option HBAR.; . In the case of profile histograms it is possible to print the number; of entries instead of the bin content. It is enough to combine th",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/doc/v528/index.html:2054,test,test,2054,hist/doc/v528/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/doc/v528/index.html,1,['test'],['test']
Testability,"ere are some examples:. .. code-block:: c++. class VehicleMaker {; ...; Factory<Tire> F; // Avoid: a non-descriptive abbreviation.; Factory<Tire> Factory; // Better: more descriptive.; Factory<Tire> TireFactory; // Even better: if VehicleMaker has more than one; // kind of factories.; };. Vehicle makeVehicle(VehicleType Type) {; VehicleMaker M; // Might be OK if scope is small.; Tire Tmp1 = M.makeTire(); // Avoid: 'Tmp1' provides no information.; Light Headlight = M.makeLight(""head""); // Good: descriptive.; ...; }. Assert Liberally; ^^^^^^^^^^^^^^^^. Use the ""``assert``"" macro to its fullest. Check all of your preconditions and; assumptions, you never know when a bug (not necessarily even yours) might be; caught early by an assertion, which reduces debugging time dramatically. The; ""``<cassert>``"" header file is probably already included by the header files you; are using, so it doesn't cost anything to use it. To further assist with debugging, make sure to put some kind of error message in; the assertion statement, which is printed if the assertion is tripped. This; helps the poor debugger make sense of why an assertion is being made and; enforced, and hopefully what to do about it. Here is one complete example:. .. code-block:: c++. inline Value *getOperand(unsigned I) {; assert(I < Operands.size() && ""getOperand() out of range!"");; return Operands[I];; }. Here are more examples:. .. code-block:: c++. assert(Ty->isPointerType() && ""Can't allocate a non-pointer type!"");. assert((Opcode == Shl || Opcode == Shr) && ""ShiftInst Opcode invalid!"");. assert(idx < getNumSuccessors() && ""Successor # out of range!"");. assert(V1.getType() == V2.getType() && ""Constant types must be identical!"");. assert(isa<PHINode>(Succ->front()) && ""Only works on PHId BBs!"");. You get the idea. In the past, asserts were used to indicate a piece of code that should not be; reached. These were typically of the form:. .. code-block:: c++. assert(0 && ""Invalid radix for integer literal"");. This h",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst:45430,assert,assertion,45430,interpreter/llvm-project/llvm/docs/CodingStandards.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst,2,['assert'],['assertion']
Testability,"ere is also a Windows; `Dockerfile <https://github.com/llvm/llvm-zorg/blob/main/buildbot/google/docker/windows-base-vscode2019/Dockerfile>`_; with the entire build tool chain. This can be used to test the build with a; tool chain different from your host installation or to create build servers. Next steps; ==========; 1. Read the documentation.; 2. Seriously, read the documentation.; 3. Remember that you were warned twice about reading the documentation. Test LLVM on the command line:; ------------------------------; The LLVM tests can be run by changing directory to the llvm source; directory and running:. .. code-block:: bat. c:\llvm> python ..\build\Release\bin\llvm-lit.py llvm\test. This example assumes that Python is in your PATH variable, which would be; after **Add Python to the PATH** was selected during Python installation.; If you had opened a command window prior to Python installation, you would; have to close and reopen it to get the updated PATH. A specific test or test directory can be run with:. .. code-block:: bat. c:\llvm> python ..\build\Release\bin\llvm-lit.py llvm\test\Transforms\Util. Build the LLVM Suite:; ---------------------; * The projects may still be built individually, but to build them all do; not just select all of them in batch build (as some are meant as; configuration projects), but rather select and build just the; ``ALL_BUILD`` project to build everything, or the ``INSTALL`` project,; which first builds the ``ALL_BUILD`` project, then installs the LLVM; headers, libs, and other useful things to the directory set by the; ``CMAKE_INSTALL_PREFIX`` setting when you first configured CMake.; * The Fibonacci project is a sample program that uses the JIT. Modify the; project's debugging properties to provide a numeric command line argument; or run it from the command line. The program will print the; corresponding fibonacci value. Links; =====; This document is just an **introduction** to how to use LLVM to do some simple; things... ther",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStartedVS.rst:9408,test,test,9408,interpreter/llvm-project/llvm/docs/GettingStartedVS.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStartedVS.rst,2,['test'],['test']
Testability,erface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl/tsan_ilist.h; compiler-rt/lib/tsan/rtl/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl/tsan_mman.h; compiler-rt/lib/tsan/rtl/tsan_mutexset.h; compiler-rt/lib/tsan/rtl/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl/tsan_shadow.h; compiler-rt/lib/tsan/rtl/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl/tsan_suppressions.h; compiler-rt/lib/tsan/rtl/tsan_symbolize.h; compiler-rt/lib/tsan/rtl/tsan_trace,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:103306,test,tests,103306,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"erformed for apple targets only.; void test(const char *path) {; int fd = open(path, O_CREAT);; // warn: call to 'open' requires a third argument when the; // 'O_CREAT' flag is set; }. void f();. void test() {; pthread_once_t pred = {0x30B1BCBA, {0}};; pthread_once(&pred, f);; // warn: call to 'pthread_once' uses the local variable; }. void test() {; void *p = malloc(0); // warn: allocation size of 0 bytes; }. void test() {; void *p = calloc(0, 42); // warn: allocation size of 0 bytes; }. void test() {; void *p = malloc(1);; p = realloc(p, 0); // warn: allocation size of 0 bytes; }. void test() {; void *p = alloca(0); // warn: allocation size of 0 bytes; }. void test() {; void *p = valloc(0); // warn: allocation size of 0 bytes; }. unix.Malloc; (C); Check for memory leaks, double free, and use-after-free and offset problems; involving malloc. void test() {; int *p = malloc(1);; free(p);; free(p); // warn: attempt to free released memory; }. void test() {; int *p = malloc(sizeof(int));; free(p);; *p = 1; // warn: use after free; }. void test() {; int *p = malloc(1);; if (p); return; // warn: memory is never released; }. void test() {; int a[] = { 1 };; free(a); // warn: argument is not allocated by malloc; }. void test() {; int *p = malloc(sizeof(char));; p = p - 1;; free(p); // warn: argument to free() is offset by -4 bytes; }. unix.MallocSizeof; (C); Check for dubious malloc, calloc or; realloc arguments involving sizeof. void test() {; long *p = malloc(sizeof(short));; // warn: result is converted to 'long *', which is; // incompatible with operand type 'short'; free(p);; }. unix.MismatchedDeallocator; (C, C++, ObjC); Check for mismatched deallocators (e.g. passing a pointer allocating; with new to free()). // C, C++; void test() {; int *p = (int *)malloc(sizeof(int));; delete p; // warn; }. // C, C++; void __attribute((ownership_returns(malloc))) *user_malloc(size_t);. void test() {; int *p = (int *)user_malloc(sizeof(int));; delete p; // warn; }. // C, C++; void",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:24386,test,test,24386,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"erializable C++ types with associated names, similar to branches in a TTree.; The data model can contain (nested) collections, e.g., a type can be `std::vector<std::vector<float>>`. Each serializable type is represented by a **field**, concretely by a templated version of RField,; e.g. `RField<double>`. A field can generate or adopt an associated **value**, which represents a memory location; storing a value of the given C++ type. These distinguished memory locations are the destinations and sources for the; deserialization and serialization. The (de-)serialization is a mapping from the C++ type to the more simple **column** type system. A column contains; an arbitrary number of fixed-sized elements of a well-defined set of types: integers and floats of different; bit sizes. A C++ type may be mapped to multiple columns. For instance, an `std::vector<float>` maps to two columns,; an offset column indicating the size of the vector per entry, and a payload column with the float data. Columns are partitioned into **pages** (roughly: TTree baskets) of a few kB -- a few tens of kB each.; The **physical layer** (only) needs to provide the means to store and retrieve pages. The physical layer is; decoupled from the high-level C++ logic. The physical layer implements an abstract page storage interface,; so that dedicated implementations for key-value stores and other storage systems are conceivable.; At this point, the only provided backend stores the pages in ROOT files. RNTuples are further grouped into **clusters**, which are, like TTree clusters, self-contained blocks of; consecutive entries. Clusters provide a unit of writing and will provide the means for parallel writing of data; in a future version of RNTuple. Related classes; ---------------. \defgroup ROOT7 ROOT7 classes; \brief Interfaces and classes designed for future ROOT version 7 (experimental!). \defgroup NTuple NTuple-related classes; \brief tuple classes designed for future ROOT version 7 (experimental!); ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/doc/README.md:2875,log,logic,2875,tree/ntuple/v7/doc/README.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/doc/README.md,1,['log'],['logic']
Testability,ericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/math/TwoInputSingleOutputDiff.h; libc/fuzzing/stdlib/atof_differential_fuzz.cpp; libc/fuzzing/stdlib/qsort_fuzz.cpp; libc/fuzzing/stdlib/StringParserOutputDiff.h; libc/fuzzing/string/strcmp_fuzz.cpp; libc/fuz,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129781,benchmark,benchmarks,129781,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,"ermediate; `folders` in the path are in fact also nodes ""touched"" by the; current point, but having some ""touched"" containment. The current; path can be retrieved only after the state was initialized and is; useful for getting an idea of the current point location. ~~~{.cpp}; const char *path = gGeoManager->GetPath();; cout << ""Current path is: "" << path << endl;; /A_1/B_34/C_3/D_1; ~~~. - The `current node`, `volume` and `material`. In order to; take decisions on post-step or further stepping actions, one has to; know these. In order to get a pointer to the current node one can; do:. ~~~{.cpp}; TGeoNode *cnode = gGeoManager->GetCurrentNode();; // then:; TGeoVolume *cvol = gGeoManager->GetCurrentVolume();; // or:; cvol = cnode->GetVolume(); // (*); // then:; TGeoMaterial *cmat = cvol->GetMedium()->GetMaterial();; ~~~. (*) Note: If the current point is in fact outside the geometry, the; current node pointer will not be NULL, but pointing to the top node. In order to take decisions in such case one needs always to test:. ~~~{.cpp}; if (gGeoManager->IsOutside()) {; // current point is actually outside; ... // corresponding action; }; ~~~. Specific information related to the current volume/node like ID's or; shape can be then retrieved from the corresponding objects. - Current state `index`. The number of possible different states of; the modeller corresponds to the number of different objects/paths in; the geometry. This has nothing to do with the number of nodes, since; the same node can be found on different branches. In other words,; the number of states corresponds to the number of nodes in the; `expanded geometry tree`. Since unfortunately this expansion from; logical to physical hierarchy cannot be stored on regular basis due; to the large size of the latter, one cannot directly assign state; numbers. If the size of the expansion proves however to be small; enough (less than about 50 million objects), a parallel structure; storing these state indices is built and ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md:69289,test,test,69289,geom/geom/doc/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md,1,['test'],['test']
Testability,"erpc{{.*}}. ``REQUIRES`` and ``UNSUPPORTED`` and ``XFAIL`` all accept a comma-separated; list of boolean expressions. The values in each expression may be:. - Features added to ``config.available_features`` by configuration files such as ``lit.cfg``.; String comparison of features is case-sensitive. Furthermore, a boolean expression can; contain any Python regular expression enclosed in ``{{ }}``, in which case the boolean; expression is satisfied if any feature matches the regular expression. Regular; expressions can appear inside an identifier, so for example ``he{{l+}}o`` would match; ``helo``, ``hello``, ``helllo``, and so on.; - The default target triple, preceded by the string ``target=`` (for example,; ``target=x86_64-pc-windows-msvc``). Typically regular expressions are used; to match parts of the triple (for example, ``target={{.*}}-windows{{.*}}``; to match any Windows target triple). | ``REQUIRES`` enables the test if all expressions are true.; | ``UNSUPPORTED`` disables the test if any expression is true.; | ``XFAIL`` expects the test to fail if any expression is true. As a special case, ``XFAIL: *`` is expected to fail everywhere. .. code-block:: llvm. ; This test is disabled when running on Windows,; ; and is disabled when targeting Linux, except for Android Linux.; ; UNSUPPORTED: system-windows, target={{.*linux.*}} && !target={{.*android.*}}; ; This test is expected to fail when targeting PowerPC or running on Darwin.; ; XFAIL: target=powerpc{{.*}}, system-darwin. Tips for writing constraints; ----------------------------. **``REQUIRES`` and ``UNSUPPORTED``**. These are logical inverses. In principle, ``UNSUPPORTED`` isn't absolutely; necessary (the logical negation could be used with ``REQUIRES`` to get; exactly the same effect), but it can make these clauses easier to read and; understand. Generally, people use ``REQUIRES`` to state things that the test; depends on to operate correctly, and ``UNSUPPORTED`` to exclude cases where; the test is expect",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:21252,test,test,21252,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"error(""'"" + Arg + ""' value invalid for file size argument!"");; }; }; }. This function implements a very simple parser for the kinds of strings we are; interested in. Although it has some holes (it allows ""``123KKK``"" for example),; it is good enough for this example. Note that we use the option itself to print; out the error message (the ``error`` method always returns true) in order to get; a nice error message (shown below). Now that we have our parser class, we can; use it like this:. .. code-block:: c++. static cl::opt<unsigned, false, FileSizeParser>; MFS(""max-file-size"", cl::desc(""Maximum file size to accept""),; cl::value_desc(""size""));. Which adds this to the output of our program:. ::. OPTIONS:; -help - display available options (-help-hidden for more); ...; -max-file-size=<size> - Maximum file size to accept. And we can test that our parse works correctly now (the test program just prints; out the max-file-size argument value):. ::. $ ./test; MFS: 0; $ ./test -max-file-size=123MB; MFS: 128974848; $ ./test -max-file-size=3G; MFS: 3221225472; $ ./test -max-file-size=dog; -max-file-size option: 'dog' value invalid for file size argument!. It looks like it works. The error message that we get is nice and helpful, and; we seem to accept reasonable file sizes. This wraps up the ""custom parser""; tutorial. Exploiting external storage; ---------------------------. Several of the LLVM libraries define static ``cl::opt`` instances that will; automatically be included in any program that links with that library. This is; a feature. However, sometimes it is necessary to know the value of the command; line option outside of the library. In these cases the library does or should; provide an external storage location that is accessible to users of the; library. Examples of this include the ``llvm::DebugFlag`` exported by the; ``lib/Support/Debug.cpp`` file and the ``llvm::TimePassesIsEnabled`` flag; exported by the ``lib/IR/PassManager.cpp`` file. .. todo::. TODO: complete ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandLine.rst:66083,test,test,66083,interpreter/llvm-project/llvm/docs/CommandLine.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandLine.rst,1,['test'],['test']
Testability,"errupted. **UNSUPPORTED**. The test is not supported in this environment. This is used by test formats; which can report unsupported tests. **TIMEOUT**. The test was run, but it timed out before it was able to complete. This is; considered a failure. Depending on the test format tests may produce additional information about; their status (generally only for failures). See the :ref:`output-options`; section for more information. .. _lit-infrastructure:. LIT INFRASTRUCTURE; ------------------. This section describes the :program:`lit` testing architecture for users interested in; creating a new :program:`lit` testing implementation, or extending an existing one. :program:`lit` proper is primarily an infrastructure for discovering and running; arbitrary tests, and to expose a single convenient interface to these; tests. :program:`lit` itself doesn't know how to run tests, rather this logic is; defined by *test suites*. TEST SUITES; ~~~~~~~~~~~. As described in :ref:`test-discovery`, tests are always located inside a *test; suite*. Test suites serve to define the format of the tests they contain, the; logic for finding those tests, and any additional information to run the tests. :program:`lit` identifies test suites as directories containing ``lit.cfg`` or; ``lit.site.cfg`` files (see also :option:`--config-prefix`). Test suites are; initially discovered by recursively searching up the directory hierarchy for; all the input files passed on the command line. You can use; :option:`--show-suites` to display the discovered test suites at startup. Once a test suite is discovered, its config file is loaded. Config files; themselves are Python modules which will be executed. When the config file is; executed, two important global variables are predefined:. **lit_config**. The global **lit** configuration object (a *LitConfig* instance), which defines; the builtin test formats, global configuration parameters, and other helper; routines for implementing test configurations. *",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:14194,test,test-discovery,14194,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,3,['test'],"['test', 'test-discovery', 'tests']"
Testability,"ers check the use of Unix and POSIX APIs. Core Checkers. Name, DescriptionExample. core.CallAndMessage; (C, C++, ObjC); Check for logical errors for function calls and Objective-C message expressions; (e.g., uninitialized arguments, null function pointers). // C; struct S {; int x;; };. void f(struct S s);. void test() {; struct S s;; f(s); // warn: passed-by-value arg contain uninitialized data; }. // C; void test() {; void (*foo)(void);; foo(); // warn: function pointer is uninitialized; }. // C; void test() {; void (*foo)(void);; foo = 0;; foo(); // warn: function pointer is null; }. // C++; class C {; public:; void f();; };. void test() {; C *pc;; pc->f(); // warn: object pointer is uninitialized; }. // C++; class C {; public:; void f();; };. void test() {; C *pc = 0;; pc->f(); // warn: object pointer is null; }. // Objective-C; @interface MyClass : NSObject; @property (readwrite,assign) id x;; - (long double)longDoubleM;; @end. void test() {; MyClass *obj1;; long double ld1 = [obj1 longDoubleM];; // warn: receiver is uninitialized; }. // Objective-C; @interface MyClass : NSObject; @property (readwrite,assign) id x;; - (long double)longDoubleM;; @end. void test() {; MyClass *obj1;; id i = obj1.x; // warn: uninitialized object pointer; }. // Objective-C; @interface Subscriptable : NSObject; - (id)objectAtIndexedSubscript:(unsigned int)index;; @end. @interface MyClass : Subscriptable; @property (readwrite,assign) id x;; - (long double)longDoubleM;; @end. void test() {; MyClass *obj1;; id i = obj1[0]; // warn: uninitialized object pointer; }. core.DivideZero; (C, C++, ObjC); Check for division by zero.co. void test(int z) {; if (z == 0); int x = 1 / z; // warn; }. void test() {; int x = 1;; int y = x % 0; // warn; }. core.NonNullParamChecker; (C, C++, ObjC); Check for null pointers passed as arguments to a function whose arguments are; marked with the nonnull attribute. int f(int *p) __attribute__((nonnull));. void test(int *p) {; if (!p); f(p); // warn; }. core.Nul",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:2146,test,test,2146,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"ers themselves --- perhaps because you want to keep them clean for other; clients, or perhaps because they're from some open source project and you don't; want to modify them at all. **Incomplete solution:** Redeclare all the interesting parts of the API in your; own header and add the attributes you want. Unfortunately, this:. * doesn't work with attributes that must be present on a definition; * doesn't allow changing the definition in other ways; * requires your header to be included in any client code to take effect. **Better solution:** Provide a ""sidecar"" file with the information you want to; add, and have that automatically get picked up by the module-building logic in; the compiler. That's API notes. API notes use a YAML-based file format. YAML is a format best explained by; example, so here is a `small example; <https://github.com/llvm/llvm-project/blob/main/clang/test/APINotes/Inputs/Frameworks/SomeKit.framework/Headers/SomeKit.apinotes>`_; from the compiler test suite of API; notes for a hypothetical ""SomeKit"" framework. Usage; =====. API notes files are found relative to the module map that defines a module,; under the name ""SomeKit.apinotes"" for a module named ""SomeKit"". Additionally, a; file named ""SomeKit_private.apinotes"" will also be picked up to go with a; private module map. For bare modules these two files will be in the same; directory as the corresponding module map; for framework modules, they should; be placed in the Headers and PrivateHeaders directories, respectively. The; module map for a private top-level framework module should be placed in the; PrivateHeaders directory as well, though it does not need an additional; ""_private"" suffix on its name. Clang will search for API notes files next to module maps only when passed the; ``-fapi-notes-modules`` option. Limitations; ===========. - Since they're identified by module name, API notes cannot be used to modify; arbitrary textual headers. ""Versioned"" API Notes; =====================. Many ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/APINotes.rst:1292,test,test,1292,interpreter/llvm-project/clang/docs/APINotes.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/APINotes.rst,1,['test'],['test']
Testability,"ers there are; data formatters for clang data structures in; ; clang/utils/ClangDataFormat.py. Debugging using Visual Studio. The files; ; llvm/utils/LLVMVisualizers/llvm.natvis and; ; clang/utils/ClangVisualizers/clang.natvis provide debugger visualizers; that make debugging of more complex data types much easier.; Depending on how you configure the project, Visual Studio may automatically; use these visualizers when debugging or you may be required to put the files; into %USERPROFILE%\Documents\Visual Studio <version>\Visualizers; or create a symbolic link so they update automatically. See; ; Microsoft's documentation for more details on use of NATVIS. Testing. Testing on Unix-like Systems. Clang includes a basic regression suite in the tree which can be; run with make test from the top-level clang directory, or; just make in the test sub-directory.; make VERBOSE=1 can be used to show more detail; about what is being run.; If you built LLVM and Clang using CMake, the test suite can be run; with make check-clang from the top-level LLVM directory.; The tests primarily consist of a test runner script running the compiler; under test on individual test files grouped in the directories under the; test directory. The individual test files include comments at the; beginning indicating the Clang compile options to use, to be read; by the test runner. Embedded comments also can do things like telling; the test runner that an error is expected at the current line.; Any output files produced by the test will be placed under; a created Output directory.; During the run of make test, the terminal output will; display a line similar to the following:; --- Running clang tests for i686-pc-linux-gnu ---; followed by a line continually overwritten with the current test; file being compiled, and an overall completion percentage.; After the make test run completes, the absence of any; Failing Tests (count): message indicates that no tests; failed unexpectedly. If any tests did fail, ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html:2767,test,test,2767,interpreter/llvm-project/clang/www/hacking.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html,1,['test'],['test']
Testability,"ers to extend its core; types, and leverages the closed and tag-dispatched nature of its hierarchies to; generate significantly more efficient code. We have also found that a large; amount of our usage of type hierarchies fits better with tag-based pattern; matching rather than dynamic dispatch across a common interface. Within LLVM we; have built custom helpers to facilitate this design. See this document's; section on :ref:`isa and dyn_cast <isa>` and our :doc:`detailed document; <HowToSetUpLLVMStyleRTTI>` which describes how you can implement this; pattern for use with the LLVM helpers. .. _abi_breaking_checks:. ABI Breaking Checks; -------------------. Checks and asserts that alter the LLVM C++ ABI are predicated on the; preprocessor symbol `LLVM_ENABLE_ABI_BREAKING_CHECKS` -- LLVM; libraries built with `LLVM_ENABLE_ABI_BREAKING_CHECKS` are not ABI; compatible LLVM libraries built without it defined. By default,; turning on assertions also turns on `LLVM_ENABLE_ABI_BREAKING_CHECKS`; so a default +Asserts build is not ABI compatible with a; default -Asserts build. Clients that want ABI compatibility; between +Asserts and -Asserts builds should use the CMake build system; to set `LLVM_ENABLE_ABI_BREAKING_CHECKS` independently; of `LLVM_ENABLE_ASSERTIONS`. .. _coreclasses:. The Core LLVM Class Hierarchy Reference; =======================================. ``#include ""llvm/IR/Type.h""``. header source: `Type.h <https://llvm.org/doxygen/Type_8h_source.html>`_. doxygen info: `Type Classes <https://llvm.org/doxygen/classllvm_1_1Type.html>`_. The Core LLVM classes are the primary means of representing the program being; inspected or transformed. The core LLVM classes are defined in header files in; the ``include/llvm/IR`` directory, and implemented in the ``lib/IR``; directory. It's worth noting that, for historical reasons, this library is; called ``libLLVMCore.so``, not ``libLLVMIR.so`` as you might expect. .. _Type:. The Type class and Derived Types; ------------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst:133512,assert,assertions,133512,interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,1,['assert'],['assertions']
Testability,ers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN/CNN tests.; # @author Vladimir Ilievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Conv,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1045,test,testReshapeCuda,1045,tmva/tmva/test/DNN/CNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt,1,['test'],['testReshapeCuda']
Testability,"ert(Ty->isPointerType() && ""Can't allocate a non-pointer type!"");. assert((Opcode == Shl || Opcode == Shr) && ""ShiftInst Opcode invalid!"");. assert(idx < getNumSuccessors() && ""Successor # out of range!"");. assert(V1.getType() == V2.getType() && ""Constant types must be identical!"");. assert(isa<PHINode>(Succ->front()) && ""Only works on PHId BBs!"");. You get the idea. In the past, asserts were used to indicate a piece of code that should not be; reached. These were typically of the form:. .. code-block:: c++. assert(0 && ""Invalid radix for integer literal"");. This has a few issues, the main one being that some compilers might not; understand the assertion, or warn about a missing return in builds where; assertions are compiled out. Today, we have something much better: ``llvm_unreachable``:. .. code-block:: c++. llvm_unreachable(""Invalid radix for integer literal"");. When assertions are enabled, this will print the message if it's ever reached; and then exit the program. When assertions are disabled (i.e. in release; builds), ``llvm_unreachable`` becomes a hint to compilers to skip generating; code for this branch. If the compiler does not support this, it will fall back; to the ""abort"" implementation. Use ``llvm_unreachable`` to mark a specific point in code that should never be; reached. This is especially desirable for addressing warnings about unreachable; branches, etc., but can be used whenever reaching a particular code path is; unconditionally a bug (not originating from user input; see below) of some kind.; Use of ``assert`` should always include a testable predicate (as opposed to; ``assert(false)``). If the error condition can be triggered by user input then the; recoverable error mechanism described in :doc:`ProgrammersManual` should be; used instead. In cases where this is not practical, ``report_fatal_error`` may; be used. Another issue is that values used only by assertions will produce an ""unused; value"" warning when assertions are disabled. For exampl",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst:46839,assert,assertions,46839,interpreter/llvm-project/llvm/docs/CodingStandards.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst,1,['assert'],['assertions']
Testability,"ertain types of; dump file and trigger additional post-processing of the dump file upon; encountering this element (e.g. generating visualizations, symbolization). The; expectation is that the information collected from contextual elements; (described below) in the logging stream may be necessary to decode the content; of the dump. So if the symbolizing filter triggers other processing, it may; need to feed some distilled form of the contextual information to those; processes. An example of a type identifier is ``sancov``, for dumps from LLVM; `SanitizerCoverage <https://clang.llvm.org/docs/SanitizerCoverage.html>`_. Example::. {{{dumpfile:sancov:sancov.8675}}}. Contextual elements; ===================. These are elements that supply information necessary to convert presentation; elements to symbolic form. Unlike presentation elements, they are not directly; related to the surrounding text. Contextual elements should appear alone on; lines with no other non-whitespace text, so that the symbolizing filter might; elide the whole line from its output without hiding any other log text. The contextual elements themselves do not necessarily need to be presented in; human-readable output. However, the information they impart may be essential to; understanding the logging text even after symbolization. So it's recommended; that this information be preserved in some form when the original raw log with; markup may no longer be readily accessible for whatever reason. Contextual elements should appear in the logging stream before they are needed.; That is, if some piece of context may affect how the symbolizing filter would; interpret or present a later presentation element, the necessary contextual; elements should have appeared somewhere earlier in the logging stream. It should; always be possible for the symbolizing filter to be implemented as a single pass; over the raw logging stream, accumulating context and massaging text as it goes. ``{{{reset}}}``. This should be output",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst:17362,log,log,17362,interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst,1,['log'],['log']
Testability,"erties of volumes can be provided both at; build time or after geometry is closed, but global visualization; settings (see section: ""The Drawing Package"") should not be provided; at build time, otherwise the drawing package will be loaded. There is also a list of specific rules:. - Positioned volumes should not extrude their container or intersect; with others within this unless it is specified (see section:; Overlapping Volumes).; - The top volume (containing all geometry trees) must be specified; before closing the geometry and must not be positioned - it; represents the global reference frame.; - After building the full geometry tree, the geometry must be closed; (see the method **`TGeoManager::CloseGeometry()`**). Voxelization; can be redone per volume after this process. The list is much bigger and we will describe in more detail the geometry; creation procedure in the following sections. Provided that geometry was; successfully built and closed, the **`TGeoManager`** class will register; itself to ROOT and the logical/physical structures will become; immediately browsable. \anchor GP01a; ### The Volume Hierarchy. The basic components used for building the logical hierarchy of the; geometry are the positioned volumes called `nodes`. Volumes are fully; defined geometrical objects having a given shape and medium and possibly; containing a list of nodes. Nodes represent just positioned instances of; volumes inside a container volume but users do not directly create them.; They are automatically created as a result of adding one volume inside; other or dividing a volume. The geometrical transformation held by nodes; is always defined with respect to their mother (relative positioning).; Reflection matrices are allowed. A hierarchical element is not fully defined by a node since nodes are; not directly linked to each other, but through volumes (a node points to; a volume, which at its turn points to a list of nodes):. `NodeTop ` ` VolTop ` ` NodeA ` ` VolA ` `...`. O",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md:18628,log,logical,18628,geom/geom/doc/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md,1,['log'],['logical']
Testability,"es 5 0; Symbols 0 0; Types 2 2; Lines 0 0; -----------------------------; Total 7 2. From the values printed under the **Found** column, we can see that no; **Types** were found in the DWARF debug information generated by Clang. TEST CASE 5 - INCORRECT LEXICAL SCOPE FOR VARIABLE; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; The below example is used to show different output generated by; :program:`llvm-debuginfo-analyzer`. We compiled the example for an X86; Codeview and ELF targets with recent versions of Clang, GCC and MSVC; (-O0 -g). .. code-block:: c++. // definitions.h; #ifdef _MSC_VER; #define forceinline __forceinline; #elif defined(__clang__); #if __has_attribute(__always_inline__); #define forceinline inline __attribute__((__always_inline__)); #else; #define forceinline inline; #endif; #elif defined(__GNUC__); #define forceinline inline __attribute__((__always_inline__)); #else; #define forceinline inline; #error; #endif. As the test is dependent on inline compiler options, the above header; file defines *forceinline*. .. code-block:: c++. #include ""definitions.h"". .. code-block:: c++. 1 #include ""definitions.h""; 2 forceinline int InlineFunction(int Param) {; 3 int Var_1 = Param;; 4 {; 5 int Var_2 = Param + Var_1;; 6 Var_1 = Var_2;; 7 }; 8 return Var_1;; 9 }; 10; 11 int test(int Param_1, int Param_2) {; 12 int A = Param_1;; 13 A += InlineFunction(Param_2);; 14 return A;; 15 }. The above test is used to illustrate a variable issue found in the Clang; compiler:; `PR43860 (Bugs LLVM) <https://bugs.llvm.org/show_bug.cgi?id=43860>`_ /; `PR43205 (GitHub) <https://github.com/llvm/llvm-project/issues/43205>`_. These are the logical views that :program:`llvm-debuginfo-analyzer`; generates for 3 different compilers (MSVC, Clang and GCC), emitting; different debug information formats (CodeView, DWARF) on different; platforms. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level,format,producer; --output-sort=name; --print=symbols; pr-43860-codeview-cl",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:49093,test,test,49093,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['test'],['test']
Testability,"es No 3 − Independent cycles of GA fitting. SC_steps No 10 − Spread control, steps. SC_rate No 5 − Spread control, rate: factor is changed depending on the rate. SC_factor No 0.95 − Spread control, factor. ConvCrit No 0.001 − Convergence criteria. SaveBestGen No 1 − Saves the best n results from each generation. They are included in the last cycle. SaveBestCycle No 10 − Saves the best n results from each cycle. They are included in the last cycle. The value should be set to at least 1.0. Trim No False − Trim the population to PopSize after assessing the fitness of each individual. Seed No 100 − Set seed of random generator (0 gives random seeds). Configuration options given in the ""PrepareForTrainingAndTesting"" call; these options define the creation of the data sets used for training and expert validation by TMVA :. Configuration options reference for class: DataSetFactory. Option Array Default value Predefined values Description. SplitMode No Random Random, Alternate, Block Method of picking training and testing events (default: random). MixMode No SameAsSplitMode SameAsSplitMode, Random, Alternate, Block Method of mixing events of differnt classes into one dataset (default: SameAsSplitMode). SplitSeed No 100 − Seed for random event shuffling. NormMode No EqualNumEvents None, NumEvents, EqualNumEvents Overall renormalisation of event-by-event weights used in the training (NumEvents: average weight of 1 per event, independently for signal and background; EqualNumEvents: average weight of 1 per event for signal, and sum of weights for background equal to sum of weights for signal). nTrain_Signal No 0 − Number of training events of class Signal (default: 0 = all). nTest_Signal No 0 − Number of test events of class Signal (default: 0 = all). nTrain_Background No 0 − Number of training events of class Background (default: 0 = all). nTest_Background No 0 − Number of test events of class Background (default: 0 = all). V No False − Verbosity (default: true). VerboseLevel ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html:32390,test,testing,32390,documentation/tmva/UsersGuide/optionRef.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html,1,['test'],['testing']
Testability,"es and strip executables and libraries (Darwin Only)"" OFF). option(LLVM_EXPERIMENTAL_DEBUGINFO_ITERATORS; ""Add extra Booleans to ilist_iterators to communicate facts for debug-info"" OFF). set(LLVM_CODESIGNING_IDENTITY """" CACHE STRING; ""Sign executables and dylibs with the given identity or skip if empty (Darwin Only)""). # If enabled, verify we are on a platform that supports oprofile.; if( LLVM_USE_OPROFILE ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""OProfile support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_OPROFILE ). option(LLVM_USE_PERF; ""Use perf JIT interface to inform perf about JIT code"" OFF). # If enabled, verify we are on a platform that supports perf.; if( LLVM_USE_PERF ); if( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); message(FATAL_ERROR ""perf support is available on Linux only.""); endif( NOT CMAKE_SYSTEM_NAME MATCHES ""Linux"" ); endif( LLVM_USE_PERF ). set(LLVM_USE_SANITIZER """" CACHE STRING; ""Define the sanitizer used to build binaries and tests.""); option(LLVM_OPTIMIZE_SANITIZED_BUILDS ""Pass -O1 on debug sanitizer builds"" ON); set(LLVM_UBSAN_FLAGS; ""-fsanitize=undefined -fno-sanitize=vptr,function -fno-sanitize-recover=all""; CACHE STRING; ""Compile flags set to enable UBSan. Only used if LLVM_USE_SANITIZER contains 'Undefined'.""); set(LLVM_LIB_FUZZING_ENGINE """" CACHE PATH; ""Path to fuzzing library for linking with fuzz targets""). option(LLVM_USE_SPLIT_DWARF; ""Use -gsplit-dwarf when compiling llvm and --gdb-index when linking."" OFF). # Define an option controlling whether we should build for 32-bit on 64-bit; # platforms, where supported.; if( CMAKE_SIZEOF_VOID_P EQUAL 8 AND NOT (WIN32 OR ${CMAKE_SYSTEM_NAME} MATCHES ""AIX"")); # TODO: support other platforms and toolchains.; option(LLVM_BUILD_32_BITS ""Build 32 bits executables and libraries."" OFF); endif(). # Define the default arguments to use with 'lit', and an option for the user to; # override.; set(LIT_ARGS_DEFAULT ""-sv""); if ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:28344,test,tests,28344,interpreter/llvm-project/llvm/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt,1,['test'],['tests']
Testability,"es has been spilled to the; stack, and a record of that location has been recorded to the; :ref:`Stack Map section <stackmap-section>`. If the garbage collector; needs to update any of these pointers during the call, it knows; exactly what to change. The relevant parts of the StackMap section for our example are:. .. code-block:: gas. # This describes the call site; # Stack Maps: callsite 2882400000; 	 .quad	2882400000; 	 .long	.Ltmp1-test1; 	 .short	0; # .. 8 entries skipped ..; # This entry describes the spill slot which is directly addressable; # off RSP with offset 0. Given the value was spilled with a pushq,; # that makes sense.; # Stack Maps: Loc 8: Direct RSP [encoding: .byte 2, .byte 8, .short 7, .int 0]; 	 .byte	2; 	 .byte	8; 	 .short	7; 	 .long	0. This example was taken from the tests for the :ref:`RewriteStatepointsForGC`; utility pass. As such, its full StackMap can be easily examined with the; following command. .. code-block:: bash. opt -rewrite-statepoints-for-gc test/Transforms/RewriteStatepointsForGC/basics.ll -S | llc -debug-only=stackmaps. Simplifications for Non-Relocating GCs; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Some of the complexity in the previous example is unnecessary for a; non-relocating collector. While a non-relocating collector still needs the; information about which location contain live references, it doesn't need to; represent explicit relocations. As such, the previously described explicit; lowering can be simplified to remove all of the ``gc.relocate`` intrinsic; calls and leave uses in terms of the original reference value. Here's the explicit lowering for the previous example for a non-relocating; collector:. .. code-block:: llvm. define i8 addrspace(1)* @test1(i8 addrspace(1)* %obj); gc ""statepoint-example"" {; call token (i64, i32, void ()*, i32, i32, ...)* @llvm.experimental.gc.statepoint.p0f_isVoidf(i64 0, i32 0, void ()* @foo, i32 0, i32 0, i32 0, i32 0, i8 addrspace(1)* %obj); ret i8 addrspace(1)* %obj; }. Recording On",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Statepoints.rst:11353,test,test,11353,interpreter/llvm-project/llvm/docs/Statepoints.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Statepoints.rst,1,['test'],['test']
Testability,"es not. These constraints also allow LLVM to assume that a ``swifterror`` argument; does not alias any other memory visible within a function and that a; ``swifterror`` alloca passed as an argument does not escape. ``immarg``; This indicates the parameter is required to be an immediate; value. This must be a trivial immediate integer or floating-point; constant. Undef or constant expressions are not valid. This is; only valid on intrinsic declarations and cannot be applied to a; call site or arbitrary function. ``noundef``; This attribute applies to parameters and return values. If the value; representation contains any undefined or poison bits, the behavior is; undefined. Note that this does not refer to padding introduced by the; type's storage representation. .. _nofpclass:. ``nofpclass(<test mask>)``; This attribute applies to parameters and return values with; floating-point and vector of floating-point types, as well as; arrays of such types. The test mask has the same format as the; second argument to the :ref:`llvm.is.fpclass <llvm.is.fpclass>`,; and indicates which classes of floating-point values are not; permitted for the value. For example a bitmask of 3 indicates; the parameter may not be a NaN. If the value is a floating-point class indicated by the; ``nofpclass`` test mask, a :ref:`poison value <poisonvalues>` is; passed or returned instead. .. code-block:: text; :caption: The following invariants hold. @llvm.is.fpclass(nofpclass(test_mask) %x, test_mask) => false; @llvm.is.fpclass(nofpclass(test_mask) %x, ~test_mask) => true; nofpclass(all) => poison; .. In textual IR, various string names are supported for readability; and can be combined. For example ``nofpclass(nan pinf nzero)``; evaluates to a mask of 547. This does not depend on the floating-point environment. For; example, a function parameter marked ``nofpclass(zero)`` indicates; no zero inputs. If this is applied to an argument in a function; marked with :ref:`\""denormal-fp-math\"" <denormal_fp",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:65038,test,test,65038,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"es the LHS to be a variable. It; is invalid to have ""(x+1) = expr"" - only things like ""x = expr"" are; allowed. .. code-block:: c++. // Codegen the RHS.; Value *Val = RHS->codegen();; if (!Val); return nullptr;. // Look up the name.; Value *Variable = NamedValues[LHSE->getName()];; if (!Variable); return LogErrorV(""Unknown variable name"");. Builder->CreateStore(Val, Variable);; return Val;; }; ... Once we have the variable, codegen'ing the assignment is; straightforward: we emit the RHS of the assignment, create a store, and; return the computed value. Returning a value allows for chained; assignments like ""X = (Y = Z)"". Now that we have an assignment operator, we can mutate loop variables; and arguments. For example, we can now run code like this:. ::. # Function to print a double.; extern printd(x);. # Define ':' for sequencing: as a low-precedence operator that ignores operands; # and just returns the RHS.; def binary : 1 (x y) y;. def test(x); printd(x) :; x = 4 :; printd(x);. test(123);. When run, this example prints ""123"" and then ""4"", showing that we did; actually mutate the value! Okay, we have now officially implemented our; goal: getting this to work requires SSA construction in the general; case. However, to be really useful, we want the ability to define our; own local variables, let's add this next!. User-defined Local Variables; ============================. Adding var/in is just like any other extension we made to; Kaleidoscope: we extend the lexer, the parser, the AST and the code; generator. The first step for adding our new 'var/in' construct is to; extend the lexer. As before, this is pretty trivial, the code looks like; this:. .. code-block:: c++. enum Token {; ...; // var definition; tok_var = -13; ...; }; ...; static int gettok() {; ...; if (IdentifierStr == ""in""); return tok_in;; if (IdentifierStr == ""binary""); return tok_binary;; if (IdentifierStr == ""unary""); return tok_unary;; if (IdentifierStr == ""var""); return tok_var;; return tok_identifi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl07.rst:22516,test,test,22516,interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl07.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl07.rst,1,['test'],['test']
Testability,"es the partial results into the final; set of results.; The determination of the sub-mergers is always done dynamically, based; on the recent performance of workers. An optimal (i.e. giving the; highest speed-up) number can be calculated analytically under simple; assumptions.; Merging via submergers is by default disabled. To enable it, with the; optimal number of sub-mergers, one should set the integer parameter; 'PROOF_UseMergers' to 0, i.e.                     ; proof->SetParameter(""PROOF_UseMergers"", 0). To force S sub-mergers (regardless of the optimal number) do.                     ; proof->SetParameter(""PROOF_UseMergers"", S). The new functionality can be tested in tutorials by adding the argument; 'submergers' to runProof, e.g. .        ;        ;      root [0] .L; tutorials/proof/runProof.C+ ;        ;        ;      root [1]; runProof(""simple(nhist=10000,submergers)"") . (see the top of tutorials/proof/runProof.C for additional options). A test for the submerger functionality has also been added to; test/stressProof.cxx .; In PROOF-Lite, add the possibility for the administrator; to control the number of workers. This is done using; the rootrc variable ProofLite.MaxWorkers, which is read out of; /etc/system.rootrc and cannot be overwritten by users. Setting the; value to 0 disables PROOF-Lite. Improvements. TFileMerger. A few improvements on the way to make TFileMerger and; hadd totally equivalent:. import from hadd an optimization of key hashing; import from hadd a better way to invoke Merge for; generic objects; add option to merge histograms in one go, instead of; one-by-one as for generic objects (this option is not yet supported by; hadd). TProofOutputFile. Add support for the placeholder <file>; the definition of the outputfile. This allows to have complete URL and; to pass options to TFile::Open. XrdProofd plugin. Add automatically the line 'Path.ForceRemote 1' to the; session rootrc file if the ROOT version is < 5.24/00 ; this acts; as a workaround f",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:3170,test,test,3170,proof/doc/v526/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html,2,['test'],['test']
Testability,"es via the directive 'xpd.datasetsrc'.; In this way the permissions; should be set correctly and the related problems disappear.; Record the logs from the ROOT version validation tests; (proofserv forked in test mode). In case of failure - or if the debug; flag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the '/' replaced by '-'). This should; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF sessions in valgrind. The second; argument of TProof::Open is used to trigger the relevant; settings. To valgrind the master session start PROOF; with TProof::Open(""<master>"",""valgrind=master"");; to valgrind two workers sessions use; TProof::Open(""<master>"",""valgrind=workers""); to valgrind; master and 2 workers, use; TProof::Open(""<master>"",""valgrind=master+workers""). Other; combinations are available. ; The valgrind logs are available with the tag; '<ordinal>-valgrind' in the log dialog or form; TProofMgr::GetSessionLogs() .; To add options to valgrind execute; TProof::AddEnvVar(""PROOF_WRAPPERCMD"",; ""valgrind_opts:<options>"") before starting the; session. ; Add new static TProof::LogViewer(""<master>""); to graphically browse the session logs independently of the progress; dialog. The improved log window allows to chose a different master; and/or session  and displays human readable information about; the starting time of the session being browsed.; A set of scripts for quick interaction with a dataset; manager via PROOF are available under $ROOTSYS/etc/proof/utils/pq2 .; The scripts are prefixed; pq2 (proof; quick query - or; proof-dq2); and allow to {browse, register, remove, verify} datasets on a given; PROOF master. See $ROOTSYS/etc/proof/utils/pq2/README for more; information. Improvements. Enable by default schema evolution in TMessage; can be; disabled setting 'Proof.SchemaEvolution:; 0' .; Extend the functionality of the dataset API to o",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:4119,log,logs,4119,proof/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html,2,['log'],"['log', 'logs']"
Testability,"es. Some other ways to run debugify are available:. .. code-block:: bash. # Same as the above example.; $ opt -enable-debugify -pass-to-test sample.ll. # Suppresses verbose debugify output.; $ opt -enable-debugify -debugify-quiet -pass-to-test sample.ll. # Prepend -debugify before and append -check-debugify -strip after; # each pass on the pipeline (similar to -verify-each).; $ opt -debugify-each -O2 sample.ll. In order for ``check-debugify`` to work, the DI must be coming from; ``debugify``. Thus, modules with existing DI will be skipped. ``debugify`` can be used to test a backend, e.g:. .. code-block:: bash. $ opt -debugify < sample.ll | llc -o -. There is also a MIR-level debugify pass that can be run before each backend; pass, see:; :ref:`Mutation testing for MIR-level transformations<MIRDebugify>`. ``debugify`` in regression tests; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The output of the ``debugify`` pass must be stable enough to use in regression; tests. Changes to this pass are not allowed to break existing tests. .. note::. Regression tests must be robust. Avoid hardcoding line/variable numbers in; check lines. In cases where this can't be avoided (say, if a test wouldn't; be precise enough), moving the test to its own file is preferred. .. _MIRDebugify:. Test original debug info preservation in optimizations; ------------------------------------------------------. In addition to automatically generating debug info, the checks provided by; the ``debugify`` utility pass can also be used to test the preservation of; pre-existing debug info metadata. It could be run as follows:. .. code-block:: bash. # Run the pass by checking original Debug Info preservation.; $ opt -verify-debuginfo-preserve -pass-to-test sample.ll. # Check the preservation of original Debug Info after each pass.; $ opt -verify-each-debuginfo-preserve -O2 sample.ll. Limit number of observed functions to speed up the analysis:. .. code-block:: bash. # Test up to 100 functions (per compile unit) per",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst:13363,test,tests,13363,interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,1,['test'],['tests']
Testability,"es.; option(LLVM_INCLUDE_TOOLS ""Generate build targets for the LLVM tools."" ON); option(LLVM_BUILD_TOOLS; ""Build the LLVM tools. If OFF, just generate build targets."" ON). option(LLVM_INCLUDE_UTILS ""Generate build targets for the LLVM utils."" ON); option(LLVM_BUILD_UTILS; ""Build LLVM utility binaries. If OFF, just generate build targets."" ON). option(LLVM_INCLUDE_RUNTIMES ""Generate build targets for the LLVM runtimes."" ON); option(LLVM_BUILD_RUNTIMES; ""Build the LLVM runtimes. If OFF, just generate build targets."" ON). option(LLVM_BUILD_RUNTIME; ""Build the LLVM runtime libraries."" ON); option(LLVM_BUILD_EXAMPLES; ""Build the LLVM example programs. If OFF, just generate build targets."" OFF); option(LLVM_INCLUDE_EXAMPLES ""Generate build targets for the LLVM examples"" ON). if(LLVM_BUILD_EXAMPLES); add_compile_definitions(BUILD_EXAMPLES); endif(LLVM_BUILD_EXAMPLES). option(LLVM_BUILD_TESTS; ""Build LLVM unit tests. If OFF, just generate build targets."" OFF); option(LLVM_INCLUDE_TESTS ""Generate build targets for the LLVM unit tests."" ON). option(LLVM_INSTALL_GTEST; ""Install the llvm gtest library. This should be on if you want to do; stand-alone builds of the other projects and run their unit tests."" OFF). option(LLVM_BUILD_BENCHMARKS ""Add LLVM benchmark targets to the list of default; targets. If OFF, benchmarks still could be built using Benchmarks target."" OFF); option(LLVM_INCLUDE_BENCHMARKS ""Generate benchmark targets. If OFF, benchmarks can't be built."" ON). option (LLVM_BUILD_DOCS ""Build the llvm documentation."" OFF); option (LLVM_INCLUDE_DOCS ""Generate build targets for llvm documentation."" ON); option (LLVM_ENABLE_DOXYGEN ""Use doxygen to generate llvm API documentation."" OFF); option (LLVM_ENABLE_SPHINX ""Use Sphinx to generate llvm documentation."" OFF); option (LLVM_ENABLE_OCAMLDOC ""Build OCaml bindings documentation."" ON); option (LLVM_ENABLE_BINDINGS ""Build bindings."" ON). set(LLVM_INSTALL_DOXYGEN_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/doxygen-html""; CACHE STRIN",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:31783,test,tests,31783,interpreter/llvm-project/llvm/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt,1,['test'],['tests']
Testability,es/64347>`_); - Fix crash when using C++ only tokens like ``::`` in C compiler clang.; Fixes (`#73559 <https://github.com/llvm/llvm-project/issues/73559>`_); - Clang now accepts recursive non-dependent calls to functions with deduced; return type.; Fixes (`#71015 <https://github.com/llvm/llvm-project/issues/71015>`_); - Fix assertion failure when initializing union containing struct with; flexible array member using empty initializer list.; Fixes (`#77085 <https://github.com/llvm/llvm-project/issues/77085>`_); - Fix assertion crash due to failed scope restoring caused by too-early VarDecl; invalidation by invalid initializer Expr.; Fixes (`#30908 <https://github.com/llvm/llvm-project/issues/30908>`_); - Clang now emits correct source location for code-coverage regions in `if constexpr`; and `if consteval` branches. Untaken branches are now skipped.; Fixes (`#54419 <https://github.com/llvm/llvm-project/issues/54419>`_); - Fix assertion failure when declaring a template friend function with; a constrained parameter in a template class that declares a class method; or lambda at different depth.; Fixes (`#75426 <https://github.com/llvm/llvm-project/issues/75426>`_); - Fix an issue where clang cannot find conversion function with template; parameter when instantiation of template class.; Fixes (`#77583 <https://github.com/llvm/llvm-project/issues/77583>`_); - Fix an issue where CTAD fails for function-type/array-type arguments.; Fixes (`#51710 <https://github.com/llvm/llvm-project/issues/51710>`_); - Fix crashes when using the binding decl from an invalid structured binding.; Fixes (`#67495 <https://github.com/llvm/llvm-project/issues/67495>`_) and; (`#72198 <https://github.com/llvm/llvm-project/issues/72198>`_); - Fix assertion failure when call noreturn-attribute function with musttail; attribute.; Fixes (`#76631 <https://github.com/llvm/llvm-project/issues/76631>`_); - The MS ``__noop`` builtin without an argument list is now accepted; in the placement-args of new-expr,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst:43952,assert,assertion,43952,interpreter/llvm-project/clang/docs/ReleaseNotes.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst,1,['assert'],['assertion']
Testability,es/DataflowAnalysis.cpp; bolt/lib/Passes/DataflowInfoManager.cpp; bolt/lib/Passes/HFSort.cpp; bolt/lib/Passes/IndirectCallPromotion.cpp; bolt/lib/Passes/Instrumentation.cpp; bolt/lib/Passes/JTFootprintReduction.cpp; bolt/lib/Passes/LivenessAnalysis.cpp; bolt/lib/Passes/LoopInversionPass.cpp; bolt/lib/Passes/PettisAndHansen.cpp; bolt/lib/Passes/StackAllocationAnalysis.cpp; bolt/lib/Passes/StackPointerTracking.cpp; bolt/lib/Passes/StackReachingUses.cpp; bolt/lib/Passes/TailDuplication.cpp; bolt/lib/Passes/ThreeWayBranch.cpp; bolt/lib/Passes/ValidateInternalCalls.cpp; bolt/lib/Profile/BoltAddressTranslation.cpp; bolt/lib/Profile/Heatmap.cpp; bolt/lib/Profile/ProfileReaderBase.cpp; bolt/lib/RuntimeLibs/HugifyRuntimeLibrary.cpp; bolt/lib/RuntimeLibs/InstrumentationRuntimeLibrary.cpp; bolt/lib/RuntimeLibs/RuntimeLibrary.cpp; bolt/lib/Utils/Utils.cpp; bolt/tools/heatmap/heatmap.cpp; bolt/tools/llvm-bolt-fuzzer/llvm-bolt-fuzzer.cpp; bolt/unittests/Core/MCPlusBuilder.cpp; clang/bindings/python/tests/cindex/INPUTS/header1.h; clang/bindings/python/tests/cindex/INPUTS/header2.h; clang/bindings/python/tests/cindex/INPUTS/header3.h; clang/examples/Attribute/Attribute.cpp; clang/examples/CallSuperAttribute/CallSuperAttrInfo.cpp; clang/examples/PluginsOrder/PluginsOrder.cpp; clang/include/clang/Analysis/BodyFarm.h; clang/include/clang/Analysis/IssueHash.h; clang/include/clang/Analysis/MacroExpansionContext.h; clang/include/clang/Analysis/Analyses/CalledOnceCheck.h; clang/include/clang/Analysis/Analyses/CFGReachabilityAnalysis.h; clang/include/clang/Analysis/Analyses/ExprMutationAnalyzer.h; clang/include/clang/Analysis/FlowSensitive/ControlFlowContext.h; clang/include/clang/Analysis/FlowSensitive/DataflowAnalysis.h; clang/include/clang/Analysis/FlowSensitive/DataflowAnalysisContext.h; clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h; clang/include/clang/Analysis/FlowSensitive/DataflowLattice.h; clang/include/clang/Analysis/FlowSensitive/DataflowWorklist.h; clang/inclu,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:4696,test,tests,4696,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,es/IndirectCallPromotion.cpp; bolt/lib/Passes/Instrumentation.cpp; bolt/lib/Passes/JTFootprintReduction.cpp; bolt/lib/Passes/LivenessAnalysis.cpp; bolt/lib/Passes/LoopInversionPass.cpp; bolt/lib/Passes/PettisAndHansen.cpp; bolt/lib/Passes/StackAllocationAnalysis.cpp; bolt/lib/Passes/StackPointerTracking.cpp; bolt/lib/Passes/StackReachingUses.cpp; bolt/lib/Passes/TailDuplication.cpp; bolt/lib/Passes/ThreeWayBranch.cpp; bolt/lib/Passes/ValidateInternalCalls.cpp; bolt/lib/Profile/BoltAddressTranslation.cpp; bolt/lib/Profile/Heatmap.cpp; bolt/lib/Profile/ProfileReaderBase.cpp; bolt/lib/RuntimeLibs/HugifyRuntimeLibrary.cpp; bolt/lib/RuntimeLibs/InstrumentationRuntimeLibrary.cpp; bolt/lib/RuntimeLibs/RuntimeLibrary.cpp; bolt/lib/Utils/Utils.cpp; bolt/tools/heatmap/heatmap.cpp; bolt/tools/llvm-bolt-fuzzer/llvm-bolt-fuzzer.cpp; bolt/unittests/Core/MCPlusBuilder.cpp; clang/bindings/python/tests/cindex/INPUTS/header1.h; clang/bindings/python/tests/cindex/INPUTS/header2.h; clang/bindings/python/tests/cindex/INPUTS/header3.h; clang/examples/Attribute/Attribute.cpp; clang/examples/CallSuperAttribute/CallSuperAttrInfo.cpp; clang/examples/PluginsOrder/PluginsOrder.cpp; clang/include/clang/Analysis/BodyFarm.h; clang/include/clang/Analysis/IssueHash.h; clang/include/clang/Analysis/MacroExpansionContext.h; clang/include/clang/Analysis/Analyses/CalledOnceCheck.h; clang/include/clang/Analysis/Analyses/CFGReachabilityAnalysis.h; clang/include/clang/Analysis/Analyses/ExprMutationAnalyzer.h; clang/include/clang/Analysis/FlowSensitive/ControlFlowContext.h; clang/include/clang/Analysis/FlowSensitive/DataflowAnalysis.h; clang/include/clang/Analysis/FlowSensitive/DataflowAnalysisContext.h; clang/include/clang/Analysis/FlowSensitive/DataflowEnvironment.h; clang/include/clang/Analysis/FlowSensitive/DataflowLattice.h; clang/include/clang/Analysis/FlowSensitive/DataflowWorklist.h; clang/include/clang/Analysis/FlowSensitive/DebugSupport.h; clang/include/clang/Analysis/FlowSensitive/MapLattice.h; cl,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:4802,test,tests,4802,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"ese options allow you to choose the; interpreter, the JIT compiler, the static native code compiler, or a; custom command (see **--exec-command**) respectively. **--safe-{llc,custom}**. When debugging a code generator, **bugpoint** should use the specified code; generator as the ""safe"" code generator. This is a known-good code generator; used to generate the ""reference output"" if it has not been provided, and to; compile portions of the program that as they are excluded from the testcase.; These options allow you to choose the; static native code compiler, or a custom command, (see **--exec-command**); respectively. The interpreter and the JIT backends cannot currently; be used as the ""safe"" backends. **--exec-command** *command*. This option defines the command to use with the **--run-custom** and; **--safe-custom** options to execute the bitcode testcase. This can; be useful for cross-compilation. **--compile-command** *command*. This option defines the command to use with the **--compile-custom**; option to compile the bitcode testcase. The command should exit with a; failure exit code if the file is ""interesting"" and should exit with a; success exit code (i.e. 0) otherwise (this is the same as if it crashed on; ""interesting"" inputs). This can be useful for; testing compiler output without running any link or execute stages. To; generate a reduced unit test, you may add CHECK directives to the; testcase and pass the name of an executable compile-command script in this form:. .. code-block:: sh. #!/bin/sh; llc ""$@""; not FileCheck [bugpoint input file].ll < bugpoint-test-program.s. This script will ""fail"" as long as FileCheck passes. So the result; will be the minimum bitcode that passes FileCheck. **--safe-path** *path*. This option defines the path to the command to execute with the; **--safe-{int,jit,llc,custom}**; option. **--verbose-errors**\ =\ *{true,false}*. The default behavior of bugpoint is to print ""<crash>"" when it finds a reduced; test that crashes co",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst:5344,test,testcase,5344,interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst,1,['test'],['testcase']
Testability,"eserved | ``7`` | Unused. |; +---------------+--------------+-----------------------------------------------+. CallArgument Records; --------------------. Immediately following an Entry_Args type function record, there may be one or; more CallArgument records that contain the traced function's parameter values. The order of the CallArgument Record sequency corresponds one to one with the; order of the function parameters. CallArgument data segment:. +---------------+--------------+-----------------------------------------------+; | Field | Size (bytes) | Description |; +===============+==============+===============================================+; | argument | ``8`` | Numeric argument (may be pointer address). |; +---------------+--------------+-----------------------------------------------+; | reserved | ``7`` | Unused. |; +---------------+--------------+-----------------------------------------------+. CustomEventMarker Records; -------------------------. XRay provides the feature of logging custom events. This may be leveraged to; record tracing info for RPCs or similarly trace data that is application; specific. Custom Events themselves are an unstructured (application defined) segment of; memory with arbitrary size within the buffer. They are preceded by; CustomEventMarkers to indicate their presence and size. CustomEventMarker data segment:. +---------------+--------------+-----------------------------------------------+; | Field | Size (bytes) | Description |; +===============+==============+===============================================+; | event_size | ``4`` | Size of preceded event. |; +---------------+--------------+-----------------------------------------------+; | absolute_tsc | ``8`` | A timestamp counter of the event. |; +---------------+--------------+-----------------------------------------------+; | reserved | ``3`` | Unused. |; +---------------+--------------+-----------------------------------------------+. EndOfBuffer Records; ------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRayFDRFormat.rst:14240,log,logging,14240,interpreter/llvm-project/llvm/docs/XRayFDRFormat.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRayFDRFormat.rst,1,['log'],['logging']
Testability,"esign Document; ==============================================. .. contents::; :local:. Objective; =========. This document provides an overview of an external tool to verify the protection; mechanisms implemented by Clang's *Control Flow Integrity* (CFI) schemes; (``-fsanitize=cfi``). This tool, provided a binary or DSO, should infer whether; indirect control flow operations are protected by CFI, and should output these; results in a human-readable form. This tool should also be added as part of Clang's continuous integration testing; framework, where modifications to the compiler ensure that CFI protection; schemes are still present in the final binary. Location; ========. This tool will be present as a part of the LLVM toolchain, and will reside in; the ""/llvm/tools/llvm-cfi-verify"" directory, relative to the LLVM trunk. It will; be tested in two methods:. - Unit tests to validate code sections, present in; ""/llvm/unittests/tools/llvm-cfi-verify"".; - Integration tests, present in ""/llvm/tools/clang/test/LLVMCFIVerify"". These; integration tests are part of clang as part of a continuous integration; framework, ensuring updates to the compiler that reduce CFI coverage on; indirect control flow instructions are identified. Background; ==========. This tool will continuously validate that CFI directives are properly; implemented around all indirect control flows by analysing the output machine; code. The analysis of machine code is important as it ensures that any bugs; present in linker or compiler do not subvert CFI protections in the final; shipped binary. Unprotected indirect control flow instructions will be flagged for manual; review. These unexpected control flows may simply have not been accounted for in; the compiler implementation of CFI (e.g. indirect jumps to facilitate switch; statements may not be fully protected). It may be possible in the future to extend this tool to flag unnecessary CFI; directives (e.g. CFI directives around a static call to a non-po",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CFIVerify.rst:1060,test,tests,1060,interpreter/llvm-project/llvm/docs/CFIVerify.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CFIVerify.rst,2,['test'],"['test', 'tests']"
Testability,"esn't have a lot of parameters. > In such cases, Numeric Differentiation fallback is only used for that; specific function. In above example, `gamma_cdf()` falls back to Numeric; Differentiation but other functions in `MathFuncs.h` will still be; able to use AD. This is because Clad is going to assume that you have a; derivative for this `gamma_cdf()` function, and the remaining functions will; use AD as expected. In the end, the remaining functions (including; `gamma_cdf()`) will try to fall back to Numeric Differentiation. However, if you want to add pure AD support, you need to make sure that all; your external functions are supported by Clad (meaning there is a custom; derivative defined for each of them). ### How do I test my new class while adding AD support?. Please look at the test classes that test the derivatives, evaluates,; fixtures, etc. (defined in 'roofit/roofitcore/test'). You can clone and adapt; these tests to your class as needed. For example:. > [roofit/roofitcore/test/testRooFuncWrapper.cxx](https://github.com/root-project/root/blob/master/roofit/roofitcore/test/testRooFuncWrapper.cxx). > Tip: Tests like above can be referenced to see which parts of RooFit already; support AD. ### How do I control my compile time?. This is an area of research that still needs some work. In most cases, the; compile times are reasonable, but with an increase in the level of complexity,; higher compile times may be encountered. ## Appendix B - Where does AD Logic Implementation reside?. Following classes provide several Helper Functions to translate existing logic; into AD-supported logic. a - RooFit::Detail::CodeSquashContext. b - RooFuncWrapper. ### a. RooFit::Detail::CodeSquashContext. > [roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h](https://github.com/root-project/root/blob/master/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h). It handles how to create a C++ function out of the compute graph (which is; created with different RooFit classes)",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/roofit_ad.md:29163,test,test,29163,roofit/doc/developers/roofit_ad.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/roofit_ad.md,2,['test'],"['test', 'testRooFuncWrapper']"
Testability,"ess you want CPT to fail mid-way with wierd; errors. You should require these instructions only once. * While installing the packages make sure the executable is in a path that; doesn't contain spaces. For example, you should install Python in a path like. ```sh; C:\Python27; ```; rather than. ```sh; C:\Program Files (x86)\Python 2.7; ```; * Path to all the required executables should be present in the Windows; **PATH** environment variable.; * In case of MSYS Git, choose the option ""Run Git from Windows; Command Prompt"" during installation. A good way to check if everything is detected properly by the script is to; run the following command:; ```sh; cd tools/packaging/; ./cpt.py --check-requirements; ```. #### Red Hat Linux (Fedora/Scientific Linux CERN); This section applies to all distros based on Red Hat Linux like Fedora, and; Scientific Linux CERN (SLC). Apparently, you can build RPM packages in any; distro regardless of the package manager it uses. This has been tested on; Fedora, SLC, Ubuntu, and CrunchBang. If you are interested, you can test it; on your favourite platform and email me the results. Depending on the package manager of your distro, you can install the; packages required by CPT to build RPM bundles. For a Red Hat based distro; (which uses ```yum``` package manager), you can use the following command; (also performed automatically by CPT):; ```sh; sudo yum update; sudo yum install git gcc gcc-c++ rpm-build python; ```. #### Mac OS X; Mac OS X provides a sane environement for CPT to build Apple Disk Images; (DMG Installers). On older versions of Mac OS, you need to update XCode to; get the latest version of Clang supporting c++11 features. A great package; manager for Mac OS X is [Macports]. It is recommended that you use the; packages provided by Macports for running CPT (or any other tool if that; is the case) rather than the ones which come pre-installed with Mac OS.; Assuming that you have Macports installed on your Mac, you can use the; fol",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/README.md:5043,test,tested,5043,interpreter/cling/tools/packaging/README.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/README.md,1,['test'],['tested']
Testability,"essArg; (C); The second operand of a && operator has no impact on; expression result. void test(unsigned a) {; if (a<7 && a<10) {}; // warn; }. different.SameResLogicalExpr; (C); An expression is always evaluated to true/false. void test() {; int i = 0;; if (i != 0) {}; // warn; }. void test(int i) {; if (i == 0 && i == 1) {}; // warn; }. void test(int i) {; if (i < 0 || i >= 0) {}; // warn; }. different.OpPrecedenceAssignCmp; (C, C++); Comparison operation has higher precedence then assignment. Boolean value is; assigned to a variable of other type. Parenthesis may bee required around an; assignment. int f();. void test(int x, int y) {; bool b;; if((b = x != y)) {} // ok; if((x = f() != y)) {} // warn; }. different.OpPrecedenceIifShift; (C, C++); ?: has lower precedence then <<.; Source: Stephen C. Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception();; // warn (did you mean 'throw std::exception()'?); }. different.StaticArrayPtrCompare; (C); Pointer to static array is being compared to NULL. May the subscripting is; missing. void test() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C++); Odd implicit conversion to boolean.; Note: possibly merge with ; alpha.core.BoolAssignment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; No",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:23358,test,test,23358,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"est program, whenever; it runs, to come from that file. **--load** *plugin*. Load the dynamic object *plugin* into **bugpoint** itself. This object should; register new optimization passes. Once loaded, the object will add new command; line options to enable various optimizations. To see the new complete list of; optimizations, use the **-help** and **--load** options together; for example:. .. code-block:: bash. bugpoint --load myNewPass.so -help. **--mlimit** *megabytes*. Specifies an upper limit on memory usage of the optimization and codegen. Set; to zero to disable the limit. **--output** *filename*. Whenever the test program produces output on its standard output stream, it; should match the contents of *filename* (the ""reference output""). If you; do not use this option, **bugpoint** will attempt to generate a reference output; by compiling the program with the ""safe"" backend and running it. **--run-{int,jit,llc,custom}**. Whenever the test program is compiled, **bugpoint** should generate code for it; using the specified code generator. These options allow you to choose the; interpreter, the JIT compiler, the static native code compiler, or a; custom command (see **--exec-command**) respectively. **--safe-{llc,custom}**. When debugging a code generator, **bugpoint** should use the specified code; generator as the ""safe"" code generator. This is a known-good code generator; used to generate the ""reference output"" if it has not been provided, and to; compile portions of the program that as they are excluded from the testcase.; These options allow you to choose the; static native code compiler, or a custom command, (see **--exec-command**); respectively. The interpreter and the JIT backends cannot currently; be used as the ""safe"" backends. **--exec-command** *command*. This option defines the command to use with the **--run-custom** and; **--safe-custom** options to execute the bitcode testcase. This can; be useful for cross-compilation. **--compile-command** *com",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst:4192,test,test,4192,interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst,1,['test'],['test']
Testability,"est whether a feature is supported or not.; Some of these feature tests are standardized, like ``__has_cpp_attribute`` or; ``__cpp_lambdas``, while others are Clang extensions, like ``__has_builtin``.; The common theme among all the various feature tests is that they are a utility; to tell users that we think a particular feature is complete. However,; completeness is a difficult property to define because features may still have; lingering bugs, may only work on some targets, etc. We use the following; criteria when deciding whether to expose a feature test macro (or particular; result value for the feature test):. * Are there known issues where we reject valid code that should be accepted?; * Are there known issues where we accept invalid code that should be rejected?; * Are there known crashes, failed assertions, or miscompilations?; * Are there known issues on a particular relevant target?. If the answer to any of these is ""yes"", the feature test macro should either; not be defined or there should be very strong rationale for why the issues; should not prevent defining it. Note, it is acceptable to define the feature; test macro on a per-target basis if needed. When in doubt, being conservative is better than being aggressive. If we don't; claim support for the feature but it does useful things, users can still use it; and provide us with useful feedback on what is missing. But if we claim support; for a feature that has significant bugs, we've eliminated most of the utility; of having a feature testing macro at all because users are then forced to test; what compiler version is in use to get a more accurate answer. The status reported by the feature test macro should always be reflected in the; language support page for the corresponding feature (`C++; <https://clang.llvm.org/cxx_status.html>`_, `C; <https://clang.llvm.org/c_status.html>`_) if applicable. This page can give; more nuanced information to the user as well, such as claiming partial support; for a f",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:163676,test,test,163676,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,1,['test'],['test']
Testability,"est-stressshapes COMMAND stressShapes -b FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressshapes-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressShapes.cxx; FAILREGEX ""FAILED|Error in""). #--stressGeometry------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressGeometry stressGeometry.cxx LIBRARIES Geom Tree GenVector Gpad); ROOT_ADD_TEST(test-stressgeometry COMMAND stressGeometry -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressgeometry-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressGeometry.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressgeometry LABELS longtest); endif(). #--stressLinear------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressLinear stressLinear.cxx LIBRARIES Matrix Hist RIO); ROOT_ADD_TEST(test-stresslinear COMMAND stressLinear FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stresslinear-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressLinear.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresslinear LABELS longtest). #--stressGraphics------------------------------------------------------------------------------------; if(ROOT_opengl_FOUND); ROOT_EXECUTABLE(stressGraphics stressGraphics.cxx LIBRARIES Graf Gpad Postscript); if(MSVC); set_property(TARGET stressGraphics APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); # with ZLIB-CF(builtin_zlib) we have better compression ratio.; if(ZLIB_CF); configure_file(stressGraphics_builtinzlib.ref stressGraphics_builtinzlib.ref COPYONLY); else(); configure_file(stressGraphics.ref stressGraphics.ref COPYONLY); endif(); configure_file(stressGraphics_web.ref stressGraphics_web.ref COPYONLY); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/../tutorials/graphics/earth.dat earth.dat COPYONLY); ROOT_ADD_TEST(test-stressgraphics; ENVIRONMENT LD_LIBRARY_PATH=${CMA",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:7445,test,test-stresslinear,7445,test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt,2,['test'],"['test-stresslinear', 'test-stresslinear-interpreted']"
Testability,est.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Common/default-kinds.h; flang/include/flang/Common/enum-set.h; flang/include/flang/Common/fast-int-set.h; flang/include/flang,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107670,test,tests,107670,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,2,['test'],['tests']
Testability,"est.elf 0x400490"" ""DATA BUILDID:123456789abcdef 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr3.txt; FILE:test.elf 0x400490; DATA BUILDID:123456789abcdef 0x601028. $ llvm-symbolizer < addr3.txt; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. Example 5 - CODE and DATA prefixes:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf ""CODE 0x400490"" ""DATA 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr4.txt; CODE test.elf 0x4004a0; DATA inlined.elf 0x601028. $ llvm-symbolizer < addr4.txt; main; /tmp/test.cpp:15:0. bar; 6295592 4. Example 6 - path-style options:. This example uses the same source file as above, but the source file's; full path is /tmp/foo/test.cpp and is compiled as follows. The first case; shows the default absolute path, the second --basenames, and the third; shows --relativenames. .. code-block:: console. $ pwd; /tmp; $ clang -g foo/test.cpp -o test.elf; $ llvm-symbolizer --obj=test.elf 0x4004a0; main; /tmp/foo/test.cpp:15:0; $ llvm-symbolizer --obj=test.elf 0x4004a0 --basenames; main; test.cpp:15:0; $ llvm-symbolizer --obj=test.elf 0x4004a0 --relativenames; main; foo/test.cpp:15:0. Example 7 - Addresses as symbol names:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf main; main; /tmp/test.cpp:14:0; $ llvm-symbolizer --obj=test.elf ""CODE foz""; foz; /tmp/test.h:1:0. OPTIONS; -------. .. option:: --adjust-vma <offset>. Add the specified offset to object file addresses when performing lookups.; This can be used to perform lookups as if the object were relocated by the; offset. .. option:: --basenames, -s. Print just the file's name without any directories, instead of the; absolute path. .. option:: --build-id. Look up the object using the given build ID, specified as a hexadecimal; string. Mutually exclusive with :option:`--obj`. .. option:: --color [=<always|auto|never>]. Specify whether to use color in :option:`--filter-markup` mode. Defaults to; ``auto``, which detects whether standard output supports colo",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:4433,test,test,4433,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"est/lit.site.cfg.py`` in the build directory.; The ``llvm/test`` Makefile does this work for you. In order for the regression tests to work, each directory of tests must; have a ``lit.local.cfg`` file. :program:`lit` looks for this file to determine; how to run the tests. This file is just Python code and thus is very; flexible, but we've standardized it for the LLVM regression tests. If; you're adding a directory of tests, just copy ``lit.local.cfg`` from; another directory to get running. The standard ``lit.local.cfg`` simply; specifies which files to look in for tests. Any directory that contains; only directories does not need the ``lit.local.cfg`` file. Read the :doc:`Lit; documentation <CommandGuide/lit>` for more information. Each test file must contain lines starting with ""RUN:"" that tell :program:`lit`; how to run it. If there are no RUN lines, :program:`lit` will issue an error; while running a test. RUN lines are specified in the comments of the test program using the; keyword ``RUN`` followed by a colon, and lastly the command (pipeline); to execute. Together, these lines form the ""script"" that :program:`lit`; executes to run the test case. The syntax of the RUN lines is similar to a; shell's syntax for pipelines including I/O redirection and variable; substitution. However, even though these lines may *look* like a shell; script, they are not. RUN lines are interpreted by :program:`lit`.; Consequently, the syntax differs from shell in a few ways. You can specify; as many RUN lines as needed. :program:`lit` performs substitution on each RUN line to replace LLVM tool names; with the full paths to the executable built for each tool (in; ``$(LLVM_OBJ_ROOT)/bin``). This ensures that :program:`lit` does; not invoke any stray LLVM tools in the user's path during testing. Each RUN line is executed on its own, distinct from other lines unless; its last character is ``\``. This continuation character causes the RUN; line to be concatenated with the next one. In th",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:8495,test,test,8495,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,est; - `1`; - `1`; - `0`; - :good:`100%`; * - clang/tools/arcmt-test; - `1`; - `0`; - `1`; - :none:`0%`; * - clang/tools/c-index-test; - `1`; - `0`; - `1`; - :none:`0%`; * - clang/tools/clang-check; - `1`; - `0`; - `1`; - :none:`0%`; * - clang/tools/clang-diff; - `1`; - `0`; - `1`; - :none:`0%`; * - clang/tools/clang-extdef-mapping; - `1`; - `0`; - `1`; - :none:`0%`; * - clang/tools/clang-format; - `1`; - `1`; - `0`; - :good:`100%`; * - clang/tools/clang-format/fuzzer; - `1`; - `0`; - `1`; - :none:`0%`; * - clang/tools/clang-fuzzer; - `6`; - `4`; - `2`; - :part:`66%`; * - clang/tools/clang-fuzzer/fuzzer-initialize; - `2`; - `0`; - `2`; - :none:`0%`; * - clang/tools/clang-fuzzer/handle-cxx; - `2`; - `0`; - `2`; - :none:`0%`; * - clang/tools/clang-fuzzer/handle-llvm; - `3`; - `1`; - `2`; - :part:`33%`; * - clang/tools/clang-fuzzer/proto-to-cxx; - `5`; - `0`; - `5`; - :none:`0%`; * - clang/tools/clang-fuzzer/proto-to-llvm; - `3`; - `0`; - `3`; - :none:`0%`; * - clang/tools/clang-import-test; - `1`; - `0`; - `1`; - :none:`0%`; * - clang/tools/clang-linker-wrapper; - `3`; - `2`; - `1`; - :part:`66%`; * - clang/tools/clang-nvlink-wrapper; - `1`; - `1`; - `0`; - :good:`100%`; * - clang/tools/clang-offload-bundler; - `1`; - `0`; - `1`; - :none:`0%`; * - clang/tools/clang-offload-wrapper; - `1`; - `1`; - `0`; - :good:`100%`; * - clang/tools/clang-pseudo; - `1`; - `1`; - `0`; - :good:`100%`; * - clang/tools/clang-refactor; - `4`; - `4`; - `0`; - :good:`100%`; * - clang/tools/clang-rename; - `1`; - `1`; - `0`; - :good:`100%`; * - clang/tools/clang-repl; - `1`; - `1`; - `0`; - :good:`100%`; * - clang/tools/clang-scan-deps; - `1`; - `1`; - `0`; - :good:`100%`; * - clang/tools/clang-shlib; - `1`; - `1`; - `0`; - :good:`100%`; * - clang/tools/diagtool; - `9`; - `0`; - `9`; - :none:`0%`; * - clang/tools/driver; - `4`; - `1`; - `3`; - :part:`25%`; * - clang/tools/libclang; - `35`; - `5`; - `30`; - :part:`14%`; * - clang/tools/scan-build-py/tests/functional/src/include; - `1`; - `1`; ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:11808,test,test,11808,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['test']
Testability,estBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Bla,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2890,test,testOptimizationCuda,2890,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,2,['test'],['testOptimizationCuda']
Testability,"estRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\inter",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2163,test,testRooRealVar,2163,roofit/roofitcore/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt,2,['test'],['testRooRealVar']
Testability,estRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Window,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1552,test,testRooProdPdf,1552,roofit/roofitcore/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt,2,['test'],['testRooProdPdf']
Testability,estRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikeliho,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4270,test,testRooSTLRefCountList,4270,roofit/roofitcore/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt,2,['test'],['testRooSTLRefCountList']
Testability,"estRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistic",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:2651,test,test,2651,roofit/roofitcore/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt,1,['test'],['test']
Testability,"estSuiteGuide` for details. Unit and Regression tests; -------------------------. To run all of the LLVM unit tests use the check-llvm-unit target:. .. code-block:: bash. % make check-llvm-unit. To run all of the LLVM regression tests use the check-llvm target:. .. code-block:: bash. % make check-llvm. In order to get reasonable testing performance, build LLVM and subprojects; in release mode, i.e. .. code-block:: bash. % cmake -DCMAKE_BUILD_TYPE=""Release"" -DLLVM_ENABLE_ASSERTIONS=On. If you have `Clang <https://clang.llvm.org/>`_ checked out and built, you; can run the LLVM and Clang tests simultaneously using:. .. code-block:: bash. % make check-all. To run the tests with Valgrind (Memcheck by default), use the ``LIT_ARGS`` make; variable to pass the required options to lit. For example, you can use:. .. code-block:: bash. % make check LIT_ARGS=""-v --vg --vg-leak"". to enable testing with valgrind and with leak checking enabled. To run individual tests or subsets of tests, you can use the ``llvm-lit``; script which is built as part of LLVM. For example, to run the; ``Integer/BitPacked.ll`` test by itself you can run:. .. code-block:: bash. % llvm-lit ~/llvm/test/Integer/BitPacked.ll. or to run all of the ARM CodeGen tests:. .. code-block:: bash. % llvm-lit ~/llvm/test/CodeGen/ARM. The regression tests will use the Python psutil module only if installed in a; **non-user** location. Under Linux, install with sudo or within a virtual; environment. Under Windows, install Python for all users and then run; ``pip install psutil`` in an elevated command prompt. For more information on using the :program:`lit` tool, see ``llvm-lit --help``; or the :doc:`lit man page <CommandGuide/lit>`. Debugging Information tests; ---------------------------. To run debugging information tests simply add the ``cross-project-tests``; project to your ``LLVM_ENABLE_PROJECTS`` define on the cmake; command-line. Regression test structure; =========================. The LLVM regression tests ar",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:5948,test,tests,5948,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,2,['test'],['tests']
Testability,"esting-ness test that’s going to be run to reduce the code is given; by name:; `--test=<test_name>`; If a `--test` option is not given, the program exits; this option is similar; to bugpoint’s current `-compile-custom` option, which lets the user run a; custom script. The interesting-ness test would be defined as a script that returns 0 when the; IR achieves a user-defined behaviour (e.g. failure to compile on clang) and a; nonzero value when otherwise. Leaving the user the freedom to determine what is; and isn’t interesting to the tool, and thus, streamlining the process of; reducing a test-case. If the test accepts any arguments (excluding the input ll/bc file), they are; given via the following flag:; `--test_args=<test_arguments>`; If unspecified, the test is run as given. It’s worth noting that the input file; would be passed as a parameter to the test, similar how `-compile-custom`; currently operates. ### Implementation; The tool would behave similar to CReduce’s functionality in that it would have a; list of passes that try to minimize the given test-case. We should be able to; modularize the tool’s behavior, as well as making it easier to maintain and; expand. The first version of this redesign would try to:. * Discard functions, instructions and metadata that don’t influence the; interesting-ness test; * Remove unused parameters from functions; * Eliminate unvisited conditional paths; * Rename variables to more regular ones (such as “a”, “b”, “c”, etc.). Once these passes are implemented, more meaningful reductions (such as type; reduction) would be added to the tool, to even further reduce IR. ## Background on historical bugpoint issues. ### Root Cause Analysis; Presently, bugpoint takes a long time to find the source problem in a given IR; file, mainly due to the fact that it tries to debug the input by running; various strategies to classify the bug, which in turn run multiple optimizer; and compilation passes over the input, taking up a lot of time. Fur",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/BugpointRedesign.md:2423,test,test-case,2423,interpreter/llvm-project/llvm/docs/BugpointRedesign.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/BugpointRedesign.md,1,['test'],['test-case']
Testability,"ests are located in two separate repositories. The unit and; regression tests are in the main ""llvm""/ directory under the directories; ``llvm/unittests`` and ``llvm/test`` (so you get these tests for free with the; main LLVM tree). Use ``make check-all`` to run the unit and regression tests; after building LLVM. The ``test-suite`` module contains more comprehensive tests including whole C; and C++ programs. See the :doc:`TestSuiteGuide` for details. Unit and Regression tests; -------------------------. To run all of the LLVM unit tests use the check-llvm-unit target:. .. code-block:: bash. % make check-llvm-unit. To run all of the LLVM regression tests use the check-llvm target:. .. code-block:: bash. % make check-llvm. In order to get reasonable testing performance, build LLVM and subprojects; in release mode, i.e. .. code-block:: bash. % cmake -DCMAKE_BUILD_TYPE=""Release"" -DLLVM_ENABLE_ASSERTIONS=On. If you have `Clang <https://clang.llvm.org/>`_ checked out and built, you; can run the LLVM and Clang tests simultaneously using:. .. code-block:: bash. % make check-all. To run the tests with Valgrind (Memcheck by default), use the ``LIT_ARGS`` make; variable to pass the required options to lit. For example, you can use:. .. code-block:: bash. % make check LIT_ARGS=""-v --vg --vg-leak"". to enable testing with valgrind and with leak checking enabled. To run individual tests or subsets of tests, you can use the ``llvm-lit``; script which is built as part of LLVM. For example, to run the; ``Integer/BitPacked.ll`` test by itself you can run:. .. code-block:: bash. % llvm-lit ~/llvm/test/Integer/BitPacked.ll. or to run all of the ARM CodeGen tests:. .. code-block:: bash. % llvm-lit ~/llvm/test/CodeGen/ARM. The regression tests will use the Python psutil module only if installed in a; **non-user** location. Under Linux, install with sudo or within a virtual; environment. Under Windows, install Python for all users and then run; ``pip install psutil`` in an elevated command p",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:5578,test,tests,5578,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['tests']
Testability,ests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/math/TwoInputSingleOutputDiff.h; libc/fuzzing/stdlib/atof_differential_fuzz.cpp; libc/fuzzing/stdlib/qsort_fuzz.cpp; libc/fuzzing/stdlib/StringParserOutputDiff.h; libc/fuzzing/string/strcmp_fuzz.cpp; libc/fuzzing/string/strstr_fuzz.cpp; libc/include/__llvm-libc-common.h; libc/include/llvm-libc-macros/fcntl-macros.h; libc/include/llvm-libc-macros/stdio-macros.h; libc/include/llvm-libc-macros/linux/fcntl-macros.h; libc/include/llvm-libc-types/cnd_t.h; libc/include/llvm-libc-types/div_t.h; libc/in,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:130078,benchmark,benchmarks,130078,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,ests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Common/default-kinds.h; flang/include/flang/Common/enum-set.h; flang/include/flang/Common/fast-int-set.h; flang/include/flang/Common/format.h; flang/include/flang/Common/Fortran-features.h; flang/include/flang/Common/Fortran.h; flang/include/flang/Common/idioms.h; flang/include/flang/Common/indirection.h; flang/include/flang/Common/interval.h; flang/include/flang/Common/leading-zero-bit-co,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107958,test,tests,107958,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,3,['test'],['tests']
Testability,"es}; ${systemz_files}; ${ve_files}; ${x86_files}; ${webassembly_files}; ${windows_only_files}; ${utility_files}; ). set(cuda_wrapper_files; cuda_wrappers/algorithm; cuda_wrappers/cmath; cuda_wrappers/complex; cuda_wrappers/new; ). set(cuda_wrapper_bits_files; cuda_wrappers/bits/shared_ptr_base.h; cuda_wrappers/bits/basic_string.h; cuda_wrappers/bits/basic_string.tcc; ). set(ppc_wrapper_files; ppc_wrappers/mmintrin.h; ppc_wrappers/xmmintrin.h; ppc_wrappers/mm_malloc.h; ppc_wrappers/emmintrin.h; ppc_wrappers/pmmintrin.h; ppc_wrappers/tmmintrin.h; ppc_wrappers/smmintrin.h; ppc_wrappers/nmmintrin.h; ppc_wrappers/bmiintrin.h; ppc_wrappers/bmi2intrin.h; ppc_wrappers/immintrin.h; ppc_wrappers/x86intrin.h; ppc_wrappers/x86gprintrin.h; ). set(openmp_wrapper_files; openmp_wrappers/math.h; openmp_wrappers/cmath; openmp_wrappers/complex.h; openmp_wrappers/complex; openmp_wrappers/__clang_openmp_device_functions.h; openmp_wrappers/complex_cmath.h; openmp_wrappers/new; ). set(llvm_libc_wrapper_files; llvm_libc_wrappers/assert.h; llvm_libc_wrappers/stdio.h; llvm_libc_wrappers/stdlib.h; llvm_libc_wrappers/string.h; llvm_libc_wrappers/ctype.h; llvm_libc_wrappers/inttypes.h; llvm_libc_wrappers/time.h; ). include(GetClangResourceDir); get_clang_resource_dir(output_dir PREFIX ${LLVM_LIBRARY_OUTPUT_INTDIR}/.. SUBDIR include); set(out_files); set(generated_files). set(arm_common_generated_files); set(arm_only_generated_files); set(aarch64_only_generated_files); set(riscv_generated_files). function(copy_header_to_output_dir src_dir file); set(src ${src_dir}/${file}); set(dst ${output_dir}/${file}); add_custom_command(OUTPUT ${dst}; DEPENDS ${src}; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${src} ${dst}; COMMENT ""Copying clang's ${file}...""); list(APPEND out_files ${dst}); set(out_files ${out_files} PARENT_SCOPE); endfunction(copy_header_to_output_dir). function(clang_generate_header td_option td_file out_file); clang_tablegen(${out_file} ${td_option}; -I ${CLANG_SOURCE_DIR}/include/cl",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt:5294,assert,assert,5294,interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/CMakeLists.txt,1,['assert'],['assert']
Testability,"et effect is a faster initialization time in this common case.; - Handle gracefully the presence of chains the files associated to which are corrupted.; - Reduce number of expensive `TChain::LoadTree` calls by spawning nested TBB tasks to ensure clusters of a given file will be most likely processed by the same thread. ### TTree; - TTrees can be forced to only create new baskets at event cluster boundaries.; This simplifies file layout and I/O at the cost of memory. Recommended for; simple file formats such as ntuples but not more complex data types. To; enable, invoke `tree->SetBit(TTree::kOnlyFlushAtCluster)`. ## Histogram Libraries. ## Math Libraries. ### [Clad](https://github.com/vgvassilev/clad); - Enable experimental automatic differentiation techniques to compute; derivatives and gradients of functions. Automatic differentiation is; superior to the slow symbolic or often inaccurate numerical differentiation.; It uses the fact that every computer program can be divided into a set of; elementary operations (-,+,*,/) and functions (sin, cos, log, etc). By; applying the chain rule repeatedly to these operations, derivatives of; arbitrary order can be computed.; - Implement experimental `TFormula::GradientPar` derivative engine which; employs clad. ### VecOps; - Add `All` helper: return true if all of the elements equate to true, return false otherwise.; - Add `Any` helper: return true if any of the elements equates to true, return false otherwise.; - Add `ArgSort` helper: return an RVec of indices that sort the vector.; - Add `Combinations` helper which can:; - return the indices which represent all combinations of the elements of two vectors.; - return the indices which represent all unique n-tuple combinations of the elements of a given vector.; - Add `Intersect` helper: return the intersection of elements of two RVecs.; - Add `Nonzero` helper: return the indices of the elements which are not zero; - Add `Reverse` helepr: return copy of reversed RVec.; - Add `S",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v616/index.md:11300,log,log,11300,README/ReleaseNotes/v616/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v616/index.md,1,['log'],['log']
Testability,"etGeneration POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/libElementStructDict_rdict.pcm; ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libElementStructDict_rdict.pcm); endif(); target_include_directories(testTOffsetGeneration PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}); ROOT_STANDARD_LIBRARY_PACKAGE(SillyStruct NO_INSTALL_HEADERS HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/SillyStruct.h SOURCES SillyStruct.cxx LINKDEF SillyStructLinkDef.h DEPENDENCIES RIO); ROOT_ADD_GTEST(testBulkApi BulkApi.cxx LIBRARIES RIO Tree TreePlayer); #FIXME: tests are having timeout on 32bit CERN VM (in docker container everything is fine),; # to be reverted after investigation.; if(NOT CMAKE_SIZEOF_VOID_P EQUAL 4); ROOT_ADD_GTEST(testBulkApiMultiple BulkApiMultiple.cxx LIBRARIES RIO Tree TreePlayer TIMEOUT 3000); ROOT_ADD_GTEST(testBulkApiVarLength BulkApiVarLength.cxx LIBRARIES RIO Tree TreePlayer); ROOT_ADD_GTEST(testBulkApiSillyStruct BulkApiSillyStruct.cxx LIBRARIES RIO Tree TreePlayer SillyStruct); endif(); ROOT_ADD_GTEST(testTBasket TBasket.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(testTBranch TBranch.cxx LIBRARIES RIO Tree MathCore); ROOT_ADD_GTEST(testTIOFeatures TIOFeatures.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(testTTreeCluster TTreeClusterTest.cxx LIBRARIES RIO Tree MathCore); ROOT_ADD_GTEST(testTChainParsing TChainParsing.cxx LIBRARIES RIO Tree); if(imt); ROOT_ADD_GTEST(testTTreeImplicitMT ImplicitMT.cxx LIBRARIES RIO Tree); endif(); ROOT_ADD_GTEST(testTChainSaveAsCxx TChainSaveAsCxx.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(testTChainRegressions TChainRegressions.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(testTTreeTruncatedDatatypes TTreeTruncatedDatatypes.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(testTTreeRegressions TTreeRegressions.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(entrylist_addsublist entrylist_addsublist.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(chain_setentrylist chain_setentrylist.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(entrylist_enter entrylist_enter.cxx LIBRARIES R",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/CMakeLists.txt:1555,test,testTBasket,1555,tree/tree/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/CMakeLists.txt,1,['test'],['testTBasket']
Testability,"etName(""axis7"");; axis7->SetLabelOffset(0.01);; axis7->Draw();. // one can make axis top->bottom. However because of a problem,; // the two x values should not be equal; TGaxis *axis8 = new TGaxis(6.5,0.8,6.499,-0.8,0,90,50510,""-"");; axis8->SetName(""axis8"");; axis8->Draw();; }; ```. ![The second axis example](pictures/030000CD.png). The second example shows the use of the second form of the constructor,; with axis ticks position determined by a function **`TF1`**:. ``` {.cpp}; void gaxis3a(); {; gStyle->SetOptStat(0);. TH2F *h2 = new TH2F(""h"",""Axes"",2,0,10,2,-2,2);; h2->Draw();; TF1 *f1=new TF1(""f1"",""-x"",-10,10);; TGaxis *A1 = new TGaxis(0,2,10,2,""f1"",510,""-"");; A1->SetTitle(""axis with decreasing values"");; A1->Draw();. TF1 *f2=new TF1(""f2"",""exp(x)"",0,2);; TGaxis *A2 = new TGaxis(1,1,9,1,""f2"");; A2->SetTitle(""exponential axis"");; A2->SetLabelSize(0.03);; A2->SetTitleSize(0.03);; A2->SetTitleOffset(1.2);; A2->Draw();. TF1 *f3=new TF1(""f3"",""log10(x)"",0,800);; TGaxis *A3 = new TGaxis(2,-2,2,0,""f3"",505);; A3->SetTitle(""logarithmic axis"");; A3->SetLabelSize(0.03);; A3->SetTitleSize(0.03);; A3->SetTitleOffset(1.2);; A3->Draw();; }; ```. ![An axis example with time display](pictures/030000CE.png). ``` {.cpp}; // strip chart example; void seism() {. TStopwatch sw; sw.Start();; //set time offset; TDatime dtime;; gStyle->SetTimeOffset(dtime.Convert());; TCanvas *c1 = new TCanvas(""c1"",""Time on axis"",10,10,1000,500);; c1->SetFillColor(42);; c1->SetFrameFillColor(33);; c1->SetGrid();. Float_t bintime = 1;; // one bin = 1 second. change it to set the time scale; TH1F *ht = new TH1F(""ht"",""The ROOT seism"",10,0,10*bintime);; Float_t signal = 1000;; ht->SetMaximum(signal);; ht->SetMinimum(-signal);; ht->SetStats(0);; ht->SetLineColor(2);; ht->GetXaxis()->SetTimeDisplay(1);; ht->GetYaxis()->SetNdivisions(520);; ht->Draw();. for (Int_t i=1;i<2300;i++) {; // Build a signal : noisy damped sine; Float_t noise = gRandom->Gaus(0,120);; if (i > 700); noise += signal*sin((i-700.)*6.28/30)*exp(",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md:67549,log,logarithmic,67549,documentation/users-guide/Graphics.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md,1,['log'],['logarithmic']
Testability,"et_label(i + j + k);. assert(ijk_label & i_label); // ijk_label has i_label; assert(ijk_label & j_label); // ijk_label has j_label; assert(ijk_label & k_label); // ijk_label has k_label; assert(ijk_label == 7); // Verifies all of the above. // Or, equivalently:; assert(dfsan_has_label(ijk_label, i_label));; assert(dfsan_has_label(ijk_label, j_label));; assert(dfsan_has_label(ijk_label, k_label));. return 0;; }. Origin Tracking; ===============. DataFlowSanitizer can track origins of labeled values. This feature is enabled by; ``-mllvm -dfsan-track-origins=1``. For example,. .. code-block:: console. % cat test.cc; #include <sanitizer/dfsan_interface.h>; #include <stdio.h>. int main(int argc, char** argv) {; int i = 0;; dfsan_set_label(i_label, &i, sizeof(i));; int j = i + 1;; dfsan_print_origin_trace(&j, ""A flow from i to j"");; return 0;; }. % clang++ -fsanitize=dataflow -mllvm -dfsan-track-origins=1 -fno-omit-frame-pointer -g -O2 test.cc; % ./a.out; Taint value 0x1 (at 0x7ffd42bf415c) origin tracking (A flow from i to j); Origin value: 0x13900001, Taint value was stored to memory at; #0 0x55676db85a62 in main test.cc:7:7; #1 0x7f0083611bbc in __libc_start_main libc-start.c:285. Origin value: 0x9e00001, Taint value was created at; #0 0x55676db85a08 in main test.cc:6:3; #1 0x7f0083611bbc in __libc_start_main libc-start.c:285. By ``-mllvm -dfsan-track-origins=1`` DataFlowSanitizer collects only; intermediate stores a labeled value went through. Origin tracking slows down; program execution by a factor of 2x on top of the usual DataFlowSanitizer; slowdown and increases memory overhead by 1x. By ``-mllvm -dfsan-track-origins=2``; DataFlowSanitizer also collects intermediate loads a labeled value went through.; This mode slows down program execution by a factor of 4x. Current status; ==============. DataFlowSanitizer is a work in progress, currently under development for; x86\_64 Linux. Design; ======. Please refer to the :doc:`design document<DataFlowSanitizerDesign>`.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/DataFlowSanitizer.rst:12941,test,test,12941,interpreter/llvm-project/clang/docs/DataFlowSanitizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/DataFlowSanitizer.rst,2,['test'],['test']
Testability,"ete and the page is; difficult to navigate. We would appreciate help with:. improving the way this information is presented to users,; table generating; documentation where possible, such as for implementation limits or other; target-specific information,; adding documentation for currently; ; undocumented attributes,; documenting ; diagnostic group flags (adding code examples of what is diagnosed, or; other relevant information), or; documenting ; command line options, or; help with completing other missing documentation. These projects are independent of each other.; Complete the investigation into Clang's C conformance: Clang's; C status page contain a number of entries marked as; Unknown. Completing the investigation involves adding; test; coverage for the various standards papers and updating the documentation; accordingly. Improve Clang's C and C++ standard conformance test coverage:; Clang's test suite is structured such that most tests are written to provide; coverage for what part of the compiler the feature's implementation exists in;; we have parsing tests in clang/test/Parser, and semantic analysis; tests in clang/test/Sema*, etc. We also have tests written to; provide coverage for the standard requirements (clang/test/CXX and; clang/test/C). The standards coverage is not structured in a way; that makes it easy to maintain as the standards change over time. No commercial; conformance test suite has a license model suitable for open source projects,; so we would appreciate help in improving the existing coverage we have both in; terms of layout of the tests as well as in coverage of the various standard; modes.; Complete the investigation into Clang's C and C++ Defect Report; conformance: Separate from (but related to) general conformance testing is; determining which C defect reports and; C++ defect reports Clang implements. These; lists currently have a number of entries marked as Unknown.; Completing the investigation involves adding test coverage for;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/OpenProjects.html:1436,test,test,1436,interpreter/llvm-project/clang/www/OpenProjects.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/OpenProjects.html,7,['test'],"['test', 'tests']"
Testability,"ethod allowing the user to; separate the training data (and accordingly the application; data) into disjoint sub-populations exhibiting significantly; different properties. The separation into phase space regions is; done by applying requirements on the input and/or spectator; variables. In each of these disjoint regions (each event must; belong to one and only one region), an independent training is; performed using the most appropriate MVA method, training; options and set of training variables in that zone. The division; into categories in presence of distinct sub-populations reduces; the correlations between the training variables, improves the; modelling, and hence increases the classification and regression; performance. Presently, the Category method works for; classification only, but regression will follow soon. Please; contact us if urgently needed. An example scripts and data files illustrating how the new; Category method is configured and used. Please check the macros; test/TMVAClassificationCategory.C and; test/TMVAClassificationCategoryApplication.C or the; corresponding executables.; Regression functionality for gradient boosted trees using a Huber loss function. Comments. On Input Data: . New TMVA event vector building. The code for splitting the input; data into training and test samples for all classes and the; mixing of those samples to one training and one test sample has; been rewritten completely. The new code is more performant and; has a clearer structure. This fixes several bugs which have been; reported by the TMVA users. On Minimization: . Variables, targets and spectators are now checked if they are; constant. (The execution of TMVA is stopped for variables and; targets, a warning is given for spectators.). On Regression:; ; The analysis type is no longer defined by calling a dedicated; TestAllMethods-member-function of the Factory, but with the; option ""AnalysisType"" in the Factory. The default value is; ""Auto"" where TMVA tries to deter",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v526/index.html:1083,test,test,1083,tmva/doc/v526/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v526/index.html,1,['test'],['test']
Testability,"ethodDecl; @end. alpha.osx.cocoa.localizability.PluralMisuseChecker; (ObjC); Warns against using one vs. many plural pattern in code; when generating localized strings. NSString *reminderText =; NSLocalizedString(@""None"", @""Indicates no reminders"");; if (reminderCount == 1) {; // Warning: Plural cases are not supported across all languages.; // Use a .stringsdict file instead; reminderText =; NSLocalizedString(@""1 Reminder"", @""Indicates single reminder"");; } else if (reminderCount >= 2) {; // Warning: Plural cases are not supported across all languages.; // Use a .stringsdict file instead; reminderText =; [NSString stringWithFormat:; NSLocalizedString(@""%@ Reminders"", @""Indicates multiple reminders""),; reminderCount];; }. Security Alpha Checkers. Name, DescriptionExample. alpha.security.ArrayBound; (C); Warn about buffer overflows (older checker). void test() {; char *s = """";; char c = s[1]; // warn; }. struct seven_words {; int c[7];; };. void test() {; struct seven_words a, *p;; p = &a; p[0] = a;; p[1] = a;; p[2] = a; // warn; }. // note: requires unix.Malloc or; // alpha.unix.MallocWithAnnotations checks enabled.; void test() {; int *p = malloc(12);; p[3] = 4; // warn; }. void test() {; char a[2];; int *b = (int*)a;; b[1] = 3; // warn; }. alpha.security.ArrayBoundV2; (C); Warn about buffer overflows (newer checker). void test() {; char *s = """";; char c = s[1]; // warn; }. void test() {; int buf[100];; int *p = buf;; p = p + 99;; p[1] = 1; // warn; }. // note: compiler has internal check for this.; // Use -Wno-array-bounds to suppress compiler warning.; void test() {; int buf[100][100];; buf[0][-1] = 1; // warn; }. // note: requires alpha.security.taint check turned on.; void test() {; char s[] = ""abc"";; int x = getchar();; char c = s[x]; // warn: index is tainted; }. alpha.security.MallocOverflow; (C); Check for overflows in the arguments to malloc(). void test(int n) {; void *p = malloc(n * sizeof(int)); // warn; }. alpha.security.MmapWriteExec; (C); Warn on mma",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html:10020,test,test,10020,interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,1,['test'],['test']
Testability,"etry manager holds a list; of active navigators accessible via:. ``` {.cpp}; TObjArray *navigators = gGeoManager->GetListOfNavigators();; ```. Upon closing the geometry a default navigator is provided as first one; in this list, but one may add its own via:. ``` {.cpp}; TGeoNavigator *navig = new TGeoNavigator(gGeoManager);; // Store the index of the user navigator; Int_t inav = gGeoManager->AddNavigator(navig);; // Make its own navigator the active one; gGeoManager->SetCurrentNavigator(inav);; // Switch between navigators; gGeoManager->SetCurrentNavigator(0);; ```. A navigator holds several variables describing the current navigation; state: current point position, current direction distance to next; boundary, isotropic safety, pointer to current and next nods as well as; several tracking flags related to volume boundary conditions or other; properties required for track propagation in geometry. Each geometry; query affects these variables, so the only way in testing several; navigation alternatives and remembering the active navigation state is; to use parallel navigation. The following paragraphs will describe the; usage of a single navigator. All setters/getters for navigation state; parameters as well as navigation queries provided by **`TGeoNavigator`**; are interfaced by **`TGeoManager`** and will act on the current; navigator. ### Initializing the Starting Point. The current point (`x,y,z`) known by the modeller is stored as; `Double_t fCurrentPoint[3]` by the navigator class. This array of the; three coordinates is defined in the current global reference system and; can be retrieved any time:. ``` {.cpp}; Const Double_t *cpoint = gGeoManager->GetCurrentPoint();; ```. Initializing this point can be done like:. ``` {.cpp}; gGeoManager->SetCurrentPoint(x,y,z);; // or:; gGeoManager->SetCurrentPoint(Double_t *point[3]);; ```. ### Initializing the Direction. In order to move inside geometry starting with the current point, the; modeller needs to know the current ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md:103608,test,testing,103608,documentation/users-guide/Geometry.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md,1,['test'],['testing']
Testability,"event a ``grep freebsd`` from finding this test. Better to use:; ``target={{.+-freebsd.*}} || target={{.+-netbsd.*}}``. Substitutions; -------------. Besides replacing LLVM tool names the following substitutions are performed in; RUN lines:. ``%%``; Replaced by a single ``%``. This allows escaping other substitutions. ``%s``; File path to the test case's source. This is suitable for passing on the; command line as the input to an LLVM tool. Example: ``/home/user/llvm/test/MC/ELF/foo_test.s``. ``%S``; Directory path to the test case's source. Example: ``/home/user/llvm/test/MC/ELF``. ``%t``; File path to a temporary file name that could be used for this test case.; The file name won't conflict with other test cases. You can append to it; if you need multiple temporaries. This is useful as the destination of; some redirected output. Example: ``/home/user/llvm.build/test/MC/ELF/Output/foo_test.s.tmp``. ``%T``; Directory of ``%t``. Deprecated. Shouldn't be used, because it can be easily; misused and cause race conditions between tests. Use ``rm -rf %t && mkdir %t`` instead if a temporary directory is necessary. Example: ``/home/user/llvm.build/test/MC/ELF/Output``. ``%{pathsep}``. Expands to the path separator, i.e. ``:`` (or ``;`` on Windows). ``${fs-src-root}``; Expands to the root component of file system paths for the source directory,; i.e. ``/`` on Unix systems or ``C:\`` (or another drive) on Windows. ``${fs-tmp-root}``; Expands to the root component of file system paths for the test's temporary; directory, i.e. ``/`` on Unix systems or ``C:\`` (or another drive) on; Windows. ``${fs-sep}``; Expands to the file system separator, i.e. ``/`` or ``\`` on Windows. ``%/s, %/S, %/t, %/T``. Act like the corresponding substitution above but replace any ``\``; character with a ``/``. This is useful to normalize path separators. Example: ``%s: C:\Desktop Files/foo_test.s.tmp``. Example: ``%/s: C:/Desktop Files/foo_test.s.tmp``. ``%{s:real}, %{S:real}, %{t:real}, %{T:real}``",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:24613,test,tests,24613,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['tests']
Testability,"ew. The output shows in view form the **missing (-), added (+)** elements,; giving more context by swapping the reference and target object files. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level; --compare=types; --report=view; --print=symbols,types; test-dwarf-clang.o test-dwarf-gcc.o. Reference: 'test-dwarf-clang.o'; Target: 'test-dwarf-gcc.o'. Logical View:; [000] {File} 'test-dwarf-clang.o'. [001] {CompileUnit} 'test.cpp'; [002] 1 {TypeAlias} 'INTPTR' -> '* const int'; [002] 2 {Function} extern not_inlined 'foo' -> 'int'; [003] {Block}; [004] 5 {Variable} 'CONSTANT' -> 'const INTEGER'; +[004] 4 {TypeAlias} 'INTEGER' -> 'int'; [003] 2 {Parameter} 'ParamBool' -> 'bool'; [003] 2 {Parameter} 'ParamPtr' -> 'INTPTR'; [003] 2 {Parameter} 'ParamUnsigned' -> 'unsigned int'; -[003] 4 {TypeAlias} 'INTEGER' -> 'int'. The output shows the merging view path (reference and target) with the; missing and added elements. LOGICAL ELEMENTS; """"""""""""""""""""""""""""""""; It compares individual logical elements without considering if their; parents are the same. For both comparison methods, the equal criteria; includes the name, source code location, type, lexical scope level. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level; --compare=types; --report=list; --print=symbols,types,summary; test-dwarf-clang.o test-dwarf-gcc.o. Reference: 'test-dwarf-clang.o'; Target: 'test-dwarf-gcc.o'. (1) Missing Types:; -[003] 4 {TypeAlias} 'INTEGER' -> 'int'. (1) Added Types:; +[004] 4 {TypeAlias} 'INTEGER' -> 'int'. ----------------------------------------; Element Expected Missing Added; ----------------------------------------; Scopes 4 0 0; Symbols 0 0 0; Types 2 1 1; Lines 0 0 0; ----------------------------------------; Total 6 1 1. Changing the *Reference* and *Target* order:. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level; --compare=types; --report=list; --print=symbols,types,summary; test-dwarf-gcc.o test-dwarf-clang.o. Reference: 'test-dwarf-gcc.o'; Targ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:31098,log,logical,31098,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['log'],['logical']
Testability,"exactly equivalent constructs for the same expression. The type_expression extends C expression parsing to accommodate Block; reference declarations as it accommodates function pointer; declarations. Given:. .. code-block:: c. typedef int (*pointerToFunctionThatReturnsIntWithCharArg)(char);; pointerToFunctionThatReturnsIntWithCharArg functionPointer;; ^ pointerToFunctionThatReturnsIntWithCharArg (float x) { return functionPointer; }. and:. .. code-block:: c. ^ int ((*)(float x))(char) { return functionPointer; }. are equivalent expressions, as is:. .. code-block:: c. ^(float x) { return functionPointer; }. [returnfunctionptr.c]. The compound statement body establishes a new lexical scope within; that of its parent. Variables used within the scope of the compound; statement are bound to the Block in the normal manner with the; exception of those in automatic (stack) storage. Thus one may access; functions and global variables as one would expect, as well as static; local variables. [testme]. Local automatic (stack) variables referenced within the compound; statement of a Block are imported and captured by the Block as const; copies. The capture (binding) is performed at the time of the Block; literal expression evaluation. The compiler is not required to capture a variable if it can prove; that no references to the variable will actually be evaluated.; Programmers can force a variable to be captured by referencing it in a; statement at the beginning of the Block, like so:. .. code-block:: c. (void) foo;. This matters when capturing the variable has side-effects, as it can; in Objective-C or C++. The lifetime of variables declared in a Block is that of a function;; each activation frame contains a new copy of variables declared within; the local scope of the Block. Such variable declarations should be; allowed anywhere [testme] rather than only when C99 parsing is; requested, including for statements. [testme]. Block literal expressions may occur within Block literal ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/BlockLanguageSpec.rst:4517,test,testme,4517,interpreter/llvm-project/clang/docs/BlockLanguageSpec.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/BlockLanguageSpec.rst,1,['test'],['testme']
Testability,"executable to be used. Not set by default and not; required unless running the Fortran Test Suite. - `CMAKE_BUILD_TYPE`. Select a build type like `OPTIMIZE` or `DEBUG` selecting a set of predefined; compiler flags. These flags are applied regardless of the `CMAKE_C_FLAGS`; option and may be changed by modifying `CMAKE_C_FLAGS_OPTIMIZE` etc. See; [https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html](https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html). - `TEST_SUITE_FORTRAN`. Activate that Fortran tests. This is a work in progress. More information can be; found in the [Flang documentation](https://flang.llvm.org/docs/FortranLLVMTestSuite.html). - `TEST_SUITE_RUN_UNDER`. Prefix test invocations with the given tool. This is typically used to run; cross-compiled tests within a simulator tool. - `TEST_SUITE_BENCHMARKING_ONLY`. Disable tests that are unsuitable for performance measurements. The disabled; tests either run for a very short time or are dominated by I/O performance; making them unsuitable as compiler performance tests. - `TEST_SUITE_SUBDIRS`. Semicolon-separated list of directories to include. This can be used to only; build parts of the test-suite or to include external suites. This option; does not work reliably with deeper subdirectories as it skips intermediate; `CMakeLists.txt` files which may be required. - `TEST_SUITE_COLLECT_STATS`. Collect internal LLVM statistics. Appends `-save-stats=obj` when invoking the; compiler and makes the lit runner collect and merge the statistic files. - `TEST_SUITE_RUN_BENCHMARKS`. If this is set to `OFF` then lit will not actually run the tests but just; collect build statistics like compile time and code size. - `TEST_SUITE_USE_PERF`. Use the `perf` tool for time measurement instead of the `timeit` tool that; comes with the test-suite. The `perf` is usually available on linux systems. - `TEST_SUITE_SPEC2000_ROOT`, `TEST_SUITE_SPEC2006_ROOT`, `TEST_SUITE_SPEC2017_ROOT`, ... Specify install",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:5683,test,tests,5683,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,2,['test'],['tests']
Testability,exp2f.h; libc/src/math/expf.h; libc/src/math/expm1f.h; libc/src/math/fabs.h; libc/src/math/fabsf.h; libc/src/math/fabsl.h; libc/src/math/fdim.h; libc/src/math/fdimf.h; libc/src/math/fdiml.h; libc/src/math/floor.h; libc/src/math/floorf.h; libc/src/math/floorl.h; libc/src/math/fma.cpp; libc/src/math/fma.h; libc/src/math/fmaf.cpp; libc/src/math/fmaf.h; libc/src/math/fmax.h; libc/src/math/fmaxf.h; libc/src/math/fmaxl.h; libc/src/math/fmin.h; libc/src/math/fminf.h; libc/src/math/fminl.h; libc/src/math/frexp.h; libc/src/math/frexpf.h; libc/src/math/frexpl.h; libc/src/math/hypot.h; libc/src/math/hypotf.h; libc/src/math/ilogb.h; libc/src/math/ilogbf.h; libc/src/math/ilogbl.h; libc/src/math/ldexp.h; libc/src/math/ldexpf.h; libc/src/math/ldexpl.h; libc/src/math/llrint.h; libc/src/math/llrintf.h; libc/src/math/llrintl.h; libc/src/math/llround.h; libc/src/math/llroundf.h; libc/src/math/llroundl.h; libc/src/math/log10f.h; libc/src/math/log1pf.h; libc/src/math/log2f.h; libc/src/math/logb.h; libc/src/math/logbf.h; libc/src/math/logbl.h; libc/src/math/logf.h; libc/src/math/lrint.h; libc/src/math/lrintf.h; libc/src/math/lrintl.h; libc/src/math/lround.h; libc/src/math/lroundf.h; libc/src/math/lroundl.h; libc/src/math/modf.h; libc/src/math/modff.h; libc/src/math/modfl.h; libc/src/math/nearbyint.h; libc/src/math/nearbyintf.h; libc/src/math/nearbyintl.h; libc/src/math/nextafter.h; libc/src/math/nextafterf.h; libc/src/math/nextafterl.h; libc/src/math/remainder.h; libc/src/math/remainderf.h; libc/src/math/remainderl.h; libc/src/math/remquo.h; libc/src/math/remquof.h; libc/src/math/remquol.h; libc/src/math/rint.h; libc/src/math/rintf.h; libc/src/math/rintl.h; libc/src/math/round.h; libc/src/math/roundf.h; libc/src/math/roundl.h; libc/src/math/sin.h; libc/src/math/sincosf.h; libc/src/math/sinf.h; libc/src/math/sqrt.h; libc/src/math/sqrtf.h; libc/src/math/sqrtl.h; libc/src/math/tan.h; libc/src/math/trunc.h; libc/src/math/truncf.h; libc/src/math/truncl.h; libc/src/math/aarch64/ceil.cpp; libc/s,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:135765,log,logbf,135765,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['log'],['logbf']
Testability,expf.h; libc/src/math/expm1f.h; libc/src/math/fabs.h; libc/src/math/fabsf.h; libc/src/math/fabsl.h; libc/src/math/fdim.h; libc/src/math/fdimf.h; libc/src/math/fdiml.h; libc/src/math/floor.h; libc/src/math/floorf.h; libc/src/math/floorl.h; libc/src/math/fma.cpp; libc/src/math/fma.h; libc/src/math/fmaf.cpp; libc/src/math/fmaf.h; libc/src/math/fmax.h; libc/src/math/fmaxf.h; libc/src/math/fmaxl.h; libc/src/math/fmin.h; libc/src/math/fminf.h; libc/src/math/fminl.h; libc/src/math/frexp.h; libc/src/math/frexpf.h; libc/src/math/frexpl.h; libc/src/math/hypot.h; libc/src/math/hypotf.h; libc/src/math/ilogb.h; libc/src/math/ilogbf.h; libc/src/math/ilogbl.h; libc/src/math/ldexp.h; libc/src/math/ldexpf.h; libc/src/math/ldexpl.h; libc/src/math/llrint.h; libc/src/math/llrintf.h; libc/src/math/llrintl.h; libc/src/math/llround.h; libc/src/math/llroundf.h; libc/src/math/llroundl.h; libc/src/math/log10f.h; libc/src/math/log1pf.h; libc/src/math/log2f.h; libc/src/math/logb.h; libc/src/math/logbf.h; libc/src/math/logbl.h; libc/src/math/logf.h; libc/src/math/lrint.h; libc/src/math/lrintf.h; libc/src/math/lrintl.h; libc/src/math/lround.h; libc/src/math/lroundf.h; libc/src/math/lroundl.h; libc/src/math/modf.h; libc/src/math/modff.h; libc/src/math/modfl.h; libc/src/math/nearbyint.h; libc/src/math/nearbyintf.h; libc/src/math/nearbyintl.h; libc/src/math/nextafter.h; libc/src/math/nextafterf.h; libc/src/math/nextafterl.h; libc/src/math/remainder.h; libc/src/math/remainderf.h; libc/src/math/remainderl.h; libc/src/math/remquo.h; libc/src/math/remquof.h; libc/src/math/remquol.h; libc/src/math/rint.h; libc/src/math/rintf.h; libc/src/math/rintl.h; libc/src/math/round.h; libc/src/math/roundf.h; libc/src/math/roundl.h; libc/src/math/sin.h; libc/src/math/sincosf.h; libc/src/math/sinf.h; libc/src/math/sqrt.h; libc/src/math/sqrtf.h; libc/src/math/sqrtl.h; libc/src/math/tan.h; libc/src/math/trunc.h; libc/src/math/truncf.h; libc/src/math/truncl.h; libc/src/math/aarch64/ceil.cpp; libc/src/math/aarch64/ceilf.c,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:135788,log,logbl,135788,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['log'],['logbl']
Testability,"ey in; turn move up their own inheritance tree and so forth. The simple data; members are written to the buffer directly. Eventually the buffer; contains all simple data members of all the classes that make up this; particular object. Data members that are references (as; `MyClass &fObj;`) are never saved, it is always the responsibility of; the object's constructor to set them properly. ### Automatically Generated Streamers. A `Streamer `usually calls other `Streamers`: the `Streamer `of its; parents and data members. This architecture depends on all classes; having `Streamers`, because eventually they will be called. To ensure; that a class has a `Streamer`, `rootcling` automatically creates one in; the `ClassDef` macro that is defined in `$ROOTSYS/include/Rtypes.h`.; `ClassDef` defines several methods for any class, and one of them is the; `Streamer`. The automatically generated `Streamer `is complete and can; be used as long as no customization is needed. The `Event` class is defined in `$ROOTSYS/test/Event.h`. Looking at the; class definition, we find that it inherits from **`TObject`**. It is a; simple example of a class with diverse data members. ``` {.cpp}; class Event : public TObject {; private:; TDirectory *fTransient; //! current directory; Float_t fPt; //! transient value; char fType[20];; Int_t fNtrack;; Int_t fNseg;; Int_t fNvertex;; UInt_t fFlag;; Float_t fTemperature;; EventHeader fEvtHdr; //|| don't split; TClonesArray *fTracks; //->; TH1F *fH; //->; Int_t fMeasures[10];; Float_t fMatrix[4][4];; Float_t *fClosestDistance; //[fNvertex]; ...; ```. The Event class is added to the dictionary by the `rootcling`; utility. This is the `rootcling` statement in the; `$ROOTSYS/test/Makefile`:. ``` {.cpp}; @rootcling -f EventDict.cxx -c Event.h EventLinkDef.h; ```. The `EventDict.cxx` file contains the automatically generated; `Streamer `for Event:. ``` {.cpp}; void Event::Streamer(TBuffer &R__b){; // Stream an object of class Event.; if (R__b.IsReading()) {;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/InputOutput.md:44147,test,test,44147,documentation/users-guide/InputOutput.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/InputOutput.md,1,['test'],['test']
Testability,"e} 'retq'; [003] 9 {Line}; [002] 1 {TypeAlias} 'INTPTR' -> '* const int'. On closer inspection, we can see what could be a potential debug issue:. .. code-block:: none. [003] {Block}; [003] 4 {TypeAlias} 'INTEGER' -> 'int'. The **'INTEGER'** definition is at level **[003]**, the same lexical; scope as the anonymous **{Block}** ('true' branch for the 'if' statement); whereas in the original source code the typedef statement is clearly; inside that block, so the **'INTEGER'** definition should also be at; level **[004]** inside the block. SELECT LOGICAL ELEMENTS; """"""""""""""""""""""""""""""""""""""""""""""; The following prints all *instructions*, *symbols* and *types* that; contain **'inte'** or **'movl'** in their names or types, using a tab; layout and given the number of matches. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level; --select-nocase --select-regex; --select=INTe --select=movl; --report=list; --print=symbols,types,instructions,summary; test-dwarf-clang.o. Logical View:; [000] {File} 'test-dwarf-clang.o'. [001] {CompileUnit} 'test.cpp'; [003] {Code} 'movl	$0x7, -0x1c(%rbp)'; [003] {Code} 'movl	$0x7, -0x4(%rbp)'; [003] {Code} 'movl	%eax, -0x4(%rbp)'; [003] {Code} 'movl	%esi, -0x14(%rbp)'; [003] {Code} 'movl	-0x14(%rbp), %eax'; [003] {Code} 'movl	-0x4(%rbp), %eax'; [003] 4 {TypeAlias} 'INTEGER' -> 'int'; [004] 5 {Variable} 'CONSTANT' -> 'const INTEGER'. -----------------------------; Element Total Found; -----------------------------; Scopes 3 0; Symbols 4 1; Types 2 1; Lines 17 6; -----------------------------; Total 26 8. COMPARISON MODE; ^^^^^^^^^^^^^^^; In this mode :program:`llvm-debuginfo-analyzer` compares logical views; to produce a report with the logical elements that are missing or added.; This a very powerful aid in finding semantic differences in the debug; information produced by different toolchain versions or even completely; different toolchains altogether (For example a compiler producing DWARF; can be directly compared against a completely dif",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:27382,test,test-dwarf-clang,27382,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['test'],['test-dwarf-clang']
Testability,"e} 'test-dwarf-clang.o'. [001] {CompileUnit} 'test.cpp'; [002] 1 {TypeAlias} 'INTPTR' -> '* const int'; [002] 2 {Function} extern not_inlined 'foo' -> 'int'; [003] {Block}; [004] 5 {Variable} 'CONSTANT' -> 'const INTEGER'; +[004] 4 {TypeAlias} 'INTEGER' -> 'int'; [003] 2 {Parameter} 'ParamBool' -> 'bool'; [003] 2 {Parameter} 'ParamPtr' -> 'INTPTR'; [003] 2 {Parameter} 'ParamUnsigned' -> 'unsigned int'; -[003] 4 {TypeAlias} 'INTEGER' -> 'int'. The output shows the merging view path (reference and target) with the; missing and added elements. LOGICAL ELEMENTS; """"""""""""""""""""""""""""""""; It compares individual logical elements without considering if their; parents are the same. For both comparison methods, the equal criteria; includes the name, source code location, type, lexical scope level. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level; --compare=types; --report=list; --print=symbols,types,summary; test-dwarf-clang.o test-dwarf-gcc.o. Reference: 'test-dwarf-clang.o'; Target: 'test-dwarf-gcc.o'. (1) Missing Types:; -[003] 4 {TypeAlias} 'INTEGER' -> 'int'. (1) Added Types:; +[004] 4 {TypeAlias} 'INTEGER' -> 'int'. ----------------------------------------; Element Expected Missing Added; ----------------------------------------; Scopes 4 0 0; Symbols 0 0 0; Types 2 1 1; Lines 0 0 0; ----------------------------------------; Total 6 1 1. Changing the *Reference* and *Target* order:. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level; --compare=types; --report=list; --print=symbols,types,summary; test-dwarf-gcc.o test-dwarf-clang.o. Reference: 'test-dwarf-gcc.o'; Target: 'test-dwarf-clang.o'. (1) Missing Types:; -[004] 4 {TypeAlias} 'INTEGER' -> 'int'. (1) Added Types:; +[003] 4 {TypeAlias} 'INTEGER' -> 'int'. ----------------------------------------; Element Expected Missing Added; ----------------------------------------; Scopes 4 0 0; Symbols 0 0 0; Types 2 1 1; Lines 0 0 0; ----------------------------------------; Total 6 1 1. As the *Reference*",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:31491,test,test-dwarf-gcc,31491,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['test'],['test-dwarf-gcc']
Testability,"f (X) abort();; }. is currently compiled to:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne LBB1_1; addl $12, %esp; ret; LBB1_1:; call L_abort$stub. It would be better to produce:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne L_abort$stub; addl $12, %esp; ret. This can be applied to any no-return function call that takes no arguments etc.; Alternatively, the stack save/restore logic could be shrink-wrapped, producing; something like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; subl $12, %esp; call L_abort$stub. Both are useful in different situations. Finally, it could be shrink-wrapped; and tail called, like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; pop %eax # realign stack.; call L_abort$stub. Though this probably isn't worth it. //===---------------------------------------------------------------------===//. Sometimes it is better to codegen subtractions from a constant (e.g. 7-x) with; a neg instead of a sub instruction. Consider:. int test(char X) { return 7-X; }. we currently produce:; _test:; movl $7, %eax; movsbl 4(%esp), %ecx; subl %ecx, %eax; ret. We would use one fewer register if codegen'd as:. movsbl 4(%esp), %eax; 	neg %eax; add $7, %eax; ret. Note that this isn't beneficial if the load can be folded into the sub. In; this case, we want a sub:. int test(int X) { return 7-X; }; _test:; movl $7, %eax; subl 4(%esp), %eax; ret. //===---------------------------------------------------------------------===//. Leaf functions that require one 4-byte spill slot have a prolog like this:. _foo:; pushl %esi; subl $4, %esp; ...; and an epilog like this:; addl $4, %esp; popl %esi; ret. It would be smaller, and potentially faster, to push eax on entry and to; pop into a dummy register instead of using addl/subl of esp. Just don't pop ; into any return registers :). //===---------------------------------------------------------------------===//. The X86 backend should fold (branch (or (setcc, setcc))) into multiple ; branches. We gene",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:12757,test,test,12757,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt,1,['test'],['test']
Testability,"f (n > 0) {; do {; // Loop body; i += 1;; } while (i < n);; }; }. It's important to understand the effect of loop rotation; at the LLVM IR level. We follow with the previous examples; in LLVM IR while also providing a graphical representation; of the control-flow graphs (CFG). You can get the same graphical; results by utilizing the :ref:`view-cfg <passes-view-cfg>` pass. The initial **for** loop could be translated to:. .. code-block:: none. define void @test(i32 %n) {; entry:; br label %for.header. for.header:; %i = phi i32 [ 0, %entry ], [ %i.next, %latch ]; %cond = icmp slt i32 %i, %n; br i1 %cond, label %body, label %exit. body:; ; Loop body; br label %latch. latch:; %i.next = add nsw i32 %i, 1; br label %for.header. exit:; ret void; }. .. image:: ./loop-terminology-initial-loop.png; :width: 400 px. Before we explain how LoopRotate will actually; transform this loop, here's how we could convert; it (by hand) to a do-while style loop. .. code-block:: none. define void @test(i32 %n) {; entry:; br label %body. body:; %i = phi i32 [ 0, %entry ], [ %i.next, %latch ]; ; Loop body; br label %latch. latch:; %i.next = add nsw i32 %i, 1; %cond = icmp slt i32 %i.next, %n; br i1 %cond, label %body, label %exit. exit:; ret void; }. .. image:: ./loop-terminology-rotated-loop.png; :width: 400 px. Note two things:. * The condition check was moved to the ""bottom"" of the loop, i.e.; the latch. This is something that LoopRotate does by copying the header; of the loop to the latch.; * The compiler in this case can't deduce that the loop will; definitely execute at least once so the above transformation; is not valid. As mentioned above, a guard has to be inserted,; which is something that LoopRotate will do. This is how LoopRotate transforms this loop:. .. code-block:: none. define void @test(i32 %n) {; entry:; %guard_cond = icmp slt i32 0, %n; br i1 %guard_cond, label %loop.preheader, label %exit. loop.preheader:; br label %body. body:; %i2 = phi i32 [ 0, %loop.preheader ], [ %i.n",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LoopTerminology.rst:20309,test,test,20309,interpreter/llvm-project/llvm/docs/LoopTerminology.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LoopTerminology.rst,1,['test'],['test']
Testability,"f (p->i && p) {}; // warn; }. different.MultipleAccessors; (C++); Identical accessor bodies. Possibly a misprint. class A {; int i;; int j;; public:; int getI() { return i; }; int getJ() { return i; } // warn; };. class A {; int i;; int j;; public:; void setI(int& ii) { i = ii; }; void setJ(int& jj) { i = jj; } // warn; };. different.AccessorsForPublic; (C++); Accessors exist for a public class field. Should this field really be; public?. class A {; public:; int i; // warn; int getI() { return i; }; void setI(int& ii) { i = ii; }; };. different.LibFuncResultUnised; (C, C++); Calling a function ignoring its return value is of no use (create the list of; known system/library/API functions falling into this category). #include <vector>. void test() {; std::vector<int> v;; v.empty(); // warn; }. different.WrongVarForStmt; (C, C++); Wrong variable is possibly used in the loop/cond-expression of; the for statement. Did you mean; 'proper_variable_name'?. void test() {; int i = 0;; int j = 0;; for (i = 0; i < 3; j += 1); // warn; }. void test() {; int i = 0;; int j = 0;; for (int j = 0; i < 3; ++j); // warn; }. different.FloatingCompare; (C); Comparing floating point numbers may be not precise. #include <math.h>. double test() {; double b = sin(M_PI / 6.0);; if (b == 0.5) // warn; b = 0;; return b;; }. different.BitwiseOpBoolArg; (C, C++); Boolean value met at the left/right part of the bitwise &; or | operator.; Did you mean && (||) ?. int f();. void test() {; bool b = true;; if (b & f()) {} // warn; }. different.LabelInsideSwitch; (C); Possibly a misprint: label found inside a switch(); statement. void test(int c) {; switch(c){; case 1:; c += 1; break;; defalt: // warn (did you mean 'default'?); c -= 1; break;; }; }. different.IdenticalCondIfIf; (C); The conditions of two subsequent if statements are; identical. int test(int c) {; if (c > 5); c += 1;; if (c > 5) // warn; c -= 1;; return c;; }. different.LogicalOpUselessArg; (C); The second operand of a && operator has no i",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:21401,test,test,21401,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"f ``Statistic`` uses, but the basics of using it are as; follows:. Define your statistic like this:. .. code-block:: c++. #define DEBUG_TYPE ""mypassname"" // This goes after any #includes.; STATISTIC(NumXForms, ""The # of times I did stuff"");. The ``STATISTIC`` macro defines a static variable, whose name is specified by; the first argument. The pass name is taken from the ``DEBUG_TYPE`` macro, and; the description is taken from the second argument. The variable defined; (""NumXForms"" in this case) acts like an unsigned integer. Whenever you make a transformation, bump the counter:. .. code-block:: c++. ++NumXForms; // I did stuff!. That's all you have to do. To get '``opt``' to print out the statistics; gathered, use the '``-stats``' option:. .. code-block:: none. $ opt -stats -mypassname < program.bc > /dev/null; ... statistics output ... Note that in order to use the '``-stats``' option, LLVM must be; compiled with assertions enabled. When running ``opt`` on a C file from the SPEC benchmark suite, it gives a; report that looks like this:. .. code-block:: none. 7646 bitcodewriter - Number of normal instructions; 725 bitcodewriter - Number of oversized instructions; 129996 bitcodewriter - Number of bitcode bytes written; 2817 raise - Number of insts DCEd or constprop'd; 3213 raise - Number of cast-of-self removed; 5046 raise - Number of expression trees converted; 75 raise - Number of other getelementptr's formed; 138 raise - Number of load/store peepholes; 42 deadtypeelim - Number of unused typenames removed from symtab; 392 funcresolve - Number of varargs functions resolved; 27 globaldce - Number of global variables removed; 2 adce - Number of basic blocks removed; 134 cee - Number of branches revectored; 49 cee - Number of setcc instruction eliminated; 532 gcse - Number of loads removed; 2919 gcse - Number of instructions removed; 86 indvars - Number of canonical indvars added; 87 indvars - Number of aux indvars removed; 25 instcombine - Number of dead inst eliminat",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst:48153,benchmark,benchmark,48153,interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,1,['benchmark'],['benchmark']
Testability,"f and only if the function has; returned a non-zero value.; Note that for non-retained out parameters conditionals do not matter, as the; caller has no obligations regardless of whether an object is written into or; not. Custom Assertion Handlers. The analyzer exploits code assertions by pruning off paths where the; assertion condition is false. The idea is capture any program invariants; specified in the assertion that the developer may know but is not immediately; apparent in the code itself. In this way assertions make implicit assumptions; explicit in the code, which not only makes the analyzer more accurate when; finding bugs, but can help others better able to understand your code as well.; It can also help remove certain kinds of analyzer false positives by pruning off; false paths.; In order to exploit assertions, however, the analyzer must understand when it; encounters an ""assertion handler."" Typically assertions are; implemented with a macro, with the macro performing a check for the assertion; condition and, when the check fails, calling an assertion handler. For example, consider the following code; fragment:. void foo(int *p) {; assert(p != NULL);; }. When this code is preprocessed on Mac OS X it expands to the following:. void foo(int *p) {; (__builtin_expect(!(p != NULL), 0) ? __assert_rtn(__func__, ""t.c"", 4, ""p != NULL"") : (void)0);; }. In this example, the assertion handler is __assert_rtn. When called,; most assertion handlers typically print an error and terminate the program. The; analyzer can exploit such semantics by ending the analysis of a path once it; hits a call to an assertion handler.; The trick, however, is that the analyzer needs to know that a called function; is an assertion handler; otherwise the analyzer might assume the function call; returns and it will continue analyzing the path where the assertion condition; failed. This can lead to false positives, as the assertion condition usually; implies a safety condition (e.g., a pointe",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html:20295,assert,assertions,20295,interpreter/llvm-project/clang/www/analyzer/annotations.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html,3,['assert'],"['assertion', 'assertions']"
Testability,"f each other in the same pad. It would be very; inconvenient to set the scale attribute for each histogram in a pad. Furthermore, if the logic was set in the histogram class (or each; object) the scale setting in each `Paint` method of all objects should; be tested. If you have a pad with a histogram, a right-click on the pad, outside of; the histograms frame will convince you. The `SetLogx()`, `SetLogy()` and; `SetLogz()` methods are there. As you see, **`TPad`** defines log scale; for the two directions `x` and `y` plus `z` if you want to draw a 3D; representation of some function or histogram. The way to set log scale in the x direction for the active pad is:. ``` {.cpp}; root[] gPad->SetLogx(1); ```. To reset log in the z direction:. ``` {.cpp}; root[] gPad->SetLogz(0); ```. If you have a divided pad, you need to set the scale on each of the; sub-pads. Setting it on the containing pad does not automatically; propagate to the sub-pads. Here is an example of how to set the log; scale for the x-axis on a canvas with four sub-pads:. ``` {.cpp}; root[] TCanvas MyCanvas(""MyCanvas"",""My Canvas""); root[] MyCanvas->Divide(2,2); root[] MyCanvas->cd(1); root[] gPad->SetLogx(); root[] MyCanvas->cd(2); root[] gPad->SetLogx(); root[] MyCanvas->cd(3); root[] gPad->SetLogx(); ```. ### WaitPrimitive method. When the `TPad::WaitPrimitive()` method is called with no arguments, it; will wait until a double click or any key pressed is executed in the; canvas. A call to `gSystem->Sleep(10)` has been added in the loop to; avoid consuming at all the CPU. This new option is convenient when; executing a macro. By adding statements like:. ``` {.cpp}; canvas->WaitPrimitive();; ```. You can monitor the progress of a running macro, stop it at convenient; places with the possibility to interact with the canvas and resume the; execution with a double click or a key press. ### Locking the Pad. You can make the **`TPad`** non-editable. Then no new objects can be; added, and the existing objects a",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md:30408,log,log,30408,documentation/users-guide/Graphics.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md,1,['log'],['log']
Testability,"f failures: optimizer crashes, miscompilations; by optimizers, or bad native code generation (including problems in the static; and JIT compilers). It aims to reduce large test cases to small, useful ones.; For example, if ``opt`` crashes while optimizing a file, it will identify the; optimization (or combination of optimizations) that causes the crash, and reduce; the file down to a small example which triggers the crash. For detailed case scenarios, such as debugging ``opt``, or one of the LLVM code; generators, see :doc:`HowToSubmitABug`. Design Philosophy; =================. ``bugpoint`` is designed to be a useful tool without requiring any hooks into; the LLVM infrastructure at all. It works with any and all LLVM passes and code; generators, and does not need to ""know"" how they work. Because of this, it may; appear to do stupid things or miss obvious simplifications. ``bugpoint`` is; also designed to trade off programmer time for computer time in the; compiler-debugging process; consequently, it may take a long period of; (unattended) time to reduce a test case, but we feel it is still worth it. Note; that ``bugpoint`` is generally very quick unless debugging a miscompilation; where each test of the program (which requires executing it) takes a long time. Automatic Debugger Selection; ----------------------------. ``bugpoint`` reads each ``.bc`` or ``.ll`` file specified on the command line; and links them together into a single module, called the test program. If any; LLVM passes are specified on the command line, it runs these passes on the test; program. If any of the passes crash, or if they produce malformed output (which; causes the verifier to abort), ``bugpoint`` starts the `crash debugger`_. Otherwise, if the ``-output`` option was not specified, ``bugpoint`` runs the; test program with the ""safe"" backend (which is assumed to generate good code) to; generate a reference output. Once ``bugpoint`` has a reference output for the; test program, it tries exe",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst:1350,test,test,1350,interpreter/llvm-project/llvm/docs/Bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst,1,['test'],['test']
Testability,"f find_all_queries(j):; queries = []; for key in j:; # ! means it is some metadata, not a def.; if not key.startswith(""!""):; value = full_json[key]; # If we inherit from Query.; if ""Query"" in value[""!superclasses""]:; queries.append(value); return queries. queries = find_all_queries(full_json); ; print([q[""!name""] for q in queries]); ```. ['anonymous_0', 'anonymous_1', 'anonymous_2', 'anonymous_3', 'anonymous_4']. Why are the names `anonymous_...`? When we defined them we did `def :` and missed out the name. This is allowed and `llvm-tblgen` just came up with a name for us. For this purpose the names are irrelevant. Now we have the relevant classes we need to ""emit"" them. Meaning produce something from them, in this case a SQL query. ```python; def emit_operator(operator):; return {; 'gt': ' > ',; 'ge': ' >= ',; 'lt': ' < ',; 'le': ' <= ',; 'ne': ' <> ',; 'eq': ' = ',; 'or': ' OR ',; 'and': ' AND '; }[operator]. print(emit_operator('and')); ```. AND . The maps our TableGen constants to the equivalent SQL logical operation. ```python; def emit_fields(args):; # Return a comma separated list of arg names.; return "", "".join([arg[0] for arg in args]). print(emit_fields([[""Abc"", None], [""Def"", None]])); ```. Abc, Def. This emits the the fields we are selecting. Each field has a name (`arg[0]`) and an optional tag that we will use later. ```python; from collections.abc import Mapping. def emit_where_clause(where_clause):; output = """"; num_args = len(where_clause[""args""]); ; for idx, arg in enumerate(where_clause[""args""]):; arg_name, arg_type = arg. if isinstance(arg_name, Mapping):; # This is a nested where clause.; output += emit_where_clause(arg_name); else:; # This is some condition.; if arg_type == ""str"":; # String types must be emitted with """" around them.; output += '""' + arg_name + '""'; else:; output += str(arg_name). # If this is not the last arg, emit the condition.; if idx != (num_args-1):; output += emit_operator(where_clause[""operator""][""def""]); ; return output. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/sql_query_backend.md:12019,log,logical,12019,interpreter/llvm-project/llvm/utils/TableGen/jupyter/sql_query_backend.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/jupyter/sql_query_backend.md,1,['log'],['logical']
Testability,"f grep in RUN; lines is deprecated - please do not send or commit patches that use it.]*. Put related tests into a single file rather than having a separate file per; test. Check if there are files already covering your feature and consider; adding your code there instead of creating a new file. Generating assertions in regression tests; -----------------------------------------. Some regression test cases are very large and complex to write/update by hand.; In that case to reduce the human work we can use the scripts available in; llvm/utils/ to generate the assertions. For example to generate assertions in an :program:`llc`-based test, after; adding one or more RUN lines use:. .. code-block:: bash. % llvm/utils/update_llc_test_checks.py --llc-binary build/bin/llc test.ll. This will generate FileCheck assertions, and insert a ``NOTE:`` line at the; top to indicate that assertions were automatically generated. If you want to update assertions in an existing test case, pass the `-u` option; which first checks the ``NOTE:`` line exists and matches the script name. Sometimes a test absolutely depends on hand-written assertions and should not; have assertions automatically generated. In that case, add the text ``NOTE: Do; not autogenerate`` to the first line, and the scripts will skip that test. It; is a good idea to explain why generated assertions will not work for the test; so future developers will understand what is going on. These are the most common scripts and their purposes/applications in generating; assertions:. .. code-block:: none. update_analyze_test_checks.py; opt -passes='print<cost-model>'. update_cc_test_checks.py; C/C++, or clang/clang++ (IR checks). update_llc_test_checks.py; llc (assembly checks). update_mca_test_checks.py; llvm-mca. update_mir_test_checks.py; llc (MIR checks). update_test_checks.py; opt. Precommit workflow for tests; ----------------------------. If the test does not crash, assert, or infinite loop, commit the test with; baseline ch",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:11797,assert,assertions,11797,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,2,"['assert', 'test']","['assertions', 'test']"
Testability,"f only the corresponding branch starting; from this volume is the active geometry.**. ![A geometry hierarchy in memory](pictures/030001CE.png). Nodes are never instantiated directly by users, but created as a result; of volume operations. Adding a volume named A with a given `user id`; inside a volume B will create a node named `A_id.` This will be added to; the list of nodes stored by B. In addition, when applying a division; operation in N slices to a volume A, a list of nodes `B_1`, `B_2`, ... ,; `B_N` is also created. A node `B_i` does not represent a unique object; in the geometry because its container A might be at its turn positioned; as node inside several other volumes. Only when a complete branch of; nodes is fully defined up to the top node in the geometry, a given; path:` /TOP_1/`...`/A_3/B_7` will represent a unique object. Its global; transformation matrix can be computed as the pile-up of all local; transformations in its branch. We will therefore call `logical graph`; the hierarchy defined by nodes and volumes. The expansion of the logical; graph by all possible paths defines a tree structure where all nodes are; unique ""touchable"" objects. We will call this the ""physical tree"".; Unlike the logical graph, the physical tree can become a huge structure; with several millions of nodes in case of complex geometries; therefore,; it is not always a good idea to keep it transient in memory. Since the; logical and physical structures are correlated, the modeller rather; keeps track only of the current branch, updating the current global; matrix at each change of the level in geometry. The current physical; node is not an object that can be asked for at a given moment, but; rather represented by the combination: current node/current global; matrix. However, physical nodes have unique ID's that can be retrieved; for a given modeller state. These can be fed back to the modeller in; order to force a physical node to become current. The advantage of this; comes f",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md:61241,log,logical,61241,documentation/users-guide/Geometry.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md,1,['log'],['logical']
Testability,"f passes. For example,; prefer ``opt -S -passes=instcombine`` over ``opt -S -O3``.; - Avoid unnamed instructions/blocks (such as ``%0`` or ``1:``), because they may; require renumbering on future test modifications. These can be removed by; running the test through ``opt -S -passes=instnamer``.; - Try to give values (including variables, blocks and functions) meaningful; names, and avoid retaining complex names generated by the optimization; pipeline (such as ``%foo.0.0.0.0.0.0``). Extra files; -----------. If your test requires extra files besides the file containing the ``RUN:`` lines; and the extra files are small, consider specifying them in the same file and; using ``split-file`` to extract them. For example,. .. code-block:: llvm. ; RUN: split-file %s %t; ; RUN: llvm-link -S %t/a.ll %t/b.ll | FileCheck %s. ; CHECK: ... ;--- a.ll; ...; ;--- b.ll; ... The parts are separated by the regex ``^(.|//)--- <part>``. If you want to test relative line numbers like ``[[#@LINE+1]]``, specify; ``--leading-lines`` to add leading empty lines to preserve line numbers. If the extra files are large, the idiomatic place to put them is in a subdirectory ``Inputs``.; You can then refer to the extra files as ``%S/Inputs/foo.bar``. For example, consider ``test/Linker/ident.ll``. The directory structure is; as follows::. test/; Linker/; ident.ll; Inputs/; ident.a.ll; ident.b.ll. For convenience, these are the contents:. .. code-block:: llvm. ;;;;; ident.ll:. ; RUN: llvm-link %S/Inputs/ident.a.ll %S/Inputs/ident.b.ll -S | FileCheck %s. ; Verify that multiple input llvm.ident metadata are linked together. ; CHECK-DAG: !llvm.ident = !{!0, !1, !2}; ; CHECK-DAG: ""Compiler V1""; ; CHECK-DAG: ""Compiler V2""; ; CHECK-DAG: ""Compiler V3"". ;;;;; Inputs/ident.a.ll:. !llvm.ident = !{!0, !1}; !0 = metadata !{metadata !""Compiler V1""}; !1 = metadata !{metadata !""Compiler V2""}. ;;;;; Inputs/ident.b.ll:. !llvm.ident = !{!0}; !0 = metadata !{metadata !""Compiler V3""}. For symmetry reasons, ``ident.ll`` is ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:15085,test,test,15085,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"f primitives. It does not paint the object on the screen. However,; `TTree::Draw` when called with option ""`same`"" gets the current pad; coordinates to build an intermediate histogram with the right limits.; Since nothing has been painted in the pad yet, the pad limits have not; been computed. Calling `pad->Update()` forces the painting of the pad; and allows `TTree::Draw` to compute the right limits for the; intermediate histogram. ### Setting the Range in TTree::Draw. There are two more optional parameters to the `TTree::Draw` method: one; is the number of entries and the second one is the entry to start with.; For example, this command draws 1000 entries starting with entry 100:. ``` {.cpp}; myTree->Draw(""Cost:Age"", """","""",1000,100);; ```. ### TTree::Draw Examples. The examples below use the `Event.root` file generated by the; `$ROOTSYS/test/Event` executable and the `Event`, `Track`, and; `EventHeader` class definitions are in `$ROOTSYS/test/Event.h`. The; commands have been tested on the split-levels 0, 1, and 9. Each command; is numbered and referenced by the explanations immediately following the; examples. ``` {.cpp}; // Data members and methods; 1 tree->Draw(""fNtrack"");; 2 tree->Draw(""event.GetNtrack()"");; 3 tree->Draw(""GetNtrack()"");; 4 tree->Draw(""fH.fXaxis.fXmax"");; 5 tree->Draw(""fH.fXaxis.GetXmax()"");; 6 tree->Draw(""fH.GetXaxis().fXmax"");; 7 tree->Draw(""GetHistogram().GetXaxis().GetXmax()"");; // Expressions in the selection parameter; 8 tree->Draw(""fTracks.fPx"",""fEvtHdr.fEvtNum%10 == 0"");; 9 tree->Draw(""fPx"",""fEvtHdr.fEvtNum%10 == 0"");; // Two dimensional arrays defined as:; // Float_t fMatrix[4][4] in Event class; 10 tree->Draw(""fMatrix"");; 11 tree->Draw(""fMatrix[ ][ ]"");; 12 tree->Draw(""fMatrix[2][2]"");; 13 tree->Draw(""fMatrix[ ][0]"");; 14 tree->Draw(""fMatrix[1][ ]"");; // using two arrays... Float_t fVertex[3]; in Track class; 15 tree->Draw(""fMatrix - fVertex"");; 16 tree->Draw(""fMatrix[2][1] - fVertex[5][1]"");; 17 tree->Draw(""fMatrix[ ][1] - fVertex[5]",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md:77027,test,tested,77027,documentation/users-guide/Trees.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md,1,['test'],['tested']
Testability,"f production environments, this; impact is too high, and GWP-ASan proves extremely useful. Design; ======. **Please note:** The implementation of GWP-ASan is largely in-flux, and these; details are subject to change. There are currently other implementations of; GWP-ASan, such as the implementation featured in; `Chromium <https://cs.chromium.org/chromium/src/components/gwp_asan/>`_. The; long-term support goal is to ensure feature-parity where reasonable, and to; support compiler-rt as the reference implementation. Allocator Support; -----------------. GWP-ASan is not a replacement for a traditional allocator. Instead, it works by; inserting stubs into a supporting allocator to redirect allocations to GWP-ASan; when they're chosen to be sampled. These stubs are generally implemented in the; implementation of ``malloc()``, ``free()`` and ``realloc()``. The stubs are; extremely small, which makes using GWP-ASan in most allocators fairly trivial.; The stubs follow the same general pattern (example ``malloc()`` pseudocode; below):. .. code:: cpp. #ifdef INSTALL_GWP_ASAN_STUBS; gwp_asan::GuardedPoolAllocator GWPASanAllocator;; #endif. void* YourAllocator::malloc(..) {; #ifdef INSTALL_GWP_ASAN_STUBS; if (GWPASanAllocator.shouldSample(..)); return GWPASanAllocator.allocate(..);; #endif. // ... the rest of your allocator code here.; }. Then, all the supporting allocator needs to do is compile with; ``-DINSTALL_GWP_ASAN_STUBS`` and link against the GWP-ASan library! For; performance reasons, we strongly recommend static linkage of the GWP-ASan; library. Guarded Allocation Pool; -----------------------. The core of GWP-ASan is the guarded allocation pool. Each sampled allocation is; backed using its own *guarded* slot, which may consist of one or more accessible; pages. Each guarded slot is surrounded by two *guard* pages, which are mapped as; inaccessible. The collection of all guarded slots makes up the *guarded; allocation pool*. Buffer Underflow/Overflow Detection; ------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GwpAsan.rst:2529,stub,stubs,2529,interpreter/llvm-project/llvm/docs/GwpAsan.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GwpAsan.rst,1,['stub'],['stubs']
Testability,"f small; integers. Initially, each integer in the range 0..n-1 has its own equivalence; class. Classes can be joined by passing two class representatives to the; join(a, b) method. Two integers are in the same class when findLeader() returns; the same representative. Once all equivalence classes are formed, the map can be compressed so each; integer 0..n-1 maps to an equivalence class number in the range 0..m-1, where m; is the total number of equivalence classes. The map must be uncompressed before; it can be edited again. .. _dss_immutablemap:. llvm/ADT/ImmutableMap.h; ^^^^^^^^^^^^^^^^^^^^^^^. ImmutableMap is an immutable (functional) map implementation based on an AVL; tree. Adding or removing elements is done through a Factory object and results; in the creation of a new ImmutableMap object. If an ImmutableMap already exists; with the given key set, then the existing one is returned; equality is compared; with a FoldingSetNodeID. The time and space complexity of add or remove; operations is logarithmic in the size of the original map. .. _dss_othermap:. Other Map-Like Container Options; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The STL provides several other options, such as std::multimap and; std::unordered_map. We never use containers like unordered_map because; they are generally very expensive (each insertion requires a malloc). std::multimap is useful if you want to map a key to multiple values, but has all; the drawbacks of std::map. A sorted vector or some other approach is almost; always better. .. _ds_bit:. Bit storage containers; ------------------------------------------------------------------------. There are several bit storage containers, and choosing when to use each is; relatively straightforward. One additional option is ``std::vector<bool>``: we discourage its use for two; reasons 1) the implementation in many common compilers (e.g. commonly; available versions of GCC) is extremely inefficient and 2) the C++ standards; committee is likely to deprecate ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst:95806,log,logarithmic,95806,interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,1,['log'],['logarithmic']
Testability,"f the **--tool-args**; option, not as options to **bugpoint** itself. (See **--args**, above.). **--safe-tool-args** *tool args*. Pass all arguments specified after **--safe-tool-args** to the ""safe"" execution; tool. **--gcc-tool-args** *gcc tool args*. Pass all arguments specified after **--gcc-tool-args** to the invocation of; **gcc**. **--opt-args** *opt args*. Pass all arguments specified after **--opt-args** to the invocation of **opt**. **--disable-{dce,simplifycfg}**. Do not run the specified passes to clean up and reduce the size of the test; program. By default, **bugpoint** uses these passes internally when attempting to; reduce test programs. If you're trying to find a bug in one of these passes,; **bugpoint** may crash. **--enable-valgrind**. Use valgrind to find faults in the optimization phase. This will allow; bugpoint to find otherwise asymptomatic problems caused by memory; mis-management. **-find-bugs**. Continually randomize the specified passes and run them on the test program; until a bug is found or the user kills **bugpoint**. **-help**. Print a summary of command line options. **--input** *filename*. Open *filename* and redirect the standard input of the test program, whenever; it runs, to come from that file. **--load** *plugin*. Load the dynamic object *plugin* into **bugpoint** itself. This object should; register new optimization passes. Once loaded, the object will add new command; line options to enable various optimizations. To see the new complete list of; optimizations, use the **-help** and **--load** options together; for example:. .. code-block:: bash. bugpoint --load myNewPass.so -help. **--mlimit** *megabytes*. Specifies an upper limit on memory usage of the optimization and codegen. Set; to zero to disable the limit. **--output** *filename*. Whenever the test program produces output on its standard output stream, it; should match the contents of *filename* (the ""reference output""). If you; do not use this option, **bugpoint** w",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst:3037,test,test,3037,interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst,1,['test'],['test']
Testability,"f the bug, how many people it affects and if it's a regression; or a known bug. Known bugs are ""unsupported features"" and some bugs can be; disabled if they have been implemented recently. * The stage in the release. Less critical bugs should be considered to be; fixed between RC1 and RC2, but not so much at the end of it. * If it's a correctness or a performance regression. Performance regression; tends to be taken more lightly than correctness. .. _scripts:. Scripts; =======. The scripts are in the ``utils/release`` directory. test-release.sh; ---------------. This script will check-out, configure and compile LLVM+Clang (+ most add-ons,; like ``compiler-rt``, ``libcxx``, ``libomp`` and ``clang-extra-tools``) in; three stages, and will test the final stage.; It'll have installed the final binaries on the Phase3/Releasei(+Asserts); directory, and that's the one you should use for the test-suite and other; external tests. To run the script on a specific release candidate run::. ./test-release.sh \; -release 3.3 \; -rc 1 \; -no-64bit \; -test-asserts \; -no-compare-files. Each system will require different options. For instance, x86_64 will; obviously not need ``-no-64bit`` while 32-bit systems will, or the script will; fail. The important flags to get right are:. * On the pre-release, you should change ``-rc 1`` to ``-final``. On RC2,; change it to ``-rc 2`` and so on. * On non-release testing, you can use ``-final`` in conjunction with; ``-no-checkout``, but you'll have to create the ``final`` directory by hand; and link the correct source dir to ``final/llvm.src``. * For release candidates, you need ``-test-asserts``, or it won't create a; ""Release+Asserts"" directory, which is needed for release testing and; benchmarking. This will take twice as long. * On the final candidate you just need Release builds, and that's the binary; directory you'll have to pack. * On macOS, you must export ``MACOSX_DEPLOYMENT_TARGET=10.9`` before running; the script. This script builds",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ReleaseProcess.rst:2064,test,test-release,2064,interpreter/llvm-project/llvm/docs/ReleaseProcess.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ReleaseProcess.rst,1,['test'],['test-release']
Testability,"f the first argument to `llvm.coro.suspend` is; token `none`. If a user calls `__builin_suspend`, clang will insert `token none`; as the first argument to the intrinsic. Source location builtins; ------------------------. Clang provides builtins to support C++ standard library implementation; of ``std::source_location`` as specified in C++20. With the exception; of ``__builtin_COLUMN``, ``__builtin_FILE_NAME`` and ``__builtin_FUNCSIG``,; these builtins are also implemented by GCC. **Syntax**:. .. code-block:: c. const char *__builtin_FILE();; const char *__builtin_FILE_NAME(); // Clang only; const char *__builtin_FUNCTION();; const char *__builtin_FUNCSIG(); // Microsoft; unsigned __builtin_LINE();; unsigned __builtin_COLUMN(); // Clang only; const std::source_location::__impl *__builtin_source_location();. **Example of use**:. .. code-block:: c++. void my_assert(bool pred, int line = __builtin_LINE(), // Captures line of caller; const char* file = __builtin_FILE(),; const char* function = __builtin_FUNCTION()) {; if (pred) return;; printf(""%s:%d assertion failed in function %s\n"", file, line, function);; std::abort();; }. struct MyAggregateType {; int x;; int line = __builtin_LINE(); // captures line where aggregate initialization occurs; };; static_assert(MyAggregateType{42}.line == __LINE__);. struct MyClassType {; int line = __builtin_LINE(); // captures line of the constructor used during initialization; constexpr MyClassType(int) { assert(line == __LINE__); }; };. **Description**:. The builtins ``__builtin_LINE``, ``__builtin_FUNCTION``, ``__builtin_FUNCSIG``,; ``__builtin_FILE`` and ``__builtin_FILE_NAME`` return the values, at the; ""invocation point"", for ``__LINE__``, ``__FUNCTION__``, ``__FUNCSIG__``,; ``__FILE__`` and ``__FILE_NAME__`` respectively. ``__builtin_COLUMN`` similarly; returns the column, though there is no corresponding macro. These builtins are; constant expressions. When the builtins appear as part of a default function argument the invocat",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LanguageExtensions.rst:148537,assert,assertion,148537,interpreter/llvm-project/clang/docs/LanguageExtensions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LanguageExtensions.rst,1,['assert'],['assertion']
Testability,"f the program that as they are excluded from the testcase.; These options allow you to choose the; static native code compiler, or a custom command, (see **--exec-command**); respectively. The interpreter and the JIT backends cannot currently; be used as the ""safe"" backends. **--exec-command** *command*. This option defines the command to use with the **--run-custom** and; **--safe-custom** options to execute the bitcode testcase. This can; be useful for cross-compilation. **--compile-command** *command*. This option defines the command to use with the **--compile-custom**; option to compile the bitcode testcase. The command should exit with a; failure exit code if the file is ""interesting"" and should exit with a; success exit code (i.e. 0) otherwise (this is the same as if it crashed on; ""interesting"" inputs). This can be useful for; testing compiler output without running any link or execute stages. To; generate a reduced unit test, you may add CHECK directives to the; testcase and pass the name of an executable compile-command script in this form:. .. code-block:: sh. #!/bin/sh; llc ""$@""; not FileCheck [bugpoint input file].ll < bugpoint-test-program.s. This script will ""fail"" as long as FileCheck passes. So the result; will be the minimum bitcode that passes FileCheck. **--safe-path** *path*. This option defines the path to the command to execute with the; **--safe-{int,jit,llc,custom}**; option. **--verbose-errors**\ =\ *{true,false}*. The default behavior of bugpoint is to print ""<crash>"" when it finds a reduced; test that crashes compilation. This flag prints the output of the crashing; program to stderr. This is useful to make sure it is the same error being; tracked down and not a different error that happens to crash the compiler as; well. Defaults to false. EXIT STATUS; -----------. If **bugpoint** succeeds in finding a problem, it will exit with 0. Otherwise,; if an error occurs, it will exit with a non-zero value. SEE ALSO; --------. :manpage:`opt(1)`; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst:5892,test,test-program,5892,interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst,2,['test'],"['test', 'test-program']"
Testability,"f the way the function parses; spaces.; Source: ; MSDN: CreateProcess function, Security Remarks. #include <windows.h>. void test() {; STARTUPINFO si;; PROCESS_INFORMATION pi;; CreateProcess(NULL, TEXT(""C:\\Program Files\\App -L -S""),; NULL, NULL, TRUE, 0, NULL, NULL, &si, π);; // warn; }. WinAPI.LoadLibrary; (C); The SearchPath() function is used to retrieve a path to a DLL for; a subsequent LoadLibrary() call.; Source: ; MSDN: LoadLibrary function, Security Remarks. #include <windows.h>. HINSTANCE test() {; char filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfix forms of increment and decrement; operators. #include <vector>. void test() {; std::vector<int> v;; std::vector<int>::const_iterator it;; for(it = v.begin();; it != v.end(); it++) {}; // warn; }. optimization.MultipleCallsStrlen; (C); Optimization: multiple calls to strlen() for a string in an; expression. It is more effective to hold a value returned; from strlen() in a temporary variable. #include <string.h>. void test(const char* s) {; if (strlen(s) > 0 &&; strlen(",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:27098,test,test,27098,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"f.mcdc.tvbitmap.update``' intrinsic is used to track MC/DC; test vector execution after each boolean expression has been fully executed.; The overall value of the condition bitmap, after it has been successively; updated using the '``llvm.instrprof.mcdc.condbitmap.update``' intrinsic with; the true or false evaluation of each condition, uniquely identifies an executed; MC/DC test vector and is used as a bit index into the global test vector; bitmap. Arguments:; """""""""""""""""""". The first argument is a pointer to a global variable containing the; name of the entity being instrumented. This should generally be the; (mangled) function name for a set of counters. The second argument is a hash value that can be used by the consumer; of the profile data to detect changes to the instrumented source. The third argument is the number of bitmap bytes required by the function to; record the number of test vectors executed for each boolean expression. The fourth argument is the byte index into the global test vector bitmap; corresponding to the function. The fifth argument is the address of the condition bitmap, which contains a; value representing an executed MC/DC test vector. It is loaded and used as the; bit index of the test vector bitmap. Semantics:; """""""""""""""""""". This intrinsic represents the final operation of an MC/DC instrumentation; sequence and will cause the ``-instrprof`` pass to generate the code to; instrument an update of a function's global test vector bitmap to indicate that; a test vector has been executed. The global test vector bitmap can be consumed; by the ``llvm-profdata`` and ``llvm-cov`` tools. '``llvm.thread.pointer``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare ptr @llvm.thread.pointer(). Overview:; """""""""""""""""". The '``llvm.thread.pointer``' intrinsic returns the value of the thread; pointer. Semantics:; """""""""""""""""""". The '``llvm.thread.pointer``' intrinsic returns a pointer to the TLS area; for the current thread. The exact se",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:536065,test,test,536065,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"f64-x86-64. [001] {CompileUnit} 'pr-43860.cpp'; [004] {Variable} 'Var_1' -> 'int'; [003] 3 {Variable} 'Var_1' -> 'int'; [005] {Variable} 'Var_2' -> 'int'; [004] 5 {Variable} 'Var_2' -> 'int'. Logical View:; [000] {File} 'pr-43860-dwarf-gcc.o' -> elf64-x86-64. [001] {CompileUnit} 'pr-43860.cpp'; [004] {Variable} 'Var_1' -> 'int'; [003] 3 {Variable} 'Var_1' -> 'int'; [005] {Variable} 'Var_2' -> 'int'; [004] 5 {Variable} 'Var_2' -> 'int'. It also shows, that the CodeView debug information does not generate; source code line numbers for the those logical symbols. The logical; view is sorted by the types name. TEST CASE 6 - FULL LOGICAL VIEW; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; For advanced users, :program:`llvm-debuginfo-analyzer` can display low; level information that includes offsets within the debug information; section, debug location operands, linkage names, etc. .. code-block:: none. llvm-debuginfo-analyzer --attribute=all; --print=all; test-dwarf-clang.o. Logical View:; [0x0000000000][000] {File} 'test-dwarf-clang.o' -> elf64-x86-64. [0x000000000b][001] {CompileUnit} 'test.cpp'; [0x000000000b][002] {Producer} 'clang version 12.0.0'; {Directory} ''; {File} 'test.cpp'; {Public} 'foo' [0x0000000000:0x000000003a]; [0x000000000b][002] {Range} Lines 2:9 [0x0000000000:0x000000003a]; [0x00000000bc][002] {BaseType} 'bool'; [0x0000000099][002] {BaseType} 'int'; [0x00000000b5][002] {BaseType} 'unsigned int'. [0x00000000a0][002] {Source} '/test.cpp'; [0x00000000a0][002] 1 {TypeAlias} 'INTPTR' -> [0x00000000ab]'* const int'; [0x000000002a][002] 2 {Function} extern not_inlined 'foo' -> [0x0000000099]'int'; [0x000000002a][003] {Range} Lines 2:9 [0x0000000000:0x000000003a]; [0x000000002a][003] {Linkage} 0x2 '_Z3fooPKijb'; [0x0000000071][003] {Block}; [0x0000000071][004] {Range} Lines 5:8 [0x000000001c:0x000000002f]; [0x000000007e][004] 5 {Variable} 'CONSTANT' -> [0x00000000c3]'const INTEGER'; [0x000000007e][005] {Coverage} 100.00%; [0x000000007f][005] {Location}; [0x000000007f][006",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:55196,test,test-dwarf-clang,55196,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['test'],['test-dwarf-clang']
Testability,"f:`floating-point <t_floating>` or :ref:`vector <t_vector>`; of floating-point values. The second argument specifies, which tests to perform. It must be a compile-time; integer constant, each bit in which specifies floating-point class:. +-------+----------------------+; | Bit # | floating-point class |; +=======+======================+; | 0 | Signaling NaN |; +-------+----------------------+; | 1 | Quiet NaN |; +-------+----------------------+; | 2 | Negative infinity |; +-------+----------------------+; | 3 | Negative normal |; +-------+----------------------+; | 4 | Negative subnormal |; +-------+----------------------+; | 5 | Negative zero |; +-------+----------------------+; | 6 | Positive zero |; +-------+----------------------+; | 7 | Positive subnormal |; +-------+----------------------+; | 8 | Positive normal |; +-------+----------------------+; | 9 | Positive infinity |; +-------+----------------------+. Semantics:; """""""""""""""""""". The function checks if ``op`` belongs to any of the floating-point classes; specified by ``test``. If ``op`` is a vector, then the check is made element by; element. Each check yields an :ref:`i1 <t_integer>` result, which is ``true``,; if the element value satisfies the specified test. The argument ``test`` is a; bit mask where each bit specifies floating-point class to test. For example, the; value 0x108 makes test for normal value, - bits 3 and 8 in it are set, which; means that the function returns ``true`` if ``op`` is a positive or negative; normal value. The function never raises floating-point exceptions. The; function does not canonicalize its input value and does not depend; on the floating-point environment. If the floating-point environment; has a zeroing treatment of subnormal input values (such as indicated; by the ``""denormal-fp-math""`` attribute), a subnormal value will be; observed (will not be implicitly treated as zero). General Intrinsics; ------------------. This class of intrinsics is designed to be generic and ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:923118,test,test,923118,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"f>`_. Introduction; ============. Clang's AST is different from ASTs produced by some other compilers in; that it closely resembles both the written C++ code and the C++; standard. For example, parenthesis expressions and compile time; constants are available in an unreduced form in the AST. This makes; Clang's AST a good fit for refactoring tools. Documentation for all Clang AST nodes is available via the generated; `Doxygen <https://clang.llvm.org/doxygen>`_. The doxygen online; documentation is also indexed by your favorite search engine, which will; make a search for clang and the AST node's class name usually turn up; the doxygen of the class you're looking for (for example, search for:; clang ParenExpr). Examining the AST; =================. A good way to familiarize yourself with the Clang AST is to actually look; at it on some simple example code. Clang has a builtin AST-dump mode,; which can be enabled with the flag ``-ast-dump``. Let's look at a simple example AST:. ::. $ cat test.cc; int f(int x) {; int result = (x / 42);; return result;; }. # Clang by default is a frontend for many tools; -Xclang is used to pass; # options directly to the C++ frontend.; $ clang -Xclang -ast-dump -fsyntax-only test.cc; TranslationUnitDecl 0x5aea0d0 <<invalid sloc>>; ... cutting out internal declarations of clang ...; `-FunctionDecl 0x5aeab50 <test.cc:1:1, line:4:1> f 'int (int)'; |-ParmVarDecl 0x5aeaa90 <line:1:7, col:11> x 'int'; `-CompoundStmt 0x5aead88 <col:14, line:4:1>; |-DeclStmt 0x5aead10 <line:2:3, col:24>; | `-VarDecl 0x5aeac10 <col:3, col:23> result 'int'; | `-ParenExpr 0x5aeacf0 <col:16, col:23> 'int'; | `-BinaryOperator 0x5aeacc8 <col:17, col:21> 'int' '/'; | |-ImplicitCastExpr 0x5aeacb0 <col:17> 'int' <LValueToRValue>; | | `-DeclRefExpr 0x5aeac68 <col:17> 'int' lvalue ParmVar 0x5aeaa90 'x' 'int'; | `-IntegerLiteral 0x5aeac90 <col:21> 'int' 42; `-ReturnStmt 0x5aead68 <line:3:3, col:10>; `-ImplicitCastExpr 0x5aead50 <col:10> 'int' <LValueToRValue>; `-DeclRefExp",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/IntroductionToTheClangAST.rst:1533,test,test,1533,interpreter/llvm-project/clang/docs/IntroductionToTheClangAST.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/IntroductionToTheClangAST.rst,1,['test'],['test']
Testability,"failed.; Moreover, :program:`lit` inserts ``'RUN: at line N'`` before each; command pipeline in the output to help you locate the source line of; the failed command. .. option:: -vv, --echo-all-commands. Deprecated alias for -v. .. option:: -a, --show-all. Enable -v, but for all tests not just failed tests. .. option:: --no-progress-bar. Do not use curses based progress bar. .. option:: --show-unsupported. Show the names of unsupported tests. .. option:: --show-xfail. Show the names of tests that were expected to fail. .. _execution-options:. EXECUTION OPTIONS; -----------------. .. option:: --path=PATH. Specify an additional ``PATH`` to use when searching for executables in tests. .. option:: --vg. Run individual tests under valgrind (using the memcheck tool). The; ``--error-exitcode`` argument for valgrind is used so that valgrind failures; will cause the program to exit with a non-zero status. When this option is enabled, :program:`lit` will also automatically provide a; ""``valgrind``"" feature that can be used to conditionally disable (or expect; failure in) certain tests. .. option:: --vg-arg=ARG. When :option:`--vg` is used, specify an additional argument to pass to; :program:`valgrind` itself. .. option:: --vg-leak. When :option:`--vg` is used, enable memory leak checks. When this option is; enabled, :program:`lit` will also automatically provide a ""``vg_leak``""; feature that can be used to conditionally disable (or expect failure in); certain tests. .. option:: --time-tests. Track the wall time individual tests take to execute and includes the results; in the summary output. This is useful for determining which tests in a test; suite take the most time to execute. .. option:: --ignore-fail. Exit with status zero even if some tests fail. .. _selection-options:. SELECTION OPTIONS; -----------------. By default, `lit` will run failing tests first, then run tests in descending; execution time order to optimize concurrency. The execution order can be; changed using",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:4620,test,tests,4620,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['tests']
Testability,"faster to build this time, but the tests take; just as long to run. Ninja doesn't know which tests might be affected,; so it runs them all. .. code:: console. ********************; Testing Time: 408.84s; ********************; Failing Tests (1):; Clang :: SemaCXX/warn-infinite-recursion.cpp. Well, that makes sense… and the test output suggests it's looking for; the old string ""call itself"" and finding our new message instead.; Note that more tests may fail in a similar way as new tests are; added time to time. Let's fix it by updating the expectation in the test. .. code:: console. $ vi ../clang/test/SemaCXX/warn-infinite-recursion.cpp. Everywhere we see `// expected-warning{{call itself}}` (or something similar; from the original warning text), let's replace it with; `// expected-warning{{to understand recursion}}`. Now we could run **all** the tests again, but this is a slow way to; iterate on a change! Instead, let's find a way to re-run just the; specific test. There are two main types of tests in LLVM:. - **lit tests** (e.g. SemaCXX/warn-infinite-recursion.cpp). These are fancy shell scripts that run command-line tools and verify the; output. They live in files like; clang/**test**/FixIt/dereference-addressof.c. Re-run like this:. .. code:: console. $ bin/llvm-lit -v ../clang/test/SemaCXX/warn-infinite-recursion.cpp. - **unit tests** (e.g. ToolingTests/ReplacementTest.CanDeleteAllText). These are C++ programs that call LLVM functions and verify the results.; They live in suites like ToolingTests. Re-run like this:. .. code:: console. $ ninja ToolingTests && tools/clang/unittests/Tooling/ToolingTests; --gtest_filter=ReplacementTest.CanDeleteAllText. Commit locally; --------------. We'll save the change to a local git branch. This lets us work on other; things while the change is being reviewed. Changes should have a; description, to explain to reviewers and future readers of the code why; the change was made. .. code:: console. $ git checkout -b myfirstpatch; $ g",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst:7497,test,tests,7497,interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,1,['test'],['tests']
Testability,"fault logic for library IDs; on Darwin in the build tree will be used. Otherwise the install-time library; IDs will be used in the build tree as well. Mainly useful when other CMake; library ID control variables (e.g., ``CMAKE_INSTALL_NAME_DIR``) are being; set to non-standard values. **LLVM_OPTIMIZED_TABLEGEN**:BOOL; If enabled and building a debug or asserts build the CMake build system will; generate a Release build tree to build a fully optimized tablegen for use; during the build. Enabling this option can significantly speed up build times; especially when building LLVM in Debug configurations. **LLVM_PARALLEL_COMPILE_JOBS**:STRING; Define the maximum number of concurrent compilation jobs. **LLVM_PARALLEL_LINK_JOBS**:STRING; Define the maximum number of concurrent link jobs. **LLVM_RAM_PER_COMPILE_JOB**:STRING; Calculates the amount of Ninja compile jobs according to available resources.; Value has to be in MB, overwrites LLVM_PARALLEL_COMPILE_JOBS. Compile jobs ; will be between one and amount of logical cores. **LLVM_RAM_PER_LINK_JOB**:STRING; Calculates the amount of Ninja link jobs according to available resources.; Value has to be in MB, overwrites LLVM_PARALLEL_LINK_JOBS. Link jobs will ; be between one and amount of logical cores. Link jobs will not run ; exclusively therefore you should add an offset of one or two compile jobs ; to be sure its not terminated in your memory restricted environment. On ELF; platforms also consider ``LLVM_USE_SPLIT_DWARF`` in Debug build. **LLVM_PROFDATA_FILE**:PATH; Path to a profdata file to pass into clang's -fprofile-instr-use flag. This; can only be specified if you're building with clang. **LLVM_REVERSE_ITERATION**:BOOL; If enabled, all supported unordered llvm containers would be iterated in; reverse order. This is useful for uncovering non-determinism caused by; iteration of unordered containers. **LLVM_STATIC_LINK_CXX_STDLIB**:BOOL; Statically link to the C++ standard library if possible. This uses the flag; ""-stat",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst:32806,log,logical,32806,interpreter/llvm-project/llvm/docs/CMake.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst,1,['log'],['logical']
Testability,"fault value Predefined values Description. SplitMode No Random Random, Alternate, Block Method of picking training and testing events (default: random). MixMode No SameAsSplitMode SameAsSplitMode, Random, Alternate, Block Method of mixing events of differnt classes into one dataset (default: SameAsSplitMode). SplitSeed No 100 − Seed for random event shuffling. NormMode No EqualNumEvents None, NumEvents, EqualNumEvents Overall renormalisation of event-by-event weights used in the training (NumEvents: average weight of 1 per event, independently for signal and background; EqualNumEvents: average weight of 1 per event for signal, and sum of weights for background equal to sum of weights for signal). nTrain_Signal No 0 − Number of training events of class Signal (default: 0 = all). nTest_Signal No 0 − Number of test events of class Signal (default: 0 = all). nTrain_Background No 0 − Number of training events of class Background (default: 0 = all). nTest_Background No 0 − Number of test events of class Background (default: 0 = all). V No False − Verbosity (default: true). VerboseLevel No Info Debug, Verbose, Info VerboseLevel (Debug/Verbose/Info). Configuration options for the PDF class :. Configuration options reference for class: PDF. Option Array Default value Predefined values Description. NSmooth No 0 − Number of smoothing iterations for the input histograms. MinNSmooth No -1 − Min number of smoothing iterations, for bins with most data. MaxNSmooth No -1 − Max number of smoothing iterations, for bins with least data. NAvEvtPerBin No 50 − Average number of events per PDF bin. Nbins No 0 − Defined number of bins for the histogram from which the PDF is created. CheckHist No False − Whether or not to check the source histogram of the PDF. PDFInterpol No Spline2 Spline0, Spline1, Spline2, Spline3, Spline5, KDE Interpolation method for reference histograms (e.g. Spline2 or KDE). KDEtype No Gauss Gauss KDE kernel type (1=Gauss). KDEiter No Nonadaptive Nonadaptive, Adaptive",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html:33263,test,test,33263,documentation/tmva/UsersGuide/optionRef.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html,1,['test'],['test']
Testability,"faults to false. .. code-block:: console. $ llvm-symbolizer --obj=inlined.elf --print-address 0x4004be; 0x4004be; baz(); /tmp/test.cpp:11:18; main; /tmp/test.cpp:15:0. $ llvm-symbolizer --obj=inlined.elf 0x4004be --pretty-print --print-address; 0x4004be: baz() at /tmp/test.cpp:11:18; (inlined by) main at /tmp/test.cpp:15:0. .. option:: --print-source-context-lines <N>. Print ``N`` lines of source context for each symbolized address. .. code-block:: console. $ llvm-symbolizer --obj=test.elf 0x400490 --print-source-context-lines=3; baz(); /tmp/test.cpp:11:0; 10 : volatile int k = 42;; 11 >: return foz() + k;; 12 : }. .. option:: --relativenames. Print the file's path relative to the compilation directory, instead; of the absolute path. If the command-line to the compiler included; the full path, this will be the same as the default. .. option:: --verbose. Print verbose address, line and column information. .. code-block:: console. $ llvm-symbolizer --obj=inlined.elf --verbose 0x4004be; baz(); Filename: /tmp/test.cpp; Function start filename: /tmp/test.cpp; Function start line: 9; Function start address: 0x4004b6; Line: 11; Column: 18; main; Filename: /tmp/test.cpp; Function start filename: /tmp/test.cpp; Function start line: 14; Function start address: 0x4004b0; Line: 15; Column: 18. .. option:: --version, -v. Print version information for the tool. .. option:: @<FILE>. Read command-line options from response file `<FILE>`. WINDOWS/PDB SPECIFIC OPTIONS; -----------------------------. .. option:: --dia. Use the Windows DIA SDK for symbolization. If the DIA SDK is not found,; llvm-symbolizer will fall back to the native implementation. MACH-O SPECIFIC OPTIONS; -----------------------. .. option:: --default-arch <arch>. If a binary contains object files for multiple architectures (e.g. it is a; Mach-O universal binary), symbolize the object file for a given architecture.; You can also specify the architecture by writing ``binary_name:arch_name`` in; the input (see example",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:12227,test,test,12227,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"fective_addr2;; U32 temp = *inst;; int r1 = (temp >> 20) & 0xf;; int b2 = (temp >> 16) & 0xf;; effective_addr2 = temp & 0xfff;; if (b2) effective_addr2 += regs[b2];; b2 = (temp >> 12) & 0xf;; if (b2) effective_addr2 += regs[b2];; effective_addr2 &= regs[4];; if ((effective_addr2 & 3) == 0); return 1;; return 0;; }. Note that only the low 2 bits of effective_addr2 are used. On 32-bit systems,; we don't eliminate the computation of the top half of effective_addr2 because; we don't have whole-function selection dags. On x86, this means we use one; extra register for the function when effective_addr2 is declared as U64 than; when it is declared U32. PHI Slicing could be extended to do this. //===---------------------------------------------------------------------===//. Tail call elim should be more aggressive, checking to see if the call is; followed by an uncond branch to an exit block. ; This testcase is due to tail-duplication not wanting to copy the return; ; instruction into the terminating blocks because there was other code; ; optimized out of the function after the taildup happened.; ; RUN: llvm-as < %s | opt -tailcallelim | llvm-dis | not grep call. define i32 @t4(i32 %a) {; entry:; 	%tmp.1 = and i32 %a, 1		; <i32> [#uses=1]; 	%tmp.2 = icmp ne i32 %tmp.1, 0		; <i1> [#uses=1]; 	br i1 %tmp.2, label %then.0, label %else.0. then.0:		; preds = %entry; 	%tmp.5 = add i32 %a, -1		; <i32> [#uses=1]; 	%tmp.3 = call i32 @t4( i32 %tmp.5 )		; <i32> [#uses=1]; 	br label %return. else.0:		; preds = %entry; 	%tmp.7 = icmp ne i32 %a, 0		; <i1> [#uses=1]; 	br i1 %tmp.7, label %then.1, label %return. then.1:		; preds = %else.0; 	%tmp.11 = add i32 %a, -2		; <i32> [#uses=1]; 	%tmp.9 = call i32 @t4( i32 %tmp.11 )		; <i32> [#uses=1]; 	br label %return. return:		; preds = %then.1, %else.0, %then.0; 	%result.0 = phi i32 [ 0, %else.0 ], [ %tmp.3, %then.0 ],; [ %tmp.9, %then.1 ]; 	ret i32 %result.0; }. //===---------------------------------------------------------------------===//. Tail ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt:10020,test,testcase,10020,interpreter/llvm-project/llvm/lib/Target/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt,1,['test'],['testcase']
Testability,"ference.; =Subrange: Array subrange.; =TemplateParam: Template parameter.; =TemplateTemplateParam: Template template parameter.; =TemplateTypeParam: Template type parameter.; =TemplateValueParam: Template value parameter.; =Typedef: Type definition.; =Unspecified: Unspecified type.; =Volatile: Volatile specifier. .. _compare_:. COMPARE; ~~~~~~~; When dealing with debug information, there are situations when the; printing of the elements is not the correct approach. That is the case,; when we are interested in the effects caused by different versions of; the same toolchain, or the impact of specific compiler optimizations. For those cases, we are looking to see which elements have been added; or removed. Due to the complicated debug information format, it is very; difficult to use a regular diff tool to find those elements; even; impossible when dealing with different debug formats. :program:`llvm-debuginfo-analyzer` supports a logical element comparison,; allowing to find semantic differences between logical views, produced by; different toolchain versions or even debug information formats. When comparing logical views created from different debug formats, its; accuracy depends on how close the debug information represents the; user code. For instance, a logical view created from a binary file with; DWARF debug information may include more detailed data than a logical; view created from a binary file with CodeView/COFF debug information. The following options describe the elements to compare. .. option:: --compare=<value[,value,...]>. With **value** being one of the options in the following list. .. code-block:: text. =all: Include all the below elements. .. code-block:: text. =lines: Include lines.; =scopes: Include scopes.; =symbols: Include symbols.; =types: Include types. :program:`llvm-debuginfo-analyzer` takes the first binary file on the; command line as the **reference** and the second one as the **target**.; To get a more descriptive report, the comparison i",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:19940,log,logical,19940,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,2,['log'],['logical']
Testability,"ferences from the harness cause automatic scope; promotion of local symbols in the test set (these modifications to the usual; linker rules are accomplished via an ``ObjectLinkingLayer::Plugin`` installed by; ``llvm-jitlink`` when it sees the ``-harness`` option). With these modifications in place we can selectively test functions in an object; file by mocking those function's callees. For example, suppose we have an object; file, ``test_code.o``, compiled from the following C source (which we need not; have access to):. .. code-block:: c. void irrelevant_function() { irrelevant_external(); }. int function_to_mock(int X) {; return /* some function of X */;; }. static void function_to_test() {; ...; int Y = function_to_mock();; printf(""Y is %i\n"", Y);; }. If we want to know how ``function_to_test`` behaves when we change the behavior; of ``function_to_mock`` we can test it by writing a test harness:. .. code-block:: c. void function_to_test();. int function_to_mock(int X) {; printf(""used mock utility function\n"");; return 42;; }. int main(int argc, char *argv[]) {; function_to_test():; return 0;; }. Under normal circumstances these objects could not be linked together:; ``function_to_test`` is static and could not be resolved outside; ``test_code.o``, the two ``function_to_mock`` functions would result in a; duplicate definition error, and ``irrelevant_external`` is undefined.; However, using ``-harness`` and ``-phony-externals`` we can run this code; with:. .. code-block:: sh. % clang -c -o test_code_harness.o test_code_harness.c; % llvm-jitlink -phony-externals test_code.o -harness test_code_harness.o; used mock utility function; Y is 42. The ``-harness`` option may be of interest to people who want to perform some; very late testing on build products to verify that compiled code behaves as; expected. On basic C test cases this is relatively straightforward. Mocks for; more complicated languages (e.g. C++) are much trickier: Any code involving; classes tends to have",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/JITLink.rst:41759,mock,mock,41759,interpreter/llvm-project/llvm/docs/JITLink.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/JITLink.rst,1,['mock'],['mock']
Testability,"ff Scripts. The `rootlogon.C` and `rootlogoff.C` files are scripts loaded and; executed at start-up and shutdown. The `rootalias.C` file is loaded; but not executed. It typically contains small utility functions. For; example, the `rootalias.C` script that comes with the ROOT; distributions (located in `$ROOTSYS/tutorials)` defines the function; `edit(char *file)`. This allows the user to call the editor from the; command line. This particular function will start the VI editor if the; environment variable `EDITOR` is not set. ``` {.cpp}; root[0] edit(""c1.C""); ```. For more details, see `$ROOTSYS/tutorials/rootalias.C`. ### History File. You can use the up and down arrow at the command line, to access the; previous and next command. The commands are recorded in the history; file `$HOME/.root_hist`. It is a text file, and you can edit, cut, and; paste from it. You can specify the history file in the `system.rootrc`; file, by setting the `Rint.History `option. You can also turn off the; command logging in the `system.rootrc` file with the option:; `Rint.History: -`. The number of history lines to be kept can be set also in `.rootrc`; by:. ```; Rint.HistSize: 500; Rint.HistSave: 400; ```. The first value defines the maximum of lines kept; once it is reached; all, the last `HistSave` lines will be removed. One can set `HistSize`; to 0 to disable history line management. There is also implemented an; environment variable called `ROOT_HIST`. By setting; `ROOT_HIST=300:200` the above values can be overriden - the first; value corresponds to `HistSize`, the (optional) second one to; `HistSave`. You can set `ROOT_HIST=0` to disable the history. ### Tracking Memory Leaks. You can track memory usage and detect leaks by monitoring the number; of objects that are created and deleted (see **`TObjectTable`**). To; use this facility, edit the file `$ROOTSYS/etc/system.rootrc` or; `.rootrc` if you have this file and add the two following lines:. ```; Root.ObjectStat: 1; ```. In your c",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/GettingStarted.md:38780,log,logging,38780,documentation/users-guide/GettingStarted.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/GettingStarted.md,1,['log'],['logging']
Testability,"ff:. .. code-block:: c++. ...; if (IdentifierStr == ""def""); return tok_def;; if (IdentifierStr == ""extern""); return tok_extern;; if (IdentifierStr == ""if""); return tok_if;; if (IdentifierStr == ""then""); return tok_then;; if (IdentifierStr == ""else""); return tok_else;; return tok_identifier;. AST Extensions for If/Then/Else; -------------------------------. To represent the new expression we add a new AST node for it:. .. code-block:: c++. /// IfExprAST - Expression class for if/then/else.; class IfExprAST : public ExprAST {; std::unique_ptr<ExprAST> Cond, Then, Else;. public:; IfExprAST(std::unique_ptr<ExprAST> Cond, std::unique_ptr<ExprAST> Then,; std::unique_ptr<ExprAST> Else); : Cond(std::move(Cond)), Then(std::move(Then)), Else(std::move(Else)) {}. Value *codegen() override;; };. The AST node just has pointers to the various subexpressions. Parser Extensions for If/Then/Else; ----------------------------------. Now that we have the relevant tokens coming from the lexer and we have; the AST node to build, our parsing logic is relatively straightforward.; First we define a new parsing function:. .. code-block:: c++. /// ifexpr ::= 'if' expression 'then' expression 'else' expression; static std::unique_ptr<ExprAST> ParseIfExpr() {; getNextToken(); // eat the if. // condition.; auto Cond = ParseExpression();; if (!Cond); return nullptr;. if (CurTok != tok_then); return LogError(""expected then"");; getNextToken(); // eat the then. auto Then = ParseExpression();; if (!Then); return nullptr;. if (CurTok != tok_else); return LogError(""expected else"");. getNextToken();. auto Else = ParseExpression();; if (!Else); return nullptr;. return std::make_unique<IfExprAST>(std::move(Cond), std::move(Then),; std::move(Else));; }. Next we hook it up as a primary expression:. .. code-block:: c++. static std::unique_ptr<ExprAST> ParsePrimary() {; switch (CurTok) {; default:; return LogError(""unknown token when expecting an expression"");; case tok_identifier:; return ParseIdentifierExp",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl05.rst:3662,log,logic,3662,interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl05.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl05.rst,1,['log'],['logic']
Testability,"ffects test results. It's usually easy to tell: just look for; redirection or piping of the ``FileCheck`` call's stdout or stderr. .. _Test-specific substitutions:. **Test-specific substitutions:**. Additional substitutions can be defined as follows:. - Lit configuration files (e.g., ``lit.cfg`` or ``lit.local.cfg``) can define; substitutions for all tests in a test directory. They do so by extending the; substitution list, ``config.substitutions``. Each item in the list is a tuple; consisting of a pattern and its replacement, which lit applies using python's; ``re.sub`` function.; - To define substitutions within a single test file, lit supports the; ``DEFINE:`` and ``REDEFINE:`` directives, described in detail below. So that; they have no effect on other test files, these directives modify a copy of the; substitution list that is produced by lit configuration files. For example, the following directives can be inserted into a test file to define; ``%{cflags}`` and ``%{fcflags}`` substitutions with empty initial values, which; serve as the parameters of another newly defined ``%{check}`` substitution:. .. code-block:: llvm. ; DEFINE: %{cflags} =; ; DEFINE: %{fcflags} =. ; DEFINE: %{check} = \; ; DEFINE: %clang_cc1 -verify -fopenmp -fopenmp-version=51 %{cflags} \; ; DEFINE: -emit-llvm -o - %s | \; ; DEFINE: FileCheck %{fcflags} %s. Alternatively, the above substitutions can be defined in a lit configuration; file to be shared with other test files. Either way, the test file can then; specify directives like the following to redefine the parameter substitutions as; desired before each use of ``%{check}`` in a ``RUN:`` line:. .. code-block:: llvm. ; REDEFINE: %{cflags} = -triple x86_64-apple-darwin10.6.0 -fopenmp-simd; ; REDEFINE: %{fcflags} = -check-prefix=SIMD; ; RUN: %{check}. ; REDEFINE: %{cflags} = -triple x86_64-unknown-linux-gnu -fopenmp-simd; ; REDEFINE: %{fcflags} = -check-prefix=SIMD; ; RUN: %{check}. ; REDEFINE: %{cflags} = -triple x86_64-apple-darwin10.6.0",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:29324,test,test,29324,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"ffic. .. _dss_uniquevector:. llvm/ADT/UniqueVector.h; ^^^^^^^^^^^^^^^^^^^^^^^. UniqueVector is similar to :ref:`SetVector <dss_setvector>` but it retains a; unique ID for each element inserted into the set. It internally contains a map; and a vector, and it assigns a unique ID for each value inserted into the set. UniqueVector is very expensive: its cost is the sum of the cost of maintaining; both the map and vector, it has high complexity, high constant factors, and; produces a lot of malloc traffic. It should be avoided. .. _dss_immutableset:. llvm/ADT/ImmutableSet.h; ^^^^^^^^^^^^^^^^^^^^^^^. ImmutableSet is an immutable (functional) set implementation based on an AVL; tree. Adding or removing elements is done through a Factory object and results; in the creation of a new ImmutableSet object. If an ImmutableSet already exists; with the given contents, then the existing one is returned; equality is compared; with a FoldingSetNodeID. The time and space complexity of add or remove; operations is logarithmic in the size of the original set. There is no method for returning an element of the set, you can only check for; membership. .. _dss_otherset:. Other Set-Like Container Options; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The STL provides several other options, such as std::multiset and; std::unordered_set. We never use containers like unordered_set because; they are generally very expensive (each insertion requires a malloc). std::multiset is useful if you're not interested in elimination of duplicates,; but has all the drawbacks of :ref:`std::set <dss_set>`. A sorted vector; (where you don't delete duplicate entries) or some other approach is almost; always better. .. _ds_map:. Map-Like Containers (std::map, DenseMap, etc); ---------------------------------------------. Map-like containers are useful when you want to associate data to a key. As; usual, there are a lot of different ways to do this. :). .. _dss_sortedvectormap:. A sorted 'vector'; ^^^^^^^^^^^^^^^^^. If your ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst:87013,log,logarithmic,87013,interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,1,['log'],['logarithmic']
Testability,"ffixes. Also, it's generally better to write regular expressions that use entire; triple components, than to do something clever to shorten them. For; example, to match both freebsd and netbsd in an expression, you could write; ``target={{.*(free|net)bsd.*}}`` and that would work. However, it would; prevent a ``grep freebsd`` from finding this test. Better to use:; ``target={{.+-freebsd.*}} || target={{.+-netbsd.*}}``. Substitutions; -------------. Besides replacing LLVM tool names the following substitutions are performed in; RUN lines:. ``%%``; Replaced by a single ``%``. This allows escaping other substitutions. ``%s``; File path to the test case's source. This is suitable for passing on the; command line as the input to an LLVM tool. Example: ``/home/user/llvm/test/MC/ELF/foo_test.s``. ``%S``; Directory path to the test case's source. Example: ``/home/user/llvm/test/MC/ELF``. ``%t``; File path to a temporary file name that could be used for this test case.; The file name won't conflict with other test cases. You can append to it; if you need multiple temporaries. This is useful as the destination of; some redirected output. Example: ``/home/user/llvm.build/test/MC/ELF/Output/foo_test.s.tmp``. ``%T``; Directory of ``%t``. Deprecated. Shouldn't be used, because it can be easily; misused and cause race conditions between tests. Use ``rm -rf %t && mkdir %t`` instead if a temporary directory is necessary. Example: ``/home/user/llvm.build/test/MC/ELF/Output``. ``%{pathsep}``. Expands to the path separator, i.e. ``:`` (or ``;`` on Windows). ``${fs-src-root}``; Expands to the root component of file system paths for the source directory,; i.e. ``/`` on Unix systems or ``C:\`` (or another drive) on Windows. ``${fs-tmp-root}``; Expands to the root component of file system paths for the test's temporary; directory, i.e. ``/`` on Unix systems or ``C:\`` (or another drive) on; Windows. ``${fs-sep}``; Expands to the file system separator, i.e. ``/`` or ``\`` on Windows. ``%/s, ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:24285,test,test,24285,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"fication-based vs. subset-based, etc. Traditionally,; alias analyses respond to a query with a `Must, May, or No`_ alias response,; indicating that two pointers always point to the same object, might point to the; same object, or are known to never point to the same object. The LLVM `AliasAnalysis; <https://llvm.org/doxygen/classllvm_1_1AliasAnalysis.html>`__ class is the; primary interface used by clients and implementations of alias analyses in the; LLVM system. This class is the common interface between clients of alias; analysis information and the implementations providing it, and is designed to; support a wide range of implementations and clients (but currently all clients; are assumed to be flow-insensitive). In addition to simple alias analysis; information, this class exposes Mod/Ref information from those implementations; which can provide it, allowing for powerful analyses and transformations to work; well together. This document contains information necessary to successfully implement this; interface, use it, and to test both sides. It also explains some of the finer; points about what exactly results mean. ``AliasAnalysis`` Class Overview; ================================. The `AliasAnalysis <https://llvm.org/doxygen/classllvm_1_1AliasAnalysis.html>`__; class defines the interface that the various alias analysis implementations; should support. This class exports two important enums: ``AliasResult`` and; ``ModRefResult`` which represent the result of an alias query or a mod/ref; query, respectively. The ``AliasAnalysis`` interface exposes information about memory, represented in; several different ways. In particular, memory objects are represented as a; starting address and size, and function calls are represented as the actual; ``call`` or ``invoke`` instructions that performs the call. The; ``AliasAnalysis`` interface also exposes some helper methods which allow you to; get mod/ref information for arbitrary instructions. All ``AliasAnalysis`` interfa",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AliasAnalysis.rst:1594,test,test,1594,interpreter/llvm-project/llvm/docs/AliasAnalysis.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AliasAnalysis.rst,1,['test'],['test']
Testability,"fies the program, but does not modify the CFG; void LICM::getAnalysisUsage(AnalysisUsage &AU) const {; AU.setPreservesCFG();; AU.addRequired<LoopInfoWrapperPass>();; }. .. _writing-an-llvm-pass-getAnalysis:. The ``getAnalysis<>`` and ``getAnalysisIfAvailable<>`` methods; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The ``Pass::getAnalysis<>`` method is automatically inherited by your class,; providing you with access to the passes that you declared that you required; with the :ref:`getAnalysisUsage <writing-an-llvm-pass-getAnalysisUsage>`; method. It takes a single template argument that specifies which pass class; you want, and returns a reference to that pass. For example:. .. code-block:: c++. bool LICM::runOnFunction(Function &F) {; LoopInfo &LI = getAnalysis<LoopInfoWrapperPass>().getLoopInfo();; //...; }. This method call returns a reference to the pass desired. You may get a; runtime assertion failure if you attempt to get an analysis that you did not; declare as required in your :ref:`getAnalysisUsage; <writing-an-llvm-pass-getAnalysisUsage>` implementation. This method can be; called by your ``run*`` method implementation, or by any other local method; invoked by your ``run*`` method. A module level pass can use function level analysis info using this interface.; For example:. .. code-block:: c++. bool ModuleLevelPass::runOnModule(Module &M) {; //...; DominatorTree &DT = getAnalysis<DominatorTree>(Func);; //...; }. In above example, ``runOnFunction`` for ``DominatorTree`` is called by pass; manager before returning a reference to the desired pass. If your pass is capable of updating analyses if they exist (e.g.,; ``BreakCriticalEdges``, as described above), you can use the; ``getAnalysisIfAvailable`` method, which returns a pointer to the analysis if; it is active. For example:. .. code-block:: c++. if (DominatorSet *DS = getAnalysisIfAvailable<DominatorSet>()) {; // A DominatorSet is active. This code will update it.; }. Implementing Ana",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/WritingAnLLVMPass.rst:33487,assert,assertion,33487,interpreter/llvm-project/llvm/docs/WritingAnLLVMPass.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/WritingAnLLVMPass.rst,1,['assert'],['assertion']
Testability,"file shall be considered an experimental feature; until LLVM 18, at which point ``-print-multi-flags-experimental``; should be renamed to ``-print-multi-flags``.; A toolchain can opt in to using this feature by including a ``multilib.yaml``; file in its distribution, once support for it is added in relevant ToolChain; subclasses.; Once stability is reached, flags emitted by ``-print-multi-flags``; should not be removed or changed, although new flags may be added. Restrictions; ============. Despite the name, multilib is used to locate both ``include`` and ``lib``; directories. Therefore it is important that consistent options are passed to; the Clang driver when both compiling and linking. Otherwise inconsistent; ``include`` and ``lib`` directories may be used, and the results will be; undefined. EXPERIMENTAL multilib.yaml; ==========================. The below example serves as a small of a possible multilib, and documents; the available options. For a more comprehensive example see; ``clang/test/Driver/baremetal-multilib.yaml`` in the ``llvm-project`` sources. .. code-block:: yaml. # multilib.yaml. # This format is experimental and is likely to change!. # Syntax is YAML 1.2. # This required field defines the version of the multilib.yaml format.; # Clang will emit an error if this number is greater than its current multilib; # version or if its major version differs, but will accept lesser minor; # versions.; MultilibVersion: 1.0. # The rest of this file is in two parts:; # 1. A list of multilib variants.; # 2. A list of regular expressions that may match flags generated from; # command line options, and further flags that shall be added if the; # regular expression matches.; # It is acceptable for the file to contain properties not documented here,; # and these will be ignored by Clang. # List of multilib variants. Required.; # The ordering of items in the variants list is important if more than one; # variant can match the same set of flags. See the docs on multi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/Multilib.rst:6573,test,test,6573,interpreter/llvm-project/clang/docs/Multilib.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/Multilib.rst,1,['test'],['test']
Testability,"file"": ""M.cppm"",; ""output"": ""M.o""; },; {; ""directory"": ""."",; ""command"": ""<path-to-compiler-executable>/clang++ -std=c++20 Impl.cpp -c -o Impl.o"",; ""file"": ""Impl.cpp"",; ""output"": ""Impl.o""; },; {; ""directory"": ""."",; ""command"": ""<path-to-compiler-executable>/clang++ -std=c++20 impl_part.cppm -c -o impl_part.o"",; ""file"": ""impl_part.cppm"",; ""output"": ""impl_part.o""; },; {; ""directory"": ""."",; ""command"": ""<path-to-compiler-executable>/clang++ -std=c++20 interface_part.cppm -c -o interface_part.o"",; ""file"": ""interface_part.cppm"",; ""output"": ""interface_part.o""; },; {; ""directory"": ""."",; ""command"": ""<path-to-compiler-executable>/clang++ -std=c++20 User.cpp -c -o User.o"",; ""file"": ""User.cpp"",; ""output"": ""User.o""; }; ]. And we can get the dependency information in P1689 format by:. .. code-block:: console. $ clang-scan-deps -format=p1689 -compilation-database P1689.json. And we will get:. .. code-block:: text. {; ""revision"": 0,; ""rules"": [; {; ""primary-output"": ""Impl.o"",; ""requires"": [; {; ""logical-name"": ""M"",; ""source-path"": ""M.cppm""; }; ]; },; {; ""primary-output"": ""M.o"",; ""provides"": [; {; ""is-interface"": true,; ""logical-name"": ""M"",; ""source-path"": ""M.cppm""; }; ],; ""requires"": [; {; ""logical-name"": ""M:interface_part"",; ""source-path"": ""interface_part.cppm""; },; {; ""logical-name"": ""M:impl_part"",; ""source-path"": ""impl_part.cppm""; }; ]; },; {; ""primary-output"": ""User.o"",; ""requires"": [; {; ""logical-name"": ""M"",; ""source-path"": ""M.cppm""; },; {; ""logical-name"": ""third_party_module""; }; ]; },; {; ""primary-output"": ""impl_part.o"",; ""provides"": [; {; ""is-interface"": false,; ""logical-name"": ""M:impl_part"",; ""source-path"": ""impl_part.cppm""; }; ],; ""requires"": [; {; ""logical-name"": ""M:interface_part"",; ""source-path"": ""interface_part.cppm""; }; ]; },; {; ""primary-output"": ""interface_part.o"",; ""provides"": [; {; ""is-interface"": true,; ""logical-name"": ""M:interface_part"",; ""source-path"": ""interface_part.cppm""; }; ]; }; ],; ""version"": 1; }. See the P1689 paper for the meaning of the fields. And if t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/StandardCPlusPlusModules.rst:35072,log,logical-name,35072,interpreter/llvm-project/clang/docs/StandardCPlusPlusModules.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/StandardCPlusPlusModules.rst,1,['log'],['logical-name']
Testability,"file/instr_prof_interface.h``, which contains the API names. For example,. .. code-block:: c. #include ""profile/instr_prof_interface.h"". // Then later in the same source file; if (__llvm_profile_dump() != 0) { ... }. The user code does not need to check if the API names are defined, because; these names are automatically replaced by ``(0)`` or the equivalence of noop; if the ``clang`` is not compiling for profile generation. Such replacement can happen because ``clang`` adds one of two macros depending; on the ``-fprofile-generate`` and the ``-fprofile-use`` flags. * ``__LLVM_INSTR_PROFILE_GENERATE``: defined when one of; ``-fprofile[-instr]-generate``/``-fcs-profile-generate`` is in effect.; * ``__LLVM_INSTR_PROFILE_USE``: defined when one of; ``-fprofile-use``/``-fprofile-instr-use`` is in effect. The two macros can be used to provide more flexibiilty so a user program; can execute code specifically intended for profile generate or profile use.; For example, a user program can have special logging during profile generate:. .. code-block:: c. #if __LLVM_INSTR_PROFILE_GENERATE; expensive_logging_of_full_program_state();; #endif. The logging is automatically excluded during a normal build of the program,; hence it does not impact performance during a normal execution. It is advised to use such fine tuning only in a program's cold regions. The weak; symbols can introduce extra control flow (the ``if`` checks), while the macros; (hence declarations they guard in ``profile/instr_prof_interface.h``); can change the control flow of the functions that use them between profile; generation and profile use (which can lead to discarded counters in such; functions). Using these APIs in the program's cold regions introduces less; overhead and leads to more optimized code. Disabling Instrumentation; ^^^^^^^^^^^^^^^^^^^^^^^^^. In certain situations, it may be useful to disable profile generation or use; for specific files in a build, without affecting the main compilation flags; u",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:114146,log,logging,114146,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['log'],['logging']
Testability,files.; Large benchmarks and whole applications go here. - `MicroBenchmarks/`. Programs using the [google-benchmark](https://github.com/google/benchmark); library. The programs define functions that are run multiple times until the; measurement results are statistically significant. - `External/`. Contains descriptions and test data for code that cannot be directly; distributed with the test-suite. The most prominent members of this; directory are the SPEC CPU benchmark suites.; See [External Suites](#external-suites). - `Bitcode/`. These tests are mostly written in LLVM bitcode. - `CTMark/`. Contains symbolic links to other benchmarks forming a representative sample; for compilation performance measurements. ### Benchmarks. Every program can work as a correctness test. Some programs are unsuitable for; performance measurements. Setting the `TEST_SUITE_BENCHMARKING_ONLY` CMake; option to `ON` will disable them. Configuration; -------------. The test-suite has configuration options to customize building and running the; benchmarks. CMake can print a list of them:. ```bash; % cd test-suite-build; # Print basic options:; % cmake -LH; # Print all options:; % cmake -LAH; ```. ### Common Configuration Options. - `CMAKE_C_FLAGS`. Specify extra flags to be passed to C compiler invocations. The flags are; also passed to the C++ compiler and linker invocations. See; [https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_FLAGS.html](https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_FLAGS.html). - `CMAKE_C_COMPILER`. Select the C compiler executable to be used. Note that the C++ compiler is; inferred automatically i.e. when specifying `path/to/clang` CMake will; automatically use `path/to/clang++` as the C++ compiler. See; [https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER.html](https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER.html). - `CMAKE_Fortran_COMPILER`. Select the Fortran compiler executable to be used. Not set by default and not; ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:3750,test,test-suite,3750,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,2,"['benchmark', 'test']","['benchmarks', 'test-suite']"
Testability,"files; -l : do not show splash screen; -x : exit on exception; dir : if dir is a valid directory cd to it before executing. -? : print usage; -h : print usage; --help : print usage; -config : print ./configure options; ```. - -b ROOT session runs in batch mode, without graphics display. This; mode is useful in case one does not want to set the DISPLAY or; cannot do it for some reason. - -n usually, launching a ROOT session will execute a logon script; and quitting will execute a logoff script. This option prevents; the execution of these two scripts. - it is also possible to execute a script without entering a ROOT; session. One simply adds the name of the script(s) after the ROOT; command. Be warned: after finishing the execution of the script,; ROOT will normally enter a new session. - -q process command line script files and exit. For example if you would like to run a script `myMacro.C` in the; background, redirect the output into a file `myMacro.log`, and exit; after the script execution, use the following syntax:. ```; root -b -q myMacro.C > myMacro.log; ```. If you need to pass a parameter to the script use:. ```; root -b -q 'myMacro.C(3)' > myMacro.log; ```. Be mindful of the quotes, i.e. if you need to pass a string as a; parameter, the syntax is:. ```; root -b -q 'myMacro.C(""text"")' > myMacro.log; ```. You can build a shared library with ACLiC and then use this shared; library on the command line for a quicker execution (i.e. the compiled; speed rather than the interpreted speed). See also ""Cling the C++; Interpreter"". ```; root -b -q myMacro.so > myMacro.log; ```. ROOT has a powerful C/C++ interpreter giving you access to all available; ROOT classes, global variables, and functions via the command line. By; typing C++ statements at the prompt, you can create objects, call; functions, execute scripts, etc. For example:. ``` {.cpp}; root[] 1+sqrt(9); (const double)4.00000000000000000e+00; root[] for (int i = 0; i<4; i++) cout << ""Hello"" << i << endl; Hello ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/GettingStarted.md:4108,log,log,4108,documentation/users-guide/GettingStarted.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/GettingStarted.md,1,['log'],['log']
Testability,"filing of target expressions. ``-instrprof``; pass will generate the appropriate data structures and replace the; ``llvm.instrprof.value.profile`` intrinsic with the call to the profile; runtime library with proper arguments. '``llvm.instrprof.mcdc.parameters``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare void @llvm.instrprof.mcdc.parameters(ptr <name>, i64 <hash>,; i32 <bitmap-bytes>). Overview:; """""""""""""""""". The '``llvm.instrprof.mcdc.parameters``' intrinsic is used to initiate MC/DC; code coverage instrumentation for a function. Arguments:; """""""""""""""""""". The first argument is a pointer to a global variable containing the; name of the entity being instrumented. This should generally be the; (mangled) function name for a set of counters. The second argument is a hash value that can be used by the consumer; of the profile data to detect changes to the instrumented source. The third argument is the number of bitmap bytes required by the function to; record the number of test vectors executed for each boolean expression. Semantics:; """""""""""""""""""". This intrinsic represents basic MC/DC parameters initiating one or more MC/DC; instrumentation sequences in a function. It will cause the ``-instrprof`` pass; to generate the appropriate data structures and the code to instrument MC/DC; test vectors in a format that can be written out by a compiler runtime and; consumed via the ``llvm-profdata`` tool. '``llvm.instrprof.mcdc.condbitmap.update``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare void @llvm.instrprof.mcdc.condbitmap.update(ptr <name>, i64 <hash>,; i32 <condition-id>,; ptr <mcdc-temp-addr>,; i1 <bool-value>). Overview:; """""""""""""""""". The '``llvm.instrprof.mcdc.condbitmap.update``' intrinsic is used to track; MC/DC condition evaluation for each condition in a boolean expression. Arguments:; """""""""""""""""""". The first argument is a pointer to a global variable containing the; name of the e",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:532876,test,test,532876,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"first check if it has been fixed in main. If it has, update; its status to ""Needs Pull Request"", and create a pull request for the fix; using the /cherry-pick or /branch comments if this has not been done already. #. If a bug has been fixed and has a pull request created for backporting it,; then update its status to ""Needs Review"" and notify a knowledgeable reviewer.; Usually you will want to notify the person who approved the patch in Phabricator,; but you may use your best judgement on who a good reviewer would be. Once; you have identified the reviewer(s), assign the issue to them and mention; them (i.e @username) in a comment and ask them if the patch is safe to backport.; You should also review the bug yourself to ensure that it meets the requirements; for committing to the release branch. #. Once a bug has been reviewed, add the release:reviewed label and update the; issue's status to ""Needs Merge"". Check the pull request associated with the; issue. If all the tests pass, then the pull request can be merged. If not,; then add a comment on the issue asking someone to take a look at the failures. #. Once the pull request has been merged push it to the official release branch; with the script ``llvm/utils/git/sync-release-repo.sh``. Then add a comment to the issue stating that the fix has been merged along with; the git hashes from the release branch. Add the release:merged label to the issue; and close it. Release Patch Rules; -------------------. Below are the rules regarding patching the release branch:. #. Patches applied to the release branch may only be applied by the release; manager, the official release testers or the code owners with approval from; the release manager. #. Release managers are encouraged, but not required, to get approval from code; owners before approving patches. If there is no code owner or the code owner; is unreachable then release managers can ask approval from patch reviewers or; other developers active in that area. #. *Before R",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst:11991,test,tests,11991,interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,1,['test'],['tests']
Testability,"fixed in this release. More than 200 items were addressed for this release. The full list is:. * [[#15621](https://github.com/root-project/root/issues/15621)] - Buffer overflow in TBranch::Init; * [[#15610](https://github.com/root-project/root/issues/15610)] - Memory leak in TTree __getattr__ pythonization; * [[#15590](https://github.com/root-project/root/issues/15590)] - Infinite recursion in TFile::Open; * [[#15460](https://github.com/root-project/root/issues/15460)] - TEnum::GetEnum(""B"")->GetUnderlyingType() does not following typedefs; * [[#15413](https://github.com/root-project/root/issues/15413)] - Fails to build with cuDNN version 9; * [[#15406](https://github.com/root-project/root/issues/15406)] - `TEnum::GetEnum` does not seem to see 'through' using statements.; * [[#15399](https://github.com/root-project/root/issues/15399)] - Memory leak with jitted nodes if the execution is never triggered; * [[#15396](https://github.com/root-project/root/issues/15396)] - [TMVA] Pymva test (Keras) failing on 632 and main; * [[#15370](https://github.com/root-project/root/issues/15370)] - Broken link in HS3 printout; * [[#15340](https://github.com/root-project/root/issues/15340)] - Webgraphics: canvas displayed, but many error printed; * [[#15253](https://github.com/root-project/root/issues/15253)] - C++ standard not propagated via CMake anymore; * [[#15197](https://github.com/root-project/root/issues/15197)] - RBDT does not support xgboost inference; * [[#15156](https://github.com/root-project/root/issues/15156)] - Segfault in TMVA::Experimental::SOFIE::RModel::Streamer; * [[#15139](https://github.com/root-project/root/issues/15139)] - cmake option -Dall=YES breaks the cmake; * [[#15118](https://github.com/root-project/root/issues/15118)] - jsoninterface does not build if provided with RapidYAML; * [[#15108](https://github.com/root-project/root/issues/15108)] - Turn off clang-format for Linkdef files; * [[#15090](https://github.com/root-project/root/issues/15090)] - TClass:",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v632/index.md:25757,test,test,25757,README/ReleaseNotes/v632/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v632/index.md,1,['test'],['test']
Testability,flang/unittests/Runtime/ExternalIOTest.cpp; flang/unittests/Runtime/Format.cpp; flang/unittests/Runtime/Inquiry.cpp; flang/unittests/Runtime/ListInputTest.cpp; flang/unittests/Runtime/Matmul.cpp; flang/unittests/Runtime/MiscIntrinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129456,benchmark,benchmarks,129456,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,floor.cpp; libc/src/math/generic/floorf.cpp; libc/src/math/generic/floorl.cpp; libc/src/math/generic/fmax.cpp; libc/src/math/generic/fmaxf.cpp; libc/src/math/generic/fmaxl.cpp; libc/src/math/generic/fmin.cpp; libc/src/math/generic/fminf.cpp; libc/src/math/generic/fminl.cpp; libc/src/math/generic/frexp.cpp; libc/src/math/generic/frexpf.cpp; libc/src/math/generic/frexpl.cpp; libc/src/math/generic/hypot.cpp; libc/src/math/generic/hypotf.cpp; libc/src/math/generic/ilogb.cpp; libc/src/math/generic/ilogbf.cpp; libc/src/math/generic/ilogbl.cpp; libc/src/math/generic/ldexp.cpp; libc/src/math/generic/ldexpf.cpp; libc/src/math/generic/ldexpl.cpp; libc/src/math/generic/llrint.cpp; libc/src/math/generic/llrintf.cpp; libc/src/math/generic/llrintl.cpp; libc/src/math/generic/llround.cpp; libc/src/math/generic/llroundf.cpp; libc/src/math/generic/llroundl.cpp; libc/src/math/generic/log10f.cpp; libc/src/math/generic/log1pf.cpp; libc/src/math/generic/log2f.cpp; libc/src/math/generic/logb.cpp; libc/src/math/generic/logbf.cpp; libc/src/math/generic/logbl.cpp; libc/src/math/generic/logf.cpp; libc/src/math/generic/lrint.cpp; libc/src/math/generic/lrintf.cpp; libc/src/math/generic/lrintl.cpp; libc/src/math/generic/lround.cpp; libc/src/math/generic/lroundf.cpp; libc/src/math/generic/lroundl.cpp; libc/src/math/generic/math_utils.cpp; libc/src/math/generic/math_utils.h; libc/src/math/generic/modf.cpp; libc/src/math/generic/modff.cpp; libc/src/math/generic/modfl.cpp; libc/src/math/generic/nearbyint.cpp; libc/src/math/generic/nearbyintf.cpp; libc/src/math/generic/nearbyintl.cpp; libc/src/math/generic/nextafter.cpp; libc/src/math/generic/nextafterf.cpp; libc/src/math/generic/nextafterl.cpp; libc/src/math/generic/remainder.cpp; libc/src/math/generic/remainderf.cpp; libc/src/math/generic/remainderl.cpp; libc/src/math/generic/remquo.cpp; libc/src/math/generic/remquof.cpp; libc/src/math/generic/remquol.cpp; libc/src/math/generic/rint.cpp; libc/src/math/generic/rintf.cpp; libc/src/math/generic/rintl.c,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:138847,log,logbf,138847,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['log'],['logbf']
Testability,floorf.cpp; libc/src/math/generic/floorl.cpp; libc/src/math/generic/fmax.cpp; libc/src/math/generic/fmaxf.cpp; libc/src/math/generic/fmaxl.cpp; libc/src/math/generic/fmin.cpp; libc/src/math/generic/fminf.cpp; libc/src/math/generic/fminl.cpp; libc/src/math/generic/frexp.cpp; libc/src/math/generic/frexpf.cpp; libc/src/math/generic/frexpl.cpp; libc/src/math/generic/hypot.cpp; libc/src/math/generic/hypotf.cpp; libc/src/math/generic/ilogb.cpp; libc/src/math/generic/ilogbf.cpp; libc/src/math/generic/ilogbl.cpp; libc/src/math/generic/ldexp.cpp; libc/src/math/generic/ldexpf.cpp; libc/src/math/generic/ldexpl.cpp; libc/src/math/generic/llrint.cpp; libc/src/math/generic/llrintf.cpp; libc/src/math/generic/llrintl.cpp; libc/src/math/generic/llround.cpp; libc/src/math/generic/llroundf.cpp; libc/src/math/generic/llroundl.cpp; libc/src/math/generic/log10f.cpp; libc/src/math/generic/log1pf.cpp; libc/src/math/generic/log2f.cpp; libc/src/math/generic/logb.cpp; libc/src/math/generic/logbf.cpp; libc/src/math/generic/logbl.cpp; libc/src/math/generic/logf.cpp; libc/src/math/generic/lrint.cpp; libc/src/math/generic/lrintf.cpp; libc/src/math/generic/lrintl.cpp; libc/src/math/generic/lround.cpp; libc/src/math/generic/lroundf.cpp; libc/src/math/generic/lroundl.cpp; libc/src/math/generic/math_utils.cpp; libc/src/math/generic/math_utils.h; libc/src/math/generic/modf.cpp; libc/src/math/generic/modff.cpp; libc/src/math/generic/modfl.cpp; libc/src/math/generic/nearbyint.cpp; libc/src/math/generic/nearbyintf.cpp; libc/src/math/generic/nearbyintl.cpp; libc/src/math/generic/nextafter.cpp; libc/src/math/generic/nextafterf.cpp; libc/src/math/generic/nextafterl.cpp; libc/src/math/generic/remainder.cpp; libc/src/math/generic/remainderf.cpp; libc/src/math/generic/remainderl.cpp; libc/src/math/generic/remquo.cpp; libc/src/math/generic/remquof.cpp; libc/src/math/generic/remquol.cpp; libc/src/math/generic/rint.cpp; libc/src/math/generic/rintf.cpp; libc/src/math/generic/rintl.cpp; libc/src/math/generic/round.c,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:138880,log,logbl,138880,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['log'],['logbl']
Testability,"following flags are; needed to pick up the includes and libraries:. * ``--gcc-toolchain=/path/to/dir/toolchain``; * ``--sysroot=/path/to/toolchain/arm-linux-gnueabihf/libc``. In this example we will be adding all of the command line options to both; ``CMAKE_C_FLAGS`` and ``CMAKE_ASM_FLAGS``. There are cmake flags to pass some of; these options individually which can be used to simplify the ``build-c-flags``:. * ``-DCMAKE_C_COMPILER_TARGET=""arm-linux-gnueabihf""``; * ``-DCMAKE_ASM_COMPILER_TARGET=""arm-linux-gnueabihf""``; * ``-DCMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN=/path/to/dir/toolchain``; * ``-DCMAKE_SYSROOT=/path/to/dir/toolchain/arm-linux-gnueabihf/libc``. Once cmake has completed the builtins can be built with ``ninja builtins``. Testing compiler-rt builtins using qemu-arm; ===========================================; To test the builtins library we need to add a few more cmake flags to enable; testing and set up the compiler and flags for test case. We must also tell; cmake that we wish to run the tests on ``qemu-arm``. * ``-DCOMPILER_RT_EMULATOR=""qemu-arm -L /path/to/armhf/sysroot``; * ``-DCOMPILER_RT_INCLUDE_TESTS=ON``; * ``-DCOMPILER_RT_TEST_COMPILER=""/path/to/clang""``; * ``-DCOMPILER_RT_TEST_COMPILER_CFLAGS=""test-c-flags""``. The ``/path/to/armhf/sysroot`` should be the same as the one passed to; ``--sysroot`` in the ""build-c-flags"". The ""test-c-flags"" need to include the target, architecture, gcc-toolchain,; sysroot and arm/thumb state. The additional cmake defines such as; ``CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN`` do not apply when building the tests. If; you have put all of these in ""build-c-flags"" then these can be repeated. If you; wish to use lld to link the tests then add ``""-fuse-ld=lld``. Once cmake has completed the tests can be built and run using; ``ninja check-builtins``. Troubleshooting; ===============. The cmake try compile stage fails; ---------------------------------; At an early stage cmake will attempt to compile and link a simple C program to",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst:4932,test,tests,4932,interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst,1,['test'],['tests']
Testability,"foo(x, x - 2);; ^. This option is implied when; :ref:`-fsave-optimization-record <opt_fsave-optimization-record>` is used.; Otherwise, it defaults to off. .. option:: -fdiagnostics-hotness-threshold. Prevent optimization remarks from being output if they do not have at least; this hotness value. This option, which defaults to zero, controls the minimum hotness an; optimization remark would need in order to be output by Clang. This is; currently supported with optimization remarks (see :ref:`Options to Emit; Optimization Reports <rpass>`) when profile hotness information in; diagnostics is enabled (see; :ref:`-fdiagnostics-show-hotness <opt_fdiagnostics-show-hotness>`). .. _opt_fdiagnostics-fixit-info:. .. option:: -f[no-]diagnostics-fixit-info. Enable ""FixIt"" information in the diagnostics output. This option, which defaults to on, controls whether or not Clang; prints the information on how to fix a specific diagnostic; underneath it when it knows. For example, in this output:. ::. test.c:28:8: warning: extra tokens at end of #endif directive [-Wextra-tokens]; #endif bad; ^; //. Passing **-fno-diagnostics-fixit-info** will prevent Clang from; printing the ""//"" line at the end of the message. This information; is useful for users who may not understand what is wrong, but can be; confusing for machine parsing. .. _opt_fdiagnostics-print-source-range-info:. .. option:: -fdiagnostics-print-source-range-info. Print machine parsable information about source ranges.; This option makes Clang print information about source ranges in a machine; parsable format after the file/line/column number information. The; information is a simple sequence of brace enclosed ranges, where each range; lists the start and end line/column locations. For example, in this output:. ::. exprs.c:47:15:{47:8-47:14}{47:17-47:24}: error: invalid operands to binary expression ('int *' and '_Complex float'); P = (P-42) + Gamma*4;; ~~~~~~ ^ ~~~~~~~. The {}'s are generated by -fdiagnostics-print-source-",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:15494,test,test,15494,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"foo; ANALYZE (Path, Inline_Regular): test.c foo. Note: a fully qualified function name has to be used when selecting; C++ functions and methods, Objective-C methods and blocks, e.g.:. $ clang -cc1 -analyze -analyzer-checker=core test.cc -analyze-function='foo(int)'. The fully qualified name can be found from the; -analyzer-display-progress output. The bug reporter mechanism removes path diagnostics inside intermediate; function calls that have returned by the time the bug was found and contain; no interesting pieces. Usually it is up to the checkers to produce more; interesting pieces by adding custom BugReporterVisitor objects.; However, you can disable path pruning while debugging with the; -analyzer-config prune-paths=false option. Visualizing the Analysis; To dump the AST, which often helps understanding how the program should; behave:. $ clang -cc1 -ast-dump test.c. To view/dump CFG use debug.ViewCFG or debug.DumpCFG; checkers:. $ clang -cc1 -analyze -analyzer-checker=debug.ViewCFG test.c. ExplodedGraph (the state graph explored by the analyzer) can be; visualized with another debug checker:. $ clang -cc1 -analyze -analyzer-checker=debug.ViewExplodedGraph test.c. Or, equivalently, with -analyzer-viz-egraph-graphviz; option, which does the same thing - dumps the exploded graph in graphviz; .dot format.; You can convert .dot files into other formats - in; particular, converting to .svg and viewing in your web; browser might be more comfortable than using a .dot viewer:. $ dot -Tsvg ExprEngine-501e2e.dot -o ExprEngine-501e2e.svg. The -trim-egraph option removes all paths except those; leading to bug reports from the exploded graph dump. This is useful; because exploded graphs are often huge and hard to navigate.; Viewing ExplodedGraph is your most powerful tool for understanding; the analyzer's false positives, because it gives comprehensive information; on every decision made by the analyzer across all analysis paths.; There are more debug checkers available. To s",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html:21225,test,test,21225,interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,1,['test'],['test']
Testability,"for a single warning or error. The default is 10, and; the limit can be disabled with `-ftemplate-backtrace-limit=0`. .. _cl_diag_formatting:. Formatting of Diagnostics; ^^^^^^^^^^^^^^^^^^^^^^^^^. Clang aims to produce beautiful diagnostics by default, particularly for; new users that first come to Clang. However, different people have; different preferences, and sometimes Clang is driven not by a human,; but by a program that wants consistent and easily parsable output. For; these cases, Clang provides a wide range of options to control the exact; output format of the diagnostics that it generates. .. _opt_fshow-column:. .. option:: -f[no-]show-column. Print column number in diagnostic. This option, which defaults to on, controls whether or not Clang; prints the column number of a diagnostic. For example, when this is; enabled, Clang will print something like:. ::. test.c:28:8: warning: extra tokens at end of #endif directive [-Wextra-tokens]; #endif bad; ^; //. When this is disabled, Clang will print ""test.c:28: warning..."" with; no column number. The printed column numbers count bytes from the beginning of the; line; take care if your source contains multibyte characters. .. _opt_fshow-source-location:. .. option:: -f[no-]show-source-location. Print source file/line/column information in diagnostic. This option, which defaults to on, controls whether or not Clang; prints the filename, line number and column number of a diagnostic.; For example, when this is enabled, Clang will print something like:. ::. test.c:28:8: warning: extra tokens at end of #endif directive [-Wextra-tokens]; #endif bad; ^; //. When this is disabled, Clang will not print the ""test.c:28:8: ""; part. .. _opt_fcaret-diagnostics:. .. option:: -f[no-]caret-diagnostics. Print source line and ranges from source code in diagnostic.; This option, which defaults to on, controls whether or not Clang; prints the source line, source ranges, and caret when emitting a; diagnostic. For example, when this is ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:6015,test,test,6015,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"for the function; definition is parsed as the ""prototype"" production and into the; ``PrototypeAST`` AST node. To represent our new user-defined operators; as prototypes, we have to extend the ``PrototypeAST`` AST node like; this:. .. code-block:: c++. /// PrototypeAST - This class represents the ""prototype"" for a function,; /// which captures its argument names as well as if it is an operator.; class PrototypeAST {; std::string Name;; std::vector<std::string> Args;; bool IsOperator;; unsigned Precedence; // Precedence if a binary op. public:; PrototypeAST(const std::string &Name, std::vector<std::string> Args,; bool IsOperator = false, unsigned Prec = 0); : Name(Name), Args(std::move(Args)), IsOperator(IsOperator),; Precedence(Prec) {}. Function *codegen();; const std::string &getName() const { return Name; }. bool isUnaryOp() const { return IsOperator && Args.size() == 1; }; bool isBinaryOp() const { return IsOperator && Args.size() == 2; }. char getOperatorName() const {; assert(isUnaryOp() || isBinaryOp());; return Name[Name.size() - 1];; }. unsigned getBinaryPrecedence() const { return Precedence; }; };. Basically, in addition to knowing a name for the prototype, we now keep; track of whether it was an operator, and if it was, what precedence; level the operator is at. The precedence is only used for binary; operators (as you'll see below, it just doesn't apply for unary; operators). Now that we have a way to represent the prototype for a; user-defined operator, we need to parse it:. .. code-block:: c++. /// prototype; /// ::= id '(' id* ')'; /// ::= binary LETTER number? (id, id); static std::unique_ptr<PrototypeAST> ParsePrototype() {; std::string FnName;. unsigned Kind = 0; // 0 = identifier, 1 = unary, 2 = binary.; unsigned BinaryPrecedence = 30;. switch (CurTok) {; default:; return LogErrorP(""Expected function name in prototype"");; case tok_identifier:; FnName = IdentifierStr;; Kind = 0;; getNextToken();; break;; case tok_binary:; getNextToken();; if (!isas",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl06.rst:5403,assert,assert,5403,interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl06.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl06.rst,1,['assert'],['assert']
Testability,"for; all the input files passed on the command line. You can use; :option:`--show-suites` to display the discovered test suites at startup. Once a test suite is discovered, its config file is loaded. Config files; themselves are Python modules which will be executed. When the config file is; executed, two important global variables are predefined:. **lit_config**. The global **lit** configuration object (a *LitConfig* instance), which defines; the builtin test formats, global configuration parameters, and other helper; routines for implementing test configurations. **config**. This is the config object (a *TestingConfig* instance) for the test suite,; which the config file is expected to populate. The following variables are also; available on the *config* object, some of which must be set by the config and; others are optional or predefined:. **name** *[required]* The name of the test suite, for use in reports and; diagnostics. **test_format** *[required]* The test format object which will be used to; discover and run tests in the test suite. Generally this will be a builtin test; format available from the *lit.formats* module. **test_source_root** The filesystem path to the test suite root. For out-of-dir; builds this is the directory that will be scanned for tests. **test_exec_root** For out-of-dir builds, the path to the test suite root inside; the object directory. This is where tests will be run and temporary output files; placed. **environment** A dictionary representing the environment to use when executing; tests in the suite. **standalone_tests** When true, mark a directory with tests expected to be run; standalone. Test discovery is disabled for that directory. *lit.suffixes* and; *lit.excludes* must be empty when this variable is true. **suffixes** For **lit** test formats which scan directories for tests, this; variable is a list of suffixes to identify test files. Used by: *ShTest*. **substitutions** For **lit** test formats which substitute variables i",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:15618,test,test,15618,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,3,['test'],"['test', 'tests']"
Testability,"fore each backend; pass, see:; :ref:`Mutation testing for MIR-level transformations<MIRDebugify>`. ``debugify`` in regression tests; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The output of the ``debugify`` pass must be stable enough to use in regression; tests. Changes to this pass are not allowed to break existing tests. .. note::. Regression tests must be robust. Avoid hardcoding line/variable numbers in; check lines. In cases where this can't be avoided (say, if a test wouldn't; be precise enough), moving the test to its own file is preferred. .. _MIRDebugify:. Test original debug info preservation in optimizations; ------------------------------------------------------. In addition to automatically generating debug info, the checks provided by; the ``debugify`` utility pass can also be used to test the preservation of; pre-existing debug info metadata. It could be run as follows:. .. code-block:: bash. # Run the pass by checking original Debug Info preservation.; $ opt -verify-debuginfo-preserve -pass-to-test sample.ll. # Check the preservation of original Debug Info after each pass.; $ opt -verify-each-debuginfo-preserve -O2 sample.ll. Limit number of observed functions to speed up the analysis:. .. code-block:: bash. # Test up to 100 functions (per compile unit) per pass.; $ opt -verify-each-debuginfo-preserve -O2 -debugify-func-limit=100 sample.ll. Please do note that running ``-verify-each-debuginfo-preserve`` on big projects; could be heavily time consuming. Therefore, we suggest using; ``-debugify-func-limit`` with a suitable limit number to prevent extremely long; builds. Furthermore, there is a way to export the issues that have been found into; a JSON file as follows:. .. code-block:: bash. $ opt -verify-debuginfo-preserve -verify-di-preserve-export=sample.json -pass-to-test sample.ll. and then use the ``llvm/utils/llvm-original-di-preservation.py`` script; to generate an HTML page with the issues reported in a more human readable form; as follows:. .. code-blo",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst:14070,test,test,14070,interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,1,['test'],['test']
Testability,"formation is automatically optimized along with the rest of; the program, using existing facilities. For example, duplicate; information is automatically merged by the linker, and unused information; is automatically removed. Basically, the debug information allows you to compile a program with; ""``-O0 -g``"" and get full debug information, allowing you to arbitrarily modify; the program as it executes from a debugger. Compiling a program with; ""``-O3 -g``"" gives you full debug information that is always available and; accurate for reading (e.g., you get accurate stack traces despite tail call; elimination and inlining), but you might lose the ability to modify the program; and call functions which were optimized out of the program, or inlined away; completely. The :doc:`LLVM test-suite <TestSuiteMakefileGuide>` provides a framework to; test the optimizer's handling of debugging information. It can be run like; this:. .. code-block:: bash. % cd llvm/projects/test-suite/MultiSource/Benchmarks # or some other level; % make TEST=dbgopt. This will test impact of debugging information on optimization passes. If; debugging information influences optimization passes then it will be reported; as a failure. See :doc:`TestingGuide` for more information on LLVM test; infrastructure and how to run various tests. .. _format:. Debugging information format; ============================. LLVM debugging information has been carefully designed to make it possible for; the optimizer to optimize the program and debugging information without; necessarily having to know anything about debugging information. In; particular, the use of metadata avoids duplicated debugging information from; the beginning, and the global dead code elimination pass automatically deletes; debugging information for a function if it decides to delete the function. To do this, most of the debugging information (descriptors for types,; variables, functions, source files, etc) is inserted by the language front-end; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SourceLevelDebugging.rst:5879,test,test-suite,5879,interpreter/llvm-project/llvm/docs/SourceLevelDebugging.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SourceLevelDebugging.rst,1,['test'],['test-suite']
Testability,"frastructure, you will need all of the; software required to build LLVM, as well as `Python <http://python.org>`_ 3.6 or; later. LLVM Testing Infrastructure Organization; ========================================. The LLVM testing infrastructure contains three major categories of tests:; unit tests, regression tests and whole programs. The unit tests and regression; tests are contained inside the LLVM repository itself under ``llvm/unittests``; and ``llvm/test`` respectively and are expected to always pass -- they should be; run before every commit. The whole programs tests are referred to as the ""LLVM test suite"" (or; ""test-suite"") and are in the ``test-suite``; `repository on GitHub <https://github.com/llvm/llvm-test-suite.git>`_.; For historical reasons, these tests are also referred to as the ""nightly; tests"" in places, which is less ambiguous than ""test-suite"" and remains; in use although we run them much more often than nightly. Unit tests; ----------. Unit tests are written using `Google Test <https://github.com/google/googletest/blob/master/docs/primer.md>`_; and `Google Mock <https://github.com/google/googletest/blob/master/docs/gmock_for_dummies.md>`_; and are located in the ``llvm/unittests`` directory.; In general unit tests are reserved for targeting the support library and other; generic data structure, we prefer relying on regression tests for testing; transformations and analysis on the IR. Regression tests; ----------------. The regression tests are small pieces of code that test a specific; feature of LLVM or trigger a specific bug in LLVM. The language they are; written in depends on the part of LLVM being tested. These tests are driven by; the :doc:`Lit <CommandGuide/lit>` testing tool (which is part of LLVM), and; are located in the ``llvm/test`` directory. Typically when a bug is found in LLVM, a regression test containing just; enough code to reproduce the problem should be written and placed; somewhere underneath this directory. For example, it",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:1452,test,tests,1452,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['tests']
Testability,"from C++ libraries has been added. ## JavaScript ROOT. - support registered in THttpServer commands with arguments.; - provide workaround for websites using require.js and older jquery-ui; - support custom requests to remote objects, demonstrated in httptextlog.C tutorial; - rewrite draw.htm (page for individual object drawing) to support all custom features as main gui does; - See also the [JSRoot 3.9 examples page](https://root.cern.ch/js/3.9/) and the [JSRoot 3.9 release notes](https://github.com/linev/jsroot/releases/tag/3.9). ## Class Reference Guide. The ROOT [reference guide](https://root.cern.ch/doc/master/index.html) is moving; to the Doxygen system. Doxygen is the de-facto standard for code documentation. It offers; many nice features we are now exploring and trying to get the best of them. Having; [MathJax rendered math formula](https://root.cern.ch/doc/master/classTSpectrum2.html#a482a7f144b9cc1b0405d0ac0d8cc9bbb); is one of them. The documentation can be structured in a more logical way; [using groups](https://root.cern.ch/doc/master/modules.html). Still there is a lot; to do but big progresses have been done. We developed also a Doxygen filter allowing; to execute macros given as examples in the documentation and show the; [resulting picture directly in the documentation](https://root.cern.ch/doc/master/classTHistPainter.html#HP16). ## Tutorials. [The tutorials](https://root.cern.ch/doc/master/group__Tutorials.html) in; `$ROOTSYS/tutorials` are also presented on the web thanks to Doxygen. They; are now part of the reference guide allowing nice cross-referencing with the; classes documentation. Here also a filter has been developed to generate; [the resulting picture](https://root.cern.ch/doc/master/ContourList_8C.html). ## Build, Configuration and Testing Infrastructure. ROOT uses the CMake cross-platform build-generator tool as a primary build system. CMake does not build the project, it generates the files needed by your build tool (GNU make, Ninja, ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v606/index.md:23997,log,logical,23997,README/ReleaseNotes/v606/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v606/index.md,1,['log'],['logical']
Testability,"from HybridCalculator to; HybridCalculatorOriginal; Note also that with the new class no HybridResult is; returned but directly the base class HypoTestResult which; has been improved for this release.; The plot class, HybridPlot is not returned, but; the user can create an HypoTestPlot object from the; HypoTestResult.; The classes HybridResult and HybridPlot work only; with the HybridCalculatorOriginal and remain for maintaining; a backward compatibility. ; Given a ModelConfig, the tool will attempt to form the posterior pdf ; for the nuisance parameters based on the prior and the constraint terms ; in the pdf. However, this is not yet implemented. In order to keep; logical consistency with other tools, the distribution being used; to smear the nuisance parameters should NOT be considered the prior in ; the model config. Instead, one should use HybridCalculator's; ForcePriorNuisanceNull and ForcePriorNuisanceAlt. HybridCalculatorOriginal. Apply a fix for test statistic = 3 (profile likelihood); Apply a fix for using non-extended pdf. TestStatSampler and TestStatistics. Cleanup of the interfaces.; TestStatistics now have a method PValueIsRightTail to specify the sign conventions for the test statistic. This is used when making plots and calculating p-values.; make clear that TestStatistic::Evaluate should take data and values of the parameters that define the null.; Add method TestStatSampler::SetParametersForTestStat that ; allows for greater control of parameters used for generating toy data; and parameters used for evaluating the test statistic.; ProfileLikelihoodTestStatUsing the raw profile likelihood while reviewing the old algorithm used to provide robustness in situations with local minima.; New test statistic classes:; ; SimpleLikelihoodRatioTestStat : log L_1 / L_0; RatioOfProfiledLikelihoodsTestStat: log L(mu_1, hat(nu_1))/L(mu_0,hat(nu_0)); MaxLikelihoodEstimateTestStat: the MLE of a specified parameter. ToyMCSampler. New version of ToyMCSampler which can ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v528/index.html:6338,test,test,6338,roofit/doc/v528/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v528/index.html,1,['test'],['test']
Testability,"from description of `one_dim_pic` structure. The constants, which can be used for appropriate parameters, are defined in `procfunc.h` header file. ``` {.cpp}; struct one_dim_pic {. float *source; // spectrum to be displayed. TCanvas *Canvas; // Canvas where the spectrum will be displayed. int size; // size of source spectrum; int xmin; // x-starting channel of spectrum; int xmax; // x-end channel of spectrum; int ymin; // base counts; int ymax; // count full scale. int bx1; // position of picture on Canvas, min x; int bx2; // position of picture on Canvas, max x; int by1; // position of picture on Canvas, min y; int by2; // position of picture on Canvas, max y. int display_mode; // spectrum display mode (points, polyline, bars, rainbow, steps, bezier); int y_scale; // y scale (linear, log, sqrt); int levels; // # of color levels for rainbow display mode, it does not apply; // for other display modes; float rainbow1_step; // determines the first color component step for neighboring; // color levels, applies only for rainbow display mode; float rainbow2_step; // determines the second component color step for; // neighboring color levels, applies only for rainbow display mode; float rainbow3_step; // determines the third component color step for; // neighboring color levels, applies only for rainbow display mode. int color_alg; // applies only for rainbow display mode (rgb smooth algorithm, rgb; // modulo color component, cmy smooth algorithm, cmy modulo color; // component, cie smooth algorithm, cie modulo color component, yiq; // smooth algorithm, yiq modulo color component, hsv smooth; // algorithm, hsv modulo color component [15]. int bar_thickness; // applies only for bar display mode; int bar_empty_flag; // (empty bars, full bars) applies only for bar display mode; int border_color; // color of background of the picture; int full_border; // decides whether background is painted; int raster_en_dis; // decides whether the axes and rasters are shown; int raster_long",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/spectrum/Spectrum.md:72134,log,log,72134,documentation/spectrum/Spectrum.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/spectrum/Spectrum.md,1,['log'],['log']
Testability,"frontend forwarding, e.g. ``-cc1``; or ``-Xclang``. .. _opencl_finclude_default_header:. .. option:: -finclude-default-header. Adds most of builtin types and function declarations during compilations. By; default the OpenCL headers are not loaded by the frontend and therefore certain; builtin types and most of builtin functions are not declared. To load them; automatically this flag can be passed to the frontend (see also :ref:`the; section on the OpenCL Header <opencl_header>`):. .. code-block:: console. $ clang -Xclang -finclude-default-header test.cl. Alternatively the internal header `opencl-c.h` containing the declarations; can be included manually using ``-include`` or ``-I`` followed by the path; to the header location. The header can be found in the clang source tree or; installation directory. .. code-block:: console. $ clang -I<path to clang sources>/lib/Headers/opencl-c.h test.cl; $ clang -I<path to clang installation>/lib/clang/<llvm version>/include/opencl-c.h/opencl-c.h test.cl. In this example it is assumed that the kernel code contains; ``#include <opencl-c.h>`` just as a regular C include. Because the header is very large and long to parse, PCH (:doc:`PCHInternals`); and modules (:doc:`Modules`) can be used internally to improve the compilation; speed. To enable modules for OpenCL:. .. code-block:: console. $ clang --target=spir-unknown-unknown -c -emit-llvm -Xclang -finclude-default-header -fmodules -fimplicit-module-maps -fmodules-cache-path=<path to the generated module> test.cl. Another way to circumvent long parsing latency for the OpenCL builtin; declarations is to use mechanism enabled by :ref:`-fdeclare-opencl-builtins; <opencl_fdeclare_opencl_builtins>` flag that is available as an alternative; feature. .. _opencl_fdeclare_opencl_builtins:. .. option:: -fdeclare-opencl-builtins. In addition to regular header includes with builtin types and functions using; :ref:`-finclude-default-header <opencl_finclude_default_header>`, clang; supports a fa",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/OpenCLSupport.rst:3667,test,test,3667,interpreter/llvm-project/clang/docs/OpenCLSupport.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/OpenCLSupport.rst,1,['test'],['test']
Testability,"ften requires some setup so that they; can execute properly. :program:`llvm-exegesis` has five annotations and some; additional utilities to help with setup so that snippets can be benchmarked; properly. * `LLVM-EXEGESIS-DEFREG <register name>` - Adding this annotation to the text; assembly snippet to be benchmarked marks the register as requiring a definition.; A value will automatically be provided unless a second parameter, a hex value,; is passed in. This is done with the `LLVM-EXEGESIS-DEFREG <register name> <hex value>`; format. `<hex value>` is a bit pattern used to fill the register. If it is a; value smaller than the register, it is sign extended to match the size of the; register.; * `LLVM-EXEGESIS-LIVEIN <register name>` - This annotation allows specifying; registers that should keep their value upon starting the benchmark. Values; can be passed through registers from the benchmarking setup in some cases.; The registers and the values assigned to them that can be utilized in the; benchmarking script with a `LLVM-EXEGESIS-LIVEIN` are as follows:. * Scratch memory register - The specific register that this value is put in; is platform dependent (e.g., it is the RDI register on X86 Linux). Setting; this register as a live in ensures that a pointer to a block of memory (1MB); is placed within this register that can be used by the snippet.; * `LLVM-EXEGESIS-MEM-DEF <value name> <size> <value>` - This annotation allows; specifying memory definitions that can later be mapped into the execution; process of a snippet with the `LLVM-EXEGESIS-MEM-MAP` annotation. Each; value is named using the `<value name>` argument so that it can be referenced; later within a map annotation. The size is specified in a decimal number of; bytes and the value is given in hexadecimal. If the size of the value is less; than the specified size, the value will be repeated until it fills the entire; section of memory. Using this annotation requires using the subprocess execution; mode.; * ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst:2699,benchmark,benchmarking,2699,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,1,['benchmark'],['benchmarking']
Testability,"ftware and method performance; validation has been implemented.; . Methods. BDT Automatic parameter optimisation for building the; tree architecture: The optimisation procedure uses the; performance of the trained classifier on the ""test sample"" for; finding the set of optimal parameters. Two different methods to; traverse the parameter space are available (scanning, genetic; algorithm). Currently parameter optimization is implemented only; for these three parameters that influence the tree architectur:; the maximum depth of a tree, MaxDepth, the minimum; number of events in each node, NodeMinEvents, and; the number of tress, NTrees. Optimization can; is invoked by calling; factory->OptimizeAllMethods(); prior to the call; factory->TrainAllMethods();. Automated and configurable parameter optimization is soon to; be enabled for all methods (for those parameters where; optimization is applicable).; . BDT node splitting: While Decision Trees; typically have only univariate splits, in TMVA one can now; also opt for multivariate splits that use a ""Fisher; Discriminant"" (option: UseFisherCuts), built from all; observables that show correlations larger than some threshold; (MinLinCorrForFisher). The training will then test at each; split a cut on this fisher discriminant in addition to all; univariate cuts on the variables (or only on those variables; that have not been used in the Fisher discriminant, option; UseExcusiveVars). No obvious improvement betwen very simple; decision trees after boosting has been observed so far, but; only a limited number of studies has been performed concerning; potiential benenfit of these simple multivariate splits.; . Bug fixes. A problem in the BDTG has been fixed, leading to a much; improved regression performance.; A problem in the TMVA::Reader has been fixed.; With the new test framework and the coverity checks of ROOT; a number of bugs were discovered and fixed. They mainly concerned; memory leaks, and did not affect the performance. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v528/index.html:2712,test,test,2712,tmva/doc/v528/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v528/index.html,2,['test'],['test']
Testability,"ful for debugging. SamplingDistribution and the�TestStatSampler interface and; implementations; We introduced a ``result'' or data model class called; SamplingDistribution, which holds the sampling distribution of an; arbitrary real valued test statistic. �The class also can return the; inverse of the cumulative distribution function (with or without; interpolation). �; We introduced an interface for any tool that can produce a; SamplingDistribution, called TestStatSampler. �The interface is; essentially GetSamplingDistribution(parameterPoint) which returns a; SamplingDistribution based on a given probability density function. �We; foresee a few versions of this tool based on toy Monte Carlo, importance; sampling, Fourier transforms, etc. �The following concrete implementation; of the TestStatSampler interface are currently available. ToyMCSamplerUses a Toy Monte Carlo approach to build the; sampling distribution. �The pdf's generate method to generate is used to; generate toy data, and then the test statistic is evaluated at the; requested parameter point. ; DebuggingSampler Simply returns a uniform distribution; between 0,1. �Useful for debugging. NeymanConstruction and FeldmanCousins; A flexible framework for the Neyman Construction was added in this; release. The NeymanConstruction is a concrete implementation of the; IntervalCalculator interface, but it needs several; additional components�to be specified before use. The design; factorizes the choice of the parameter points to be tested,�the choice of; the test statistic, and the generation of sampling distribution into; separate parts (described above). �Finally, the NeymanConstruction class; is simply in charge of using these parts (strategies) and constructing; the confidence belt and confidence intervals. �The ConfidenceBelt class; is still under development, but the current version works fine for; producing ConfidenceIntervals. �We are also working to make this class; work with parallelization approaches, ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v524/index.html:27514,test,test,27514,roofit/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v524/index.html,1,['test'],['test']
Testability,"function of X */;; }. static void function_to_test() {; ...; int Y = function_to_mock();; printf(""Y is %i\n"", Y);; }. If we want to know how ``function_to_test`` behaves when we change the behavior; of ``function_to_mock`` we can test it by writing a test harness:. .. code-block:: c. void function_to_test();. int function_to_mock(int X) {; printf(""used mock utility function\n"");; return 42;; }. int main(int argc, char *argv[]) {; function_to_test():; return 0;; }. Under normal circumstances these objects could not be linked together:; ``function_to_test`` is static and could not be resolved outside; ``test_code.o``, the two ``function_to_mock`` functions would result in a; duplicate definition error, and ``irrelevant_external`` is undefined.; However, using ``-harness`` and ``-phony-externals`` we can run this code; with:. .. code-block:: sh. % clang -c -o test_code_harness.o test_code_harness.c; % llvm-jitlink -phony-externals test_code.o -harness test_code_harness.o; used mock utility function; Y is 42. The ``-harness`` option may be of interest to people who want to perform some; very late testing on build products to verify that compiled code behaves as; expected. On basic C test cases this is relatively straightforward. Mocks for; more complicated languages (e.g. C++) are much trickier: Any code involving; classes tends to have a lot of non-trivial surface area (e.g. vtables) that; would require great care to mock. Tips for JITLink backend developers; -----------------------------------. #. Make liberal use of assert and ``llvm::Error``. Do *not* assume that the input; object is well formed: Return any errors produced by libObject (or your own; object parsing code) and validate as you construct. Think carefully about the; distinction between contract (which should be validated with asserts and; llvm_unreachable) and environmental errors (which should generate; ``llvm::Error`` instances). #. Don't assume you're linking in-process. Use libSupport's sized,; endian-",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/JITLink.rst:42393,mock,mock,42393,interpreter/llvm-project/llvm/docs/JITLink.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/JITLink.rst,1,['mock'],['mock']
Testability,"function``). Change the message to ""in order to; understand recursion, you must first understand recursion"". Test again; ----------. To verify our change, we can build clang and manually check that it; works. .. code:: console. $ ninja clang; $ bin/clang -Wall ~/test.cc; /path/test.cc:1:124: warning: in order to understand recursion, you must; first understand recursion [-Winfinite-recursion]. We should also run the tests to make sure we didn't break something. .. code:: console. $ ninja check-clang. Notice that it is much faster to build this time, but the tests take; just as long to run. Ninja doesn't know which tests might be affected,; so it runs them all. .. code:: console. ********************; Testing Time: 408.84s; ********************; Failing Tests (1):; Clang :: SemaCXX/warn-infinite-recursion.cpp. Well, that makes sense… and the test output suggests it's looking for; the old string ""call itself"" and finding our new message instead.; Note that more tests may fail in a similar way as new tests are; added time to time. Let's fix it by updating the expectation in the test. .. code:: console. $ vi ../clang/test/SemaCXX/warn-infinite-recursion.cpp. Everywhere we see `// expected-warning{{call itself}}` (or something similar; from the original warning text), let's replace it with; `// expected-warning{{to understand recursion}}`. Now we could run **all** the tests again, but this is a slow way to; iterate on a change! Instead, let's find a way to re-run just the; specific test. There are two main types of tests in LLVM:. - **lit tests** (e.g. SemaCXX/warn-infinite-recursion.cpp). These are fancy shell scripts that run command-line tools and verify the; output. They live in files like; clang/**test**/FixIt/dereference-addressof.c. Re-run like this:. .. code:: console. $ bin/llvm-lit -v ../clang/test/SemaCXX/warn-infinite-recursion.cpp. - **unit tests** (e.g. ToolingTests/ReplacementTest.CanDeleteAllText). These are C++ programs that call LLVM functions and verif",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst:6935,test,tests,6935,interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,2,['test'],['tests']
Testability,"functions, like ; this:. ; RUN: llvm-as < %s | opt -argpromotion | llvm-dis | grep x.val. define internal i32 @foo(i32* %x) {; entry:; 	%tmp = load i32* %x		; <i32> [#uses=0]; 	%tmp.foo = call i32 @foo( i32* %x )		; <i32> [#uses=1]; 	ret i32 %tmp.foo; }. define i32 @bar(i32* %x) {; entry:; 	%tmp3 = call i32 @foo( i32* %x )		; <i32> [#uses=1]; 	ret i32 %tmp3; }. //===---------------------------------------------------------------------===//. We should investigate an instruction sinking pass. Consider this silly; example in pic mode:. #include <assert.h>; void foo(int x) {; assert(x);; //...; }. we compile this to:; _foo:; 	subl	$28, %esp; 	call	""L1$pb""; ""L1$pb"":; 	popl	%eax; 	cmpl	$0, 32(%esp); 	je	LBB1_2	# cond_true; LBB1_1:	# return; 	# ...; 	addl	$28, %esp; 	ret; LBB1_2:	# cond_true; ... The PIC base computation (call+popl) is only used on one path through the ; code, but is currently always computed in the entry block. It would be ; better to sink the picbase computation down into the block for the ; assertion, as it is the only one that uses it. This happens for a lot of ; code with early outs. Another example is loads of arguments, which are usually emitted into the ; entry block on targets like x86. If not used in all paths through a ; function, they should be sunk into the ones that do. In this case, whole-function-isel would also handle this. //===---------------------------------------------------------------------===//. Investigate lowering of sparse switch statements into perfect hash tables:; http://burtleburtle.net/bob/hash/perfect.html. //===---------------------------------------------------------------------===//. We should turn things like ""load+fabs+store"" and ""load+fneg+store"" into the; corresponding integer operations. On a yonah, this loop:. double a[256];; void foo() {; int i, b;; for (b = 0; b < 10000000; b++); for (i = 0; i < 256; i++); a[i] = -a[i];; }. is twice as slow as this loop:. long long a[256];; void foo() {; int i, b;; for (b = 0; b",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt:12545,assert,assertion,12545,interpreter/llvm-project/llvm/lib/Target/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt,1,['assert'],['assertion']
Testability,"g Clang, one invokes Clang with the; `-x <language>-header` option. This mirrors the interface in GCC; for generating PCH files:. .. code-block:: console. $ gcc -x c-header test.h -o test.h.gch; $ clang -x c-header test.h -o test.h.pch. Using a PCH File; ^^^^^^^^^^^^^^^^. A PCH file can then be used as a prefix header when a ``-include-pch``; option is passed to ``clang``:. .. code-block:: console. $ clang -include-pch test.h.pch test.c -o test. The ``clang`` driver will check if the PCH file ``test.h.pch`` is; available; if so, the contents of ``test.h`` (and the files it includes); will be processed from the PCH file. Otherwise, Clang will report an error. .. note::. Clang does *not* automatically use PCH files for headers that are directly; included within a source file or indirectly via :option:`-include`.; For example:. .. code-block:: console. $ clang -x c-header test.h -o test.h.pch; $ cat test.c; #include ""test.h""; $ clang test.c -o test. In this example, ``clang`` will not automatically use the PCH file for; ``test.h`` since ``test.h`` was included directly in the source file and not; specified on the command line using ``-include-pch``. Relocatable PCH Files; ^^^^^^^^^^^^^^^^^^^^^. It is sometimes necessary to build a precompiled header from headers; that are not yet in their final, installed locations. For example, one; might build a precompiled header within the build tree that is then; meant to be installed alongside the headers. Clang permits the creation; of ""relocatable"" precompiled headers, which are built with a given path; (into the build directory) and can later be used from an installed; location. To build a relocatable precompiled header, place your headers into a; subdirectory whose structure mimics the installed location. For example,; if you want to build a precompiled header for the header ``mylib.h``; that will be installed into ``/usr/include``, create a subdirectory; ``build/usr/include`` and place the header ``mylib.h`` into that; subdi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:47697,test,test,47697,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"g a pointer).; The analyzer knows about several well-known assertion handlers, but can; automatically infer if a function should be treated as an assertion handler if; it is annotated with the 'noreturn' attribute or the (Clang-specific); 'analyzer_noreturn' attribute. Note that, currently, clang does not support; these attributes on Objective-C methods and C++ methods.; Attribute 'noreturn'; The 'noreturn' attribute is a GCC-attribute that can be placed on the; declarations of functions. It means exactly what its name implies: a function; with a 'noreturn' attribute should never return.; Specific details of the syntax of using the 'noreturn' attribute can be found; in GCC's; documentation.; Not only does the analyzer exploit this information when pruning false paths,; but the compiler also takes it seriously and will generate different code (and; possibly better optimized) under the assumption that the function does not; return.; Example; On Mac OS X, the function prototype for __assert_rtn (declared in; assert.h) is specifically annotated with the 'noreturn' attribute:. void __assert_rtn(const char *, const char *, int, const char *) __attribute__((__noreturn__));. Attribute 'analyzer_noreturn' (Clang-specific); The Clang-specific 'analyzer_noreturn' attribute is almost identical to; 'noreturn' except that it is ignored by the compiler for the purposes of code; generation.; This attribute is useful for annotating assertion handlers that actually; can return, but for the purpose of using the analyzer we want to; pretend that such functions do not return.; Because this attribute is Clang-specific, its use should be conditioned with; the use of preprocessor macros.; Example. #ifndef CLANG_ANALYZER_NORETURN; #if __has_feature(attribute_analyzer_noreturn); #define CLANG_ANALYZER_NORETURN __attribute__((analyzer_noreturn)); #else; #define CLANG_ANALYZER_NORETURN; #endif; #endif. void my_assert_rtn(const char *, const char *, int, const char *) CLANG_ANALYZER_NORETURN;. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html:22907,assert,assertion,22907,interpreter/llvm-project/clang/www/analyzer/annotations.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html,1,['assert'],['assertion']
Testability,"g as the `CMakeCache.txt` file is not removed. Remember that after building a tarball or a binary package you should remove the copied files using:. ```bash; make purge; ```. Otherwise git shows the file as untracked, unless you explicitly remove their tracking yourself with a .gitignore file. ## Building a tarball. Minuit2 standalone also has support for CPack to make installers for different platforms. To build a source package:. ```bash; make package_source; ```. This will create a source file in several formats that you can distribute. Reminder: You **must** have used `-Dminuit2_standalone=ON` when you configured CMake, or many of the files will be missing. ## Building a binary. To build a binary package (add other generators with `-G`):; ```bash; make; make package; ```. ## Maintenance. If new files are needed by Minuit2 due to additions to [ROOT], they should be added to the source files lists in `src/Math/CMakeLists.txt` and `src/Minuit2/CMakeLists.txt` (depending on if it's a new Math or Minuit2 requirement). For testing, the main `test/CMakeLists.txt` is used by ROOT, and the `test/*/CMakeLists.txt` files are used by the standalone build. ## How it works. Extracting from the ROOT sources is made possible through a few careful design features:. * A CMake variable `minuit2_inroot` lets the build system know we are inside ROOT (it looks for `../../build/version_info`); * All files that are not part of the minuit2 directory are passed into `copy_standalone`, and that handles selecting the correct location; * `copy_standalone` copies the files into the minuit2 source directory if `minuit2_standalone` is `ON`. After this happens, all the standard CMake machinery can produce the source distribution. And, CMake correctly builds and installs in either mode, since all source and header files are explicitly listed. [ROOT]: https://root.cern; [minuitdoc]: https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html#minuit2-package; [CMake]: https://cmake.org; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/DEVELOP.md:1866,test,testing,1866,math/minuit2/DEVELOP.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/DEVELOP.md,3,['test'],"['test', 'testing']"
Testability,"g functions and; then only weak ones:. 2.1. Loop body: take a function from *worklist* (call it *FCur*) and try to; insert it into *FnTree*: check whether *FCur* is equal to one of functions; in *FnTree*. If there *is* an equal function in *FnTree*; (call it *FExists*): merge function *FCur* with *FExists*. Otherwise add; the function from the *worklist* to *FnTree*. 3. Once the *worklist* scanning and merging operations are complete, check the; *Deferred* list. If it is not empty: refill the *worklist* contents with; *Deferred* list and redo step 2, if the *Deferred* list is empty, then exit; from method. Comparison and logarithmical search; """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Let's recall our task: for every function *F* from module *M*, we have to find; equal functions *F`* in the shortest time possible , and merge them into a; single function. Defining total ordering among the functions set allows us to organize; functions into a binary tree. The lookup procedure complexity would be; estimated as O(log(N)) in this case. But how do we define *total-ordering*?. We have to introduce a single rule applicable to every pair of functions, and; following this rule, then evaluate which of them is greater. What kind of rule; could it be? Let's declare it as the ""compare"" method that returns one of 3; possible values:. -1, left is *less* than right,. 0, left and right are *equal*,. 1, left is *greater* than right. Of course it means, that we have to maintain; *strict and non-strict order relation properties*:. * reflexivity (``a <= a``, ``a == a``, ``a >= a``),; * antisymmetry (if ``a <= b`` and ``b <= a`` then ``a == b``),; * transitivity (``a <= b`` and ``b <= c``, then ``a <= c``); * asymmetry (if ``a < b``, then ``a > b`` or ``a == b``). As mentioned before, the comparison routine consists of; ""sub-comparison-routines"", with each of them also consisting of; ""sub-comparison-routines"", and so on. Finally, it ends up with primitive; comparison. Below, we will use the foll",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MergeFunctions.rst:9543,log,log,9543,interpreter/llvm-project/llvm/docs/MergeFunctions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MergeFunctions.rst,1,['log'],['log']
Testability,"g includes a basic regression suite in the tree which can be; run with make test from the top-level clang directory, or; just make in the test sub-directory.; make VERBOSE=1 can be used to show more detail; about what is being run.; If you built LLVM and Clang using CMake, the test suite can be run; with make check-clang from the top-level LLVM directory.; The tests primarily consist of a test runner script running the compiler; under test on individual test files grouped in the directories under the; test directory. The individual test files include comments at the; beginning indicating the Clang compile options to use, to be read; by the test runner. Embedded comments also can do things like telling; the test runner that an error is expected at the current line.; Any output files produced by the test will be placed under; a created Output directory.; During the run of make test, the terminal output will; display a line similar to the following:; --- Running clang tests for i686-pc-linux-gnu ---; followed by a line continually overwritten with the current test; file being compiled, and an overall completion percentage.; After the make test run completes, the absence of any; Failing Tests (count): message indicates that no tests; failed unexpectedly. If any tests did fail, the; Failing Tests (count): message will be followed by a list; of the test source file paths that failed. For example:. Failing Tests (3):; /home/john/llvm/tools/clang/test/SemaCXX/member-name-lookup.cpp; /home/john/llvm/tools/clang/test/SemaCXX/namespace-alias.cpp; /home/john/llvm/tools/clang/test/SemaCXX/using-directive.cpp. If you used the make VERBOSE=1 option, the terminal; output will reflect the error messages from the compiler and; test runner.; The regression suite can also be run with Valgrind by running; make test VG=1 in the top-level clang directory.; For more intensive changes, running; the LLVM; Test Suite with clang is recommended. Currently the best way to; override LLVMGCC, as i",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html:3377,test,test,3377,interpreter/llvm-project/clang/www/hacking.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html,3,['test'],"['test', 'tests']"
Testability,"g information does not prevent optimizations from; happening (for example inlining, basic block reordering/merging/cleanup,; tail duplication, etc). * LLVM debug information is automatically optimized along with the rest of; the program, using existing facilities. For example, duplicate; information is automatically merged by the linker, and unused information; is automatically removed. Basically, the debug information allows you to compile a program with; ""``-O0 -g``"" and get full debug information, allowing you to arbitrarily modify; the program as it executes from a debugger. Compiling a program with; ""``-O3 -g``"" gives you full debug information that is always available and; accurate for reading (e.g., you get accurate stack traces despite tail call; elimination and inlining), but you might lose the ability to modify the program; and call functions which were optimized out of the program, or inlined away; completely. The :doc:`LLVM test-suite <TestSuiteMakefileGuide>` provides a framework to; test the optimizer's handling of debugging information. It can be run like; this:. .. code-block:: bash. % cd llvm/projects/test-suite/MultiSource/Benchmarks # or some other level; % make TEST=dbgopt. This will test impact of debugging information on optimization passes. If; debugging information influences optimization passes then it will be reported; as a failure. See :doc:`TestingGuide` for more information on LLVM test; infrastructure and how to run various tests. .. _format:. Debugging information format; ============================. LLVM debugging information has been carefully designed to make it possible for; the optimizer to optimize the program and debugging information without; necessarily having to know anything about debugging information. In; particular, the use of metadata avoids duplicated debugging information from; the beginning, and the global dead code elimination pass automatically deletes; debugging information for a function if it decides to delete th",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SourceLevelDebugging.rst:5693,test,test-suite,5693,interpreter/llvm-project/llvm/docs/SourceLevelDebugging.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SourceLevelDebugging.rst,2,['test'],"['test', 'test-suite']"
Testability,"g of code editor and image viewer widgets; - rbrowser content is fully recovered when web-browser is reloaded; - load of widgets code only when really required (shorter startup time for RBrowser). ## Montecarlo Libraries. ## PROOF Libraries. ## Language Bindings. ## JavaScript ROOT. ### Major JSROOT update to version 6. - update all used libraries `d3.js`, `three.js`, `MathJax.js`, openui5; - change to Promise based interface for all async methods, remove call-back arguments; - change scripts names, core scripts name now `JSRoot.core.js`; - unify function/methods naming conventions, many changes in method names; - provide central code loader via `JSROOT.require`, supporting 4 different loading engines; - many nice features and many bug fixes; see JSROOT v6 release notes. ## Tutorials. ## Class Reference Guide. ## Build, Configuration and Testing Infrastructure. - a new cmake variable, `CMAKE_INSTALL_PYTHONDIR`, has been added: it allows customization of the installation directory of ROOT's python modules; - the developer build option `asserts` is introduced to enable/disable asserts via the `NDEBUG` C/CXX flag. Asserts are always enabled for `CMAKE_BUILD_TYPE=Debug` and `dev=ON`. The previous behavior of the builds set via the `CMAKE_BUILD_TYPE` variable has not changed.; - `CMAKE_CXX_STANDARD`, i.e. the C++ standard ROOT is built with, now defaults to the compiler default (or C++11 if the compiler default is older than that) rather than always defaulting to C++11. In turn this means that v6.24 is the first ROOT release for which ROOT's pre-compiled binaries are not compiled with C++11 but with the default standard in use by the default system compiler. On Ubuntu 20.04, for example, the v6.24 pre-compiled binaries are now compiled with C++14 rather than C++11 as it happened for previous ROOT versions. Also see [ROOT-10692](https://sft.its.cern.ch/jira/browse/ROOT-10692). The following builtins have been updated:. - VecCore 0.7.0. ## PyROOT. - Deprecate `TTree.AsMatri",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v624/index.md:28120,assert,asserts,28120,README/ReleaseNotes/v624/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v624/index.md,2,['assert'],['asserts']
Testability,"g of the vector of parameters std::vector$<$double$>$ in the; argument of FCNBase::operator() are of course defined by the user, who; uses the values of those parameters to calculate their function value. The; order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting values must be specified by the user, either via an; std::vector$<$double$>$ or the MnUserParameters (see [api:parameters]); supplied as input to the M minimizers such as VariableMetricMinimizer or; MnMigrad (see [api:migrad]). Later values are determined by M as it; searches for the minimum or performs whatever analysis is requested by; the user. ### FCNBase::up() ###. [howto:errordef] Returns the value of $\mbox{up}$ (default value; $= 1.$), defining parameter errors. M defines parameter errors as the; change in parameter value required to change the function value by; $\mbox{up}$. Normally, for chisquared fits $\mbox{up = 1}$, and; for negative log likelihood, $\mbox{up = 0.5}$. ### $\mbox{FCN}$ function with gradient ###. By default first derivatives are calculated numerically by M . In case; the user wants to supply their own gradient calculator (e.g. analytical; derivatives), they need to implement the FCNGradientBase interface. ![](figures/fcngradientbase.png). The size of the output vector is the same as of the input one. The same; is true for the position of the elements (first derivative of the; function with respect to the $n_\mathrm{th}$ variable has index $n$ in; the output vector). ## M parameters ##. Interaction with the parameters of the function are essential both for M; and the user. Different interfaces are provided, depending on the level; of interaction. ### Minimal required interface ###. Starting values of parameters and uncertainties can be provided to M by; the user via std::vector$<$double$>$ vector containers. Any interaction; with the parameters before minimization (fix, release, lim",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/minuit2/Minuit2.md:29678,log,log,29678,documentation/minuit2/Minuit2.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/minuit2/Minuit2.md,1,['log'],['log']
Testability,"g protobuf fuzzer."" OFF). if(NOT CLANG_ENABLE_STATIC_ANALYZER AND CLANG_ENABLE_ARCMT); message(FATAL_ERROR ""Cannot disable static analyzer while enabling ARCMT or Z3""); endif(). if(CLANG_ENABLE_ARCMT); set(CLANG_ENABLE_OBJC_REWRITER ON); endif(). # This option is a stop-gap, we should commit to removing this as; # soon as possible. See discussion:; # https://discourse.llvm.org/t/rationale-for-removing-versioned-libclang-middle-ground-to-keep-it-behind-option/; option(CLANG_FORCE_MATCHING_LIBCLANG_SOVERSION; ""Force the SOVERSION of libclang to be equal to CLANG_MAJOR"" ON). # Clang version information; set(CLANG_EXECUTABLE_VERSION; ""${CLANG_VERSION_MAJOR}"" CACHE STRING; ""Major version number that will be appended to the clang executable name""); set(LIBCLANG_LIBRARY_VERSION; ""${CLANG_VERSION_MAJOR}"" CACHE STRING; ""Major version number that will be appended to the libclang library""); mark_as_advanced(CLANG_EXECUTABLE_VERSION LIBCLANG_LIBRARY_VERSION). option(CLANG_INCLUDE_TESTS; ""Generate build targets for the Clang unit tests.""; ${LLVM_INCLUDE_TESTS}). option(CLANG_ENABLE_HLSL ""Include HLSL build products"" Off); # While HLSL support is experimental this should stay hidden.; mark_as_advanced(CLANG_ENABLE_HLSL). add_subdirectory(utils/TableGen). # Export CLANG_TABLEGEN_EXE for use by flang docs.; set(CLANG_TABLEGEN_EXE ""${CLANG_TABLEGEN_EXE}"" CACHE INTERNAL """"). add_subdirectory(include). # All targets below may depend on all tablegen'd files.; get_property(CLANG_TABLEGEN_TARGETS GLOBAL PROPERTY CLANG_TABLEGEN_TARGETS); add_custom_target(clang-tablegen-targets; DEPENDS; omp_gen; ClangDriverOptions; ${CLANG_TABLEGEN_TARGETS}); set_target_properties(clang-tablegen-targets PROPERTIES FOLDER ""Misc""); list(APPEND LLVM_COMMON_DEPENDS clang-tablegen-targets). # Force target to be built as soon as possible. Clang modules builds depend; # header-wise on it as they ship all headers from the umbrella folders. Building; # an entire module might include header, which depends on intri",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:16760,test,tests,16760,interpreter/llvm-project/clang/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt,1,['test'],['tests']
Testability,"g with debug information, there are situations when the; printing of the elements is not the correct approach. That is the case,; when we are interested in the effects caused by different versions of; the same toolchain, or the impact of specific compiler optimizations. For those cases, we are looking to see which elements have been added; or removed. Due to the complicated debug information format, it is very; difficult to use a regular diff tool to find those elements; even; impossible when dealing with different debug formats. :program:`llvm-debuginfo-analyzer` supports a logical element comparison,; allowing to find semantic differences between logical views, produced by; different toolchain versions or even debug information formats. When comparing logical views created from different debug formats, its; accuracy depends on how close the debug information represents the; user code. For instance, a logical view created from a binary file with; DWARF debug information may include more detailed data than a logical; view created from a binary file with CodeView/COFF debug information. The following options describe the elements to compare. .. option:: --compare=<value[,value,...]>. With **value** being one of the options in the following list. .. code-block:: text. =all: Include all the below elements. .. code-block:: text. =lines: Include lines.; =scopes: Include scopes.; =symbols: Include symbols.; =types: Include types. :program:`llvm-debuginfo-analyzer` takes the first binary file on the; command line as the **reference** and the second one as the **target**.; To get a more descriptive report, the comparison is done twice. The; reference and target views are swapped, in order to produce those; **missing** elements from the target view and those **added** elements; to the reference view. See :option:`--report` options on how to describe the comparison; reports. .. _warning_:. WARNING; ~~~~~~~; When reading the input object files, :program:`llvm-debuginfo-analyzer",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:20274,log,logical,20274,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,2,['log'],['logical']
Testability,"g(malloc(1)), h()); // warn: 'g()' may never be called.; }. void f(int, int);; int g(int *);; int h() { throw 1; };. void test() {; // It is possible that 'new int' is called first,; // then 'h()', that throws an exception and eventually; // 'g()' is never called.; f(g(new int), h()); // warn: 'g()' may never be called.; }. memory.DstBufferTooSmall; (C, C++); Destination buffer passed to memory function is too small.; Note: security.insecureAPI.strcpy currently warns; on usage of strcpy and suggests to replace it.; Note: alpha.unix.CStringChecker contains some similar checks.; Source: CWE-120. void test() {; const char* s1 = ""abc"";; char *s2 = new char;; strcpy(s2, s1); // warn; }. void test() {; int* p1 = new int[3];; int* p2 = new int;; memcpy(p2, p1, 3); // warn; }. memory.NegativeArraySize; (C, C++); 'n' is used to specify the buffer size may be negative.; Note: possibly an enhancement to ; alpha.security.MallocOverflow.; Source: CWE-20,; Example 2. void test() {; int *p;; int n1 = -1;; p = new int[n1]; // warn; }. memory.ZeroAlloc; (C, C++); Allocation of zero bytes.; Note: an enhancement to unix.Malloc.; Note: unix.API perform C-checks for zero; allocation. This should be moved to unix.Malloc.; Source: C++03 3.7.3.1p2; C++11 3.7.4.1p2. #include <stdlib.h>. void test() {; int *p = malloc(0); // warn; free(p);; }. void test() {; int *p = new int[0]; // warn; delete[] p;; }. D6178. constructors/destructors. Name, DescriptionExampleProgress. ctordtor.ExptInsideDtor; (C++); It is dangerous to let an exception leave a destructor.; Using try..catch solves the problem.; Source: Scott Meyers ""More Effective C++"", item 11: Prevent exceptions from; leaving destructors. class A {; A() {}; ~A() { throw 1; } // warn; };. void f() throw(int);. class A {; A() {}; ~A() { f(); } // warn; };. ctordtor.PlacementSelfCopy; (C++11); For a placement copy or move, it is almost certainly an error if the; constructed object is also the object being copied from. class A {};. void test(A *",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:1739,test,test,1739,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"g-dbl/LoopRerolling-dbl 7.01 7.86 12.2%; SingleSour...UnitTests/Vectorizer/gcc-loops 3.89 3.54 -9.0%; ...; ```. - Merge multiple baseline and experiment result files by taking the minimum; runtime each:. ```bash; % test-suite/utils/compare.py base0.json base1.json base2.json vs exp0.json exp1.json exp2.json; ```. ### Continuous Tracking with LNT. LNT is a set of client and server tools for continuously monitoring; performance. You can find more information at; [https://llvm.org/docs/lnt](https://llvm.org/docs/lnt). The official LNT instance; of the LLVM project is hosted at [http://lnt.llvm.org](http://lnt.llvm.org). External Suites; ---------------. External suites such as SPEC can be enabled by either. - placing (or linking) them into the `test-suite/test-suite-externals/xxx` directory (example: `test-suite/test-suite-externals/speccpu2000`); - using a configuration option such as `-D TEST_SUITE_SPEC2000_ROOT=path/to/speccpu2000`. You can find further information in the respective README files such as; `test-suite/External/SPEC/README`. For the SPEC benchmarks you can switch between the `test`, `train` and; `ref` input datasets via the `TEST_SUITE_RUN_TYPE` configuration option.; The `train` dataset is used by default. Custom Suites; -------------. You can build custom suites using the test-suite infrastructure. A custom suite; has a `CMakeLists.txt` file at the top directory. The `CMakeLists.txt` will be; picked up automatically if placed into a subdirectory of the test-suite or when; setting the `TEST_SUITE_SUBDIRS` variable:. ```bash; % cmake -DTEST_SUITE_SUBDIRS=path/to/my/benchmark-suite ../test-suite; ```. Profile Guided Optimization; ---------------------------. Profile guided optimization requires to compile and run twice. First the; benchmark should be compiled with profile generation instrumentation enabled; and setup for training data. The lit runner will merge the profile files; using `llvm-profdata` so they can be used by the second compilation run. E",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:9311,test,test-suite,9311,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['test'],['test-suite']
Testability,"g-point/SIMD register in the ranges; ``s0-s31``, ``d0-d31``, or ``q0-q15``, respectively.; - ``t``: A 32, 64, or 128-bit floating-point/SIMD register in the ranges; ``s0-s31``, ``d0-d15``, or ``q0-q7``, respectively.; - ``x``: A 32, 64, or 128-bit floating-point/SIMD register in the ranges; ``s0-s15``, ``d0-d7``, or ``q0-q3``, respectively. Hexagon:. - ``o``, ``v``: A memory address operand, treated the same as constraint ``m``,; at the moment.; - ``r``: A 32 or 64-bit register. LoongArch:. - ``f``: A floating-point register (if available).; - ``k``: A memory operand whose address is formed by a base register and; (optionally scaled) index register.; - ``l``: A signed 16-bit constant.; - ``m``: A memory operand whose address is formed by a base register and; offset that is suitable for use in instructions with the same addressing; mode as st.w and ld.w.; - ``I``: A signed 12-bit constant (for arithmetic instructions).; - ``J``: An immediate integer zero.; - ``K``: An unsigned 12-bit constant (for logic instructions).; - ``ZB``: An address that is held in a general-purpose register. The offset; is zero.; - ``ZC``: A memory operand whose address is formed by a base register and; offset that is suitable for use in instructions with the same addressing; mode as ll.w and sc.w. MSP430:. - ``r``: An 8 or 16-bit register. MIPS:. - ``I``: An immediate signed 16-bit integer.; - ``J``: An immediate integer zero.; - ``K``: An immediate unsigned 16-bit integer.; - ``L``: An immediate 32-bit integer, where the lower 16 bits are 0.; - ``N``: An immediate integer between -65535 and -1.; - ``O``: An immediate signed 15-bit integer.; - ``P``: An immediate integer between 1 and 65535.; - ``m``: A memory address operand. In MIPS-SE mode, allows a base address; register plus 16-bit immediate offset. In MIPS mode, just a base register.; - ``R``: A memory address operand. In MIPS-SE mode, allows a base address; register plus a 9-bit signed offset. In MIPS mode, the same as constraint; ``m",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:227608,log,logic,227608,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['log'],['logic']
Testability,"g-prefix`). Test suites are; initially discovered by recursively searching up the directory hierarchy for; all the input files passed on the command line. You can use; :option:`--show-suites` to display the discovered test suites at startup. Once a test suite is discovered, its config file is loaded. Config files; themselves are Python modules which will be executed. When the config file is; executed, two important global variables are predefined:. **lit_config**. The global **lit** configuration object (a *LitConfig* instance), which defines; the builtin test formats, global configuration parameters, and other helper; routines for implementing test configurations. **config**. This is the config object (a *TestingConfig* instance) for the test suite,; which the config file is expected to populate. The following variables are also; available on the *config* object, some of which must be set by the config and; others are optional or predefined:. **name** *[required]* The name of the test suite, for use in reports and; diagnostics. **test_format** *[required]* The test format object which will be used to; discover and run tests in the test suite. Generally this will be a builtin test; format available from the *lit.formats* module. **test_source_root** The filesystem path to the test suite root. For out-of-dir; builds this is the directory that will be scanned for tests. **test_exec_root** For out-of-dir builds, the path to the test suite root inside; the object directory. This is where tests will be run and temporary output files; placed. **environment** A dictionary representing the environment to use when executing; tests in the suite. **standalone_tests** When true, mark a directory with tests expected to be run; standalone. Test discovery is disabled for that directory. *lit.suffixes* and; *lit.excludes* must be empty when this variable is true. **suffixes** For **lit** test formats which scan directories for tests, this; variable is a list of suffixes to identify ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:15536,test,test,15536,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"g. On the other hand, a check might not be acceptable as a compiler; warning; for example, because of a relatively high false positive rate. In this; situation, AST callbacks checkASTDecl and; checkASTCodeBody are your best friends. Testing; Every patch should be well tested with Clang regression tests. The checker tests; live in clang/test/Analysis folder. To run all of the analyzer tests,; execute the following from the clang build directory:; ; $ bin/llvm-lit -sv ../llvm/tools/clang/test/Analysis; ; Useful Commands/Debugging Hints; Attaching the Debugger; When your command contains the -cc1 flag, you can attach the; debugger to it directly:. $ gdb --args clang -cc1 -analyze -analyzer-checker=core test.c; $ lldb -- clang -cc1 -analyze -analyzer-checker=core test.c. Otherwise, if your command line contains --analyze,; the actual clang instance would be run in a separate process. In; order to debug it, use the -### flag for obtaining; the command line of the child process:. $ clang --analyze test.c -\#\#\#. Below we describe a few useful command line arguments, all of which assume that; you are running clang -cc1. Narrowing Down the Problem; While investigating a checker-related issue, instruct the analyzer to only; execute a single checker:. $ clang -cc1 -analyze -analyzer-checker=osx.KeychainAPI test.c. If you are experiencing a crash, to see which function is failing while; processing a large file use the -analyzer-display-progress; option.; To selectively analyze only the given function, use the; -analyze-function option:. $ clang -cc1 -analyze -analyzer-checker=core test.c -analyzer-display-progress; ANALYZE (Syntax): test.c foo; ANALYZE (Syntax): test.c bar; ANALYZE (Path, Inline_Regular): test.c bar; ANALYZE (Path, Inline_Regular): test.c foo; $ clang -cc1 -analyze -analyzer-checker=core test.c -analyzer-display-progress -analyze-function=foo; ANALYZE (Syntax): test.c foo; ANALYZE (Path, Inline_Regular): test.c foo. Note: a fully qualified function name has t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html:19322,test,test,19322,interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,1,['test'],['test']
Testability,g/lib/Tooling/ASTDiff; - `1`; - `0`; - `1`; - :none:`0%`; * - clang/lib/Tooling/Core; - `2`; - `0`; - `2`; - :none:`0%`; * - clang/lib/Tooling/DependencyScanning; - `5`; - `4`; - `1`; - :part:`80%`; * - clang/lib/Tooling/DumpTool; - `4`; - `3`; - `1`; - :part:`75%`; * - clang/lib/Tooling/Inclusions; - `3`; - `3`; - `0`; - :good:`100%`; * - clang/lib/Tooling/Refactoring; - `5`; - `3`; - `2`; - :part:`60%`; * - clang/lib/Tooling/Refactoring/Extract; - `2`; - `1`; - `1`; - :part:`50%`; * - clang/lib/Tooling/Refactoring/Rename; - `5`; - `2`; - `3`; - :part:`40%`; * - clang/lib/Tooling/Syntax; - `7`; - `6`; - `1`; - :part:`85%`; * - clang/lib/Tooling/Syntax/Pseudo; - `8`; - `8`; - `0`; - :good:`100%`; * - clang/lib/Tooling/Transformer; - `7`; - `4`; - `3`; - :part:`57%`; * - clang/tools/amdgpu-arch; - `1`; - `1`; - `0`; - :good:`100%`; * - clang/tools/apinotes-test; - `1`; - `1`; - `0`; - :good:`100%`; * - clang/tools/arcmt-test; - `1`; - `0`; - `1`; - :none:`0%`; * - clang/tools/c-index-test; - `1`; - `0`; - `1`; - :none:`0%`; * - clang/tools/clang-check; - `1`; - `0`; - `1`; - :none:`0%`; * - clang/tools/clang-diff; - `1`; - `0`; - `1`; - :none:`0%`; * - clang/tools/clang-extdef-mapping; - `1`; - `0`; - `1`; - :none:`0%`; * - clang/tools/clang-format; - `1`; - `1`; - `0`; - :good:`100%`; * - clang/tools/clang-format/fuzzer; - `1`; - `0`; - `1`; - :none:`0%`; * - clang/tools/clang-fuzzer; - `6`; - `4`; - `2`; - :part:`66%`; * - clang/tools/clang-fuzzer/fuzzer-initialize; - `2`; - `0`; - `2`; - :none:`0%`; * - clang/tools/clang-fuzzer/handle-cxx; - `2`; - `0`; - `2`; - :none:`0%`; * - clang/tools/clang-fuzzer/handle-llvm; - `3`; - `1`; - `2`; - :part:`33%`; * - clang/tools/clang-fuzzer/proto-to-cxx; - `5`; - `0`; - `5`; - :none:`0%`; * - clang/tools/clang-fuzzer/proto-to-llvm; - `3`; - `0`; - `3`; - :none:`0%`; * - clang/tools/clang-import-test; - `1`; - `0`; - `1`; - :none:`0%`; * - clang/tools/clang-linker-wrapper; - `3`; - `2`; - `1`; - :part:`66%`; * - clang/tools/cla,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:10939,test,test,10939,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['test']
Testability,g/runtime/unit-map.cpp; flang/runtime/unit-map.h; flang/runtime/unit.h; flang/tools/bbc/bbc.cpp; flang/tools/f18/dump.cpp; flang/tools/f18-parse-demo/f18-parse-demo.cpp; flang/tools/f18-parse-demo/stub-evaluate.cpp; flang/tools/fir-opt/fir-opt.cpp; flang/tools/flang-driver/driver.cpp; flang/tools/flang-driver/fc1_main.cpp; flang/tools/tco/tco.cpp; flang/unittests/Common/FastIntSetTest.cpp; flang/unittests/Decimal/quick-sanity-test.cpp; flang/unittests/Decimal/thorough-test.cpp; flang/unittests/Evaluate/bit-population-count.cpp; flang/unittests/Evaluate/expression.cpp; flang/unittests/Evaluate/folding.cpp; flang/unittests/Evaluate/fp-testing.cpp; flang/unittests/Evaluate/fp-testing.h; flang/unittests/Evaluate/integer.cpp; flang/unittests/Evaluate/intrinsics.cpp; flang/unittests/Evaluate/ISO-Fortran-binding.cpp; flang/unittests/Evaluate/leading-zero-bit-count.cpp; flang/unittests/Evaluate/logical.cpp; flang/unittests/Evaluate/real.cpp; flang/unittests/Evaluate/reshape.cpp; flang/unittests/Evaluate/testing.cpp; flang/unittests/Evaluate/testing.h; flang/unittests/Evaluate/uint128.cpp; flang/unittests/Frontend/CompilerInstanceTest.cpp; flang/unittests/Frontend/FrontendActionTest.cpp; flang/unittests/Optimizer/InternalNamesTest.cpp; flang/unittests/Optimizer/KindMappingTest.cpp; flang/unittests/Optimizer/RTBuilder.cpp; flang/unittests/Optimizer/Builder/CharacterTest.cpp; flang/unittests/Optimizer/Builder/ComplexTest.cpp; flang/unittests/Optimizer/Builder/DoLoopHelperTest.cpp; flang/unittests/Optimizer/Builder/FIRBuilderTest.cpp; flang/unittests/Optimizer/Builder/Runtime/AssignTest.cpp; flang/unittests/Optimizer/Builder/Runtime/CharacterTest.cpp; flang/unittests/Optimizer/Builder/Runtime/CommandTest.cpp; flang/unittests/Optimizer/Builder/Runtime/DerivedTest.cpp; flang/unittests/Optimizer/Builder/Runtime/NumericTest.cpp; flang/unittests/Optimizer/Builder/Runtime/RaggedTest.cpp; flang/unittests/Optimizer/Builder/Runtime/ReductionTest.cpp; flang/unittests/Optimizer/Builder/Ru,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:127104,test,testing,127104,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['testing']
Testability,"gIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error in""); endif(); ROOT_ADD_TEST(test-stressroofit-cpu COMMAND stressRooFit -b cpu FAILREGEX ""FAILED|Error in""); if(cuda); ROOT_ADD_TEST(test-stressroofit-cuda COMMAND stre",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:5151,test,testLikelihoodGradientJob,5151,roofit/roofitcore/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt,3,['test'],"['testLikelihoodGradientJob', 'testLikelihoodJob']"
Testability,gLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmv,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:3825,test,testRotWeights,3825,tmva/tmva/test/DNN/CNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt,1,['test'],['testRotWeights']
Testability,gation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBR,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6105,test,testMethodDLAdagradOptimizationCpu,6105,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testMethodDLAdagradOptimizationCpu']
Testability,gationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_L,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2678,test,testDataLoaderCuda,2678,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,2,['test'],['testDataLoaderCuda']
Testability,"ge Collection. The practice of using reachability analysis instead of; explicit memory management to reclaim unused memory. **GEP**; ``GetElementPtr``. An LLVM IR instruction that is used to get the address; of a subelement of an aggregate data structure. It is documented in detail; `here <https://llvm.org/docs/GetElementPtr.html>`_. **GVN**; Global Value Numbering. GVN is a pass that partitions values computed by a; function into congruence classes. Values ending up in the same congruence; class are guaranteed to be the same for every execution of the program.; In that respect, congruency is a compile-time approximation of equivalence; of values at runtime. H; -. .. _heap:. **Heap**; In garbage collection, the region of memory which is managed using; reachability analysis. I; -. **ICE**; Internal Compiler Error. This abbreviation is used to describe errors; that occur in LLVM or Clang as they are compiling source code. For example,; if a valid C++ source program were to trigger an assert in Clang when; compiled, that could be referred to as an ""ICE"". **ICF**; Identical Code Folding. **ICP**; Indirect Call Promotion. **IPA**; Inter-Procedural Analysis. Refers to any variety of code analysis that; occurs between procedures, functions or compilation units (modules). **IPO**; Inter-Procedural Optimization. Refers to any variety of code optimization; that occurs between procedures, functions or compilation units (modules). **ISel**; Instruction Selection. L; -. **LCSSA**; Loop-Closed Static Single Assignment Form. **LGTM**; ""Looks Good To Me"". In a review thread, this indicates that the; reviewer thinks that the patch is okay to commit. **LICM**; Loop Invariant Code Motion. **LSDA**; Language Specific Data Area. C++ ""zero cost"" unwinding is built on top a; generic unwinding mechanism. As the unwinder walks each frame, it calls; a ""personality"" function to do language specific analysis. Each function's; FDE points to an optional LSDA which is passed to the personality fu",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Lexicon.rst:4491,assert,assert,4491,interpreter/llvm-project/llvm/docs/Lexicon.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Lexicon.rst,1,['assert'],['assert']
Testability,"ge of file-based technology to handle outputs.; - [Improved dataset management model](https://root.cern/doc/v628/classTDataSetManagerAliEn.html); where the PROOF (ROOT) dataset manager is a light frontend to the experiment file catalogs; TDataSetManagerFile is still; used as local cache of the experiment information or to store the work-in-progress status of the dataset manager daemon. This model addresses the scalability issues observed at ALICE AFs.; - Improvements in [TProofBench](https://root.cern.ch/doc/master/classTProofBench.html):; - Recording and display of the maximum rate during query, CPU efficiency calculation for PROOF-Lite runs, better measurement of wall time.; - Support for dynamic startup mode. - Test program xpdtest to test the status of xproofd (see also man page under $ROOTSYS/man/man1):. ``` {.sh}; $ xpdtest [options]; --help, -h; Gives a short list of options avaliable, and exit; -t <test>; type of test to be run:; 0 ping the daemon (includes process existence check if pid specified; see below); 1 ping the daemon and check connection for default user; 2 ping the daemon and check connection for the default user and all recent users; ...; ```; - Interface with **igprof** for fast statistic profiling. Like valgrind, it can be specified as option to TProof::Open and the output is available via the log viewer technology:. ``` {.cpp}; root[] p = TProof::Open(""master"", ""igprof-pp""); ```; - Miscellanea:; - Added functions [Getenv](http://root.cern.ch/root/htmldoc/TProof.html#TProof:Getenv) and [GetRC](http://root.cern.ch/root/htmldoc/TProof.html#TProof:GetRC); in TProof to retrieve environment information from the nodes, typically from the master.; - Add support unix secondary groups in group access control. This allows more flexibility in, for example, assigning group-shared credential files to the daemon.; - Several new tests and options in the test program _stressProof_. ### Bug fixes. Several consolidation fixes in several parts of the system (see ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v600/index.md:1681,test,test,1681,proof/doc/v600/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v600/index.md,2,['test'],['test']
Testability,"ge2-instrumented, and; stage2. Both of the stage2 builds are built using the stage1 compiler. The PGO cache generates the following additional targets:. **stage2-instrumented**; Builds a stage1 compiler, runtime, and required tools (llvm-config,; llvm-profdata) then uses that compiler to build an instrumented stage2 compiler. **stage2-instrumented-generate-profdata**; Depends on stage2-instrumented and will use the instrumented compiler to; generate profdata based on the training files in clang/utils/perf-training. **stage2**; Depends on stage2-instrumented-generate-profdata and will use the stage1; compiler with the stage2 profdata to build a PGO-optimized compiler. **stage2-check-llvm**; Depends on stage2 and runs check-llvm using the stage2 compiler. **stage2-check-clang**; Depends on stage2 and runs check-clang using the stage2 compiler. **stage2-check-all**; Depends on stage2 and runs check-all using the stage2 compiler. **stage2-test-suite**; Depends on stage2 and runs the test-suite using the stage2 compiler (requires; in-tree test-suite). BOLT; ====. `BOLT <https://github.com/llvm/llvm-project/blob/main/bolt/README.md>`_; (Binary Optimization and Layout Tool) is a tool that optimizes binaries; post-link by profiling them at runtime and then using that information to; optimize the layout of the final binary among other optimizations performed; at the binary level. There are also CMake caches available to build; LLVM/Clang with BOLT. To configure a single-stage build that builds LLVM/Clang and then optimizes; it with BOLT, use the following CMake configuration:. .. code-block:: console. $ cmake <path to source>/llvm -C <path to source>/clang/cmake/caches/BOLT.cmake. Then, build the BOLT-optimized binary by running the following ninja command:. .. code-block:: console. $ ninja clang-bolt. If you're seeing errors in the build process, try building with a recent; version of Clang/LLVM by setting the CMAKE_C_COMPILER and; CMAKE_CXX_COMPILER flags to the appropriate",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AdvancedBuilds.rst:9697,test,test-suite,9697,interpreter/llvm-project/llvm/docs/AdvancedBuilds.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AdvancedBuilds.rst,3,['test'],['test-suite']
Testability,"ge>-header` option. This mirrors the interface in GCC; for generating PCH files:. .. code-block:: console. $ gcc -x c-header test.h -o test.h.gch; $ clang -x c-header test.h -o test.h.pch. Using a PCH File; ^^^^^^^^^^^^^^^^. A PCH file can then be used as a prefix header when a ``-include-pch``; option is passed to ``clang``:. .. code-block:: console. $ clang -include-pch test.h.pch test.c -o test. The ``clang`` driver will check if the PCH file ``test.h.pch`` is; available; if so, the contents of ``test.h`` (and the files it includes); will be processed from the PCH file. Otherwise, Clang will report an error. .. note::. Clang does *not* automatically use PCH files for headers that are directly; included within a source file or indirectly via :option:`-include`.; For example:. .. code-block:: console. $ clang -x c-header test.h -o test.h.pch; $ cat test.c; #include ""test.h""; $ clang test.c -o test. In this example, ``clang`` will not automatically use the PCH file for; ``test.h`` since ``test.h`` was included directly in the source file and not; specified on the command line using ``-include-pch``. Relocatable PCH Files; ^^^^^^^^^^^^^^^^^^^^^. It is sometimes necessary to build a precompiled header from headers; that are not yet in their final, installed locations. For example, one; might build a precompiled header within the build tree that is then; meant to be installed alongside the headers. Clang permits the creation; of ""relocatable"" precompiled headers, which are built with a given path; (into the build directory) and can later be used from an installed; location. To build a relocatable precompiled header, place your headers into a; subdirectory whose structure mimics the installed location. For example,; if you want to build a precompiled header for the header ``mylib.h``; that will be installed into ``/usr/include``, create a subdirectory; ``build/usr/include`` and place the header ``mylib.h`` into that; subdirectory. If ``mylib.h`` depends on other headers,",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:47714,test,test,47714,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"ged with a ``unnamed_addr`` constant, the result being a constant; whose address is significant. If the ``local_unnamed_addr`` attribute is given, the address is known to; not be significant within the module. A global variable may be declared to reside in a target-specific; numbered address space. For targets that support them, address spaces; may affect how optimizations are performed and/or what target; instructions are used to access the variable. The default address space; is zero. The address space qualifier must precede any other attributes. LLVM allows an explicit section to be specified for globals. If the; target supports it, it will emit globals to the section specified.; Additionally, the global can placed in a comdat if the target has the necessary; support. External declarations may have an explicit section specified. Section; information is retained in LLVM IR for targets that make use of this; information. Attaching section information to an external declaration is an; assertion that its definition is located in the specified section. If the; definition is located in a different section, the behavior is undefined. LLVM allows an explicit code model to be specified for globals. If the; target supports it, it will emit globals in the code model specified,; overriding the code model used to compile the translation unit.; The allowed values are ""tiny"", ""small"", ""kernel"", ""medium"", ""large"".; This may be extended in the future to specify global data layout that; doesn't cleanly fit into a specific code model. By default, global initializers are optimized by assuming that global; variables defined within the module are not modified from their; initial values before the start of the global initializer. This is; true even for variables potentially accessible from outside the; module, including those with external linkage or appearing in; ``@llvm.used`` or dllexported variables. This assumption may be suppressed; by marking the variable with ``externally_initia",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:33374,assert,assertion,33374,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['assert'],['assertion']
Testability,"general-purpose checks such as division by zero, null pointer dereference, usage of uninitialized values, etc.; C++ Checkers perform C++-specific checks; Dead Code Checkers check for unused code; Nullability Checkers ; Optin Checkers ; OS X Checkers perform Objective-C-specific checks and check the use of Apple's SDKs (OS X and iOS); Security Checkers check for insecure API usage and perform checks based on the CERT Secure Coding Standards; Unix Checkers check the use of Unix and POSIX APIs. Core Checkers. Name, DescriptionExample. core.CallAndMessage; (C, C++, ObjC); Check for logical errors for function calls and Objective-C message expressions; (e.g., uninitialized arguments, null function pointers). // C; struct S {; int x;; };. void f(struct S s);. void test() {; struct S s;; f(s); // warn: passed-by-value arg contain uninitialized data; }. // C; void test() {; void (*foo)(void);; foo(); // warn: function pointer is uninitialized; }. // C; void test() {; void (*foo)(void);; foo = 0;; foo(); // warn: function pointer is null; }. // C++; class C {; public:; void f();; };. void test() {; C *pc;; pc->f(); // warn: object pointer is uninitialized; }. // C++; class C {; public:; void f();; };. void test() {; C *pc = 0;; pc->f(); // warn: object pointer is null; }. // Objective-C; @interface MyClass : NSObject; @property (readwrite,assign) id x;; - (long double)longDoubleM;; @end. void test() {; MyClass *obj1;; long double ld1 = [obj1 longDoubleM];; // warn: receiver is uninitialized; }. // Objective-C; @interface MyClass : NSObject; @property (readwrite,assign) id x;; - (long double)longDoubleM;; @end. void test() {; MyClass *obj1;; id i = obj1.x; // warn: uninitialized object pointer; }. // Objective-C; @interface Subscriptable : NSObject; - (id)objectAtIndexedSubscript:(unsigned int)index;; @end. @interface MyClass : Subscriptable; @property (readwrite,assign) id x;; - (long double)longDoubleM;; @end. void test() {; MyClass *obj1;; id i = obj1[0]; // warn: uninitia",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:1703,test,test,1703,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"generated to allow a complete set of bindings to be compiled,; packaged and installed::. cppyy_add_bindings(; pkg; pkg_version; author; author_email; [URL url]; [LICENSE license]; [LANGUAGE_STANDARD std]; [LINKDEFS linkdef...]; [IMPORTS pcm...]; [GENERATE_OPTIONS option...]; [COMPILE_OPTIONS option...]; [INCLUDE_DIRS dir...]; [LINK_LIBRARIES library...]; [H_DIRS H_DIRSectory]; H_FILES h_file...). The bindings are based on https://cppyy.readthedocs.io/en/latest/, and can be; used as per the documentation provided via the cppyy.gbl namespace. First add; the directory of the <pkg>.rootmap file to the LD_LIBRARY_PATH environment; variable, then ""import cppyy; from cppyy.gbl import <some-C++-entity>"". Alternatively, use ""import <pkg>"". This convenience wrapper supports; ""discovery"" of the available C++ entities using, for example Python 3's command; line completion support. The bindings are complete with a setup.py, supporting Wheel-based; packaging, and a test.py supporting pytest/nosetest sanity test of the bindings. The bindings are generated/built/packaged using 3 environments:. - One compatible with the header files being bound. This is used to; generate the generic C++ binding code (and some ancillary files) using; a modified C++ compiler. The needed options must be compatible with the; normal build environment of the header files.; - One to compile the generated, generic C++ binding code using a standard; C++ compiler. The resulting library code is ""universal"" in that it is; compatible with both Python2 and Python3.; - One to package the library and ancillary files into standard Python2/3; wheel format. The packaging is done using native Python tooling. +----------------------+---------------------------------------------------------------------------------------------+; |Arguments and options | Description |; +======================+=============================================================================================+; |pkg | The name of the package to ge",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/cmake_interface.rst:4767,test,test,4767,bindings/pyroot/cppyy/cppyy/doc/source/cmake_interface.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/cmake_interface.rst,1,['test'],['test']
Testability,"generating; code for this branch. If the compiler does not support this, it will fall back; to the ""abort"" implementation. Use ``llvm_unreachable`` to mark a specific point in code that should never be; reached. This is especially desirable for addressing warnings about unreachable; branches, etc., but can be used whenever reaching a particular code path is; unconditionally a bug (not originating from user input; see below) of some kind.; Use of ``assert`` should always include a testable predicate (as opposed to; ``assert(false)``). If the error condition can be triggered by user input then the; recoverable error mechanism described in :doc:`ProgrammersManual` should be; used instead. In cases where this is not practical, ``report_fatal_error`` may; be used. Another issue is that values used only by assertions will produce an ""unused; value"" warning when assertions are disabled. For example, this code will warn:. .. code-block:: c++. unsigned Size = V.size();; assert(Size > 42 && ""Vector smaller than it should be"");. bool NewToSet = Myset.insert(Value);; assert(NewToSet && ""The value shouldn't be in the set yet"");. These are two interesting different cases. In the first case, the call to; ``V.size()`` is only useful for the assert, and we don't want it executed when; assertions are disabled. Code like this should move the call into the assert; itself. In the second case, the side effects of the call must happen whether; the assert is enabled or not. In this case, the value should be cast to void to; disable the warning. To be specific, it is preferred to write the code like; this:. .. code-block:: c++. assert(V.size() > 42 && ""Vector smaller than it should be"");. bool NewToSet = Myset.insert(Value); (void)NewToSet;; assert(NewToSet && ""The value shouldn't be in the set yet"");. Do Not Use ``using namespace std``; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. In LLVM, we prefer to explicitly prefix all identifiers from the standard; namespace with an ""``std::``"" prefix, rath",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst:47923,assert,assert,47923,interpreter/llvm-project/llvm/docs/CodingStandards.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst,1,['assert'],['assert']
Testability,generic-elf-64bit/src; - `1`; - `1`; - `0`; - :good:`100%`; * - openmp/libomptarget/plugins/remote/include; - `1`; - `1`; - `0`; - :good:`100%`; * - openmp/libomptarget/plugins/remote/lib; - `1`; - `0`; - `1`; - :none:`0%`; * - openmp/libomptarget/plugins/remote/server; - `3`; - `3`; - `0`; - :good:`100%`; * - openmp/libomptarget/plugins/remote/src; - `3`; - `2`; - `1`; - :part:`66%`; * - openmp/libomptarget/plugins/ve/src; - `1`; - `1`; - `0`; - :good:`100%`; * - openmp/libomptarget/src; - `7`; - `6`; - `1`; - :part:`85%`; * - openmp/libomptarget/tools/deviceinfo; - `1`; - `1`; - `0`; - :good:`100%`; * - openmp/runtime/doc/doxygen; - `1`; - `1`; - `0`; - :good:`100%`; * - openmp/runtime/src; - `75`; - `65`; - `10`; - :part:`86%`; * - openmp/runtime/src/thirdparty/ittnotify; - `6`; - `5`; - `1`; - :part:`83%`; * - openmp/runtime/src/thirdparty/ittnotify/legacy; - `1`; - `1`; - `0`; - :good:`100%`; * - openmp/tools/archer; - `1`; - `1`; - `0`; - :good:`100%`; * - openmp/tools/archer/tests/ompt; - `1`; - `1`; - `0`; - :good:`100%`; * - openmp/tools/multiplex; - `1`; - `1`; - `0`; - :good:`100%`; * - openmp/tools/multiplex/tests; - `1`; - `1`; - `0`; - :good:`100%`; * - openmp/tools/multiplex/tests/custom_data_storage; - `2`; - `1`; - `1`; - :part:`50%`; * - openmp/tools/multiplex/tests/print; - `2`; - `2`; - `0`; - :good:`100%`; * - polly/include/polly; - `25`; - `25`; - `0`; - :good:`100%`; * - polly/include/polly/CodeGen; - `14`; - `14`; - `0`; - :good:`100%`; * - polly/include/polly/Support; - `12`; - `12`; - `0`; - :good:`100%`; * - polly/lib/Analysis; - `9`; - `9`; - `0`; - :good:`100%`; * - polly/lib/CodeGen; - `15`; - `15`; - `0`; - :good:`100%`; * - polly/lib/Exchange; - `1`; - `1`; - `0`; - :good:`100%`; * - polly/lib/External/isl; - `68`; - `1`; - `67`; - :part:`1%`; * - polly/lib/External/isl/imath; - `6`; - `1`; - `5`; - :part:`16%`; * - polly/lib/External/isl/imath_wrap; - `4`; - `0`; - `4`; - :none:`0%`; * - polly/lib/External/isl/include/isl; - `59`; - ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:123429,test,tests,123429,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,"getInfo"" conveys almost; all there is to the change. Below are some guidelines about the format of the message itself:. * Separate the commit message into title and body separated by a blank line. * If you're not the original author, ensure the 'Author' property of the commit is; set to the original author and the 'Committer' property is set to yourself.; You can use a command similar to; ``git commit --amend --author=""John Doe <jdoe@llvm.org>""`` to correct the; author property if it is incorrect. See `Attribution of Changes`_ for more; information including the method we used for attribution before the project; migrated to git. In the rare situation where there are multiple authors, please use the `git; tag 'Co-authored-by:' to list the additional authors; <https://github.blog/2018-01-29-commit-together-with-co-authors/>`_. * The title should be concise. Because all commits are emailed to the list with; the first line as the subject, long titles are frowned upon. Short titles; also look better in `git log`. * When the changes are restricted to a specific part of the code (e.g. a; back-end or optimization pass), it is customary to add a tag to the; beginning of the line in square brackets. For example, ""[SCEV] ...""; or ""[OpenMP] ..."". This helps email filters and searches for post-commit; reviews. * The body, if it exists, should be separated from the title by an empty line. * The body should be concise, but explanatory, including a complete; reasoning. Unless it is required to understand the change, examples,; code snippets and gory details should be left to bug comments, web; review or the mailing list. * Text formatting and spelling should follow the same rules as documentation; and in-code comments, ex. capitalization, full stop, etc. * If the commit is a bug fix on top of another recently committed patch, or a; revert or reapply of a patch, include the git commit hash of the prior; related commit. This could be as simple as ""Revert commit NNNN because it; caused",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst:16469,log,log,16469,interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,1,['log'],['log']
Testability,"get_link_libraries(${libname} PUBLIC -Wl,--unresolved-symbols=ignore-all Core Tree cppyy); endif(). target_include_directories(${libname}; SYSTEM PRIVATE ${Python3_INCLUDE_DIRS}). target_include_directories(${libname}; PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>). # Disables warnings caused by Py_RETURN_TRUE/Py_RETURN_FALSE; if(NOT MSVC); target_compile_options(${libname} PRIVATE -Wno-strict-aliasing); endif(). # Compile .py files; foreach(py_source ${py_sources}); add_custom_command(TARGET ${libname}; COMMAND ${Python3_EXECUTABLE} -m py_compile ${localruntimedir}/${py_source}; COMMAND ${Python3_EXECUTABLE} -O -m py_compile ${localruntimedir}/${py_source}; DEPENDS ${localruntimedir}/${py_source}; COMMENT ""Compiling PyROOT source ${py_source} for Python ${Python3_VERSION}""); endforeach(). # Create meta-target PyROOT3 (INTERFACE library); # Export of targets are not supported for custom targets(add_custom_targets()); add_library(PyROOT INTERFACE); target_link_libraries(PyROOT INTERFACE cppyy_backend cppyy ROOTPythonizations). # Install library; install(TARGETS ${libname} EXPORT ${CMAKE_PROJECT_NAME}Exports; RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libraries; LIBRARY DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries; ARCHIVE DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries). # Install meta-target PyROOT3 (INTERFACE library); # Install library; install(TARGETS PyROOT EXPORT ${CMAKE_PROJECT_NAME}Exports; RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libraries; LIBRARY DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries; ARCHIVE DESTINATION ${CMAKE_INSTALL_PYTHONDIR} COMPONENT libraries). # Install Python sources and bytecode; install(DIRECTORY ${localruntimedir}/ROOT; DESTINATION ${CMAKE_INSTALL_PYTHONDIR}; COMPONENT libraries). # Install headers required by pythonizations; install(FILES ${PYROOT_EXTRA_HEADERS}; DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ROOT; COMPONENT headers). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/CMakeLists.txt:7721,test,test,7721,bindings/pyroot/pythonizations/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/pythonizations/CMakeLists.txt,1,['test'],['test']
Testability,"gging process; consequently, it may take a long period of; (unattended) time to reduce a test case, but we feel it is still worth it. Note; that ``bugpoint`` is generally very quick unless debugging a miscompilation; where each test of the program (which requires executing it) takes a long time. Automatic Debugger Selection; ----------------------------. ``bugpoint`` reads each ``.bc`` or ``.ll`` file specified on the command line; and links them together into a single module, called the test program. If any; LLVM passes are specified on the command line, it runs these passes on the test; program. If any of the passes crash, or if they produce malformed output (which; causes the verifier to abort), ``bugpoint`` starts the `crash debugger`_. Otherwise, if the ``-output`` option was not specified, ``bugpoint`` runs the; test program with the ""safe"" backend (which is assumed to generate good code) to; generate a reference output. Once ``bugpoint`` has a reference output for the; test program, it tries executing it with the selected code generator. If the; selected code generator crashes, ``bugpoint`` starts the `crash debugger`_ on; the code generator. Otherwise, if the resulting output differs from the; reference output, it assumes the difference resulted from a code generator; failure, and starts the `code generator debugger`_. Finally, if the output of the selected code generator matches the reference; output, ``bugpoint`` runs the test program after all of the LLVM passes have; been applied to it. If its output differs from the reference output, it assumes; the difference resulted from a failure in one of the LLVM passes, and enters the; `miscompilation debugger`_. Otherwise, there is no problem ``bugpoint`` can; debug. .. _crash debugger:. Crash debugger; --------------. If an optimizer or code generator crashes, ``bugpoint`` will try as hard as it; can to reduce the list of passes (for optimizer crashes) and the size of the; test program. First, ``bugpoint`` figu",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst:2252,test,test,2252,interpreter/llvm-project/llvm/docs/Bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst,1,['test'],['test']
Testability,"gh resolution timer, e.g. perf under linux. * Run the benchmark multiple times to be able to recognize noise. * Disable as many processes or services as possible on the target system. * Disable frequency scaling, turbo boost and address space; randomization (see OS specific section). * Static link if the OS supports it. That avoids any variation that; might be introduced by loading dynamic libraries. This can be done; by passing ``-DLLVM_BUILD_STATIC=ON`` to cmake. * Try to avoid storage. On some systems you can use tmpfs. Putting the; program, inputs and outputs on tmpfs avoids touching a real storage; system, which can have a pretty big variability. To mount it (on linux and freebsd at least)::. mount -t tmpfs -o size=<XX>g none dir_to_mount. Linux; =====. * Disable address space randomization::. echo 0 > /proc/sys/kernel/randomize_va_space. * Set scaling_governor to performance::. for i in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do; echo performance > /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; done. * Use https://github.com/lpechacek/cpuset to reserve cpus for just the; program you are benchmarking. If using perf, leave at least 2 cores; so that perf runs in one and your program in another::. cset shield -c N1,N2 -k on. This will move all threads out of N1 and N2. The ``-k on`` means; that even kernel threads are moved out. * Disable the SMT pair of the cpus you will use for the benchmark. The; pair of cpu N can be found in; ``/sys/devices/system/cpu/cpuN/topology/thread_siblings_list`` and; disabled with::. echo 0 > /sys/devices/system/cpu/cpuX/online. * Run the program with::. cset shield --exec -- perf stat -r 10 <cmd>. This will run the command after ``--`` in the isolated cpus. The; particular perf command runs the ``<cmd>`` 10 times and reports; statistics. With these in place you can expect perf variations of less than 0.1%. Linux Intel; -----------. * Disable turbo mode::. echo 1 > /sys/devices/system/cpu/intel_pstate/no_turbo; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Benchmarking.rst:1614,benchmark,benchmarking,1614,interpreter/llvm-project/llvm/docs/Benchmarking.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Benchmarking.rst,2,['benchmark'],"['benchmark', 'benchmarking']"
Testability,"ginfo-analyzer. .. contents::; :local:. SYNOPSIS; --------; :program:`llvm-debuginfo-analyzer` [*options*] [*filename ...*]. DESCRIPTION; -----------; :program:`llvm-debuginfo-analyzer` parses debug and text sections in; binary object files and prints their contents in a logical view, which; is a human readable representation that closely matches the structure; of the original user source code. Supported object file formats include; ELF, Mach-O, PDB and COFF. The **logical view** abstracts the complexity associated with the; different low-level representations of the debugging information that; is embedded in the object file. :program:`llvm-debuginfo-analyzer`; produces a canonical view of the debug information regardless of how it; is formatted. The same logical view will be seen regardless of object; file format, assuming the debug information correctly represents the; same original source code. The logical view includes the following **logical elements**: *type*,; *scope*, *symbol* and *line*, which are the basic software elements used; in the C/C++ programming language. Each logical element has a set of; **attributes**, such as *types*, *classes*, *functions*, *variables*,; *parameters*, etc. The :option:`--attribute` can be used to specify which; attributes to include when printing a logical element. A logical element; may have a **kind** that describes specific types of elements. For; instance, a *scope* could have a kind value of *function*, *class*,; *namespace*. :program:`llvm-debuginfo-analyzer` defaults to print a pre-defined; layout of logical elements and attributes. The command line options can; be used to control the printed elements (:option:`--print`), using a; specific layout (:option:`--report`), matching a given pattern; (:option:`--select`, :option:`--select-offsets`). Also, the output can; be limited to specified logical elements using (:option:`--select-lines`,; :option:`--select-scopes`, :option:`--select-symbols`,; :option:`--select-types`).",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:1117,log,logical,1117,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,2,['log'],['logical']
Testability,"gister allocation, the; VirtRegRewriter pass re-inserts DBG_VALUE instructions in their original; positions, translating virtual register references into their physical; machine locations. To avoid encoding incorrect variable locations, in this; pass any DBG_VALUE of a virtual register that is not live, is replaced by; the undefined location. The LiveDebugVariables may insert redundant DBG_VALUEs; because of virtual register rewriting. These will be subsequently removed by; the RemoveRedundantDebugValues pass. LiveDebugValues expansion of variable locations; -----------------------------------------------. After all optimizations have run and shortly before emission, the; LiveDebugValues pass runs to achieve two aims:. * To propagate the location of variables through copies and register spills,; * For every block, to record every valid variable location in that block. After this pass the DBG_VALUE instruction changes meaning: rather than; corresponding to a source-level assignment where the variable may change value,; it asserts the location of a variable in a block, and loses effect outside the; block. Propagating variable locations through copies and spills is; straightforwards: determining the variable location in every basic block; requires the consideration of control flow. Consider the following IR, which; presents several difficulties:. .. code-block:: text. define dso_local i32 @foo(i1 %cond, i32 %input) !dbg !12 {; entry:; br i1 %cond, label %truebr, label %falsebr. bb1:; %value = phi i32 [ %value1, %truebr ], [ %value2, %falsebr ]; br label %exit, !dbg !26. truebr:; call void @llvm.dbg.value(metadata i32 %input, metadata !30, metadata !DIExpression()), !dbg !24; call void @llvm.dbg.value(metadata i32 1, metadata !23, metadata !DIExpression()), !dbg !24; %value1 = add i32 %input, 1; br label %bb1. falsebr:; call void @llvm.dbg.value(metadata i32 %input, metadata !30, metadata !DIExpression()), !dbg !24; call void @llvm.dbg.value(metadata i32 2, metadata !23",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SourceLevelDebugging.rst:36957,assert,asserts,36957,interpreter/llvm-project/llvm/docs/SourceLevelDebugging.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SourceLevelDebugging.rst,1,['assert'],['asserts']
Testability,"git repository,; under different directories. For further information, see the `getting; started guide <https://llvm.org/docs/GettingStarted.html>`_. .. code-block:: console. mkdir ~/clang-llvm && cd ~/clang-llvm; git clone https://github.com/llvm/llvm-project.git. Next you need to obtain the CMake build system and Ninja build tool. .. code-block:: console. cd ~/clang-llvm; git clone https://github.com/martine/ninja.git; cd ninja; git checkout release; ./configure.py --bootstrap; sudo cp ninja /usr/bin/. cd ~/clang-llvm; git clone https://gitlab.kitware.com/cmake/cmake.git; cd cmake; git checkout next; ./bootstrap; make; sudo make install. Okay. Now we'll build Clang!. .. code-block:: console. cd ~/clang-llvm; mkdir build && cd build; cmake -G Ninja ../llvm-project/llvm -DLLVM_ENABLE_PROJECTS=""clang;clang-tools-extra"" -DCMAKE_BUILD_TYPE=Release -DLLVM_BUILD_TESTS=ON; ninja; ninja check # Test LLVM only.; ninja clang-test # Test Clang only.; ninja install. And we're live. All of the tests should pass. Finally, we want to set Clang as its own compiler. .. code-block:: console. cd ~/clang-llvm/build; ccmake ../llvm-project/llvm. The second command will bring up a GUI for configuring Clang. You need; to set the entry for ``CMAKE_CXX_COMPILER``. Press ``'t'`` to turn on; advanced mode. Scroll down to ``CMAKE_CXX_COMPILER``, and set it to; ``/usr/bin/clang++``, or wherever you installed it. Press ``'c'`` to; configure, then ``'g'`` to generate CMake's files. Finally, run ninja one last time, and you're done. Step 1: Create a ClangTool; ==========================. Now that we have enough background knowledge, it's time to create the; simplest productive ClangTool in existence: a syntax checker. While this; already exists as ``clang-check``, it's important to understand what's; going on. First, we'll need to create a new directory for our tool and tell CMake; that it exists. As this is not going to be a core clang tool, it will; live in the ``clang-tools-extra`` repository.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTMatchersTutorial.rst:1858,test,tests,1858,interpreter/llvm-project/clang/docs/LibASTMatchersTutorial.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTMatchersTutorial.rst,1,['test'],['tests']
Testability,"gle argument of any type)``; - ``clang_analyzer_dumpElementCount(a single argument of any type)``. Dumps out the extent and the element count of the argument. Example usage::. void array() {; int a[] = {1, 3};; clang_analyzer_dumpExtent(a); // expected-warning {{8 S64b}}; clang_analyzer_dumpElementCount(a); // expected-warning {{2 S64b}}; }. - ``clang_analyzer_value(a single argument of integer or pointer type)``. Prints an associated value for the given argument.; Supported argument types are integers, enums and pointers.; The value can be represented either as a range set or as a concrete integer.; For the rest of the types function prints ``n/a`` (aka not available). **Note:** This function will print nothing for clang built with Z3 constraint manager.; This may cause crashes of your tests. To manage this use one of the test constraining; techniques:. * llvm-lit commands ``REQUIRES no-z3`` or ``UNSUPPORTED z3`` `See for details. <https://llvm.org/docs/TestingGuide.html#constraining-test-execution>`_. * a preprocessor directive ``#ifndef ANALYZER_CM_Z3``. * a clang command argument ``-analyzer-constraints=range``. Example usage::. void print(char c, unsigned u) {; clang_analyzer_value(c); // expected-warning {{8s:{ [-128, 127] }}}; if(u != 42); clang_analyzer_value(u); // expected-warning {{32u:{ [0, 41], [43, 4294967295] }}}; else; clang_analyzer_value(u); // expected-warning {{32u:42}}; }. Statistics; ==========. The debug.Stats checker collects various information about the analysis of each; function, such as how many blocks were reached and if the analyzer timed out. There is also an additional -analyzer-stats flag, which enables various; statistics within the analyzer engine. Note the Stats checker (which produces at; least one bug report per function) may actually change the values reported by; -analyzer-stats. Output testing checkers; =======================. - debug.ReportStmts reports a warning at **every** statement, making it a very; useful tool for tes",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst:11414,test,test-execution,11414,interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst,1,['test'],['test-execution']
Testability,"gma=sx ] has 3 errors. A code greater than zero will generate even more detail and; print the details of each evaluation error as provided by the p.d.f (zero value, not-a-number, normalization zero etc..); and show the observable values at which this error occurred. At most N detailed messages per p.d.f component; are shown where N is the integral value of the 'code' argument. . [#0] WARNING:Minization -- RooFitGlue: Minimized function has error status.; Returning maximum FCN so far (-1e+30) to force MIGRAD to back out of this region. Error log follows; Parameter values: m=-7.397; RooGaussian::gx[ x=x mean=m sigma=sx ]; getLogVal() top-level p.d.f evaluates to zero or negative number @ x=x=9.09989, mean=m=-7.39713, sigma=sx=0.1; getLogVal() top-level p.d.f evaluates to zero or negative number @ x=x=6.04652, mean=m=-7.39713, sigma=sx=0.1; getLogVal() top-level p.d.f evaluates to zero or negative number @ x=x=2.48563, mean=m=-7.39713, sigma=sx=0.1. The new-style error logging is active whenever MINUIT is operating on such a p.d.f. The default value for N is 3.; Outside the MINUIT context the evaluation error each evualuation error will generate a separate message through; RooMsgService; Other new features. The RooAddPdf constructor has been augmented with an additional boolean argument that allows to; interpret the supplied fraction parameters as recursive fractions rather than plain fractions.; If activated, an example RooAddPdf with three input p.d.f. A,B,C and two fractions fA and fB will; result in the expression; fA*A + (1-fA)(fB*B + 1-fB*C) rather than fA*A + fB*B + (1-fA-fB)*C. Recursive fraction have the advantage that all fraction can be defined to be in the range [0-1]; without resulting in configuration where the sum of all fractions exceeds 1.; The low-level object printing interface printToStream() has been deprecated in favor of a new; printStream() method which allows much greater control over the information printed. ; The printing of almost all RooFit",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v520/index.html:17371,log,logging,17371,roofit/doc/v520/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v520/index.html,1,['log'],['logging']
Testability,"gn; the driver expects that both of these; phases are platform neutral, with a few very well defined exceptions; such as whether the platform uses a driver driver. ToolChain Argument Translation; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. In order to match gcc very closely, the clang driver currently allows; tool chains to perform their own translation of the argument list (into; a new ArgList data structure). Although this allows the clang driver to; match gcc easily, it also makes the driver operation much harder to; understand (since the Tools stop seeing some arguments the user; provided, and see new ones instead). For example, on Darwin ``-gfull`` gets translated into two separate; arguments, ``-g`` and ``-fno-eliminate-unused-debug-symbols``. Trying to; write Tool logic to do something with ``-gfull`` will not work, because; Tool argument translation is done after the arguments have been; translated. A long term goal is to remove this tool chain specific translation, and; instead force each tool to change its own logic to do the right thing on; the untranslated original arguments. Unused Argument Warnings; ^^^^^^^^^^^^^^^^^^^^^^^^. The driver operates by parsing all arguments but giving Tools the; opportunity to choose which arguments to pass on. One downside of this; infrastructure is that if the user misspells some option, or is confused; about which options to use, some command line arguments the user really; cared about may go unused. This problem is particularly important when; using clang as a compiler, since the clang compiler does not support; anywhere near all the options that gcc does, and we want to make sure; users know which ones are being used. To support this, the driver maintains a bit associated with each; argument of whether it has been used (at all) during the compilation.; This bit usually doesn't need to be set by hand, as the key ArgList; accessors will set it automatically. When a compilation is successful (there are no errors), the driver; checks ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/DriverInternals.rst:13841,log,logic,13841,interpreter/llvm-project/clang/docs/DriverInternals.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/DriverInternals.rst,1,['log'],['logic']
Testability,"gnostics are enabled, you can also configure CFI to continue program; execution instead of aborting by using the :ref:`-fsanitize-recover=; <controlling-code-generation>` flag. Forward-Edge CFI for Virtual Calls; ==================================. This scheme checks that virtual calls take place using a vptr of the correct; dynamic type; that is, the dynamic type of the called object must be a; derived class of the static type of the object used to make the call.; This CFI scheme can be enabled on its own using ``-fsanitize=cfi-vcall``. For this scheme to work, all translation units containing the definition; of a virtual member function (whether inline or not), other than members; of :ref:`ignored <cfi-ignorelist>` types or types with public :doc:`LTO; visibility <LTOVisibility>`, must be compiled with ``-flto`` or ``-flto=thin``; enabled and be statically linked into the program. Performance; -----------. A performance overhead of less than 1% has been measured by running the; Dromaeo benchmark suite against an instrumented version of the Chromium; web browser. Another good performance benchmark for this mechanism is the; virtual-call-heavy SPEC 2006 xalancbmk. Note that this scheme has not yet been optimized for binary size; an increase; of up to 15% has been observed for Chromium. Bad Cast Checking; =================. This scheme checks that pointer casts are made to an object of the correct; dynamic type; that is, the dynamic type of the object must be a derived class; of the pointee type of the cast. The checks are currently only introduced; where the class being casted to is a polymorphic class. Bad casts are not in themselves control flow integrity violations, but they; can also create security vulnerabilities, and the implementation uses many; of the same mechanisms. There are two types of bad cast that may be forbidden: bad casts; from a base class to a derived class (which can be checked with; ``-fsanitize=cfi-derived-cast``), and bad casts from a pointer",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ControlFlowIntegrity.rst:4877,benchmark,benchmark,4877,interpreter/llvm-project/clang/docs/ControlFlowIntegrity.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ControlFlowIntegrity.rst,1,['benchmark'],['benchmark']
Testability,"gram output and timing; information. The output of these programs is compared to a reference; output to ensure that the program is being compiled correctly. In addition to compiling and executing programs, whole program tests; serve as a way of benchmarking LLVM performance, both in terms of the; efficiency of the programs generated as well as the speed with which; LLVM compiles, optimizes, and generates code. The test-suite is located in the ``test-suite``; `repository on GitHub <https://github.com/llvm/llvm-test-suite.git>`_. See the :doc:`TestSuiteGuide` for details. Debugging Information tests; ---------------------------. The test suite contains tests to check quality of debugging information.; The test are written in C based languages or in LLVM assembly language. These tests are compiled and run under a debugger. The debugger output; is checked to validate of debugging information. See README.txt in the; test suite for more information. This test suite is located in the; ``cross-project-tests/debuginfo-tests`` directory. Quick start; ===========. The tests are located in two separate repositories. The unit and; regression tests are in the main ""llvm""/ directory under the directories; ``llvm/unittests`` and ``llvm/test`` (so you get these tests for free with the; main LLVM tree). Use ``make check-all`` to run the unit and regression tests; after building LLVM. The ``test-suite`` module contains more comprehensive tests including whole C; and C++ programs. See the :doc:`TestSuiteGuide` for details. Unit and Regression tests; -------------------------. To run all of the LLVM unit tests use the check-llvm-unit target:. .. code-block:: bash. % make check-llvm-unit. To run all of the LLVM regression tests use the check-llvm target:. .. code-block:: bash. % make check-llvm. In order to get reasonable testing performance, build LLVM and subprojects; in release mode, i.e. .. code-block:: bash. % cmake -DCMAKE_BUILD_TYPE=""Release"" -DLLVM_ENABLE_ASSERTIONS=On. If you ha",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:4448,test,test,4448,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,3,['test'],"['test', 'tests']"
Testability,"gram with the ""safe"" backend and running it. **--run-{int,jit,llc,custom}**. Whenever the test program is compiled, **bugpoint** should generate code for it; using the specified code generator. These options allow you to choose the; interpreter, the JIT compiler, the static native code compiler, or a; custom command (see **--exec-command**) respectively. **--safe-{llc,custom}**. When debugging a code generator, **bugpoint** should use the specified code; generator as the ""safe"" code generator. This is a known-good code generator; used to generate the ""reference output"" if it has not been provided, and to; compile portions of the program that as they are excluded from the testcase.; These options allow you to choose the; static native code compiler, or a custom command, (see **--exec-command**); respectively. The interpreter and the JIT backends cannot currently; be used as the ""safe"" backends. **--exec-command** *command*. This option defines the command to use with the **--run-custom** and; **--safe-custom** options to execute the bitcode testcase. This can; be useful for cross-compilation. **--compile-command** *command*. This option defines the command to use with the **--compile-custom**; option to compile the bitcode testcase. The command should exit with a; failure exit code if the file is ""interesting"" and should exit with a; success exit code (i.e. 0) otherwise (this is the same as if it crashed on; ""interesting"" inputs). This can be useful for; testing compiler output without running any link or execute stages. To; generate a reduced unit test, you may add CHECK directives to the; testcase and pass the name of an executable compile-command script in this form:. .. code-block:: sh. #!/bin/sh; llc ""$@""; not FileCheck [bugpoint input file].ll < bugpoint-test-program.s. This script will ""fail"" as long as FileCheck passes. So the result; will be the minimum bitcode that passes FileCheck. **--safe-path** *path*. This option defines the path to the command to execu",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst:5158,test,testcase,5158,interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst,1,['test'],['testcase']
Testability,"grams. The unit tests and regression; tests are contained inside the LLVM repository itself under ``llvm/unittests``; and ``llvm/test`` respectively and are expected to always pass -- they should be; run before every commit. The whole programs tests are referred to as the ""LLVM test suite"" (or; ""test-suite"") and are in the ``test-suite``; `repository on GitHub <https://github.com/llvm/llvm-test-suite.git>`_.; For historical reasons, these tests are also referred to as the ""nightly; tests"" in places, which is less ambiguous than ""test-suite"" and remains; in use although we run them much more often than nightly. Unit tests; ----------. Unit tests are written using `Google Test <https://github.com/google/googletest/blob/master/docs/primer.md>`_; and `Google Mock <https://github.com/google/googletest/blob/master/docs/gmock_for_dummies.md>`_; and are located in the ``llvm/unittests`` directory.; In general unit tests are reserved for targeting the support library and other; generic data structure, we prefer relying on regression tests for testing; transformations and analysis on the IR. Regression tests; ----------------. The regression tests are small pieces of code that test a specific; feature of LLVM or trigger a specific bug in LLVM. The language they are; written in depends on the part of LLVM being tested. These tests are driven by; the :doc:`Lit <CommandGuide/lit>` testing tool (which is part of LLVM), and; are located in the ``llvm/test`` directory. Typically when a bug is found in LLVM, a regression test containing just; enough code to reproduce the problem should be written and placed; somewhere underneath this directory. For example, it can be a small; piece of LLVM IR distilled from an actual application or benchmark. Testing Analysis; ----------------. An analysis is a pass that infer properties on some part of the IR and not; transforming it. They are tested in general using the same infrastructure as the; regression tests, by creating a separate ""Printer""",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:1725,test,tests,1725,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,3,['test'],"['testing', 'tests']"
Testability,"gration will pause here until all dependencies have cleared, and all; problems have been solved. Step #3: Write Access Move; --------------------------. 9. Collect developers' GitHub account information, and add them to the project.; 10. Switch the SVN repository to read-only and allow pushes to the GitHub repository.; 11. Update the documentation.; 12. Mirror Git to SVN. Step #4 : Post Move; -------------------. 13. Archive the SVN repository.; 14. Update links on the LLVM website pointing to viewvc/klaus/phab etc. to; point to GitHub instead. GitHub Repository Description; =============================. Monorepo; ----------------. The LLVM git repository hosted at https://github.com/llvm/llvm-project contains all; sub-projects in a single source tree. It is often referred to as a monorepo and; mimics an export of the current SVN repository, with each sub-project having its; own top-level directory. Not all sub-projects are used for building toolchains.; For example, www/ and test-suite/ are not part of the monorepo. Putting all sub-projects in a single checkout makes cross-project refactoring; naturally simple:. * New sub-projects can be trivially split out for better reuse and/or layering; (e.g., to allow libSupport and/or LIT to be used by runtimes without adding a; dependency on LLVM).; * Changing an API in LLVM and upgrading the sub-projects will always be done in; a single commit, designing away a common source of temporary build breakage.; * Moving code across sub-project (during refactoring for instance) in a single; commit enables accurate `git blame` when tracking code change history.; * Tooling based on `git grep` works natively across sub-projects, allowing to; easier find refactoring opportunities across projects (for example reusing a; datastructure initially in LLDB by moving it into libSupport).; * Having all the sources present encourages maintaining the other sub-projects; when changing API. Finally, the monorepo maintains the property of the exist",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/GitHubMove.rst:8779,test,test-suite,8779,interpreter/llvm-project/llvm/docs/Proposals/GitHubMove.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/GitHubMove.rst,1,['test'],['test-suite']
Testability,"gs: [0]. Then calling `csa_mark_sanitized(X)` will tell the analyzer that `X` is safe to; be used after this point, because its contents are verified. It is the; responsibility of the programmer to ensure that this verification was indeed; correct. Please note that `csa_mark_sanitized` function is only declared and; used during Clang Static Analysis and skipped in (production) builds. Further examples of injection vulnerabilities this checker can find. .. code-block:: c. void test() {; char x = getchar(); // 'x' marked as tainted; system(&x); // warn: untrusted data is passed to a system call; }. // note: compiler internally checks if the second param to; // sprintf is a string literal or not.; // Use -Wno-format-security to suppress compiler warning.; void test() {; char s[10], buf[10];; fscanf(stdin, ""%s"", s); // 's' marked as tainted. sprintf(buf, s); // warn: untrusted data used as a format string; }. void test() {; size_t ts;; scanf(""%zd"", &ts); // 'ts' marked as tainted; int *p = (int *)malloc(ts * sizeof(int));; // warn: untrusted data used as buffer size; }. There are built-in sources, propagations and sinks even if no external taint; configuration is provided. Default sources:; ``_IO_getc``, ``fdopen``, ``fopen``, ``freopen``, ``get_current_dir_name``,; ``getch``, ``getchar``, ``getchar_unlocked``, ``getwd``, ``getcwd``,; ``getgroups``, ``gethostname``, ``getlogin``, ``getlogin_r``, ``getnameinfo``,; ``gets``, ``gets_s``, ``getseuserbyname``, ``readlink``, ``readlinkat``,; ``scanf``, ``scanf_s``, ``socket``, ``wgetch``. Default propagations rules:; ``atoi``, ``atol``, ``atoll``, ``basename``, ``dirname``, ``fgetc``,; ``fgetln``, ``fgets``, ``fnmatch``, ``fread``, ``fscanf``, ``fscanf_s``,; ``index``, ``inflate``, ``isalnum``, ``isalpha``, ``isascii``, ``isblank``,; ``iscntrl``, ``isdigit``, ``isgraph``, ``islower``, ``isprint``, ``ispunct``,; ``isspace``, ``isupper``, ``isxdigit``, ``memchr``, ``memrchr``, ``sscanf``,; ``getc``, ``getc_unlocked``, ``getdeli",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:70741,test,test,70741,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"guments and stores the result in the third argument. If; possible, the result will be equal to mathematically-correct result; and the builtin will return 0. Otherwise, the builtin will return; 1 and the result will be equal to the unique value that is equivalent; to the mathematically-correct result modulo two raised to the *k*; power, where *k* is the number of bits in the result type. The; behavior of these builtins is well-defined for all argument values. The first three builtins work generically for operands of any integer type,; including boolean types. The operands need not have the same type as each; other, or as the result. The other builtins may implicitly promote or; convert their operands before performing the operation. Query for this feature with ``__has_builtin(__builtin_add_overflow)``, etc. Floating point builtins; ---------------------------------------. ``__builtin_isfpclass``; -----------------------. ``__builtin_isfpclass`` is used to test if the specified floating-point values; fall into one of the specified floating-point classes. **Syntax**:. .. code-block:: c++. int __builtin_isfpclass(fp_type expr, int mask); int_vector __builtin_isfpclass(fp_vector expr, int mask). **Example of use**:. .. code-block:: c++. if (__builtin_isfpclass(x, 448)) {; // `x` is positive finite value; 	 ...; }. **Description**:. The ``__builtin_isfpclass()`` builtin is a generalization of functions ``isnan``,; ``isinf``, ``isfinite`` and some others defined by the C standard. It tests if; the floating-point value, specified by the first argument, falls into any of data; classes, specified by the second argument. The latter is an integer constant; bitmask expression, in which each data class is represented by a bit; using the encoding:. ========== =================== ======================; Mask value Data class Macro; ========== =================== ======================; 0x0001 Signaling NaN __FPCLASS_SNAN; 0x0002 Quiet NaN __FPCLASS_QNAN; 0x0004 Negative infinity __F",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LanguageExtensions.rst:129407,test,test,129407,interpreter/llvm-project/clang/docs/LanguageExtensions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LanguageExtensions.rst,1,['test'],['test']
Testability,"gure machinery that the test suite is; available so it can be configured for your build tree:. .. code-block:: bash. % cd $LLVM_OBJ_ROOT ; $LLVM_SRC_ROOT/configure [--with-llvmgccdir=$LLVM_GCC_DIR]. [Remember that ``$LLVM_GCC_DIR`` is the directory where you; *installed* llvm-gcc, not its src or obj directory.]. #. You can now run the test suite from your build tree as follows:. .. code-block:: bash. % cd $LLVM_OBJ_ROOT/projects/test-suite; % make. Note that the second and third steps only need to be done once. After; you have the suite checked out and configured, you don't need to do it; again (unless the test code or configure script changes). Configuring External Tests; ==========================. In order to run the External tests in the ``test-suite`` module, you; must specify *--with-externals*. This must be done during the; *re-configuration* step (see above), and the ``llvm`` re-configuration; must recognize the previously-built ``llvm-gcc``. If any of these is; missing or neglected, the External tests won't work. * *--with-externals*. * *--with-externals=<directory>*. This tells LLVM where to find any external tests. They are expected to; be in specifically named subdirectories of <``directory``>. If; ``directory`` is left unspecified, ``configure`` uses the default value; ``/home/vadve/shared/benchmarks/speccpu2000/benchspec``. Subdirectory; names known to LLVM include:. * spec95. * speccpu2000. * speccpu2006. * povray31. Others are added from time to time, and can be determined from; ``configure``. Running Different Tests; =======================. In addition to the regular ""whole program"" tests, the ``test-suite``; module also provides a mechanism for compiling the programs in different; ways. If the variable TEST is defined on the ``gmake`` command line, the; test system will include a Makefile named; ``TEST.<value of TEST variable>.Makefile``. This Makefile can modify; build rules to yield different results. For example, the LLVM nightly tester uses ``T",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst:2235,test,tests,2235,interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,1,['test'],['tests']
Testability,"guring External Tests; ==========================. In order to run the External tests in the ``test-suite`` module, you; must specify *--with-externals*. This must be done during the; *re-configuration* step (see above), and the ``llvm`` re-configuration; must recognize the previously-built ``llvm-gcc``. If any of these is; missing or neglected, the External tests won't work. * *--with-externals*. * *--with-externals=<directory>*. This tells LLVM where to find any external tests. They are expected to; be in specifically named subdirectories of <``directory``>. If; ``directory`` is left unspecified, ``configure`` uses the default value; ``/home/vadve/shared/benchmarks/speccpu2000/benchspec``. Subdirectory; names known to LLVM include:. * spec95. * speccpu2000. * speccpu2006. * povray31. Others are added from time to time, and can be determined from; ``configure``. Running Different Tests; =======================. In addition to the regular ""whole program"" tests, the ``test-suite``; module also provides a mechanism for compiling the programs in different; ways. If the variable TEST is defined on the ``gmake`` command line, the; test system will include a Makefile named; ``TEST.<value of TEST variable>.Makefile``. This Makefile can modify; build rules to yield different results. For example, the LLVM nightly tester uses ``TEST.nightly.Makefile`` to; create the nightly test reports. To run the nightly tests, run; ``gmake TEST=nightly``. There are several TEST Makefiles available in the tree. Some of them are; designed for internal LLVM research and will not work outside of the; LLVM research group. They may still be valuable, however, as a guide to; writing your own TEST Makefile for any optimization or analysis passes; that you develop with LLVM. Generating Test Output; ======================. There are a number of ways to run the tests and generate output. The; most simple one is simply running ``gmake`` with no arguments. This will; compile and run all programs in th",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst:2843,test,tests,2843,interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,2,['test'],"['test-suite', 'tests']"
Testability,"gw64. FreeBSD 10.0 and newer; have a modern Clang as the system compiler. However, some Linux distributions and some other or older BSDs sometimes have; extremely old versions of GCC. These steps attempt to help you upgrade you; compiler even on such a system. However, if at all possible, we encourage you; to use a recent version of a distribution with a modern system compiler that; meets these requirements. Note that it is tempting to install a prior; version of Clang and libc++ to be the host compiler, however libc++ was not; well tested or set up to build on Linux until relatively recently. As; a consequence, this guide suggests just using libstdc++ and a modern GCC as the; initial host in a bootstrap, and then using Clang (and potentially libc++). The first step is to get a recent GCC toolchain installed. The most common; distribution on which users have struggled with the version requirements is; Ubuntu Precise, 12.04 LTS. For this distribution, one easy option is to install; the `toolchain testing PPA`_ and use it to install a modern GCC. There is; a really nice discussions of this on the `ask ubuntu stack exchange`_ and a; `github gist`_ with updated commands. However, not all users can use PPAs and; there are many other distributions, so it may be necessary (or just useful, if; you're here you *are* doing compiler development after all) to build and install; GCC from source. It is also quite easy to do these days. .. _toolchain testing PPA:; https://launchpad.net/~ubuntu-toolchain-r/+archive/test; .. _ask ubuntu stack exchange:; https://askubuntu.com/questions/466651/how-do-i-use-the-latest-gcc-on-ubuntu/581497#58149; .. _github gist:; https://gist.github.com/application2000/73fd6f4bf1be6600a2cf9f56315a2d91. Easy steps for installing a specific version of GCC:. .. code-block:: console. % gcc_version=7.4.0; % wget https://ftp.gnu.org/gnu/gcc/gcc-${gcc_version}/gcc-${gcc_version}.tar.bz2; % wget https://ftp.gnu.org/gnu/gcc/gcc-${gcc_version}/gcc-${gcc_version}.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst:16223,test,testing,16223,interpreter/llvm-project/llvm/docs/GettingStarted.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst,1,['test'],['testing']
Testability,"h PGO, though it also applies; to other subprojects, such as LLD. If you want to build other software with PGO, see the `end-user documentation; for PGO <https://clang.llvm.org/docs/UsersManual.html#profile-guided-optimization>`_. Using preconfigured CMake caches; ================================. See https://llvm.org/docs/AdvancedBuilds.html#multi-stage-pgo. Using the script; ================. We have a script at ``utils/collect_and_build_with_pgo.py``. This script is; tested on a few Linux flavors, and requires a checkout of LLVM, Clang, and; compiler-rt. Despite the name, it performs four clean builds of Clang, so it; can take a while to run to completion. Please see the script's ``--help`` for; more information on how to run it, and the different options available to you.; If you want to get the most out of PGO for a particular use-case (e.g. compiling; a specific large piece of software), please do read the section below on; 'benchmark' selection. Please note that this script is only tested on a few Linux distros. Patches to; add support for other platforms, as always, are highly appreciated. :). This script also supports a ``--dry-run`` option, which causes it to print; important commands instead of running them. Selecting 'benchmarks'; ======================. PGO does best when the profiles gathered represent how the user plans to use the; compiler. Notably, highly accurate profiles of llc building x86_64 code aren't; incredibly helpful if you're going to be targeting ARM. By default, the script above does two things to get solid coverage. It:. - runs all of Clang and LLVM's lit tests, and; - uses the instrumented Clang to build Clang, LLVM, and all of the other; LLVM subprojects available to it. Together, these should give you:. - solid coverage of building C++,; - good coverage of building C,; - great coverage of running optimizations,; - great coverage of the backend for your host's architecture, and; - some coverage of other architectures (if other arches",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToBuildWithPGO.rst:1471,test,tested,1471,interpreter/llvm-project/llvm/docs/HowToBuildWithPGO.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToBuildWithPGO.rst,1,['test'],['tested']
Testability,"h as CReduce, Delta, and Lithium; the tool should feel less; cluttered, and there should also be no uncertainty about how to operate it. The interesting-ness test that’s going to be run to reduce the code is given; by name:; `--test=<test_name>`; If a `--test` option is not given, the program exits; this option is similar; to bugpoint’s current `-compile-custom` option, which lets the user run a; custom script. The interesting-ness test would be defined as a script that returns 0 when the; IR achieves a user-defined behaviour (e.g. failure to compile on clang) and a; nonzero value when otherwise. Leaving the user the freedom to determine what is; and isn’t interesting to the tool, and thus, streamlining the process of; reducing a test-case. If the test accepts any arguments (excluding the input ll/bc file), they are; given via the following flag:; `--test_args=<test_arguments>`; If unspecified, the test is run as given. It’s worth noting that the input file; would be passed as a parameter to the test, similar how `-compile-custom`; currently operates. ### Implementation; The tool would behave similar to CReduce’s functionality in that it would have a; list of passes that try to minimize the given test-case. We should be able to; modularize the tool’s behavior, as well as making it easier to maintain and; expand. The first version of this redesign would try to:. * Discard functions, instructions and metadata that don’t influence the; interesting-ness test; * Remove unused parameters from functions; * Eliminate unvisited conditional paths; * Rename variables to more regular ones (such as “a”, “b”, “c”, etc.). Once these passes are implemented, more meaningful reductions (such as type; reduction) would be added to the tool, to even further reduce IR. ## Background on historical bugpoint issues. ### Root Cause Analysis; Presently, bugpoint takes a long time to find the source problem in a given IR; file, mainly due to the fact that it tries to debug the input by running",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/BugpointRedesign.md:2218,test,test,2218,interpreter/llvm-project/llvm/docs/BugpointRedesign.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/BugpointRedesign.md,1,['test'],['test']
Testability,"h classes, `TGraph`,; `TGraph2D` and `TMultiGraph` for fitting a collection of Graphs with the same function. ### The TH1::Fit Method. To fit a histogram programmatically, you can use the `TH1::Fit`; method. Here is the signatures of `TH1::Fit` and an explanation of the; parameters:. ``` {.cpp}; TFitResultPtr Fit(TF1 *function, Option_t *option, Option_t *goption,; Axis_t xxmin, Axis_t xxmax); ```; - `function` a pointer to the fitted function (the fit model) object.; One can also use the function name. This name may be one of ROOT pre-defined; function names or a user-defined function. See the next paragraph for the list of pre-defined functions. - `*option:` The second parameter is the fitting option. Here is the; list of fitting options:. 	- ""`W`"" Set all weights to 1 for non empty bins; ignore error bars. 	- ""`WW`"" Set all weights to 1 including empty bins; ignore error; bars. 	- ""`I`"" Use integral of function in bin instead of value at bin; center. 	- ""`L`"" Use log likelihood method (default is chi-square method). To be used when; the histogram represents counts. 	- ""`WL`"" Weighted log likelihood method. To be used when the histogram has been filled with; 	weights different than 1. - ""`P`"" Use Pearson chi-square method, using expected errors instead of the observed one given by `TH1::GetBinError` (default case).; The expected error is instead estimated from the square-root of the bin function value. 	- ""`Q`"" Quiet mode (minimum printing). 	- ""`V`"" Verbose mode (default is between Q and V). 	- ""`S`"" The result of the fit is returned in the `TFitResultPtr`. 	- ""`E`"" Perform better errors estimation using the Minos technique. 	- ""`M`"" Improve fit results, by using the *IMPROVE* algorithm of TMinuit. 	- ""`R`"" Use the range specified in the function range. 	- ""`N`"" Do not store the graphics function, do not draw. 	- ""`0`"" Do not plot the result of the fit. By default the fitted; function is drawn unless the option ""`N`"" above is specified. 	- ""`+`"" Add this new fitte",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/FittingHistograms.md:1489,log,log,1489,documentation/users-guide/FittingHistograms.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/FittingHistograms.md,1,['log'],['log']
Testability,"h gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinim",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3720,test,testRooAbsL,3720,roofit/roofitcore/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt,2,['test'],['testRooAbsL']
Testability,"h is part of LLVM), and; are located in the ``llvm/test`` directory. Typically when a bug is found in LLVM, a regression test containing just; enough code to reproduce the problem should be written and placed; somewhere underneath this directory. For example, it can be a small; piece of LLVM IR distilled from an actual application or benchmark. Testing Analysis; ----------------. An analysis is a pass that infer properties on some part of the IR and not; transforming it. They are tested in general using the same infrastructure as the; regression tests, by creating a separate ""Printer"" pass to consume the analysis; result and print it on the standard output in a textual format suitable for; FileCheck.; See `llvm/test/Analysis/BranchProbabilityInfo/loop.ll <https://github.com/llvm/llvm-project/blob/main/llvm/test/Analysis/BranchProbabilityInfo/loop.ll>`_; for an example of such test. ``test-suite``; --------------. The test suite contains whole programs, which are pieces of code which; can be compiled and linked into a stand-alone program that can be; executed. These programs are generally written in high level languages; such as C or C++. These programs are compiled using a user specified compiler and set of; flags, and then executed to capture the program output and timing; information. The output of these programs is compared to a reference; output to ensure that the program is being compiled correctly. In addition to compiling and executing programs, whole program tests; serve as a way of benchmarking LLVM performance, both in terms of the; efficiency of the programs generated as well as the speed with which; LLVM compiles, optimizes, and generates code. The test-suite is located in the ``test-suite``; `repository on GitHub <https://github.com/llvm/llvm-test-suite.git>`_. See the :doc:`TestSuiteGuide` for details. Debugging Information tests; ---------------------------. The test suite contains tests to check quality of debugging information.; The test are written ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:3145,test,test,3145,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"h it passes to the executor; as the first argument with the format ``filedescs=<in-fd>,<out-fd>``. The ``-oop-executor-connect=<host>:<port>`` option tells ``llvm-jitlink`` to; connect to an already running executor via TCP on the given host and port. To; use this option you will need to start ``llvm-jitlink-executor`` manually with; ``listen=<host>:<port>`` as the first argument. Harness mode; ------------. The ``-harness`` option allows a set of input objects to be designated as a test; harness, with the regular object files implicitly treated as objects to be; tested. Definitions of symbols in the harness set override definitions in the; test set, and external references from the harness cause automatic scope; promotion of local symbols in the test set (these modifications to the usual; linker rules are accomplished via an ``ObjectLinkingLayer::Plugin`` installed by; ``llvm-jitlink`` when it sees the ``-harness`` option). With these modifications in place we can selectively test functions in an object; file by mocking those function's callees. For example, suppose we have an object; file, ``test_code.o``, compiled from the following C source (which we need not; have access to):. .. code-block:: c. void irrelevant_function() { irrelevant_external(); }. int function_to_mock(int X) {; return /* some function of X */;; }. static void function_to_test() {; ...; int Y = function_to_mock();; printf(""Y is %i\n"", Y);; }. If we want to know how ``function_to_test`` behaves when we change the behavior; of ``function_to_mock`` we can test it by writing a test harness:. .. code-block:: c. void function_to_test();. int function_to_mock(int X) {; printf(""used mock utility function\n"");; return 42;; }. int main(int argc, char *argv[]) {; function_to_test():; return 0;; }. Under normal circumstances these objects could not be linked together:; ``function_to_test`` is static and could not be resolved outside; ``test_code.o``, the two ``function_to_mock`` functions would result in ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/JITLink.rst:41075,test,test,41075,interpreter/llvm-project/llvm/docs/JITLink.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/JITLink.rst,2,"['mock', 'test']","['mocking', 'test']"
Testability,"h operand is the vector mask and has the same number of elements as the; result vector type. The fifth operand is the explicit vector length of the; operation. Semantics:; """""""""""""""""""". The '``llvm.vp.fshr``' intrinsic performs fshr (:ref:`fshr <int_fshr>`) of the first, second, and third; vector operand on each enabled lane. The result on disabled lanes is a :ref:`poison value <poisonvalues>`. Examples:; """""""""""""""""". .. code-block:: llvm. %r = call <4 x i32> @llvm.vp.fshr.v4i32(<4 x i32> %a, <4 x i32> %b, <4 x i32> %c, <4 x i1> %mask, i32 %evl); ;; For all lanes below %evl, %r is lane-wise equivalent to %also.r. %t = call <4 x i32> @llvm.fshr.v4i32(<4 x i32> %a, <4 x i32> %b, <4 x i32> %c); %also.r = select <4 x i1> %mask, <4 x i32> %t, <4 x i32> poison. '``llvm.vp.is.fpclass.*``' Intrinsics; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """"""""""""""; This is an overloaded intrinsic. ::. declare <vscale x 2 x i1> @llvm.vp.is.fpclass.nxv2f32(<vscale x 2 x float> <op>, i32 <test>, <vscale x 2 x i1> <mask>, i32 <vector_length>); declare <2 x i1> @llvm.vp.is.fpclass.v2f16(<2 x half> <op>, i32 <test>, <2 x i1> <mask>, i32 <vector_length>). Overview:; """""""""""""""""". Predicated llvm.is.fpclass :ref:`llvm.is.fpclass <llvm.is.fpclass>`. Arguments:; """""""""""""""""""". The first operand is a floating-point vector, the result type is a vector of; boolean with the same number of elements as the first argument. The second; operand specifies, which tests to perform :ref:`llvm.is.fpclass <llvm.is.fpclass>`.; The third operand is the vector mask and has the same number of elements as the; result vector type. The fourth operand is the explicit vector length of the; operation. Semantics:; """""""""""""""""""". The '``llvm.vp.is.fpclass``' intrinsic performs llvm.is.fpclass (:ref:`llvm.is.fpclass <llvm.is.fpclass>`). Examples:; """""""""""""""""". .. code-block:: llvm. %r = call <2 x i1> @llvm.vp.is.fpclass.v2f16(<2 x half> %x, i32 3, <2 x i1> %m, i32 %evl); %t = call <vscale x 2 x i1> @llvm.vp.is.fpclass.nxv2f16(<vscale",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:841511,test,test,841511,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"h the Clang version. For troubleshooting purposes; ``llvm-spirv`` can be `tested in isolation; <https://github.com/KhronosGroup/SPIRV-LLVM-Translator#test-instructions>`_. Example usage for OpenCL kernel compilation:. .. code-block:: console. $ clang --target=spirv32 -c test.cl; $ clang --target=spirv64 -c test.cl. Both invocations of Clang will result in the generation of a SPIR-V binary file; `test.o` for 32 bit and 64 bit respectively. This file can be imported; by an OpenCL driver that support SPIR-V consumption or it can be compiled; further by offline SPIR-V consumer tools. Converting to SPIR-V produced with the optimization levels other than `-O0` is; currently available as an experimental feature and it is not guaranteed to work; in all cases. Clang also supports integrated generation of SPIR-V without use of ``llvm-spirv``; tool as an experimental feature when ``-fintegrated-objemitter`` flag is passed in; the command line. .. code-block:: console. $ clang --target=spirv32 -fintegrated-objemitter -c test.cl. Note that only very basic functionality is supported at this point and therefore; it is not suitable for arbitrary use cases. This feature is only enabled when clang; build is configured with ``-DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD=SPIRV`` option. Linking is done using ``spirv-link`` from `the SPIRV-Tools project; <https://github.com/KhronosGroup/SPIRV-Tools#linker>`_. Similar to other external; linkers, Clang will expect ``spirv-link`` to be installed separately and to be; present in the ``PATH`` environment variable. Please refer to `the build and; installation instructions; <https://github.com/KhronosGroup/SPIRV-Tools#build>`_. .. code-block:: console. $ clang --target=spirv64 test1.cl test2.cl. More information about the SPIR-V target settings and supported versions of SPIR-V; format can be found in `the SPIR-V target guide; <https://llvm.org/docs/SPIRVUsage.html>`__. .. _clang-cl:. clang-cl; ========. clang-cl is an alternative command-line interfac",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:167463,test,test,167463,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"h variable and then looping through all; events, placing the cuts always in the middle between two; of the sorted events, and finding the true possible; maximum separation gain in the training sample by cutting; on this variable.; . BDT, AdaBoost The beta parameter is now an; option (default is 1).; . BDT: The node purity at which a node is; classified as signal (respective background node) for; determining the error fraction in the pruning became a; parameter that can be set via the option NodePurityLimit; (default is 0.5).; . Dataset preparation:. First implementation of a new preprocessing method: transformation of the; variables first into a Gaussian distribution, then performing a decorrelation of; the ""Gaussianised"" variables. The transformation is again done by default such that; (by default) the signal distributions become Gaussian and are decorrelated. Note ; that simultaneous Gaussianisation and decorrelation of signal and background is ; only possible (and done) for methods, such as Likelihood, which test both hypotheses.; . Bug fixes:. Fix in Expected error pruning: Rather than multiplying both sides, the error on ; the node and the sub-tree, with the prune strength, now only the expected error ; of the sub-tree is scaled.; . Fix in FDA parsing of the input formula. There were problems when treating; more than 10 parameters (thanks to Hugh Skottowe for reporting this).; . Calculation of ""Separation"": fixed bin-shift and; normalisation bugs. Thanks to Dag Gillberg (Fraser U) for; spotting these.; . Fixed problem in ""SetSignal(Background)WeightExpression"":; signal (background weight expressions not existing in the; background (signal) tree led to an abort of the tree; reading (""Bad numerical expression""). Thanks to Alfio; Rizzo (Brussels) for pointing this out.; . Fixed problem when specifying train and test tree; explicitly. Some code was forgotten in the background; part, creating incompatibilities. Thanks to Zhiyi Liu; (Fraser U) for reporting this.; . ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v522/index.html:2523,test,test,2523,tmva/doc/v522/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v522/index.html,1,['test'],['test']
Testability,"h.Convert());; ht3->Draw();; }; ```. The output is shown in the figure below. If a time axis has no specified; time offset, the global time offset will be stored in the axis data; structure. The histogram limits are in seconds. If `wmin` and `wmax` are; the histogram limits, the time axis will spread around the time offset; value from `TimeOffset+wmin` to `TimeOffset+wmax`. Until now all; examples had a lowest value equal to 0. The following example; demonstrates how to define the histogram limits relatively to the time; offset value. ![Time axis examples](pictures/030000C8.png). ``` {.cpp}; {; // Define the time offset as 2003, January 1st; TDatime T0(2003,01,01,00,00,00);; int X0 = T0.Convert();; gStyle->SetTimeOffset(X0);. // Define the lowest histogram limit as 2002,September 23rd; TDatime T1(2002,09,23,00,00,00);; int X1 = T1.Convert()-X0;. // Define the highest histogram limit as 2003, March 7th; TDatime T2(2003,03,07,00,00,00);; int X2 = T2.Convert(1)-X0;. TH1F * h1 = new TH1F(""h1"",""test"",100,X1,X2);. TRandom r;; for (Int_t i=0;i<30000;i++) {; Double_t noise = r.Gaus(0.5*(X1+X2),0.1*(X2-X1));; h1->Fill(noise);; }. h1->GetXaxis()->SetTimeDisplay(1);; h1->GetXaxis()->SetLabelSize(0.03);; h1->GetXaxis()->SetTimeFormat(""%Y/%m/%d"");; h1->Draw();; }; ```. The output is shown in the next figure. Usually time axes are created; automatically via histograms, but one may also want to draw a time axis; outside a ""histogram context"". Therefore, it is useful to understand how; **`TGaxis`** works for such axis. The time offset can be defined using; one of the three methods described before. The time axis will spread; around the time offset value. Actually, it will go from; `TimeOffset+wmin` to `TimeOffset+wmax` where `wmin` and `wmax` are the; minimum and maximum values (in seconds) of the axis. Let us take again; an example. Having defined ""2003, February 28 at 12h"", we would like to; see the axis a day before and a day after. ![A histogram with time axis X](pictures/03000",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md:63298,test,test,63298,documentation/users-guide/Graphics.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md,1,['test'],['test']
Testability,h; libc/src/__support/OSUtil/linux/syscall.h; libc/src/__support/OSUtil/linux/aarch64/syscall.h; libc/src/__support/OSUtil/linux/x86_64/syscall.h; libc/src/__support/threads/mutex.h; libc/src/__support/threads/linux/mutex.h; libc/utils/HdrGen/Command.cpp; libc/utils/HdrGen/Command.h; libc/utils/HdrGen/Generator.cpp; libc/utils/HdrGen/Generator.h; libc/utils/HdrGen/IncludeFileCommand.cpp; libc/utils/HdrGen/IncludeFileCommand.h; libc/utils/HdrGen/Main.cpp; libc/utils/HdrGen/PublicAPICommand.cpp; libc/utils/HdrGen/PublicAPICommand.h; libc/utils/HdrGen/PrototypeTestGen/PrototypeTestGen.cpp; libc/utils/LibcTableGenUtil/APIIndexer.cpp; libc/utils/LibcTableGenUtil/APIIndexer.h; libc/utils/MPFRWrapper/check_mpfr.cpp; libc/utils/MPFRWrapper/MPFRUtils.cpp; libc/utils/MPFRWrapper/MPFRUtils.h; libc/utils/testutils/ExecuteFunction.h; libc/utils/testutils/ExecuteFunctionUnix.cpp; libc/utils/testutils/FDReader.h; libc/utils/testutils/FDReaderUnix.cpp; libc/utils/testutils/RandUtils.cpp; libc/utils/testutils/RandUtils.h; libc/utils/testutils/StreamWrapper.h; libc/utils/testutils/Timer.cpp; libc/utils/testutils/Timer.h; libc/utils/tools/WrapperGen/Main.cpp; libc/utils/UnitTest/FPExceptMatcher.cpp; libc/utils/UnitTest/FPExceptMatcher.h; libc/utils/UnitTest/FPMatcher.cpp; libc/utils/UnitTest/FPMatcher.h; libc/utils/UnitTest/FuchsiaTest.h; libc/utils/UnitTest/LibcTest.cpp; libc/utils/UnitTest/LibcTestMain.cpp; libc/utils/UnitTest/MemoryMatcher.cpp; libc/utils/UnitTest/MemoryMatcher.h; libc/utils/UnitTest/PlatformDefs.h; libc/utils/UnitTest/Test.h; libclc/generic/include/config.h; libclc/generic/include/clc/as_type.h; libclc/generic/include/clc/clcfunc.h; libclc/generic/include/clc/async/async_work_group_copy.h; libclc/generic/include/clc/async/async_work_group_strided_copy.h; libclc/generic/include/clc/async/prefetch.h; libclc/generic/include/clc/async/wait_group_events.h; libclc/generic/include/clc/atomic/atomic_add.h; libclc/generic/include/clc/atomic/atomic_and.h; libclc/generic/inc,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:148997,test,testutils,148997,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['testutils']
Testability,h; libclc/generic/include/clc/workitem/get_local_id.h; libclc/generic/include/clc/workitem/get_local_size.h; libclc/generic/include/clc/workitem/get_num_groups.h; libclc/generic/include/clc/workitem/get_work_dim.h; libclc/generic/include/integer/popcount.h; libclc/generic/include/math/clc_exp10.h; libclc/generic/include/math/clc_fma.h; libclc/generic/include/math/clc_fmod.h; libclc/generic/include/math/clc_hypot.h; libclc/generic/include/math/clc_ldexp.h; libclc/generic/include/math/clc_nextafter.h; libclc/generic/include/math/clc_pow.h; libclc/generic/include/math/clc_pown.h; libclc/generic/include/math/clc_powr.h; libclc/generic/include/math/clc_remainder.h; libclc/generic/include/math/clc_remquo.h; libclc/generic/include/math/clc_rootn.h; libclc/generic/include/math/clc_sqrt.h; libclc/generic/include/math/clc_tan.h; libclc/generic/include/math/clc_tanpi.h; libclc/generic/lib/math/ep_log.h; libcxx/benchmarks/format.bench.cpp; libcxx/benchmarks/formatted_size.bench.cpp; libcxx/benchmarks/formatter_float.bench.cpp; libcxx/benchmarks/format_to.bench.cpp; libcxx/benchmarks/format_to_n.bench.cpp; libcxx/benchmarks/to_chars.bench.cpp; libcxx/benchmarks/util_smartptr.bench.cpp; libcxx/benchmarks/variant_visit_1.bench.cpp; libcxx/benchmarks/variant_visit_2.bench.cpp; libcxx/benchmarks/variant_visit_3.bench.cpp; libcxx/include/__algorithm/adjacent_find.h; libcxx/include/__algorithm/all_of.h; libcxx/include/__algorithm/any_of.h; libcxx/include/__algorithm/count.h; libcxx/include/__algorithm/count_if.h; libcxx/include/__algorithm/find.h; libcxx/include/__algorithm/find_first_of.h; libcxx/include/__algorithm/find_if.h; libcxx/include/__algorithm/find_if_not.h; libcxx/include/__algorithm/for_each.h; libcxx/include/__algorithm/for_each_n.h; libcxx/include/__algorithm/iter_swap.h; libcxx/include/__algorithm/mismatch.h; libcxx/include/__algorithm/none_of.h; libcxx/include/__algorithm/swap_ranges.h; libcxx/include/__compare/is_eq.h; libcxx/include/__filesystem/file_time_type.h; lib,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:159509,benchmark,benchmarks,159509,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,h; libclc/generic/include/math/clc_fma.h; libclc/generic/include/math/clc_fmod.h; libclc/generic/include/math/clc_hypot.h; libclc/generic/include/math/clc_ldexp.h; libclc/generic/include/math/clc_nextafter.h; libclc/generic/include/math/clc_pow.h; libclc/generic/include/math/clc_pown.h; libclc/generic/include/math/clc_powr.h; libclc/generic/include/math/clc_remainder.h; libclc/generic/include/math/clc_remquo.h; libclc/generic/include/math/clc_rootn.h; libclc/generic/include/math/clc_sqrt.h; libclc/generic/include/math/clc_tan.h; libclc/generic/include/math/clc_tanpi.h; libclc/generic/lib/math/ep_log.h; libcxx/benchmarks/format.bench.cpp; libcxx/benchmarks/formatted_size.bench.cpp; libcxx/benchmarks/formatter_float.bench.cpp; libcxx/benchmarks/format_to.bench.cpp; libcxx/benchmarks/format_to_n.bench.cpp; libcxx/benchmarks/to_chars.bench.cpp; libcxx/benchmarks/util_smartptr.bench.cpp; libcxx/benchmarks/variant_visit_1.bench.cpp; libcxx/benchmarks/variant_visit_2.bench.cpp; libcxx/benchmarks/variant_visit_3.bench.cpp; libcxx/include/__algorithm/adjacent_find.h; libcxx/include/__algorithm/all_of.h; libcxx/include/__algorithm/any_of.h; libcxx/include/__algorithm/count.h; libcxx/include/__algorithm/count_if.h; libcxx/include/__algorithm/find.h; libcxx/include/__algorithm/find_first_of.h; libcxx/include/__algorithm/find_if.h; libcxx/include/__algorithm/find_if_not.h; libcxx/include/__algorithm/for_each.h; libcxx/include/__algorithm/for_each_n.h; libcxx/include/__algorithm/iter_swap.h; libcxx/include/__algorithm/mismatch.h; libcxx/include/__algorithm/none_of.h; libcxx/include/__algorithm/swap_ranges.h; libcxx/include/__compare/is_eq.h; libcxx/include/__filesystem/file_time_type.h; libcxx/include/__filesystem/file_type.h; libcxx/include/__filesystem/space_info.h; libcxx/include/__format/formatter_floating_point.h; libcxx/include/__format/formatter_pointer.h; libcxx/include/__memory/voidify.h; libcxx/include/__numeric/exclusive_scan.h; libcxx/include/__numeric/inclusive_scan.h,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:159805,benchmark,benchmarks,159805,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,h; lldb/tools/debugserver/source/MacOSX/MachThread.cpp; lldb/tools/debugserver/source/MacOSX/MachThread.h; lldb/tools/debugserver/source/MacOSX/MachThreadList.h; lldb/tools/debugserver/source/MacOSX/MachVMMemory.h; lldb/tools/debugserver/source/MacOSX/MachVMRegion.cpp; lldb/tools/debugserver/source/MacOSX/MachVMRegion.h; lldb/tools/debugserver/source/MacOSX/OsLogger.h; lldb/tools/debugserver/source/MacOSX/arm/DNBArchImpl.h; lldb/tools/debugserver/source/MacOSX/arm64/DNBArchImplARM64.h; lldb/tools/driver/Driver.cpp; lldb/tools/driver/Driver.h; lldb/tools/driver/Platform.cpp; lldb/tools/driver/Platform.h; lldb/tools/intel-features/cli-wrapper.cpp; lldb/tools/intel-features/intel-mpx/cli-wrapper-mpxtable.h; lldb/tools/lldb-instr/Instrument.cpp; lldb/tools/lldb-server/Acceptor.h; lldb/tools/lldb-server/LLDBServerUtilities.cpp; lldb/tools/lldb-server/SystemInitializerLLGS.cpp; lldb/tools/lldb-server/SystemInitializerLLGS.h; lldb/tools/lldb-test/SystemInitializerTest.cpp; lldb/tools/lldb-test/SystemInitializerTest.h; lldb/tools/lldb-vscode/BreakpointBase.cpp; lldb/tools/lldb-vscode/BreakpointBase.h; lldb/tools/lldb-vscode/ExceptionBreakpoint.cpp; lldb/tools/lldb-vscode/ExceptionBreakpoint.h; lldb/tools/lldb-vscode/FifoFiles.cpp; lldb/tools/lldb-vscode/FifoFiles.h; lldb/tools/lldb-vscode/FunctionBreakpoint.cpp; lldb/tools/lldb-vscode/FunctionBreakpoint.h; lldb/tools/lldb-vscode/IOStream.cpp; lldb/tools/lldb-vscode/IOStream.h; lldb/tools/lldb-vscode/JSONUtils.cpp; lldb/tools/lldb-vscode/JSONUtils.h; lldb/tools/lldb-vscode/lldb-vscode.cpp; lldb/tools/lldb-vscode/LLDBUtils.cpp; lldb/tools/lldb-vscode/LLDBUtils.h; lldb/tools/lldb-vscode/OutputRedirector.cpp; lldb/tools/lldb-vscode/OutputRedirector.h; lldb/tools/lldb-vscode/RunInTerminal.cpp; lldb/tools/lldb-vscode/RunInTerminal.h; lldb/tools/lldb-vscode/SourceBreakpoint.cpp; lldb/tools/lldb-vscode/SourceBreakpoint.h; lldb/tools/lldb-vscode/SourceReference.h; lldb/tools/lldb-vscode/VSCode.h; lldb/tools/lldb-vscode/VSCodeForward,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:227018,test,test,227018,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['test']
Testability,"hCore; ); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET testTOffsetGeneration POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/libElementStructDict_rdict.pcm; ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libElementStructDict_rdict.pcm); endif(); target_include_directories(testTOffsetGeneration PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}); ROOT_STANDARD_LIBRARY_PACKAGE(SillyStruct NO_INSTALL_HEADERS HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/SillyStruct.h SOURCES SillyStruct.cxx LINKDEF SillyStructLinkDef.h DEPENDENCIES RIO); ROOT_ADD_GTEST(testBulkApi BulkApi.cxx LIBRARIES RIO Tree TreePlayer); #FIXME: tests are having timeout on 32bit CERN VM (in docker container everything is fine),; # to be reverted after investigation.; if(NOT CMAKE_SIZEOF_VOID_P EQUAL 4); ROOT_ADD_GTEST(testBulkApiMultiple BulkApiMultiple.cxx LIBRARIES RIO Tree TreePlayer TIMEOUT 3000); ROOT_ADD_GTEST(testBulkApiVarLength BulkApiVarLength.cxx LIBRARIES RIO Tree TreePlayer); ROOT_ADD_GTEST(testBulkApiSillyStruct BulkApiSillyStruct.cxx LIBRARIES RIO Tree TreePlayer SillyStruct); endif(); ROOT_ADD_GTEST(testTBasket TBasket.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(testTBranch TBranch.cxx LIBRARIES RIO Tree MathCore); ROOT_ADD_GTEST(testTIOFeatures TIOFeatures.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(testTTreeCluster TTreeClusterTest.cxx LIBRARIES RIO Tree MathCore); ROOT_ADD_GTEST(testTChainParsing TChainParsing.cxx LIBRARIES RIO Tree); if(imt); ROOT_ADD_GTEST(testTTreeImplicitMT ImplicitMT.cxx LIBRARIES RIO Tree); endif(); ROOT_ADD_GTEST(testTChainSaveAsCxx TChainSaveAsCxx.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(testTChainRegressions TChainRegressions.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(testTTreeTruncatedDatatypes TTreeTruncatedDatatypes.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(testTTreeRegressions TTreeRegressions.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(entrylist_addsublist entrylist_addsublist.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(chain_setentrylist chain_setentry",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/CMakeLists.txt:1441,test,testBulkApiSillyStruct,1441,tree/tree/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/CMakeLists.txt,1,['test'],['testBulkApiSillyStruct']
Testability,hMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classification COMMAND testPyKerasClassification DEPENDS ${PyMVA-Keras-Classification-depends}). # Test PyKeras: Regression; if (NOT ROOT_ARCHITECTURE MATCHES macosx); #veto also keras tutorial on macos due to issue in disabling eager execution on macos; ROOT_EXECUTABLE(testPyKerasRegression testPyKerasRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Regression COMMAND testPyKerasRegression DEPENDS ${PyMVA-Keras-Regression-depends}); endif(). # Test PyKeras: Multi-class classification; ROOT_EXECUTABLE(testPyKerasMulticlass testPyKerasMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Multiclass COMMAND testPyKerasMulticlass DEPENDS ${PyMVA-Keras-Multiclass-depends}). ROOT_ADD_GTEST(TestRModelParserKeras TestRModelParserKeras.C; LIBRARIES; ROOTTMVASofie; PyMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserKeras ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (P,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:4429,test,testPyKerasClassification,4429,tmva/pymva/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt,1,['test'],['testPyKerasClassification']
Testability,"ha_optim; // optimization of convergence coefficients, possible values are:; // FIT2_ALPHA_HALVING, FIT2_ALPHA_OPTIMAL; int power; // possible values are: FIT21_FIT_POWER2,4,6,8,10,12; int fit_taylor; // order of Taylor expansion, possible values are:; // FIT2_TAYLOR_ORDER_FIRST,; // FIT2_TAYLOR_ORDER_SECOND; double position_init_x[MAX_NUMBER_OF_PEAKS2]; // initial values of x positions of 2D peaks, input parameters; double position_calc_x[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitted x positions of 2D peaks, output parameters; double position_err_x[MAX_NUMBER_OF_PEAKS2]; // x position errors of 2D peaks; bool fix_position_x[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix the appropriate x positions of 2D peaks (not fit). However, they are present in the estimated functional; double position_init_y[MAX_NUMBER_OF_PEAKS2]; // initial values of y positions of 2D peaks, input parameters; double position_calc_y[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitted y positions of 2D peaks, output parameters; double position_err_y[MAX_NUMBER_OF_PEAKS2]; // y position errors of 2D peaks; bool fix_position_y[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix the appropriate y positions of 2D peaks (not fit). However, they are present in the estimated functional; double position_init_x1[MAX_NUMBER_OF_PEAKS2]; // initial values of x positions of 1D ridges, input parameters; double position_calc_x1[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitted x positions of 1D ridges, output parameters; double position_err_x1[MAX_NUMBER_OF_PEAKS2]; // x position errors of 1D ridges; bool fix_position_x1[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix appropriate x positions of 1D ridges (not fit). However, they are present in the estimated functional; double position_init_y1[MAX_NUMBER_OF_PEAKS2]; // initial values of y positions of 1D ridges, input parameters; double position_calc_y1[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitted y pos",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/spectrum/Spectrum.md:50857,log,logical,50857,documentation/spectrum/Spectrum.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/spectrum/Spectrum.md,1,['log'],['logical']
Testability,"hain/arm-linux-gnueabihf/libc``. In this example we will be adding all of the command line options to both; ``CMAKE_C_FLAGS`` and ``CMAKE_ASM_FLAGS``. There are cmake flags to pass some of; these options individually which can be used to simplify the ``build-c-flags``:. * ``-DCMAKE_C_COMPILER_TARGET=""arm-linux-gnueabihf""``; * ``-DCMAKE_ASM_COMPILER_TARGET=""arm-linux-gnueabihf""``; * ``-DCMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN=/path/to/dir/toolchain``; * ``-DCMAKE_SYSROOT=/path/to/dir/toolchain/arm-linux-gnueabihf/libc``. Once cmake has completed the builtins can be built with ``ninja builtins``. Testing compiler-rt builtins using qemu-arm; ===========================================; To test the builtins library we need to add a few more cmake flags to enable; testing and set up the compiler and flags for test case. We must also tell; cmake that we wish to run the tests on ``qemu-arm``. * ``-DCOMPILER_RT_EMULATOR=""qemu-arm -L /path/to/armhf/sysroot``; * ``-DCOMPILER_RT_INCLUDE_TESTS=ON``; * ``-DCOMPILER_RT_TEST_COMPILER=""/path/to/clang""``; * ``-DCOMPILER_RT_TEST_COMPILER_CFLAGS=""test-c-flags""``. The ``/path/to/armhf/sysroot`` should be the same as the one passed to; ``--sysroot`` in the ""build-c-flags"". The ""test-c-flags"" need to include the target, architecture, gcc-toolchain,; sysroot and arm/thumb state. The additional cmake defines such as; ``CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN`` do not apply when building the tests. If; you have put all of these in ""build-c-flags"" then these can be repeated. If you; wish to use lld to link the tests then add ``""-fuse-ld=lld``. Once cmake has completed the tests can be built and run using; ``ninja check-builtins``. Troubleshooting; ===============. The cmake try compile stage fails; ---------------------------------; At an early stage cmake will attempt to compile and link a simple C program to; test if the toolchain is working. This stage can often fail at link time if the ``--sysroot=`` and; ``--gcc-toolchain=`` options are not pass",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst:5151,test,test-c-flags,5151,interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst,1,['test'],['test-c-flags']
Testability,"har *argv[]) {; function_to_test():; return 0;; }. Under normal circumstances these objects could not be linked together:; ``function_to_test`` is static and could not be resolved outside; ``test_code.o``, the two ``function_to_mock`` functions would result in a; duplicate definition error, and ``irrelevant_external`` is undefined.; However, using ``-harness`` and ``-phony-externals`` we can run this code; with:. .. code-block:: sh. % clang -c -o test_code_harness.o test_code_harness.c; % llvm-jitlink -phony-externals test_code.o -harness test_code_harness.o; used mock utility function; Y is 42. The ``-harness`` option may be of interest to people who want to perform some; very late testing on build products to verify that compiled code behaves as; expected. On basic C test cases this is relatively straightforward. Mocks for; more complicated languages (e.g. C++) are much trickier: Any code involving; classes tends to have a lot of non-trivial surface area (e.g. vtables) that; would require great care to mock. Tips for JITLink backend developers; -----------------------------------. #. Make liberal use of assert and ``llvm::Error``. Do *not* assume that the input; object is well formed: Return any errors produced by libObject (or your own; object parsing code) and validate as you construct. Think carefully about the; distinction between contract (which should be validated with asserts and; llvm_unreachable) and environmental errors (which should generate; ``llvm::Error`` instances). #. Don't assume you're linking in-process. Use libSupport's sized,; endian-specific types when reading/writing content in the ``LinkGraph``. As a ""minimum viable"" JITLink wrapper, the ``llvm-jitlink`` tool is an; invaluable resource for developers bringing in a new JITLink backend. A standard; workflow is to start by throwing an unsupported object at the tool and seeing; what error is returned, then fixing that (you can often make a reasonable guess; at what should be done based on existi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/JITLink.rst:42842,mock,mock,42842,interpreter/llvm-project/llvm/docs/JITLink.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/JITLink.rst,1,['mock'],['mock']
Testability,"hat can convey extra information about the code to the optimizers and; code generator. One example application of metadata is source-level; debug information. There are two metadata primitives: strings and nodes. Metadata does not have a type, and is not a value. If referenced from a; ``call`` instruction, it uses the ``metadata`` type. All metadata are identified in syntax by an exclamation point ('``!``'). .. _metadata-string:. Metadata Nodes and Metadata Strings; -----------------------------------. A metadata string is a string surrounded by double quotes. It can; contain any character by escaping non-printable characters with; ""``\xx``"" where ""``xx``"" is the two digit hex code. For example:; ""``!""test\00""``"". Metadata nodes are represented with notation similar to structure; constants (a comma separated list of elements, surrounded by braces and; preceded by an exclamation point). Metadata nodes can have any values as; their operand. For example:. .. code-block:: llvm. !{ !""test\00"", i32 10}. Metadata nodes that aren't uniqued use the ``distinct`` keyword. For example:. .. code-block:: text. !0 = distinct !{!""test\00"", i32 10}. ``distinct`` nodes are useful when nodes shouldn't be merged based on their; content. They can also occur when transformations cause uniquing collisions; when metadata operands change. A :ref:`named metadata <namedmetadatastructure>` is a collection of; metadata nodes, which can be looked up in the module symbol table. For; example:. .. code-block:: llvm. !foo = !{!4, !3}. Metadata can be used as function arguments. Here the ``llvm.dbg.value``; intrinsic is using three metadata arguments:. .. code-block:: llvm. call void @llvm.dbg.value(metadata !24, metadata !25, metadata !26). Metadata can be attached to an instruction. Here metadata ``!21`` is attached; to the ``add`` instruction using the ``!dbg`` identifier:. .. code-block:: llvm. %indvar.next = add i64 %indvar, 1, !dbg !21. Instructions may not have multiple metadata attachments wi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:243610,test,test,243610,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"hat rules can be added to. If multiple opcodes are given, they are; all permanently bound to the same ruleset. The rules in a ruleset are executed; from top to bottom and will start again from the top if an instruction is; legalized as a result of the rules. If the ruleset is exhausted without; satisfying any rule, then it is considered unsupported. When it doesn't declare the instruction legal, each pass over the rules may; request that one type changes to another type. Sometimes this can cause multiple; types to change but we avoid this as much as possible as making multiple changes; can make it difficult to avoid infinite loops where, for example, narrowing one; type causes another to be too small and widening that type causes the first one; to be too big. In general, it's advisable to declare instructions legal as close to the top of; the rule as possible and to place any expensive rules as low as possible. This; helps with performance as testing for legality happens more often than; legalization and legalization can require multiple passes over the rules. As a concrete example, consider the rule::. getActionDefinitionsBuilder({G_ADD, G_SUB, G_MUL, G_AND, G_OR, G_XOR, G_SHL}); .legalFor({s32, s64, v2s32, v4s32, v2s64}); .clampScalar(0, s32, s64); .widenScalarToNextPow2(0);. and the instruction::. %2:_(s7) = G_ADD %0:_(s7), %1:_(s7). this doesn't meet the predicate for the :ref:`.legalFor() <legalfor>` as ``s7``; is not one of the listed types so it falls through to the; :ref:`.clampScalar() <clampscalar>`. It does meet the predicate for this rule; as the type is smaller than the ``s32`` and this rule instructs the legalizer; to change type 0 to ``s32``. It then restarts from the top. This time it does; satisfy ``.legalFor()`` and the resulting output is::. %3:_(s32) = G_ANYEXT %0:_(s7); %4:_(s32) = G_ANYEXT %1:_(s7); %5:_(s32) = G_ADD %3:_(s32), %4:_(s32); %2:_(s7) = G_TRUNC %5:_(s32). where the ``G_ADD`` is legal and the other instructions are scheduled for; pr",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GlobalISel/Legalizer.rst:4879,test,testing,4879,interpreter/llvm-project/llvm/docs/GlobalISel/Legalizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GlobalISel/Legalizer.rst,1,['test'],['testing']
Testability,"hat the builtins can be linked; into a binary and execute the tests correctly but it will not catch if the; builtins use instructions that are supported on Armv7-A but not Armv6-M,; Armv7-M and Armv7E-M. To get the cmake compile test to pass you will need to pass the libraries; needed to successfully link the cmake test via ``CMAKE_CFLAGS``. It is; strongly recommended that you use version 3.6 or above of cmake so you can use; ``CMAKE_TRY_COMPILE_TARGET=STATIC_LIBRARY`` to skip the link step. * ``-DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY``; * ``-DCOMPILER_RT_OS_DIR=""baremetal""``; * ``-DCOMPILER_RT_BUILD_BUILTINS=ON``; * ``-DCOMPILER_RT_BUILD_SANITIZERS=OFF``; * ``-DCOMPILER_RT_BUILD_XRAY=OFF``; * ``-DCOMPILER_RT_BUILD_LIBFUZZER=OFF``; * ``-DCOMPILER_RT_BUILD_PROFILE=OFF``; * ``-DCMAKE_C_COMPILER=${host_install_dir}/bin/clang``; * ``-DCMAKE_C_COMPILER_TARGET=""your *-none-eabi target""``; * ``-DCMAKE_ASM_COMPILER_TARGET=""your *-none-eabi target""``; * ``-DCMAKE_AR=/path/to/llvm-ar``; * ``-DCMAKE_NM=/path/to/llvm-nm``; * ``-DCMAKE_RANLIB=/path/to/llvm-ranlib``; * ``-DCOMPILER_RT_BAREMETAL_BUILD=ON``; * ``-DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON``; * ``-DLLVM_CONFIG_PATH=/path/to/llvm-config``; * ``-DCMAKE_C_FLAGS=""build-c-flags""``; * ``-DCMAKE_ASM_FLAGS=""build-c-flags""``; * ``-DCOMPILER_RT_EMULATOR=""qemu-arm -L /path/to/armv7-A/sysroot""``; * ``-DCOMPILER_RT_INCLUDE_TESTS=ON``; * ``-DCOMPILER_RT_TEST_COMPILER=""/path/to/clang""``; * ``-DCOMPILER_RT_TEST_COMPILER_CFLAGS=""test-c-flags""``. The Armv6-M builtins will use the soft-float ABI. When compiling the tests for; Armv7-A we must include ``""-mthumb -mfloat-abi=soft -mfpu=none""`` in the; test-c-flags. We must use an Armv7-A soft-float abi sysroot for ``qemu-arm``. Depending on the linker used for the test cases you may encounter BuildAttribute; mismatches between the M-profile objects from compiler-rt and the A-profile; objects from the test. The lld linker does not check the profile; BuildAttribute so it can be used to lin",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst:11811,test,test-c-flags,11811,interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst,1,['test'],['test-c-flags']
Testability,"hat unglamorous position, but it is incredibly; important for the ongoing success of the project. Because people get busy,; interests change, and unexpected things happen, code ownership is purely opt-in,; and anyone can choose to resign their ""title"" at any time. For now, we do not; have an official policy on how one gets elected to be a code owner. .. _include a testcase:. Test Cases; ----------. Developers are required to create test cases for any bugs fixed and any new; features added. Some tips for getting your testcase approved:. * All feature and regression test cases are added to the ``llvm/test``; directory. The appropriate sub-directory should be selected (see the; :doc:`Testing Guide <TestingGuide>` for details). * Test cases should be written in :doc:`LLVM assembly language <LangRef>`. * Test cases, especially for regressions, should be reduced as much as possible,; by :doc:`bugpoint <Bugpoint>` or manually. It is unacceptable to place an; entire failing program into ``llvm/test`` as this creates a *time-to-test*; burden on all developers. Please keep them short. * Avoid adding links to resources that are not available to the entire; community, such as links to private bug trackers, internal corporate; documentation, etc. Instead, add sufficient comments to the test to provide; the context behind such links. Note that llvm/test and clang/test are designed for regression and small feature; tests only. More extensive test cases (e.g., entire applications, benchmarks,; etc) should be added to the ``llvm-test`` test suite. The llvm-test suite is; for coverage (correctness, performance, etc) testing, not feature or regression; testing. Release Notes; -------------. Many projects in LLVM communicate important changes to users through release; notes, typically found in ``docs/ReleaseNotes.rst`` for the project. Changes to; a project that are user-facing, or that users may wish to know about, should be; added to the project's release notes at the author's or cod",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst:10111,test,test,10111,interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,2,['test'],['test']
Testability,"have a brand new shiny pass, we can build :program:`opt` and use; it to run some LLVM IR through the pass. .. code-block:: console. $ ninja -C build/ opt; # or whatever build system/build directory you are using. $ cat /tmp/a.ll; define i32 @foo() {; %a = add i32 2, 3; ret i32 %a; }. define void @bar() {; ret void; }. $ build/bin/opt -disable-output /tmp/a.ll -passes=helloworld; foo; bar. Our pass ran and printed the names of functions as expected!. Testing a pass; --------------. Testing our pass is important to prevent future regressions. We'll add a lit; test at ``llvm/test/Transforms/Utils/helloworld.ll``. See; :doc:`TestingGuide` for more information on testing. .. code-block:: llvm. $ cat llvm/test/Transforms/Utils/helloworld.ll; ; RUN: opt -disable-output -passes=helloworld %s 2>&1 | FileCheck %s. ; CHECK: {{^}}foo{{$}}; define i32 @foo() {; %a = add i32 2, 3; ret i32 %a; }. ; CHECK-NEXT: {{^}}bar{{$}}; define void @bar() {; ret void; }. $ ninja -C build check-llvm; # runs our new test alongside all other llvm lit tests. FAQs; ====. Required passes; ---------------. A pass that defines a static ``isRequired()`` method that returns true is a required pass. For example:. .. code-block:: c++. class HelloWorldPass : public PassInfoMixin<HelloWorldPass> {; public:; PreservedAnalyses run(Function &F, FunctionAnalysisManager &AM);. static bool isRequired() { return true; }; };. A required pass is a pass that may not be skipped. An example of a required; pass is ``AlwaysInlinerPass``, which must always be run to preserve; ``alwaysinline`` semantics. Pass managers are required since they may contain; other required passes. An example of how a pass can be skipped is the ``optnone`` function; attribute, which specifies that optimizations should not be run on the; function. Required passes will still be run on ``optnone`` functions. For more implementation details, see; ``PassInstrumentation::runBeforePass()``. Registering passes as plugins; -----------------------------.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/WritingAnLLVMNewPMPass.rst:6366,test,test,6366,interpreter/llvm-project/llvm/docs/WritingAnLLVMNewPMPass.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/WritingAnLLVMNewPMPass.rst,2,['test'],"['test', 'tests']"
Testability,"have been identified; through years of use: confusing to use, slow, it doesn’t always produce high; quality test cases, etc. This document proposes a new approach with a narrower; focus: minimization of IR test cases. ## Proposed New Design. ### Narrow focus: test-case reduction; The main focus will be a code reduction strategy to obtain much smaller test; cases that still have the same property as the original one. This will be done; via classic delta debugging and by adding some IR-specific reductions (e.g.; replacing globals, removing unused instructions, etc), similar to what; already exists, but with more in-depth minimization. Granted, if the community differs on this proposal, the legacy code could still; be present in the tool, but with the caveat of still being documented and; designed towards delta reduction. ### Command-Line Options; We are proposing to reduce the plethora of bugpoint’s options to just two: an; interesting-ness test and the arguments for said test, similar to other delta; reduction tools such as CReduce, Delta, and Lithium; the tool should feel less; cluttered, and there should also be no uncertainty about how to operate it. The interesting-ness test that’s going to be run to reduce the code is given; by name:; `--test=<test_name>`; If a `--test` option is not given, the program exits; this option is similar; to bugpoint’s current `-compile-custom` option, which lets the user run a; custom script. The interesting-ness test would be defined as a script that returns 0 when the; IR achieves a user-defined behaviour (e.g. failure to compile on clang) and a; nonzero value when otherwise. Leaving the user the freedom to determine what is; and isn’t interesting to the tool, and thus, streamlining the process of; reducing a test-case. If the test accepts any arguments (excluding the input ll/bc file), they are; given via the following flag:; `--test_args=<test_arguments>`; If unspecified, the test is run as given. It’s worth noting that the input",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/BugpointRedesign.md:1126,test,test,1126,interpreter/llvm-project/llvm/docs/BugpointRedesign.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/BugpointRedesign.md,2,['test'],['test']
Testability,"have its problems addressed; in a timely manner. Code in this tier must **not**:; * Break or invalidate core tier code or infrastructure. If that happens; accidentally, reverting functionality and working on the issues offline; is the only acceptable course of action.; * Negatively affect development of core tier code, with the sub-community; involved responsible for making changes to address specific concerns.; * Negatively affect other peripheral tier code, with the sub-communities; involved tasked to resolve the issues, still making sure the solution doesn't; break or invalidate the core tier.; * Impose sub-optimal implementation strategies on core tier components as a; result of idiosyncrasies in the peripheral component.; * Have build infrastructure that spams all developers about their breakages.; * Fall into disrepair. This is a reflection of lack of an active sub-community; and will result in removal. Code in this tier should:; * Have infrastructure to test, whenever meaningful, with either no warnings or; notification contained within the sub-community.; * Have support and testing that scales with the complexity and resilience of; the component, with the bar for simple and gracefully-degrading components; (such as editor bindings) much lower than for complex components that must; remain fresh with HEAD (such as experimental back-ends or alternative build; systems).; * Have a document making clear the status of implementation, level of support; available, who the sub-community is and, if applicable, roadmap for inclusion; into the core tier.; * Be restricted to a specific directory or have a consistent pattern (ex.; unique file suffix), making it easy to remove when necessary. Inclusion Policy; ================. To add a new peripheral component, send an RFC to the appropriate dev list; proposing its addition and explaining how it will meet the support requirements; listed above. Different types of components could require different levels of; detail. when i",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SupportPolicy.rst:5929,test,test,5929,interpreter/llvm-project/llvm/docs/SupportPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SupportPolicy.rst,1,['test'],['test']
Testability,"he '``llvm.log.*``' intrinsics compute the base-e logarithm of the specified; value. Arguments:; """""""""""""""""""". The argument and return value are floating-point numbers of the same type. Semantics:; """""""""""""""""""". Return the same value as a corresponding libm '``log``' function but without; trapping or setting ``errno``. When specified with the fast-math-flag 'afn', the result may be approximated; using a less accurate calculation. .. _int_log10:. '``llvm.log10.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. You can use ``llvm.log10`` on any; floating-point or vector of floating-point type. Not all targets support; all types however. ::. declare float @llvm.log10.f32(float %Val); declare double @llvm.log10.f64(double %Val); declare x86_fp80 @llvm.log10.f80(x86_fp80 %Val); declare fp128 @llvm.log10.f128(fp128 %Val); declare ppc_fp128 @llvm.log10.ppcf128(ppc_fp128 %Val). Overview:; """""""""""""""""". The '``llvm.log10.*``' intrinsics compute the base-10 logarithm of the; specified value. Arguments:; """""""""""""""""""". The argument and return value are floating-point numbers of the same type. Semantics:; """""""""""""""""""". Return the same value as a corresponding libm '``log10``' function but without; trapping or setting ``errno``. When specified with the fast-math-flag 'afn', the result may be approximated; using a less accurate calculation. .. _int_log2:. '``llvm.log2.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. You can use ``llvm.log2`` on any; floating-point or vector of floating-point type. Not all targets support; all types however. ::. declare float @llvm.log2.f32(float %Val); declare double @llvm.log2.f64(double %Val); declare x86_fp80 @llvm.log2.f80(x86_fp80 %Val); declare fp128 @llvm.log2.f128(fp128 %Val); declare ppc_fp128 @llvm.log2.ppcf128(ppc_fp128 %Val). Overview:; """""""""""""""""". The '``llvm.log2.*``' intrinsics compute the base-2 logarithm of the specified; value. Arguments:; """"""""""""""""""""",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:569012,log,logarithm,569012,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['log'],['logarithm']
Testability,"he :program:`lit` testing architecture for users interested in; creating a new :program:`lit` testing implementation, or extending an existing one. :program:`lit` proper is primarily an infrastructure for discovering and running; arbitrary tests, and to expose a single convenient interface to these; tests. :program:`lit` itself doesn't know how to run tests, rather this logic is; defined by *test suites*. TEST SUITES; ~~~~~~~~~~~. As described in :ref:`test-discovery`, tests are always located inside a *test; suite*. Test suites serve to define the format of the tests they contain, the; logic for finding those tests, and any additional information to run the tests. :program:`lit` identifies test suites as directories containing ``lit.cfg`` or; ``lit.site.cfg`` files (see also :option:`--config-prefix`). Test suites are; initially discovered by recursively searching up the directory hierarchy for; all the input files passed on the command line. You can use; :option:`--show-suites` to display the discovered test suites at startup. Once a test suite is discovered, its config file is loaded. Config files; themselves are Python modules which will be executed. When the config file is; executed, two important global variables are predefined:. **lit_config**. The global **lit** configuration object (a *LitConfig* instance), which defines; the builtin test formats, global configuration parameters, and other helper; routines for implementing test configurations. **config**. This is the config object (a *TestingConfig* instance) for the test suite,; which the config file is expected to populate. The following variables are also; available on the *config* object, some of which must be set by the config and; others are optional or predefined:. **name** *[required]* The name of the test suite, for use in reports and; diagnostics. **test_format** *[required]* The test format object which will be used to; discover and run tests in the test suite. Generally this will be a builtin tes",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:14758,test,test,14758,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"he :token:`IfBody` of the then and else arms of the ``if`` establish an; inner scope. Any ``defvar`` variables defined in the bodies go out of scope; when the bodies are finished (see `Defvar in a Record Body`_ for more details). The ``if`` statement can also be used in a record :token:`Body`. ``assert`` --- check that a condition is true; ---------------------------------------------. The ``assert`` statement checks a boolean condition to be sure that it is true; and prints an error message if it is not. .. productionlist::; Assert: ""assert"" `condition` "","" `message` "";"". If the boolean condition is true, the statement does nothing. If the; condition is false, it prints a nonfatal error message. The **message**, which; can be an arbitrary string expression, is included in the error message as a; note. The exact behavior of the ``assert`` statement depends on its; placement. * At top level, the assertion is checked immediately. * In a record definition, the statement is saved and all assertions are; checked after the record is completely built. * In a class definition, the assertions are saved and inherited by all; the subclasses and records that inherit from the class. The assertions are; then checked when the records are completely built. * In a multiclass definition, the assertions are saved with the other; components of the multiclass and then checked each time the multiclass; is instantiated with ``defm``. Using assertions in TableGen files can simplify record checking in TableGen; backends. Here is an example of an ``assert`` in two class definitions. .. code-block:: text. class PersonName<string name> {; assert !le(!size(name), 32), ""person name is too long: "" # name;; string Name = name;; }. class Person<string name, int age> : PersonName<name> {; assert !and(!ge(age, 1), !le(age, 120)), ""person age is invalid: "" # age;; int Age = age;; }. def Rec20 : Person<""Donald Knuth"", 60> {; ...; }. Additional Details; ==================. Directed acyclic graphs (DAGs);",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:49546,assert,assertions,49546,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,1,['assert'],['assertions']
Testability,"he C library function 'fesetmode', however this function does not; read the set of control modes from memory but gets it as integer value. '``llvm.reset.fpmode``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare void @llvm.reset.fpmode(). Overview:; """""""""""""""""". The '``llvm.reset.fpmode``' intrinsic sets the default dynamic floating-point; control modes. Arguments:; """""""""""""""""""". None. Semantics:; """""""""""""""""""". The '``llvm.reset.fpmode``' intrinsic sets the current dynamic floating-point; environment to default state. It is similar to the C library function call; 'fesetmode(FE_DFL_MODE)', however this function does not return any value. Floating-Point Test Intrinsics; ------------------------------. These functions get properties of floating-point values. .. _llvm.is.fpclass:. '``llvm.is.fpclass``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare i1 @llvm.is.fpclass(<fptype> <op>, i32 <test>); declare <N x i1> @llvm.is.fpclass(<vector-fptype> <op>, i32 <test>). Overview:; """""""""""""""""". The '``llvm.is.fpclass``' intrinsic returns a boolean value or vector of boolean; values depending on whether the first argument satisfies the test specified by; the second argument. If the first argument is a floating-point scalar, then the result type is a; boolean (:ref:`i1 <t_integer>`). If the first argument is a floating-point vector, then the result type is a; vector of boolean with the same number of elements as the first argument. Arguments:; """""""""""""""""""". The first argument to the '``llvm.is.fpclass``' intrinsic must be; :ref:`floating-point <t_floating>` or :ref:`vector <t_vector>`; of floating-point values. The second argument specifies, which tests to perform. It must be a compile-time; integer constant, each bit in which specifies floating-point class:. +-------+----------------------+; | Bit # | floating-point class |; +=======+======================+; | 0 | Signaling NaN |; +-------+----------------------+; | 1 | Quiet NaN |; +-",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:921507,test,test,921507,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"he MIR files are target dependent, so they have to be placed in the target; specific test directories (``lib/CodeGen/TARGETNAME``). They also need to; specify a target triple or a target architecture either in the run line or in; the embedded LLVM IR module. Simplifying MIR files; ^^^^^^^^^^^^^^^^^^^^^. The MIR code coming out of ``-stop-after``/``-stop-before`` is very verbose;; Tests are more accessible and future proof when simplified:. - Use the ``-simplify-mir`` option with llc. - Machine function attributes often have default values or the test works just; as well with default values. Typical candidates for this are: `alignment:`,; `exposesReturnsTwice`, `legalized`, `regBankSelected`, `selected`.; The whole `frameInfo` section is often unnecessary if there is no special; frame usage in the function. `tracksRegLiveness` on the other hand is often; necessary for some passes that care about block livein lists. - The (global) `liveins:` list is typically only interesting for early; instruction selection passes and can be removed when testing later passes.; The per-block `liveins:` on the other hand are necessary if; `tracksRegLiveness` is true. - Branch probability data in block `successors:` lists can be dropped if the; test doesn't depend on it. Example:; `successors: %bb.1(0x40000000), %bb.2(0x40000000)` can be replaced with; `successors: %bb.1, %bb.2`. - MIR code contains a whole IR module. This is necessary because there are; no equivalents in MIR for global variables, references to external functions,; function attributes, metadata, debug info. Instead some MIR data references; the IR constructs. You can often remove them if the test doesn't depend on; them. - Alias Analysis is performed on IR values. These are referenced by memory; operands in MIR. Example: `:: (load 8 from %ir.foobar, !alias.scope !9)`.; If the test doesn't depend on (good) alias analysis the references can be; dropped: `:: (load 8)`. - MIR blocks can reference IR blocks for debug printing",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MIRLangRef.rst:3758,test,testing,3758,interpreter/llvm-project/llvm/docs/MIRLangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MIRLangRef.rst,1,['test'],['testing']
Testability,"he ``@path/to/file.rsp`` syntax. Arguments read from a file must; be one per line and are treated as if they were in the same place as the; original file referencing argument on the command line. A response file can; reference other response files. Users interested in the :program:`lit` architecture or designing a; :program:`lit` testing implementation should see :ref:`lit-infrastructure`. GENERAL OPTIONS; ---------------. .. option:: -h, --help. Show the :program:`lit` help message. .. option:: -j N, --workers=N. Run ``N`` tests in parallel. By default, this is automatically chosen to; match the number of detected available CPUs. .. option:: --config-prefix=NAME. Search for :file:`{NAME}.cfg` and :file:`{NAME}.site.cfg` when searching for; test suites, instead of :file:`lit.cfg` and :file:`lit.site.cfg`. .. option:: -D NAME[=VALUE], --param NAME[=VALUE]. Add a user defined parameter ``NAME`` with the given ``VALUE`` (or the empty; string if not given). The meaning and use of these parameters is test suite; dependent. .. _output-options:. OUTPUT OPTIONS; --------------. .. option:: -q, --quiet. Suppress any output except for test failures. .. option:: -s, --succinct. Show less output, for example don't show information on tests that pass.; Also show a progress bar, unless ``--no-progress-bar`` is specified. .. option:: -v, --verbose. Show more information on test failures, for example the entire test output; instead of just the test result. Each command is printed before it is executed. This can be valuable for; debugging test failures, as the last printed command is the one that failed.; Moreover, :program:`lit` inserts ``'RUN: at line N'`` before each; command pipeline in the output to help you locate the source line of; the failed command. .. option:: -vv, --echo-all-commands. Deprecated alias for -v. .. option:: -a, --show-all. Enable -v, but for all tests not just failed tests. .. option:: --no-progress-bar. Do not use curses based progress bar. .. option:: --s",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:2938,test,test,2938,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"he ``TargetFrameLowering`` class; ---------------------------------. The ``TargetFrameLowering`` class is used to provide information about the stack; frame layout of the target. It holds the direction of stack growth, the known; stack alignment on entry to each function, and the offset to the local area.; The offset to the local area is the offset from the stack pointer on function; entry to the first location where function data (local variables, spill; locations) can be stored. The ``TargetSubtarget`` class; -----------------------------. The ``TargetSubtarget`` class is used to provide information about the specific; chip set being targeted. A sub-target informs code generation of which; instructions are supported, instruction latencies and instruction execution; itinerary; i.e., which processing units are used, in what order, and for how; long. The ``TargetJITInfo`` class; ---------------------------. The ``TargetJITInfo`` class exposes an abstract interface used by the; Just-In-Time code generator to perform target-specific activities, such as; emitting stubs. If a ``TargetMachine`` supports JIT code generation, it should; provide one of these objects through the ``getJITInfo`` method. .. _code being generated:; .. _machine code representation:. Machine code description classes; ================================. At the high-level, LLVM code is translated to a machine specific representation; formed out of :raw-html:`<tt>` `MachineFunction`_ :raw-html:`</tt>`,; :raw-html:`<tt>` `MachineBasicBlock`_ :raw-html:`</tt>`, and :raw-html:`<tt>`; `MachineInstr`_ :raw-html:`</tt>` instances (defined in; ``include/llvm/CodeGen``). This representation is completely target agnostic,; representing instructions in their most abstract form: an opcode and a series of; operands. This representation is designed to support both an SSA representation; for machine code, as well as a register allocated, non-SSA form. .. _MachineInstr:. The ``MachineInstr`` class; --------------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodeGenerator.rst:15000,stub,stubs,15000,interpreter/llvm-project/llvm/docs/CodeGenerator.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodeGenerator.rst,1,['stub'],['stubs']
Testability,"he action of opening/closing a file being; atomic with printing a page. Particularly if pages are being generated; in some loop, one needs to detect the special cases of first and last; page. The ""`[`"" and ""`]`"" can be used instead of ""`(`"" and ""`)`"" as; shown in the next example. ``` {.cpp}; c1.Print(""file.ps[""); // no actual print; just open file.ps; for (i=0; i<10; ++i) {; // fill canvas for context i; ...; c1.Print(""file.ps""); // actually print canvas to file.ps; } // end loop; c1.Print(""file.ps]""); // no actual print; just close file.ps; ```. The following script illustrates how to open a postscript file and draw; several pictures. The generation of a new postscript page is automatic; when **`TCanvas::Clear` is called by `object->Draw()`.**. ``` {.cpp}; {; TFile f(""hsimple.root"");; TCanvas c1(""c1"",""canvas"",800,600);. //select PostScript output type; Int_t type = 111; //portrait ps; // Int_t type = 112; //landscape ps; // Int_t type = 113; //eps. //create a PostScript file and set the paper size; TPostScript ps(""test.ps"",type);; ps.Range(16,24); //set x,y of printed page. //draw 3 histograms from file hsimple.root on separate pages; hpx->Draw();; c1.Update(); //force drawing in a script; hprof->Draw();; c1.Update();; hpx->Draw(""lego1"");; c1.Update();; ps.Close();; }; ```. The next example does the same:. ``` {.cpp}; {; TFile f(""hsimple.root"");; TCanvas c1(""c1"",""canvas"",800,600);. //set x,y of printed page; gStyle->SetPaperSize(16,24);. //draw 3 histograms from file hsimple.root on separate pages; hpx->Draw();; c1->Print(""test1.ps("", ""Portrait"");; hprof->Draw();; c1->Print(""test1.ps"");; hpx->Draw(""lego1"");; c1->Print(""test1.ps)"");; }; ```. This following example shows two pages. The canvas is divided.; `TPostScript::NewPage` must be called before starting a new picture.; `object->Draw` does not clear the canvas in this case because we clear; only the pads and not the main canvas. Note that `c1->Update` must be; called at the end of the first picture. ``` {.cpp}; {",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md:97402,test,test,97402,documentation/users-guide/Graphics.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md,1,['test'],['test']
Testability,"he boolean; expression is satisfied if any feature matches the regular expression. Regular; expressions can appear inside an identifier, so for example ``he{{l+}}o`` would match; ``helo``, ``hello``, ``helllo``, and so on.; - The default target triple, preceded by the string ``target=`` (for example,; ``target=x86_64-pc-windows-msvc``). Typically regular expressions are used; to match parts of the triple (for example, ``target={{.*}}-windows{{.*}}``; to match any Windows target triple). | ``REQUIRES`` enables the test if all expressions are true.; | ``UNSUPPORTED`` disables the test if any expression is true.; | ``XFAIL`` expects the test to fail if any expression is true. As a special case, ``XFAIL: *`` is expected to fail everywhere. .. code-block:: llvm. ; This test is disabled when running on Windows,; ; and is disabled when targeting Linux, except for Android Linux.; ; UNSUPPORTED: system-windows, target={{.*linux.*}} && !target={{.*android.*}}; ; This test is expected to fail when targeting PowerPC or running on Darwin.; ; XFAIL: target=powerpc{{.*}}, system-darwin. Tips for writing constraints; ----------------------------. **``REQUIRES`` and ``UNSUPPORTED``**. These are logical inverses. In principle, ``UNSUPPORTED`` isn't absolutely; necessary (the logical negation could be used with ``REQUIRES`` to get; exactly the same effect), but it can make these clauses easier to read and; understand. Generally, people use ``REQUIRES`` to state things that the test; depends on to operate correctly, and ``UNSUPPORTED`` to exclude cases where; the test is expected never to work. **``UNSUPPORTED`` and ``XFAIL``**. Both of these indicate that the test isn't expected to work; however, they; have different effects. ``UNSUPPORTED`` causes the test to be skipped;; this saves execution time, but then you'll never know whether the test; actually would start working. Conversely, ``XFAIL`` actually runs the test; but expects a failure output, taking extra execution time but alerti",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:21639,test,test,21639,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"he build, particularly the PGO_INSTRUMENT_LTO option. Setting this option to; Thin or Full will enable ThinLTO or full LTO respectively, further enhancing; the performance gains from a PGO build by enabling interprocedural; optimizations. For example, to run a CMake configuration for a PGO build; that also enables ThinTLO, use the following command:. .. code-block:: console. $ cmake -G Ninja -C <path to source>/clang/cmake/caches/PGO.cmake \; -DPGO_INSTRUMENT_LTO=Thin \; <path to source>/llvm. By default, clang will generate profile data by compiling a simple; hello world program. You can also tell clang use an external; project for generating profile data that may be a better fit for your; use case. The project you specify must either be a lit test suite; (use the CLANG_PGO_TRAINING_DATA option) or a CMake project (use the; CLANG_PERF_TRAINING_DATA_SOURCE_DIR option). For example, If you wanted to use the; `LLVM Test Suite <https://github.com/llvm/llvm-test-suite/>`_ to generate; profile data you would use the following command:. .. code-block:: console. $ cmake -G Ninja -C <path to source>/clang/cmake/caches/PGO.cmake \; -DBOOTSTRAP_CLANG_PGO_TRAINING_DATA_SOURCE_DIR=<path to llvm-test-suite> \; -DBOOTSTRAP_CLANG_PGO_TRAINING_DEPS=runtimes. The BOOTSTRAP\_ prefixes tells CMake to pass the variables on to the instrumented; stage two build. And the CLANG_PGO_TRAINING_DEPS option let's you specify; additional build targets to build before building the external project. The; LLVM Test Suite requires compiler-rt to build, so we need to add the; `runtimes` target as a dependency. After configuration, building the stage2-instrumented-generate-profdata target; will automatically build the stage1 compiler, build the instrumented compiler; with the stage1 compiler, and then run the instrumented compiler against the; perf training data:. .. code-block:: console. $ ninja stage2-instrumented-generate-profdata. If you let that run for a few hours or so, it will place a profdata",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AdvancedBuilds.rst:6665,test,test-suite,6665,interpreter/llvm-project/llvm/docs/AdvancedBuilds.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AdvancedBuilds.rst,1,['test'],['test-suite']
Testability,"he bumpallocators.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137933#inline-1389904. Use a standard (or LLVM) map with typeinfo (would need a specialization; to expose equality and hasher) for the allocators and the creation; functions could be a function template. //===----------------------------------------------------------------------===//; // Use a lit test instead of a unit test for the logical readers.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324376. As the DebugInfoLogicalView library is sufficiently exposed via the; llvm-debuginfo-analyzer tool, follow the LLVM general approach and; use LIT tests to validate the logical readers. Convert the unitests:; llvm-project/llvm/unittests/DebugInfo/LogicalView/CodeViewReaderTest.cpp; llvm-project/llvm/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp. into LIT tests:; llvm-project/llvm/test/DebugInfo/LogicalView/CodeViewReader.test; llvm-project/llvm/test/DebugInfo/LogicalView/ELFReader.test. //===----------------------------------------------------------------------===//; // Eliminate calls to 'getInputFileDirectory()' in the unit tests.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324359. Rewrite the unittests 'LFReaderTest' and 'CodeViewReaderTest'to eliminate; the call:. getInputFileDirectory(). as use of that call is discouraged. See: Use a lit test instead of a unit test for the logical readers. //===----------------------------------------------------------------------===//; // Fix mismatch between %d/%x format strings and uint64_t type.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137400; https://github.com/llvm/llvm-project/issues/58758. Incorrect printing of uint64_t on 32-bit platforms.; Add the PRIx64 specifier to the",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:1717,test,tests,1717,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,2,['test'],"['test', 'tests']"
Testability,"he file name without extension, with underscores; replaced by spaces. You can see an example of the module documentation including links, the; corresponding `index.html`, and the module class index at; <http://root.cern.ch/root/html/HIST_Index.html>. ## Converting Sources (and Other Files) to HTML. **`THtml`** can take a file (C++ or text) and convert it to HTML. There; are two main use cases:. The output of a **macro** converted to HTML will almost look like the; beautified source file of a class reference. The `Begin_Html/End_Html`; keywords are supported; comments, strings, and keywords are colored like; in **`THtml`**'s output for source code. The macro `Event.cxx` in `$ROOTSYS/test` can be seen as an example of; documented ROOT macros at; <http://root.cern.ch/root/html/examples/Event.cxx.html>. `THtml::Convert()`converts a single text file to HTML. For example, it; can be run on a change log. Each known class name will be linked to its; documentation page. An example is ROOT's change log at; <http://root.cern.ch/root/html/examples/V5.16.txt.html>. To convert the source file MyCode.C to HTML, you can run. ``` {.cpp}; root[] THtml h; root[] h.Convert(""MyCode.C"", ""Look At My Code"", ""htmlout/"");; ```. This will create the file `htmlout/MyCode.C.html`. The HTML page will; have the title ""Look At My Code"". ## Special Documentation Elements: Directives. A common documentation problem is the inclusion of images. They are; usually generated externally, which poses problems with where to keep; the images, and how to keep them up to date. **`THtml`** solves this by; offering a few special documentation elements: macro and latex; directives. ### Latex Directive. Documentation surrounded by the keywords `BEGIN_LATEX / END_LATEX` will; be passed to ROOT Latex engine **`TLatex`**. The keywords can be written; with small or capital letters (case insensitive). The output will be; stored to an image file, which gets automatically included in the; documentation. ``` {.cpp}; // Th",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/HTMLDoc.md:4853,log,log,4853,documentation/users-guide/HTMLDoc.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/HTMLDoc.md,1,['log'],['log']
Testability,"he first character. Example: ``.so`` (Linux), ``.dylib`` (macOS), ``.dll`` (Windows). ``%exeext``; The suffix for the host platforms executable files. This includes the; period as the first character. Example: ``.exe`` (Windows), empty on Linux. **Clang-specific substitutions:**. ``%clang``; Invokes the Clang driver. ``%clang_cpp``; Invokes the Clang driver for C++. ``%clang_cl``; Invokes the CL-compatible Clang driver. ``%clangxx``; Invokes the G++-compatible Clang driver. ``%clang_cc1``; Invokes the Clang frontend. ``%itanium_abi_triple``, ``%ms_abi_triple``; These substitutions can be used to get the current target triple adjusted to; the desired ABI. For example, if the test suite is running with the; ``i686-pc-win32`` target, ``%itanium_abi_triple`` will expand to; ``i686-pc-mingw32``. This allows a test to run with a specific ABI without; constraining it to a specific triple. **FileCheck-specific substitutions:**. ``%ProtectFileCheckOutput``; This should precede a ``FileCheck`` call if and only if the call's textual; output affects test results. It's usually easy to tell: just look for; redirection or piping of the ``FileCheck`` call's stdout or stderr. .. _Test-specific substitutions:. **Test-specific substitutions:**. Additional substitutions can be defined as follows:. - Lit configuration files (e.g., ``lit.cfg`` or ``lit.local.cfg``) can define; substitutions for all tests in a test directory. They do so by extending the; substitution list, ``config.substitutions``. Each item in the list is a tuple; consisting of a pattern and its replacement, which lit applies using python's; ``re.sub`` function.; - To define substitutions within a single test file, lit supports the; ``DEFINE:`` and ``REDEFINE:`` directives, described in detail below. So that; they have no effect on other test files, these directives modify a copy of the; substitution list that is produced by lit configuration files. For example, the following directives can be inserted into a test file t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:28389,test,test,28389,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"he forked repo; cd llvm-project. # Create a new branch; git switch -c my_change. # Create your changes; $EDITOR file.cpp. # Don't forget clang-format; git clang-format. # and don't forget running your tests; ninja check-llvm. # Commit, use a good commit message; git commit file.cpp. # Push your changes to your fork branch, be mindful of; # your remotes here, if you don't remember what points to your; # fork, use git remote -v to see. Usually origin points to your; # fork and upstream to llvm/llvm-project; git push origin my_change. Navigate to the URL printed to the console from the git push command in the last step.; Create a pull request from your branch to llvm::main. ::. # If you get any review comments, come back to the branch and; # adjust them.; git switch my_change; $EDITOR file.cpp. # Commit your changes; git commit file.cpp -m ""Code Review adjustments"". # Format changes; git clang-format HEAD~. # Recommit if any formatting changes; git commit -a --amend. # Re-run tests and make sure nothing broke.; ninja check. # Push your changes to your fork branch, be mindful of; # your remotes here, if you don't remember what points to your; # fork, use git remote -v to see. Usually origin points to your; # fork and upstream to llvm/llvm-project; git push origin my_change. Before merging the PR, it is recommended that you rebase locally and re-run test; checks:. ::. # Add upstream as a remote (if you don't have it already); git remote add upstream https://github.com/llvm/llvm-project.git. # Make sure you have all the latest changes; git fetch upstream && git rebase -i upstream/main. # Make sure tests pass with latest changes and your change; ninja check. # Push the rebased changes to your fork.; git push origin my_change -f. Once your PR is approved, rebased, and tests are passing, click `Squash and; Merge` on your PR in the GitHub web interface. See more in-depth information about how to contribute in the following documentation:. * :doc:`Contributing`; * :doc:`MyFirs",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GitHub.rst:11056,test,tests,11056,interpreter/llvm-project/llvm/docs/GitHub.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GitHub.rst,1,['test'],['tests']
Testability,"he load, we want to know whether any of; the dynamically executed predicates have been misspeculated. To track that,; along each conditional edge, we need to track the data which would allow that; edge to be taken. On x86, this data is stored in the flags register used by the; conditional jump instruction. Along both edges after this fork in control flow,; the flags register remains alive and contains data that we can use to build up; our accumulated predicate state. We accumulate it using the x86 conditional; move instruction which also reads the flag registers where the state resides.; These conditional move instructions are known to not be predicted on any x86; processors, making them immune to misprediction that could reintroduce the; vulnerability. When we insert the conditional moves, the code ends up looking; like the following:; ```; # %bb.0: # %entry; pushq %rax; xorl %eax, %eax # Zero out initial predicate state.; movq $-1, %r8 # Put all-ones mask into a register.; testl %edi, %edi; jne .LBB0_1; # %bb.2: # %then1; cmovneq %r8, %rax # Conditionally update predicate state.; testl %esi, %esi; jne .LBB0_1; # %bb.3: # %then2; cmovneq %r8, %rax # Conditionally update predicate state.; testl %edx, %edx; je .LBB0_4; .LBB0_1:; cmoveq %r8, %rax # Conditionally update predicate state.; popq %rax; retq; .LBB0_4: # %danger; cmovneq %r8, %rax # Conditionally update predicate state.; ...; ```. Here we create the ""empty"" or ""correct execution"" predicate state by zeroing; `%rax`, and we create a constant ""incorrect execution"" predicate value by; putting `-1` into `%r8`. Then, along each edge coming out of a conditional; branch we do a conditional move that in a correct execution will be a no-op,; but if misspeculated, will replace the `%rax` with the value of `%r8`.; Misspeculating any one of the three predicates will cause `%rax` to hold the; ""incorrect execution"" value from `%r8` as we preserve incoming values when; execution is correct rather than overwriting it. We now ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md:16584,test,testl,16584,interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,1,['test'],['testl']
Testability,"he output is expected to be the input to the; phi for the induction variable of the loop, decremented by the; '``llvm.loop.decrement.reg.*``'. Arguments:; """""""""""""""""""". The integer operand is the loop trip count of the hardware-loop, and thus; not e.g. the loop back-edge taken count. Semantics:; """""""""""""""""""". The '``llvm.start.loop.iterations.*``' intrinsics do not perform any arithmetic; on their operand. It's a hint to the backend that can use this to set up the; hardware-loop count with a target specific instruction, usually a move of this; value to a special register or a hardware-loop instruction. '``llvm.test.set.loop.iterations.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. ::. declare i1 @llvm.test.set.loop.iterations.i32(i32); declare i1 @llvm.test.set.loop.iterations.i64(i64). Overview:; """""""""""""""""". The '``llvm.test.set.loop.iterations.*``' intrinsics are used to specify the; the loop trip count, and also test that the given count is not zero, allowing; it to control entry to a while-loop. They are placed in the loop preheader's; predecessor basic block, and are marked as ``IntrNoDuplicate`` to avoid; optimizers duplicating these instructions. Arguments:; """""""""""""""""""". The integer operand is the loop trip count of the hardware-loop, and thus; not e.g. the loop back-edge taken count. Semantics:; """""""""""""""""""". The '``llvm.test.set.loop.iterations.*``' intrinsics do not perform any; arithmetic on their operand. It's a hint to the backend that can use this to; set up the hardware-loop count with a target specific instruction, usually a; move of this value to a special register or a hardware-loop instruction.; The result is the conditional value of whether the given count is not zero. '``llvm.test.start.loop.iterations.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. ::. declare {i32, i1} @llvm.test.start.loop.iterations.i32(i32); dec",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:645623,test,test,645623,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"he overall (multiplicative) normalization of; $\mbox{FCN}$, in the sense that if the value of $\mbox{FCN}$ is; everywhere multiplied by a constant $\beta$, then the errors will be; decreased by a factor $\sqrt{\beta}$. Additive constants do not change; the parameter errors, but may imply a different goodness-of-fit; confidence level. Assuming that the user knows what the normalization of their; $\mbox{FCN}$ means, and also that they are interested in parameter; errors, the user can change the error definition which allows them to; define what they means by one ""error"", in terms of the change in the; $\mbox{FCN}$ value which should be caused by changing one parameter; by one ""error"". If the $\mbox{FCN}$ is the usual chisquare function; (defined below) and if the user wants the usual one-standard-deviation; errors, then the error definition (return value of the FCNBase::up(); method, see [howto:errordef]) should be $1.0$. If the $\mbox{FCN}$; is a negative-log-likelihood function, then the one-standard-deviation; value for FCNBase::up() to return is $0.5$. If the $\mbox{FCN}$ is a; chisquare, but the user wants two-standard-deviation errors, then; FCNBase::up() should return $= 4.0$, etc. Note that in the usual case where M is being used to perform a fit to; some experimental data, the parameter errors will be proportional to the; uncertainty in the data, and therefore meaningful parameter errors; cannot be obtained unless the measurement errors of the data are known.; In the common case of a least-squares fit, $\mbox{FCN}$ is usually; defined as a chisquare:. $$\chi^2 (\alpha) = \sum_{i=1}^{n} (\frac{f(x_i,\alpha) - m_i)^2}{\sigma_i^2}$$. where $\alpha$ is the vector of free parameters being fitted, and the; $\sigma_i$ are the uncertainties in the individual measurements $m_i$.; If these uncertainties are not known, and are simply left out of the; calculation, then the fit may still have meaning, but not the; quantitative values of the resulting parameter errors. (On",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/minuit2/Minuit2.md:14077,log,log-likelihood,14077,documentation/minuit2/Minuit2.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/minuit2/Minuit2.md,1,['log'],['log-likelihood']
Testability,"he specified flags will generate four intermediate bytecode files:. #. a.out.0.0.preopt.bc (Before any link-time optimizations (LTO) are applied); #. a.out.0.2.internalize.bc (After initial optimizations are applied); #. a.out.0.4.opt.bc (After an extensive set of optimizations); #. a.out.0.5.precodegen.bc (After LTO but before translating into machine code). Execute one of the following commands to identify the source of the problem:. #. ``opt ""-passes=lto<O3>"" a.out.0.2.internalize.bc``; #. ``llc a.out.0.5.precodegen.bc``. If one of these do crash, you should be able to reduce; this with :program:`llvm-reduce`; command line (use the bc file corresponding to the command above that failed):. .. code-block:: bash. llvm-reduce --test reduce.sh a.out.0.2.internalize.bc. Example of reduce.sh script. .. code-block:: bash. $ cat reduce.sh; #!/bin/bash -e. path/to/not --crash path/to/opt ""-passes=lto<O3>"" $1 -o temp.bc 2> err.log; grep -q ""It->second == &Insn"" err.log. Here we have grepped the failed assert message. Please run this, then file a bug with the instructions and reduced .bc file; that llvm-reduce emits. .. _miscompiling:. Miscompilations; ===============. If clang successfully produces an executable, but that executable doesn't run; right, this is either a bug in the code or a bug in the compiler. The first; thing to check is to make sure it is not using undefined behavior (e.g.; reading a variable before it is defined). In particular, check to see if the; program is clean under various `sanitizers; <https://github.com/google/sanitizers>`_ (e.g. ``clang; -fsanitize=undefined,address``) and `valgrind <http://valgrind.org/>`_. Many; ""LLVM bugs"" that we have chased down ended up being bugs in the program being; compiled, not LLVM. Once you determine that the program itself is not buggy, you should choose; which code generator you wish to compile the program with (e.g. LLC or the JIT); and optionally a series of LLVM passes to run. For example:. .. code-block:: bas",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst:7807,assert,assert,7807,interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst,1,['assert'],['assert']
Testability,"he speed with which; LLVM compiles, optimizes, and generates code. The test-suite is located in the ``test-suite``; `repository on GitHub <https://github.com/llvm/llvm-test-suite.git>`_. See the :doc:`TestSuiteGuide` for details. Debugging Information tests; ---------------------------. The test suite contains tests to check quality of debugging information.; The test are written in C based languages or in LLVM assembly language. These tests are compiled and run under a debugger. The debugger output; is checked to validate of debugging information. See README.txt in the; test suite for more information. This test suite is located in the; ``cross-project-tests/debuginfo-tests`` directory. Quick start; ===========. The tests are located in two separate repositories. The unit and; regression tests are in the main ""llvm""/ directory under the directories; ``llvm/unittests`` and ``llvm/test`` (so you get these tests for free with the; main LLVM tree). Use ``make check-all`` to run the unit and regression tests; after building LLVM. The ``test-suite`` module contains more comprehensive tests including whole C; and C++ programs. See the :doc:`TestSuiteGuide` for details. Unit and Regression tests; -------------------------. To run all of the LLVM unit tests use the check-llvm-unit target:. .. code-block:: bash. % make check-llvm-unit. To run all of the LLVM regression tests use the check-llvm target:. .. code-block:: bash. % make check-llvm. In order to get reasonable testing performance, build LLVM and subprojects; in release mode, i.e. .. code-block:: bash. % cmake -DCMAKE_BUILD_TYPE=""Release"" -DLLVM_ENABLE_ASSERTIONS=On. If you have `Clang <https://clang.llvm.org/>`_ checked out and built, you; can run the LLVM and Clang tests simultaneously using:. .. code-block:: bash. % make check-all. To run the tests with Valgrind (Memcheck by default), use the ``LIT_ARGS`` make; variable to pass the required options to lit. For example, you can use:. .. code-block:: bash. % make ch",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:4846,test,tests,4846,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['tests']
Testability,"he standard; calls for overloads that take integral arguments, these are usually not; available. .. code-block:: c++. #include <math.h>; #include <cmath.h>. // clang is OK with everything in this function.; __device__ void test() {; std::sin(0.); // nvcc - ok; std::sin(0); // nvcc - error, because no std::sin(int) override is available.; sin(0); // nvcc - same as above. sinf(0.); // nvcc - ok; std::sinf(0.); // nvcc - no such function; }. ``<std::complex>``; ------------------. nvcc does not officially support ``std::complex``. It's an error to use; ``std::complex`` in ``__device__`` code, but it often works in ``__host__; __device__`` code due to nvcc's interpretation of the ""wrong-side rule"" (see; below). However, we have heard from implementers that it's possible to get; into situations where nvcc will omit a call to an ``std::complex`` function,; especially when compiling without optimizations. As of 2016-11-16, clang supports ``std::complex`` without these caveats. It is; tested with libstdc++ 4.8.5 and newer, but is known to work only with libc++; newer than 2016-11-16. ``<algorithm>``; ---------------. In C++14, many useful functions from ``<algorithm>`` (notably, ``std::min`` and; ``std::max``) become constexpr. You can therefore use these in device code,; when compiling with clang. Detecting clang vs NVCC from code; =================================. Although clang's CUDA implementation is largely compatible with NVCC's, you may; still want to detect when you're compiling CUDA code specifically with clang. This is tricky, because NVCC may invoke clang as part of its own compilation; process! For example, NVCC uses the host compiler's preprocessor when; compiling for device code, and that host compiler may in fact be clang. When clang is actually compiling CUDA code -- rather than being used as a; subtool of NVCC's -- it defines the ``__CUDA__`` macro. ``__CUDA_ARCH__`` is; defined only in device mode (but will be defined if NVCC is using clang as a; preproc",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CompileCudaWithLLVM.rst:7174,test,tested,7174,interpreter/llvm-project/llvm/docs/CompileCudaWithLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CompileCudaWithLLVM.rst,1,['test'],['tested']
Testability,"he tests take; just as long to run. Ninja doesn't know which tests might be affected,; so it runs them all. .. code:: console. ********************; Testing Time: 408.84s; ********************; Failing Tests (1):; Clang :: SemaCXX/warn-infinite-recursion.cpp. Well, that makes sense… and the test output suggests it's looking for; the old string ""call itself"" and finding our new message instead.; Note that more tests may fail in a similar way as new tests are; added time to time. Let's fix it by updating the expectation in the test. .. code:: console. $ vi ../clang/test/SemaCXX/warn-infinite-recursion.cpp. Everywhere we see `// expected-warning{{call itself}}` (or something similar; from the original warning text), let's replace it with; `// expected-warning{{to understand recursion}}`. Now we could run **all** the tests again, but this is a slow way to; iterate on a change! Instead, let's find a way to re-run just the; specific test. There are two main types of tests in LLVM:. - **lit tests** (e.g. SemaCXX/warn-infinite-recursion.cpp). These are fancy shell scripts that run command-line tools and verify the; output. They live in files like; clang/**test**/FixIt/dereference-addressof.c. Re-run like this:. .. code:: console. $ bin/llvm-lit -v ../clang/test/SemaCXX/warn-infinite-recursion.cpp. - **unit tests** (e.g. ToolingTests/ReplacementTest.CanDeleteAllText). These are C++ programs that call LLVM functions and verify the results.; They live in suites like ToolingTests. Re-run like this:. .. code:: console. $ ninja ToolingTests && tools/clang/unittests/Tooling/ToolingTests; --gtest_filter=ReplacementTest.CanDeleteAllText. Commit locally; --------------. We'll save the change to a local git branch. This lets us work on other; things while the change is being reviewed. Changes should have a; description, to explain to reviewers and future readers of the code why; the change was made. .. code:: console. $ git checkout -b myfirstpatch; $ git commit -am ""[Diagnostic] Clar",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst:7521,test,tests,7521,interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,1,['test'],['tests']
Testability,"he; demangled AST. Why are there multiple copies of the this library in the source tree?; ---------------------------------------------------------------------. The canonical sources are in libcxxabi/src/demangle and some of the; files are copied to llvm/include/llvm/Demangle. The simple reason for; this comes from before the monorepo, and both [sub]projects need to; demangle symbols, but neither can depend on each other. * libcxxabi needs the demangler to implement __cxa_demangle, which is; part of the itanium ABI spec. * LLVM needs a copy for a bunch of places, and cannot rely on the; system's __cxa_demangle because it a) might not be available (i.e.,; on Windows), and b) may not be up-to-date on the latest language; features. The copy of the demangler in LLVM has some extra stuff that aren't; needed in libcxxabi (ie, the MSVC demangler, ItaniumPartialDemangler),; which depend on the shared generic components. Despite these; differences, we want to keep the ""core"" generic demangling library; identical between both copies to simplify development and testing. If you're working on the generic library, then do the work first in; libcxxabi, then run libcxxabi/src/demangle/cp-to-llvm.sh. This; script takes as an optional argument the path to llvm, and copies the; changes you made to libcxxabi over. Note that this script just; blindly overwrites all changes to the generic library in llvm, so be; careful. Because the core demangler needs to work in libcxxabi, everything; needs to be declared in an anonymous namespace (see; DEMANGLE_NAMESPACE_BEGIN), and you can't introduce any code that; depends on the libcxx dylib. FIXME: Now that LLVM is a monorepo, it should be possible to; de-duplicate this code, and have both LLVM and libcxxabi depend on a; shared demangler library. Testing; -------. The tests are split up between libcxxabi/test/{unit,}test_demangle.cpp, and; llvm/unittest/Demangle. The llvm directory should only get tests for stuff not; included in the core library.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/README.txt:1496,test,testing,1496,interpreter/llvm-project/llvm/include/llvm/Demangle/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/README.txt,1,['test'],['testing']
Testability,"he; range [0.5, 1.0), with the same sign as the argument. The second; result is an integer such that the first result raised to the power of; the second result is the input argument. If the argument is a zero, returns a zero with the same sign and a 0; exponent. If the argument is a NaN, a NaN is returned and the returned exponent; is unspecified. If the argument is an infinity, returns an infinity with the same sign; and an unspecified exponent. .. _int_log:. '``llvm.log.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. You can use ``llvm.log`` on any; floating-point or vector of floating-point type. Not all targets support; all types however. ::. declare float @llvm.log.f32(float %Val); declare double @llvm.log.f64(double %Val); declare x86_fp80 @llvm.log.f80(x86_fp80 %Val); declare fp128 @llvm.log.f128(fp128 %Val); declare ppc_fp128 @llvm.log.ppcf128(ppc_fp128 %Val). Overview:; """""""""""""""""". The '``llvm.log.*``' intrinsics compute the base-e logarithm of the specified; value. Arguments:; """""""""""""""""""". The argument and return value are floating-point numbers of the same type. Semantics:; """""""""""""""""""". Return the same value as a corresponding libm '``log``' function but without; trapping or setting ``errno``. When specified with the fast-math-flag 'afn', the result may be approximated; using a less accurate calculation. .. _int_log10:. '``llvm.log10.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. You can use ``llvm.log10`` on any; floating-point or vector of floating-point type. Not all targets support; all types however. ::. declare float @llvm.log10.f32(float %Val); declare double @llvm.log10.f64(double %Val); declare x86_fp80 @llvm.log10.f80(x86_fp80 %Val); declare fp128 @llvm.log10.f128(fp128 %Val); declare ppc_fp128 @llvm.log10.ppcf128(ppc_fp128 %Val). Overview:; """""""""""""""""". The '``llvm.log10.*``' intrinsics compute the base-10 logarithm of the; specified value. Arguments:; """"",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:568061,log,logarithm,568061,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['log'],['logarithm']
Testability,"he; section on the OpenCL Header <opencl_header>`):. .. code-block:: console. $ clang -Xclang -finclude-default-header test.cl. Alternatively the internal header `opencl-c.h` containing the declarations; can be included manually using ``-include`` or ``-I`` followed by the path; to the header location. The header can be found in the clang source tree or; installation directory. .. code-block:: console. $ clang -I<path to clang sources>/lib/Headers/opencl-c.h test.cl; $ clang -I<path to clang installation>/lib/clang/<llvm version>/include/opencl-c.h/opencl-c.h test.cl. In this example it is assumed that the kernel code contains; ``#include <opencl-c.h>`` just as a regular C include. Because the header is very large and long to parse, PCH (:doc:`PCHInternals`); and modules (:doc:`Modules`) can be used internally to improve the compilation; speed. To enable modules for OpenCL:. .. code-block:: console. $ clang --target=spir-unknown-unknown -c -emit-llvm -Xclang -finclude-default-header -fmodules -fimplicit-module-maps -fmodules-cache-path=<path to the generated module> test.cl. Another way to circumvent long parsing latency for the OpenCL builtin; declarations is to use mechanism enabled by :ref:`-fdeclare-opencl-builtins; <opencl_fdeclare_opencl_builtins>` flag that is available as an alternative; feature. .. _opencl_fdeclare_opencl_builtins:. .. option:: -fdeclare-opencl-builtins. In addition to regular header includes with builtin types and functions using; :ref:`-finclude-default-header <opencl_finclude_default_header>`, clang; supports a fast mechanism to declare builtin functions with; ``-fdeclare-opencl-builtins``. This does not declare the builtin types and; therefore it has to be used in combination with ``-finclude-default-header``; if full functionality is required. **Example of Use**:. .. code-block:: console. $ clang -Xclang -fdeclare-opencl-builtins test.cl. .. _opencl_fake_address_space_map:. .. option:: -ffake-address-space-map. Overrides the target add",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/OpenCLSupport.rst:4184,test,test,4184,interpreter/llvm-project/clang/docs/OpenCLSupport.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/OpenCLSupport.rst,1,['test'],['test']
Testability,"heck-llvm-unit. To run all of the LLVM regression tests use the check-llvm target:. .. code-block:: bash. % make check-llvm. In order to get reasonable testing performance, build LLVM and subprojects; in release mode, i.e. .. code-block:: bash. % cmake -DCMAKE_BUILD_TYPE=""Release"" -DLLVM_ENABLE_ASSERTIONS=On. If you have `Clang <https://clang.llvm.org/>`_ checked out and built, you; can run the LLVM and Clang tests simultaneously using:. .. code-block:: bash. % make check-all. To run the tests with Valgrind (Memcheck by default), use the ``LIT_ARGS`` make; variable to pass the required options to lit. For example, you can use:. .. code-block:: bash. % make check LIT_ARGS=""-v --vg --vg-leak"". to enable testing with valgrind and with leak checking enabled. To run individual tests or subsets of tests, you can use the ``llvm-lit``; script which is built as part of LLVM. For example, to run the; ``Integer/BitPacked.ll`` test by itself you can run:. .. code-block:: bash. % llvm-lit ~/llvm/test/Integer/BitPacked.ll. or to run all of the ARM CodeGen tests:. .. code-block:: bash. % llvm-lit ~/llvm/test/CodeGen/ARM. The regression tests will use the Python psutil module only if installed in a; **non-user** location. Under Linux, install with sudo or within a virtual; environment. Under Windows, install Python for all users and then run; ``pip install psutil`` in an elevated command prompt. For more information on using the :program:`lit` tool, see ``llvm-lit --help``; or the :doc:`lit man page <CommandGuide/lit>`. Debugging Information tests; ---------------------------. To run debugging information tests simply add the ``cross-project-tests``; project to your ``LLVM_ENABLE_PROJECTS`` define on the cmake; command-line. Regression test structure; =========================. The LLVM regression tests are driven by :program:`lit` and are located in the; ``llvm/test`` directory. This directory contains a large array of small tests that exercise; various features of LLVM and to ens",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:6163,test,test,6163,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,help/latest/variable/CMAKE_LANG_COMPILER.html). - `CMAKE_Fortran_COMPILER`. Select the Fortran compiler executable to be used. Not set by default and not; required unless running the Fortran Test Suite. - `CMAKE_BUILD_TYPE`. Select a build type like `OPTIMIZE` or `DEBUG` selecting a set of predefined; compiler flags. These flags are applied regardless of the `CMAKE_C_FLAGS`; option and may be changed by modifying `CMAKE_C_FLAGS_OPTIMIZE` etc. See; [https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html](https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html). - `TEST_SUITE_FORTRAN`. Activate that Fortran tests. This is a work in progress. More information can be; found in the [Flang documentation](https://flang.llvm.org/docs/FortranLLVMTestSuite.html). - `TEST_SUITE_RUN_UNDER`. Prefix test invocations with the given tool. This is typically used to run; cross-compiled tests within a simulator tool. - `TEST_SUITE_BENCHMARKING_ONLY`. Disable tests that are unsuitable for performance measurements. The disabled; tests either run for a very short time or are dominated by I/O performance; making them unsuitable as compiler performance tests. - `TEST_SUITE_SUBDIRS`. Semicolon-separated list of directories to include. This can be used to only; build parts of the test-suite or to include external suites. This option; does not work reliably with deeper subdirectories as it skips intermediate; `CMakeLists.txt` files which may be required. - `TEST_SUITE_COLLECT_STATS`. Collect internal LLVM statistics. Appends `-save-stats=obj` when invoking the; compiler and makes the lit runner collect and merge the statistic files. - `TEST_SUITE_RUN_BENCHMARKS`. If this is set to `OFF` then lit will not actually run the tests but just; collect build statistics like compile time and code size. - `TEST_SUITE_USE_PERF`. Use the `perf` tool for time measurement instead of the `timeit` tool that; comes with the test-suite. The `perf` is usually available on linux systems. -,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:5613,test,tests,5613,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['test'],['tests']
Testability,help/latest/variable/CMAKE_LANG_FLAGS.html). - `CMAKE_C_COMPILER`. Select the C compiler executable to be used. Note that the C++ compiler is; inferred automatically i.e. when specifying `path/to/clang` CMake will; automatically use `path/to/clang++` as the C++ compiler. See; [https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER.html](https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER.html). - `CMAKE_Fortran_COMPILER`. Select the Fortran compiler executable to be used. Not set by default and not; required unless running the Fortran Test Suite. - `CMAKE_BUILD_TYPE`. Select a build type like `OPTIMIZE` or `DEBUG` selecting a set of predefined; compiler flags. These flags are applied regardless of the `CMAKE_C_FLAGS`; option and may be changed by modifying `CMAKE_C_FLAGS_OPTIMIZE` etc. See; [https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html](https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html). - `TEST_SUITE_FORTRAN`. Activate that Fortran tests. This is a work in progress. More information can be; found in the [Flang documentation](https://flang.llvm.org/docs/FortranLLVMTestSuite.html). - `TEST_SUITE_RUN_UNDER`. Prefix test invocations with the given tool. This is typically used to run; cross-compiled tests within a simulator tool. - `TEST_SUITE_BENCHMARKING_ONLY`. Disable tests that are unsuitable for performance measurements. The disabled; tests either run for a very short time or are dominated by I/O performance; making them unsuitable as compiler performance tests. - `TEST_SUITE_SUBDIRS`. Semicolon-separated list of directories to include. This can be used to only; build parts of the test-suite or to include external suites. This option; does not work reliably with deeper subdirectories as it skips intermediate; `CMakeLists.txt` files which may be required. - `TEST_SUITE_COLLECT_STATS`. Collect internal LLVM statistics. Appends `-save-stats=obj` when invoking the; compiler and makes the lit runner collect an,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:5272,test,tests,5272,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['test'],['tests']
Testability,"hem to always be noisy. A standard compromise is to comment; them out, allowing you to enable them if you need them in the future. The ``llvm/Support/Debug.h`` (`doxygen; <https://llvm.org/doxygen/Debug_8h_source.html>`__) file provides a macro named; ``LLVM_DEBUG()`` that is a much nicer solution to this problem. Basically, you can; put arbitrary code into the argument of the ``LLVM_DEBUG`` macro, and it is only; executed if '``opt``' (or any other tool) is run with the '``-debug``' command; line argument:. .. code-block:: c++. LLVM_DEBUG(dbgs() << ""I am here!\n"");. Then you can run your pass like this:. .. code-block:: none. $ opt < a.bc > /dev/null -mypass; <no output>; $ opt < a.bc > /dev/null -mypass -debug; I am here!. Using the ``LLVM_DEBUG()`` macro instead of a home-brewed solution allows you to not; have to create ""yet another"" command line option for the debug output for your; pass. Note that ``LLVM_DEBUG()`` macros are disabled for non-asserts builds, so they; do not cause a performance impact at all (for the same reason, they should also; not contain side-effects!). One additional nice thing about the ``LLVM_DEBUG()`` macro is that you can enable or; disable it directly in gdb. Just use ""``set DebugFlag=0``"" or ""``set; DebugFlag=1``"" from the gdb if the program is running. If the program hasn't; been started yet, you can always just run it with ``-debug``. .. _DEBUG_TYPE:. Fine grained debug info with ``DEBUG_TYPE`` and the ``-debug-only`` option; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sometimes you may find yourself in a situation where enabling ``-debug`` just; turns on **too much** information (such as when working on the code generator).; If you want to enable debug information with more fine-grained control, you; should define the ``DEBUG_TYPE`` macro and use the ``-debug-only`` option as; follows:. .. code-block:: c++. #define DEBUG_TYPE ""foo""; LLVM_DEBUG(dbgs() << ""'foo' debug type\n"");; #undef DEBUG_TYPE; #def",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst:43397,assert,asserts,43397,interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,1,['assert'],['asserts']
Testability,"hen try to reproduce and fix the bug with upstream LLVM. Start by building; LLVM from source as described in :doc:`GettingStarted` and; use the built binaries to reproduce the failure described in the bug. Use; a debug build (`-DCMAKE_BUILD_TYPE=Debug`) or a build with assertions; (`-DLLVM_ENABLE_ASSERTIONS=On`, enabled for Debug builds). Reporting a Security Issue; --------------------------. There is a separate process to submit security-related bugs, see :ref:`report-security-issue`. Bigger Pieces of Work; ---------------------; In case you are interested in taking on a bigger piece of work, a list of; interesting projects is maintained at the `LLVM's Open Projects page`_. In case; you are interested in working on any of these projects, please post on the; `Forum`_, so that we know the project is being worked on. .. _submit_patch:. How to Submit a Patch; =====================; Once you have a patch ready, it is time to submit it. The patch should:. * include a small unit test; * conform to the :doc:`CodingStandards`. You can use the `clang-format-diff.py`_ or `git-clang-format`_ tools to automatically format your patch properly.; * not contain any unrelated changes; * be an isolated change. Independent changes should be submitted as separate patches as this makes reviewing easier.; * have a single commit (unless stacked on another Differential), up-to-date with the upstream ``origin/main`` branch, and don't have merges. .. _format patches:. Before sending a patch for review, please also try to ensure it is; formatted properly. We use ``clang-format`` for this, which has git integration; through the ``git-clang-format`` script. On some systems, it may already be; installed (or be installable via your package manager). If so, you can simply; run it -- the following command will format only the code changed in the most; recent commit:. .. code-block:: console. % git clang-format HEAD~1. Note that this modifies the files, but doesn't commit them -- you'll likely want",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Contributing.rst:2051,test,test,2051,interpreter/llvm-project/llvm/docs/Contributing.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Contributing.rst,1,['test'],['test']
Testability,"hen |; | | running the install action of the build files. |; +-------------------------+----------------------------------------------------+; | Python3_EXECUTABLE | Forces CMake to use a specific Python version by |; | | passing a path to a Python interpreter. By default |; | | the Python version of the interpreter in your PATH |; | | is used. |; +-------------------------+----------------------------------------------------+; | LLVM_TARGETS_TO_BUILD | A semicolon delimited list controlling which |; | | targets will be built and linked into llvm. |; | | The default list is defined as |; | | ``LLVM_ALL_TARGETS``, and can be set to include |; | | out-of-tree targets. The default value includes: |; | | ``AArch64, AMDGPU, ARM, AVR, BPF, Hexagon, Lanai, |; | | Mips, MSP430, NVPTX, PowerPC, RISCV, Sparc, |; | | SystemZ, WebAssembly, X86, XCore``. Setting this |; | | to ``""host""`` will only compile the host |; | | architecture (e.g. equivalent to specifying ``X86``|; | | on an x86 host machine) can |; | | significantly speed up compile and test times. |; +-------------------------+----------------------------------------------------+; | LLVM_ENABLE_DOXYGEN | Build doxygen-based documentation from the source |; | | code This is disabled by default because it is |; | | slow and generates a lot of output. |; +-------------------------+----------------------------------------------------+; | LLVM_ENABLE_PROJECTS | A semicolon-delimited list selecting which of the |; | | other LLVM subprojects to additionally build. (Only|; | | effective when using a side-by-side project layout |; | | e.g. via git). The default list is empty. Can |; | | include: clang, clang-tools-extra, |; | | cross-project-tests, flang, libc, libclc, lld, |; | | lldb, mlir, openmp, polly, or pstl. |; +-------------------------+----------------------------------------------------+; | LLVM_ENABLE_RUNTIMES | A semicolon-delimited list selecting which of the |; | | runtimes to build. (Only effective when using th",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst:25996,test,test,25996,interpreter/llvm-project/llvm/docs/GettingStarted.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst,1,['test'],['test']
Testability,"hen; compiling ``.clcpp`` file:. - C++ for OpenCL 1.0: ``-cl-std=clc++``, ``-cl-std=CLC++``, ``-cl-std=clc++1.0``,; ``-cl-std=CLC++1.0``, ``-std=clc++``, ``-std=CLC++``, ``-std=clc++1.0`` or; ``-std=CLC++1.0``. - C++ for OpenCL 2021: ``-cl-std=clc++2021``, ``-cl-std=CLC++2021``,; ``-std=clc++2021``, ``-std=CLC++2021``. Example of use:; .. code-block:: c++. template<class T> T add( T x, T y ); {; return x + y;; }. __kernel void test( __global float* a, __global float* b); {; auto index = get_global_id(0);; a[index] = add(b[index], b[index+1]);; }. .. code-block:: console. clang -cl-std=clc++1.0 test.clcpp; clang -cl-std=clc++ -c --target=spirv64 test.cl. By default, files with ``.clcpp`` extension are compiled with the C++ for; OpenCL 1.0 mode. .. code-block:: console. clang test.clcpp. For backward compatibility files with ``.cl`` extensions can also be compiled; in C++ for OpenCL mode but the desirable language mode must be activated with; a flag. .. code-block:: console. clang -cl-std=clc++ test.cl. Support of C++ for OpenCL 2021 is currently in experimental phase, refer to; :doc:`OpenCLSupport` for more details. C++ for OpenCL kernel sources can also be compiled online in drivers supporting; `cl_ext_cxx_for_opencl; <https://www.khronos.org/registry/OpenCL/extensions/ext/cl_ext_cxx_for_opencl.html>`_; extension. Constructing and destroying global objects; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Global objects with non-trivial constructors require the constructors to be run; before the first kernel using the global objects is executed. Similarly global; objects with non-trivial destructors require destructor invocation just after; the last kernel using the program objects is executed.; In OpenCL versions earlier than v2.2 there is no support for invoking global; constructors. However, an easy workaround is to manually enqueue the; constructor initialization kernel that has the following name scheme; ``_GLOBAL__sub_I_<compiled file name>``.; This kernel is only ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:154050,test,test,154050,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"her of these; scenarios, you can use the -DGCC_INSTALL_PREFIX cmake option; to tell Clang where the gcc containing the desired libstdc++ is installed.; ; Try it out (assuming you add llvm/build/bin to your path):; ; clang --help; clang file.c -fsyntax-only (check for correctness); clang file.c -S -emit-llvm -o - (print out unoptimized llvm code); clang file.c -S -emit-llvm -o - -O3; clang file.c -S -O3 -o - (output native machine code). Run the testsuite:; ; make check-clang. Using Visual Studio; The following details setting up for and building Clang on Windows using; Visual Studio:. Get the required tools:; ; Git. Source code control program. Get it from:; ; https://git-scm.com/download; CMake. This is used for generating Visual Studio solution and; project files. Get it from:; ; https://cmake.org/download/; Visual Studio 2019 16.7 or later; Python. It is used to run the clang test suite. Get it from:; ; https://www.python.org/download/; GnuWin32 tools; The Clang and LLVM test suite use various GNU core utilities, such as; grep, sed, and find. The gnuwin32 packages; are the oldest and most well-tested way to get these tools. However, the; MSys utilities provided by git for Windows have been known to work.; Cygwin has worked in the past, but is not well tested.; If you don't already have the core utilies from some other source, get; gnuwin32 from ; http://getgnuwin32.sourceforge.net/. Check out LLVM and Clang:; ; git clone https://github.com/llvm/llvm-project.git. Note: Some Clang tests are sensitive to the line endings. Ensure; that checking out the files does not convert LF line endings to CR+LF. If; you're using git on Windows, make sure your core.autocrlf setting; is false. Run CMake to generate the Visual Studio solution and project files:; ; cd llvm-project; mkdir build (for building without polluting the source dir); cd build. If you are using Visual Studio 2019:; cmake -DLLVM_ENABLE_PROJECTS=clang -G ""Visual Studio 16 2019"" -A x64 -Thost=x64 ..\llvm; -Thost",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/get_started.html:3812,test,test,3812,interpreter/llvm-project/clang/www/get_started.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/get_started.html,1,['test'],['test']
Testability,"here is no guarantee the following rules are correct, complete or make sense; in any way as they were determined empirically by experiments with gcc5. Declaration; ===========. ABI tags are declared in an abi_tag attribute and can be applied to a; function, variable, class or inline namespace declaration. The attribute takes; one or more strings (called tags); the order does not matter. See https://gcc.gnu.org/onlinedocs/gcc/C_002b_002b-Attributes.html for; details. Tags on an inline namespace are called ""implicit tags"", all other tags are; ""explicit tags"". Mangling; ========. All tags that are ""active"" on an <unqualified-name> are emitted after the; <unqualified-name>, before <template-args> or <discriminator>, and are part of; the same <substitution> the <unqualified-name> is. They are mangled as:. .. code-block:: none. <abi-tags> ::= <abi-tag>* # sort by name; <abi-tag> ::= B <tag source-name>. Example:. .. code-block:: c++. __attribute__((abi_tag(""test""))); void Func();; // gets mangled as: _Z4FuncB4testv (prettified as `Func[abi:test]()`). Active tags; ===========. A namespace does not have any active tags. For types (class / struct / union /; enum), the explicit tags are the active tags. For variables and functions, the active tags are the explicit tags plus any; ""required tags"" which are not in the ""available tags"" set:. .. code-block:: none. derived-tags := (required-tags - available-tags); active-tags := explicit-tags + derived-tags. Required tags for a function; ============================. If a function is used as a local scope for another name, and is part of; another function as local scope, it doesn't have any required tags. If a function is used as a local scope for a guard variable name, it doesn't; have any required tags. Otherwise the function requires any implicit or explicit tag used in the name; for the return type. Example:. .. code-block:: c++. namespace A {; inline namespace B __attribute__((abi_tag)) {; struct C { int x; };; }; }. A::C foo()",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ItaniumMangleAbiTags.rst:1178,test,test,1178,interpreter/llvm-project/clang/docs/ItaniumMangleAbiTags.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ItaniumMangleAbiTags.rst,2,['test'],['test']
Testability,"herwise the drawing package will be loaded. There is also a list of specific rules:. - Positioned volumes should not extrude their container or intersect; with others within this unless it is specified (see section:; Overlapping Volumes).; - The top volume (containing all geometry trees) must be specified; before closing the geometry and must not be positioned - it; represents the global reference frame.; - After building the full geometry tree, the geometry must be closed; (see the method **`TGeoManager::CloseGeometry()`**). Voxelization; can be redone per volume after this process. The list is much bigger and we will describe in more detail the geometry; creation procedure in the following sections. Provided that geometry was; successfully built and closed, the **`TGeoManager`** class will register; itself to ROOT and the logical/physical structures will become; immediately browsable. \anchor GP01a; ### The Volume Hierarchy. The basic components used for building the logical hierarchy of the; geometry are the positioned volumes called `nodes`. Volumes are fully; defined geometrical objects having a given shape and medium and possibly; containing a list of nodes. Nodes represent just positioned instances of; volumes inside a container volume but users do not directly create them.; They are automatically created as a result of adding one volume inside; other or dividing a volume. The geometrical transformation held by nodes; is always defined with respect to their mother (relative positioning).; Reflection matrices are allowed. A hierarchical element is not fully defined by a node since nodes are; not directly linked to each other, but through volumes (a node points to; a volume, which at its turn points to a list of nodes):. `NodeTop ` ` VolTop ` ` NodeA ` ` VolA ` `...`. One can therefore talk about ""the node or volume hierarchy"", but in; fact, an element is made by a pair volume-node. In the line above is; represented just a single branch, but of course from any v",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md:18776,log,logical,18776,geom/geom/doc/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md,1,['log'],['logical']
Testability,"hes when using the binding decl from an invalid structured binding.; Fixes (`#67495 <https://github.com/llvm/llvm-project/issues/67495>`_) and; (`#72198 <https://github.com/llvm/llvm-project/issues/72198>`_); - Fix assertion failure when call noreturn-attribute function with musttail; attribute.; Fixes (`#76631 <https://github.com/llvm/llvm-project/issues/76631>`_); - The MS ``__noop`` builtin without an argument list is now accepted; in the placement-args of new-expressions, matching MSVC's behaviour.; - Fix an issue that caused MS ``__decspec(property)`` accesses as well as; Objective-C++ property accesses to not be converted to a function call; to the getter in the placement-args of new-expressions.; Fixes (`#65053 <https://github.com/llvm/llvm-project/issues/65053>`_); - Fix an issue with missing symbol definitions when the first coroutine; statement appears in a discarded ``if constexpr`` branch.; Fixes (`#78290 <https://github.com/llvm/llvm-project/issues/78290>`_); - Fixed assertion failure with deleted overloaded unary operators.; Fixes (`#78314 <https://github.com/llvm/llvm-project/issues/78314>`_); - The XCOFF object file format does not support aliases to symbols having common; linkage. Clang now diagnoses the use of an alias for a common symbol when; compiling for AIX. - Clang now doesn't produce false-positive warning `-Wconstant-logical-operand`; for logical operators in C23.; Fixes (`#64356 <https://github.com/llvm/llvm-project/issues/64356>`_).; - Clang's ``-Wshadow`` no longer warns when an init-capture is named the same as; a class field unless the lambda can capture this.; Fixes (`#71976 <https://github.com/llvm/llvm-project/issues/71976>`_). Bug Fixes to Compiler Builtins; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Bug Fixes to Attribute Support; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Bug Fixes to C++ Support; ^^^^^^^^^^^^^^^^^^^^^^^^. - Clang limits the size of arrays it will try to evaluate at compile time; to avoid memory exhaustion.; This limit can be modified",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst:45537,assert,assertion,45537,interpreter/llvm-project/clang/docs/ReleaseNotes.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst,1,['assert'],['assertion']
Testability,"hich they can be linked later. **include**. This subdirectory should contain any header files that are global to your; project. By global, we mean that they are used by more than one library or; executable of your project. By placing your header files in **include**, they will be found; automatically by the LLVM build system. For example, if you have a file; **include/jazz/note.h**, then your source files can include it simply with; **#include ""jazz/note.h""**. **tools**. This subdirectory should contain all of your source code for executables.; For each program that you build, you will have one directory in **tools**; that will contain that program's source code. **test**. This subdirectory should contain tests that verify that your code works; correctly. Automated tests are especially useful. Currently, the LLVM build system provides basic support for tests. The LLVM; system provides the following:. * LLVM contains regression tests in ``llvm/test``. These tests are run by the; :doc:`Lit <CommandGuide/lit>` testing tool. This test procedure uses ``RUN``; lines in the actual test case to determine how to run the test. See the; :doc:`TestingGuide` for more details. * LLVM contains an optional package called ``llvm-test``, which provides; benchmarks and programs that are known to compile with the Clang front; end. You can use these programs to test your code, gather statistical; information, and compare it to the current LLVM performance statistics. Currently, there is no way to hook your tests directly into the ``llvm/test``; testing harness. You will simply need to find a way to use the source; provided within that directory on your own. Typically, you will want to build your **lib** directory first followed by your; **tools** directory. Writing LLVM Style Makefiles; ============================. The LLVM build system provides a convenient way to build libraries and; executables. Most of your project Makefiles will only need to define a few; variables. Below is a lis",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Projects.rst:3297,test,tests,3297,interpreter/llvm-project/llvm/docs/Projects.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Projects.rst,2,['test'],"['testing', 'tests']"
Testability,"highly recommended that; you use the Release configuration for this, since it will be used to build; another Clang. Because you need Clang and supporting libraries, you'll want; to build the ``all`` target (e.g. ``ninja all`` or ``make -j4 all``). 2. Configure a Clang build as above, but add the following CMake args:. - ``-DLLVM_BUILD_INSTRUMENTED=IR`` -- This causes us to build everything; with instrumentation.; - ``-DLLVM_BUILD_RUNTIME=No`` -- A few projects have bad interactions when; built with profiling, and aren't necessary to build. This flag turns them; off.; - ``-DCMAKE_C_COMPILER=/path/to/stage1/clang`` - Use the Clang we built in; step 1.; - ``-DCMAKE_CXX_COMPILER=/path/to/stage1/clang++`` - Same as above. In this build directory, you simply need to build the ``clang`` target (and; whatever supporting tooling your benchmark requires). 3. As mentioned above, this has two steps: gathering profile data, and then; massaging it into a useful form:. a. Build your benchmark using the Clang generated in step 2. The 'standard'; benchmark recommended is to run ``check-clang`` and ``check-llvm`` in your; instrumented Clang's build directory, and to do a full build of Clang/LLVM; using your instrumented Clang. So, create yet another build directory,; with the following CMake arguments:. - ``-DCMAKE_C_COMPILER=/path/to/stage2/clang`` - Use the Clang we built in; step 2.; - ``-DCMAKE_CXX_COMPILER=/path/to/stage2/clang++`` - Same as above. If your users are fans of debug info, you may want to consider using; ``-DCMAKE_BUILD_TYPE=RelWithDebInfo`` instead of; ``-DCMAKE_BUILD_TYPE=Release``. This will grant better coverage of; debug info pieces of clang, but will take longer to complete and will; result in a much larger build directory. It's recommended to build the ``all`` target with your instrumented Clang,; since more coverage is often better. b. You should now have a few ``*.profraw`` files in; ``path/to/stage2/profiles/``. You need to merge these using; ``llvm-profda",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToBuildWithPGO.rst:4716,benchmark,benchmark,4716,interpreter/llvm-project/llvm/docs/HowToBuildWithPGO.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToBuildWithPGO.rst,1,['benchmark'],['benchmark']
Testability,"his creates an `Event.root` file with 400 events, compressed, split,; and filled. See `$ROOTSYS/test/MainEvent.cxx` for more info. The person who designed the tree makes a shared library available to; you, which defines the classes needed. In this case, the classes are; Event, `EventHeader`, and Track and they are defined in the shared; library `libEvent.so`. The designer also gives you the `Event.h` file to; see the definition of the classes. You can locate `Event.h` in; `$ROOTSYS/test`, and if you have not yet built `libEvent.so`, please see; the instructions of how to build it (typing make in \$ROOTSYS/test is; enough). If you have already built it, you can now use it again. ### Creating a Class with MakeClass. First, we load the shared library and open `Event.root`. ``` {.cpp}; root[] .L libEvent.so; root[] TFile *f = new TFile(""Event.root"");; root[] f->ls();; TFile** Event.root TTree benchmark ROOT file; TFile* Event.root TTree benchmark ROOT file; KEY: TH1F htime;1 Real-Time to write versus time; KEY: TTree T;1 An example of a ROOT tree; ```. We can see there is a tree ""`T`"", and just to verify that we are working; with the correct one, we print the tree, which will show us the header; and branches. ``` {.cpp}; root[] T->Print();; ```. From the output of print we can see that the tree has one branch for; each data member of `Event`, `Track`, and `EventHeader`. Now we can use; `TTree::MakeClass` on our tree ""`T`"". `MakeClass` takes one parameter, a; string containing the name of the class to be made. In the command; below, the name of our class will be ""`MyClass`"". ``` {.cpp}; root[] T->MakeClass(""MyClass""); Files: MyClass.h and MyClass.C generated from Tree: T; ```. Cling informs us that it has created two files. `MyClass.`h contains the; class definition and `MyClass.C` contains the `MyClass::Loop()` method.; `MyClass` has more methods than just `Loop()`. The other methods are a; constructor, a destructor, `GetEntry()`, `LoadTree()`, `Notify()`,; `Cut()` and ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md:123338,benchmark,benchmark,123338,documentation/users-guide/Trees.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md,1,['benchmark'],['benchmark']
Testability,"his is automatically chosen to; match the number of detected available CPUs. .. option:: --config-prefix=NAME. Search for :file:`{NAME}.cfg` and :file:`{NAME}.site.cfg` when searching for; test suites, instead of :file:`lit.cfg` and :file:`lit.site.cfg`. .. option:: -D NAME[=VALUE], --param NAME[=VALUE]. Add a user defined parameter ``NAME`` with the given ``VALUE`` (or the empty; string if not given). The meaning and use of these parameters is test suite; dependent. .. _output-options:. OUTPUT OPTIONS; --------------. .. option:: -q, --quiet. Suppress any output except for test failures. .. option:: -s, --succinct. Show less output, for example don't show information on tests that pass.; Also show a progress bar, unless ``--no-progress-bar`` is specified. .. option:: -v, --verbose. Show more information on test failures, for example the entire test output; instead of just the test result. Each command is printed before it is executed. This can be valuable for; debugging test failures, as the last printed command is the one that failed.; Moreover, :program:`lit` inserts ``'RUN: at line N'`` before each; command pipeline in the output to help you locate the source line of; the failed command. .. option:: -vv, --echo-all-commands. Deprecated alias for -v. .. option:: -a, --show-all. Enable -v, but for all tests not just failed tests. .. option:: --no-progress-bar. Do not use curses based progress bar. .. option:: --show-unsupported. Show the names of unsupported tests. .. option:: --show-xfail. Show the names of tests that were expected to fail. .. _execution-options:. EXECUTION OPTIONS; -----------------. .. option:: --path=PATH. Specify an additional ``PATH`` to use when searching for executables in tests. .. option:: --vg. Run individual tests under valgrind (using the memcheck tool). The; ``--error-exitcode`` argument for valgrind is used so that valgrind failures; will cause the program to exit with a non-zero status. When this option is enabled, :program:`lit` wi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:3475,test,test,3475,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"his is equivalent to the following, where 2863311531 is the multiplicative; inverse of 3, and 1431655766 is ((2^32)-1)/3+1:; void bar(unsigned n) {; if (n * 2863311531U < 1431655766U); true();; }. The same transformation can work with an even modulo with the addition of a; rotate: rotate the result of the multiply to the right by the number of bits; which need to be zero for the condition to be true, and shrink the compare RHS; by the same amount. Unless the target supports rotates, though, that; transformation probably isn't worthwhile. The transformation can also easily be made to work with non-zero equality; comparisons: just transform, for example, ""n % 3 == 1"" to ""(n-1) % 3 == 0"". //===---------------------------------------------------------------------===//. Better mod/ref analysis for scanf would allow us to eliminate the vtable and a; bunch of other stuff from this example (see PR1604): . #include <cstdio>; struct test {; int val;; virtual ~test() {}; };. int main() {; test t;; std::scanf(""%d"", &t.val);; std::printf(""%d\n"", t.val);; }. //===---------------------------------------------------------------------===//. These functions perform the same computation, but produce different assembly. define i8 @select(i8 %x) readnone nounwind {; %A = icmp ult i8 %x, 250; %B = select i1 %A, i8 0, i8 1; ret i8 %B ; }. define i8 @addshr(i8 %x) readnone nounwind {; %A = zext i8 %x to i9; %B = add i9 %A, 6 ;; 256 - 250 == 6; %C = lshr i9 %B, 8; %D = trunc i9 %C to i8; ret i8 %D; }. //===---------------------------------------------------------------------===//. From gcc bug 24696:; int; f (unsigned long a, unsigned long b, unsigned long c); {; return ((a & (c - 1)) != 0) || ((b & (c - 1)) != 0);; }; int; f (unsigned long a, unsigned long b, unsigned long c); {; return ((a & (c - 1)) != 0) | ((b & (c - 1)) != 0);; }; Both should combine to ((a|b) & (c-1)) != 0. Currently not optimized with; ""clang -emit-llvm-bc | opt -O3"". //===--------------------------------------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt:20672,test,test,20672,interpreter/llvm-project/llvm/lib/Target/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt,1,['test'],['test']
Testability,"his makes the SparseBitVector much; more space efficient than BitVector when the set is sparse, as well as making; set operations O(number of set bits) instead of O(size of universe). The; downside to the SparseBitVector is that setting and testing of random bits is; O(N), and on large SparseBitVectors, this can be slower than BitVector. In our; implementation, setting or testing bits in sorted order (either forwards or; reverse) is O(1) worst case. Testing and setting bits within 128 bits (depends; on size) of the current bit is also O(1). As a general statement,; testing/setting bits in a SparseBitVector is O(distance away from last set bit). .. _dss_coalescingbitvector:. CoalescingBitVector; ^^^^^^^^^^^^^^^^^^^. The CoalescingBitVector container is similar in principle to a SparseBitVector,; but is optimized to represent large contiguous ranges of set bits compactly. It; does this by coalescing contiguous ranges of set bits into intervals. Searching; for a bit in a CoalescingBitVector is O(log(gaps between contiguous ranges)). CoalescingBitVector is a better choice than BitVector when gaps between ranges; of set bits are large. It's a better choice than SparseBitVector when find(); operations must have fast, predictable performance. However, it's not a good; choice for representing sets which have lots of very short ranges. E.g. the set; `{2*x : x \in [0, n)}` would be a pathological input. .. _utility_functions:. Useful Utility Functions; ========================. LLVM implements a number of general utility functions used across the; codebase. You can find the most common ones in ``STLExtras.h``; (`doxygen <https://llvm.org/doxygen/STLExtras_8h.html>`__). Some of these wrap; well-known C++ standard library functions, while others are unique to LLVM. .. _uf_iteration:. Iterating over ranges; ---------------------. Sometimes you may want to iterate over more than range at a time or know the; index of the index. LLVM provides custom utility functions to make that ea",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst:99115,log,log,99115,interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,1,['log'],['log']
Testability,"his needs to be extracted; into the `MathFuncs.h` file and the fully qualified name of the function; referencing that file should be used here instead. ## After Code Generation Support. Following is a code snippet from `RooPoisson` *after* it has AD support. ### Step 1. Refactor the `RooPoisson::evaluate()` Function. ``` {.cpp}; /// Implementation in terms of the TMath::Poisson() function. double RooPoisson::evaluate() const; {; double k = _noRounding ? x : floor(x);; if(_protectNegative && mean<0) {; RooNaNPacker np;; np.setPayload(-mean);; return np._payload;; }; return RooFit::Detail::MathFuncs::poisson(k, mean);; }; ```. Note that the `evaluate()` function was refactored in such a way that the; mathematical parts were moved to an inline function in a separate header file; named `MathFuncs`, so that Clad could see and differentiate that function.; The rest of the contents of the function remain unchanged. > All contents of the `evaluate()` function don't always need to be pulled; out, only the required parts (mathematical logic) should be moved to; `MathFuncs`. **What is MathFuncs?**. Moving away from the class-based hierarchy design, `MathFuncs.h` a simply; a flat file of function implementations. This file is required since Clad will not be able to see anything that is not; inlined and explicitly available to it during compilation (since it has to be; in the same translation). So other than of generating these functions on the; fly, your only other option is to place these functions in a separate header; file and make them inline. Theoretically, multiple header files can also be used and then mashed; together. > Directory path: [roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h](https://github.com/root-project/root/blob/master/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h). ### Step 2. Override RooAbsArg::translate(). **translate() Example 1:** Continuing our RooPoisson example:. To translate the `RooPoisson` class, create a translate function and in it; include",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/roofit_ad.md:11219,log,logic,11219,roofit/doc/developers/roofit_ad.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/roofit_ad.md,1,['log'],['logic']
Testability,"his script loops on all; events. For each event, the branch containing the number of tracks is; read. In case the number of tracks is less than 585, the full event is; read in memory. This test is obviously not possible in non-split mode.; In non-split mode, the full event must be read in memory. The times; reported in the table correspond to complete I/O operations necessary to; deal with **machine independent binary files**. On **Linux**, this also; includes byte-swapping operations. The ROOT file allows for direct; access to any event in the file and direct access to any part of an; event when split=1. Note also that the uncompressed file generated with split=0 is 48.7; Mbytes and only 47.17 Mbytes for the option split=1. The difference in; size is due to the object identification mechanism overhead when the; event is written to a single buffer. This overhead does not exist in; split mode because the branch buffers are optimized for homogeneous data; types. You can run the test programs on your architecture. The program; `Event` will report the write performance. You can measure the read; performance by executing the scripts `eventa` and `eventb`. The; performance depends not only of the processor type, but also of the disk; devices (local, NFS, AFS, etc.). ## Chains; \index{tree!chains}. A **`TChain`** object is a list of ROOT files containing the same tree.; As an example, assume we have three files called; `file1.root, file2.root, file3.root`. Each file contains one tree called; ""`T`"". We can create a chain with the following statements:. ``` {.cpp}; TChain chain(""T""); // name of the tree is the argument; chain.Add(""file1.root"");; chain.Add(""file2.root"");; chain.Add(""file3.root"");; ```. The name of the **`TChain`** will be the same as the name of the tree;; in this case it will be `""T"". Note that two `objects can have the same; name as long as they are not histograms in the same directory, because; there, the histogram names are used to build a hash table. The",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md:139859,test,test,139859,documentation/users-guide/Trees.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md,1,['test'],['test']
Testability,"hough it does not default to 80. The default rules can change between major; versions of black. In order to avoid unnecessary churn in the formatting rules,; we currently use black version 23.x in LLVM. When contributing a patch unrelated to formatting, you should format only the; Python code that the patch modifies. For this purpose, use the `darker; <https://pypi.org/project/darker/>`_ utility, which runs default black rules; over only the modified Python code. Doing so should ensure the patch will pass; the Python format checks in LLVM's pre-commit CI, which also uses darker. When; contributing a patch specifically for reformatting Python files, use black,; which currently only supports formatting entire files. Here are some quick examples, but see the black and darker documentation for; details:. .. code-block:: bash. $ pip install black=='23.*' darker # install black 23.x and darker; $ darker test.py # format uncommitted changes; $ darker -r HEAD^ test.py # also format changes from last commit; $ black test.py # format entire file. Instead of individual file names, you can specify directories to; darker, and it will find the changed files. However, if a directory is; large, like a clone of the LLVM repository, darker can be painfully; slow. In that case, you might wish to use git to list changed files.; For example:. .. code-block:: bash. $ darker -r HEAD^ $(git diff --name-only --diff-filter=d HEAD^). Mechanical Source Issues; ========================. Source Code Formatting; ----------------------. Commenting; ^^^^^^^^^^. Comments are important for readability and maintainability. When writing comments,; write them as English prose, using proper capitalization, punctuation, etc.; Aim to describe what the code is trying to do and why, not *how* it does it at; a micro level. Here are a few important things to document:. .. _header file comment:. File Headers; """""""""""""""""""""""". Every source file should have a header on it that describes the basic purpose of; the fil",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst:6261,test,test,6261,interpreter/llvm-project/llvm/docs/CodingStandards.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst,1,['test'],['test']
Testability,"hout; constraining it to a specific triple. **FileCheck-specific substitutions:**. ``%ProtectFileCheckOutput``; This should precede a ``FileCheck`` call if and only if the call's textual; output affects test results. It's usually easy to tell: just look for; redirection or piping of the ``FileCheck`` call's stdout or stderr. .. _Test-specific substitutions:. **Test-specific substitutions:**. Additional substitutions can be defined as follows:. - Lit configuration files (e.g., ``lit.cfg`` or ``lit.local.cfg``) can define; substitutions for all tests in a test directory. They do so by extending the; substitution list, ``config.substitutions``. Each item in the list is a tuple; consisting of a pattern and its replacement, which lit applies using python's; ``re.sub`` function.; - To define substitutions within a single test file, lit supports the; ``DEFINE:`` and ``REDEFINE:`` directives, described in detail below. So that; they have no effect on other test files, these directives modify a copy of the; substitution list that is produced by lit configuration files. For example, the following directives can be inserted into a test file to define; ``%{cflags}`` and ``%{fcflags}`` substitutions with empty initial values, which; serve as the parameters of another newly defined ``%{check}`` substitution:. .. code-block:: llvm. ; DEFINE: %{cflags} =; ; DEFINE: %{fcflags} =. ; DEFINE: %{check} = \; ; DEFINE: %clang_cc1 -verify -fopenmp -fopenmp-version=51 %{cflags} \; ; DEFINE: -emit-llvm -o - %s | \; ; DEFINE: FileCheck %{fcflags} %s. Alternatively, the above substitutions can be defined in a lit configuration; file to be shared with other test files. Either way, the test file can then; specify directives like the following to redefine the parameter substitutions as; desired before each use of ``%{check}`` in a ``RUN:`` line:. .. code-block:: llvm. ; REDEFINE: %{cflags} = -triple x86_64-apple-darwin10.6.0 -fopenmp-simd; ; REDEFINE: %{fcflags} = -check-prefix=SIMD; ; RUN: %{che",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:29149,test,test,29149,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"hreads to use to process chunks. Set to 1 to disable parallelism. .. option:: --max-pass-iterations=<int>. Maximum number of times to run the full set of delta passes (default=5). .. option:: --mtriple=<string> . Set the target triple. .. option:: --preserve-debug-environment. Don't disable features used for crash debugging (crash reports, llvm-symbolizer and core dumps). .. option:: --print-delta-passes . Print list of delta passes, passable to --delta-passes as a comma separated liste. .. option:: --skip-delta-passes=<string> . Delta passes to not run, separated by commas. By default, run all delta passes. .. option:: --starting-granularity-level=<uint>. Number of times to divide chunks prior to first test. Note : Granularity refers to the level of detail at which the reduction process operates.; A lower granularity means that the reduction process operates at a more coarse-grained level,; while a higher granularity means that it operates at a more fine-grained level. .. option:: --test=<string> . Name of the interesting-ness test to be run. .. option:: --test-arg=<string> . Arguments passed onto the interesting-ness test. .. option:: --verbose . Print extra debugging information.; ; .. option:: --write-tmp-files-as-bitcode . Always write temporary files as bitcode instead of textual IR. .. option:: -x={ir|mir}. Input language as ir or mir. EXIT STATUS; ------------. :program:`llvm-reduce` returns 0 under normal operation. It returns a non-zero; exit code if there were any errors. EXAMPLE; -------. :program:`llvm-reduce` can be used to simplify a test that causes a; compiler crash. For example, let's assume that `opt` is crashing on the IR file; `test.ll` with error message `Assertion failed at line 1234 of; WhateverFile.cpp`, when running at `-O2`. The test case of `test.ll` can be reduced by invoking the following; command:. .. code-block:: bash. $(LLVM_BUILD_FOLDER)/bin/llvm-reduce --test=script.sh <path to>/test.ll. The shell script passed to the option `test` ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-reduce.rst:2321,test,test,2321,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-reduce.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-reduce.rst,1,['test'],['test']
Testability,"ht look something like this:; lit.py: lit.cfg:152: note: using clang: 'C:\Tools\llvm\bin\Release\clang.EXE'; -- Testing: Testing: 2534 tests, 4 threads --; Testing: 0 .. 10.. 20.. 30.. 40.. 50.. 60.. 70.. 80.. 90..; Testing Time: 81.52s; Passed : 2503; Expectedly Failed: 28; Unsupported : 3. The statistic, ""Failed"" (not shown if all tests pass), is the important one. Testing changes affecting libc++. Some changes in Clang affect libc++,; for example:. Changing the output of Clang's diagnostics.; Changing compiler builtins, especially the builtins used for type traits; or replacements of library functions like std::move or; std::forward. After adjusting libc++ to work with the changes, the next revision will be; tested by libc++'s; pre-commit CI. For most configurations, the pre-commit CI uses a recent; nightly build of Clang from LLVM's main; branch. These configurations do not use the Clang changes in the; patch. They only use the libc++ changes.; The ""Bootstrapping build"" builds Clang and uses it to build and; test libc++. This build does use the Clang changes in the patch.; Libc++ supports multiple versions of Clang. Therefore when a patch changes; the diagnostics it might be required to use a regex in the; ""expected"" tests to make it pass the CI.; Libc++ has more; ; documentation about the pre-commit CI. For questions regarding; libc++, the best place to ask is the #libcxx channel on; LLVM's Discord server. Creating Patch Files. To contribute changes to Clang see; LLVM's Getting Started page. LLVM IR Generation. The LLVM IR generation part of clang handles conversion of the; AST nodes output by the Sema module to the LLVM Intermediate; Representation (IR). Historically, this was referred to as; ""codegen"", and the Clang code for this lives; in lib/CodeGen.; The output is most easily inspected using the -emit-llvm; option to clang (possibly in conjunction with -o -). You; can also use -emit-llvm-bc to write an LLVM bitcode file; which can be processed by the suite ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html:8546,test,test,8546,interpreter/llvm-project/clang/www/hacking.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html,1,['test'],['test']
Testability,"htSumName = ctx.makeValidVarName(GetName()) + ""WeightSum"";; std::string resName = ctx.makeValidVarName(GetName()) + ""Result"";; ctx.addResult(this, resName);; ctx.addToGlobalScope(""double "" + weightSumName + "" = 0.0;\n"");; ctx.addToGlobalScope(""double "" + resName + "" = 0.0;\n"");. const bool needWeightSum = _expectedEvents || _simCount > 1;. if (needWeightSum) {; auto scope = ctx.beginLoop(this);; ctx.addToCodeBody(weightSumName + "" += "" + ctx.getResult(*_weightVar) + "";\n"");; }. if (_simCount > 1) {; std::string simCountStr = std::to_string(static_cast<double>(_simCount));; ctx.addToCodeBody(resName + "" += "" + weightSumName + "" * std::log("" + simCountStr + "");\n"");; }; ... }; ```. > Source: - [RooNLLVarNew](https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooNLLVarNew.cxx). The complexity of the `RooNLLVarNew::translate()` function in this example can; be attributed to the more complex scenarios/operations specific to the; computation of negative log-likelihood (NLL) values for probability density; functions (PDFs) in RooFit, especially for simultaneous fits (multiple; simultaneous PDFs being considered) and binned likelihoods (adding further; complexity). In this example, the `RooNLLVarNew::translate()` function generates code to; compute the Negative Log likelihood (NLL). We can see that the intermediate; result variable `resName` is added to the context so that it can be accessed; and used in the generated code. This variable is made available globally; (using `addToGlobalScope()`). If a weight sum is needed, then it creates a loop, and `weightSumName` is; accumulated with the weight variable. Otherwise, if there are multiple; simultaneous PDFs, then it adds a term to the result that scales with the; logarithm of the count of simultaneous PDFs. The rest of the function body; (including the loop scope with NLL computation) has omitted from this example; to keep it brief. Helper functions:. - `makeValidVarName()` helps get a valid name from the",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/roofit_ad.md:16167,log,log-likelihood,16167,roofit/doc/developers/roofit_ad.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/roofit_ad.md,1,['log'],['log-likelihood']
Testability,"html#a1ca9a94bece4767cac82968910afa02e) action (that fills a TGraph object) to properly handle containers and non-container types.; - The [`RCsvDS`](https://root.cern.ch/doc/master/classROOT_1_1RDF_1_1RCsvDS.html) class now allows users to specify column types, and can properly read empty entries of csv files.; - Fixed a bug where the `Display` operation would not show the correct amount of entries requested by the user if called; together with other operations ([PR](https://github.com/root-project/root/pull/11398)).; - Requesting variations for `Stats` results with `VariationsFor` is now supported.; - Factory functions for RDataFrames reading CSV files, RNTuples, Arrow tables, etc. have been renamed in order to; increase consistency, e.g. `MakeCsvDataFrame` is now `FromCSV`. The old wording is still available but deprecated.; - The precision of `Sum`s and `Mean`s of single-precision floating point values has been greatly improved by employing; Kahan summations.; - The content of [execution logs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#rdf-logging) from RDataFrame; has been streamlined in order to make them more useful. ### Distributed RDataFrame. - Add support for systematic variations (e.g. `Vary` and `VariationsFor` operations) in distributed mode.; - If an instant action (e.g. `Snapshot`) is purposely made lazy by the user, distributed RDataFrame now respects this; and avoids triggering the computations right away.; - The algorithm for automatic splitting of the input dataset has been reworked, bringing the startup time cost of; distributed RDataFrame close to zero.; - A histogram model (name, title, binning) for the `Histo*D` actions is now required in distributed mode. See the; [relative PR](https://github.com/root-project/root/pull/10368) for more discussion.; - The performance of distributed RDataFrame for large computation graphs (>1000 operations) has been greatly improved.; - If the `npartitions` argument is not set by the user, the defau",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v628/index.md:12847,log,logs,12847,README/ReleaseNotes/v628/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v628/index.md,1,['log'],['logs']
Testability,"hts are ignored in the training (but are included for testing and performance evaluation). TrainingMethod No BP BP, GA, BFGS Train with Back-Propagation (BP), BFGS Algorithm (BFGS), or Genetic Algorithm (GA - slower and worse). LearningRate No 0.02 − ANN learning rate parameter. DecayRate No 0.01 − Decay rate for learning parameter. TestRate No 10 − Test for overtraining performed at each #th epochs. EpochMonitoring No False − Provide epoch-wise monitoring plots according to TestRate (caution: causes big ROOT output file!). Sampling No 1 − Only 'Sampling' (randomly selected) events are trained each epoch. SamplingEpoch No 1 − Sampling is used for the first 'SamplingEpoch' epochs, afterwards, all events are taken for training. SamplingImportance No 1 − The sampling weights of events in epochs which successful (worse estimator than before) are multiplied with SamplingImportance, else they are divided. SamplingTraining No True − The training sample is sampled. SamplingTesting No False − The testing sample is sampled. ResetStep No 50 − How often BFGS should reset history. Tau No 3 − LineSearch size step. BPMode No sequential sequential, batch Back-propagation learning mode: sequential or batch. BatchSize No -1 − Batch size: number of events/batch, only set if in Batch Mode, -1 for BatchSize=number_of_events. ConvergenceImprove No 1e-30 − Minimum improvement which counts as improvement (<0 means automatic convergence check is turned off). ConvergenceTests No -1 − Number of steps (without improvement) required for convergence (<0 means automatic convergence check is turned off). UseRegulator No False − Use regulator to avoid over-training. UpdateLimit No 10000 − Maximum times of regulator update. CalculateErrors No False − Calculates inverse Hessian matrix at the end of the training to be able to calculate the uncertainties of an MVA value. WeightRange No 1 − Take the events for the estimator calculations from small deviations from the desired value to large deviations on",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html:23168,test,testing,23168,documentation/tmva/UsersGuide/optionRef.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html,1,['test'],['testing']
Testability,"https://github.com/llvm/llvm-project/blob/main/clang/examples/Attribute/Attribute.cpp>`_. Putting it all together; =======================. Let's look at an example plugin that prints top-level function names. This; example is checked into the clang repository; please take a look at; the `latest version of PrintFunctionNames.cpp; <https://github.com/llvm/llvm-project/blob/main/clang/examples/PrintFunctionNames/PrintFunctionNames.cpp>`_. Running the plugin; ==================. Using the compiler driver; --------------------------. The Clang driver accepts the `-fplugin` option to load a plugin.; Clang plugins can receive arguments from the compiler driver command; line via the `fplugin-arg-<plugin name>-<argument>` option. Using this; method, the plugin name cannot contain dashes itself, but the argument; passed to the plugin can. .. code-block:: console. $ export BD=/path/to/build/directory; $ make -C $BD CallSuperAttr; $ clang++ -fplugin=$BD/lib/CallSuperAttr.so \; -fplugin-arg-call_super_plugin-help \; test.cpp. If your plugin name contains dashes, either rename the plugin or used the; cc1 command line options listed below. Using the cc1 command line; --------------------------. To run a plugin, the dynamic library containing the plugin registry must be; loaded via the `-load` command line option. This will load all plugins; that are registered, and you can select the plugins to run by specifying the; `-plugin` option. Additional parameters for the plugins can be passed with; `-plugin-arg-<plugin-name>`. Note that those options must reach clang's cc1 process. There are two; ways to do so:. * Directly call the parsing process by using the `-cc1` option; this; has the downside of not configuring the default header search paths, so; you'll need to specify the full system path configuration on the command; line.; * Use clang as usual, but prefix all arguments to the cc1 process with; `-Xclang`. For example, to run the ``print-function-names`` plugin over a source file",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangPlugins.rst:4986,test,test,4986,interpreter/llvm-project/clang/docs/ClangPlugins.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangPlugins.rst,1,['test'],['test']
Testability,"https://reviews.llvm.org/D137933#inline-1389904. Use a standard (or LLVM) map with typeinfo (would need a specialization; to expose equality and hasher) for the allocators and the creation; functions could be a function template. //===----------------------------------------------------------------------===//; // Use a lit test instead of a unit test for the logical readers.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324376. As the DebugInfoLogicalView library is sufficiently exposed via the; llvm-debuginfo-analyzer tool, follow the LLVM general approach and; use LIT tests to validate the logical readers. Convert the unitests:; llvm-project/llvm/unittests/DebugInfo/LogicalView/CodeViewReaderTest.cpp; llvm-project/llvm/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp. into LIT tests:; llvm-project/llvm/test/DebugInfo/LogicalView/CodeViewReader.test; llvm-project/llvm/test/DebugInfo/LogicalView/ELFReader.test. //===----------------------------------------------------------------------===//; // Eliminate calls to 'getInputFileDirectory()' in the unit tests.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324359. Rewrite the unittests 'LFReaderTest' and 'CodeViewReaderTest'to eliminate; the call:. getInputFileDirectory(). as use of that call is discouraged. See: Use a lit test instead of a unit test for the logical readers. //===----------------------------------------------------------------------===//; // Fix mismatch between %d/%x format strings and uint64_t type.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137400; https://github.com/llvm/llvm-project/issues/58758. Incorrect printing of uint64_t on 32-bit platforms.; Add the PRIx64 specifier to the printing code (format()). //===----------------------------------------------------------------------=",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:1846,test,test,1846,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,1,['test'],['test']
Testability,"hub. A pull request (PR) should contain a set focused changes; organized in one or more [atomic commits](https://en.wikipedia.org/wiki/Atomic_commit#Revision_control).; PRs should be well-documented and well-tested in order to allow other community; members to use, maintain and modify. If the PR contains performance-critical; code consider writing a benchmark against the [rootbench repository](https://github.com/root-project/rootbench). ## Quality Assurance. Each contribution should contain developer documentation in the form of code; comments and sufficient amount of tests in the form of unit and/or integration; tests. Unit tests are relatively small and quick programs focused to check if; small pieces of code and API work as expected. Integration tests are checks; which ensure the synergy between different (unit tested) components. Put in; practice, unit tests verify (member) function behavior whereas integration tests; check classes and their cooperation. The boundary between both kinds of testing; is blurred. ROOT has support for both kinds of tests in the [roottest repository](https://github.com/root-project/roottest); and supports ""inline"" unit tests in each component's `test` folder. Unit testing; uses the [GTest and GMock](https://github.com/google/googletest) infrastructure; along with small ROOT-specific extensions located in; [TestSupport](../core/test_support/). The documentation of GTest; and GMock is rather extensive and we will describe some of the features of; ROOT::TestSupport. In order to write an inline unit test, add a new file in the; nearest to the tested component's `test` folder and call `ROOT_ADD_GTEST` in the; `CMakeLists.txt` file. In many cases using standard GTest facility is sufficient to write a good test.; However, we disallow error messages in gtests, or sometimes we want to test the; error conditions of an interface and its diagnostics. For example,. ```cpp. void MyROOTFunc(unsigned x); {; if (x == 0) {; Error(""MyROOTFunc"", ""x shoul",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/DEVELOPMENT.md:1238,test,testing,1238,README/DEVELOPMENT.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/DEVELOPMENT.md,1,['test'],['testing']
Testability,"i-dimensional function objects. It can wrap all the following types:; * Any C++ callable object implementing `double operator()( const double * )`.; * A free C function of type `double ()(const double * )`.; * A member function with the correct signature like `Foo::Eval(const double * )`. In this case one pass the object pointer and a pointer to the member function `(&Foo::Eval)`. The function dimension is required when constructing the functor. Example of using `Functor`:; ```{.cpp}; #include ""Math/Functor.h"". class MyFunction {. public:; double operator()(const double *x) const {; return x[0]+x[1];; }. double Eval(const double * x) const { return x[0]+x[1]; }; };. double freeFunction(const double * x ); {; return x[0]+x[1];; }. int main(); {; // test directly calling the function object; MyFunction myf;. // test from a free function pointer; ROOT::Math::Functor f1(&freeFunction,2);. // test from function object; ROOT::Math::Functor f2(myf,2);. // test from a member function; ROOT::Math::Functor f3(&myf,&MyFunction::Eval,2);. double x[] = {1,2};. cout << f1(x) << endl;; cout << f2(x) << endl;; cout << f3(x) << endl;. return 0;; }; ```. #### Wrapping Multi-dimensional Gradient Functions. The class `ROOT::Math::GradFunctor` is used to wrap in a very C++ callable object to make gradient functions. It can be constructed in three different way:; * From an object implementing both `double operator()( const double * )` for the function evaluation and `double Derivative(const double *, int icoord)` for the partial derivatives.; * From an object implementing any member function like `Foo::XXX(const double *)` for the function evaluation and any member function like `Foo::XXX(const double *, int icoord)` for the partial derivatives.; * From an function object implementing `double operator()( const double * )` for the function evaluation and another function object implementing `double operator() (const double *, int icoord)`; for the partial derivatives. The function dimensio",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/MathLibraries.md:45866,test,test,45866,documentation/users-guide/MathLibraries.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/MathLibraries.md,1,['test'],['test']
Testability,"i32 2, !""Debug Info Version"", i32 3}; !6 = distinct !DISubprogram(name: ""f"", linkageName: ""f"", scope: null, file: !1, line: 1, type: !7, isLocal: false, isDefinition: true, scopeLine: 1, isOptimized: true, unit: !0, retainedNodes: !8); !7 = !DISubroutineType(types: !2); !8 = !{!9, !11}; !9 = !DILocalVariable(name: ""1"", scope: !6, file: !1, line: 1, type: !10); !10 = !DIBasicType(name: ""ty64"", size: 64, encoding: DW_ATE_unsigned); !11 = !DILocalVariable(name: ""2"", scope: !6, file: !1, line: 3, type: !10); !12 = !DILocation(line: 1, column: 1, scope: !6); !13 = !DILocation(line: 2, column: 1, scope: !6); !14 = !DILocation(line: 3, column: 1, scope: !6); !15 = !DILocation(line: 4, column: 1, scope: !6); !16 = !DILocation(line: 5, column: 1, scope: !6). Using ``debugify``; ^^^^^^^^^^^^^^^^^^. A simple way to use ``debugify`` is as follows:. .. code-block:: bash. $ opt -debugify -pass-to-test -check-debugify sample.ll. This will inject synthetic DI to ``sample.ll`` run the ``pass-to-test`` and; then check for missing DI. The ``-check-debugify`` step can of course be; omitted in favor of more customizable FileCheck directives. Some other ways to run debugify are available:. .. code-block:: bash. # Same as the above example.; $ opt -enable-debugify -pass-to-test sample.ll. # Suppresses verbose debugify output.; $ opt -enable-debugify -debugify-quiet -pass-to-test sample.ll. # Prepend -debugify before and append -check-debugify -strip after; # each pass on the pipeline (similar to -verify-each).; $ opt -debugify-each -O2 sample.ll. In order for ``check-debugify`` to work, the DI must be coming from; ``debugify``. Thus, modules with existing DI will be skipped. ``debugify`` can be used to test a backend, e.g:. .. code-block:: bash. $ opt -debugify < sample.ll | llc -o -. There is also a MIR-level debugify pass that can be run before each backend; pass, see:; :ref:`Mutation testing for MIR-level transformations<MIRDebugify>`. ``debugify`` in regression tests; ^^^^^^^^^^^^^^^^^",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst:12196,test,test,12196,interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,1,['test'],['test']
Testability,"iables, which override; CMake/project defaults:. - **CMAKE_BUILD_TYPE=Release**: build in optimized mode, which is; (surprisingly) the fastest option. If you want to run under a debugger, you should use the default Debug; (which is totally unoptimized, and will lead to >10x slower test; runs) or RelWithDebInfo which is a halfway point.; **CMAKE_BUILD_TYPE** affects code generation only, assertions are; on by default regardless! **LLVM_ENABLE_ASSERTIONS=Off** disables; them. - **LLVM_ENABLE_PROJECTS=clang**: this lists the LLVM subprojects; you are interested in building, in addition to LLVM itself. Multiple; projects can be listed, separated by semicolons, such as ""clang;; lldb"".In this example, we'll be making a change to Clang, so we; should build it. Finally, create a symlink (or a copy) of; llvm-project/build/compile-commands.json into llvm-project/:. .. code:: console. $ ln -s build/compile_commands.json ../. (This isn't strictly necessary for building and testing, but allows; tools like clang-tidy, clang-query, and clangd to work in your source; tree). Build and test; --------------. Finally, we can build the code! It's important to do this first, to; ensure we're in a good state before making changes. But what to build?; In ninja, you specify a **target**. If we just want to build the clang; binary, our target name is ""clang"" and we run:. .. code:: console. $ ninja clang. The first time we build will be very slow - Clang + LLVM is a lot of; code. But incremental builds are fast: ninja will only rebuild the parts; that have changed. When it finally finishes you should have a working; clang binary. Try running:. .. code:: console. $ bin/clang --version. There's also a target for building and running all the clang tests:. .. code:: console. $ ninja check-clang. This is a common pattern in LLVM: check-llvm is all the checks for core,; other projects have targets like check-lldb. Making changes; ==============. Edit; ----. We need to find the file containing the er",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst:4355,test,testing,4355,interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,1,['test'],['testing']
Testability,"ial binaries; to the server, and will be the minimum tests *necessary* for the release to; proceed. This will obviously not cover all OSs and distributions, so additional community; validation is important. However, if community input is not reached before the; release is out, all bugs reported will have to go on the next stable release. The official release managers are:. * Even releases: Tom Stellard (tstellar@redhat.com); * Odd releases: Tobias Hieta (tobias@hieta.se). The official release testers are volunteered from the community and have; consistently validated and released binaries for their targets/OSs. To contact; them, you should post on the `Discourse forums (Project; Infrastructure - Release Testers). <https://discourse.llvm.org/c/infrastructure/release-testers/66>`_. The official testers list is in the file ``RELEASE_TESTERS.TXT``, in the ``LLVM``; repository. Community Testing; -----------------. Once all testing has been completed and appropriate bugs filed, the release; candidate tarballs are put on the website and the LLVM community is notified. We ask that all LLVM developers test the release in any the following ways:. #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang``; binary. Build LLVM. Run ``make check`` and the full LLVM test suite (``make; TEST=nightly report``). #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the ``clang`` sources. Compile; everything. Run ``make check`` and the full LLVM test suite (``make; TEST=nightly report``). #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang``; binary. Build whole programs with it (ex. Chromium, Firefox, Apache) for; your platform. #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang``; binary. Build *your* programs with it and check for conformance and; performance regressions. #. Run the :doc:`release process <ReleaseProcess>`, if your platform is; *different* than that which is officially supported, and report back errors; only if t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst:7978,test,testing,7978,interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,1,['test'],['testing']
Testability,"ial();; };. trivial_non_POD tnp[2];; non_trivial nt[2];. int compare1(const void *a, const void *b);. int compare2(const void *a, const void *b);. void test() {; qsort(tnp, 2, sizeof(trivial_non_POD), compare1); // ok; qsort(nt, 2, sizeof(non_trivial), compare2); // warn; }. undefbehavior.ThrowWhileCopy; (C++); Undefined behavior: copy constructor/assignment operator can throw an exception.; The effects are undefined if an exception is thrown. class C {; public:; int i, j;; C (const C &c) {; i = c.i;; throw 1; // warn; j = c.j;; };; };. class C {; public:; int i, j;; C &operator=(const C &c) {; i = c.i;; throw 1; // warn; j = c.j;; };; };. undefbehavior.ValarrayArgBound; (C++); Undefined behavior: the value of the n argument passed; to valarray constructor is greater than the number of values; pointed to by the first argument (source).; Source: C++03 26.3.2.1p4; C++11 26.6.2.2p4. #include <valarray>. struct S {; int i;; S(int ii) : i(ii) {};; };. void test(void) {; S s[] = { S(1), S(2) };; std::valarray<S> v(s,3); // warn; }. undefbehavior.ValarrayLengthDiffer; (C++); Undefined behavior: valarray operands are of different length.; Source: C++03 26.3.2.2p1, 26.3.2.6p3, 26.3.3.1p3, 26.3.3.2p3;; C++11 defined (26.6.2.3p1), 26.6.2.7p3, 26.6.3.1p3,; 26.6.3.2p3. // C++03; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a = b; // warn; b.resize(1);; a = b; // ok; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a *= b; // warn; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; a = a + b; // warn; }. // C++03, C++11; #include <valarray>. void test(void) {; std::valarray<int> a(0, 1), b(0, 2);; std::valarray<bool> c(false, 1);; c = a == b; // warn; }. undefbehavior.ValarrayZeroLength; (C++); Undefined behavior: calling sum()/min()/; max() methods of a zero length valarray the behavior is; undefined.; Source: C++03 26.3.2.7p2, p3, p4; C++11 26.6.2.8p5,",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:15793,test,test,15793,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"ials.; # To add a new requirement, add a glob expression that's named requires_<packageName>,; # and add it to the list ""fixtureLists"" below.; file(GLOB requires_numpy RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}; dataframe/df026_AsNumpyArrays.py; dataframe/df032_RDFFromNumpy.py; fit/combinedFit.py; fit/multifit.py; roofit/rf409_NumPyPandasToRooFit.py); file(GLOB requires_numba RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} pyroot/pyroot004_NumbaDeclare.py); file(GLOB requires_pandas RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}; dataframe/df026_AsNumpyArrays.py; roofit/rf409_NumPyPandasToRooFit.py); file(GLOB requires_keras RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/keras/*.py); file(GLOB requires_torch RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/pytorch/*.py); file(GLOB requires_xgboost RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/tmva10*.py); set(fixtureLists requires_numpy requires_numba requires_pandas requires_keras requires_xgboost requires_torch). # Now set up all the tests; foreach(t ${pytutorials}); if (${t} IN_LIST returncode_1); set(rc 255); else(); set(rc 0); endif(). set(labels tutorial); if(${t} IN_LIST long_running); list(APPEND labels longtest); endif(); if(${t} IN_LIST multithreaded); list(APPEND labels multithreaded); # If this is not a TMVA tutorial, we want to limit the size of the thread; # pool in case the tutorial invokes ROOT::EnableImplicitMT(), which by; # default creates a thread pool of the size of the total number of cores.; if(${t} IN_LIST multithreaded_all_cores); set(setThreadPoolSize "".enableImplicitMTWrapper.py""); set(thisTestPoolSize ${NProcessors}); endif(); else(); unset(setThreadPoolSize); unset(thisTestPoolSize); endif(). string(REPLACE "".py"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). set(tutorial_name tutorial-${tname}-py). list(FIND pyexp_fail ${tutorial_name} index); if(index EQUAL -1); set(py_will_fail """"); else(); set(py_will_fail ${PYTESTS_WILLFAIL}); endif(). # Test if this tutorial is requiring any fixture; unset(python_deps); foreach(fix",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:32975,test,tests,32975,tutorials/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt,1,['test'],['tests']
Testability,"ian, and Likelihood intervals for a simple number counting experiment; with uncertainty on signal and background rates.; rs301_splot.C Demonstrates use of RooStats sPlot; implementation; rs401c_FeldmanCousins.C Demonstrates use of; FeldmanCousins interval calculator with a Poisson problem, reproduces; results from table IV and V of the original; paper�Phys.Rev.D57:3873-3889,1998.; rs401d_FeldmanCousins.C Demonstrates use of; FeldmanCousins interval calculator with the neutrino oscillation toy; example described in the original paper�Phys.Rev.D57:3873-3889,1998.; Reproduces figure 12.; rs_bernsteinCorrection.C Demonstrates use of; BernsteinCorrection class, which corrects a nominal PDF with a polynomial; to agree with observed or simulated data. TestStatistic interface and implementations; We added a new interface class called TestStatistic. It defines the; method Evaluate(data, parameterPoint), which returns a double. �This; class can be used in�conjunction�with the ToyMCSampler class to generate; sampling distributions for a user-defined test statistic. �; The following concrete implementations of the TestStatistic interface; are currently available. ProfileLikelihoodTestStatReturns the log of profile; likelihood ratio. �Generally a powerful test statistic. ; NumEventsTestStatReturns the number of events in the; dataset. �Useful for number counting experiments.; DebuggingTestStat Simply returns a uniform random number; between 0,1. �Useful for debugging. SamplingDistribution and the�TestStatSampler interface and; implementations; We introduced a ``result'' or data model class called; SamplingDistribution, which holds the sampling distribution of an; arbitrary real valued test statistic. �The class also can return the; inverse of the cumulative distribution function (with or without; interpolation). �; We introduced an interface for any tool that can produce a; SamplingDistribution, called TestStatSampler. �The interface is; essentially GetSamplingDistribution(parame",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v524/index.html:26097,test,test,26097,roofit/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v524/index.html,1,['test'],['test']
Testability,ib/hwasan; - `30`; - `9`; - `21`; - :part:`30%`; * - compiler-rt/lib/interception; - `8`; - `1`; - `7`; - :part:`12%`; * - compiler-rt/lib/interception/tests; - `3`; - `1`; - `2`; - :part:`33%`; * - compiler-rt/lib/lsan; - `20`; - `4`; - `16`; - :part:`20%`; * - compiler-rt/lib/memprof; - `31`; - `29`; - `2`; - :part:`93%`; * - compiler-rt/lib/memprof/tests; - `2`; - `2`; - `0`; - :good:`100%`; * - compiler-rt/lib/msan; - `18`; - `4`; - `14`; - :part:`22%`; * - compiler-rt/lib/msan/tests; - `4`; - `0`; - `4`; - :none:`0%`; * - compiler-rt/lib/orc; - `21`; - `16`; - `5`; - :part:`76%`; * - compiler-rt/lib/orc/unittests; - `10`; - `9`; - `1`; - :part:`90%`; * - compiler-rt/lib/profile; - `6`; - `0`; - `6`; - :none:`0%`; * - compiler-rt/lib/safestack; - `3`; - `1`; - `2`; - :part:`33%`; * - compiler-rt/lib/sanitizer_common; - `167`; - `29`; - `138`; - :part:`17%`; * - compiler-rt/lib/sanitizer_common/symbolizer; - `2`; - `2`; - `0`; - :good:`100%`; * - compiler-rt/lib/sanitizer_common/tests; - `46`; - `12`; - `34`; - :part:`26%`; * - compiler-rt/lib/scudo; - `20`; - `0`; - `20`; - :none:`0%`; * - compiler-rt/lib/scudo/standalone; - `49`; - `48`; - `1`; - :part:`97%`; * - compiler-rt/lib/scudo/standalone/benchmarks; - `1`; - `1`; - `0`; - :good:`100%`; * - compiler-rt/lib/scudo/standalone/fuzz; - `1`; - `1`; - `0`; - :good:`100%`; * - compiler-rt/lib/scudo/standalone/include/scudo; - `1`; - `1`; - `0`; - :good:`100%`; * - compiler-rt/lib/scudo/standalone/tests; - `25`; - `24`; - `1`; - :part:`96%`; * - compiler-rt/lib/scudo/standalone/tools; - `1`; - `1`; - `0`; - :good:`100%`; * - compiler-rt/lib/stats; - `3`; - `0`; - `3`; - :none:`0%`; * - compiler-rt/lib/tsan/benchmarks; - `6`; - `0`; - `6`; - :none:`0%`; * - compiler-rt/lib/tsan/dd; - `3`; - `0`; - `3`; - :none:`0%`; * - compiler-rt/lib/tsan/go; - `1`; - `0`; - `1`; - :none:`0%`; * - compiler-rt/lib/tsan/rtl; - `59`; - `14`; - `45`; - :part:`23%`; * - compiler-rt/lib/tsan/rtl-old; - `61`; - `13`; - `48`; - :part:`2,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:24220,test,tests,24220,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,ib/sanitizer_common/sanitizer_platform_limits_openbsd.h; compiler-rt/lib/sanitizer_common/sanitizer_stacktrace_printer.h; compiler-rt/lib/sanitizer_common/sanitizer_stack_store.cpp; compiler-rt/lib/sanitizer_common/sanitizer_stack_store.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_fuchsia.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_win.cpp; compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_markup_constants.h; compiler-rt/lib/sanitizer_common/sanitizer_thread_safety.h; compiler-rt/lib/sanitizer_common/sanitizer_tls_get_addr.h; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.cpp; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_symbolize.cpp; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compiler-rt/lib/scudo/standalone/checksum.h; compiler-rt/lib/scudo/standalone/chunk.h; compiler-rt/lib/scudo/standalone/combined.h; compiler-rt/lib/scudo/sta,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:99256,test,tests,99256,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,ib/sanitizer_common/sanitizer_stack_store.cpp; compiler-rt/lib/sanitizer_common/sanitizer_stack_store.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_fuchsia.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_win.cpp; compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_markup_constants.h; compiler-rt/lib/sanitizer_common/sanitizer_thread_safety.h; compiler-rt/lib/sanitizer_common/sanitizer_tls_get_addr.h; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.cpp; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_symbolize.cpp; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compiler-rt/lib/scudo/standalone/checksum.h; compiler-rt/lib/scudo/standalone/chunk.h; compiler-rt/lib/scudo/standalone/combined.h; compiler-rt/lib/scudo/standalone/common.cpp; compiler-rt/lib/scudo/standalone/common.h; compiler-rt/lib/scudo/standalone/crc32_hw.cpp; compiler-rt/lib/scudo/st,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:99393,test,tests,99393,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"ibraries and they can be instantiated using the plugin; manager. Implementations based on Unuran and Foam exist.; The tutorial math/multidimSampling.C is an example on; how to use this class. New class ROOT::Math::GoFTest for goodness of fit; tests of unbinned data; ; The class implements the Kolmogorov-Smirnov and; Anderson-Darling tests for two samples (data vs data ) and; one sample (data vs distribution); For the data vs distribution test, the user can compare using a; predefined distributions (Gaussian, LogNormal or Exponential) or; by passing a user defined PDF or CDF.; Example 1: perform a 2 sample GoF test from two arrays,; sample1[n1] and sample2[n2] containing the data; ; ROOT::Math::GoFTest goftest(n1, sample1, n2, sample2);; double pValueAD = goftest.AndersonDarling2SamplesTest();; double pValueKS = goftest.KolmogorovSmirnov2SamplesTest();; ; The class can return optionally also the test statistics instead of; the p value.; Example 2: perform a 1 sample test with a pre-defined; distribution starting from a data set sample[n]. ROOT::Math::GoFTest goftest(n, sample, ROOT::Math::GoFTest::kGaussian);; double pValueAD = goftest.AndersonDarlingTest();; double pValueKS = goftest.KolmogorovSmirnovTest();; . Example 3: perform a 1 sample test with a user-defined; distribution provided as cdf; ; ROOT::Math::Functor1D cdf_func(&ROOT::Math::landau_cdf);; ROOT::Math::GofTest goftest(n, sample, cdf_func, ROOT::Math::GoFTest::kCDF);; double pValueAD = goftest.AndersonDarlingTest();; . Example 4: perform a 1 sample test with a user-defined; distribution provided as pdf. Note that in this case to avoid; integration problems is sometimes recommended to give some; reasonable xmin and xmax values. xmin (and xmax) should however be; smaller (larger) than the minimum (maximum) data value.; ; ROOT::Math::Functor1D pdf_func(&ROOT::Math::landau_pdf);; double xmin = 5*TMath::Min_Element(n,sample);; double xmax = 5*TMath::Max_Element(n,sample);; ROOT::Math::GofTest goftest(n, sampl",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:1537,test,test,1537,math/doc/v528/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html,1,['test'],['test']
Testability,ibraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights).,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2895,test,testPoolingLayerCudnn,2895,tmva/tmva/test/DNN/CNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt,2,['test'],['testPoolingLayerCudnn']
Testability,"ibute_cf_returns_not_retained); #define CF_RETURNS_NOT_RETAINED __attribute__((cf_returns_not_retained)); #else; #define CF_RETURNS_NOT_RETAINED; #endif; #endif. Attribute 'ns_consumed'; (Clang-specific); The 'ns_consumed' attribute can be placed on a specific parameter in either; the declaration of a function or an Objective-C method. It indicates to the; static analyzer that a release message is implicitly sent to the; parameter upon completion of the call to the given function or method. The; Foundation framework defines a macro NS_RELEASES_ARGUMENT that; is functionally equivalent to the NS_CONSUMED macro shown below.; Example. $ cat test.m; #ifndef __has_feature // Optional.; #define __has_feature(x) 0 // Compatibility with non-clang compilers.; #endif. #ifndef NS_CONSUMED; #if __has_feature(attribute_ns_consumed); #define NS_CONSUMED __attribute__((ns_consumed)); #else; #define NS_CONSUMED; #endif; #endif. void consume_ns(id NS_CONSUMED x);. void test() {; id x = [[NSObject alloc] init];; consume_ns(x); // No leak!; }. @interface Foo : NSObject; + (void) releaseArg:(id) NS_CONSUMED x;; + (void) releaseSecondArg:(id)x second:(id) NS_CONSUMED y;; @end. void test_method() {; id x = [[NSObject alloc] init];; [Foo releaseArg:x]; // No leak!; }. void test_method2() {; id a = [[NSObject alloc] init];; id b = [[NSObject alloc] init];; [Foo releaseSecondArg:a second:b]; // 'a' is leaked, but 'b' is released.; }. Attribute 'cf_consumed'; (Clang-specific); The 'cf_consumed' attribute is practically identical to ns_consumed. The attribute can be placed on a; specific parameter in either the declaration of a function or an Objective-C; method. It indicates to the static analyzer that the object reference is; implicitly passed to a call to CFRelease upon completion of the call; to the given function or method. The CoreFoundation framework defines a macro; CF_RELEASES_ARGUMENT that is functionally equivalent to the; CF_CONSUMED macro shown below.; Operationally this attribute",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html:10496,test,test,10496,interpreter/llvm-project/clang/www/analyzer/annotations.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html,1,['test'],['test']
Testability,"ic features may depend on the particular test format). See; :ref:`execution-options` for more information. Finally, :program:`lit` also supports additional options for only running a; subset of the options specified on the command line, see; :ref:`selection-options` for more information. :program:`lit` parses options from the environment variable ``LIT_OPTS`` after; parsing options from the command line. ``LIT_OPTS`` is primarily useful for; supplementing or overriding the command-line options supplied to :program:`lit`; by ``check`` targets defined by a project's build system. :program:`lit` can also read options from response files which are specified as; inputs using the ``@path/to/file.rsp`` syntax. Arguments read from a file must; be one per line and are treated as if they were in the same place as the; original file referencing argument on the command line. A response file can; reference other response files. Users interested in the :program:`lit` architecture or designing a; :program:`lit` testing implementation should see :ref:`lit-infrastructure`. GENERAL OPTIONS; ---------------. .. option:: -h, --help. Show the :program:`lit` help message. .. option:: -j N, --workers=N. Run ``N`` tests in parallel. By default, this is automatically chosen to; match the number of detected available CPUs. .. option:: --config-prefix=NAME. Search for :file:`{NAME}.cfg` and :file:`{NAME}.site.cfg` when searching for; test suites, instead of :file:`lit.cfg` and :file:`lit.site.cfg`. .. option:: -D NAME[=VALUE], --param NAME[=VALUE]. Add a user defined parameter ``NAME`` with the given ``VALUE`` (or the empty; string if not given). The meaning and use of these parameters is test suite; dependent. .. _output-options:. OUTPUT OPTIONS; --------------. .. option:: -q, --quiet. Suppress any output except for test failures. .. option:: -s, --succinct. Show less output, for example don't show information on tests that pass.; Also show a progress bar, unless ``--no-progress-bar`` is sp",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:2259,test,testing,2259,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['testing']
Testability,"ic std::streambuf {; void f() {; seekpos(-1); // warn; }; };. #include <fstream>. void test() {; std::filebuf fb;; std::istream in(&fb);; std::filebuf::off_type pos(-1);; in.seekg(pos); // warn; }. different. Name, DescriptionExampleProgress. different.SuccessiveAssign; (C); Successive assign to a variable. int test() {; int i;; i=1;; i=2; // warn; return i;; }. different.NullDerefStmtOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {; int x;; };. struct S* f();. void test() {; struct S *p1 = f();; int x1 = p1->x; // warn; if (p1) {};. struct S *p2 = f();; int x2 = p2->x; // ok; }. different.NullDerefCondOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {int i;};. struct S* f();. void test() {; struct S *p = f();; if (p->i && p) {}; // warn; }. different.MultipleAccessors; (C++); Identical accessor bodies. Possibly a misprint. class A {; int i;; int j;; public:; int getI() { return i; }; int getJ() { return i; } // warn; };. class A {; int i;; int j;; public:; void setI(int& ii) { i = ii; }; void setJ(int& jj) { i = jj; } // warn; };. different.AccessorsForPublic; (C++); Accessors exist for a public class field. Should this field really be; public?. class A {; public:; int i; // warn; int getI() { return i; }; void setI(int& ii) { i = ii; }; };. different.LibFuncResultUnised; (C, C++); Calling a function ignoring its return value is of no use (create the list of; known system/library/API functions falling into this category). #include <vector>. void test() {; std::vector<int> v;; v.empty(); // warn; }. different.WrongVarForStmt; (C, C++); Wrong variable is possibly used in the loop/cond-expression of; the for statement. Did you mean; 'proper_variable_name'?. void test() {; int i = 0;; int j =",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:20403,test,test,20403,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"ic:; void setI(int& ii) { i = ii; }; void setJ(int& jj) { i = jj; } // warn; };. different.AccessorsForPublic; (C++); Accessors exist for a public class field. Should this field really be; public?. class A {; public:; int i; // warn; int getI() { return i; }; void setI(int& ii) { i = ii; }; };. different.LibFuncResultUnised; (C, C++); Calling a function ignoring its return value is of no use (create the list of; known system/library/API functions falling into this category). #include <vector>. void test() {; std::vector<int> v;; v.empty(); // warn; }. different.WrongVarForStmt; (C, C++); Wrong variable is possibly used in the loop/cond-expression of; the for statement. Did you mean; 'proper_variable_name'?. void test() {; int i = 0;; int j = 0;; for (i = 0; i < 3; j += 1); // warn; }. void test() {; int i = 0;; int j = 0;; for (int j = 0; i < 3; ++j); // warn; }. different.FloatingCompare; (C); Comparing floating point numbers may be not precise. #include <math.h>. double test() {; double b = sin(M_PI / 6.0);; if (b == 0.5) // warn; b = 0;; return b;; }. different.BitwiseOpBoolArg; (C, C++); Boolean value met at the left/right part of the bitwise &; or | operator.; Did you mean && (||) ?. int f();. void test() {; bool b = true;; if (b & f()) {} // warn; }. different.LabelInsideSwitch; (C); Possibly a misprint: label found inside a switch(); statement. void test(int c) {; switch(c){; case 1:; c += 1; break;; defalt: // warn (did you mean 'default'?); c -= 1; break;; }; }. different.IdenticalCondIfIf; (C); The conditions of two subsequent if statements are; identical. int test(int c) {; if (c > 5); c += 1;; if (c > 5) // warn; c -= 1;; return c;; }. different.LogicalOpUselessArg; (C); The second operand of a && operator has no impact on; expression result. void test(unsigned a) {; if (a<7 && a<10) {}; // warn; }. different.SameResLogicalExpr; (C); An expression is always evaluated to true/false. void test() {; int i = 0;; if (i != 0) {}; // warn; }. void test(int i) {",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:21666,test,test,21666,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"icates no reminders"");; if (reminderCount == 1) {; // Warning: Plural cases are not supported across all languages.; // Use a .stringsdict file instead; reminderText =; NSLocalizedString(@""1 Reminder"", @""Indicates single reminder"");; } else if (reminderCount >= 2) {; // Warning: Plural cases are not supported across all languages.; // Use a .stringsdict file instead; reminderText =; [NSString stringWithFormat:; NSLocalizedString(@""%@ Reminders"", @""Indicates multiple reminders""),; reminderCount];; }. Security Alpha Checkers. Name, DescriptionExample. alpha.security.ArrayBound; (C); Warn about buffer overflows (older checker). void test() {; char *s = """";; char c = s[1]; // warn; }. struct seven_words {; int c[7];; };. void test() {; struct seven_words a, *p;; p = &a; p[0] = a;; p[1] = a;; p[2] = a; // warn; }. // note: requires unix.Malloc or; // alpha.unix.MallocWithAnnotations checks enabled.; void test() {; int *p = malloc(12);; p[3] = 4; // warn; }. void test() {; char a[2];; int *b = (int*)a;; b[1] = 3; // warn; }. alpha.security.ArrayBoundV2; (C); Warn about buffer overflows (newer checker). void test() {; char *s = """";; char c = s[1]; // warn; }. void test() {; int buf[100];; int *p = buf;; p = p + 99;; p[1] = 1; // warn; }. // note: compiler has internal check for this.; // Use -Wno-array-bounds to suppress compiler warning.; void test() {; int buf[100][100];; buf[0][-1] = 1; // warn; }. // note: requires alpha.security.taint check turned on.; void test() {; char s[] = ""abc"";; int x = getchar();; char c = s[x]; // warn: index is tainted; }. alpha.security.MallocOverflow; (C); Check for overflows in the arguments to malloc(). void test(int n) {; void *p = malloc(n * sizeof(int)); // warn; }. alpha.security.MmapWriteExec; (C); Warn on mmap() calls that are both writable and executable. void test(int n) {; void *c = mmap(NULL, 32, PROT_READ | PROT_WRITE | PROT_EXEC,; MAP_PRIVATE | MAP_ANON, -1, 0);; // warn: Both PROT_WRITE and PROT_EXEC flags are set. This can ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html:10260,test,test,10260,interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,1,['test'],['test']
Testability,"ice`, `legalized`, `regBankSelected`, `selected`.; The whole `frameInfo` section is often unnecessary if there is no special; frame usage in the function. `tracksRegLiveness` on the other hand is often; necessary for some passes that care about block livein lists. - The (global) `liveins:` list is typically only interesting for early; instruction selection passes and can be removed when testing later passes.; The per-block `liveins:` on the other hand are necessary if; `tracksRegLiveness` is true. - Branch probability data in block `successors:` lists can be dropped if the; test doesn't depend on it. Example:; `successors: %bb.1(0x40000000), %bb.2(0x40000000)` can be replaced with; `successors: %bb.1, %bb.2`. - MIR code contains a whole IR module. This is necessary because there are; no equivalents in MIR for global variables, references to external functions,; function attributes, metadata, debug info. Instead some MIR data references; the IR constructs. You can often remove them if the test doesn't depend on; them. - Alias Analysis is performed on IR values. These are referenced by memory; operands in MIR. Example: `:: (load 8 from %ir.foobar, !alias.scope !9)`.; If the test doesn't depend on (good) alias analysis the references can be; dropped: `:: (load 8)`. - MIR blocks can reference IR blocks for debug printing, profile information; or debug locations. Example: `bb.42.myblock` in MIR references the IR block; `myblock`. It is usually possible to drop the `.myblock` reference and simply; use `bb.42`. - If there are no memory operands or blocks referencing the IR then the; IR function can be replaced by a parameterless dummy function like; `define @func() { ret void }`. - It is possible to drop the whole IR section of the MIR file if it only; contains dummy functions (see above). The .mir loader will create the; IR functions automatically in this case. .. _limitations:. Limitations; -----------. Currently the MIR format has several limitations in terms of which st",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MIRLangRef.rst:4371,test,test,4371,interpreter/llvm-project/llvm/docs/MIRLangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MIRLangRef.rst,1,['test'],['test']
Testability,"ich are not saved in the TQueryResult object. These are meant for big; objects whic can create a big overload when distributed via the; standard input list (which should mostly be used for job control; parameters).  To add an input-data object just use; TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; instead of a handmade filtering; this implies that the full grep; functionality is now available; set the default number of displayed lines to 100; instead of 10. Improve diagnostic in case of worker death: client",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4350,sandbox,sandbox,4350,proof/doc/v522/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html,1,['sandbox'],['sandbox']
Testability,"ich reduces debugging time dramatically. The; ""``<cassert>``"" header file is probably already included by the header files you; are using, so it doesn't cost anything to use it. To further assist with debugging, make sure to put some kind of error message in; the assertion statement, which is printed if the assertion is tripped. This; helps the poor debugger make sense of why an assertion is being made and; enforced, and hopefully what to do about it. Here is one complete example:. .. code-block:: c++. inline Value *getOperand(unsigned I) {; assert(I < Operands.size() && ""getOperand() out of range!"");; return Operands[I];; }. Here are more examples:. .. code-block:: c++. assert(Ty->isPointerType() && ""Can't allocate a non-pointer type!"");. assert((Opcode == Shl || Opcode == Shr) && ""ShiftInst Opcode invalid!"");. assert(idx < getNumSuccessors() && ""Successor # out of range!"");. assert(V1.getType() == V2.getType() && ""Constant types must be identical!"");. assert(isa<PHINode>(Succ->front()) && ""Only works on PHId BBs!"");. You get the idea. In the past, asserts were used to indicate a piece of code that should not be; reached. These were typically of the form:. .. code-block:: c++. assert(0 && ""Invalid radix for integer literal"");. This has a few issues, the main one being that some compilers might not; understand the assertion, or warn about a missing return in builds where; assertions are compiled out. Today, we have something much better: ``llvm_unreachable``:. .. code-block:: c++. llvm_unreachable(""Invalid radix for integer literal"");. When assertions are enabled, this will print the message if it's ever reached; and then exit the program. When assertions are disabled (i.e. in release; builds), ``llvm_unreachable`` becomes a hint to compilers to skip generating; code for this branch. If the compiler does not support this, it will fall back; to the ""abort"" implementation. Use ``llvm_unreachable`` to mark a specific point in code that should never be; reached. This is ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst:46134,assert,assert,46134,interpreter/llvm-project/llvm/docs/CodingStandards.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst,1,['assert'],['assert']
Testability,"ics of the LEA instruction on X86; depends on the value of assigned registers and immediates. Setting a value of; `-max-configs-per-opcode` larger than `1` allows `llvm-exegesis` to explore; more configurations to discover if some register or immediate assignments; lead to different performance characteristics. .. option:: --benchmarks-file=</path/to/file>. File to read (`analysis` mode) or write (`latency`/`uops`/`inverse_throughput`; modes) benchmark results. ""-"" uses stdin/stdout. .. option:: --analysis-clusters-output-file=</path/to/file>. If provided, write the analysis clusters as CSV to this file. ""-"" prints to; stdout. By default, this analysis is not run. .. option:: --analysis-inconsistencies-output-file=</path/to/file>. If non-empty, write inconsistencies found during analysis to this file. `-`; prints to stdout. By default, this analysis is not run. .. option:: --analysis-filter=[all|reg-only|mem-only]. By default, all benchmark results are analysed, but sometimes it may be useful; to only look at those that to not involve memory, or vice versa. This option; allows to either keep all benchmarks, or filter out (ignore) either all the; ones that do involve memory (involve instructions that may read or write to; memory), or the opposite, to only keep such benchmarks. .. option:: --analysis-clustering=[dbscan,naive]. Specify the clustering algorithm to use. By default DBSCAN will be used.; Naive clustering algorithm is better for doing further work on the; `-analysis-inconsistencies-output-file=` output, it will create one cluster; per opcode, and check that the cluster is stable (all points are neighbours). .. option:: --analysis-numpoints=<dbscan numPoints parameter>. Specify the numPoints parameters to be used for DBSCAN clustering; (`analysis` mode, DBSCAN only). .. option:: --analysis-clustering-epsilon=<dbscan epsilon parameter>. Specify the epsilon parameter used for clustering of benchmark points; (`analysis` mode). .. option:: --analysis-inconsistenc",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst:15102,benchmark,benchmark,15102,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,1,['benchmark'],['benchmark']
Testability,ics/openmp-directive-sets.h; flang/include/flang/Semantics/runtime-type-info.h; flang/include/flang/Semantics/scope.h; flang/include/flang/Semantics/semantics.h; flang/include/flang/Semantics/symbol.h; flang/include/flang/Semantics/tools.h; flang/include/flang/Semantics/type.h; flang/include/flang/Semantics/unparse-with-symbols.h; flang/lib/Common/default-kinds.cpp; flang/lib/Common/Fortran-features.cpp; flang/lib/Common/Fortran.cpp; flang/lib/Common/idioms.cpp; flang/lib/Decimal/big-radix-floating-point.h; flang/lib/Decimal/binary-to-decimal.cpp; flang/lib/Decimal/decimal-to-binary.cpp; flang/lib/Evaluate/call.cpp; flang/lib/Evaluate/character.h; flang/lib/Evaluate/check-expression.cpp; flang/lib/Evaluate/common.cpp; flang/lib/Evaluate/complex.cpp; flang/lib/Evaluate/constant.cpp; flang/lib/Evaluate/expression.cpp; flang/lib/Evaluate/fold-character.cpp; flang/lib/Evaluate/fold-complex.cpp; flang/lib/Evaluate/fold-designator.cpp; flang/lib/Evaluate/fold-implementation.h; flang/lib/Evaluate/fold-logical.cpp; flang/lib/Evaluate/fold-real.cpp; flang/lib/Evaluate/fold-reduction.cpp; flang/lib/Evaluate/fold-reduction.h; flang/lib/Evaluate/fold.cpp; flang/lib/Evaluate/formatting.cpp; flang/lib/Evaluate/host.cpp; flang/lib/Evaluate/host.h; flang/lib/Evaluate/initial-image.cpp; flang/lib/Evaluate/int-power.h; flang/lib/Evaluate/integer.cpp; flang/lib/Evaluate/intrinsics-library.cpp; flang/lib/Evaluate/intrinsics.cpp; flang/lib/Evaluate/logical.cpp; flang/lib/Evaluate/real.cpp; flang/lib/Evaluate/shape.cpp; flang/lib/Evaluate/static-data.cpp; flang/lib/Evaluate/tools.cpp; flang/lib/Evaluate/type.cpp; flang/lib/Evaluate/variable.cpp; flang/lib/Frontend/CompilerInstance.cpp; flang/lib/Frontend/FrontendAction.cpp; flang/lib/Frontend/FrontendOptions.cpp; flang/lib/Frontend/TextDiagnostic.cpp; flang/lib/Frontend/TextDiagnosticBuffer.cpp; flang/lib/Frontend/TextDiagnosticPrinter.cpp; flang/lib/FrontendTool/ExecuteCompilerInvocation.cpp; flang/lib/Lower/Allocatable.cpp; flang/lib/Lo,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:116579,log,logical,116579,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['log'],['logical']
Testability,"icy.html#obtaining-commit-access>`__. With great power; ----------------. Actually, this would be a great time to read the rest of the `developer; policy <https://llvm.org/docs/DeveloperPolicy.html>`__, too. At minimum,; you need to be subscribed to the relevant commits list before landing; changes (e.g. llvm-commits@lists.llvm.org), as discussion often happens; there if a new patch causes problems. Post-commit errors; ------------------. Once your change is submitted it will be picked up by automated build; bots that will build and test your patch in a variety of configurations. You can see all configurations and their current state in a waterfall; view at http://lab.llvm.org/buildbot/#/waterfall. The waterfall view is good; to get a general overview over the tested configurations and to see; which configuration have been broken for a while. The console view at http://lab.llvm.org/buildbot/#/console helps to get a; better understanding of the build results of a specific patch. If you; want to follow along how your change is affecting the build bots, **this; should be the first place to look at** - the colored bubbles correspond; to projects in the waterfall. If you see a broken build, do not despair - some build bots are; continuously broken; if your change broke the build, you will see a red; bubble in the console view, while an already broken build will show an; orange bubble. Of course, even when the build was already broken, a new; change might introduce a hidden new failure. | When you want to see more details how a specific build is broken,; click the red bubble.; | If post-commit error logs confuse you, do not worry too much -; everybody on the project is aware that this is a bit unwieldy, so; expect people to jump in and help you understand what's going on!. buildbots, overview of bots, getting error logs. Reverts; -------. If in doubt, revert immediately, and re-land later after investigation; and fix. Conclusion; ==========. llvm is a land of contrasts.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst:14786,log,logs,14786,interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,2,['log'],['logs']
Testability,"id @foo(); ret void; }. Is optimized to:. .. code-block:: llvm. define fastcc void @foo() {; ret void; }; define void @bar() {; unreachable; }. ... with ""``opt -instcombine -simplifycfg``"". This often bites people because; ""all their code disappears"". Setting the calling convention on the caller and; callee is required for indirect calls to work, so people often ask why not; make the verifier reject this sort of thing. The answer is that this code has undefined behavior, but it is not illegal.; If we made it illegal, then every transformation that could potentially create; this would have to ensure that it doesn't, and there is valid code that can; create this sort of construct (in dead code). The sorts of things that can; cause this to happen are fairly contrived, but we still need to accept them.; Here's an example:. .. code-block:: llvm. define fastcc void @foo() {; ret void; }; define internal void @bar(void()* %FP, i1 %cond) {; br i1 %cond, label %T, label %F; T:; call void %FP(); ret void; F:; call fastcc void %FP(); ret void; }; define void @test() {; %X = or i1 false, false; call void @bar(void()* @foo, i1 %X); ret void; }. In this example, ""test"" always passes ``@foo``/``false`` into ``bar``, which; ensures that it is dynamically called with the right calling conv (thus, the; code is perfectly well defined). If you run this through the inliner, you; get this (the explicit ""or"" is there so that the inliner doesn't dead code; eliminate a bunch of stuff):. .. code-block:: llvm. define fastcc void @foo() {; ret void; }; define void @test() {; %X = or i1 false, false; br i1 %X, label %T.i, label %F.i; T.i:; call void @foo(); br label %bar.exit; F.i:; call fastcc void @foo(); br label %bar.exit; bar.exit:; ret void; }. Here you can see that the inlining pass made an undefined call to ``@foo``; with the wrong calling convention. We really don't want to make the inliner; have to know about this sort of thing, so it needs to be valid code. In this; case, dead code el",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/FAQ.rst:10736,test,test,10736,interpreter/llvm-project/llvm/docs/FAQ.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/FAQ.rst,1,['test'],['test']
Testability,"id test() {; if (lck_mtx_try_lock(&lck1) == 0); return;. lck_mtx_lock(&lck2);; lck_mtx_unlock(&lck1);; // warn: this was not the most recently acquired lock; }. alpha.unix.SimpleStream; (C); Check for misuses of stream APIs:; fopen; fclose(demo checker, the subject of the demo; (Slides; ,Video); by Anna Zaks and Jordan Rose presented at the ; 2012 LLVM Developers' Meeting). void test() {; FILE *F = fopen(""myfile.txt"", ""w"");; } // warn: opened file is never closed. void test() {; FILE *F = fopen(""myfile.txt"", ""w"");. if (F); fclose(F);. fclose(F); // warn: closing a previously closed file stream; }. alpha.unix.Stream; (C); Check stream handling functions:fopen; tmpfile; fclose; fread; fwrite; fseek; ftell; rewind; fgetpos; fsetpos; clearerr; feof; ferror; fileno. void test() {; FILE *p = fopen(""foo"", ""r"");; } // warn: opened file is never closed. void test() {; FILE *p = fopen(""foo"", ""r"");; fseek(p, 1, SEEK_SET); // warn: stream pointer might be NULL; fclose(p);; }. void test() {; FILE *p = fopen(""foo"", ""r"");. if (p); fseek(p, 1, 3);; // warn: third arg should be SEEK_SET, SEEK_END, or SEEK_CUR. fclose(p);; }. void test() {; FILE *p = fopen(""foo"", ""r"");; fclose(p);; fclose(p); // warn: already closed; }. void test() {; FILE *p = tmpfile();; ftell(p); // warn: stream pointer might be NULL; fclose(p);; }. alpha.unix.cstring.BufferOverlap; (C); Checks for overlap in two buffer arguments; applies to:; memcpy; mempcpy. void test() {; int a[4] = {0};; memcpy(a + 2, a + 1, 8); // warn; }. alpha.unix.cstring.NotNullTerminated; (C); Check for arguments which are not null-terminated strings; applies; to:; strlen; strnlen; strcpy; strncpy; strcat; strncat. void test() {; int y = strlen((char *)&test); // warn; }. alpha.unix.cstring.OutOfBounds; (C); Check for out-of-bounds access in string functions; applies; to:; strncopy; strncat. void test(char *y) {; char x[4];; if (strlen(y) == 4); strncpy(x, y, 5); // warn; }. Non-determinism Alpha Checkers. Name, DescriptionExample. alpha.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html:14691,test,test,14691,interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,1,['test'],['test']
Testability,"id test(long long sll) {; f(sll); // warn; }. int f();. short test(long long sll) {; short ss = f();; return ss;; }. different.MissingCopyCtorAssignOp; (C++); A class has dynamically allocated data members but do not define a copy; constructor/assignment operator.; Source: Scott Meyers ""Effective C++"", item 11: Prevent exceptions from; leaving destructors. class C {; int *p; // warn; public:; C() { p = new int; }; ~C() { delete p; }; };. WinAPI. Name, DescriptionExampleProgress. WinAPI.CreateProcess; (C); CreateProcess(): if the first parameter ; lpApplicationName is NULL then the executable name must be in the; white space-delimited string pointed to by lpCommandLine.; If the executable or path name has a space in it, there is a risk that a; different executable could be run because of the way the function parses; spaces.; Source: ; MSDN: CreateProcess function, Security Remarks. #include <windows.h>. void test() {; STARTUPINFO si;; PROCESS_INFORMATION pi;; CreateProcess(NULL, TEXT(""C:\\Program Files\\App -L -S""),; NULL, NULL, TRUE, 0, NULL, NULL, &si, π);; // warn; }. WinAPI.LoadLibrary; (C); The SearchPath() function is used to retrieve a path to a DLL for; a subsequent LoadLibrary() call.; Source: ; MSDN: LoadLibrary function, Security Remarks. #include <windows.h>. HINSTANCE test() {; char filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constan",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:26278,test,test,26278,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"ided by your telephone; service. You also have to learn the framework interfaces, which in; this analogy is the same as learning how to use a telephone. If you are interested in doing physics, a good HEP framework will save; you much work. Next is a list of the more commonly used components of; ROOT: Command Line Interpreter, Histograms and Fitting, Writing a; Graphical User Interface, 2D Graphics, Input/Output , Collection; Classes, Script Processor. There are also less commonly used components, as: 3D Graphics,; Parallel Processing (PROOF), Run Time Type Identification (RTTI),; Socket and Network Communication, Threads. #### Advantages of Frameworks. The benefits of frameworks can be summarized as follows:. - Less code to write - the programmer should be able to use and; reuse the majority of the existing code. Basic functionality, such; as fitting and histogramming are implemented and ready to use and; customize. - More reliable and robust code - the code inherited from a; framework has already been tested and integrated with the rest of; the framework. - More consistent and modular code - the code reuse provides; consistency and common capabilities between programs, no matter; who writes them. Frameworks make it easier to break programs into; smaller pieces. - More focus on areas of expertise - users can concentrate on their; particular problem domain. They do not have to be experts at; writing user interfaces, graphics, or networking to use the; frameworks that provide those services. ### Why Object-Oriented?. Object-Oriented Programming offers considerable benefits compared to; Procedure-Oriented Programming:. - Encapsulation enforces data abstraction and increases opportunity; for reuse. - Sub classing and inheritance make it possible to extend and modify; objects. - Class hierarchies and containment containment hierarchies provide; a flexible mechanism for modeling real-world objects and the; relationships among them. - Complexity is reduced because there is ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Introduction.md:7476,test,tested,7476,documentation/users-guide/Introduction.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Introduction.md,1,['test'],['tested']
Testability,"ided for the following functionality:. - numerical constants (like `pi`, `e`, `h`, etc.);. - trigonometric and elementary mathematical functions;. - functions to work with arrays and collections (e.g. functions to find `min` and `max` of arrays);. - statistic functions to work on array of data (e.g. mean and `RMS` of arrays);. - algorithms for binary search/hashing sorting;. - special mathematical functions like `Bessel`, `Erf`, `Gamma`, etc.;. - statistical functions, like common probability and cumulative; (quantile) distributions. - geometrical functions. For more details, see the reference documentation of **`TMath`** at; [<http://root.cern.ch/root/htmldoc/TMath.html>](https://root.cern/doc/master/namespaceTMath.html). ### Numerical Constants. `TMath` offers a wide range of constants in the form of inline functions. Notice that they are not defined as C/C++ preprocessor macros. This set of functions includes one or more definitions for the following constants:. * Pi.; * Base of natural logarithm.; * Velocity of light.; * Gravitational constant (G).; * Standard acceleration of gravity (g).; * Standard acceleration of Gravity.; * Plank's contant.; * Boltzmann's and Steffan-Boltzmann's constants.; * Avogadro's number.; * Universal gas constant.; * Molecular weight of dry air.; * Dry air gas constant.; * Euler-Mascheroni Constant.; * Elementary charge. ### Elementary Functions. A set of miscellaneous elementary mathematical functions is provided along with a set of basic trigonometrical functions. Some of this functions refer to basic mathematical functions like the square root, the power to a number of the calculus of a logarithm, while others are used for number treatment, like rounding. Although there are some functions that are not in the standard C math library (like `Factorial`), most of the functionality offered here is just a wrapper of the first ones. Nevertheless, some of the them also offer some security checks or a better precision, like the trigonometri",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/MathLibraries.md:6871,log,logarithm,6871,documentation/users-guide/MathLibraries.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/MathLibraries.md,1,['log'],['logarithm']
Testability,"ident = !{!0}; !0 = metadata !{metadata !""Compiler V3""}. For symmetry reasons, ``ident.ll`` is just a dummy file that doesn't; actually participate in the test besides holding the ``RUN:`` lines. .. note::. Some existing tests use ``RUN: true`` in extra files instead of just; putting the extra files in an ``Inputs/`` directory. This pattern is; deprecated. Fragile tests; -------------. It is easy to write a fragile test that would fail spuriously if the tool being; tested outputs a full path to the input file. For example, :program:`opt` by; default outputs a ``ModuleID``:. .. code-block:: console. $ cat example.ll; define i32 @main() nounwind {; ret i32 0; }. $ opt -S /path/to/example.ll; ; ModuleID = '/path/to/example.ll'. define i32 @main() nounwind {; ret i32 0; }. ``ModuleID`` can unexpectedly match against ``CHECK`` lines. For example:. .. code-block:: llvm. ; RUN: opt -S %s | FileCheck. define i32 @main() nounwind {; ; CHECK-NOT: load; ret i32 0; }. This test will fail if placed into a ``download`` directory. To make your tests robust, always use ``opt ... < %s`` in the RUN line.; :program:`opt` does not output a ``ModuleID`` when input comes from stdin. Platform-Specific Tests; -----------------------. Whenever adding tests that require the knowledge of a specific platform,; either related to code generated, specific output or back-end features,; you must make sure to isolate the features, so that buildbots that; run on different architectures (and don't even compile all back-ends),; don't fail. The first problem is to check for target-specific output, for example sizes; of structures, paths and architecture names, for example:. * Tests containing Windows paths will fail on Linux and vice-versa.; * Tests that check for ``x86_64`` somewhere in the text will fail anywhere else.; * Tests where the debug information calculates the size of types and structures. Also, if the test rely on any behaviour that is coded in any back-end, it must; go in its own directory.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:17024,test,test,17024,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"idual test case coverage. When set to ON, code coverage data for; each test case will be generated and stored in a separate directory under the; config.test_exec_root path. This feature allows code coverage analysis of each; individual test case. Defaults to OFF. **LLVM_BUILD_LLVM_DYLIB**:BOOL; If enabled, the target for building the libLLVM shared library is added.; This library contains all of LLVM's components in a single shared library.; Defaults to OFF. This cannot be used in conjunction with BUILD_SHARED_LIBS.; Tools will only be linked to the libLLVM shared library if LLVM_LINK_LLVM_DYLIB; is also ON.; The components in the library can be customised by setting LLVM_DYLIB_COMPONENTS; to a list of the desired components.; This option is not available on Windows. **LLVM_BUILD_TESTS**:BOOL; Include LLVM unit tests in the 'all' build target. Defaults to OFF. Targets; for building each unit test are generated in any case. You can build a; specific unit test using the targets defined under *unittests*, such as; ADTTests, IRTests, SupportTests, etc. (Search for ``add_llvm_unittest`` in; the subdirectories of *unittests* for a complete list of unit tests.) It is; possible to build all unit tests with the target *UnitTests*. **LLVM_BUILD_TOOLS**:BOOL; Build LLVM tools. Defaults to ON. Targets for building each tool are generated; in any case. You can build a tool separately by invoking its target. For; example, you can build *llvm-as* with a Makefile-based system by executing *make; llvm-as* at the root of your build directory. **LLVM_CCACHE_BUILD**:BOOL; If enabled and the ``ccache`` program is available, then LLVM will be; built using ``ccache`` to speed up rebuilds of LLVM and its components.; Defaults to OFF. The size and location of the cache maintained; by ``ccache`` can be adjusted via the LLVM_CCACHE_MAXSIZE and LLVM_CCACHE_DIR; options, which are passed to the CCACHE_MAXSIZE and CCACHE_DIR environment; variables, respectively. **LLVM_CREATE_XCODE_TOOLCHAIN**:B",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst:16846,test,test,16846,interpreter/llvm-project/llvm/docs/CMake.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst,1,['test'],['test']
Testability,"ient and flexible support for out-of-tree builds. .. _test-status-results:. TEST STATUS RESULTS; -------------------. Each test ultimately produces one of the following eight results:. **PASS**. The test succeeded. **FLAKYPASS**. The test succeeded after being re-run more than once. This only applies to; tests containing an ``ALLOW_RETRIES:`` annotation. **XFAIL**. The test failed, but that is expected. This is used for test formats which allow; specifying that a test does not currently work, but wish to leave it in the test; suite. **XPASS**. The test succeeded, but it was expected to fail. This is used for tests which; were specified as expected to fail, but are now succeeding (generally because; the feature they test was broken and has been fixed). **FAIL**. The test failed. **UNRESOLVED**. The test result could not be determined. For example, this occurs when the test; could not be run, the test itself is invalid, or the test was interrupted. **UNSUPPORTED**. The test is not supported in this environment. This is used by test formats; which can report unsupported tests. **TIMEOUT**. The test was run, but it timed out before it was able to complete. This is; considered a failure. Depending on the test format tests may produce additional information about; their status (generally only for failures). See the :ref:`output-options`; section for more information. .. _lit-infrastructure:. LIT INFRASTRUCTURE; ------------------. This section describes the :program:`lit` testing architecture for users interested in; creating a new :program:`lit` testing implementation, or extending an existing one. :program:`lit` proper is primarily an infrastructure for discovering and running; arbitrary tests, and to expose a single convenient interface to these; tests. :program:`lit` itself doesn't know how to run tests, rather this logic is; defined by *test suites*. TEST SUITES; ~~~~~~~~~~~. As described in :ref:`test-discovery`, tests are always located inside a *test; suite*. Test ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:13246,test,test,13246,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"iers.; MaxEmptyLinesToKeep is applied instead. * ``ELAAMS_Always`` (in configuration: ``Always``); Always add empty line after access modifiers if there are none.; MaxEmptyLinesToKeep is applied also. .. code-block:: c++. struct foo {; private:. int i;; protected:. int j;; /* comment */; public:. foo() {}; private:. protected:. };. .. _EmptyLineBeforeAccessModifier:. **EmptyLineBeforeAccessModifier** (``EmptyLineBeforeAccessModifierStyle``) :versionbadge:`clang-format 12` :ref:`¶ <EmptyLineBeforeAccessModifier>`; Defines in which cases to put empty line before access modifiers. Possible values:. * ``ELBAMS_Never`` (in configuration: ``Never``); Remove all empty lines before access modifiers. .. code-block:: c++. struct foo {; private:; int i;; protected:; int j;; /* comment */; public:; foo() {}; private:; protected:; };. * ``ELBAMS_Leave`` (in configuration: ``Leave``); Keep existing empty lines before access modifiers. * ``ELBAMS_LogicalBlock`` (in configuration: ``LogicalBlock``); Add empty line only when access modifier starts a new logical block.; Logical block is a group of one or more member fields or functions. .. code-block:: c++. struct foo {; private:; int i;. protected:; int j;; /* comment */; public:; foo() {}. private:; protected:; };. * ``ELBAMS_Always`` (in configuration: ``Always``); Always add empty line before access modifiers unless access modifier; is at the start of struct or class definition. .. code-block:: c++. struct foo {; private:; int i;. protected:; int j;; /* comment */. public:; foo() {}. private:. protected:; };. .. _ExperimentalAutoDetectBinPacking:. **ExperimentalAutoDetectBinPacking** (``Boolean``) :versionbadge:`clang-format 3.7` :ref:`¶ <ExperimentalAutoDetectBinPacking>`; If ``true``, clang-format detects whether function calls and; definitions are formatted with one parameter per line. Each call can be bin-packed, one-per-line or inconclusive. If it is; inconclusive, e.g. completely on one line, but a decision needs to be; made",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst:62302,log,logical,62302,interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,1,['log'],['logical']
Testability,ies(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_librarie,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1873,test,testConvBackpropagationCuda,1873,tmva/tmva/test/DNN/CNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt,1,['test'],['testConvBackpropagationCuda']
Testability,"iew and ELF targets with recent versions of Clang, GCC and MSVC; (-O0 -g). .. code-block:: c++. // definitions.h; #ifdef _MSC_VER; #define forceinline __forceinline; #elif defined(__clang__); #if __has_attribute(__always_inline__); #define forceinline inline __attribute__((__always_inline__)); #else; #define forceinline inline; #endif; #elif defined(__GNUC__); #define forceinline inline __attribute__((__always_inline__)); #else; #define forceinline inline; #error; #endif. As the test is dependent on inline compiler options, the above header; file defines *forceinline*. .. code-block:: c++. #include ""definitions.h"". .. code-block:: c++. 1 #include ""definitions.h""; 2 forceinline int InlineFunction(int Param) {; 3 int Var_1 = Param;; 4 {; 5 int Var_2 = Param + Var_1;; 6 Var_1 = Var_2;; 7 }; 8 return Var_1;; 9 }; 10; 11 int test(int Param_1, int Param_2) {; 12 int A = Param_1;; 13 A += InlineFunction(Param_2);; 14 return A;; 15 }. The above test is used to illustrate a variable issue found in the Clang; compiler:; `PR43860 (Bugs LLVM) <https://bugs.llvm.org/show_bug.cgi?id=43860>`_ /; `PR43205 (GitHub) <https://github.com/llvm/llvm-project/issues/43205>`_. These are the logical views that :program:`llvm-debuginfo-analyzer`; generates for 3 different compilers (MSVC, Clang and GCC), emitting; different debug information formats (CodeView, DWARF) on different; platforms. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level,format,producer; --output-sort=name; --print=symbols; pr-43860-codeview-clang.o; pr-43860-codeview-msvc.o; pr-43860-dwarf-clang.o; pr-43860-dwarf-gcc.o. CODEVIEW - Clang (Windows); ^^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: none. Logical View:; [000] {File} 'pr-43860-codeview-clang.o' -> COFF-x86-64. [001] {CompileUnit} 'pr-43860.cpp'; [002] {Producer} 'clang version 14.0.0'; [002] 2 {Function} inlined 'InlineFunction' -> 'int'; [003] {Parameter} '' -> 'int'; [002] {Function} extern not_inlined 'test' -> 'int'; [003] {Variable} 'A' -> 'int'; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:49560,test,test,49560,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['test'],['test']
Testability,"iew comments. Consider using the; `built-in support for fixups <https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---fixupamendrewordltcommitgt>`_; in git. If you do this, you must squash and merge before landing the PR and; you must use the pull request title and description as the commit message.; You can do this manually with an interactive git rebase or with GitHub's; built-in tool. See the section about landing your fix below. When pushing to your branch, make sure you push to the correct fork. Check your; remotes with:. ::. git remote -v. And make sure you push to the remote that's pointing to your fork. Rebasing Pull Requests and Force Pushes; ---------------------------------------; In general, you should avoid rebasing a Pull Request and force pushing to the; branch that's the root of the Pull Request during the review. This action will; make the context of the old changes and comments harder to find and read. Sometimes, a rebase might be needed to update your branch with a fix for a test; or in some dependent code. After your PR is reviewed and accepted, you want to rebase your branch to ensure; you won't encounter merge conflicts when landing the PR. Landing your change; -------------------; When your PR has been accepted you can use the web interface to land your change.; If you have created multiple commits to address feedback at this point you need; to consolidate those commits into one commit. There are two different ways to; do this:. `Interactive rebase <https://git-scm.com/docs/git-rebase#_interactive_mode>`_; with fixup's. This is the recommended method since you can control the final; commit message and inspect that the final commit looks as you expect. When; your local state is correct, remember to force-push to your branch and press; the merge button afterwards. Use the button `Squash and merge` in GitHub's web interface, if you do this; remember to review the commit message when prompted. Afterwards you can select the option `Del",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GitHub.rst:4588,test,test,4588,interpreter/llvm-project/llvm/docs/GitHub.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GitHub.rst,1,['test'],['test']
Testability,"iewExplodedGraph: Show the Exploded Graphs generated for the; analysis of different functions in the input translation unit. When there; are several functions analyzed, display one graph per function. Beware; that these graphs may grow very large, even for small functions. Path Tracking; =============. These checkers print information about the path taken by the analyzer engine. - debug.DumpCalls: Prints out every function or method call encountered during a; path traversal. This is indented to show the call stack, but does NOT do any; special handling of branches, meaning different paths could end up; interleaved. - debug.DumpTraversal: Prints the name of each branch statement encountered; during a path traversal (""IfStmt"", ""WhileStmt"", etc). Currently used to check; whether the analysis engine is doing BFS or DFS. State Checking; ==============. These checkers will print out information about the analyzer state in the form; of analysis warnings. They are intended for use with the -verify functionality; in regression tests. - debug.TaintTest: Prints out the word ""tainted"" for every expression that; carries taint. At the time of this writing, taint was only introduced by the; checks under experimental.security.taint.TaintPropagation; this checker may; eventually move to the security.taint package. - debug.ExprInspection: Responds to certain function calls, which are modeled; after builtins. These function calls should affect the program state other; than the evaluation of their arguments; to use them, you will need to declare; them within your test file. The available functions are described below. (FIXME: debug.ExprInspection should probably be renamed, since it no longer only; inspects expressions.). ExprInspection checks; ---------------------. - ``void clang_analyzer_eval(bool);``. Prints TRUE if the argument is known to have a non-zero value, FALSE if the; argument is known to have a zero or null value, and UNKNOWN if the argument; isn't sufficiently constrained",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst:2164,test,tests,2164,interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst,1,['test'],['tests']
Testability,"if (DEFINED LLVM_HAVE_TF_AOT OR LLVM_HAVE_TFLITE); include(TensorFlowCompile); set(LLVM_INLINER_MODEL_PATH_DEFAULT ""models/inliner-Oz""). set(LLVM_INLINER_MODEL_CURRENT_URL ""<UNSPECIFIED>"" CACHE STRING ""URL to download the LLVM inliner model""). if (DEFINED LLVM_HAVE_TF_AOT); tf_find_and_compile(; ${LLVM_INLINER_MODEL_PATH}; ${LLVM_INLINER_MODEL_CURRENT_URL}; ${LLVM_INLINER_MODEL_PATH_DEFAULT}; ""models/gen-inline-oz-test-model.py""; serve; action; InlinerSizeModel; llvm::InlinerSizeModel; ); endif(). if (LLVM_HAVE_TFLITE); list(APPEND MLLinkDeps; tensorflow-lite::tensorflow-lite); endif(); endif(). add_llvm_component_library(LLVMAnalysis; AliasAnalysis.cpp; AliasAnalysisEvaluator.cpp; AliasSetTracker.cpp; Analysis.cpp; AssumeBundleQueries.cpp; AssumptionCache.cpp; BasicAliasAnalysis.cpp; BlockFrequencyInfo.cpp; BlockFrequencyInfoImpl.cpp; BranchProbabilityInfo.cpp; CFG.cpp; CFGPrinter.cpp; CFGSCCPrinter.cpp; CGSCCPassManager.cpp; CallGraph.cpp; CallGraphSCCPass.cpp; CallPrinter.cpp; CaptureTracking.cpp; CmpInstAnalysis.cpp; CostModel.cpp; CodeMetrics.cpp; ConstantFolding.cpp; CycleAnalysis.cpp; DDG.cpp; DDGPrinter.cpp; ConstraintSystem.cpp; Delinearization.cpp; DemandedBits.cpp; DependenceAnalysis.cpp; DependenceGraphBuilder.cpp; DevelopmentModeInlineAdvisor.cpp; DomConditionCache.cpp; DomPrinter.cpp; DomTreeUpdater.cpp; DominanceFrontier.cpp; FunctionPropertiesAnalysis.cpp; GlobalsModRef.cpp; GuardUtils.cpp; HeatUtils.cpp; IRSimilarityIdentifier.cpp; IVDescriptors.cpp; IVUsers.cpp; ImportedFunctionsInliningStatistics.cpp; IndirectCallPromotionAnalysis.cpp; InlineCost.cpp; InlineAdvisor.cpp; InlineOrder.cpp; InlineSizeEstimatorAnalysis.cpp; InstCount.cpp; InstructionPrecedenceTracking.cpp; InstructionSimplify.cpp; InteractiveModelRunner.cpp; Interval.cpp; IntervalPartition.cpp; LazyBranchProbabilityInfo.cpp; LazyBlockFrequencyInfo.cpp; LazyCallGraph.cpp; LazyValueInfo.cpp; Lint.cpp; Loads.cpp; Local.cpp; LoopAccessAnalysis.cpp; LoopAnalysisManager.cpp; LoopCacheAnalysis",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CMakeLists.txt:418,test,test-model,418,interpreter/llvm-project/llvm/lib/Analysis/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CMakeLists.txt,1,['test'],['test-model']
Testability,"if (DEFINED LLVM_HAVE_TF_AOT OR LLVM_HAVE_TFLITE); include(TensorFlowCompile); set(LLVM_RAEVICT_MODEL_PATH_DEFAULT ""models/regalloc-eviction""). set(LLVM_RAEVICT_MODEL_CURRENT_URL ""<UNSPECIFIED>"" CACHE STRING ""URL to download the LLVM register allocator eviction model""). if (DEFINED LLVM_HAVE_TF_AOT); tf_find_and_compile(; ${LLVM_RAEVICT_MODEL_PATH}; ${LLVM_RAEVICT_MODEL_CURRENT_URL}; ${LLVM_RAEVICT_MODEL_PATH_DEFAULT}; ""../Analysis/models/gen-regalloc-eviction-test-model.py""; serve; action; RegAllocEvictModel; llvm::RegAllocEvictModel; ); endif(). if (LLVM_HAVE_TFLITE); list(APPEND MLLinkDeps ${tensorflow_c_api} ${tensorflow_fx}); endif(); endif(). # This provides the implementation of MVT and LLT.; # Be careful to append deps on this, since Targets' tablegens depend on this.; add_llvm_component_library(LLVMCodeGenTypes; LowLevelType.cpp; PARTIAL_SOURCES_INTENDED. DEPENDS; vt_gen. LINK_COMPONENTS; Support; ). add_llvm_component_library(LLVMCodeGen; AggressiveAntiDepBreaker.cpp; AllocationOrder.cpp; Analysis.cpp; AssignmentTrackingAnalysis.cpp; AtomicExpandPass.cpp; BasicTargetTransformInfo.cpp; BranchFolding.cpp; BranchRelaxation.cpp; BreakFalseDeps.cpp; BasicBlockSections.cpp; BasicBlockPathCloning.cpp; BasicBlockSectionsProfileReader.cpp; CalcSpillWeights.cpp; CallBrPrepare.cpp; CallingConvLower.cpp; CFGuardLongjmp.cpp; CFIFixup.cpp; CFIInstrInserter.cpp; CodeGen.cpp; CodeGenCommonISel.cpp; CodeGenPassBuilder.cpp; CodeGenPrepare.cpp; CommandFlags.cpp; ComplexDeinterleavingPass.cpp; CriticalAntiDepBreaker.cpp; DeadMachineInstructionElim.cpp; DetectDeadLanes.cpp; DFAPacketizer.cpp; DwarfEHPrepare.cpp; EarlyIfConversion.cpp; EdgeBundles.cpp; EHContGuardCatchret.cpp; ExecutionDomainFix.cpp; ExpandLargeDivRem.cpp; ExpandLargeFpConvert.cpp; ExpandMemCmp.cpp; ExpandPostRAPseudos.cpp; ExpandReductions.cpp; ExpandVectorPredication.cpp; FaultMaps.cpp; FEntryInserter.cpp; FinalizeISel.cpp; FixupStatepointCallerSaved.cpp; FuncletLayout.cpp; GCMetadata.cpp; GCMetadataPrinter.cp",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CMakeLists.txt:465,test,test-model,465,interpreter/llvm-project/llvm/lib/CodeGen/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CMakeLists.txt,1,['test'],['test-model']
Testability,"if any of these files exist. The index page will also; contain a list of links to all files in the directory that end on; `.html` or `.txt`. Files ending on `.txt` will be converted to HTML; before they are copied to the output directory. For each file, the; link's text will be the file name without extension, with underscores; replaced by spaces. You can see an example of the module documentation including links, the; corresponding `index.html`, and the module class index at; <http://root.cern.ch/root/html/HIST_Index.html>. ## Converting Sources (and Other Files) to HTML. **`THtml`** can take a file (C++ or text) and convert it to HTML. There; are two main use cases:. The output of a **macro** converted to HTML will almost look like the; beautified source file of a class reference. The `Begin_Html/End_Html`; keywords are supported; comments, strings, and keywords are colored like; in **`THtml`**'s output for source code. The macro `Event.cxx` in `$ROOTSYS/test` can be seen as an example of; documented ROOT macros at; <http://root.cern.ch/root/html/examples/Event.cxx.html>. `THtml::Convert()`converts a single text file to HTML. For example, it; can be run on a change log. Each known class name will be linked to its; documentation page. An example is ROOT's change log at; <http://root.cern.ch/root/html/examples/V5.16.txt.html>. To convert the source file MyCode.C to HTML, you can run. ``` {.cpp}; root[] THtml h; root[] h.Convert(""MyCode.C"", ""Look At My Code"", ""htmlout/"");; ```. This will create the file `htmlout/MyCode.C.html`. The HTML page will; have the title ""Look At My Code"". ## Special Documentation Elements: Directives. A common documentation problem is the inclusion of images. They are; usually generated externally, which poses problems with where to keep; the images, and how to keep them up to date. **`THtml`** solves this by; offering a few special documentation elements: macro and latex; directives. ### Latex Directive. Documentation surrounded by the keyw",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/HTMLDoc.md:4540,test,test,4540,documentation/users-guide/HTMLDoc.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/HTMLDoc.md,1,['test'],['test']
Testability,"if(). add_subdirectory(lib); add_subdirectory(tools); add_subdirectory(runtime). option(CLANG_BUILD_EXAMPLES ""Build CLANG example programs by default."" OFF); add_subdirectory(examples). if(APPLE); # this line is needed as a cleanup to ensure that any CMakeCaches with the old; # default value get updated to the new default.; if(CLANG_ORDER_FILE STREQUAL """"); unset(CLANG_ORDER_FILE CACHE); unset(CLANG_ORDER_FILE); endif(). set(CLANG_ORDER_FILE ${CMAKE_CURRENT_BINARY_DIR}/clang.order CACHE FILEPATH; ""Order file to use when compiling clang in order to improve startup time (Darwin Only - requires ld64).""). if(NOT EXISTS ${CLANG_ORDER_FILE}); string(FIND ""${CLANG_ORDER_FILE}"" ""${CMAKE_CURRENT_BINARY_DIR}"" PATH_START); if(PATH_START EQUAL 0); file(WRITE ${CLANG_ORDER_FILE} ""\n""); else(); message(FATAL_ERROR ""Specified order file '${CLANG_ORDER_FILE}' does not exist.""); endif(); endif(); endif(). if( CLANG_INCLUDE_TESTS ); add_subdirectory(unittests); list(APPEND CLANG_TEST_DEPS ClangUnitTests); list(APPEND CLANG_TEST_PARAMS; clang_unit_site_config=${CMAKE_CURRENT_BINARY_DIR}/test/Unit/lit.site.cfg; ); add_subdirectory(test); add_subdirectory(bindings/python/tests). if(CLANG_BUILT_STANDALONE); umbrella_lit_testsuite_end(check-all); endif(); add_subdirectory(utils/perf-training); endif(). option(CLANG_INCLUDE_DOCS ""Generate build targets for the Clang docs.""; ${LLVM_INCLUDE_DOCS}); if( CLANG_INCLUDE_DOCS ); add_subdirectory(docs); endif(). # Custom target to install all clang libraries.; add_custom_target(clang-libraries); set_target_properties(clang-libraries PROPERTIES FOLDER ""Misc""). if(NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-clang-libraries; DEPENDS clang-libraries; COMPONENT clang-libraries); endif(). get_property(CLANG_LIBS GLOBAL PROPERTY CLANG_LIBS); if(CLANG_LIBS); list(REMOVE_DUPLICATES CLANG_LIBS); foreach(lib ${CLANG_LIBS}); add_dependencies(clang-libraries ${lib}); if(NOT LLVM_ENABLE_IDE); add_dependencies(install-clang-libraries install-${lib}); ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt:18901,test,test,18901,interpreter/llvm-project/clang/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/CMakeLists.txt,1,['test'],['test']
Testability,"if(CMAKE_CXX_COMPILER_ID STREQUAL Intel); if(DEFINED ENV{VTUNE_AMPLIFIER_2019_DIR}); set(VTUNE_DIR ENV{VTUNE_AMPLIFIER_2019_DIR}); elseif(DEFINED ENV{VTUNE_PROFILER_2020_DIR}); set(VTUNE_DIR ENV{VTUNE_PROFILER_2020_DIR}); endif(); # To be able to start/stop the vtune profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:660,test,testCompatMode,660,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,10,['test'],"['testAddPdf', 'testCompatMode', 'testExponential', 'testGauss', 'testPoisson']"
Testability,"if(LLVM_BYE_LINK_INTO_TOOLS); message(WARNING ""Setting LLVM_BYE_LINK_INTO_TOOLS=ON only makes sense for testing purpose""); endif(). # The plugin expects to not link against the Support and Core libraries,; # but expects them to exist in the process loading the plugin. This doesn't; # work with DLLs on Windows (where a shared library can't have undefined; # references), so just skip this example on Windows.; if (NOT WIN32 AND NOT CYGWIN); add_llvm_pass_plugin(Bye; Bye.cpp; DEPENDS; intrinsics_gen; BUILDTREE_ONLY; ). install(TARGETS ${name} RUNTIME DESTINATION ""${LLVM_EXAMPLES_INSTALL_DIR}""); set_target_properties(${name} PROPERTIES FOLDER ""Examples""); endif(); ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Bye/CMakeLists.txt:104,test,testing,104,interpreter/llvm-project/llvm/examples/Bye/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Bye/CMakeLists.txt,1,['test'],['testing']
Testability,"if(LLVM_EXAMPLEIRTRANSFORMS_LINK_INTO_TOOLS); message(WARNING ""Setting LLVM_EXAMPLEIRTRANSFORMS_LINK_INTO_TOOLS=ON only makes sense for testing purpose""); endif(). # The plugin expects to not link against the Support and Core libraries,; # but expects them to exist in the process loading the plugin. This doesn't; # work with DLLs on Windows (where a shared library can't have undefined; # references), so just skip this example on Windows.; if (NOT WIN32 AND NOT CYGWIN); add_llvm_pass_plugin(ExampleIRTransforms; SimplifyCFG.cpp; DEPENDS; intrinsics_gen; BUILDTREE_ONLY; ). install(TARGETS ${name} RUNTIME DESTINATION ""${LLVM_EXAMPLES_INSTALL_DIR}""); set_target_properties(${name} PROPERTIES FOLDER ""Examples""); endif(); ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/CMakeLists.txt:136,test,testing,136,interpreter/llvm-project/llvm/examples/IRTransforms/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/IRTransforms/CMakeLists.txt,1,['test'],['testing']
Testability,"if(MSVC AND CMAKE_SIZEOF_VOID_P EQUAL 4 AND NOT llvm13_broken_tests); # The following tutorials are failing with this error:; # IncrementalExecutor::executeFunction: symbol '__std_find_trivial_4@12' unresolved while linking [cling interface function]!; # on Windows 32 bit and Visual Studio v17.8; list(APPEND roofit_veto roofit/rf509_wsinteractive.C roofit/rf614_binned_fit_problems.C); # The following tutorial fails with a segfault (see #15364); list(APPEND roofit_veto roostats/rs101_limitexample.py); endif(); endif(). if(NOT ROOT_unuran_FOUND); set(unuran_veto math/testrandom.C unuran/unuranDemo.C unuran/unuranFoamTest.C; math/multidimSampling.C); endif(). if(NOT ROOT_xml_FOUND); set(xml_veto xml/*.C; histfactory/*.C # histfactory requires xml; histfactory/*.py; roostats/*.C # most roostats tutorials require xml too,; roostats/*.py) # because they create test data with histfactory; endif(). if(NOT ROOT_unfold_FOUND); list(APPEND xml_veto unfold/*.C); endif(). if(NOT ROOT_mpi_FOUND); set(mpi_veto io/testTMPIFile.C); endif(). if(NOT xrootd); set(xrootd_veto dataframe/df101_h1Analysis.C; dataframe/df102_NanoAODDimuonAnalysis.C; dataframe/df103_NanoAODHiggsAnalysis.C; dataframe/df106_HiggsToFourLeptons.C; tmva/tmva103_Application.C; dataframe/df033_Describe.py; dataframe/df102_NanoAODDimuonAnalysis.py; dataframe/df103_NanoAODHiggsAnalysis.py; dataframe/df104_HiggsToTwoPhotons.py; dataframe/df105_WBosonAnalysis.py; dataframe/df106_HiggsToFourLeptons.py; dataframe/df107_SingleTopAnalysis.py; roofit/rf618_mixture_models.py # depends on df106_HiggsToFourLeptons.py; rcanvas/df104.py; rcanvas/df105.py; ); endif(). # variables identifying the package must have the package name in lower case (it corresponds to the CMake option name); if(NOT ROOT_r_FOUND); set(r_veto r/*.C); endif(). set(histfactory_veto histfactory/makeExample.C). if(NOT ROOT_fitsio_FOUND); set(fitsio_veto fitsio/*.C); endif(). if(NOT ROOT_mathmore_FOUND); set(mathmore_veto; math/quasirandom.C; math/exampleMult",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:6970,test,testTMPIFile,6970,tutorials/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt,1,['test'],['testTMPIFile']
Testability,"ifies tests by the test; suite they are in, and their relative path inside the test suite. For; appropriately configured projects, this allows :program:`lit` to provide; convenient and flexible support for out-of-tree builds. .. _test-status-results:. TEST STATUS RESULTS; -------------------. Each test ultimately produces one of the following eight results:. **PASS**. The test succeeded. **FLAKYPASS**. The test succeeded after being re-run more than once. This only applies to; tests containing an ``ALLOW_RETRIES:`` annotation. **XFAIL**. The test failed, but that is expected. This is used for test formats which allow; specifying that a test does not currently work, but wish to leave it in the test; suite. **XPASS**. The test succeeded, but it was expected to fail. This is used for tests which; were specified as expected to fail, but are now succeeding (generally because; the feature they test was broken and has been fixed). **FAIL**. The test failed. **UNRESOLVED**. The test result could not be determined. For example, this occurs when the test; could not be run, the test itself is invalid, or the test was interrupted. **UNSUPPORTED**. The test is not supported in this environment. This is used by test formats; which can report unsupported tests. **TIMEOUT**. The test was run, but it timed out before it was able to complete. This is; considered a failure. Depending on the test format tests may produce additional information about; their status (generally only for failures). See the :ref:`output-options`; section for more information. .. _lit-infrastructure:. LIT INFRASTRUCTURE; ------------------. This section describes the :program:`lit` testing architecture for users interested in; creating a new :program:`lit` testing implementation, or extending an existing one. :program:`lit` proper is primarily an infrastructure for discovering and running; arbitrary tests, and to expose a single convenient interface to these; tests. :program:`lit` itself doesn't know how to ru",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:13073,test,test,13073,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"iform.h; RooUniform.h; RooVoigtian.h; RooJohnson.h; SOURCES; src/Roo2DKeysPdf.cxx; src/RooArgusBG.cxx; src/RooBCPEffDecay.cxx; src/RooBCPGenDecay.cxx; src/RooBDecay.cxx; src/RooBernstein.cxx; src/RooBifurGauss.cxx; src/RooBlindTools.cxx; src/RooBMixDecay.cxx; src/RooBreitWigner.cxx; src/RooBukinPdf.cxx; src/RooCBShape.cxx; src/RooCrystalBall.cxx; src/RooCFunction1Binding.cxx; src/RooCFunction2Binding.cxx; src/RooCFunction3Binding.cxx; src/RooCFunction4Binding.cxx; src/RooChebychev.cxx; src/RooChi2MCSModule.cxx; src/RooChiSquarePdf.cxx; src/RooDecay.cxx; src/RooDstD0BG.cxx; src/RooExponential.cxx; src/RooLegacyExpPoly.cxx; src/RooPowerSum.cxx; src/RooFunctor1DBinding.cxx; src/RooFunctorBinding.cxx; src/RooGamma.cxx; src/RooGaussian.cxx; src/RooGaussModel.cxx; src/RooGExpModel.cxx; src/RooHistConstraint.cxx; src/RooIntegralMorph.cxx; src/RooJeffreysPrior.cxx; src/RooKeysPdf.cxx; src/RooLagrangianMorphFunc.cxx; src/RooLandau.cxx; src/RooLognormal.cxx; src/RooMathCoreReg.cxx; src/RooMomentMorph.cxx; src/RooMomentMorphFunc.cxx; src/RooMomentMorphFuncND.cxx; src/RooMultiBinomial.cxx; src/RooNDKeysPdf.cxx; src/RooNonCPEigenDecay.cxx; src/RooNovosibirsk.cxx; src/RooParametricStepFunction.cxx; src/RooParamHistFunc.cxx; src/RooPoisson.cxx; src/RooPolynomial.cxx; src/RooSpline.cxx; src/RooStepFunction.cxx; src/RooTFnBinding.cxx; src/RooTFnPdfBinding.cxx; src/RooTMathReg.cxx; src/RooUnblindCPAsymVar.cxx; src/RooUnblindOffset.cxx; src/RooUnblindPrecision.cxx; src/RooUnblindUniform.cxx; src/RooUniform.cxx; src/RooVoigtian.cxx; src/RooJohnson.cxx; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LINKDEF; LinkDef1.h; LIBRARIES; RooBatchCompute; DEPENDENCIES; Core; RooFitCore; Tree; RIO; Matrix; MathCore; ${EXTRA_DICT_OPTS}; ). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(RooFit PUBLIC -fno-math-errno); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/CMakeLists.txt:3665,test,test,3665,roofit/roofit/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/CMakeLists.txt,1,['test'],['test']
Testability,"ifts out any bits that disagree with the resultant sign bit. Example:; """""""""""""""". .. code-block:: text. <result> = shl i32 4, %var ; yields i32: 4 << %var; <result> = shl i32 4, 2 ; yields i32: 16; <result> = shl i32 1, 10 ; yields i32: 1024; <result> = shl i32 1, 32 ; undefined; <result> = shl <2 x i32> < i32 1, i32 1>, < i32 1, i32 2> ; yields: result=<2 x i32> < i32 2, i32 4>. .. _i_lshr:. '``lshr``' Instruction; ^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. <result> = lshr <ty> <op1>, <op2> ; yields ty:result; <result> = lshr exact <ty> <op1>, <op2> ; yields ty:result. Overview:; """""""""""""""""". The '``lshr``' instruction (logical shift right) returns the first; operand shifted to the right a specified number of bits with zero fill. Arguments:; """""""""""""""""""". Both arguments to the '``lshr``' instruction must be the same; :ref:`integer <t_integer>` or :ref:`vector <t_vector>` of integer type.; '``op2``' is treated as an unsigned value. Semantics:; """""""""""""""""""". This instruction always performs a logical shift right operation. The; most significant bits of the result will be filled with zero bits after; the shift. If ``op2`` is (statically or dynamically) equal to or larger; than the number of bits in ``op1``, this instruction returns a :ref:`poison; value <poisonvalues>`. If the arguments are vectors, each vector element; of ``op1`` is shifted by the corresponding shift amount in ``op2``. If the ``exact`` keyword is present, the result value of the ``lshr`` is; a poison value if any of the bits shifted out are non-zero. Example:; """""""""""""""". .. code-block:: text. <result> = lshr i32 4, 1 ; yields i32:result = 2; <result> = lshr i32 4, 2 ; yields i32:result = 1; <result> = lshr i8 4, 3 ; yields i8:result = 0; <result> = lshr i8 -2, 1 ; yields i8:result = 0x7F; <result> = lshr i32 1, 32 ; undefined; <result> = lshr <2 x i32> < i32 -2, i32 4>, < i32 1, i32 2> ; yields: result=<2 x i32> < i32 0x7FFFFFFF, i32 1>. .. _i_ashr:. '``ashr``' Instruction; ^^^^^^^^^^^^^^^^^^^^^^. Syntax:",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:394591,log,logical,394591,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['log'],['logical']
Testability,"ig, the tool will attempt to form the posterior pdf ; for the nuisance parameters based on the prior and the constraint terms ; in the pdf. However, this is not yet implemented. In order to keep; logical consistency with other tools, the distribution being used; to smear the nuisance parameters should NOT be considered the prior in ; the model config. Instead, one should use HybridCalculator's; ForcePriorNuisanceNull and ForcePriorNuisanceAlt. HybridCalculatorOriginal. Apply a fix for test statistic = 3 (profile likelihood); Apply a fix for using non-extended pdf. TestStatSampler and TestStatistics. Cleanup of the interfaces.; TestStatistics now have a method PValueIsRightTail to specify the sign conventions for the test statistic. This is used when making plots and calculating p-values.; make clear that TestStatistic::Evaluate should take data and values of the parameters that define the null.; Add method TestStatSampler::SetParametersForTestStat that ; allows for greater control of parameters used for generating toy data; and parameters used for evaluating the test statistic.; ProfileLikelihoodTestStatUsing the raw profile likelihood while reviewing the old algorithm used to provide robustness in situations with local minima.; New test statistic classes:; ; SimpleLikelihoodRatioTestStat : log L_1 / L_0; RatioOfProfiledLikelihoodsTestStat: log L(mu_1, hat(nu_1))/L(mu_0,hat(nu_0)); MaxLikelihoodEstimateTestStat: the MLE of a specified parameter. ToyMCSampler. New version of ToyMCSampler which can smear the nuisance; parameters according to their distributions for use with; HybridCalculator; Updated class structure: ToyMCSampler is a particular implementation of a TestStatSampler and runs with any TestStatistic. It returns the result in an instance of SamplingDistribution.; Supports Importance Sampling: Improves sampling the tails of a distribution by generating toys from a user supplied importance density and a reweighing procedure of the result.; Supports Adaptive S",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v528/index.html:6927,test,test,6927,roofit/doc/v528/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v528/index.html,1,['test'],['test']
Testability,"ight be used for. - **HashKeySize** - The size of a hash value (usually 4 bytes). - **NumHashBuckets** - The number of buckets used to generate the hash values; in the aforementioned hash streams. - **HashValueBufferOffset / HashValueBufferLength** - The offset and size within; the TPI Hash Stream of the list of hash values. It should be assumed that; there are either 0 hash values, or a number equal to the number of type; records in the TPI stream (``TypeIndexEnd - TypeEndBegin``). Thus, if; ``HashBufferLength`` is not equal to ``(TypeIndexEnd - TypeEndBegin) *; HashKeySize`` we can consider the PDB malformed. - **IndexOffsetBufferOffset / IndexOffsetBufferLength** - The offset and size; within the TPI Hash Stream of the Type Index Offsets Buffer. This is a list; of pairs of uint32_t's where the first value is a :ref:`Type Index; <type_indices>` and the second value is the offset in the type record data of; the type with this index. This can be used to do a binary search followed by; a linear search to get O(log n) lookup by type index. - **HashAdjBufferOffset / HashAdjBufferLength** - The offset and size within; the TPI hash stream of a serialized hash table whose keys are the hash values; in the hash value buffer and whose values are type indices. This appears to; be useful in incremental linking scenarios, so that if a type is modified an; entry can be created mapping the old hash value to the new type index so that; a PDB file consumer can always have the most up to date version of the type; without forcing the incremental linker to garbage collect and update; references that point to the old version to now point to the new version.; The layout of this hash table is described in :doc:`HashTable`. .. _tpi_records:. CodeView Type Record List; =========================; Following the header, there are ``TypeRecordBytes`` bytes of data that; represent a variable length array of :doc:`CodeView type records; <CodeViewTypes>`. The number of such records (e.g. the leng",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/PDB/TpiStream.rst:10613,log,log,10613,interpreter/llvm-project/llvm/docs/PDB/TpiStream.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/PDB/TpiStream.rst,1,['log'],['log']
Testability,"igrate-downstream-fork.py`` run).; for project in ${subprojects[@]}; do; git remote add upstream/split/${project} \; https://github.com/llvm-mirror/${subproject}.git; git fetch umbrella/split/${project}; done. # Import histories for downstream split projects (this was probably; # already done for the ``migrate-downstream-fork.py`` run).; for project in ${subprojects[@]}; do; git remote add local/split/${project} \; https://my.local.mirror.org/${subproject}.git; git fetch local/split/${project}; done. # Import umbrella history. We want this under a different refspec; # so zip-downstream-fork.py knows what it is.; git -C my-monorepo remote add umbrella \; https://my.local.mirror.org/llvm.git; git fetch umbrella. # Create the submodule map.; echo ""tools/clang clang"" > my-monorepo/submodule-map.txt; echo ""tools/clang/tools/extra clang-tools-extra"" >> my-monorepo/submodule-map.txt; echo ""projects/compiler-rt compiler-rt"" >> my-monorepo/submodule-map.txt; echo ""projects/debuginfo-tests debuginfo-tests"" >> my-monorepo/submodule-map.txt; echo ""projects/libclc libclc"" >> my-monorepo/submodule-map.txt; echo ""projects/libcxx libcxx"" >> my-monorepo/submodule-map.txt; echo ""projects/libcxxabi libcxxabi"" >> my-monorepo/submodule-map.txt; echo ""projects/libunwind libunwind"" >> my-monorepo/submodule-map.txt; echo ""tools/lld lld"" >> my-monorepo/submodule-map.txt; echo ""tools/lldb lldb"" >> my-monorepo/submodule-map.txt; echo ""projects/openmp openmp"" >> my-monorepo/submodule-map.txt; echo ""tools/polly polly"" >> my-monorepo/submodule-map.txt; echo ""projects/myproj local/myproj"" >> my-monorepo/submodule-map.txt. # Rewrite history; (; cd my-monorepo; zip-downstream-fork.py \; refs/remotes/umbrella \; --new-repo-prefix=refs/remotes/upstream/monorepo \; --old-repo-prefix=refs/remotes/upstream/split \; --revmap-in=monorepo-map.txt \; --revmap-out=zip-map.txt \; --subdir=llvm \; --submodule-map=submodule-map.txt \; --update-tags; ). # Create the zip branch (assuming umbrella main is wanted).",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/GitHubMove.rst:33144,test,tests,33144,interpreter/llvm-project/llvm/docs/Proposals/GitHubMove.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/GitHubMove.rst,2,['test'],['tests']
Testability,"igure we present; the background, which was added to the synthetic spectrum. One can; observe good coincidence with the estimated background. The method of; the estimation of Compton edge is described in details in [3]. ![Synthetic spectrum with Compton edges](figures/image012.png). The generalized form of the algorithm is implemented in the following function. ``` {.cpp}; char *Background1General(float *spectrum,; int size,; int number_of_iterations,; int direction,; int filter_order,; bool compton);; ```. The meaning of the parameters is as follows:. - **`spectrum`**: pointer to the vector of the source spectrum; - **`size`**: length of spectrum vector; - **`number_of_iterations`**: maximal width of clipping window; - **`direction`**: direction of change of clipping window. Possible values:; - `BACK1_INCREASING_WINDOW`; - `BACK1_DECREASING_WINDOW`; - **`filter_order`**: order of clipping filter. Possible values:; - `BACK1_ORDER2`; - `BACK1_ORDER4`; - `BACK1_ORDER6`; - `BACK1_ORDER8`; - **`compton`**: logical variable whether the estimation of Compton edge will be included. Possible values:; - `BACK1_EXCLUDE_COMPTON`; - `BACK1_INCLUDE_COMPTON`. ## 2-DIMENSIONAL SPECTRA. This basic background estimation function allows to separate useless; spectrum information (2D-continuous background and coincidences of peaks; with background in both dimensions) from peaks. It calculates background; spectrum from the source spectrum. The result is placed in the array; pointed by spectrum pointer. On successful completion it returns 0. On; error it returns a pointer to the string describing error. ``` {.cpp}; char *Background2(float **spectrum,; int sizex,; int sizey,; int number_of_iterations);; ```. Function parameters:. - **`spectrum`**: pointer to the array of the source spectrum; - **`sizex`**: x length of spectrum; - **`sizey`**: y length of spectrum; - **`number_of_iterations`**: width of the clipping window. In Figure 1.6 we present an example of a 2-dimensional spectrum bef",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/spectrum/Spectrum.md:4192,log,logical,4192,documentation/spectrum/Spectrum.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/spectrum/Spectrum.md,1,['log'],['logical']
Testability,"ike ``&`` or ``*``. alpha.webkit.UncountedLocalVarsChecker; """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; The goal of this rule is to make sure that any uncounted local variable is backed by a ref-counted object with lifetime that is strictly larger than the scope of the uncounted local variable. To be on the safe side we require the scope of an uncounted variable to be embedded in the scope of ref-counted object that backs it. These are examples of cases that we consider safe:. .. code-block:: cpp. void foo1() {; RefPtr<RefCountable> counted;; // The scope of uncounted is EMBEDDED in the scope of counted.; {; RefCountable* uncounted = counted.get(); // ok; }; }. void foo2(RefPtr<RefCountable> counted_param) {; RefCountable* uncounted = counted_param.get(); // ok; }. void FooClass::foo_method() {; RefCountable* uncounted = this; // ok; }. Here are some examples of situations that we warn about as they *might* be potentially unsafe. The logic is that either we're able to guarantee that an argument is safe or it's considered if not a bug then bug-prone. .. code-block:: cpp. void foo1() {; RefCountable* uncounted = new RefCountable; // warn; }. RefCountable* global_uncounted;; void foo2() {; RefCountable* uncounted = global_uncounted; // warn; }. void foo3() {; RefPtr<RefCountable> counted;; // The scope of uncounted is not EMBEDDED in the scope of counted.; RefCountable* uncounted = counted.get(); // warn; }. We don't warn about these cases - we don't consider them necessarily safe but since they are very common and usually safe we'd introduce a lot of false positives otherwise:; - variable defined in condition part of an ```if``` statement; - variable defined in init statement condition of a ```for``` statement. For the time being we also don't warn about uninitialized uncounted local variables. Debug Checkers; ---------------. .. _debug-checkers:. debug; ^^^^^. Checkers used for debugging the analyzer.; :doc:`developer-docs/DebugChecks` page contains a detailed descriptio",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:85065,log,logic,85065,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['log'],['logic']
Testability,"ikely between a 10% overhead and a 50% overhead with most; large applications seeing a 30% overhead or less. | Benchmark | `lfence` | Load Hardening | Mitigated Speedup |; | -------------------------------------- | -------: | -------------: | ----------------: |; | Google microbenchmark suite | -74.8% | -36.4% | **2.5x** |; | Large server QPS (using ThinLTO & PGO) | -62% | -29% | **1.8x** |. Below is a visualization of the microbenchmark suite results which helps show; the distribution of results that is somewhat lost in the summary. The y-axis is; a log-scale speedup ratio of load hardening relative to `lfence` (up -> faster; -> better). Each box-and-whiskers represents one microbenchmark which may have; many different metrics measured. The red line marks the median, the box marks; the first and third quartiles, and the whiskers mark the min and max. ![Microbenchmark result visualization](speculative_load_hardening_microbenchmarks.png). We don't yet have benchmark data on SPEC or the LLVM test suite, but we can; work on getting that. Still, the above should give a pretty clear; characterization of the performance, and specific benchmarks are unlikely to; reveal especially interesting properties. ### Future Work: Fine Grained Control and API-Integration. The performance overhead of this technique is likely to be very significant and; something users wish to control or reduce. There are interesting options here; that impact the implementation strategy used. One particularly appealing option is to allow both opt-in and opt-out of this; mitigation at reasonably fine granularity such as on a per-function basis,; including intelligent handling of inlining decisions -- protected code can be; prevented from inlining into unprotected code, and unprotected code will become; protected when inlined into protected code. For systems where only a limited; set of code is reachable by externally controlled inputs, it may be possible to; limit the scope of mitigation through such mec",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md:48570,benchmark,benchmark,48570,interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"il; about what is being run.; If you built LLVM and Clang using CMake, the test suite can be run; with make check-clang from the top-level LLVM directory.; The tests primarily consist of a test runner script running the compiler; under test on individual test files grouped in the directories under the; test directory. The individual test files include comments at the; beginning indicating the Clang compile options to use, to be read; by the test runner. Embedded comments also can do things like telling; the test runner that an error is expected at the current line.; Any output files produced by the test will be placed under; a created Output directory.; During the run of make test, the terminal output will; display a line similar to the following:; --- Running clang tests for i686-pc-linux-gnu ---; followed by a line continually overwritten with the current test; file being compiled, and an overall completion percentage.; After the make test run completes, the absence of any; Failing Tests (count): message indicates that no tests; failed unexpectedly. If any tests did fail, the; Failing Tests (count): message will be followed by a list; of the test source file paths that failed. For example:. Failing Tests (3):; /home/john/llvm/tools/clang/test/SemaCXX/member-name-lookup.cpp; /home/john/llvm/tools/clang/test/SemaCXX/namespace-alias.cpp; /home/john/llvm/tools/clang/test/SemaCXX/using-directive.cpp. If you used the make VERBOSE=1 option, the terminal; output will reflect the error messages from the compiler and; test runner.; The regression suite can also be run with Valgrind by running; make test VG=1 in the top-level clang directory.; For more intensive changes, running; the LLVM; Test Suite with clang is recommended. Currently the best way to; override LLVMGCC, as in: make LLVMGCC=""clang -std=gnu89""; TEST=nightly report (make sure clang is in your PATH or use the; full path). Testing using Visual Studio on Windows. The Clang test suite can be run from either Visual ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html:3643,test,test,3643,interpreter/llvm-project/clang/www/hacking.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html,2,['test'],"['test', 'tests']"
Testability,"ilable:. PROOF_UseTreeCache   ; Int_t       ; Enable (0) or Disable (1) the tree cache (default 1); PROOF_CacheSize      ; Long64_t     Cache size in bytes; (default 10000000). Examples:;        ; a) to disable the cache for the next run enter:;                                 ; proof->SetParameter(""PROOF_UseTreeCache"", 0);        ; b) to set the cache size to 20M;                                 ; proof->SetParameter(""PROOF_CacheSize"", 20000000);  Add the parameter; PROOF_UseParallelUnzip to toggle the use of the parallel unzip; (default off for now); to enable it add the following call;            ;            ;        ;  proof->SetParameter(""PROOF_UseParallelUnzip"", 1).  Add the possibility to give indications about; the number of workers at startup.;  E.g.;        1. To; start max 5 workers;             ; TProof::Open(""<master>"",""workers=5"");        2. To; start max 2 workers per physical machine;             ; TProof::Open(""<master>"",""workers=2x"");      This is useful in general when; running tests (equivalent but quicker then full startup;      followed by; TProof::SetParallel(n) or TProof::DeactivateWorker(...)).; Add support for the worker SysInfo_t in TSlaveInfo; (obtained via TProof::GetListOfSlaveInfos()); Add new submerger functionality to speed up the merging; phase. At the end of the query, a set of workers are promoted; submergers and assigned a sub-set of workers to merge. Once each; sub-merger has merged its sub-set of workers, it sends its result to; the master, which merges the partial results into the final; set of results.; The determination of the sub-mergers is always done dynamically, based; on the recent performance of workers. An optimal (i.e. giving the; highest speed-up) number can be calculated analytically under simple; assumptions.; Merging via submergers is by default disabled. To enable it, with the; optimal number of sub-mergers, one should set the integer parameter; 'PROOF_UseMergers' to 0, i.e.                     ; proof->SetPara",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:1705,test,tests,1705,proof/doc/v526/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html,1,['test'],['tests']
Testability,"ild python; ```. #### Mac OS X; Mac OS X provides a sane environement for CPT to build Apple Disk Images; (DMG Installers). On older versions of Mac OS, you need to update XCode to; get the latest version of Clang supporting c++11 features. A great package; manager for Mac OS X is [Macports]. It is recommended that you use the; packages provided by Macports for running CPT (or any other tool if that; is the case) rather than the ones which come pre-installed with Mac OS.; Assuming that you have Macports installed on your Mac, you can use the; following command to install the requisite packages (also done automatically; by CPT):; [Macports]:http://www.macports.org/; ```sh; sudo port -v selfupdate; sudo port install git g++ python; ```. ### Usage; ```sh; cd tools/packaging/; ```. ```; usage: cpt.py [-h] [-c] [--current-dev CURRENT_DEV]; [--last-stable LAST_STABLE] [--tarball-tag TARBALL_TAG]; [--deb-tag DEB_TAG] [--rpm-tag RPM_TAG] [--nsis-tag NSIS_TAG]; [--dmg-tag DMG_TAG] [--with-llvm-url WITH_LLVM_URL]; [--with-clang-url WITH_CLANG_URL]; [--with-cling-url WITH_CLING_URL] [--no-test]; [--create-dev-env CREATE_DEV_ENV] [--with-workdir WITH_WORKDIR]; [--make-proper MAKE_PROPER]. Cling Packaging Tool. optional arguments:; -h, --help show this help message and exit; -c, --check-requirements; Check if packages required by the script are installed; --current-dev CURRENT_DEV; Package the latest development snapshot in one of; these formats: tar | deb | nsis | rpm | dmg | pkg; --last-stable LAST_STABLE; Package the last stable snapshot in one of these; formats: tar | deb | nsis | rpm | dmg | pkg; --tarball-tag TARBALL_TAG; Package the snapshot of a given tag in a tarball; (.tar.bz2); --deb-tag DEB_TAG Package the snapshot of a given tag in a Debian; package (.deb); --rpm-tag RPM_TAG Package the snapshot of a given tag in an RPM package; (.rpm); --nsis-tag NSIS_TAG Package the snapshot of a given tag in an NSIS; installer (.exe); --dmg-tag DMG_TAG Package the snapshot of a g",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/README.md:6602,test,test,6602,interpreter/cling/tools/packaging/README.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/packaging/README.md,1,['test'],['test']
Testability,"ile must contain lines starting with ""RUN:"" that tell :program:`lit`; how to run it. If there are no RUN lines, :program:`lit` will issue an error; while running a test. RUN lines are specified in the comments of the test program using the; keyword ``RUN`` followed by a colon, and lastly the command (pipeline); to execute. Together, these lines form the ""script"" that :program:`lit`; executes to run the test case. The syntax of the RUN lines is similar to a; shell's syntax for pipelines including I/O redirection and variable; substitution. However, even though these lines may *look* like a shell; script, they are not. RUN lines are interpreted by :program:`lit`.; Consequently, the syntax differs from shell in a few ways. You can specify; as many RUN lines as needed. :program:`lit` performs substitution on each RUN line to replace LLVM tool names; with the full paths to the executable built for each tool (in; ``$(LLVM_OBJ_ROOT)/bin``). This ensures that :program:`lit` does; not invoke any stray LLVM tools in the user's path during testing. Each RUN line is executed on its own, distinct from other lines unless; its last character is ``\``. This continuation character causes the RUN; line to be concatenated with the next one. In this way you can build up; long pipelines of commands without making huge line lengths. The lines; ending in ``\`` are concatenated until a RUN line that doesn't end in; ``\`` is found. This concatenated set of RUN lines then constitutes one; execution. :program:`lit` will substitute variables and arrange for the pipeline; to be executed. If any process in the pipeline fails, the entire line (and; test case) fails too. Below is an example of legal RUN lines in a ``.ll`` file:. .. code-block:: llvm. ; RUN: llvm-as < %s | llvm-dis > %t1; ; RUN: llvm-dis < %s.bc-13 > %t2; ; RUN: diff %t1 %t2. As with a Unix shell, the RUN lines permit pipelines and I/O; redirection to be used. There are some quoting rules that you must pay attention to when writing",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:9323,test,testing,9323,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['testing']
Testability,"ile.readObject(""ntuple;1"");; draw(""drawing"", tree, ""px:py::pz>5"");; ```. To get access to selected branches, one should use `TSelector` class:. ```javascript; import { openFile } from 'https://root.cern/js/latest/modules/io.mjs';; import { draw } from 'https://root.cern/js/latest/modules/draw.mjs';; import { TSelector, treeProcess } from 'https://root.cern/js/latest/modules/tree.mjs';. let file = await openFile(""https://root.cern/js/files/hsimple.root"");; let tree = await file.readObject(""ntuple;1"");; let selector = new TSelector();. selector.AddBranch(""px"");; selector.AddBranch(""py"");. let cnt = 0, sumpx = 0, sumpy = 0;. selector.Begin = function() {; // function called before reading of TTree starts; }. selector.Process = function() {; // function called for every entry; sumpx += this.tgtobj.px;; sumpy += this.tgtobj.py;; cnt++;; }. selector.Terminate = function(res) {; if (!res || (cnt === 0)) return;; let meanpx = sumpx/cnt, meanpy = sumpy/cnt;; console.log(`Results meanpx = ${meanpx} meanpy = ${meanpy}`);; }. await treeProcess(tree, selector);; ```. Here is [running example](https://root.cern/js/latest/api.htm#ttree_tselector) and [source code](https://github.com/root-project/jsroot/blob/master/demo/read_tree.htm). This examples shows how read TTree from binary file and create `TSelector` object.; Logically it is similar to original TSelector class - for every read entry `TSelector::Process()` method is called.; Selected branches can be accessed from **tgtobj** data member. At the end of tree reading `TSelector::Terminate()` method; will be called. As third parameter of treeProcess() function one could provide object with arguments. ```javascript; let args = { numentries: 1000, firstentry: 500 };; treeProcess(tree, selector, args);; ```. ### TGeo API. Any supported TGeo object can be drawn directly with normal `draw()` function. If necessary, one can create three.js model for supported object directly and use such model; separately. This can be done with the fun",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/JSROOT/JSROOT.md:41837,log,log,41837,documentation/JSROOT/JSROOT.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/JSROOT/JSROOT.md,1,['log'],['log']
Testability,"ile; ``__has_extension`` evaluates to 1 if the feature is supported by Clang in the; current language (either as a language extension or a standard language; feature) or 0 if not. They can be used like this:. .. code-block:: c++. #ifndef __has_feature // Optional of course.; #define __has_feature(x) 0 // Compatibility with non-clang compilers.; #endif; #ifndef __has_extension; #define __has_extension __has_feature // Compatibility with pre-3.0 compilers.; #endif. ...; #if __has_feature(cxx_rvalue_references); // This code will only be compiled with the -std=c++11 and -std=gnu++11; // options, because rvalue references are only standardized in C++11.; #endif. #if __has_extension(cxx_rvalue_references); // This code will be compiled with the -std=c++11, -std=gnu++11, -std=c++98; // and -std=gnu++98 options, because rvalue references are supported as a; // language extension in C++98.; #endif. .. _langext-has-feature-back-compat:. For backward compatibility, ``__has_feature`` can also be used to test; for support for non-standardized features, i.e. features not prefixed ``c_``,; ``cxx_`` or ``objc_``. Another use of ``__has_feature`` is to check for compiler features not related; to the language standard, such as e.g. :doc:`AddressSanitizer; <AddressSanitizer>`. If the ``-pedantic-errors`` option is given, ``__has_extension`` is equivalent; to ``__has_feature``. The feature tag is described along with the language feature below. The feature name or extension name can also be specified with a preceding and; following ``__`` (double underscore) to avoid interference from a macro with; the same name. For instance, ``__cxx_rvalue_references__`` can be used instead; of ``cxx_rvalue_references``. ``__has_cpp_attribute``; -----------------------. This function-like macro is available in C++20 by default, and is provided as an; extension in earlier language standards. It takes a single argument that is the; name of a double-square-bracket-style attribute. The argument can eith",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LanguageExtensions.rst:4185,test,test,4185,interpreter/llvm-project/clang/docs/LanguageExtensions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LanguageExtensions.rst,1,['test'],['test']
Testability,"ileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""baz()"",; ""Line"": 11,; ""StartAddress"": ""0x4004be"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 9; },; {; ""Column"": 0,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""main"",; ""Line"": 15,; ""StartAddress"": ""0x4004be"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 14; }; ]; },; {; ""Address"": ""0x400486"",; ""ModuleName"": ""inlined.elf"",; ""Symbol"": [; {; ""Column"": 3,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""foo()"",; ""Line"": 6,; ""StartAddress"": ""0x400486"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 5; }; ]; }; ]. .. option:: --pretty-print, -p. Print human readable output. If :option:`--inlining` is specified, the; enclosing scope is prefixed by (inlined by).; For JSON output, the option will cause JSON to be indented and split over; new lines. Otherwise, the JSON output will be printed in a compact form. .. code-block:: console. $ llvm-symbolizer --obj=inlined.elf 0x4004be --inlining --pretty-print; baz() at /tmp/test.cpp:11:18; (inlined by) main at /tmp/test.cpp:15:0. .. option:: --print-address, --addresses, -a. Print address before the source code location. Defaults to false. .. code-block:: console. $ llvm-symbolizer --obj=inlined.elf --print-address 0x4004be; 0x4004be; baz(); /tmp/test.cpp:11:18; main; /tmp/test.cpp:15:0. $ llvm-symbolizer --obj=inlined.elf 0x4004be --pretty-print --print-address; 0x4004be: baz() at /tmp/test.cpp:11:18; (inlined by) main at /tmp/test.cpp:15:0. .. option:: --print-source-context-lines <N>. Print ``N`` lines of source context for each symbolized address. .. code-block:: console. $ llvm-symbolizer --obj=test.elf 0x400490 --print-source-context-lines=3; baz(); /tmp/test.cpp:11:0; 10 : volatile int k = 42;; 11 >: return foz() + k;; 12 : }. .. option:: --relativenames. Print the file's path relative to the compilation directory, instead; of the absolute path. If the command-line to the compiler included; the full path, this will be the sa",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:11054,test,test,11054,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,iler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_tls.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.h; compiler-rt/lib/gwp_asan/platform_specific/utilities_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/utilities_posix.cpp; compiler-rt/lib/gwp_asan/tests/backtrace.cpp; compiler-rt/lib/gwp_asan/tests/basic.cpp; compiler-rt/lib/gwp_asan/tests/compression.cpp; compiler-rt/lib/gwp_asan/tests/crash_handler_api.cpp; compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.h; compiler-rt/lib/hwasan/hwasan_preinit.cpp; compiler-rt/lib/interception/interception_mac.cpp; compiler-rt/lib/interception/tests/interception_test_main.cpp; compiler-rt/lib/lsan/lsan.h,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:93361,test,tests,93361,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,iler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl/tsan_ilist.h; compiler-rt/lib/tsan/rtl/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl/tsan_mman.h; compiler-rt/lib/tsan/rtl/tsan_mutexset.h; compiler-rt/lib/tsan/rtl/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl/tsan_shadow.h; compiler-rt/lib/tsan/rtl/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl/tsan_suppressions.h; compiler-rt/lib/tsan/rtl/tsan_symbolize.h; compiler-rt/lib/tsan/rtl/tsan_trace.h; compiler-rt/lib/tsan/rtl/tsan_vector_clock.h; compiler-rt/lib/tsan/rtl-old/tsan_fd.h; compiler-rt/lib/tsan/rtl-old/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl-old/tsan_ilist.h; compiler-rt/lib/tsan/rtl-old/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl-old/tsan_mman.h; compiler-rt/lib/tsan/rtl-old/tsan_mutexset.h; compiler-rt/lib/tsan/rtl-old/tsan_,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:103659,test,tests,103659,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"iles POSTCMD cmd /c del AutoDict_*); endif(); ROOT_ADD_TEST(test-stressinterpreter COMMAND stressInterpreter; WORKING_DIR ${CMAKE_BINARY_DIR}; PRECMD ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/stressInterpreter.cxx; $<TARGET_FILE_DIR:stressInterpreter>/stressInterpreter.cxx; ${cleantmpfiles}; FAILREGEX Error|FAILED). #--stressHepix-------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHepix stressHepix.cxx LIBRARIES Core); #ROOT_ADD_TEST(test-stressHepix COMMAND stressHepix FAILREGEX ""FAILED|Error in""). #--stressProof-------------------------------------------------------------------------------; if(proof AND NOT WIN32); add_custom_target(TestData COMMAND ${CMAKE_COMMAND} -DDST=${CMAKE_SOURCE_DIR}/files -P ${CMAKE_CURRENT_SOURCE_DIR}/rootDownloadData.cmake); ROOT_EXECUTABLE(stressProof stressProof.cxx LIBRARIES Proof ProofPlayer Hist); ROOT_ADD_TEST(test-stressproof PRECMD ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target TestData; COMMAND stressProof lite://; -h1 ${CMAKE_SOURCE_DIR}/files/h1 -event ${CMAKE_SOURCE_DIR}/files/event; -l /tmp/stressProof-%d.log -cleanlog -catlog -noprogress; ENVIRONMENT PATH=${CMAKE_BINARY_DIR}/bin:$ENV{PATH}; FAILREGEX ""FAILED|Error in""); endif(). #--testbits----------------------------------------------------------------------------------; ROOT_EXECUTABLE(testbits testbits.cxx LIBRARIES Core); ROOT_ADD_TEST(test-testbits COMMAND testbits). #--ctorture----------------------------------------------------------------------------------; ROOT_EXECUTABLE(ctorture ctorture.cxx LIBRARIES MathCore); ROOT_ADD_TEST(test-ctorture COMMAND ctorture). #--qprandom----------------------------------------------------------------------------------; ROOT_EXECUTABLE(QpRandomDriver QpRandomDriver.cxx LIBRARIES Quadp); ROOT_ADD_TEST(test-qprandom COMMAND QpRandomDriver 10 2 2). #--threads----------------------------------------------------------------------------------; ROOT_EXECUTABLE(threads t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:15521,test,test-stressproof,15521,test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt,1,['test'],['test-stressproof']
Testability,"iles with the; ""safe"" backend (into a shared object), and one piece which it runs with either; the JIT or the static LLC compiler. It uses several techniques to reduce the; amount of code pushed through the LLVM code generator, to reduce the potential; scope of the problem. After it is finished, it emits two bitcode files (called; ""test"" [to be compiled with the code generator] and ""safe"" [to be compiled with; the ""safe"" backend], respectively), and instructions for reproducing the; problem. The code generator debugger assumes that the ""safe"" backend produces; good code. .. _miscompilation debugger:. Miscompilation debugger; -----------------------. The miscompilation debugger works similarly to the code generator debugger. It; works by splitting the test program into two pieces, running the optimizations; specified on one piece, linking the two pieces back together, and then executing; the result. It attempts to narrow down the list of passes to the one (or few); which are causing the miscompilation, then reduce the portion of the test; program which is being miscompiled. The miscompilation debugger assumes that; the selected code generator is working properly. Advice for using bugpoint; =========================. ``bugpoint`` can be a remarkably useful tool, but it sometimes works in; non-obvious ways. Here are some hints and tips:. * In the code generator and miscompilation debuggers, ``bugpoint`` only works; with programs that have deterministic output. Thus, if the program outputs; ``argv[0]``, the date, time, or any other ""random"" data, ``bugpoint`` may; misinterpret differences in these data, when output, as the result of a; miscompilation. Programs should be temporarily modified to disable outputs; that are likely to vary from run to run. * In the `crash debugger`_, ``bugpoint`` does not distinguish different crashes; during reduction. Thus, if new crash or miscompilation happens, ``bugpoint``; will continue with the new crash instead. If you would like to s",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst:5437,test,test,5437,interpreter/llvm-project/llvm/docs/Bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst,1,['test'],['test']
Testability,"iles. If an input of a different; file format is specified, :program:`llvm-size` falls back to ``berkeley``; format. When producing ``darwin`` format, the tool displays information about; segments and sections:. .. code-block:: console. $ llvm-size --format=darwin macho.obj macho2.obj; macho.obj:; Segment : 12; Section (__TEXT, __text): 4; Section (__DATA, __data): 8; total 12; total 12; macho2.obj:; Segment : 48; Section (__TEXT, __text): 16; Section (__DATA, __data): 32; total 48; total 48. .. option:: --help, -h. Display a summary of command line options. .. option:: -m. Equivalent to :option:`--format` with a value of ``darwin``. .. option:: -o. Equivalent to :option:`--radix` with a value of ``8``. .. option:: --radix=<value>. Display size information in the specified radix. Permitted values are ``8``,; ``10`` (the default) and ``16`` for octal, decimal and hexadecimal output; respectively. Example:. .. code-block:: console. $ llvm-size --radix=8 test.o; text data bss oct hex filename; 0152 04 04 162 72 test.o. $ llvm-size --radix=10 test.o; text data bss dec hex filename; 106 4 4 114 72 test.o. $ llvm-size --radix=16 test.o; text data bss dec hex filename; 0x6a 0x4 0x4 114 72 test.o. .. option:: --totals, -t. Applies only to ``berkeley`` output format. Display the totals for all listed; fields, in addition to the individual file listings. Example:. .. code-block:: console. $ llvm-size --totals test.elf test2.o; text data bss dec hex filename; 182 16 5 203 cb test.elf; 82 8 1 91 5b test2.o; 264 24 6 294 126 (TOTALS). .. option:: --version. Display the version of the :program:`llvm-size` executable. .. option:: -x. Equivalent to :option:`--radix` with a value of ``16``. .. option:: @<FILE>. Read command-line options from response file ``<FILE>``. EXIT STATUS; -----------. :program:`llvm-size` exits with a non-zero exit code if there is an error.; Otherwise, it exits with code 0. BUGS; ----. To report bugs, please visit <https://github.com/llvm/llvm-project/label",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-size.rst:3537,test,test,3537,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-size.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-size.rst,1,['test'],['test']
Testability,"ile} 'pr-44884-dwarf-gcc.o' -> elf32-littlearm. [001] {CompileUnit} 'pr-44884.cpp'; [002] {Producer} 'GNU C++14 10.2.1 20201103'; [002] 1 {Function} extern not_inlined 'bar' -> 'int'; [003] 1 {Parameter} 'Input' -> 'float'; [003] 1 {Line}; [003] 1 {Line}; [003] 1 {Line}; [002] 3 {Function} extern not_inlined 'foo' -> 'unsigned int'; [003] {Block}; [004] {Block}; [005] 9 {Variable} 'Added' -> 'FLOAT'; [005] 9 {Line}; [005] 9 {Line}; [005] 9 {Line}; [005] 10 {Line}; [005] 13 {Line}; [004] 7 {TypeAlias} 'FLOAT' -> 'float'; [003] 3 {Parameter} 'Param' -> 'char'; [003] 4 {TypeAlias} 'INT' -> 'int'; [003] 5 {Variable} 'Value' -> 'INT'; [003] 3 {Line}; [003] 5 {Line}; [003] 13 {Line}; [003] 14 {Line}; [003] 14 {Line}. From the previous logical views, we can see that the Clang compiler; emits **both typedefs at the same lexical scope (3)**, which is wrong.; GCC and MSVC emit correct lexical scope for both typedefs. Using the :program:`llvm-debuginfo-analyzer` selection facilities, we; can produce a simple tabular output showing just the logical types that; are **Typedef**. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level,format; --output-sort=name; --select-types=Typedef; --report=list; --print=types; pr-44884-*.o. Logical View:; [000] {File} 'pr-44884-codeview-clang.o' -> COFF-x86-64. [001] {CompileUnit} 'pr_44884.cpp'; [003] {TypeAlias} 'FLOAT' -> 'float'; [003] {TypeAlias} 'INT' -> 'int'. Logical View:; [000] {File} 'pr-44884-codeview-msvc.o' -> COFF-i386. [001] {CompileUnit} 'pr_44884.cpp'; [004] {TypeAlias} 'FLOAT' -> 'float'; [003] {TypeAlias} 'INT' -> 'int'. Logical View:; [000] {File} 'pr-44884-dwarf-clang.o' -> elf64-x86-64. [001] {CompileUnit} 'pr_44884.cpp'; [003] 7 {TypeAlias} 'FLOAT' -> 'float'; [003] 4 {TypeAlias} 'INT' -> 'int'. Logical View:; [000] {File} 'pr-44884-dwarf-gcc.o' -> elf32-littlearm. [001] {CompileUnit} 'pr_44884.cpp'; [004] 7 {TypeAlias} 'FLOAT' -> 'float'; [003] 4 {TypeAlias} 'INT' -> 'int'. It also shows, that the CodeView debu",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:40900,log,logical,40900,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['log'],['logical']
Testability,"ils). The ``if`` statement can also be used in a record :token:`Body`. ``assert`` --- check that a condition is true; ---------------------------------------------. The ``assert`` statement checks a boolean condition to be sure that it is true; and prints an error message if it is not. .. productionlist::; Assert: ""assert"" `condition` "","" `message` "";"". If the boolean condition is true, the statement does nothing. If the; condition is false, it prints a nonfatal error message. The **message**, which; can be an arbitrary string expression, is included in the error message as a; note. The exact behavior of the ``assert`` statement depends on its; placement. * At top level, the assertion is checked immediately. * In a record definition, the statement is saved and all assertions are; checked after the record is completely built. * In a class definition, the assertions are saved and inherited by all; the subclasses and records that inherit from the class. The assertions are; then checked when the records are completely built. * In a multiclass definition, the assertions are saved with the other; components of the multiclass and then checked each time the multiclass; is instantiated with ``defm``. Using assertions in TableGen files can simplify record checking in TableGen; backends. Here is an example of an ``assert`` in two class definitions. .. code-block:: text. class PersonName<string name> {; assert !le(!size(name), 32), ""person name is too long: "" # name;; string Name = name;; }. class Person<string name, int age> : PersonName<name> {; assert !and(!ge(age, 1), !le(age, 120)), ""person age is invalid: "" # age;; int Age = age;; }. def Rec20 : Person<""Donald Knuth"", 60> {; ...; }. Additional Details; ==================. Directed acyclic graphs (DAGs); ------------------------------. A directed acyclic graph can be represented directly in TableGen using the; ``dag`` datatype. A DAG node consists of an operator and zero or more; arguments (or operands). Each argument can ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:49740,assert,assertions,49740,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,1,['assert'],['assertions']
Testability,"ilt with ``-DLLVM_BINUTILS_INCDIR`` set properly. See; the instructions for the; `LLVM gold plugin <https://llvm.org/docs/GoldPlugin.html#how-to-build-it>`_. Controlling Backend Parallelism; -------------------------------; .. _parallelism:. By default, the ThinLTO link step will launch as many; threads in parallel as there are cores. If the number of; cores can't be computed for the architecture, then it will launch; ``std::thread::hardware_concurrency`` number of threads in parallel.; For machines with hyper-threading, this is the total number of; virtual cores. For some applications and machine configurations this; may be too aggressive, in which case the amount of parallelism can; be reduced to ``N`` via:. - gold:; ``-Wl,-plugin-opt,jobs=N``; - ld64:; ``-Wl,-mllvm,-threads=N``; - ld.lld, ld64.lld:; ``-Wl,--thinlto-jobs=N``; - lld-link:; ``/opt:lldltojobs=N``. Other possible values for ``N`` are:. - 0:; Use one thread per physical core (default); - 1:; Use a single thread only (disable multi-threading); - all:; Use one thread per logical core (uses all hyper-threads). Incremental; -----------; .. _incremental:. ThinLTO supports fast incremental builds through the use of a cache,; which currently must be enabled through a linker option. - gold (as of LLVM 4.0):; ``-Wl,-plugin-opt,cache-dir=/path/to/cache``; - ld64 (supported since clang 3.9 and Xcode 8) and Mach-O ld64.lld (as of LLVM; 15.0):; ``-Wl,-cache_path_lto,/path/to/cache``; - ELF ld.lld (as of LLVM 5.0):; ``-Wl,--thinlto-cache-dir=/path/to/cache``; - COFF lld-link (as of LLVM 6.0):; ``/lldltocache:/path/to/cache``. Cache Pruning; -------------. To help keep the size of the cache under control, ThinLTO supports cache; pruning. Cache pruning is supported with gold, ld64, and lld, but currently only; gold and lld allow you to control the policy with a policy string. The cache; policy must be specified with a linker option. - gold (as of LLVM 6.0):; ``-Wl,-plugin-opt,cache-policy=POLICY``; - ELF ld.lld (as of",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ThinLTO.rst:4489,log,logical,4489,interpreter/llvm-project/clang/docs/ThinLTO.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ThinLTO.rst,1,['log'],['logical']
Testability,"ime.; Patches welcome!. Clone Alpha Checkers; Core Alpha Checkers; C++ Alpha Checkers; LLVM Checkers; Variable Argument Alpha Checkers; Dead Code Alpha Checkers; OS X Alpha Checkers; Security Alpha Checkers; Unix Alpha Checkers; Non-determinism Alpha Checkers. Clone Alpha Checkers. Name, DescriptionExample. alpha.clone.CloneChecker; (C, C++, ObjC); Reports similar pieces of code. void log();. int max(int a, int b) { // warn; log();; if (a > b); return a;; return b;; }. int maxClone(int x, int y) { // similar code here; log();; if (x > y); return x;; return y;; }. Core Alpha Checkers. Name, DescriptionExample. alpha.core.BoolAssignment; (ObjC); Warn about assigning non-{0,1} values to boolean variables. void test() {; BOOL b = -1; // warn; }. alpha.core.CallAndMessageUnInitRefArg; (C, C++); Check for uninitialized arguments in function calls and Objective-C; message expressions. void test(void) {; int t;; int &p = t;; int &s = p;; int &q = s;; foo(q); // warn; }. void test(void) {; int x;; foo(&x); // warn; }. alpha.core.CastSize; (C); Check when casting a malloc'ed type T, whether the size is a multiple of the; size of T (Works only with unix.Malloc; or alpha.unix.MallocWithAnnotations; checks enabled). void test() {; int *x = (int *)malloc(11); // warn; }. alpha.core.CastToStruct; (C, C++); Check for cast from non-struct pointer to struct pointer. // C; struct s {};. void test(int *p) {; struct s *ps = (struct s *) p; // warn; }. // C++; class c {};. void test(int *p) {; c *pc = (c *) p; // warn; }. alpha.core.Conversion; (C, C++, ObjC); Loss of sign or precision in implicit conversions. void test(unsigned U, signed S) {; if (S > 10) {; if (U < S) {; }; }; if (S < -10) {; if (U < S) { // warn (loss of sign); }; }; }. void test() {; long long A = 1LL << 60;; short X = A; // warn (loss of precision); }. alpha.core.DynamicTypeChecker; (ObjC); Check for cases where the dynamic and the static type of an; object are unrelated. id date = [NSDate date];. // Warning: Object",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html:1281,test,test,1281,interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,1,['test'],['test']
Testability,"iming; -----------------; Primary and Secondary allocators have different behaviors with regard to; reclaiming. While Secondary mapped allocations can be unmapped on deallocation,; it isn't the case for the Primary, which could lead to a steady growth of the; RSS of a process. To counteract this, if the underlying OS allows it, pages; that are covered by contiguous free memory blocks in the Primary can be; released: this generally means they won't count towards the RSS of a process and; be zero filled on subsequent accesses). This is done in the deallocation path,; and several options exist to tune this behavior. Usage; =====. Platform; --------; If using Fuchsia or an Android version greater than 11, your memory allocations; are already service by Scudo (note that Android Svelte configurations still use; jemalloc). Library; -------; The allocator static library can be built from the LLVM tree thanks to the; ``scudo_standalone`` CMake rule. The associated tests can be exercised thanks to; the ``check-scudo_standalone`` CMake rule. Linking the static library to your project can require the use of the; ``whole-archive`` linker flag (or equivalent), depending on your linker.; Additional flags might also be necessary. Your linked binary should now make use of the Scudo allocation and deallocation; functions. You may also build Scudo like this:. .. code:: console. cd $LLVM/compiler-rt/lib; clang++ -fPIC -std=c++17 -msse4.2 -O2 -pthread -shared \; -I scudo/standalone/include \; scudo/standalone/*.cpp \; -o $HOME/libscudo.so. and then use it with existing binaries as follows:. .. code:: console. LD_PRELOAD=$HOME/libscudo.so ./a.out. Clang; -----; With a recent version of Clang (post rL317337), the ""old"" version of the; allocator can be linked with a binary at compilation using the; ``-fsanitize=scudo`` command-line argument, if the target platform is supported.; Currently, the only other sanitizer Scudo is compatible with is UBSan; (eg: ``-fsanitize=scudo,undefined``). Com",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ScudoHardenedAllocator.rst:5871,test,tests,5871,interpreter/llvm-project/llvm/docs/ScudoHardenedAllocator.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ScudoHardenedAllocator.rst,1,['test'],['tests']
Testability,"imit** *megabytes*. Specifies an upper limit on memory usage of the optimization and codegen. Set; to zero to disable the limit. **--output** *filename*. Whenever the test program produces output on its standard output stream, it; should match the contents of *filename* (the ""reference output""). If you; do not use this option, **bugpoint** will attempt to generate a reference output; by compiling the program with the ""safe"" backend and running it. **--run-{int,jit,llc,custom}**. Whenever the test program is compiled, **bugpoint** should generate code for it; using the specified code generator. These options allow you to choose the; interpreter, the JIT compiler, the static native code compiler, or a; custom command (see **--exec-command**) respectively. **--safe-{llc,custom}**. When debugging a code generator, **bugpoint** should use the specified code; generator as the ""safe"" code generator. This is a known-good code generator; used to generate the ""reference output"" if it has not been provided, and to; compile portions of the program that as they are excluded from the testcase.; These options allow you to choose the; static native code compiler, or a custom command, (see **--exec-command**); respectively. The interpreter and the JIT backends cannot currently; be used as the ""safe"" backends. **--exec-command** *command*. This option defines the command to use with the **--run-custom** and; **--safe-custom** options to execute the bitcode testcase. This can; be useful for cross-compilation. **--compile-command** *command*. This option defines the command to use with the **--compile-custom**; option to compile the bitcode testcase. The command should exit with a; failure exit code if the file is ""interesting"" and should exit with a; success exit code (i.e. 0) otherwise (this is the same as if it crashed on; ""interesting"" inputs). This can be useful for; testing compiler output without running any link or execute stages. To; generate a reduced unit test, you may add CH",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst:4782,test,testcase,4782,interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst,1,['test'],['testcase']
Testability,imizer/Builder/Runtime/TransformationalTest.cpp; flang/unittests/Runtime/BufferTest.cpp; flang/unittests/Runtime/CharacterTest.cpp; flang/unittests/Runtime/CommandTest.cpp; flang/unittests/Runtime/CrashHandlerFixture.cpp; flang/unittests/Runtime/CrashHandlerFixture.h; flang/unittests/Runtime/ExternalIOTest.cpp; flang/unittests/Runtime/Format.cpp; flang/unittests/Runtime/Inquiry.cpp; flang/unittests/Runtime/ListInputTest.cpp; flang/unittests/Runtime/Matmul.cpp; flang/unittests/Runtime/MiscIntrinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmar,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129194,benchmark,benchmarks,129194,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,imple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1306,test,testRooDataSet,1306,roofit/roofitcore/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt,2,['test'],['testRooDataSet']
Testability,"impleStream; (C); Check for misuses of stream APIs:; fopen; fclose(demo checker, the subject of the demo; (Slides; ,Video); by Anna Zaks and Jordan Rose presented at the ; 2012 LLVM Developers' Meeting). void test() {; FILE *F = fopen(""myfile.txt"", ""w"");; } // warn: opened file is never closed. void test() {; FILE *F = fopen(""myfile.txt"", ""w"");. if (F); fclose(F);. fclose(F); // warn: closing a previously closed file stream; }. alpha.unix.Stream; (C); Check stream handling functions:fopen; tmpfile; fclose; fread; fwrite; fseek; ftell; rewind; fgetpos; fsetpos; clearerr; feof; ferror; fileno. void test() {; FILE *p = fopen(""foo"", ""r"");; } // warn: opened file is never closed. void test() {; FILE *p = fopen(""foo"", ""r"");; fseek(p, 1, SEEK_SET); // warn: stream pointer might be NULL; fclose(p);; }. void test() {; FILE *p = fopen(""foo"", ""r"");. if (p); fseek(p, 1, 3);; // warn: third arg should be SEEK_SET, SEEK_END, or SEEK_CUR. fclose(p);; }. void test() {; FILE *p = fopen(""foo"", ""r"");; fclose(p);; fclose(p); // warn: already closed; }. void test() {; FILE *p = tmpfile();; ftell(p); // warn: stream pointer might be NULL; fclose(p);; }. alpha.unix.cstring.BufferOverlap; (C); Checks for overlap in two buffer arguments; applies to:; memcpy; mempcpy. void test() {; int a[4] = {0};; memcpy(a + 2, a + 1, 8); // warn; }. alpha.unix.cstring.NotNullTerminated; (C); Check for arguments which are not null-terminated strings; applies; to:; strlen; strnlen; strcpy; strncpy; strcat; strncat. void test() {; int y = strlen((char *)&test); // warn; }. alpha.unix.cstring.OutOfBounds; (C); Check for out-of-bounds access in string functions; applies; to:; strncopy; strncat. void test(char *y) {; char x[4];; if (strlen(y) == 4); strncpy(x, y, 5); // warn; }. Non-determinism Alpha Checkers. Name, DescriptionExample. alpha.nondeterminism.PointerIteration; (C++); Check for non-determinism caused by iterating unordered containers of pointers. // C++; void test() {; int a = 1, b = 2;; std::unord",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html:14838,test,test,14838,interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,1,['test'],['test']
Testability,"important when it comes to deleting objects; if; nobody owns the object it could end up as wasted memory (i.e. a memory; leak) when no longer needed. If a collection is deleted, its objects are; not. The user can force a collection to delete its objects, but that is; the user's choice. ### Determining the Class of Contained Objects. Most containers may hold heterogeneous collections of objects and then; it is left to the user to correctly cast the **`TObject`** pointer to; the right class. Casting to the wrong class will give wrong results and; may well crash the program! Therefore, the user has to be very careful.; Often a container only contains one class of objects, but if it really; contains a mixture, it is possible to ask each object about its class; using the `InheritsFrom` method. For example if `myObject` is a **`TObject`** pointer:. ``` {.cpp}; if (myObject->InheritsFrom(""TParticle"") {; printf(""myObject is a TParticlen"");; }; ```. As the name suggests, this test works even if the object is a subclass; of **`TParticle`**. The member function `IsA()` can be used instead of; `InheritsFrom` to make the test exact. The `InheritsFrom` and `IsA`; methods use the extensive Run Time Type Information (RTTI) available via; the ROOT meta-classes. ### Types of Collections. The ROOT system implements the following basic types of collections:; unordered collections, ordered collections and sorted collections. Next; figure shows the inheritance hierarchy for the primary collection; classes. All primary collection classes derive from the abstract base; class **`TCollection`**. ![The inheritance hierarchy of the primary collection classes](pictures/020001A3.jpg). ### Ordered Collections (Sequences). Sequences are collections that are externally ordered because they; maintain internal elements according to the order in which they were; added. The following sequences are available:. - **`TList`**. - **`THashList`**. - **`TOrdCollection`**. - **`TObjArray`**. - **`TClonesArray",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/CollectionClasses.md:3286,test,test,3286,documentation/users-guide/CollectionClasses.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/CollectionClasses.md,1,['test'],['test']
Testability,"in BitVector, so SmallBitVector should only be used when; larger counts are rare. At this time, SmallBitVector does not support set operations (and, or, xor), and; its operator[] does not provide an assignable lvalue. .. _dss_sparsebitvector:. SparseBitVector; ^^^^^^^^^^^^^^^. The SparseBitVector container is much like BitVector, with one major difference:; Only the bits that are set, are stored. This makes the SparseBitVector much; more space efficient than BitVector when the set is sparse, as well as making; set operations O(number of set bits) instead of O(size of universe). The; downside to the SparseBitVector is that setting and testing of random bits is; O(N), and on large SparseBitVectors, this can be slower than BitVector. In our; implementation, setting or testing bits in sorted order (either forwards or; reverse) is O(1) worst case. Testing and setting bits within 128 bits (depends; on size) of the current bit is also O(1). As a general statement,; testing/setting bits in a SparseBitVector is O(distance away from last set bit). .. _dss_coalescingbitvector:. CoalescingBitVector; ^^^^^^^^^^^^^^^^^^^. The CoalescingBitVector container is similar in principle to a SparseBitVector,; but is optimized to represent large contiguous ranges of set bits compactly. It; does this by coalescing contiguous ranges of set bits into intervals. Searching; for a bit in a CoalescingBitVector is O(log(gaps between contiguous ranges)). CoalescingBitVector is a better choice than BitVector when gaps between ranges; of set bits are large. It's a better choice than SparseBitVector when find(); operations must have fast, predictable performance. However, it's not a good; choice for representing sets which have lots of very short ranges. E.g. the set; `{2*x : x \in [0, n)}` would be a pathological input. .. _utility_functions:. Useful Utility Functions; ========================. LLVM implements a number of general utility functions used across the; codebase. You can find the most com",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst:98679,test,testing,98679,interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,1,['test'],['testing']
Testability,"in MathFuncs.h`,; for which the custom derivative is not supported, but in this specific; instance, it falls back to Numeric Differentiation and works fine, since `; gamma_cdf()` doesn't have a lot of parameters. > In such cases, Numeric Differentiation fallback is only used for that; specific function. In above example, `gamma_cdf()` falls back to Numeric; Differentiation but other functions in `MathFuncs.h` will still be; able to use AD. This is because Clad is going to assume that you have a; derivative for this `gamma_cdf()` function, and the remaining functions will; use AD as expected. In the end, the remaining functions (including; `gamma_cdf()`) will try to fall back to Numeric Differentiation. However, if you want to add pure AD support, you need to make sure that all; your external functions are supported by Clad (meaning there is a custom; derivative defined for each of them). ### How do I test my new class while adding AD support?. Please look at the test classes that test the derivatives, evaluates,; fixtures, etc. (defined in 'roofit/roofitcore/test'). You can clone and adapt; these tests to your class as needed. For example:. > [roofit/roofitcore/test/testRooFuncWrapper.cxx](https://github.com/root-project/root/blob/master/roofit/roofitcore/test/testRooFuncWrapper.cxx). > Tip: Tests like above can be referenced to see which parts of RooFit already; support AD. ### How do I control my compile time?. This is an area of research that still needs some work. In most cases, the; compile times are reasonable, but with an increase in the level of complexity,; higher compile times may be encountered. ## Appendix B - Where does AD Logic Implementation reside?. Following classes provide several Helper Functions to translate existing logic; into AD-supported logic. a - RooFit::Detail::CodeSquashContext. b - RooFuncWrapper. ### a. RooFit::Detail::CodeSquashContext. > [roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h](https://github.com/root-project/root/blo",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/roofit_ad.md:28960,test,test,28960,roofit/doc/developers/roofit_ad.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/roofit_ad.md,2,['test'],['test']
Testability,"in `the offline; compilation from OpenCL kernel sources into SPIR-V using open source; tools; <https://github.com/KhronosGroup/OpenCL-Guide/blob/main/chapters/os_tooling.md>`_.; From clang 14 onwards SPIR-V can be generated directly as detailed in; :ref:`the SPIR-V support section <spir-v>`. Clang currently supports OpenCL C language standards up to v2.0. Clang mainly; supports full profile. There is only very limited support of the embedded; profile.; From clang 9 a C++ mode is available for OpenCL (see; :ref:`C++ for OpenCL <cxx_for_opencl>`). OpenCL v3.0 support is complete but it remains in experimental state, see more; details about the experimental features and limitations in :doc:`OpenCLSupport`; page. OpenCL Specific Options; -----------------------. Most of the OpenCL build options from `the specification v2.0 section 5.8.4; <https://www.khronos.org/registry/cl/specs/opencl-2.0.pdf#200>`_ are available. Examples:. .. code-block:: console. $ clang -cl-std=CL2.0 -cl-single-precision-constant test.cl. Many flags used for the compilation for C sources can also be passed while; compiling for OpenCL, examples: ``-c``, ``-O<1-4|s>``, ``-o``, ``-emit-llvm``, etc. Some extra options are available to support special OpenCL features. .. option:: -cl-no-stdinc. Allows to disable all extra types and functions that are not native to the compiler.; This might reduce the compilation speed marginally but many declarations from the; OpenCL standard will not be accessible. For example, the following will fail to; compile. .. code-block:: console. $ echo ""bool is_wg_uniform(int i){return get_enqueued_local_size(i)==get_local_size(i);}"" > test.cl; $ clang -cl-std=CL2.0 -cl-no-stdinc test.cl; error: use of undeclared identifier 'get_enqueued_local_size'; error: use of undeclared identifier 'get_local_size'. More information about the standard types and functions is provided in :ref:`the; section on the OpenCL Header <opencl_header>`. .. _opencl_cl_ext:. .. option:: -cl-ext. Enabl",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:142738,test,test,142738,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"in depends on the part of LLVM being tested. These tests are driven by; the :doc:`Lit <CommandGuide/lit>` testing tool (which is part of LLVM), and; are located in the ``llvm/test`` directory. Typically when a bug is found in LLVM, a regression test containing just; enough code to reproduce the problem should be written and placed; somewhere underneath this directory. For example, it can be a small; piece of LLVM IR distilled from an actual application or benchmark. Testing Analysis; ----------------. An analysis is a pass that infer properties on some part of the IR and not; transforming it. They are tested in general using the same infrastructure as the; regression tests, by creating a separate ""Printer"" pass to consume the analysis; result and print it on the standard output in a textual format suitable for; FileCheck.; See `llvm/test/Analysis/BranchProbabilityInfo/loop.ll <https://github.com/llvm/llvm-project/blob/main/llvm/test/Analysis/BranchProbabilityInfo/loop.ll>`_; for an example of such test. ``test-suite``; --------------. The test suite contains whole programs, which are pieces of code which; can be compiled and linked into a stand-alone program that can be; executed. These programs are generally written in high level languages; such as C or C++. These programs are compiled using a user specified compiler and set of; flags, and then executed to capture the program output and timing; information. The output of these programs is compared to a reference; output to ensure that the program is being compiled correctly. In addition to compiling and executing programs, whole program tests; serve as a way of benchmarking LLVM performance, both in terms of the; efficiency of the programs generated as well as the speed with which; LLVM compiles, optimizes, and generates code. The test-suite is located in the ``test-suite``; `repository on GitHub <https://github.com/llvm/llvm-test-suite.git>`_. See the :doc:`TestSuiteGuide` for details. Debugging Information tests; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:3103,test,test,3103,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"in the C11; standard. In C, type compatibility is decided according to the rules given in the; appropriate standard, but in C++, which lacks the type compatibility rules used; in C, types are considered compatible only if they are equivalent. Clang also supports an extended form of ``_Generic`` with a controlling type; rather than a controlling expression. Unlike with a controlling expression, a; controlling type argument does not undergo any conversions and thus is suitable; for use when trying to match qualified types, incomplete types, or function; types. Variable-length array types lack the necessary compile-time information; to resolve which association they match with and thus are not allowed as a; controlling type argument. Use ``__has_extension(c_generic_selection_with_controlling_type)`` to determine; if support for this extension is enabled. C11 ``_Static_assert()``; ^^^^^^^^^^^^^^^^^^^^^^^^. Use ``__has_feature(c_static_assert)`` or ``__has_extension(c_static_assert)``; to determine if support for compile-time assertions using ``_Static_assert`` is; enabled. C11 ``_Thread_local``; ^^^^^^^^^^^^^^^^^^^^^. Use ``__has_feature(c_thread_local)`` or ``__has_extension(c_thread_local)``; to determine if support for ``_Thread_local`` variables is enabled. Modules; -------. Use ``__has_feature(modules)`` to determine if Modules have been enabled.; For example, compiling code with ``-fmodules`` enables the use of Modules. More information could be found `here <https://clang.llvm.org/docs/Modules.html>`_. Language Extensions Back-ported to Previous Standards; =====================================================. ====================================== ================================ ============= =============; Feature Feature Test Macro Introduced In Backported To; ====================================== ================================ ============= =============; variadic templates __cpp_variadic_templates C++11 C++03; Alias templates __cpp_alias_templates C++11 C",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LanguageExtensions.rst:54206,assert,assertions,54206,interpreter/llvm-project/clang/docs/LanguageExtensions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LanguageExtensions.rst,1,['assert'],['assertions']
Testability,"in your tool code where possible as it can greatly improve; readability. .. _err_cantfail:. Using cantFail to simplify safe callsites; """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""". Some functions may only fail for a subset of their inputs, so calls using known; safe inputs can be assumed to succeed. The cantFail functions encapsulate this by wrapping an assertion that their; argument is a success value and, in the case of Expected<T>, unwrapping the; T value:. .. code-block:: c++. Error onlyFailsForSomeXValues(int X);; Expected<int> onlyFailsForSomeXValues2(int X);. void foo() {; cantFail(onlyFailsForSomeXValues(KnownSafeValue));; int Y = cantFail(onlyFailsForSomeXValues2(KnownSafeValue));; ...; }. Like the ExitOnError utility, cantFail simplifies control flow. Their treatment; of error cases is very different however: Where ExitOnError is guaranteed to; terminate the program on an error input, cantFail simply asserts that the result; is success. In debug builds this will result in an assertion failure if an error; is encountered. In release builds the behavior of cantFail for failure values is; undefined. As such, care must be taken in the use of cantFail: clients must be; certain that a cantFail wrapped call really can not fail with the given; arguments. Use of the cantFail functions should be rare in library code, but they are; likely to be of more use in tool and unit-test code where inputs and/or; mocked-up classes or functions may be known to be safe. Fallible constructors; """""""""""""""""""""""""""""""""""""""""". Some classes require resource acquisition or other complex initialization that; can fail during construction. Unfortunately constructors can't return errors,; and having clients test objects after they're constructed to ensure that they're; valid is error prone as it's all too easy to forget the test. To work around; this, use the named constructor idiom and return an ``Expected<T>``:. .. code-block:: c++. class Foo {; public:. static Expected<Foo> Create(Resource R1, Re",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst:32933,assert,assertion,32933,interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,1,['assert'],['assertion']
Testability,"in/sh``). To run ``/bin/sh``, first you specify options; to the shell itself (like ``-x`` which turns on trace output), then you specify; the name of the script to run, then you specify arguments to the script. These; arguments to the script are parsed by the Bourne shell command line option; processor, but are not interpreted as options to the shell itself. Using the; CommandLine library, we would specify this as:. .. code-block:: c++. cl::opt<string> Script(cl::Positional, cl::desc(""<input script>""), cl::init(""-""));; cl::list<string> Argv(cl::ConsumeAfter, cl::desc(""<program arguments>...""));; cl::opt<bool> Trace(""x"", cl::desc(""Enable trace output""));. which automatically provides the help output:. ::. USAGE: spiffysh [options] <input script> <program arguments>... OPTIONS:; -help - display available options (-help-hidden for more); -x - Enable trace output. At runtime, if we run our new shell replacement as ```spiffysh -x test.sh -a -x; -y bar``', the ``Trace`` variable will be set to true, the ``Script`` variable; will be set to ""``test.sh``"", and the ``Argv`` list will contain ``[""-a"", ""-x"",; ""-y"", ""bar""]``, because they were specified after the last positional argument; (which is the script name). There are several limitations to when ``cl::ConsumeAfter`` options can be; specified. For example, only one ``cl::ConsumeAfter`` can be specified per; program, there must be at least one `positional argument`_ specified, there must; not be any `cl::list`_ positional arguments, and the ``cl::ConsumeAfter`` option; should be a `cl::list`_ option. .. _can be changed:; .. _Internal vs External Storage:. Internal vs External Storage; ----------------------------. By default, all command line options automatically hold the value that they; parse from the command line. This is very convenient in the common case,; especially when combined with the ability to define command line options in the; files that use them. This is called the internal storage model. Sometimes, however,",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandLine.rst:32398,test,test,32398,interpreter/llvm-project/llvm/docs/CommandLine.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandLine.rst,1,['test'],['test']
Testability,"include <stdlib.h>. void test() {; int *p = malloc(0); // warn; free(p);; }. void test() {; int *p = new int[0]; // warn; delete[] p;; }. D6178. constructors/destructors. Name, DescriptionExampleProgress. ctordtor.ExptInsideDtor; (C++); It is dangerous to let an exception leave a destructor.; Using try..catch solves the problem.; Source: Scott Meyers ""More Effective C++"", item 11: Prevent exceptions from; leaving destructors. class A {; A() {}; ~A() { throw 1; } // warn; };. void f() throw(int);. class A {; A() {}; ~A() { f(); } // warn; };. ctordtor.PlacementSelfCopy; (C++11); For a placement copy or move, it is almost certainly an error if the; constructed object is also the object being copied from. class A {};. void test(A *dst, A *src) {; ::new (dst) A(*dst); // warn (should be 'src'); }. exceptions. Name, DescriptionExampleProgress. exceptions.ThrowSpecButNotThrow; (C++); Function declaration has a throw(type) specifier but the; function do not throw exceptions. void test() throw(int) {; } // warn. exceptions.NoThrowSpecButThrows; (C++); An exception is throw from a function having a throw(); specifier. void test() throw() {; throw(1); // warn; }. exceptions.ThrownTypeDiffersSpec; (C++); The type of a thrown exception differs from those specified in; a throw(type) specifier. struct S{};. void test() throw(int) {; S s;; throw (s); // warn; }. smart pointers. Name, DescriptionExampleProgress. smartptr.SmartPtrInit; (C++); C++03: auto_ptr should store a pointer to an object obtained via; new as allocated memory will be cleaned using delete.; C++11: one should use unique_ptr<type[]> to keep a; pointer to memory allocated by new[].; C++11: to keep a pointer to memory allocated by new[] in; a shared_ptr one should use a custom deleter that calls ; delete[]..; Source: C++03 20.4.5p1; C++11 auto_ptr is deprecated (D.10). #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p1(new int); // Ok; std::auto_ptr<int> p2(new int[3]); // warn; }. #include ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:3017,test,test,3017,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"include(LLVMExternalProjectUtils). set(CLANG_PGO_TRAINING_DATA ""${CMAKE_CURRENT_SOURCE_DIR}"" CACHE PATH; ""The path to a lit testsuite containing samples for PGO and order file generation""; ); set(CLANG_PGO_TRAINING_DATA_SOURCE_DIR OFF CACHE STRING ""Path to source directory containing cmake project with source files to use for generating pgo data""); set(CLANG_PGO_TRAINING_DEPS """" CACHE STRING ""Extra dependencies needed to build the PGO training data.""). if(LLVM_BUILD_INSTRUMENTED); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/pgo-data/lit.site.cfg; ). add_lit_testsuite(generate-profraw ""Generating clang PGO data""; ${CMAKE_CURRENT_BINARY_DIR}/pgo-data/; EXCLUDE_FROM_CHECK_ALL; DEPENDS clang clear-profraw ${CLANG_PGO_TRAINING_DEPS}; ). add_custom_target(clear-profraw; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py clean ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_BINARY_DIR}/profiles/ profraw; COMMENT ""Clearing old profraw data""). if(NOT LLVM_PROFDATA); find_program(LLVM_PROFDATA llvm-profdata); endif(). if(NOT LLVM_PROFDATA); message(STATUS ""To enable merging PGO data LLVM_PROFDATA has to point to llvm-profdata""); else(); add_custom_target(generate-profdata; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py merge ${LLVM_PROFDATA} ${CMAKE_CURRENT_BINARY_DIR}/clang.profdata ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_BINARY_DIR}/profiles/; COMMENT ""Merging profdata""; DEPENDS generate-profraw); if (CLANG_PGO_TRAINING_DATA_SOURCE_DIR); llvm_ExternalProject_Add(generate-profraw-external ${CLANG_PGO_TRAINING_DATA_SOURCE_DIR}; USE_TOOLCHAIN EXLUDE_FROM_ALL NO_INSTALL DEPENDS generate-profraw); add_dependencies(generate-profdata generate-profraw-external); endif(); endif(); endif(). find_program(DTRACE dtrace); # TODO: Look into supporting this for the driver build. It will require changing; # the perf-helper.py file to understand to call `llvm` as `llvm clang`.; if(APPLE AND DTRACE AND N",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt:124,test,testsuite,124,interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt,1,['test'],['testsuite']
Testability,include/flang/Common/reference-counted.h; flang/include/flang/Common/reference.h; flang/include/flang/Common/restorer.h; flang/include/flang/Common/static-multimap-view.h; flang/include/flang/Common/template.h; flang/include/flang/Common/uint128.h; flang/include/flang/Common/unwrap.h; flang/include/flang/Decimal/binary-floating-point.h; flang/include/flang/Decimal/decimal.h; flang/include/flang/Evaluate/call.h; flang/include/flang/Evaluate/characteristics.h; flang/include/flang/Evaluate/check-expression.h; flang/include/flang/Evaluate/common.h; flang/include/flang/Evaluate/complex.h; flang/include/flang/Evaluate/constant.h; flang/include/flang/Evaluate/expression.h; flang/include/flang/Evaluate/fold-designator.h; flang/include/flang/Evaluate/fold.h; flang/include/flang/Evaluate/formatting.h; flang/include/flang/Evaluate/initial-image.h; flang/include/flang/Evaluate/integer.h; flang/include/flang/Evaluate/intrinsics-library.h; flang/include/flang/Evaluate/intrinsics.h; flang/include/flang/Evaluate/logical.h; flang/include/flang/Evaluate/real.h; flang/include/flang/Evaluate/rounding-bits.h; flang/include/flang/Evaluate/shape.h; flang/include/flang/Evaluate/static-data.h; flang/include/flang/Evaluate/tools.h; flang/include/flang/Evaluate/traverse.h; flang/include/flang/Evaluate/type.h; flang/include/flang/Evaluate/variable.h; flang/include/flang/Frontend/CompilerInstance.h; flang/include/flang/Frontend/FrontendAction.h; flang/include/flang/Frontend/FrontendActions.h; flang/include/flang/Frontend/FrontendOptions.h; flang/include/flang/Frontend/FrontendPluginRegistry.h; flang/include/flang/Frontend/PreprocessorOptions.h; flang/include/flang/Frontend/TargetOptions.h; flang/include/flang/Frontend/TextDiagnostic.h; flang/include/flang/Frontend/TextDiagnosticBuffer.h; flang/include/flang/Frontend/TextDiagnosticPrinter.h; flang/include/flang/FrontendTool/Utils.h; flang/include/flang/Lower/AbstractConverter.h; flang/include/flang/Lower/Allocatable.h; flang/include/flang/Lower/,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:110071,log,logical,110071,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['log'],['logical']
Testability,"ind the scenes it will now calculate each partial derivative on a separate process, ideally running on a separate CPU core.; This can be used to speed up fits with many parameters (at least as many as there are cores to parallelize over), since every parameter corresponds to a partial derivative.; The resulting fit parameters will be identical to those obtained with the non-parallelized gradients minimizer in most cases (see the usage notes linked below for exceptions). In upcoming releases, further developments are planned:. - Benchmark/profile and optimize performance further; - Add a `RooAbsPdf::fitTo` interface around these new classes; - Achieve feature parity with existing `RooNLLVar` functionality, e.g. ranges are not yet supported. For more details, consult the usage notes in the [TestStatistics README.md](https://github.com/root-project/root/tree/master/roofit/roofitcore/src/TestStatistics/README.md).; For benchmarking results on the prototype version of the parallelized gradient calculator, see the corresponding [CHEP19 proceedings paper](https://doi.org/10.1051/epjconf/202024506027). ### New pythonizations. Various new pythonizations are introduced to streamline your RooFit code in Python. For a complete list of all pythonized classes and functions, please see the [RooFit pythonizations page in the reference guide](https://root.cern/doc/v626/group__RoofitPythonizations.html).; All RooFit Python tutorials have been updated to profit from all available pythonizations. Some notable highlights are listed in the following. #### Keyword argument pythonizations. All functions that take RooFit command arguments as parameters now accept equivalent Python keyword arguments, for example simplifying calls to [RooAbsPdf::fitTo()](https://root.cern/doc/v626/classRooAbsPdf.html#a5f79f16f4a26a19c9e66fb5c080f59c5) such as:; ```Python; model.fitTo(data, ROOT.RooFit.Range(""left,right""), ROOT.RooFit.Save()); ```; which becomes:; ```Python; model.fitTo(data, Range=""left,right",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v626/index.md:18599,benchmark,benchmarking,18599,README/ReleaseNotes/v626/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v626/index.md,1,['benchmark'],['benchmarking']
Testability,"ind_package(Git REQUIRED). # Check whether the repository exists in the source directory or its parent; get_filename_component(source_dir ${CMAKE_CURRENT_SOURCE_DIR} REALPATH); if(IS_DIRECTORY ${source_dir}/roottest/.git); set(repo_dir ${source_dir}/roottest); elseif(IS_DIRECTORY ${source_dir}/../roottest/.git); set(repo_dir ${source_dir}/../roottest); endif(); if(DEFINED repo_dir); execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${repo_dir}/.git; remote get-url origin OUTPUT_VARIABLE originurl OUTPUT_STRIP_TRAILING_WHITESPACE). else(); # The fetch URL of the 'origin' remote is used to determine the prefix for other repositories by; # removing the `/root(\.git)?` part. If `GITHUB_PR_ORIGIN` is defined in the environment, its; # value is used instead.; if(DEFINED ENV{GITHUB_PR_ORIGIN}); set(originurl $ENV{GITHUB_PR_ORIGIN}); else(); execute_process(COMMAND ${GIT_EXECUTABLE} --git-dir=${CMAKE_CURRENT_SOURCE_DIR}/.git; remote get-url origin OUTPUT_VARIABLE originurl OUTPUT_STRIP_TRAILING_WHITESPACE); endif(); endif(); string(REGEX REPLACE ""/root(test)?(\.git)?$"" """" originprefix ${originurl}); relatedrepo_GetClosestMatch(REPO_NAME roottest; ORIGIN_PREFIX ${originprefix} UPSTREAM_PREFIX ${upstreamprefix}; FETCHURL_VARIABLE roottest_url FETCHREF_VARIABLE roottest_ref); # Use `-Droottest_force_checkout=ON` to force fetch and checkout in an existing repository; if(roottest_force_checkout); set(roottest_opts FORCE); endif(); relatedrepo_Checkout(REPO_NAME roottest FETCHURL ${roottest_url} FETCHREF ""${roottest_ref}""; REPO_DIR_VARIABLE roottest_dir ${roottest_opts}); if(NOT IS_DIRECTORY ${roottest_dir}); message(FATAL_ERROR ""Expected roottest at '${roottest_dir}' (not a directory?)""); endif(); file(REMOVE_RECURSE ${CMAKE_CURRENT_BINARY_DIR}/roottest); add_subdirectory(${roottest_dir} roottest); endif(). if(rootbench); find_package(Git REQUIRED); if(rootbench_force_checkout); set(rootbench_opts FORCE); endif(); relatedrepo_Checkout(REPO_NAME rootbench FETCHURL ${upstreampref",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:29149,test,test,29149,CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt,1,['test'],['test']
Testability,"ined:. .. code-block:: c++. enum {; flagsPointy = 1; flagsHollow = 2; flagsFlat = 4; flagsRound = 8; };. LLVM_YAML_STRONG_TYPEDEF(uint32_t, MyFlags). To support reading and writing of MyFlags, you specialize ScalarBitSetTraits<>; on MyFlags and provide the bit values and their names. .. code-block:: c++. using llvm::yaml::ScalarBitSetTraits;; using llvm::yaml::MappingTraits;; using llvm::yaml::IO;. template <>; struct ScalarBitSetTraits<MyFlags> {; static void bitset(IO &io, MyFlags &value) {; io.bitSetCase(value, ""hollow"", flagHollow);; io.bitSetCase(value, ""flat"", flagFlat);; io.bitSetCase(value, ""round"", flagRound);; io.bitSetCase(value, ""pointy"", flagPointy);; }; };. struct Info {; StringRef name;; MyFlags flags;; };. template <>; struct MappingTraits<Info> {; static void mapping(IO &io, Info& info) {; io.mapRequired(""name"", info.name);; io.mapRequired(""flags"", info.flags);; }; };. With the above, YAML I/O (when writing) will test mask each value in the; bitset trait against the flags field, and each that matches will; cause the corresponding string to be added to the flow sequence. The opposite; is done when reading and any unknown string values will result in an error. With; the above schema, a same valid YAML document is:. .. code-block:: yaml. name: Tom; flags: [ pointy, flat ]. Sometimes a ""flags"" field might contains an enumeration part; defined by a bit-mask. .. code-block:: c++. enum {; flagsFeatureA = 1,; flagsFeatureB = 2,; flagsFeatureC = 4,. flagsCPUMask = 24,. flagsCPU1 = 8,; flagsCPU2 = 16; };. To support reading and writing such fields, you need to use the maskedBitSet(); method and provide the bit values, their names and the enumeration mask. .. code-block:: c++. template <>; struct ScalarBitSetTraits<MyFlags> {; static void bitset(IO &io, MyFlags &value) {; io.bitSetCase(value, ""featureA"", flagsFeatureA);; io.bitSetCase(value, ""featureB"", flagsFeatureB);; io.bitSetCase(value, ""featureC"", flagsFeatureC);; io.maskedBitSetCase(value, ""CPU1"", flagsCP",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/YamlIO.rst:10673,test,test,10673,interpreter/llvm-project/llvm/docs/YamlIO.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/YamlIO.rst,1,['test'],['test']
Testability,"ines`` Whether to align across empty lines. .. code-block:: c++. true:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";. default: return """";; }. false:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";. default: return """";; }. * ``bool AcrossComments`` Whether to align across comments. .. code-block:: c++. true:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; /* A comment. */; default: return """";; }. false:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; /* A comment. */; default: return """";; }. * ``bool AlignCaseColons`` Whether aligned case labels are aligned on the colon, or on the; , or on the tokens after the colon. .. code-block:: c++. true:; switch (level) {; case log::info : return ""info:"";; case log::warning: return ""warning:"";; default : return """";; }. false:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; default: return """";; }. .. _AlignEscapedNewlines:. **AlignEscapedNewlines** (``EscapedNewlineAlignmentStyle``) :versionbadge:`clang-format 5` :ref:`¶ <AlignEscapedNewlines>`; Options for aligning backslashes in escaped newlines. Possible values:. * ``ENAS_DontAlign`` (in configuration: ``DontAlign``); Don't align escaped newlines. .. code-block:: c++. #define A \; int aaaa; \; int b; \; int dddddddddd;. * ``ENAS_Left`` (in configuration: ``Left``); Align escaped newlines as far left as possible. .. code-block:: c++. true:; #define A \; int aaaa; \; int b; \; int dddddddddd;. false:. * ``ENAS_Right`` (in configuration: ``Right``); Align escaped newlines in the right-most column. .. code-block:: c++. #define A \; int aaaa; \; int b; \; int dddddddddd;. .. _AlignOperands:. **AlignOperands** (``OperandAlignmentStyle``) :versionbadge:`clang-format 3.5` :ref:`¶ <AlignOperands>`; If ``true``, horizontally align operands of binary and ternary; expressions.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst:20476,log,log,20476,interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,2,['log'],['log']
Testability,"information that should be; converted to human-readable form after the fact. As with other markup formats,; the expectation is that most of the text will be displayed as is, while the; markup elements will be replaced with expanded text, or converted into active UI; elements, that present more details in symbolic form. This means there is no need for symbol tables, DWARF debugging sections, or; similar information to be directly accessible at runtime. There is also no need; at runtime for any logic intended to compute human-readable presentation of; information, such as C++ symbol demangling. Instead, logging must include markup; elements that give the contextual information necessary to make sense of the raw; data, such as memory layout details. This format identifies markup elements with a syntax that is both simple and; distinctive. It's simple enough to be matched and parsed with straightforward; code. It's distinctive enough that character sequences that look like the start; or end of a markup element should rarely if ever appear incidentally in logging; text. It's specifically intended not to require sanitizing plain text, such as; the HTML/XML requirement to replace ``<`` with ``&lt;`` and the like. :doc:`llvm-symbolizer <CommandGuide/llvm-symbolizer>` includes a symbolizing; filter via its ``--filter-markup`` option. Also, LLVM utilites emit stack; traces as markup when the ``LLVM_ENABLE_SYMBOLIZER_MARKUP`` environment; variable is set. Scope and assumptions; =====================. A symbolizing filter implementation will be independent both of the target; operating system and machine architecture where the logs are generated and of; the host operating system and machine architecture where the filter runs. This format assumes that the symbolizing filter processes intact whole lines. If; long lines might be split during some stage of a logging pipeline, they must be; reassembled to restore the original line breaks before feeding lines into the; symbolizing fi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst:1564,log,logging,1564,interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst,1,['log'],['logging']
Testability,ing TMVA/DNN/RNN tests.; # @author Saurav Shekhar; ############################################################################. set(Libraries TMVA). if (tmva-gpu); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart); endif(). #---Reference test. if (Test_Reference). # RNN - BackPropagation Reference; ROOT_EXECUTABLE(testRecurrentBackpropagation TestRecurrentBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-Backpropagation COMMAND testRecurrentBackpropagation); #; # RNN - Forward Reference; ROOT_EXECUTABLE(testRecurrentForwardPass TestRecurrentForwardPass.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-Forward COMMAND testRecurrentForwardPass). # RNN - Full Test Reference; ROOT_EXECUTABLE(testFullRNN TestFullRNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-FullRNN COMMAND testFullRNN). endif(). #--- CUDA tests. ---------------------------; if (tmva-gpu). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES}). add_executable(testRecurrentBackpropagationCuda TestRecurrentBackpropagationCuda.cxx); target_link_libraries(testRecurrentBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-BackpropagationCuda COMMAND testRecurrentBackpropagationCuda); #mark the native Cuda test failing since RNN are supported only with Cudnn; set_tests_properties(TMVA-DNN-RNN-BackpropagationCuda PROPERTIES WILL_FAIL true). if (tmva-cudnn). add_executable(testRecurrentForwardPassCudnn TestRecurrentForwardPassCudnn.cxx); target_link_libraries(testRecurrentForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-Forwaed-Cudnn COMMAND testRecurrentForwardPassCudnn). add_executable(testRecurrentBackpropagationCudnn TestRecurrentBackpropagationCudnn.cxx); target_link_libraries(testRecurrentBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-BackpropagationCudnn COMMAND testRecurrentBackpropagationCudnn). # Full Test GPU; add_executable(testFullRNNCudnn TestFullRNNCudnn.cxx);,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/CMakeLists.txt:1279,test,testRecurrentBackpropagationCuda,1279,tmva/tmva/test/DNN/RNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/CMakeLists.txt,1,['test'],['testRecurrentBackpropagationCuda']
Testability,"ing an :option:`--xfail` appearing later on the command line. The; primary purpose is to suppress an ``XPASS`` result without modifying a test; case that uses the ``XFAIL`` directive. ADDITIONAL OPTIONS; ------------------. .. option:: --debug. Run :program:`lit` in debug mode, for debugging configuration issues and; :program:`lit` itself. .. option:: --show-suites. List the discovered test suites and exit. .. option:: --show-tests. List all of the discovered tests and exit. EXIT STATUS; -----------. :program:`lit` will exit with an exit code of 1 if there are any FAIL or XPASS; results. Otherwise, it will exit with the status 0. Other exit codes are used; for non-test related failures (for example a user error or an internal program; error). .. _test-discovery:. TEST DISCOVERY; --------------. The inputs passed to :program:`lit` can be either individual tests, or entire; directories or hierarchies of tests to run. When :program:`lit` starts up, the; first thing it does is convert the inputs into a complete list of tests to run; as part of *test discovery*. In the :program:`lit` model, every test must exist inside some *test suite*.; :program:`lit` resolves the inputs specified on the command line to test suites; by searching upwards from the input path until it finds a :file:`lit.cfg` or; :file:`lit.site.cfg` file. These files serve as both a marker of test suites; and as configuration files which :program:`lit` loads in order to understand; how to find and run the tests inside the test suite. Once :program:`lit` has mapped the inputs into test suites it traverses the; list of inputs adding tests for individual files and recursively searching for; tests in directories. This behavior makes it easy to specify a subset of tests to run, while still; allowing the test suite configuration to control exactly how tests are; interpreted. In addition, :program:`lit` always identifies tests by the test; suite they are in, and their relative path inside the test suite. For; app",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:11217,test,tests,11217,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,2,['test'],"['test', 'tests']"
Testability,"ing as requested. # This will leave the file SomeLocalPath with the partial state of the merge.; # Now, you can continue the merge by executing the same command. The merge; # will continue from where it has been interrupted.; % ./my_fuzzer CORPUS1 CORPUS2 -merge=1 -merge_control_file=SomeLocalPath; ...; MERGE-OUTER: non-empty control file provided: 'SomeLocalPath'; MERGE-OUTER: control file ok, 32 files total, first not processed file 20; ... Options; =======. To run the fuzzer, pass zero or more corpus directories as command line; arguments. The fuzzer will read test inputs from each of these corpus; directories, and any new test inputs that are generated will be written; back to the first corpus directory:. .. code-block:: console. ./fuzzer [-flag1=val1 [-flag2=val2 ...] ] [dir1 [dir2 ...] ]. If a list of files (rather than directories) are passed to the fuzzer program,; then it will re-run those files as test inputs but will not perform any fuzzing.; In this mode the fuzzer binary can be used as a regression test (e.g. on a; continuous integration system) to check the target function and saved inputs; still work. The most important command line options are:. ``-help``; Print help message (``-help=1``).; ``-seed``; Random seed. If 0 (the default), the seed is generated.; ``-runs``; Number of individual test runs, -1 (the default) to run indefinitely.; ``-max_len``; Maximum length of a test input. If 0 (the default), libFuzzer tries to guess; a good value based on the corpus (and reports it).; ``-len_control``; Try generating small inputs first, then try larger inputs over time.; Specifies the rate at which the length limit is increased (smaller == faster).; Default is 100. If 0, immediately try inputs with size up to max_len.; ``-timeout``; Timeout in seconds, default 1200. If an input takes longer than this timeout,; the process is treated as a failure case.; ``-rss_limit_mb``; Memory usage limit in Mb, default 2048. Use 0 to disable the limit.; If an input requir",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst:9963,test,test,9963,interpreter/llvm-project/llvm/docs/LibFuzzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst,1,['test'],['test']
Testability,"ing clang -cc1. Narrowing Down the Problem; While investigating a checker-related issue, instruct the analyzer to only; execute a single checker:. $ clang -cc1 -analyze -analyzer-checker=osx.KeychainAPI test.c. If you are experiencing a crash, to see which function is failing while; processing a large file use the -analyzer-display-progress; option.; To selectively analyze only the given function, use the; -analyze-function option:. $ clang -cc1 -analyze -analyzer-checker=core test.c -analyzer-display-progress; ANALYZE (Syntax): test.c foo; ANALYZE (Syntax): test.c bar; ANALYZE (Path, Inline_Regular): test.c bar; ANALYZE (Path, Inline_Regular): test.c foo; $ clang -cc1 -analyze -analyzer-checker=core test.c -analyzer-display-progress -analyze-function=foo; ANALYZE (Syntax): test.c foo; ANALYZE (Path, Inline_Regular): test.c foo. Note: a fully qualified function name has to be used when selecting; C++ functions and methods, Objective-C methods and blocks, e.g.:. $ clang -cc1 -analyze -analyzer-checker=core test.cc -analyze-function='foo(int)'. The fully qualified name can be found from the; -analyzer-display-progress output. The bug reporter mechanism removes path diagnostics inside intermediate; function calls that have returned by the time the bug was found and contain; no interesting pieces. Usually it is up to the checkers to produce more; interesting pieces by adding custom BugReporterVisitor objects.; However, you can disable path pruning while debugging with the; -analyzer-config prune-paths=false option. Visualizing the Analysis; To dump the AST, which often helps understanding how the program should; behave:. $ clang -cc1 -ast-dump test.c. To view/dump CFG use debug.ViewCFG or debug.DumpCFG; checkers:. $ clang -cc1 -analyze -analyzer-checker=debug.ViewCFG test.c. ExplodedGraph (the state graph explored by the analyzer) can be; visualized with another debug checker:. $ clang -cc1 -analyze -analyzer-checker=debug.ViewExplodedGraph test.c. Or, equivalently, with",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html:20452,test,test,20452,interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,1,['test'],['test']
Testability,"ing established code added to the JIT can refer to printf; symbolically rather than requiring the address of printf to be ""baked in"".; This in turn allows cached versions of the JIT'd code (e.g. compiled objects); to be re-used across JIT sessions as the JIT'd code no longer changes, only the; absolute symbol definition does. For process and library symbols the DynamicLibrarySearchGenerator utility (See; :ref:`How to Add Process and Library Symbols to JITDylibs; <ProcessAndLibrarySymbols>`) can be used to automatically build absolute; symbol mappings for you. However the absoluteSymbols function is still useful; for making non-global objects in your JIT visible to JIT'd code. For example,; imagine that your JIT standard library needs access to your JIT object to make; some calls. We could bake the address of your object into the library, but then; it would need to be recompiled for each session:. .. code-block:: c++. // From standard library for JIT'd code:. class MyJIT {; public:; void log(const char *Msg);; };. void log(const char *Msg) { ((MyJIT*)0x1234)->log(Msg); }. We can turn this into a symbolic reference in the JIT standard library:. .. code-block:: c++. extern MyJIT *__MyJITInstance;. void log(const char *Msg) { __MyJITInstance->log(Msg); }. And then make our JIT object visible to the JIT standard library with an; absolute symbol definition when the JIT is started:. .. code-block:: c++. MyJIT J = ...;. auto &JITStdLibJD = ... ;. JITStdLibJD.define(absoluteSymbols(SymbolMap({; { Mangle(""__MyJITInstance""),; { ExecutorAddr::fromPtr(&J), JITSymbolFlags() } }; });. Aliases and Reexports; ---------------------. Aliases and reexports allow you to define new symbols that map to existing; symbols. This can be useful for changing linkage relationships between symbols; across sessions without having to recompile code. For example, imagine that; JIT'd code has access to a log function, ``void log(const char*)`` for which; there are two implementations in the JIT stand",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ORCv2.rst:14507,log,log,14507,interpreter/llvm-project/llvm/docs/ORCv2.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ORCv2.rst,1,['log'],['log']
Testability,"ing for loops, but we would; still need to filter out many more ourselves. We can do a good portion; of the remaining work with some cleverly chosen matchers, but first we; need to decide exactly which properties we want to allow. How can we characterize for loops over arrays which would be eligible; for translation to range-based syntax? Range based loops over arrays of; size ``N`` that:. - start at index ``0``; - iterate consecutively; - end at index ``N-1``. We already check for (1), so all we need to add is a check to the loop's; condition to ensure that the loop's index variable is compared against; ``N`` and another check to ensure that the increment step just; increments this same variable. The matcher for (2) is straightforward:; require a pre- or post-increment of the same variable declared in the; init portion. Unfortunately, such a matcher is impossible to write. Matchers contain; no logic for comparing two arbitrary AST nodes and determining whether; or not they are equal, so the best we can do is matching more than we; would like to allow, and punting extra comparisons to the callback. In any case, we can start building this sub-matcher. We can require that; the increment step be a unary increment like this:. .. code-block:: c++. hasIncrement(unaryOperator(hasOperatorName(""++""))). Specifying what is incremented introduces another quirk of Clang's AST:; Usages of variables are represented as ``DeclRefExpr``'s (""declaration; reference expressions"") because they are expressions which refer to; variable declarations. To find a ``unaryOperator`` that refers to a; specific declaration, we can simply add a second condition to it:. .. code-block:: c++. hasIncrement(unaryOperator(; hasOperatorName(""++""),; hasUnaryOperand(declRefExpr()))). Furthermore, we can restrict our matcher to only match if the; incremented variable is an integer:. .. code-block:: c++. hasIncrement(unaryOperator(; hasOperatorName(""++""),; hasUnaryOperand(declRefExpr(to(varDecl(hasType(isInteg",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTMatchersTutorial.rst:11512,log,logic,11512,interpreter/llvm-project/clang/docs/LibASTMatchersTutorial.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTMatchersTutorial.rst,1,['log'],['logic']
Testability,"ing is built on top of [Clang](http://clang.llvm.org) and; [LLVM](http://llvm.org>) compiler infrastructure. Here we; describe the status of Cling in some detail, including major; improvements from the previous release and new feature work. Note that if you are reading this file from a git checkout or the main Cling; web page, this document applies to the *next* release, not the current one. What's New in Cling 1.2?; ========================. Some of the major new features and improvements to Cling are listed; here. Generic improvements to Cling as a whole or to its underlying; infrastructure are described first. External Dependencies; ---------------------; * Upgrade to LLVM r0000000. Major New Features; ------------------; * A major new feature. Misc; ----; * A misc feature. Experimental Features; ---------------------; * An experimental feature. Jupyter; -------; * A Jupyter feature. Fixed Bugs; ----------; [ROOT-XXXX](https://sft.its.cern.ch/jira/browse/ROOT-XXXX). <!---Get release bugs; git log v1.1..master | grep -i ""fix"" | grep '#' | sed -E 's,.*\#([0-9]*).*,\[\1\]\(https://github.com/root-project/cling/issues/\1\),g' | sort; --->; <!---Standard MarkDown doesn't support neither variables nor <base>; [ROOT-XXX](https://sft.its.cern.ch/jira/browse/ROOT-XXX); --->. <!---Additional Information; ----------------------; A wide variety of additional information is available on the; [Cling web page](http://root.cern/cling). The web page contains versions of; the API documentation which are up-to-date with the git version of the source; code. You can access versions of these documents specific to this release by; going into the “clang/docs/” directory in the Cling source tree. If you have any questions or comments about Cling, please feel free to contact; us via the mailing list.--->. Special Kudos; =============; This release wouldn't have happened without the efforts of our contributors,; listed in the form of Firstname Lastname (#contributions):. FirstName LastName ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/ReleaseNotes.md:1139,log,log,1139,interpreter/cling/docs/ReleaseNotes.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/ReleaseNotes.md,1,['log'],['log']
Testability,"ing is expected to change in a test. A follow-up patch with code changes to the compiler will then show check-line; differences to the tests, so it is easier to see the effect of the patch.; Remove TODO/FIXME comments added in the previous step if a problem is solved. Baseline tests (no-functional-change or NFC patch) may be pushed to main; without pre-commit review if you have commit access. Best practices for regression tests; -----------------------------------. - Use auto-generated check lines (produced by the scripts mentioned above); whenever feasible.; - Include comments about what is tested/expected in a particular test. If there; are relevant issues in the bug tracker, add references to those bug reports; (for example, ""See PR999 for more details"").; - Avoid undefined behavior and poison/undef values unless necessary. For; example, do not use patterns like ``br i1 undef``, which are likely to break; as a result of future optimizations.; - Minimize tests by removing unnecessary instructions, metadata, attributes,; etc. Tools like ``llvm-reduce`` can help automate this.; - Outside PhaseOrdering tests, only run a minimal set of passes. For example,; prefer ``opt -S -passes=instcombine`` over ``opt -S -O3``.; - Avoid unnamed instructions/blocks (such as ``%0`` or ``1:``), because they may; require renumbering on future test modifications. These can be removed by; running the test through ``opt -S -passes=instnamer``.; - Try to give values (including variables, blocks and functions) meaningful; names, and avoid retaining complex names generated by the optimization; pipeline (such as ``%foo.0.0.0.0.0.0``). Extra files; -----------. If your test requires extra files besides the file containing the ``RUN:`` lines; and the extra files are small, consider specifying them in the same file and; using ``split-file`` to extract them. For example,. .. code-block:: llvm. ; RUN: split-file %s %t; ; RUN: llvm-link -S %t/a.ll %t/b.ll | FileCheck %s. ; CHECK: ... ;--- a.ll; ..",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:13963,test,tests,13963,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['tests']
Testability,"ing to the analysis, throughput is limited by resource pressure and not by; data dependencies. The analysis observed increases in backend pressure during; 48.07% of the simulated run. Almost all those pressure increase events were; caused by contention on processor resources JFPA/JFPU0. The `critical sequence` is the most expensive sequence of instructions according; to the simulation. It is annotated to provide extra information about critical; register dependencies and resource interferences between instructions. Instructions from the critical sequence are expected to significantly impact; performance. By construction, the accuracy of this analysis is strongly; dependent on the simulation and (as always) by the quality of the processor; model in llvm. Bottleneck analysis is currently not supported for processors with an in-order; backend. Extra Statistics to Further Diagnose Performance Issues; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; The ``-all-stats`` command line option enables extra statistics and performance; counters for the dispatch logic, the reorder buffer, the retire control unit,; and the register file. Below is an example of ``-all-stats`` output generated by :program:`llvm-mca`; for 300 iterations of the dot-product example discussed in the previous; sections. .. code-block:: none. Dynamic Dispatch Stall Cycles:; RAT - Register unavailable: 0; RCU - Retire tokens unavailable: 0; SCHEDQ - Scheduler full: 272 (44.6%); LQ - Load queue full: 0; SQ - Store queue full: 0; GROUP - Static restrictions on the dispatch group: 0. Dispatch Logic - number of cycles where we saw N micro opcodes dispatched:; [# dispatched], [# cycles]; 0, 24 (3.9%); 1, 272 (44.6%); 2, 314 (51.5%). Schedulers - number of cycles where we saw N micro opcodes issued:; [# issued], [# cycles]; 0, 7 (1.1%); 1, 306 (50.2%); 2, 297 (48.7%). Scheduler's queue usage:; [1] Resource name.; [2] Average number of used buffer entries.; [3] Maximum number of used buffer entries.; [4] ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-mca.rst:28762,log,logic,28762,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-mca.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-mca.rst,1,['log'],['logic']
Testability,"ing your GitHub account:. 1. Navigate to https://llvm.discourse.group/; 1. Click on ""Sign Up"" in the top right corner.; 1. Choose ""With GitHub"" on the right side and log in with your GitHub account. ## Structure of Discourse. Discourse's structure is similar to a set of mailing lists, however different; terms are used there. To help with the transition, here's a translation table; for the terms:. <table border=1>; <tr><th>Mailing list</th><th>Discourse</th></tr>; <tr><td><i>Mailing list</i>, consists of threads</td><td><i>category</i>, consists of topics</td></tr>; <tr><td><i>thread</i>, consists of emails</td><td><i>topic</i>, consists of posts</td></tr>; <tr><td>email</td><td>post</td></tr>; </table>. ## Setting up email interactions. Some folks want to interact with Discourse purely via their email program. Here; are the typical use cases:. * You can [subscribe to a category or topic](https://discourse.mozilla.org/t/how-do-i-subscribe-to-categories-and-topics/16024); * You can reply to a post, including quoting other peoples texts; ([tested](https://llvm.discourse.group/t/email-interaction-with-discourse/3306/4) on GMail).; * [Quoting previous topics in an reply](https://meta.discourse.org/t/single-quote-block-dropped-in-email-reply/144802); * You can filter incoming emails in your email client by category using the; `List-ID` email header field.; * You can create topics through email using the email address that is specific to the category. Each category description shows the email address to use, or you can use the mapping below. ## Mapping of email addresses to Discourse categories. Use these email addresses to create a topic by email in the specific discourse category. You **must** have a Discourse account associated with the email address you are sending from or the email will be rejected. <table border=1>; <tr><th>Discourse Category</th><th>Email Address</th></tr>; <tr><td>Beginner</td><td>beginners@discourse.llvm.org</td></tr>; <tr><td>LLVM Project</td><td>",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DiscourseMigrationGuide.md:1632,test,tested,1632,interpreter/llvm-project/llvm/docs/DiscourseMigrationGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DiscourseMigrationGuide.md,1,['test'],['tested']
Testability,"ing"" algorithm and bases the; determination of the best node-split during the training; on a random subset of variables only, which is; individually chosen for each split.; ; BDT: Move to TRandom2 for the ""bagging"" algorithm; and throw random weights according to Poisson; statistics. (This way the random weights are closer to a; resampling with replacement algorithm.); ; TMlpANN: Extended options to; TMultilayerPerceptron learning methods. Added example for; reader application: TMVApplication.py; . GUI:. Parallel Coordinates: New GUI button for Parallel; Coordinate plotting.; . Application:. Added Python example for reader application: TMVApplication.py; . Bug fixes:. TMlpANN: fixed crash with ROOT>=5.17 when using; large number of test events; also corrected bias in cross; validation: before the test events were used, which led to; an overestimated performance evaluation in case of a small; number of degrees of freedom; separate now training tree; in two parts for training and validation with configurable; ValidationFraction; ; Cuts: Corrected inconsistency in MethodCuts:; the signal efficiency written out into the weight file does; not correspond to the center of the bin within which the; background rejection is maximised (as before) but to the; lower left edge of it. This is because the cut optimisation; algorithm determines the best background rejection for all; signal efficiencies belonging into a bin. Since the best; background rejection is in general obtained for the lowest; possible signal efficiency, the reference signal efficiency; is the lowest value in the bin.; ; Cuts: Fixed Cuts (optimisaton) method -> event; with smallest value was not included in search for optimal; cut (thanks to Dimitris Varouchas, LAL-Orsay, for helping; us detecting the problem).; ; Genetic Algorithm: Corrected configurable random; seed in GeneticAlgorithm (thanks to David Gonzalez Maline,; CERN, for pointing this out); ; GUI: Fixes in input-variable and MVA plotting:; under/over-",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v520/index.html:4468,test,test,4468,tmva/doc/v520/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v520/index.html,2,['test'],['test']
Testability,ing.h; compiler-rt/lib/xray/xray_fdr_log_records.h; compiler-rt/lib/xray/xray_flags.cpp; compiler-rt/lib/xray/xray_flags.h; compiler-rt/lib/xray/xray_interface_internal.h; compiler-rt/lib/xray/xray_log_interface.cpp; compiler-rt/lib/xray/xray_mips.cpp; compiler-rt/lib/xray/xray_mips64.cpp; compiler-rt/lib/xray/xray_powerpc64.cpp; compiler-rt/lib/xray/xray_profile_collector.cpp; compiler-rt/lib/xray/xray_profile_collector.h; compiler-rt/lib/xray/xray_profiling.cpp; compiler-rt/lib/xray/xray_profiling_flags.cpp; compiler-rt/lib/xray/xray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/de,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:106909,test,tests,106909,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,ingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Lib,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:3933,test,testRotWeights,3933,tmva/tmva/test/DNN/CNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt,1,['test'],['testRotWeights']
Testability,"ings. NSString *reminderText =; NSLocalizedString(@""None"", @""Indicates no reminders"");; if (reminderCount == 1) {; // Warning: Plural cases are not supported across all languages.; // Use a .stringsdict file instead; reminderText =; NSLocalizedString(@""1 Reminder"", @""Indicates single reminder"");; } else if (reminderCount >= 2) {; // Warning: Plural cases are not supported across all languages.; // Use a .stringsdict file instead; reminderText =; [NSString stringWithFormat:; NSLocalizedString(@""%@ Reminders"", @""Indicates multiple reminders""),; reminderCount];; }. Security Alpha Checkers. Name, DescriptionExample. alpha.security.ArrayBound; (C); Warn about buffer overflows (older checker). void test() {; char *s = """";; char c = s[1]; // warn; }. struct seven_words {; int c[7];; };. void test() {; struct seven_words a, *p;; p = &a; p[0] = a;; p[1] = a;; p[2] = a; // warn; }. // note: requires unix.Malloc or; // alpha.unix.MallocWithAnnotations checks enabled.; void test() {; int *p = malloc(12);; p[3] = 4; // warn; }. void test() {; char a[2];; int *b = (int*)a;; b[1] = 3; // warn; }. alpha.security.ArrayBoundV2; (C); Warn about buffer overflows (newer checker). void test() {; char *s = """";; char c = s[1]; // warn; }. void test() {; int buf[100];; int *p = buf;; p = p + 99;; p[1] = 1; // warn; }. // note: compiler has internal check for this.; // Use -Wno-array-bounds to suppress compiler warning.; void test() {; int buf[100][100];; buf[0][-1] = 1; // warn; }. // note: requires alpha.security.taint check turned on.; void test() {; char s[] = ""abc"";; int x = getchar();; char c = s[x]; // warn: index is tainted; }. alpha.security.MallocOverflow; (C); Check for overflows in the arguments to malloc(). void test(int n) {; void *p = malloc(n * sizeof(int)); // warn; }. alpha.security.MmapWriteExec; (C); Warn on mmap() calls that are both writable and executable. void test(int n) {; void *c = mmap(NULL, 32, PROT_READ | PROT_WRITE | PROT_EXEC,; MAP_PRIVATE | MAP_ANON, -1, 0);;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html:10201,test,test,10201,interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,1,['test'],['test']
Testability,"ings` it looks in the entire input file, regardless of; file format, rather than restricting the search to certain sections of object; files. If ""``-``"" is specified as an ``input``, or no ``input`` is specified,; the program reads from the standard input stream. EXAMPLE; -------. .. code-block:: console. $ cat input.txt; bars; foo; wibble blob; $ llvm-strings input.txt; bars; wibble blob. OPTIONS; -------. .. option:: --all, -a. Silently ignored. Present for GNU :program:`strings` compatibility. .. option:: --bytes=<length>, -n. Set the minimum number of printable ASCII characters required for a sequence of; bytes to be considered a string. The default value is 4. .. option:: --help, -h. Display a summary of command line options. .. option:: --print-file-name, -f. Display the name of the containing file before each string. Example:. .. code-block:: console. $ llvm-strings --print-file-name test.o test.elf; test.o: _Z5hellov; test.o: some_bss; test.o: test.cpp; test.o: main; test.elf: test.cpp; test.elf: test2.cpp; test.elf: _Z5hellov; test.elf: main; test.elf: some_bss. .. option:: --radix=<radix>, -t. Display the offset within the file of each string, before the string and using; the specified radix. Valid ``<radix>`` values are ``o``, ``d`` and ``x`` for; octal, decimal and hexadecimal respectively. Example:. .. code-block:: console. $ llvm-strings --radix=o test.o; 1054 _Z5hellov; 1066 .rela.text; 1101 .comment; 1112 some_bss; 1123 .bss; 1130 test.cpp; 1141 main; $ llvm-strings --radix=d test.o; 556 _Z5hellov; 566 .rela.text; 577 .comment; 586 some_bss; 595 .bss; 600 test.cpp; 609 main; $ llvm-strings -t x test.o; 22c _Z5hellov; 236 .rela.text; 241 .comment; 24a some_bss; 253 .bss; 258 test.cpp; 261 main. .. option:: --version. Display the version of the :program:`llvm-strings` executable. .. option:: @<FILE>. Read command-line options from response file ``<FILE>``. EXIT STATUS; -----------. :program:`llvm-strings` exits with a non-zero exit code if there is an ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst:1641,test,test,1641,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst,1,['test'],['test']
Testability,"ing{{YES}}; clang_analyzer_isTainted(n > 0); // expected-warning{{YES}}; int next_tainted_value = n; // no-warning; return n;; }. - ``clang_analyzer_dumpExtent(a single argument of any type)``; - ``clang_analyzer_dumpElementCount(a single argument of any type)``. Dumps out the extent and the element count of the argument. Example usage::. void array() {; int a[] = {1, 3};; clang_analyzer_dumpExtent(a); // expected-warning {{8 S64b}}; clang_analyzer_dumpElementCount(a); // expected-warning {{2 S64b}}; }. - ``clang_analyzer_value(a single argument of integer or pointer type)``. Prints an associated value for the given argument.; Supported argument types are integers, enums and pointers.; The value can be represented either as a range set or as a concrete integer.; For the rest of the types function prints ``n/a`` (aka not available). **Note:** This function will print nothing for clang built with Z3 constraint manager.; This may cause crashes of your tests. To manage this use one of the test constraining; techniques:. * llvm-lit commands ``REQUIRES no-z3`` or ``UNSUPPORTED z3`` `See for details. <https://llvm.org/docs/TestingGuide.html#constraining-test-execution>`_. * a preprocessor directive ``#ifndef ANALYZER_CM_Z3``. * a clang command argument ``-analyzer-constraints=range``. Example usage::. void print(char c, unsigned u) {; clang_analyzer_value(c); // expected-warning {{8s:{ [-128, 127] }}}; if(u != 42); clang_analyzer_value(u); // expected-warning {{32u:{ [0, 41], [43, 4294967295] }}}; else; clang_analyzer_value(u); // expected-warning {{32u:42}}; }. Statistics; ==========. The debug.Stats checker collects various information about the analysis of each; function, such as how many blocks were reached and if the analyzer timed out. There is also an additional -analyzer-stats flag, which enables various; statistics within the analyzer engine. Note the Stats checker (which produces at; least one bug report per function) may actually change the values reported by; -",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst:11249,test,test,11249,interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst,1,['test'],['test']
Testability,"ining data. The lit runner will merge the profile files; using `llvm-profdata` so they can be used by the second compilation run. Example:; ```bash; # Profile generation run using LLVM IR PGO:; % cmake -DTEST_SUITE_PROFILE_GENERATE=ON \; -DTEST_SUITE_USE_IR_PGO=ON \; -DTEST_SUITE_RUN_TYPE=train \; ../test-suite; % make; % llvm-lit .; # Use the profile data for compilation and actual benchmark run:; % cmake -DTEST_SUITE_PROFILE_GENERATE=OFF \; -DTEST_SUITE_PROFILE_USE=ON \; -DTEST_SUITE_RUN_TYPE=ref \; .; % make; % llvm-lit -o result.json .; ```. To use Clang frontend's PGO instead of LLVM IR PGO, set `-DTEST_SUITE_USE_IR_PGO=OFF`. The `TEST_SUITE_RUN_TYPE` setting only affects the SPEC benchmark suites. Cross Compilation and External Devices; --------------------------------------. ### Compilation. CMake allows to cross compile to a different target via toolchain files. More; information can be found here:. - [https://llvm.org/docs/lnt/tests.html#cross-compiling](https://llvm.org/docs/lnt/tests.html#cross-compiling). - [https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html](https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html). Cross compilation from macOS to iOS is possible with the; `test-suite/cmake/caches/target-target-*-iphoneos-internal.cmake` CMake cache; files; this requires an internal iOS SDK. ### Running. There are two ways to run the tests in a cross compilation setting:. - Via SSH connection to an external device: The `TEST_SUITE_REMOTE_HOST` option; should be set to the SSH hostname. The executables and data files need to be; transferred to the device after compilation. This is typically done via the; `rsync` make target. After this, the lit runner can be used on the host; machine. It will prefix the benchmark and verification command lines with an; `ssh` command. Example:. ```bash; % cmake -G Ninja -D CMAKE_C_COMPILER=path/to/clang \; -C ../test-suite/cmake/caches/target-arm64-iphoneos-internal.cmake \; -D CMAKE_BUILD_TYPE=Re",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:11163,test,tests,11163,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['test'],['tests']
Testability,"inner)(void) = ^void(void) {; int y = x;; ++y;; };; void (^outer)(void) = ^void(void) {; int z = x;; ++z;; inner();; };; return outer; // warn: address of stack-allocated block is captured by a; // returned block; }. .. _alpha-core-StdVariant:. alpha.core.StdVariant (C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""; Check if a value of active type is retrieved from an ``std::variant`` instance with ``std::get``.; In case of bad variant type access (the accessed type differs from the active type); a warning is emitted. Currently, this checker does not take exception handling into account. .. code-block:: cpp. void test() {; std::variant<int, char> v = 25;; char c = stg::get<char>(v); // warn: ""int"" is the active alternative; }. .. _alpha-core-TestAfterDivZero:. alpha.core.TestAfterDivZero (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for division by variable that is later compared against 0.; Either the comparison is useless or there is division by zero. .. code-block:: c. void test(int x) {; var = 77 / x;; if (x == 0) { } // warn; }. alpha.cplusplus; ^^^^^^^^^^^^^^^. .. _alpha-cplusplus-ArrayDelete:. alpha.cplusplus.ArrayDelete (C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Reports destructions of arrays of polymorphic objects that are destructed as their base class.; This checker corresponds to the CERT rule `EXP51-CPP: Do not delete an array through a pointer of the incorrect type <https://wiki.sei.cmu.edu/confluence/display/cplusplus/EXP51-CPP.+Do+not+delete+an+array+through+a+pointer+of+the+incorrect+type>`_. .. code-block:: cpp. class Base {; virtual ~Base() {}; };; class Derived : public Base {}. Base *create() {; Base *x = new Derived[10]; // note: Casting from 'Derived' to 'Base' here; return x;; }. void foo() {; Base *x = create();; delete[] x; // warn: Deleting an array of 'Derived' objects as their base class 'Base' is undefined; }. .. _alpha-cplusplus-DeleteWithNonVirtualDtor:. alpha.cplusplus.DeleteWithNonVirtualDtor (C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Repo",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:52416,test,test,52416,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"install with sudo or within a virtual; environment. Under Windows, install Python for all users and then run; ``pip install psutil`` in an elevated command prompt. For more information on using the :program:`lit` tool, see ``llvm-lit --help``; or the :doc:`lit man page <CommandGuide/lit>`. Debugging Information tests; ---------------------------. To run debugging information tests simply add the ``cross-project-tests``; project to your ``LLVM_ENABLE_PROJECTS`` define on the cmake; command-line. Regression test structure; =========================. The LLVM regression tests are driven by :program:`lit` and are located in the; ``llvm/test`` directory. This directory contains a large array of small tests that exercise; various features of LLVM and to ensure that regressions do not occur.; The directory is broken into several sub-directories, each focused on a; particular area of LLVM. Writing new regression tests; ----------------------------. The regression test structure is very simple, but does require some; information to be set. This information is gathered via ``cmake``; and is written to a file, ``test/lit.site.cfg.py`` in the build directory.; The ``llvm/test`` Makefile does this work for you. In order for the regression tests to work, each directory of tests must; have a ``lit.local.cfg`` file. :program:`lit` looks for this file to determine; how to run the tests. This file is just Python code and thus is very; flexible, but we've standardized it for the LLVM regression tests. If; you're adding a directory of tests, just copy ``lit.local.cfg`` from; another directory to get running. The standard ``lit.local.cfg`` simply; specifies which files to look in for tests. Any directory that contains; only directories does not need the ``lit.local.cfg`` file. Read the :doc:`Lit; documentation <CommandGuide/lit>` for more information. Each test file must contain lines starting with ""RUN:"" that tell :program:`lit`; how to run it. If there are no RUN lines, :program:`lit`",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:7374,test,test,7374,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"int by first sorting the; events for each variable and then looping through all; events, placing the cuts always in the middle between two; of the sorted events, and finding the true possible; maximum separation gain in the training sample by cutting; on this variable.; . BDT, AdaBoost The beta parameter is now an; option (default is 1).; . BDT: The node purity at which a node is; classified as signal (respective background node) for; determining the error fraction in the pruning became a; parameter that can be set via the option NodePurityLimit; (default is 0.5).; . Dataset preparation:. First implementation of a new preprocessing method: transformation of the; variables first into a Gaussian distribution, then performing a decorrelation of; the ""Gaussianised"" variables. The transformation is again done by default such that; (by default) the signal distributions become Gaussian and are decorrelated. Note ; that simultaneous Gaussianisation and decorrelation of signal and background is ; only possible (and done) for methods, such as Likelihood, which test both hypotheses.; . Bug fixes:. Fix in Expected error pruning: Rather than multiplying both sides, the error on ; the node and the sub-tree, with the prune strength, now only the expected error ; of the sub-tree is scaled.; . Fix in FDA parsing of the input formula. There were problems when treating; more than 10 parameters (thanks to Hugh Skottowe for reporting this).; . Calculation of ""Separation"": fixed bin-shift and; normalisation bugs. Thanks to Dag Gillberg (Fraser U) for; spotting these.; . Fixed problem in ""SetSignal(Background)WeightExpression"":; signal (background weight expressions not existing in the; background (signal) tree led to an abort of the tree; reading (""Bad numerical expression""). Thanks to Alfio; Rizzo (Brussels) for pointing this out.; . Fixed problem when specifying train and test tree; explicitly. Some code was forgotten in the background; part, creating incompatibilities. Thanks to Zhiyi ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v522/index.html:1705,test,test,1705,tmva/doc/v522/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v522/index.html,1,['test'],['test']
Testability,"int on the data member itself, but the *data that; it points to* is protected by the given capability. .. code-block:: c++. Mutex mu;; int *p1 GUARDED_BY(mu);; int *p2 PT_GUARDED_BY(mu);; unique_ptr<int> p3 PT_GUARDED_BY(mu);. void test() {; p1 = 0; // Warning!. *p2 = 42; // Warning!; p2 = new int; // OK. *p3 = 42; // Warning!; p3.reset(new int); // OK.; }. REQUIRES(...), REQUIRES_SHARED(...); -----------------------------------. *Previously*: ``EXCLUSIVE_LOCKS_REQUIRED``, ``SHARED_LOCKS_REQUIRED``. ``REQUIRES`` is an attribute on functions or methods, which; declares that the calling thread must have exclusive access to the given; capabilities. More than one capability may be specified. The capabilities; must be held on entry to the function, *and must still be held on exit*. ``REQUIRES_SHARED`` is similar, but requires only shared access. .. code-block:: c++. Mutex mu1, mu2;; int a GUARDED_BY(mu1);; int b GUARDED_BY(mu2);. void foo() REQUIRES(mu1, mu2) {; a = 0;; b = 0;; }. void test() {; mu1.Lock();; foo(); // Warning! Requires mu2.; mu1.Unlock();; }. ACQUIRE(...), ACQUIRE_SHARED(...), RELEASE(...), RELEASE_SHARED(...), RELEASE_GENERIC(...); ------------------------------------------------------------------------------------------. *Previously*: ``EXCLUSIVE_LOCK_FUNCTION``, ``SHARED_LOCK_FUNCTION``,; ``UNLOCK_FUNCTION``. ``ACQUIRE`` and ``ACQUIRE_SHARED`` are attributes on functions or methods; declaring that the function acquires a capability, but does not release it.; The given capability must not be held on entry, and will be held on exit; (exclusively for ``ACQUIRE``, shared for ``ACQUIRE_SHARED``). ``RELEASE``, ``RELEASE_SHARED``, and ``RELEASE_GENERIC`` declare that the; function releases the given capability. The capability must be held on entry; (exclusively for ``RELEASE``, shared for ``RELEASE_SHARED``, exclusively or; shared for ``RELEASE_GENERIC``), and will no longer be held on exit. .. code-block:: c++. Mutex mu;; MyClass myObject GUARDED_BY(mu);. v",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ThreadSafetyAnalysis.rst:8140,test,test,8140,interpreter/llvm-project/clang/docs/ThreadSafetyAnalysis.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ThreadSafetyAnalysis.rst,1,['test'],['test']
Testability,"int test() {; int x;; return x; // warn; }. C++ Checkers. Name, DescriptionExample. cplusplus.NewDelete; (C++); Check for double-free, use-after-free and offset problems involving C++ ; delete. void f(int *p);. void testUseMiddleArgAfterDelete(int *p) {; delete p;; f(p); // warn: use after free; }. class SomeClass {; public:; void f();; };. void test() {; SomeClass *c = new SomeClass;; delete c;; c->f(); // warn: use after free; }. void test() {; int *p = (int *)__builtin_alloca(sizeof(int));; delete p; // warn: deleting memory allocated by alloca; }. void test() {; int *p = new int;; delete p;; delete p; // warn: attempt to free released; }. void test() {; int i;; delete &i; // warn: delete address of local; }. void test() {; int *p = new int[1];; delete[] (++p);; // warn: argument to 'delete[]' is offset by 4 bytes; // from the start of memory allocated by 'new[]'; }. cplusplus.NewDeleteLeaks; (C++); Check for memory leaks. Traces memory managed by new/; delete. void test() {; int *p = new int;; } // warn. Dead Code Checkers. Name, DescriptionExample. deadcode.DeadStores; (C); Check for values stored to variables that are never read afterwards. void test() {; int x;; x = 1; // warn; }. Nullability Checkers. Name, DescriptionExample. nullability.NullPassedToNonnull; (ObjC); Warns when a null pointer is passed to a pointer which has a; _Nonnull type. if (name != nil); return;; // Warning: nil passed to a callee that requires a non-null 1st parameter; NSString *greeting = [@""Hello "" stringByAppendingString:name];. nullability.NullReturnedFromNonnull; (ObjC); Warns when a null pointer is returned from a function that has; _Nonnull return type. - (nonnull id)firstChild {; id result = nil;; if ([_children count] > 0); result = _children[0];. // Warning: nil returned from a method that is expected; // to return a non-null value; return result;; }. nullability.NullableDereferenced; (ObjC); Warns when a nullable pointer is dereferenced. struct LinkedList {; int data;; struc",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:5980,test,test,5980,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"int to the backend that can use this to set up the; hardware-loop count with a target specific instruction, usually a move of this; value to a special register or a hardware-loop instruction. '``llvm.test.set.loop.iterations.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. ::. declare i1 @llvm.test.set.loop.iterations.i32(i32); declare i1 @llvm.test.set.loop.iterations.i64(i64). Overview:; """""""""""""""""". The '``llvm.test.set.loop.iterations.*``' intrinsics are used to specify the; the loop trip count, and also test that the given count is not zero, allowing; it to control entry to a while-loop. They are placed in the loop preheader's; predecessor basic block, and are marked as ``IntrNoDuplicate`` to avoid; optimizers duplicating these instructions. Arguments:; """""""""""""""""""". The integer operand is the loop trip count of the hardware-loop, and thus; not e.g. the loop back-edge taken count. Semantics:; """""""""""""""""""". The '``llvm.test.set.loop.iterations.*``' intrinsics do not perform any; arithmetic on their operand. It's a hint to the backend that can use this to; set up the hardware-loop count with a target specific instruction, usually a; move of this value to a special register or a hardware-loop instruction.; The result is the conditional value of whether the given count is not zero. '``llvm.test.start.loop.iterations.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. ::. declare {i32, i1} @llvm.test.start.loop.iterations.i32(i32); declare {i64, i1} @llvm.test.start.loop.iterations.i64(i64). Overview:; """""""""""""""""". The '``llvm.test.start.loop.iterations.*``' intrinsics are similar to the; '``llvm.test.set.loop.iterations.*``' and '``llvm.start.loop.iterations.*``'; intrinsics, used to specify the hardware-loop trip count, but also produce a; value identical to the input that can be used as the input to the loop. The; second i1 output controls e",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:646042,test,test,646042,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"int y) {; bool b;; if((b = x != y)) {} // ok; if((x = f() != y)) {} // warn; }. different.OpPrecedenceIifShift; (C, C++); ?: has lower precedence then <<.; Source: Stephen C. Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception();; // warn (did you mean 'throw std::exception()'?); }. different.StaticArrayPtrCompare; (C); Pointer to static array is being compared to NULL. May the subscripting is; missing. void test() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C++); Odd implicit conversion to boolean.; Note: possibly merge with ; alpha.core.BoolAssignment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:24008,test,test,24008,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"int` in the LLVM; distribution. OPTIONS; -------. **--additional-so** *library*. Load the dynamic shared object *library* into the test program whenever it is; run. This is useful if you are debugging programs which depend on non-LLVM; libraries (such as the X or curses libraries) to run. **--append-exit-code**\ =\ *{true,false}*. Append the test programs exit code to the output file so that a change in exit; code is considered a test failure. Defaults to false. **--args** *program args*. Pass all arguments specified after **--args** to the test program whenever it runs.; Note that if any of the *program args* start with a ""``-``"", you should use:. .. code-block:: bash. bugpoint [bugpoint args] --args -- [program args]. The ""``--``"" right after the **--args** option tells **bugpoint** to consider; any options starting with ""``-``"" to be part of the **--args** option, not as; options to **bugpoint** itself. **--tool-args** *tool args*. Pass all arguments specified after **--tool-args** to the LLVM tool under test; (**llc**, **lli**, etc.) whenever it runs. You should use this option in the; following way:. .. code-block:: bash. bugpoint [bugpoint args] --tool-args -- [tool args]. The ""``--``"" right after the **--tool-args** option tells **bugpoint** to; consider any options starting with ""``-``"" to be part of the **--tool-args**; option, not as options to **bugpoint** itself. (See **--args**, above.). **--safe-tool-args** *tool args*. Pass all arguments specified after **--safe-tool-args** to the ""safe"" execution; tool. **--gcc-tool-args** *gcc tool args*. Pass all arguments specified after **--gcc-tool-args** to the invocation of; **gcc**. **--opt-args** *opt args*. Pass all arguments specified after **--opt-args** to the invocation of **opt**. **--disable-{dce,simplifycfg}**. Do not run the specified passes to clean up and reduce the size of the test; program. By default, **bugpoint** uses these passes internally when attempting to; reduce test programs. If you're ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst:1733,test,test,1733,interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst,1,['test'],['test']
Testability,"internal changes for improved performance with PROOF. These should be transparent. In addition, a new method was added RooAbsData* GenerateToyData(RooArgSet& paramPoint) that gives public access to the generation of toy data with all the same options for the treatment of nuisance parameters, binned or unbinned data, treatment of the global observables, importance sampling, etc. This is new method particularly useful for producing the expected limit bands where one needs to generate background-only pseudo-experiments in the same way that was used for the primary limit calculation. HypoTestResult. In the process of writing the new HypoTestInverter the conventions for p-values, CLb, CLs+b, and CLs were revisited. The situation is complicated by the fact that when performing a hypothesis test for discovery the null is background-only, but when performing an inverted hypothesis test the null is a signal+background model. The new convention is that the p-value for both the null and the alternate are taken from the same tail (as specified by the test statistic). Both CLs+b and CLb are equivalent to these p-values, and the HypoTestResult has a simple switch SetBackgroundIsAlt() to specify the pairing between (null p-value, alternate p-value) and (CLb, CLs+b). HypoTestInverter, HypoTestInverterResult, HypoTestInverterPlot. These classes have been rewritten for using them with the new hypothesis test calculators. The HypoTestInverter; class can now be constructed by any generic HypoTestCalculator, and both the HybridCalculator and the new; FrequentistCalculator are supported. The HypoTestInverter class can be constructed in two ways: either passing an; HypoTestCalculator and a data set or by passing the model for the signal, for the background and a data set.; In the first case the user configure the HypoTestCalculator before passing to the HypoTestInverter.; It must be configured using as null model the signal plus background model as alternate model the background; model. O",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v530/index.html:3056,test,test,3056,roofit/doc/v530/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v530/index.html,1,['test'],['test']
Testability,"inue with the new crash instead. If you would like to stick to; particular crash, you should write check scripts to validate the error; message, see ``-compile-command`` in :doc:`CommandGuide/bugpoint`. * In the code generator and miscompilation debuggers, debugging will go faster; if you manually modify the program or its inputs to reduce the runtime, but; still exhibit the problem. * ``bugpoint`` is extremely useful when working on a new optimization: it helps; track down regressions quickly. To avoid having to relink ``bugpoint`` every; time you change your optimization however, have ``bugpoint`` dynamically load; your optimization with the ``-load`` option. * ``bugpoint`` can generate a lot of output and run for a long period of time.; It is often useful to capture the output of the program to file. For example,; in the C shell, you can run:. .. code-block:: console. $ bugpoint ... |& tee bugpoint.log. to get a copy of ``bugpoint``'s output in the file ``bugpoint.log``, as well; as on your terminal. * ``bugpoint`` cannot debug problems with the LLVM linker. If ``bugpoint``; crashes before you see its ""All input ok"" message, you might try ``llvm-link; -v`` on the same set of input files. If that also crashes, you may be; experiencing a linker bug. * ``bugpoint`` is useful for proactively finding bugs in LLVM. Invoking; ``bugpoint`` with the ``-find-bugs`` option will cause the list of specified; optimizations to be randomized and applied to the program. This process will; repeat until a bug is found or the user kills ``bugpoint``. * ``bugpoint`` can produce IR which contains long names. Run ``opt; -passes=metarenamer`` over the IR to rename everything using easy-to-read,; metasyntactic names. Alternatively, run ``opt -passes=strip,instnamer`` to; rename everything with very short (often purely numeric) names. What to do when bugpoint isn't enough; =====================================; 	; Sometimes, ``bugpoint`` is not enough. In particular, InstCombine and; Targ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst:7316,log,log,7316,interpreter/llvm-project/llvm/docs/Bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst,1,['log'],['log']
Testability,"io 2015; - Extensions SDK (you'll be prompted to install it if you open ClangFormat.sln). The extension is built using CMake to generate the usual LLVM.sln by setting; the following CMake vars:. - BUILD_CLANG_FORMAT_VS_PLUGIN=ON. - NUGET_EXE_DIR=path/to/nuget_dir (unless nuget.exe is already available in PATH). example:; cd /d C:\code\llvm; mkdir build & cd build; cmake -DBUILD_CLANG_FORMAT_VS_PLUGIN=ON -DNUGET_EXE_DIR=C:\nuget .. Once LLVM.sln is generated, build the clang_format_vsix target, which will build; ClangFormat.sln, the C# extension application. The CMake build will copy clang-format.exe and LICENSE.TXT into the ClangFormat/; directory so they can be bundled with the plug-in, as well as creating; ClangFormat/source.extension.vsixmanifest. Once the plug-in has been built with; CMake once, it can be built manually from the ClangFormat.sln solution in Visual; Studio. ===========; Debugging; ===========. Once you've built the clang_format_vsix project from LLVM.sln at least once,; open ClangFormat.sln in Visual Studio, then:. - Make sure the ""Debug"" target is selected; - Open the ClangFormat project properties; - Select the Debug tab; - Set ""Start external program:"" to where your devenv.exe is installed. Typically; it's ""C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\devenv.exe""; - Set ""Command line arguments"" to: /rootsuffix Exp; - You can now set breakpoints if you like; - Press F5 to build and run with debugger. If all goes well, a new instance of Visual Studio will be launched in a special; mode where it uses the experimental hive instead of the normal configuration hive.; By default, when you build a VSIX project in Visual Studio, it auto-registers the; extension in the experimental hive, allowing you to test it. In the new Visual Studio; instance, open or create a C++ solution, and you should now see the Clang Format; entries in the Tool menu. You can test it out, and any breakpoints you set will be; hit where you can debug as usual.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/README.txt:1904,test,test,1904,interpreter/llvm-project/clang/tools/clang-format-vs/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format-vs/README.txt,2,['test'],['test']
Testability,"ion Update History*. Most features are self descriptive - explore, and; if you have a question, drop by on #llvm in IRC to get help. Note that as e-mail is the system of reference for code reviews, and some; people prefer it over a web interface, we do not generate automated mail; when a review changes state, for example by clicking ""Accept Revision"" in; the web interface. Thus, please type LGTM into the comment box to accept; a change from Phabricator. .. _pre-merge-testing:. Pre-merge testing; -----------------. The pre-merge tests are a continuous integration (CI) workflow. The workflow; checks the patches uploaded to Phabricator before a user merges them to the main; branch - thus the term *pre-merge testing*. When a user uploads a patch to Phabricator, Phabricator triggers the checks and; then displays the results. This way bugs in a patch are contained during the; code review stage and do not pollute the main branch. Our goal with pre-merge testing is to report most true problems while strongly; minimizing the number of false positive reports. Our goal is that problems; reported are always actionable. If you notice a false positive, please report; it so that we can identify the cause. If you notice issues or have an idea on how to improve pre-merge checks, please; `create a new issue <https://github.com/google/llvm-premerge-checks/issues/new>`_; or give a ❤️ to an existing one. Requirements; ^^^^^^^^^^^^. To get a patch on Phabricator tested, the build server must be able to apply the; patch to the checked out git repository. Please make sure that either:. * You set a git hash as ``sourceControlBaseRevision`` in Phabricator which is; available on the GitHub repository,; * **or** you define the dependencies of your patch in Phabricator,; * **or** your patch can be applied to the main branch. Only then can the build server apply the patch locally and run the builds and; tests. Accessing build results; ^^^^^^^^^^^^^^^^^^^^^^^; Phabricator will automatically trigge",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Phabricator.rst:10837,test,testing,10837,interpreter/llvm-project/llvm/docs/Phabricator.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Phabricator.rst,1,['test'],['testing']
Testability,"ion by zero.co. void test(int z) {; if (z == 0); int x = 1 / z; // warn; }. void test() {; int x = 1;; int y = x % 0; // warn; }. core.NonNullParamChecker; (C, C++, ObjC); Check for null pointers passed as arguments to a function whose arguments are; marked with the nonnull attribute. int f(int *p) __attribute__((nonnull));. void test(int *p) {; if (!p); f(p); // warn; }. core.NullDereference; (C, C++, ObjC); Check for dereferences of null pointers. // C; void test(int *p) {; if (p); return;. int x = p[0]; // warn; }. // C; void test(int *p) {; if (!p); *p = 0; // warn; }. // C++; class C {; public:; int x;; };. void test() {; C *pc = 0;; int k = pc->x; // warn; }. // Objective-C; @interface MyClass {; @public; int x;; }; @end. void test() {; MyClass *obj = 0;; obj->x = 1; // warn; }. core.StackAddressEscape; (C); Check that addresses of stack memory do not escape the function. char const *p;. void test() {; char const str[] = ""string"";; p = str; // warn; }. void* test() {; return __builtin_alloca(12); // warn; }. void test() {; static int *x;; int y;; x = &y; // warn; }. core.UndefinedBinaryOperatorResult; (C); Check for undefined results of binary operators. void test() {; int x;; int y = x + 1; // warn: left operand is garbage; }. core.VLASize; (C); Check for declarations of VLA of undefined or zero size. void test() {; int x;; int vla1[x]; // warn: garbage as size; }. void test() {; int x = 0;; int vla2[x]; // warn: zero size; }. core.uninitialized.ArraySubscript; (C); Check for uninitialized values used as array subscripts. void test() {; int i, a[10];; int x = a[i]; // warn: array subscript is undefined; }. core.uninitialized.Assign; (C); Check for assigning uninitialized values. void test() {; int x;; x |= 1; // warn: left expression is uninitialized; }. core.uninitialized.Branch; (C); Check for uninitialized values used as branch conditions. void test() {; int x;; if (x) // warn; return;; }. core.uninitialized.CapturedBlockVariable; (C); Check for blocks that",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:3791,test,test,3791,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,ion for importing data from ROOT TTree and THx histograms; rf402_datahandling.C - Tools for manipulation of (un)binned datasets; rf403_weightedevts.C - Using weights in unbinned datasets; rf404_categories.C - Working with RooCategory objects to describe discrete variables; rf405_realtocatfuncs.C - Demonstration of real-->discrete mapping functions; rf406_cattocatfuncs.C - Demonstration of discrete-->discrete (invertable) functions; rf407_latextables.C - Latex printing of lists and sets of RooArgSets; ; ORGANIZATION AND SIMULTANEOUS FITS. rf501_simultaneouspdf.C - Using simultaneous p.d.f.s to describe simultaneous fits to multiple datasets; rf502_wspacewrite.C - Creating and writing a workspace; rf503_wspaceread.C - Reading and using a workspace; rf504_simwstool.C - Using RooSimWSTool to construct a simultaneous p.d.f that is built of variations of an input p.d.f; rf505_asciicfg.C - Reading and writing ASCII configuration files; rf506_msgservice.C - Tuning and customizing the RooFit message logging facility; rf507_debugtools.C - Using the RooFit memory tracing debug tool; rf508_listsetmanip.C - RooArgSet and RooArgList tools and tricks; ; LIKELIHOOD AND MINIMIZATION. rf601_intminuit.C - Interactive minimization with MINUIT; rf602_chi2fit.C - Setting up a binning chi^2 fit; rf603_multicpu.C - Setting up a multi-core parallelized unbinned maximum likelihood fit; rf604_constraints.C - Fitting with constraints; rf605_profilell.C - Working with the profile likelihood estimator; rf606_nllerrorhandling.C - Understanding and customizing error handling in likelihood evaluations; rf607_fitresult.C - Demonstration of options of the RooFitResult class; ; SPECIAL PDFS. rf701_efficiencyfit.C - Unbinned maximum likelihood fit of an efficiency eff(x) function; rf702_efficiencyfit_2D.C - Unbinned maximum likelihood fit of an efficiency eff(x) function to; rf703_effpdfprod.C - Using a product of an (acceptance) efficiency and a p.d.f as p.d.f.; rf704_amplitudefit.C - Using a p.d.f def,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v522/index.html:4619,log,logging,4619,roofit/doc/v522/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v522/index.html,1,['log'],['logging']
Testability,"ion is evaluated. If it evaluates to true (in the same; sense used by the bang operators), then the statements following the; ``then`` reserved word are processed. Otherwise, if there is an ``else``; reserved word, the statements following the ``else`` are processed. If the; value is false and there is no ``else`` arm, no statements are processed. Because the braces around the ``then`` statements are optional, this grammar rule; has the usual ambiguity with ""dangling else"" clauses, and it is resolved in; the usual way: in a case like ``if v1 then if v2 then {...} else {...}``, the; ``else`` associates with the inner ``if`` rather than the outer one. The :token:`IfBody` of the then and else arms of the ``if`` establish an; inner scope. Any ``defvar`` variables defined in the bodies go out of scope; when the bodies are finished (see `Defvar in a Record Body`_ for more details). The ``if`` statement can also be used in a record :token:`Body`. ``assert`` --- check that a condition is true; ---------------------------------------------. The ``assert`` statement checks a boolean condition to be sure that it is true; and prints an error message if it is not. .. productionlist::; Assert: ""assert"" `condition` "","" `message` "";"". If the boolean condition is true, the statement does nothing. If the; condition is false, it prints a nonfatal error message. The **message**, which; can be an arbitrary string expression, is included in the error message as a; note. The exact behavior of the ``assert`` statement depends on its; placement. * At top level, the assertion is checked immediately. * In a record definition, the statement is saved and all assertions are; checked after the record is completely built. * In a class definition, the assertions are saved and inherited by all; the subclasses and records that inherit from the class. The assertions are; then checked when the records are completely built. * In a multiclass definition, the assertions are saved with the other; component",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:48844,assert,assert,48844,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,1,['assert'],['assert']
Testability,"ion is increased by a factor of 5 it is still a small percentage; of the total time and it may very well save a factor of 10 on disk; space. On the other hand if the time spend on I/O is large, compression; may slow down the program's performance. The standard test program; `$ROOTSYS/test/Event` was used in various configurations with 400; events. The data file contains a **`TTree`**. The program was invoked; with:. ``` {.cpp}; Event 400 comp split; ```. - comp = 0 means: no compression at all.; - comp = 1 means: compress everything if split = 0.; - comp = 1 means: compress only the tree branches with integers if; split = 1.; - comp = 2 means: compress everything if split=1.; - split = 0 : the full event is serialized into one single buffer.; - split = 1 : the event is split into branches. One branch for each; data member of the Event class. The list of tracks (a; **`TClonesArray`**) has the data members of the Track class also; split into individual buffers. These tests were run on Pentium III CPU with 650 MHz. +------------+--------+---------------+---------------+----------------+----------------+; | Event | File | Total Time to | Effective | Total Time to | Total Time to |; | Parameters | Size | Write | Time to Write | Read All | Read Sample |; | | | (MB/sec) | (MB/sec) | (MB/sec) | (MB/sec) |; +------------+--------+---------------+---------------+----------------+----------------+; | Comp = 0 | 19.75 | 6.84 s.(2.8 | 3.56 s.(5.4 | 0.79s.(24.2 | 0.79 s.(24.2 |; | | MB | MB/s) | MB/s) | MB/s) | MB/s) |; | Split = 1 | | | | | |; +------------+--------+---------------+---------------+----------------+----------------+; | Comp = 1 | 17.73 | 6.44 s.(3.0 | 4.02 s.(4.8 | 0.90 s.(21.3 | 0.90 s.(21.3 |; | | MB | MB/s) | MB/s) | MB/s) | MB/s) |; | Split = 1 | | | | | |; +------------+--------+---------------+---------------+----------------+----------------+; | Comp = 2 | 13.78 | 11.34s.(1.7 | 9.51 s.(2.0 | 2.17 s.(8.8 | 2.17 s.(8.8 |; | | MB | MB/s) | MB/s) | MB/s) | MB/",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md:137087,test,tests,137087,documentation/users-guide/Trees.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md,1,['test'],['tests']
Testability,"ion is more valuable than the 2x execution; slowdown/binary size bloat. For the majority of production environments, this; impact is too high, and GWP-ASan proves extremely useful. Design; ======. **Please note:** The implementation of GWP-ASan is largely in-flux, and these; details are subject to change. There are currently other implementations of; GWP-ASan, such as the implementation featured in; `Chromium <https://cs.chromium.org/chromium/src/components/gwp_asan/>`_. The; long-term support goal is to ensure feature-parity where reasonable, and to; support compiler-rt as the reference implementation. Allocator Support; -----------------. GWP-ASan is not a replacement for a traditional allocator. Instead, it works by; inserting stubs into a supporting allocator to redirect allocations to GWP-ASan; when they're chosen to be sampled. These stubs are generally implemented in the; implementation of ``malloc()``, ``free()`` and ``realloc()``. The stubs are; extremely small, which makes using GWP-ASan in most allocators fairly trivial.; The stubs follow the same general pattern (example ``malloc()`` pseudocode; below):. .. code:: cpp. #ifdef INSTALL_GWP_ASAN_STUBS; gwp_asan::GuardedPoolAllocator GWPASanAllocator;; #endif. void* YourAllocator::malloc(..) {; #ifdef INSTALL_GWP_ASAN_STUBS; if (GWPASanAllocator.shouldSample(..)); return GWPASanAllocator.allocate(..);; #endif. // ... the rest of your allocator code here.; }. Then, all the supporting allocator needs to do is compile with; ``-DINSTALL_GWP_ASAN_STUBS`` and link against the GWP-ASan library! For; performance reasons, we strongly recommend static linkage of the GWP-ASan; library. Guarded Allocation Pool; -----------------------. The core of GWP-ASan is the guarded allocation pool. Each sampled allocation is; backed using its own *guarded* slot, which may consist of one or more accessible; pages. Each guarded slot is surrounded by two *guard* pages, which are mapped as; inaccessible. The collection of all guarded ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GwpAsan.rst:2434,stub,stubs,2434,interpreter/llvm-project/llvm/docs/GwpAsan.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GwpAsan.rst,1,['stub'],['stubs']
Testability,"ion is throw from a function having a throw(); specifier. void test() throw() {; throw(1); // warn; }. exceptions.ThrownTypeDiffersSpec; (C++); The type of a thrown exception differs from those specified in; a throw(type) specifier. struct S{};. void test() throw(int) {; S s;; throw (s); // warn; }. smart pointers. Name, DescriptionExampleProgress. smartptr.SmartPtrInit; (C++); C++03: auto_ptr should store a pointer to an object obtained via; new as allocated memory will be cleaned using delete.; C++11: one should use unique_ptr<type[]> to keep a; pointer to memory allocated by new[].; C++11: to keep a pointer to memory allocated by new[] in; a shared_ptr one should use a custom deleter that calls ; delete[]..; Source: C++03 20.4.5p1; C++11 auto_ptr is deprecated (D.10). #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p1(new int); // Ok; std::auto_ptr<int> p2(new int[3]); // warn; }. #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p((int *)malloc(sizeof(int))); // warn; }. dead code. Name, DescriptionExampleProgress. deadcode.UnmodifiedVariable; (C, C++); A variable is never modified but was not declared const and is not a; reference.(opt-in checker). extern int computeDelta();. int test(bool cond) {; int i = 0;; if (cond) {; const int delta = computeDelta();; // warn: forgot to modify 'i'; }; return i;; }. PR16890. deadcode.IdempotentOperations; (C); Warn about idempotent operations. void test() {; int x = 7;; x = x; // warn: value is always the same; }. void test() {; int x = 7;; x /= x; // warn: value is always 1; }. void test() {; int x = 7, one = 1;; x *= one; // warn: right op is always 1; }. void test() {; int x = 7, zero = 0;; x = x - zero;; // warn: the right operand to '-' is always 0; }. removed from alpha.deadcode.* at; r198476. POSIX. Name, DescriptionExampleProgress. posix.Errno; (C); Record that errno is non-zero when certain functions; fail. #include <stdlib.h>. int readWrapper(int fd, int *count) {;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:4066,test,test,4066,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"ion procedure you can use; `Chocolatey <https://chocolatey.org/>`_ as package manager.; After the `installation <https://chocolatey.org/install>`_ of Chocolatey,; run these commands in an admin shell to install the required tools:. .. code-block:: bat. choco install -y git cmake python3; pip3 install psutil. There is also a Windows; `Dockerfile <https://github.com/llvm/llvm-zorg/blob/main/buildbot/google/docker/windows-base-vscode2019/Dockerfile>`_; with the entire build tool chain. This can be used to test the build with a; tool chain different from your host installation or to create build servers. Next steps; ==========; 1. Read the documentation.; 2. Seriously, read the documentation.; 3. Remember that you were warned twice about reading the documentation. Test LLVM on the command line:; ------------------------------; The LLVM tests can be run by changing directory to the llvm source; directory and running:. .. code-block:: bat. c:\llvm> python ..\build\Release\bin\llvm-lit.py llvm\test. This example assumes that Python is in your PATH variable, which would be; after **Add Python to the PATH** was selected during Python installation.; If you had opened a command window prior to Python installation, you would; have to close and reopen it to get the updated PATH. A specific test or test directory can be run with:. .. code-block:: bat. c:\llvm> python ..\build\Release\bin\llvm-lit.py llvm\test\Transforms\Util. Build the LLVM Suite:; ---------------------; * The projects may still be built individually, but to build them all do; not just select all of them in batch build (as some are meant as; configuration projects), but rather select and build just the; ``ALL_BUILD`` project to build everything, or the ``INSTALL`` project,; which first builds the ``ALL_BUILD`` project, then installs the LLVM; headers, libs, and other useful things to the directory set by the; ``CMAKE_INSTALL_PREFIX`` setting when you first configured CMake.; * The Fibonacci project is a sample pro",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStartedVS.rst:9112,test,test,9112,interpreter/llvm-project/llvm/docs/GettingStartedVS.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStartedVS.rst,1,['test'],['test']
Testability,"ion that is typed in. This; demonstrates very basic functionality, but can we do more?. ::. ready> def testfunc(x y) x + y*2;; Read function definition:; define double @testfunc(double %x, double %y) {; entry:; %multmp = fmul double %y, 2.000000e+00; %addtmp = fadd double %multmp, %x; ret double %addtmp; }. ready> testfunc(4, 10);; Read top-level expression:; define double @1() {; entry:; %calltmp = call double @testfunc(double 4.000000e+00, double 1.000000e+01); ret double %calltmp; }. Evaluated to 24.000000. ready> testfunc(5, 10);; ready> LLVM ERROR: Program used external function 'testfunc' which could not be resolved!. Function definitions and calls also work, but something went very wrong on that; last line. The call looks valid, so what happened? As you may have guessed from; the API a Module is a unit of allocation for the JIT, and testfunc was part; of the same module that contained anonymous expression. When we removed that; module from the JIT to free the memory for the anonymous expression, we deleted; the definition of ``testfunc`` along with it. Then, when we tried to call; testfunc a second time, the JIT could no longer find it. The easiest way to fix this is to put the anonymous expression in a separate; module from the rest of the function definitions. The JIT will happily resolve; function calls across module boundaries, as long as each of the functions called; has a prototype, and is added to the JIT before it is called. By putting the; anonymous expression in a different module we can delete it without affecting; the rest of the functions. In fact, we're going to go a step further and put every function in its own; module. Doing so allows us to exploit a useful property of the KaleidoscopeJIT; that will make our environment more REPL-like: Functions can be added to the; JIT more than once (unlike a module where every function must have a unique; definition). When you look up a symbol in KaleidoscopeJIT it will always return; the most recent defini",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl04.rst:16731,test,testfunc,16731,interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl04.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl04.rst,1,['test'],['testfunc']
Testability,"ion to be used. There are some quoting rules that you must pay attention to when writing; your RUN lines. In general nothing needs to be quoted. :program:`lit` won't; strip off any quote characters so they will get passed to the invoked program.; To avoid this use curly braces to tell :program:`lit` that it should treat; everything enclosed as one value. In general, you should strive to keep your RUN lines as simple as possible,; using them only to run tools that generate textual output you can then examine.; The recommended way to examine output to figure out if the test passes is using; the :doc:`FileCheck tool <CommandGuide/FileCheck>`. *[The usage of grep in RUN; lines is deprecated - please do not send or commit patches that use it.]*. Put related tests into a single file rather than having a separate file per; test. Check if there are files already covering your feature and consider; adding your code there instead of creating a new file. Generating assertions in regression tests; -----------------------------------------. Some regression test cases are very large and complex to write/update by hand.; In that case to reduce the human work we can use the scripts available in; llvm/utils/ to generate the assertions. For example to generate assertions in an :program:`llc`-based test, after; adding one or more RUN lines use:. .. code-block:: bash. % llvm/utils/update_llc_test_checks.py --llc-binary build/bin/llc test.ll. This will generate FileCheck assertions, and insert a ``NOTE:`` line at the; top to indicate that assertions were automatically generated. If you want to update assertions in an existing test case, pass the `-u` option; which first checks the ``NOTE:`` line exists and matches the script name. Sometimes a test absolutely depends on hand-written assertions and should not; have assertions automatically generated. In that case, add the text ``NOTE: Do; not autogenerate`` to the first line, and the scripts will skip that test. It; is a good idea to expl",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:11159,assert,assertions,11159,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,2,"['assert', 'test']","['assertions', 'tests']"
Testability,"ion which; is not allowed by standard C++. The behavior of line #1 is equivalent to:; ```cpp; // ROOT prompt; root [] namespace foo { };struct S;; root [] S *s;; ```. Line #2 does not require a definition, however, the second identifier lookup; fails. The implementation knows that `foo::bar` is in *libFoo*. It `dlopen`s; libFoo which in turn, during its static initialization, inserts annotated forward; declaration as shown in `G__Foo.cxx`. In turn, this resolves `foo::bar` and; parsing of `Foo.h` is again avoided at relatively small overhead. However, this; is very hard to measure because the dictionary of each library can have different; amount of content. In the case where the library is big and the annotated; forward declarations are many, and we want to include a relatively small header; file it may not pay off. Moreover, the loading of the annotated forward; declarations can happen at any time during parsing. This is nick-named; ""recursive parsing"" and is a code path that exists only in ROOT, never exercised; by clang itself and is thus not well tested. The behavior of line #2 is; equivalent to:; ```cpp; // ROOT prompt; root [] namespace foo { };struct S;; root [] foo::bar/*store parsing state*/; gSystem->Load(""Foo"");; // More scaffolding.; extern int __Cling_AutoLoading_Map;; namespace foo{struct __attribute__((annotate(""$clingAutoload$Foo.h""))) bar;}; struct __attribute__((annotate(""$clingAutoload$Foo.h""))) S;; // More initialization scaffolding.; /*restore parsing state*/ *baz1;; ```. Line #3 requires a definition and the implementation behaves exactly as in #2.; Then it is informed that a definition is required, it reads the information in; the annotation and parses `Foo.h`. The recursive parsing happens at two places; making this code path error prone.; ```cpp; // ROOT prompt; root [] namespace foo { };struct S;; root [] foo::bar/*store parsing state*/; gSystem->Load(""Foo"");; // More scaffolding.; extern int __Cling_AutoLoading_Map;; namespace foo{struct __",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/README.CXXMODULES.md:9616,test,tested,9616,README/README.CXXMODULES.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/README.CXXMODULES.md,1,['test'],['tested']
Testability,"ion, but this also describes the existing field; ``SectionContribEntry::Section``. .. _dbi_section_map_substream:. Section Map Substream; ^^^^^^^^^^^^^^^^^^^^^; Begins at offset ``0`` immediately after the :ref:`dbi_sec_contr_substream` ends,; and consumes ``Header->SectionMapSize`` bytes. This substream begins with an ``4``; byte header followed by an array of fixed-length records. The header and records; have the following layout:. .. code-block:: c++. struct SectionMapHeader {; uint16_t Count; // Number of segment descriptors; uint16_t LogCount; // Number of logical segment descriptors; };. struct SectionMapEntry {; uint16_t Flags; // See the SectionMapEntryFlags enum below.; uint16_t Ovl; // Logical overlay number; uint16_t Group; // Group index into descriptor array.; uint16_t Frame;; uint16_t SectionName; // Byte index of segment / group name in string table, or 0xFFFF.; uint16_t ClassName; // Byte index of class in string table, or 0xFFFF.; uint32_t Offset; // Byte offset of the logical segment within physical segment. If group is set in flags, this is the offset of the group.; uint32_t SectionLength; // Byte count of the segment or group.; };. enum class SectionMapEntryFlags : uint16_t {; Read = 1 << 0, // Segment is readable.; Write = 1 << 1, // Segment is writable.; Execute = 1 << 2, // Segment is executable.; AddressIs32Bit = 1 << 3, // Descriptor describes a 32-bit linear address.; IsSelector = 1 << 8, // Frame represents a selector.; IsAbsoluteAddress = 1 << 9, // Frame represents an absolute address.; IsGroup = 1 << 10 // If set, descriptor represents a group.; };. Many of these fields are not well understood, so will not be discussed further. .. _dbi_file_info_substream:. File Info Substream; ^^^^^^^^^^^^^^^^^^^; Begins at offset ``0`` immediately after the :ref:`dbi_section_map_substream` ends,; and consumes ``Header->SourceInfoSize`` bytes. This substream defines the mapping; from module to the source files that contribute to that module. Since multi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/PDB/DbiStream.rst:11302,log,logical,11302,interpreter/llvm-project/llvm/docs/PDB/DbiStream.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/PDB/DbiStream.rst,1,['log'],['logical']
Testability,ion-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- C,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2820,test,testOptimizationCuda,2820,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testOptimizationCuda']
Testability,"ion. ### The TH1::Fit Method. To fit a histogram programmatically, you can use the `TH1::Fit`; method. Here is the signatures of `TH1::Fit` and an explanation of the; parameters:. ``` {.cpp}; TFitResultPtr Fit(TF1 *function, Option_t *option, Option_t *goption,; Axis_t xxmin, Axis_t xxmax); ```; - `function` a pointer to the fitted function (the fit model) object.; One can also use the function name. This name may be one of ROOT pre-defined; function names or a user-defined function. See the next paragraph for the list of pre-defined functions. - `*option:` The second parameter is the fitting option. Here is the; list of fitting options:. 	- ""`W`"" Set all weights to 1 for non empty bins; ignore error bars. 	- ""`WW`"" Set all weights to 1 including empty bins; ignore error; bars. 	- ""`I`"" Use integral of function in bin instead of value at bin; center. 	- ""`L`"" Use log likelihood method (default is chi-square method). To be used when; the histogram represents counts. 	- ""`WL`"" Weighted log likelihood method. To be used when the histogram has been filled with; 	weights different than 1. - ""`P`"" Use Pearson chi-square method, using expected errors instead of the observed one given by `TH1::GetBinError` (default case).; The expected error is instead estimated from the square-root of the bin function value. 	- ""`Q`"" Quiet mode (minimum printing). 	- ""`V`"" Verbose mode (default is between Q and V). 	- ""`S`"" The result of the fit is returned in the `TFitResultPtr`. 	- ""`E`"" Perform better errors estimation using the Minos technique. 	- ""`M`"" Improve fit results, by using the *IMPROVE* algorithm of TMinuit. 	- ""`R`"" Use the range specified in the function range. 	- ""`N`"" Do not store the graphics function, do not draw. 	- ""`0`"" Do not plot the result of the fit. By default the fitted; function is drawn unless the option ""`N`"" above is specified. 	- ""`+`"" Add this new fitted function to the list of fitted functions; (by default, the previous function is deleted and only the l",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/FittingHistograms.md:1612,log,log,1612,documentation/users-guide/FittingHistograms.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/FittingHistograms.md,1,['log'],['log']
Testability,"ion.png). - Implement options ""BOX1"", ""BOX2"" and ""BOX3"" for TH3 equivalent of ""LEGO1"", ""LEGO2"" and ""LEGO3""for TH2.; - When a 2d histogram was drawn with option `LEGO1` and white colored, the dark side; of the lego was red instead of gray.; - New option ""0"" to draw TH2Poly. When used with any `COL` options, the empty; bins are not drawn.; - Fix a long pending problem with Z axis drawing when a lego or a surface was drawn; upside-down.; - Add a protection in TLatex when a string has a syntax error. It was reported; [here](https://sft.its.cern.ch/jira/browse/ROOT-7424).; - Implement the automatic placement of the Y axis title. If the title offset is; set to 0:; ~~~ {.cpp}; h->GetYaxis()->SetTitleOffset(0.);; ~~~; the axis title is automatically placed to avoid overlaps with the axis labels.; - Implement the automatic placement of the `TLegend`. A new constructor not; specifying the legend position is available. Only width and height are defined.; - `ChangeLabel` is now available for log axis as well as requested [here](https://sft.its.cern.ch/jira/browse/ROOT-8537).; - The `TGraph` copy constructor also copy the underlying `TH1F` if it exists (it; holds the axis titles).; - `TGraph` axis range was computed differently depending on the order of SetLog[x|y]""; This issue was reported [here](https://sft.its.cern.ch/jira/browse/ROOT-8751); - Add the new markers suggested [here](https://root-forum.cern.ch/t/adding-custom-markers/24506).; Improve the marker style for the OpenGl backend (some where wrong or missing). ![New markers](NewMarkers.png). - Remove a large memory leak in TFITSHDU's GetArrayRow, GetArrayColumn and GetTabRealVectorColumn member functions.; - When `TGraph`s belonging to a `TMultiGraph` were changed (for instance with `SetPoint`); after the `TMultiGraph` was drawn, the `TMultiGraph` range was not recomputed.; This issue was discovered thanks to [this forum post](https://root-forum.cern.ch/t/multi-layer-perceptron/24561/2).; - When a TGraph is drawn, the X",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v610/index.md:13291,log,log,13291,README/ReleaseNotes/v610/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v610/index.md,1,['log'],['log']
Testability,"ion:`--select-scopes`, :option:`--select-symbols`,; :option:`--select-types`), as those options describe the different; logical element kinds. .. code-block:: text. =kind: Sort by element kind.; =line: Sort by element line number.; =name: Sort by element name.; =offset: Sort by element offset. .. _report_:. REPORT; ~~~~~~; Depending on the task being executed (print, compare, select), several; layouts are supported to display the elements in a more suitable way,; to make the output easier to understand. .. option:: --report=<value[,value,...]>. With **value** being one of the options in the following list. .. code-block:: text. =all: Include all the below reports. .. code-block:: text. =children: Elements and children are displayed in a tree format.; =list: Elements are displayed in a tabular format.; =parents: Elements and parents are displayed in a tree format.; =view: Elements, parents and children are displayed in a tree format. The **list** layout presents the logical elements in a tabular form; without any parent-child relationship. This may be the preferred way to; display elements that match specific conditions when comparing logical; views, making it easier to find differences. The **children**, **parents** and **view** layout displays the elements; in a tree format, with the scopes representing their nodes, and types,; symbols, lines and other scopes representing the children. The layout; shows the lexical scoping relationship between elements, with the binary; file being the tree root (level 0) and each compilation unit being a; child (level 1). The **children** layout includes the elements that match any given; criteria (:option:`--select`) or (:option:`--compare`) and its children. The **parents** layout includes the elements that match any given; criteria (:option:`--select`) or (:option:`--compare`) and its parents. The combined **view** layout includes the elements that match any given; criteria (:option:`--select`) or (:option:`--compare`), its pare",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:12966,log,logical,12966,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['log'],['logical']
Testability,"ion; (the source array) that is evaluated once up-front, and a per-element initializer; that runs once for each array element. Within the per-element initializer,; the current index may be obtained via an ArrayInitIndexExpr. Given; void testStructBinding() {; int a[2] = {1, 2};; auto [x, y] = a;; }; arrayInitIndexExpr() matches the array index that implicitly iterates; over the array `a` to copy each element to the anonymous array; that backs the structured binding `[x, y]` elements of which are; referred to by their aliases `x` and `y`. Matcher<Stmt>arrayInitLoopExprMatcher<ArrayInitLoopExpr>...; Matches a loop initializing the elements of an array in a number of contexts:; * in the implicit copy/move constructor for a class with an array member; * when a lambda-expression captures an array by value; * when a decomposition declaration decomposes an array. Given; void testLambdaCapture() {; int a[10];; auto Lam1 = [a]() {; return;; };; }; arrayInitLoopExpr() matches the implicit loop that initializes each element of; the implicit array field inside the lambda object, that represents the array `a`; captured by value. Matcher<Stmt>arraySubscriptExprMatcher<ArraySubscriptExpr>...; Matches array subscript expressions. Given; int i = a[1];; arraySubscriptExpr(); matches ""a[1]"". Matcher<Stmt>asmStmtMatcher<AsmStmt>...; Matches asm statements. int i = 100;; __asm(""mov al, 2"");; asmStmt(); matches '__asm(""mov al, 2"")'. Matcher<Stmt>atomicExprMatcher<AtomicExpr>...; Matches atomic builtins.; Example matches __atomic_load_n(ptr, 1); void foo() { int *ptr; __atomic_load_n(ptr, 1); }. Matcher<Stmt>autoreleasePoolStmtMatcher<ObjCAutoreleasePoolStmt>...; Matches an Objective-C autorelease pool statement. Given; @autoreleasepool {; int x = 0;; }; autoreleasePoolStmt(stmt()) matches the declaration of ""x""; inside the autorelease pool. Matcher<Stmt>binaryConditionalOperatorMatcher<BinaryConditionalOperator>...; Matches binary conditional operator expressions (GNU extension). Example ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTMatchersReference.html:22480,test,testLambdaCapture,22480,interpreter/llvm-project/clang/docs/LibASTMatchersReference.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTMatchersReference.html,1,['test'],['testLambdaCapture']
Testability,"ion; <https://llvm.org/docs/doxygen/html/SpeculativeExecution_8cpp_source.html>`_; -- This is mainly for promoting straight-line scalar optimizations, which are; most effective on code along dominator paths. * `Memory space inference; <https://llvm.org/doxygen/NVPTXInferAddressSpaces_8cpp_source.html>`_ --; In PTX, we can operate on pointers that are in a particular ""address space""; (global, shared, constant, or local), or we can operate on pointers in the; ""generic"" address space, which can point to anything. Operations in a; non-generic address space are faster, but pointers in CUDA are not explicitly; annotated with their address space, so it's up to LLVM to infer it where; possible. * `Bypassing 64-bit divides; <https://llvm.org/docs/doxygen/html/BypassSlowDivision_8cpp_source.html>`_ --; This was an existing optimization that we enabled for the PTX backend. 64-bit integer divides are much slower than 32-bit ones on NVIDIA GPUs.; Many of the 64-bit divides in our benchmarks have a divisor and dividend; which fit in 32-bits at runtime. This optimization provides a fast path for; this common case. * Aggressive loop unrolling and function inlining -- Loop unrolling and; function inlining need to be more aggressive for GPUs than for CPUs because; control flow transfer in GPU is more expensive. More aggressive unrolling and; inlining also promote other optimizations, such as constant propagation and; SROA, which sometimes speed up code by over 10x. (Programmers can force unrolling and inline using clang's `loop unrolling pragmas; <https://clang.llvm.org/docs/AttributeReference.html#pragma-unroll-pragma-nounroll>`_; and ``__attribute__((always_inline))``.). Publication; ===========. The team at Google published a paper in CGO 2016 detailing the optimizations; they'd made to clang/LLVM. Note that ""gpucc"" is no longer a meaningful name:; The relevant tools are now just vanilla clang/LLVM. | `gpucc: An Open-Source GPGPU Compiler <http://dl.acm.org/citation.cfm?id=2854041",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CompileCudaWithLLVM.rst:19546,benchmark,benchmarks,19546,interpreter/llvm-project/llvm/docs/CompileCudaWithLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CompileCudaWithLLVM.rst,1,['benchmark'],['benchmarks']
Testability,"ion; to X.1.0git (where ``X`` is the major version of the branch.). #. All tags and branches need to be created in both the llvm/llvm-project and; llvm/llvm-test-suite repos. Update LLVM Version; ^^^^^^^^^^^^^^^^^^^. After creating the LLVM release branch, update the release branches'; version with the script in ``llvm/utils/release/bump-version.py``. Tagging the LLVM Release Candidates; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Tag release candidates:. ::. $ git tag -sa llvmorg-X.Y.Z-rcN. The Release Manager must supply pre-packaged source tarballs for users. This can; be done with the export.sh script in utils/release. Tarballs, release binaries, or any other release artifacts must be uploaded to; GitHub. This can be done using the github-upload-release.py script in utils/release. ::. $ github-upload-release.py upload --token <github-token> --release X.Y.Z-rcN --files <release_files>. ::. $ ./export.sh -release X.Y.Z -rc $RC. This will generate source tarballs for each LLVM project being validated, which; can be uploaded to github for further testing. Build The Binary Distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Creating the binary distribution requires following the instructions; :doc:`here <ReleaseProcess>`. That process will perform both Release+Asserts and Release builds but only; pack the Release build for upload. You should use the Release+Asserts sysroot,; normally under ``final/Phase3/Release+Asserts/llvmCore-3.8.1-RCn.install/``,; for test-suite and run-time benchmarks, to make sure nothing serious has; passed through the net. For compile-time benchmarks, use the Release version. The minimum required version of the tools you'll need are :doc:`here <GettingStarted>`. Release Qualification Criteria; ------------------------------. There are no official release qualification criteria. It is up to the; the release manager to determine when a release is ready. The release manager; should pay attention to the results of community testing, the number of outstanding",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst:5473,test,testing,5473,interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,1,['test'],['testing']
Testability,"ions can be found in the; :doc:`../TestingGuide`. TEST RUN OUTPUT FORMAT; ~~~~~~~~~~~~~~~~~~~~~~. The :program:`lit` output for a test run conforms to the following schema, in; both short and verbose modes (although in short mode no PASS lines will be; shown). This schema has been chosen to be relatively easy to reliably parse by; a machine (for example in buildbot log scraping), and for other tools to; generate. Each test result is expected to appear on a line that matches:. .. code-block:: none. <result code>: <test name> (<progress info>). where ``<result-code>`` is a standard test result such as PASS, FAIL, XFAIL,; XPASS, UNRESOLVED, or UNSUPPORTED. The performance result codes of IMPROVED and; REGRESSED are also allowed. The ``<test name>`` field can consist of an arbitrary string containing no; newline. The ``<progress info>`` field can be used to report progress information such; as (1/300) or can be empty, but even when empty the parentheses are required. Each test result may include additional (multiline) log information in the; following format:. .. code-block:: none. <log delineator> TEST '(<test name>)' <trailing delineator>; ... log message ...; <log delineator>. where ``<test name>`` should be the name of a preceding reported test, ``<log; delineator>`` is a string of ""*"" characters *at least* four characters long; (the recommended length is 20), and ``<trailing delineator>`` is an arbitrary; (unparsed) string. The following is an example of a test run output which consists of four tests A,; B, C, and D, and a log message for the failing test C:. .. code-block:: none. PASS: A (1 of 4); PASS: B (2 of 4); FAIL: C (3 of 4); ******************** TEST 'C' FAILED ********************; Test 'C' failed as a result of exit code 1.; ********************; PASS: D (4 of 4). LIT EXAMPLE TESTS; ~~~~~~~~~~~~~~~~~. The :program:`lit` distribution contains several example implementations of; test suites in the *ExampleTests* directory. SEE ALSO; --------. valgrind(1); ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:23090,test,test,23090,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,14,"['log', 'test']","['log', 'test', 'tests']"
Testability,"ions in a ``RUN:``; line, lit makes only one pass through the substitution list by default. Thus,; if substitutions are not defined in the proper order, some will remain in the; ``RUN:`` line unexpanded. For example, the following directives refer to; ``%{inner}`` within ``%{outer}`` but do not define ``%{inner}`` until after; ``%{outer}``:. .. code-block:: llvm. ; By default, this definition order does not enable full expansion. ; DEFINE: %{outer} = %{inner}; ; DEFINE: %{inner} = expanded. ; RUN: echo '%{outer}'. ``DEFINE:`` inserts substitutions at the start of the substitution list, so; ``%{inner}`` expands first but has no effect because the original ``RUN:`` line; does not contain ``%{inner}``. Next, ``%{outer}`` expands, and the output of; the ``echo`` command becomes:. .. code-block:: shell. %{inner}. Of course, one way to fix this simple case is to reverse the definitions of; ``%{outer}`` and ``%{inner}``. However, if a test has a complex set of; substitutions that can all reference each other, there might not exist a; sufficient substitution order. To address such use cases, lit configuration files support; ``config.recursiveExpansionLimit``, which can be set to a non-negative integer; to specify the maximum number of passes through the substitution list. Thus, in; the above example, setting the limit to 2 would cause lit to make a second pass; that expands ``%{inner}`` in the ``RUN:`` line, and the output from the ``echo``; command when then be:. .. code-block:: shell. expanded. To improve performance, lit will stop making passes when it notices the ``RUN:``; line has stopped changing. In the above example, setting the limit higher than; 2 is thus harmless. To facilitate debugging, after reaching the limit, lit will make one extra pass; and report an error if the ``RUN:`` line changes again. In the above example,; setting the limit to 1 will thus cause lit to report an error instead of; producing incorrect output. Options; -------. The llvm lit configurati",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:36676,test,test,36676,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"ions of 2D peaks, output parameters; double position_err_y[MAX_NUMBER_OF_PEAKS2]; // y position errors of 2D peaks; bool fix_position_y[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix the appropriate y positions of 2D peaks (not fit). However, they are present in the estimated functional; double position_init_x1[MAX_NUMBER_OF_PEAKS2]; // initial values of x positions of 1D ridges, input parameters; double position_calc_x1[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitted x positions of 1D ridges, output parameters; double position_err_x1[MAX_NUMBER_OF_PEAKS2]; // x position errors of 1D ridges; bool fix_position_x1[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix appropriate x positions of 1D ridges (not fit). However, they are present in the estimated functional; double position_init_y1[MAX_NUMBER_OF_PEAKS2]; // initial values of y positions of 1D ridges, input parameters; double position_calc_y1[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitted y positions of 1D ridges, output parameters; double position_err_y1[MAX_NUMBER_OF_PEAKS2]; // y position errors of 1D ridges; bool fix_position_y1[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix the appropriate y positions of 1D ridges (not fit). However, they are present in the estimated functional; double amp_init[MAX_NUMBER_OF_PEAKS2]; // initial values of 2D peaks amplitudes, input parameters; double amp_calc[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitted amplitudes of 2D peaks, output parameters; double amp_err[MAX_NUMBER_OF_PEAKS2]; // amplitude errors of 2D peaks; bool fix_amp[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix appropriate amplitudes of 2D peaks (not fit). However, they are present in the estimated functional; double amp_init_x1[MAX_NUMBER_OF_PEAKS2]; // initial values of 1D ridges amplitudes, input parameters; double amp_calc_x1[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitted amplitudes of 1D ridges, output parameters; double amp_err",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/spectrum/Spectrum.md:51862,log,logical,51862,documentation/spectrum/Spectrum.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/spectrum/Spectrum.md,1,['log'],['logical']
Testability,"ions; (e.g., uninitialized arguments, null function pointers). // C; struct S {; int x;; };. void f(struct S s);. void test() {; struct S s;; f(s); // warn: passed-by-value arg contain uninitialized data; }. // C; void test() {; void (*foo)(void);; foo(); // warn: function pointer is uninitialized; }. // C; void test() {; void (*foo)(void);; foo = 0;; foo(); // warn: function pointer is null; }. // C++; class C {; public:; void f();; };. void test() {; C *pc;; pc->f(); // warn: object pointer is uninitialized; }. // C++; class C {; public:; void f();; };. void test() {; C *pc = 0;; pc->f(); // warn: object pointer is null; }. // Objective-C; @interface MyClass : NSObject; @property (readwrite,assign) id x;; - (long double)longDoubleM;; @end. void test() {; MyClass *obj1;; long double ld1 = [obj1 longDoubleM];; // warn: receiver is uninitialized; }. // Objective-C; @interface MyClass : NSObject; @property (readwrite,assign) id x;; - (long double)longDoubleM;; @end. void test() {; MyClass *obj1;; id i = obj1.x; // warn: uninitialized object pointer; }. // Objective-C; @interface Subscriptable : NSObject; - (id)objectAtIndexedSubscript:(unsigned int)index;; @end. @interface MyClass : Subscriptable; @property (readwrite,assign) id x;; - (long double)longDoubleM;; @end. void test() {; MyClass *obj1;; id i = obj1[0]; // warn: uninitialized object pointer; }. core.DivideZero; (C, C++, ObjC); Check for division by zero.co. void test(int z) {; if (z == 0); int x = 1 / z; // warn; }. void test() {; int x = 1;; int y = x % 0; // warn; }. core.NonNullParamChecker; (C, C++, ObjC); Check for null pointers passed as arguments to a function whose arguments are; marked with the nonnull attribute. int f(int *p) __attribute__((nonnull));. void test(int *p) {; if (!p); f(p); // warn; }. core.NullDereference; (C, C++, ObjC); Check for dereferences of null pointers. // C; void test(int *p) {; if (p); return;. int x = p[0]; // warn; }. // C; void test(int *p) {; if (!p); *p = 0; // warn; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:2373,test,test,2373,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"ious; example not to treat the ``nvptx64-nvidia-cuda`` version of; ``offloading/memory_manager.cpp`` as XFAIL:. .. code-block:: none. LIT_XFAIL=""affinity/kmp-hw-subset.c;libomptarget :: x86_64-pc-linux-gnu :: offloading/memory_manager.cpp"". .. option:: --xfail-not=LIST. Do not treat the specified tests as ``XFAIL``. The environment variable; ``LIT_XFAIL_NOT`` can also be used in place of this option. The syntax is the; same as for :option:`--xfail` and ``LIT_XFAIL``. :option:`--xfail-not` and; ``LIT_XFAIL_NOT`` always override all other ``XFAIL`` specifications,; including an :option:`--xfail` appearing later on the command line. The; primary purpose is to suppress an ``XPASS`` result without modifying a test; case that uses the ``XFAIL`` directive. ADDITIONAL OPTIONS; ------------------. .. option:: --debug. Run :program:`lit` in debug mode, for debugging configuration issues and; :program:`lit` itself. .. option:: --show-suites. List the discovered test suites and exit. .. option:: --show-tests. List all of the discovered tests and exit. EXIT STATUS; -----------. :program:`lit` will exit with an exit code of 1 if there are any FAIL or XPASS; results. Otherwise, it will exit with the status 0. Other exit codes are used; for non-test related failures (for example a user error or an internal program; error). .. _test-discovery:. TEST DISCOVERY; --------------. The inputs passed to :program:`lit` can be either individual tests, or entire; directories or hierarchies of tests to run. When :program:`lit` starts up, the; first thing it does is convert the inputs into a complete list of tests to run; as part of *test discovery*. In the :program:`lit` model, every test must exist inside some *test suite*.; :program:`lit` resolves the inputs specified on the command line to test suites; by searching upwards from the input path until it finds a :file:`lit.cfg` or; :file:`lit.site.cfg` file. These files serve as both a marker of test suites; and as configuration files which :pr",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:10616,test,tests,10616,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['tests']
Testability,"iptionExampleProgress. undefbehavior.ExitInDtor; (C++); Undefined behavior: std::exit() is called to end the program during; the destruction of an object with static storage duration.; Source: C++11 3.6.1p4. #include <cstdlib>. class A {; public:; ~A() {; std::exit(1); // warn; }; };. undefbehavior.LocalStaticDestroyed; (C++); Undefined behavior: function containing a definition of static local object is; called during the destruction of an object with static storage duration so that; flow of control passes through the definition of the previously destroyed; static local object.; Source: C++11 3.6.3p2. void f();. class A {; public:; ~A() {; f(); // warn; }; };. class B {};. A a;. void f() {; static B b;; }. undefbehavior.ZeroAllocDereference; (C, C++); The effect of dereferencing a pointer returned as a request for zero size is; undefined.; Note: possibly an enhancement to ; unix.Malloc.; Source: C++03 3.7.3.1p2; C++11 3.7.4.1p2. #include <stdlib.h>. void test() {; int *p = (int *)malloc(0);; *p = 1; // warn; free(p);; }. void f(int);. void test() {; int *p = new int[0];; f(*p); // warn; delete[] p;; }. D8273. undefbehavior.DeadReferenced; (C++); Undefined behavior: the following usage of the pointer to the object whose; lifetime has ended can result in undefined behavior:; The object will be or was of a class type with a non-trivial destructor and; the pointer is used as the operand of a delete-expression; The object will be or was of a non-POD class type (C++11: any class type) and; the pointer is used to access a non-static data member or call a; non-static member function of the object; the pointer is implicitly converted to a pointer to a base class; type; the pointer is used as the operand of a static_cast (except; when the conversion is to void*, or to void* and; subsequently to char*, or unsigned char*); the pointer is used as the operand of a dynamic_cast; Source: C++03 3.8p5, p7; C++11 3.8p5, p7. #include <new>. class A {; public:; ~A();; };. class B : publ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:6334,test,test,6334,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"ipts, Server side JavaScript).; This provides a ready to go, powerful web development platform in a one; single-click executable with **no dependencies**.0; - Support for CGI, SSI, HTTP digest (MD5) authorization, WebSocket,; WebDAV.; - HTTPS (SSL/TLS) support using [OpenSSL](https://www.openssl.org/).; - Optional support for authentication using client side X.509 certificates.; - Resumed download, URL rewrite, file blacklist, IP-based ACL.; - May run as Windows service.; - Download speed limit based on client subnet or URI pattern.; - Simple and clean embedding API.; - The source is in single file to make things easy.; - Embedding examples included.; - HTTP client capable of sending arbitrary HTTP/HTTPS requests.; - Websocket client functionality available (WS/WSS). ### Optionally included software. [![Lua](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/lua-logo.jpg ""Lua Logo"")](http://lua.org). [![Sqlite3](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/sqlite3-logo.jpg ""Sqlite3 Logo"")](http://sqlite.org). [![LuaFileSystem](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/luafilesystem-logo.jpg ""LuaFileSystem Logo"")](http://keplerproject.github.io/luafilesystem/). [![LuaSQLite3](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/luasqlite-logo.jpg ""LuaSQLite3 Logo"")](http://lua.sqlite.org/index.cgi/index). [![LuaXML](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/luaxml-logo.jpg ""LuaXML Logo"")](https://github.com/n1tehawk/LuaXML). [![Duktape](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/duktape-logo.png ""Duktape Logo"")](http://duktape.org). ### Optional depencencies. [![zlib](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/zlib3d-b1.png ""zlib Logo"")](https://zlib.net). [![OpenSSL](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/OpenSSL_logo.png ""OpenSSL Logo"")](https://www.openssl.org/). [![Mbed TL",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/README.md:6962,log,logo,6962,net/http/civetweb/README.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/README.md,1,['log'],['logo']
Testability,"iptsAdd support for Adler32 checksum calculation of; a local unix file (including stdin) and file on a remote xrootd data; server.Add support for the so-called Xtreme copy, allowing xrdcp; to read multiple chunks from several servers, in parallel.Add possibility to use a different version of a given C++; compiler or linker (--with-cxx=..., etc)Increase flexibility in configuring openssl and openafs; supportIn GSI authentication, automatize the loading of CRL; the; information; about the URI is looked for either in the dedicated extension on the CA; certificate or from the file ""<CA hash>.crl_url"" and the; file; automatically downloaded and transformed in PEM formatFixesServer sideFix wrong reporting of the refresh option for LocateFix incorrect propagation of selected nodesPrevent potential long duration loop (15 mins) after client disconnectionsAvoid potential deadlocks when trying to remove a node from a clusterCorrect matching of incoming connection with previously dropped connectionCorrect export of cluster identificationCorrectly propagate information about files that could not be stagedPrevent endsess deadlock when parallel streams stall due to large WAN RTTFix infinite wait for primary login that will never; happen if you are a manager without a meta-managerPrevent annoying (but not deadly) infinite loop should a; server go offline that is subject to a locate request display.Client sideBetter handling of errno, especially for parallel streamsAllow the client to cycle through all the remaining valid security protocols in the list of protocols returned by the serverMake the readahead strategy more conservativeFix a rare race condition happening when destroying instances with outstanding open requestsEnforce cache coherency in the case of reads+writes in the same fileCorrectly guess the filesize of a file opened for writing in sync modeMake server host name check more flexible for GSI authenticationFix some relevant issues with cache handling on the client, incl",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html:1723,log,login,1723,net/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/doc/v524/index.html,1,['log'],['login']
Testability,"ir to your compiler,; the build will also generate the `generate-coverage-report` target to generate; the code coverage report for LLVM, and the `clear-profile-data` utility target; to delete captured profile data. See documentation for; *LLVM_CODE_COVERAGE_TARGETS* and *LLVM_COVERAGE_SOURCE_DIRS* for more; information on configuring code coverage reports. **LLVM_CODE_COVERAGE_TARGETS**:STRING; If set to a semicolon separated list of targets, those targets will be used; to drive the code coverage reports. If unset, the target list will be; constructed using the LLVM build's CMake export list. **LLVM_COVERAGE_SOURCE_DIRS**:STRING; If set to a semicolon separated list of directories, the coverage reports; will limit code coverage summaries to just the listed directories. If unset,; coverage reports will include all sources identified by the tooling. **LLVM_INDIVIDUAL_TEST_COVERAGE**:BOOL; Enable individual test case coverage. When set to ON, code coverage data for; each test case will be generated and stored in a separate directory under the; config.test_exec_root path. This feature allows code coverage analysis of each; individual test case. Defaults to OFF. **LLVM_BUILD_LLVM_DYLIB**:BOOL; If enabled, the target for building the libLLVM shared library is added.; This library contains all of LLVM's components in a single shared library.; Defaults to OFF. This cannot be used in conjunction with BUILD_SHARED_LIBS.; Tools will only be linked to the libLLVM shared library if LLVM_LINK_LLVM_DYLIB; is also ON.; The components in the library can be customised by setting LLVM_DYLIB_COMPONENTS; to a list of the desired components.; This option is not available on Windows. **LLVM_BUILD_TESTS**:BOOL; Include LLVM unit tests in the 'all' build target. Defaults to OFF. Targets; for building each unit test are generated in any case. You can build a; specific unit test using the targets defined under *unittests*, such as; ADTTests, IRTests, SupportTests, etc. (Search for ``add_llvm_u",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst:15949,test,test,15949,interpreter/llvm-project/llvm/docs/CMake.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst,1,['test'],['test']
Testability,"ird_party_module""; }; ]; },; {; ""primary-output"": ""impl_part.o"",; ""provides"": [; {; ""is-interface"": false,; ""logical-name"": ""M:impl_part"",; ""source-path"": ""impl_part.cppm""; }; ],; ""requires"": [; {; ""logical-name"": ""M:interface_part"",; ""source-path"": ""interface_part.cppm""; }; ]; },; {; ""primary-output"": ""interface_part.o"",; ""provides"": [; {; ""is-interface"": true,; ""logical-name"": ""M:interface_part"",; ""source-path"": ""interface_part.cppm""; }; ]; }; ],; ""version"": 1; }. See the P1689 paper for the meaning of the fields. And if the user want a finer-grained control for any reason, e.g., to scan the generated source files,; the user can choose to get the dependency information per file. For example:. .. code-block:: console. $ clang-scan-deps -format=p1689 -- <path-to-compiler-executable>/clang++ -std=c++20 impl_part.cppm -c -o impl_part.o. And we'll get:. .. code-block:: text. {; ""revision"": 0,; ""rules"": [; {; ""primary-output"": ""impl_part.o"",; ""provides"": [; {; ""is-interface"": false,; ""logical-name"": ""M:impl_part"",; ""source-path"": ""impl_part.cppm""; }; ],; ""requires"": [; {; ""logical-name"": ""M:interface_part""; }; ]; }; ],; ""version"": 1; }. In this way, we can pass the single command line options after the ``--``.; Then clang-scan-deps will extract the necessary information from the options.; Note that we need to specify the path to the compiler executable instead of saying; ``clang++`` simply. The users may want the scanner to get the transitional dependency information for headers.; Otherwise, the users have to scan twice for the project, once for headers and once for modules.; To address the requirement, clang-scan-deps will recognize the specified preprocessor options; in the given command line and generate the corresponding dependency information. For example,. .. code-block:: console. $ clang-scan-deps -format=p1689 -- ../bin/clang++ -std=c++20 impl_part.cppm -c -o impl_part.o -MD -MT impl_part.ddi -MF impl_part.dep; $ cat impl_part.dep. We will get:. .. code-block:: t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/StandardCPlusPlusModules.rst:36546,log,logical-name,36546,interpreter/llvm-project/clang/docs/StandardCPlusPlusModules.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/StandardCPlusPlusModules.rst,1,['log'],['logical-name']
Testability,"irectory and use CMake to configure the suite. Use the; `CMAKE_C_COMPILER` option to specify the compiler to test. Use a cache file; to choose a typical build configuration:. ```bash; % mkdir test-suite-build; % cd test-suite-build; % cmake -DCMAKE_C_COMPILER=<path to llvm build>/bin/clang \; -C../test-suite/cmake/caches/O3.cmake \; ../test-suite; ```. **NOTE!** if you are using your built clang, and you want to build and run the; MicroBenchmarks/XRay microbenchmarks, you need to add `compiler-rt` to your; `LLVM_ENABLE_RUNTIMES` cmake flag. 4. Build the benchmarks:. ```text; % make; Scanning dependencies of target timeit-target; [ 0%] Building C object tools/CMakeFiles/timeit-target.dir/timeit.c.o; [ 0%] Linking C executable timeit-target; ...; ```. 5. Run the tests with lit:. ```text; % llvm-lit -v -j 1 -o results.json .; -- Testing: 474 tests, 1 threads --; PASS: test-suite :: MultiSource/Applications/ALAC/decode/alacconvert-decode.test (1 of 474); ********** TEST 'test-suite :: MultiSource/Applications/ALAC/decode/alacconvert-decode.test' RESULTS **********; compile_time: 0.2192; exec_time: 0.0462; hash: ""59620e187c6ac38b36382685ccd2b63b""; size: 83348; **********; PASS: test-suite :: MultiSource/Applications/ALAC/encode/alacconvert-encode.test (2 of 474); ...; ```. 6. Show and compare result files (optional):. ```bash; # Make sure pandas and scipy are installed. Prepend `sudo` if necessary.; % pip install pandas scipy; # Show a single result file:; % test-suite/utils/compare.py results.json; # Compare two result files:; % test-suite/utils/compare.py results_a.json results_b.json; ```. Structure; ---------. The test-suite contains benchmark and test programs. The programs come with; reference outputs so that their correctness can be checked. The suite comes; with tools to collect metrics such as benchmark runtime, compilation time and; code size. The test-suite is divided into several directories:. - `SingleSource/`. Contains test programs that are only a single s",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:1588,test,test,1588,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,2,['test'],"['test', 'test-suite']"
Testability,"is a valid directory cd to it before executing. -? : print usage; -h : print usage; --help : print usage; -config : print ./configure options; ```. - -b ROOT session runs in batch mode, without graphics display. This; mode is useful in case one does not want to set the DISPLAY or; cannot do it for some reason. - -n usually, launching a ROOT session will execute a logon script; and quitting will execute a logoff script. This option prevents; the execution of these two scripts. - it is also possible to execute a script without entering a ROOT; session. One simply adds the name of the script(s) after the ROOT; command. Be warned: after finishing the execution of the script,; ROOT will normally enter a new session. - -q process command line script files and exit. For example if you would like to run a script `myMacro.C` in the; background, redirect the output into a file `myMacro.log`, and exit; after the script execution, use the following syntax:. ```; root -b -q myMacro.C > myMacro.log; ```. If you need to pass a parameter to the script use:. ```; root -b -q 'myMacro.C(3)' > myMacro.log; ```. Be mindful of the quotes, i.e. if you need to pass a string as a; parameter, the syntax is:. ```; root -b -q 'myMacro.C(""text"")' > myMacro.log; ```. You can build a shared library with ACLiC and then use this shared; library on the command line for a quicker execution (i.e. the compiled; speed rather than the interpreted speed). See also ""Cling the C++; Interpreter"". ```; root -b -q myMacro.so > myMacro.log; ```. ROOT has a powerful C/C++ interpreter giving you access to all available; ROOT classes, global variables, and functions via the command line. By; typing C++ statements at the prompt, you can create objects, call; functions, execute scripts, etc. For example:. ``` {.cpp}; root[] 1+sqrt(9); (const double)4.00000000000000000e+00; root[] for (int i = 0; i<4; i++) cout << ""Hello"" << i << endl; Hello 0; Hello 1; Hello 2; Hello 3; root[] .q; ```. To exit the ROOT session, type ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/GettingStarted.md:4215,log,log,4215,documentation/users-guide/GettingStarted.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/GettingStarted.md,1,['log'],['log']
Testability,"is either down or unresponsive. We should take advantage of one of the services out there (GitHub, GitLab,; and BitBucket, among others) that offer better service (24/7 stability, disk; space, Git server, code browsing, forking facilities, etc) for free. Why Git?; --------. Many new coders nowadays start with Git, and a lot of people have never used; SVN, CVS, or anything else. Websites like GitHub have changed the landscape; of open source contributions, reducing the cost of first contribution and; fostering collaboration. Git is also the version control many LLVM developers use. Despite the; sources being stored in a SVN server, these developers are already using Git; through the Git-SVN integration. Git allows you to:. * Commit, squash, merge, and fork locally without touching the remote server.; * Maintain local branches, enabling multiple threads of development.; * Collaborate on these branches (e.g. through your own fork of llvm on GitHub).; * Inspect the repository history (blame, log, bisect) without Internet access.; * Maintain remote forks and branches on Git hosting services and; integrate back to the main repository. In addition, because Git seems to be replacing many OSS projects' version; control systems, there are many tools that are built over Git.; Future tooling may support Git first (if not only). Why GitHub?; -----------. GitHub, like GitLab and BitBucket, provides free code hosting for open source; projects. Any of these could replace the code-hosting infrastructure that we; have today. These services also have a dedicated team to monitor, migrate, improve and; distribute the contents of the repositories depending on region and load. GitHub has one important advantage over GitLab and; BitBucket: it offers read-write **SVN** access to the repository; (https://github.com/blog/626-announcing-svn-support).; This would enable people to continue working post-migration as though our code; were still canonically in an SVN repository. In addition, there ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/GitHubMove.rst:2796,log,log,2796,interpreter/llvm-project/llvm/docs/Proposals/GitHubMove.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/GitHubMove.rst,1,['log'],['log']
Testability,"is is done by calling the ; CheckerContext::generateSink function; this function is the same as the; addTransition function, but marks the state as a sink node. Like; addTransition, this returns an ExplodedNode with the updated; state, which can then be passed to the BugReport constructor. After a BugReport is created, it should be passed to the analyzer core; by calling CheckerContext::emitReport. AST Visitors; Some checks might not require path-sensitivity to be effective. Simple AST walk; might be sufficient. If that is the case, consider implementing a Clang; compiler warning. On the other hand, a check might not be acceptable as a compiler; warning; for example, because of a relatively high false positive rate. In this; situation, AST callbacks checkASTDecl and; checkASTCodeBody are your best friends. Testing; Every patch should be well tested with Clang regression tests. The checker tests; live in clang/test/Analysis folder. To run all of the analyzer tests,; execute the following from the clang build directory:; ; $ bin/llvm-lit -sv ../llvm/tools/clang/test/Analysis; ; Useful Commands/Debugging Hints; Attaching the Debugger; When your command contains the -cc1 flag, you can attach the; debugger to it directly:. $ gdb --args clang -cc1 -analyze -analyzer-checker=core test.c; $ lldb -- clang -cc1 -analyze -analyzer-checker=core test.c. Otherwise, if your command line contains --analyze,; the actual clang instance would be run in a separate process. In; order to debug it, use the -### flag for obtaining; the command line of the child process:. $ clang --analyze test.c -\#\#\#. Below we describe a few useful command line arguments, all of which assume that; you are running clang -cc1. Narrowing Down the Problem; While investigating a checker-related issue, instruct the analyzer to only; execute a single checker:. $ clang -cc1 -analyze -analyzer-checker=osx.KeychainAPI test.c. If you are experiencing a crash, to see which function is failing while; processing a lar",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html:18702,test,tests,18702,interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,1,['test'],['tests']
Testability,"is not in your; %PATH%, then you can set this variable to the GnuWin32 directory so that; lit can find tools needed for tests in that directory. **LLVM_NATIVE_TOOL_DIR**:STRING; Full path to a directory containing executables for the build host; (containing binaries such as ``llvm-tblgen`` and ``clang-tblgen``). This is; intended for cross-compiling: if the user sets this variable and the; directory contains executables with the expected names, no separate; native versions of those executables will be built. **LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE**:BOOL; Defaults to ``OFF``. If set to ``ON``, CMake's default logic for library IDs; on Darwin in the build tree will be used. Otherwise the install-time library; IDs will be used in the build tree as well. Mainly useful when other CMake; library ID control variables (e.g., ``CMAKE_INSTALL_NAME_DIR``) are being; set to non-standard values. **LLVM_OPTIMIZED_TABLEGEN**:BOOL; If enabled and building a debug or asserts build the CMake build system will; generate a Release build tree to build a fully optimized tablegen for use; during the build. Enabling this option can significantly speed up build times; especially when building LLVM in Debug configurations. **LLVM_PARALLEL_COMPILE_JOBS**:STRING; Define the maximum number of concurrent compilation jobs. **LLVM_PARALLEL_LINK_JOBS**:STRING; Define the maximum number of concurrent link jobs. **LLVM_RAM_PER_COMPILE_JOB**:STRING; Calculates the amount of Ninja compile jobs according to available resources.; Value has to be in MB, overwrites LLVM_PARALLEL_COMPILE_JOBS. Compile jobs ; will be between one and amount of logical cores. **LLVM_RAM_PER_LINK_JOB**:STRING; Calculates the amount of Ninja link jobs according to available resources.; Value has to be in MB, overwrites LLVM_PARALLEL_LINK_JOBS. Link jobs will ; be between one and amount of logical cores. Link jobs will not run ; exclusively therefore you should add an offset of one or two compile jobs ; to be sure its not termi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst:32143,assert,asserts,32143,interpreter/llvm-project/llvm/docs/CMake.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst,1,['assert'],['asserts']
Testability,"is on the start, drag the cursor to; the end, and release the mouse button. ### Drawing Axis Independently of Graphs or Histograms. An axis may be drawn independently of a histogram or a graph. This may; be useful to draw for example a supplementary axis for a graph. In this; case, one has to use the **`TGaxis`** class, the graphical; representation of an axis. One may use the standard constructor for this; kind of objects:. ``` {.cpp}; TGaxis(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax,; Double_t wmin, Double_t wmax, Int_t ndiv = 510,; Option_t* chopt,Double_t gridlength = 0); ```. The arguments `xmin, ymin` are the coordinates of the axis' start in the; user coordinates system, `and xmax, ymax` are the end coordinates. The; arguments `wmin` and `wmax` are the minimum (at the start) and maximum; (at the end) values to be represented on the axis; `ndiv` is the number; of divisions. The options, given by the ""`chopt`"" string are the; following:. - `chopt = 'G'`: logarithmic scale, default is linear. - `chopt = 'B'`: Blank axis (it is useful to superpose the axis). Instead of the `wmin,wmax` arguments of the normal constructor, i.e. the; limits of the axis, the name of a **`TF1`** function can be specified.; This function will be used to map the user coordinates to the axis; values and ticks. The constructor is the following:. ``` {.cpp}; TGaxis(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax,; const char* funcname, Int_t ndiv=510,; Option_t* chopt, Double_t gridlength=0); ```. In such a way, it is possible to obtain exponential evolution of the; tick marks position, or even decreasing. In fact, anything you like. ### Orientation of Tick Marks on Axis. Tick marks are normally drawn on the positive side of the axis, however,; if `xmin = xmax`, then negative. - `chopt = '+': ` tick marks are drawn on Positive side. (Default). - `chopt = '-': ` tick marks are drawn on the negative side. - `chopt = '+-':` tick marks are drawn on both sides of the ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md:53909,log,logarithmic,53909,documentation/users-guide/Graphics.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md,1,['log'],['logarithmic']
Testability,"is passed fewer than 6; X's in the format string. void test() {; mkstemp(""XX""); // warn; }. security.insecureAPI.mktemp; (C); Warn on uses of the mktemp function. void test() {; char *x = mktemp(""/tmp/zxcv""); // warn: insecure, use mkstemp; }. security.insecureAPI.rand; (C); Warn on uses of inferior random number generating functions (only if arc4random; function is available):; drand48; erand48; jrand48; lcong48; lrand48; mrand48; nrand48; random; rand_r. void test() {; random(); // warn; }. security.insecureAPI.strcpy; (C); Warn on uses of the strcpy and strcat functions. void test() {; char x[4];; char *y = ""abcd"";. strcpy(x, y); // warn; }. security.insecureAPI.vfork; (C); Warn on uses of the vfork function. void test() {; vfork(); // warn; }. security.insecureAPI.decodeValueOfObjCType; (ObjC); Warn on uses of the -[NSCoder decodeValueOfObjCType:at:] method.; The safe alternative is -[NSCoder decodeValueOfObjCType:at:size:]. void test(NSCoder *decoder) {; // This would be a vulnerability on 64-bit platforms; // but not on 32-bit platforms.; NSUInteger x;; [decoder decodeValueOfObjCType:""I"" at:&x]; // warn; }. Unix Checkers. Name, DescriptionExample. unix.API; (C); Check calls to various UNIX/POSIX functions:; open; pthread_once; calloc; malloc; realloc; alloca. // Currently the check is performed for apple targets only.; void test(const char *path) {; int fd = open(path, O_CREAT);; // warn: call to 'open' requires a third argument when the; // 'O_CREAT' flag is set; }. void f();. void test() {; pthread_once_t pred = {0x30B1BCBA, {0}};; pthread_once(&pred, f);; // warn: call to 'pthread_once' uses the local variable; }. void test() {; void *p = malloc(0); // warn: allocation size of 0 bytes; }. void test() {; void *p = calloc(0, 42); // warn: allocation size of 0 bytes; }. void test() {; void *p = malloc(1);; p = realloc(p, 0); // warn: allocation size of 0 bytes; }. void test() {; void *p = alloca(0); // warn: allocation size of 0 bytes; }. void test() {; void *p",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:23061,test,test,23061,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"is presented in a; uniform manner with the rest of the passes being executed. There are many examples of ``Statistic`` uses, but the basics of using it are as; follows:. Define your statistic like this:. .. code-block:: c++. #define DEBUG_TYPE ""mypassname"" // This goes after any #includes.; STATISTIC(NumXForms, ""The # of times I did stuff"");. The ``STATISTIC`` macro defines a static variable, whose name is specified by; the first argument. The pass name is taken from the ``DEBUG_TYPE`` macro, and; the description is taken from the second argument. The variable defined; (""NumXForms"" in this case) acts like an unsigned integer. Whenever you make a transformation, bump the counter:. .. code-block:: c++. ++NumXForms; // I did stuff!. That's all you have to do. To get '``opt``' to print out the statistics; gathered, use the '``-stats``' option:. .. code-block:: none. $ opt -stats -mypassname < program.bc > /dev/null; ... statistics output ... Note that in order to use the '``-stats``' option, LLVM must be; compiled with assertions enabled. When running ``opt`` on a C file from the SPEC benchmark suite, it gives a; report that looks like this:. .. code-block:: none. 7646 bitcodewriter - Number of normal instructions; 725 bitcodewriter - Number of oversized instructions; 129996 bitcodewriter - Number of bitcode bytes written; 2817 raise - Number of insts DCEd or constprop'd; 3213 raise - Number of cast-of-self removed; 5046 raise - Number of expression trees converted; 75 raise - Number of other getelementptr's formed; 138 raise - Number of load/store peepholes; 42 deadtypeelim - Number of unused typenames removed from symtab; 392 funcresolve - Number of varargs functions resolved; 27 globaldce - Number of global variables removed; 2 adce - Number of basic blocks removed; 134 cee - Number of branches revectored; 49 cee - Number of setcc instruction eliminated; 532 gcse - Number of loads removed; 2919 gcse - Number of instructions removed; 86 indvars - Number of canonical in",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst:48086,assert,assertions,48086,interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,1,['assert'],['assertions']
Testability,"is sufficient for both of these is to harden all of the; speculative stores. However, as most stores aren't interesting and don't; inherently leak data, this is expected to be prohibitively expensive given the; attack it is defending against. ## Implementation Details. There are a number of complex details impacting the implementation of this; technique, both on a particular architecture and within a particular compiler.; We discuss proposed implementation techniques for the x86 architecture and the; LLVM compiler. These are primarily to serve as an example, as other; implementation techniques are very possible. ### x86 Implementation Details. On the x86 platform we break down the implementation into three core; components: accumulating the predicate state through the control flow graph,; checking the loads, and checking control transfers between procedures. #### Accumulating Predicate State. Consider baseline x86 instructions like the following, which test three; conditions and if all pass, loads data from memory and potentially leaks it; through some side channel:; ```; # %bb.0: # %entry; pushq %rax; testl %edi, %edi; jne .LBB0_4; # %bb.1: # %then1; testl %esi, %esi; jne .LBB0_4; # %bb.2: # %then2; testl %edx, %edx; je .LBB0_3; .LBB0_4: # %exit; popq %rax; retq; .LBB0_3: # %danger; movl (%rcx), %edi; callq leak; popq %rax; retq; ```. When we go to speculatively execute the load, we want to know whether any of; the dynamically executed predicates have been misspeculated. To track that,; along each conditional edge, we need to track the data which would allow that; edge to be taken. On x86, this data is stored in the flags register used by the; conditional jump instruction. Along both edges after this fork in control flow,; the flags register remains alive and contains data that we can use to build up; our accumulated predicate state. We accumulate it using the x86 conditional; move instruction which also reads the flag registers where the state resides.; These cond",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md:15166,test,test,15166,interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,1,['test'],['test']
Testability,"is trivially strongly connected. .. image:: ./loop-single.svg; :width: 300 px. In this case, the role of header, exiting block and latch fall to the; same node. :ref:`loopinfo` reports this as:. .. code-block:: console. $ opt input.ll -passes='print<loops>'; Loop at depth 1 containing: %for.body<header><latch><exiting>. * Loops can be nested inside each other. That is, a loop's node set can; be a subset of another loop with a different loop header. The loop; hierarchy in a function forms a forest: Each top-level loop is the; root of the tree of the loops nested inside it. .. image:: ./loop-nested.svg; :width: 350 px. * It is not possible that two loops share only a few of their nodes.; Two loops are either disjoint or one is nested inside the other. In; the example below the left and right subsets both violate the; maximality condition. Only the merge of both sets is considered a loop. .. image:: ./loop-nonmaximal.svg; :width: 250 px. * It is also possible that two logical loops share a header, but are; considered a single loop by LLVM:. .. code-block:: C. for (int i = 0; i < 128; ++i); for (int j = 0; j < 128; ++j); body(i,j);. which might be represented in LLVM-IR as follows. Note that there is; only a single header and hence just a single loop. .. image:: ./loop-merge.svg; :width: 400 px. The :ref:`LoopSimplify <loop-terminology-loop-simplify>` pass will; detect the loop and ensure separate headers for the outer and inner loop. .. image:: ./loop-separate.svg; :width: 400 px. * A cycle in the CFG does not imply there is a loop. The example below; shows such a CFG, where there is no header node that dominates all; other nodes in the cycle. This is called **irreducible control-flow**. .. image:: ./loop-irreducible.svg; :width: 150 px. The term reducible results from the ability to collapse the CFG into a; single node by successively replacing one of three base structures with; a single node: A sequential execution of basic blocks, acyclic conditional; branches (or sw",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LoopTerminology.rst:3836,log,logical,3836,interpreter/llvm-project/llvm/docs/LoopTerminology.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LoopTerminology.rst,1,['log'],['logical']
Testability,"isplay the discovered test suites at startup. Once a test suite is discovered, its config file is loaded. Config files; themselves are Python modules which will be executed. When the config file is; executed, two important global variables are predefined:. **lit_config**. The global **lit** configuration object (a *LitConfig* instance), which defines; the builtin test formats, global configuration parameters, and other helper; routines for implementing test configurations. **config**. This is the config object (a *TestingConfig* instance) for the test suite,; which the config file is expected to populate. The following variables are also; available on the *config* object, some of which must be set by the config and; others are optional or predefined:. **name** *[required]* The name of the test suite, for use in reports and; diagnostics. **test_format** *[required]* The test format object which will be used to; discover and run tests in the test suite. Generally this will be a builtin test; format available from the *lit.formats* module. **test_source_root** The filesystem path to the test suite root. For out-of-dir; builds this is the directory that will be scanned for tests. **test_exec_root** For out-of-dir builds, the path to the test suite root inside; the object directory. This is where tests will be run and temporary output files; placed. **environment** A dictionary representing the environment to use when executing; tests in the suite. **standalone_tests** When true, mark a directory with tests expected to be run; standalone. Test discovery is disabled for that directory. *lit.suffixes* and; *lit.excludes* must be empty when this variable is true. **suffixes** For **lit** test formats which scan directories for tests, this; variable is a list of suffixes to identify test files. Used by: *ShTest*. **substitutions** For **lit** test formats which substitute variables into a test; script, the list of substitutions to perform. Used by: *ShTest*. **unsupported** M",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:15735,test,test,15735,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"ist of macros in the *config-macros-declaration* is exhaustive, meaning that no other macro definition is intended to have an effect on the API of that module. .. note::. The ``exhaustive`` attribute implies that any macro definitions; for macros not listed as configuration macros should be ignored; completely when building the module. As an optimization, the; compiler could reduce the number of unique module variants by not; considering these non-configuration macros. This optimization is not; yet implemented in Clang. A translation unit shall not import the same module under different definitions of the configuration macros. .. note::. Clang implements a weak form of this requirement: the definitions; used for configuration macros are fixed based on the definitions; provided by the command line. If an import occurs and the definition; of any configuration macro has changed, the compiler will produce a; warning (under the control of ``-Wconfig-macros``). **Example:** A logging library might provide different API (e.g., in the form of different definitions for a logging macro) based on the ``NDEBUG`` macro setting:. .. parsed-literal::. module MyLogger {; umbrella header ""MyLogger.h""; config_macros [exhaustive] NDEBUG; }. Conflict declarations; ~~~~~~~~~~~~~~~~~~~~~; A *conflict-declaration* describes a case where the presence of two different modules in the same translation unit is likely to cause a problem. For example, two modules may provide similar-but-incompatible functionality. .. parsed-literal::. *conflict-declaration*:; ``conflict`` *module-id* ',' *string-literal*. The *module-id* of the *conflict-declaration* specifies the module with which the enclosing module conflicts. The specified module shall not have been imported in the translation unit when the enclosing module is imported. The *string-literal* provides a message to be provided as part of the compiler diagnostic when two modules conflict. .. note::. Clang emits a warning (under the control of ``-",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/Modules.rst:47945,log,logging,47945,interpreter/llvm-project/clang/docs/Modules.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/Modules.rst,1,['log'],['logging']
Testability,"isting test case, pass the `-u` option; which first checks the ``NOTE:`` line exists and matches the script name. Sometimes a test absolutely depends on hand-written assertions and should not; have assertions automatically generated. In that case, add the text ``NOTE: Do; not autogenerate`` to the first line, and the scripts will skip that test. It; is a good idea to explain why generated assertions will not work for the test; so future developers will understand what is going on. These are the most common scripts and their purposes/applications in generating; assertions:. .. code-block:: none. update_analyze_test_checks.py; opt -passes='print<cost-model>'. update_cc_test_checks.py; C/C++, or clang/clang++ (IR checks). update_llc_test_checks.py; llc (assembly checks). update_mca_test_checks.py; llvm-mca. update_mir_test_checks.py; llc (MIR checks). update_test_checks.py; opt. Precommit workflow for tests; ----------------------------. If the test does not crash, assert, or infinite loop, commit the test with; baseline check-lines first. That is, the test will show a miscompile or; missing optimization. Add a ""TODO"" or ""FIXME"" comment to indicate that; something is expected to change in a test. A follow-up patch with code changes to the compiler will then show check-line; differences to the tests, so it is easier to see the effect of the patch.; Remove TODO/FIXME comments added in the previous step if a problem is solved. Baseline tests (no-functional-change or NFC patch) may be pushed to main; without pre-commit review if you have commit access. Best practices for regression tests; -----------------------------------. - Use auto-generated check lines (produced by the scripts mentioned above); whenever feasible.; - Include comments about what is tested/expected in a particular test. If there; are relevant issues in the bug tracker, add references to those bug reports; (for example, ""See PR999 for more details"").; - Avoid undefined behavior and poison/undef values unl",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:12772,test,test,12772,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,3,"['assert', 'test']","['assert', 'test']"
Testability,istogram.; The tutorial `tutorials/multicore/mt304_fillHistos.C` gives an example of how to use the functionality with; `TThreadedObject<TH1D>` . The `power-2` binning is currently available only for 1D histograms. ## Math Libraries; - The Fitting functions now support vectorization and parallelization.; - Added padding in the fit data classes for correct loading of SIMD arrays. ## RooFit Libraries. - Apply several fixes from the ATLAS Higgs combination branch of RooFit. These fixes include; - fix for computing the contraint normalization. This requires now the option GlobalObservables when creating the NLL.; - All the `RooAbsPdf::createNLL` used in The RooStats classes have been updated to include the `GlobalObservables` option.; - Remove the `Roo1DMomentMorphFunction` and replace it with `RooMomentMorphFunction` and `RooMomentMorphFunctionND`. ## TMVA Library. - Improvement and fixes in ROCCurve class.; - Add support for event weights in the DNN; - Add in the DNN the option to use a validation data set independent of the training/test set used for training the DNN.; - Add option to suppress correlation outputs; - Improvements in the support for multi-class classification.; - Improvements in the Gradient Boostig Trees; - Deprecate the TMVA DNN Reference Implementation. Support now only CPU and GPU implementations. . ## 2D Graphics Libraries; - The method TColor::InvertPalette inverts the current palette. The top color becomes; bottom and vice versa. This was [suggested by Karl Smith](https://root-forum.cern.ch/t/inverted-color-palettes/24826/2).; - New method `TColor::SetColorThreshold(Float_t t)` to specify the color; threshold used by GetColor to retrieve a color.; - Improvements in candle plots:; - LogZ for violins; - scaling of candles and violins with respect to each other; - static functions for WhiskerRange and BoxRange; - In some case it was not possible to zoom a 1D histogram using the mouse; on the X axis. This was described; [here](https://root-forum.cer,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v612/index.md:19045,test,test,19045,README/ReleaseNotes/v612/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v612/index.md,1,['test'],['test']
Testability,"it --version; lit 0.8.0dev; ```. An alternative is installing it as a python package in a python virtual; environment:. ```bash; % mkdir venv; % virtualenv venv; % . venv/bin/activate; % pip install svn+https://llvm.org/svn/llvm-project/llvm/trunk/utils/lit; % lit --version; lit 0.8.0dev; ```. 2. Check out the `test-suite` module with:. ```bash; % git clone https://github.com/llvm/llvm-test-suite.git test-suite; ```. 3. Create a build directory and use CMake to configure the suite. Use the; `CMAKE_C_COMPILER` option to specify the compiler to test. Use a cache file; to choose a typical build configuration:. ```bash; % mkdir test-suite-build; % cd test-suite-build; % cmake -DCMAKE_C_COMPILER=<path to llvm build>/bin/clang \; -C../test-suite/cmake/caches/O3.cmake \; ../test-suite; ```. **NOTE!** if you are using your built clang, and you want to build and run the; MicroBenchmarks/XRay microbenchmarks, you need to add `compiler-rt` to your; `LLVM_ENABLE_RUNTIMES` cmake flag. 4. Build the benchmarks:. ```text; % make; Scanning dependencies of target timeit-target; [ 0%] Building C object tools/CMakeFiles/timeit-target.dir/timeit.c.o; [ 0%] Linking C executable timeit-target; ...; ```. 5. Run the tests with lit:. ```text; % llvm-lit -v -j 1 -o results.json .; -- Testing: 474 tests, 1 threads --; PASS: test-suite :: MultiSource/Applications/ALAC/decode/alacconvert-decode.test (1 of 474); ********** TEST 'test-suite :: MultiSource/Applications/ALAC/decode/alacconvert-decode.test' RESULTS **********; compile_time: 0.2192; exec_time: 0.0462; hash: ""59620e187c6ac38b36382685ccd2b63b""; size: 83348; **********; PASS: test-suite :: MultiSource/Applications/ALAC/encode/alacconvert-encode.test (2 of 474); ...; ```. 6. Show and compare result files (optional):. ```bash; # Make sure pandas and scipy are installed. Prepend `sudo` if necessary.; % pip install pandas scipy; # Show a single result file:; % test-suite/utils/compare.py results.json; # Compare two result files:; % test-suite",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:1200,benchmark,benchmarks,1200,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['benchmark'],['benchmarks']
Testability,"it directly. This means, there is no difference between JIT; compiled code and native machine code that is statically linked into your; application. Finally, since we don't support re-evaluation of top-level expressions, we; remove the module from the JIT when we're done to free the associated memory.; Recall, however, that the module we created a few lines earlier (via; ``InitializeModuleAndPassManager``) is still open and waiting for new code to be; added. With just these two changes, let's see how Kaleidoscope works now!. ::. ready> 4+5;; Read top-level expression:; define double @0() {; entry:; ret double 9.000000e+00; }. Evaluated to 9.000000. Well this looks like it is basically working. The dump of the function; shows the ""no argument function that always returns double"" that we; synthesize for each top-level expression that is typed in. This; demonstrates very basic functionality, but can we do more?. ::. ready> def testfunc(x y) x + y*2;; Read function definition:; define double @testfunc(double %x, double %y) {; entry:; %multmp = fmul double %y, 2.000000e+00; %addtmp = fadd double %multmp, %x; ret double %addtmp; }. ready> testfunc(4, 10);; Read top-level expression:; define double @1() {; entry:; %calltmp = call double @testfunc(double 4.000000e+00, double 1.000000e+01); ret double %calltmp; }. Evaluated to 24.000000. ready> testfunc(5, 10);; ready> LLVM ERROR: Program used external function 'testfunc' which could not be resolved!. Function definitions and calls also work, but something went very wrong on that; last line. The call looks valid, so what happened? As you may have guessed from; the API a Module is a unit of allocation for the JIT, and testfunc was part; of the same module that contained anonymous expression. When we removed that; module from the JIT to free the memory for the anonymous expression, we deleted; the definition of ``testfunc`` along with it. Then, when we tried to call; testfunc a second time, the JIT could no longer find it. The",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl04.rst:15784,test,testfunc,15784,interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl04.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl04.rst,2,['test'],['testfunc']
Testability,"it doesn't know the exact value of b; }; return 1000 << 31; // warn: this overflows the capacity of 'int'; }. **Solution**. Ensure the shift operands are in proper range before shifting. .. _core-CallAndMessage:. core.CallAndMessage (C, C++, ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for logical errors for function calls and Objective-C message expressions (e.g., uninitialized arguments, null function pointers). .. literalinclude:: checkers/callandmessage_example.c; :language: objc. .. _core-DivideZero:. core.DivideZero (C, C++, ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for division by zero. .. literalinclude:: checkers/dividezero_example.c; :language: c. .. _core-NonNullParamChecker:. core.NonNullParamChecker (C, C++, ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for null pointers passed as arguments to a function whose arguments are references or marked with the 'nonnull' attribute. .. code-block:: cpp. int f(int *p) __attribute__((nonnull));. void test(int *p) {; if (!p); f(p); // warn; }. .. _core-NullDereference:. core.NullDereference (C, C++, ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for dereferences of null pointers. This checker specifically does; not report null pointer dereferences for x86 and x86-64 targets when the; address space is 256 (x86 GS Segment), 257 (x86 FS Segment), or 258 (x86 SS; segment). See `X86/X86-64 Language Extensions; <https://clang.llvm.org/docs/LanguageExtensions.html#memory-references-to-specified-segments>`__; for reference. The ``SuppressAddressSpaces`` option suppresses; warnings for null dereferences of all pointers with address spaces. You can; disable this behavior with the option; ``-analyzer-config core.NullDereference:SuppressAddressSpaces=false``.; *Defaults to true*. .. code-block:: objc. // C; void test(int *p) {; if (p); return;. int x = p[0]; // warn; }. // C; void test(int *p) {; if (!p); *p = 0; // warn; }. // C++; class C {; public:; int x;; };. void test() {; C *pc = 0;; int k = pc->x; // ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:3497,test,test,3497,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"it type:. ``` {.cpp}; $ cd $ROOTSYS/tutorials; $ root; -------------------------------------------------------------------------; | Welcome to ROOT 6.10/01 http://root.cern.ch |; | (c) 1995-2017, The ROOT Team |; | Built for macosx64 |; | From heads/v6-10-00-patches@v6-10-00-25-g9f78c3a, Jul 03 2017, 11:39:44 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; -------------------------------------------------------------------------. root [0] .x hsimple.C; ```. Now execute `demos.C`, which brings up the button bar shown on the left.; You can click on any button to execute another example. To see the; source, open the corresponding source file (for example `fit1.C`). Once; you are done, and want to quit the ROOT session, you can do so by typing; **`.q`**. ``` {.cpp}; root[] .x demos.C; root[] .q; ```. ## \$ROOTSYS/test. The test directory contains a set of examples that represent all areas; of the framework. When a new release is cut, the examples in this; directory are compiled and run to test the new release's backward; compatibility. We see these source files:. +-------------------+--------------------------------------------------------+; | `Makefile` | Makefile to build all test programs. |; +-------------------+--------------------------------------------------------+; | `hsimple.cxx` | Simple test program that creates and saves some |; | | histograms |; +-------------------+--------------------------------------------------------+; | `MainEvent.cxx` | Simple test program that creates a ROOT Tree object |; | | and fills it with some simple structures but also with |; | | complete histograms. This program uses the files |; | | `Event.cxx`, `EventCint.cxx` and `Event.h`. An example |; | | of a procedure to link this program is in |; | | `bind_Event`. Note that the `Makefile` invokes the |; | | `rootcling` utility to generate the Cling interface |; | | `EventCint.cxx` |; +-------------------+--------------------------------------------------------+; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/TutorialsandTests.md:1674,test,test,1674,documentation/users-guide/TutorialsandTests.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/TutorialsandTests.md,1,['test'],['test']
Testability,"it. This document describes what you can do to increase the odds of; getting it fixed quickly. 🔒 If you believe that the bug is security related, please follow :ref:`report-security-issue`. 🔒. Basically you have to do two things at a minimum. First, decide whether the; bug `crashes the compiler`_ or if the compiler is `miscompiling`_ the program; (i.e., the compiler successfully produces an executable, but it doesn't run; right). Based on what type of bug it is, follow the instructions in the; linked section to narrow down the bug so that the person who fixes it will be; able to find the problem more easily. Once you have a reduced test-case, go to `the LLVM Bug Tracking System; <https://github.com/llvm/llvm-project/issues>`_ and fill out the form with the; necessary details (note that you don't need to pick a label, just use if you're; not sure). The bug description should contain the following information:. * All information necessary to reproduce the problem.; * The reduced test-case that triggers the bug.; * The location where you obtained LLVM (if not from our Git; repository). Thanks for helping us make LLVM better!. .. _crashes the compiler:. Crashing Bugs; =============. More often than not, bugs in the compiler cause it to crash---often due to; an assertion failure of some sort. The most important piece of the puzzle; is to figure out if it is crashing in the Clang front-end or if it is one of; the LLVM libraries (e.g. the optimizer or code generator) that has; problems. To figure out which component is crashing (the front-end, middle-end; optimizer, or backend code generator), run the ``clang`` command line as you; were when the crash occurred, but with the following extra command line; options:. * ``-emit-llvm -Xclang -disable-llvm-passes``: If ``clang`` still crashes when; passed these options (which disable the optimizer and code generator), then; the crash is in the front-end. Jump ahead to :ref:`front-end bugs; <frontend-crash>`. * ``-emit-llvm``: If ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst:1228,test,test-case,1228,interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst,1,['test'],['test-case']
Testability,"it.cfg``.; String comparison of features is case-sensitive. Furthermore, a boolean expression can; contain any Python regular expression enclosed in ``{{ }}``, in which case the boolean; expression is satisfied if any feature matches the regular expression. Regular; expressions can appear inside an identifier, so for example ``he{{l+}}o`` would match; ``helo``, ``hello``, ``helllo``, and so on.; - The default target triple, preceded by the string ``target=`` (for example,; ``target=x86_64-pc-windows-msvc``). Typically regular expressions are used; to match parts of the triple (for example, ``target={{.*}}-windows{{.*}}``; to match any Windows target triple). | ``REQUIRES`` enables the test if all expressions are true.; | ``UNSUPPORTED`` disables the test if any expression is true.; | ``XFAIL`` expects the test to fail if any expression is true. As a special case, ``XFAIL: *`` is expected to fail everywhere. .. code-block:: llvm. ; This test is disabled when running on Windows,; ; and is disabled when targeting Linux, except for Android Linux.; ; UNSUPPORTED: system-windows, target={{.*linux.*}} && !target={{.*android.*}}; ; This test is expected to fail when targeting PowerPC or running on Darwin.; ; XFAIL: target=powerpc{{.*}}, system-darwin. Tips for writing constraints; ----------------------------. **``REQUIRES`` and ``UNSUPPORTED``**. These are logical inverses. In principle, ``UNSUPPORTED`` isn't absolutely; necessary (the logical negation could be used with ``REQUIRES`` to get; exactly the same effect), but it can make these clauses easier to read and; understand. Generally, people use ``REQUIRES`` to state things that the test; depends on to operate correctly, and ``UNSUPPORTED`` to exclude cases where; the test is expected never to work. **``UNSUPPORTED`` and ``XFAIL``**. Both of these indicate that the test isn't expected to work; however, they; have different effects. ``UNSUPPORTED`` causes the test to be skipped;; this saves execution time, but then you'",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:21442,test,test,21442,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"it.formats* module. **test_source_root** The filesystem path to the test suite root. For out-of-dir; builds this is the directory that will be scanned for tests. **test_exec_root** For out-of-dir builds, the path to the test suite root inside; the object directory. This is where tests will be run and temporary output files; placed. **environment** A dictionary representing the environment to use when executing; tests in the suite. **standalone_tests** When true, mark a directory with tests expected to be run; standalone. Test discovery is disabled for that directory. *lit.suffixes* and; *lit.excludes* must be empty when this variable is true. **suffixes** For **lit** test formats which scan directories for tests, this; variable is a list of suffixes to identify test files. Used by: *ShTest*. **substitutions** For **lit** test formats which substitute variables into a test; script, the list of substitutions to perform. Used by: *ShTest*. **unsupported** Mark an unsupported directory, all tests within it will be; reported as unsupported. Used by: *ShTest*. **parent** The parent configuration, this is the config object for the directory; containing the test suite, or None. **root** The root configuration. This is the top-most :program:`lit` configuration in; the project. **pipefail** Normally a test using a shell pipe fails if any of the commands; on the pipe fail. If this is not desired, setting this variable to false; makes the test fail only if the last command in the pipe fails. **available_features** A set of features that can be used in `XFAIL`,; `REQUIRES`, and `UNSUPPORTED` directives. TEST DISCOVERY; ~~~~~~~~~~~~~~. Once test suites are located, :program:`lit` recursively traverses the source; directory (following *test_source_root*) looking for tests. When :program:`lit`; enters a sub-directory, it first checks to see if a nested test suite is; defined in that directory. If so, it loads that test suite recursively,; otherwise it instantiates a local test confi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:16771,test,tests,16771,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['tests']
Testability,"itABug`. Design Philosophy; =================. ``bugpoint`` is designed to be a useful tool without requiring any hooks into; the LLVM infrastructure at all. It works with any and all LLVM passes and code; generators, and does not need to ""know"" how they work. Because of this, it may; appear to do stupid things or miss obvious simplifications. ``bugpoint`` is; also designed to trade off programmer time for computer time in the; compiler-debugging process; consequently, it may take a long period of; (unattended) time to reduce a test case, but we feel it is still worth it. Note; that ``bugpoint`` is generally very quick unless debugging a miscompilation; where each test of the program (which requires executing it) takes a long time. Automatic Debugger Selection; ----------------------------. ``bugpoint`` reads each ``.bc`` or ``.ll`` file specified on the command line; and links them together into a single module, called the test program. If any; LLVM passes are specified on the command line, it runs these passes on the test; program. If any of the passes crash, or if they produce malformed output (which; causes the verifier to abort), ``bugpoint`` starts the `crash debugger`_. Otherwise, if the ``-output`` option was not specified, ``bugpoint`` runs the; test program with the ""safe"" backend (which is assumed to generate good code) to; generate a reference output. Once ``bugpoint`` has a reference output for the; test program, it tries executing it with the selected code generator. If the; selected code generator crashes, ``bugpoint`` starts the `crash debugger`_ on; the code generator. Otherwise, if the resulting output differs from the; reference output, it assumes the difference resulted from a code generator; failure, and starts the `code generator debugger`_. Finally, if the output of the selected code generator matches the reference; output, ``bugpoint`` runs the test program after all of the LLVM passes have; been applied to it. If its output differs from the ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst:1851,test,test,1851,interpreter/llvm-project/llvm/docs/Bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst,1,['test'],['test']
Testability,itCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(s,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4791,test,testTestStatisticsPlot,4791,roofit/roofitcore/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt,2,['test'],"['testPlot', 'testTestStatisticsPlot']"
Testability,"itVector, but it is; optimized for the case where only a small number of bits, less than 25 or so,; are needed. It also transparently supports larger bit counts, but slightly less; efficiently than a plain BitVector, so SmallBitVector should only be used when; larger counts are rare. At this time, SmallBitVector does not support set operations (and, or, xor), and; its operator[] does not provide an assignable lvalue. .. _dss_sparsebitvector:. SparseBitVector; ^^^^^^^^^^^^^^^. The SparseBitVector container is much like BitVector, with one major difference:; Only the bits that are set, are stored. This makes the SparseBitVector much; more space efficient than BitVector when the set is sparse, as well as making; set operations O(number of set bits) instead of O(size of universe). The; downside to the SparseBitVector is that setting and testing of random bits is; O(N), and on large SparseBitVectors, this can be slower than BitVector. In our; implementation, setting or testing bits in sorted order (either forwards or; reverse) is O(1) worst case. Testing and setting bits within 128 bits (depends; on size) of the current bit is also O(1). As a general statement,; testing/setting bits in a SparseBitVector is O(distance away from last set bit). .. _dss_coalescingbitvector:. CoalescingBitVector; ^^^^^^^^^^^^^^^^^^^. The CoalescingBitVector container is similar in principle to a SparseBitVector,; but is optimized to represent large contiguous ranges of set bits compactly. It; does this by coalescing contiguous ranges of set bits into intervals. Searching; for a bit in a CoalescingBitVector is O(log(gaps between contiguous ranges)). CoalescingBitVector is a better choice than BitVector when gaps between ranges; of set bits are large. It's a better choice than SparseBitVector when find(); operations must have fast, predictable performance. However, it's not a good; choice for representing sets which have lots of very short ranges. E.g. the set; `{2*x : x \in [0, n)}` would be a",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst:98482,test,testing,98482,interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,1,['test'],['testing']
Testability,it_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Common/default-kinds.h; flang/include/flang/Common/enum-set.h; flang/include/flang/Common/fast-int-set.h; flang/include/flang/Common/format.h; flang/include/flang/Common/Fortran-features.h; flang/include/flang/Common/Fortran.h; flang/include/flang/Common/idioms.h; flang/include/flang/Common/indirection.h; flang/include/flang/Common/interval.h; flang/include/flang/Common/leading-zero-bit-count.h; flang/include/flang/Common/long-double.h; flang/include/f,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:108017,test,tests,108017,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,3,['test'],['tests']
Testability,"ite MIR tests that invoke a single code generation pass using the; ``-run-pass`` option in llc. - You can use llc's ``-stop-after`` option with existing or new LLVM assembly; tests and check the MIR output of a specific code generation pass. Testing Individual Code Generation Passes; -----------------------------------------. The ``-run-pass`` option in llc allows you to create MIR tests that invoke just; a single code generation pass. When this option is used, llc will parse an; input MIR file, run the specified code generation pass(es), and output the; resulting MIR code. You can generate an input MIR file for the test by using the ``-stop-after`` or; ``-stop-before`` option in llc. For example, if you would like to write a test; for the post register allocation pseudo instruction expansion pass, you can; specify the machine copy propagation pass in the ``-stop-after`` option, as it; runs just before the pass that we are trying to test:. ``llc -stop-after=machine-cp bug-trigger.ll -o test.mir``. If the same pass is run multiple times, a run index can be included; after the name with a comma. ``llc -stop-after=dead-mi-elimination,1 bug-trigger.ll -o test.mir``. After generating the input MIR file, you'll have to add a run line that uses; the ``-run-pass`` option to it. In order to test the post register allocation; pseudo instruction expansion pass on X86-64, a run line like the one shown; below can be used:. ``# RUN: llc -o - %s -mtriple=x86_64-- -run-pass=postrapseudos | FileCheck %s``. The MIR files are target dependent, so they have to be placed in the target; specific test directories (``lib/CodeGen/TARGETNAME``). They also need to; specify a target triple or a target architecture either in the run line or in; the embedded LLVM IR module. Simplifying MIR files; ^^^^^^^^^^^^^^^^^^^^^. The MIR code coming out of ``-stop-after``/``-stop-before`` is very verbose;; Tests are more accessible and future proof when simplified:. - Use the ``-simplify-mir`` option with l",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MIRLangRef.rst:2190,test,test,2190,interpreter/llvm-project/llvm/docs/MIRLangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MIRLangRef.rst,1,['test'],['test']
Testability,"ite for reviewers to do so. Don't Unintentionally Block a Review; ------------------------------------. If you review a patch, but don't intend for the review process to block on your; approval, please state that explicitly. Out of courtesy, we generally wait on; committing a patch until all reviewers are satisfied, and if you don't intend; to look at the patch again in a timely fashion, please communicate that fact in; the review. Who Can/Should Review Code?; ===========================. Non-Experts Should Review Code; ------------------------------. You do not need to be an expert in some area of the code base to review patches;; it's fine to ask questions about what some piece of code is doing. If it's not; clear to you what is going on, you're unlikely to be the only one. Please; remember that it is not in the long-term best interest of the community to have; components that are only understood well by a small number of people. Extra; comments and/or test cases can often help (and asking for comments in the test; cases is fine as well). Moreover, authors are encouraged to interpret questions as a reason to reexamine; the readability of the code in question. Structural changes, or further; comments, may be appropriate. If you're new to the LLVM community, you might also find this presentation helpful:; .. _How to Contribute to LLVM, A 2019 LLVM Developers' Meeting Presentation: https://youtu.be/C5Y977rLqpw. A good way for new contributors to increase their knowledge of the code base is; to review code. It is perfectly acceptable to review code and explicitly; defer to others for approval decisions. Experts Should Review Code; --------------------------. If you are an expert in an area of the compiler affected by a proposed patch,; then you are highly encouraged to review the code. If you are a relevant code; owner, and no other experts are reviewing a patch, you must either help arrange; for an expert to review the patch or review it yourself. Code Reviews, Speed,",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodeReview.rst:10307,test,test,10307,interpreter/llvm-project/llvm/docs/CodeReview.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodeReview.rst,2,['test'],['test']
Testability,"ite. **XPASS**. The test succeeded, but it was expected to fail. This is used for tests which; were specified as expected to fail, but are now succeeding (generally because; the feature they test was broken and has been fixed). **FAIL**. The test failed. **UNRESOLVED**. The test result could not be determined. For example, this occurs when the test; could not be run, the test itself is invalid, or the test was interrupted. **UNSUPPORTED**. The test is not supported in this environment. This is used by test formats; which can report unsupported tests. **TIMEOUT**. The test was run, but it timed out before it was able to complete. This is; considered a failure. Depending on the test format tests may produce additional information about; their status (generally only for failures). See the :ref:`output-options`; section for more information. .. _lit-infrastructure:. LIT INFRASTRUCTURE; ------------------. This section describes the :program:`lit` testing architecture for users interested in; creating a new :program:`lit` testing implementation, or extending an existing one. :program:`lit` proper is primarily an infrastructure for discovering and running; arbitrary tests, and to expose a single convenient interface to these; tests. :program:`lit` itself doesn't know how to run tests, rather this logic is; defined by *test suites*. TEST SUITES; ~~~~~~~~~~~. As described in :ref:`test-discovery`, tests are always located inside a *test; suite*. Test suites serve to define the format of the tests they contain, the; logic for finding those tests, and any additional information to run the tests. :program:`lit` identifies test suites as directories containing ``lit.cfg`` or; ``lit.site.cfg`` files (see also :option:`--config-prefix`). Test suites are; initially discovered by recursively searching up the directory hierarchy for; all the input files passed on the command line. You can use; :option:`--show-suites` to display the discovered test suites at startup. Once a test suit",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:13755,test,testing,13755,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,2,['test'],['testing']
Testability,"iteSpaceOrCComment: `WhiteSpace` | `CComment`; WhiteSpaceOrAnyComment: `WhiteSpace` | `CComment` | `BCPLComment`; MacroName: `ualpha` (`ualpha` | ""0""...""9"")*; PreDefine: `LineBegin` (`WhiteSpaceOrCComment`)*; : ""#define"" (`WhiteSpace`)+ `MacroName`; : (`WhiteSpaceOrAnyComment`)* `LineEnd`; PreIfdef: `LineBegin` (`WhiteSpaceOrCComment`)*; : (""#ifdef"" | ""#ifndef"") (`WhiteSpace`)+ `MacroName`; : (`WhiteSpaceOrAnyComment`)* `LineEnd`; PreElse: `LineBegin` (`WhiteSpaceOrCComment`)*; : ""#else"" (`WhiteSpaceOrAnyComment`)* `LineEnd`; PreEndif: `LineBegin` (`WhiteSpaceOrCComment`)*; : ""#endif"" (`WhiteSpaceOrAnyComment`)* `LineEnd`. ..; PreRegContentException: `PreIfdef` | `PreElse` | `PreEndif` | EOF; PreRegion: .* - `PreRegContentException`; :| `PreIfdef`; : (`PreRegion`)*; : [`PreElse`]; : (`PreRegion`)*; : `PreEndif`. A :token:`MacroName` can be defined anywhere in a TableGen file. The name has; no value; it can only be tested to see whether it is defined. A macro test region begins with an ``#ifdef`` or ``#ifndef`` directive. If; the macro name is defined (``#ifdef``) or undefined (``#ifndef``), then the; source code between the directive and the corresponding ``#else`` or; ``#endif`` is processed. If the test fails but there is an ``#else``; clause, the source code between the ``#else`` and the ``#endif`` is; processed. If the test fails and there is no ``#else`` clause, then no; source code in the test region is processed. Test regions may be nested, but they must be properly nested. A region; started in a file must end in that file; that is, must have its; ``#endif`` in the same file. A :token:`MacroName` may be defined externally using the ``-D`` option on the; ``*-tblgen`` command line::. llvm-tblgen self-reference.td -Dmacro1 -Dmacro3. Appendix A: Bang Operators; ==========================. Bang operators act as functions in value expressions. A bang operator takes; one or more arguments, operates on them, and produces a result. If the; operator produces a boolean ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:57960,test,test,57960,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,1,['test'],['test']
Testability,"item name with `&optfile=[1,2,3]` URL parameters; 3. Let define date and file name position with `&datex=0.03&datey=0.03` URL parameters; 4. Improve TRatioPlot axis and lines drawing; 5. Use localStorage to preserve custom settings and gStyle; 6. Let configure custom storage prefix with `&storage_prefix=name` URL #290; 7. Let customize URL for ""Show in new tab"" menu command; 8. Support both new and old TRatioPlot drawings; 10. Synchronize X/Y range selection with native ROOT; 11. Proper handle attributes from TH2Poly bins, support ""p"" for markers drawing; 12. Correctly scale size of axis ticks - take into account NDC axis length; 13. Set name and userData in geometry `build()` function #303; 14. Draw histogram title afterwards - place in front of stats box; 15. Upgrade three.js r158 -> r162, last with WebGL1 support; 16. Split extras into three_addons.mjs, provide jsroot geometry build without three.js; 17. Fix - correctly draw only grids with AXIG draw option; 18. Fix - log scales on TH3 drawings #306; 19. Fix - draw geometry top node volume if all childs not visible #308; 20. Fix - properly process 206 server response without Accept-Ranges header https://root-forum.cern.ch/t/59426/. ## Changes in 7.6.1; 1. Remove source_dir output in node.js #296; 2. Fully integrate svg2pdf.js into jsroot repo; 3. Fix - support plain TRI option for TGraph2D; 4. Fix - let read object from ROOT file with empty name; 5. Fix - graph drawing fix custom labels on X axis #297; 6. Fix - draw at least line for TGraphErrors ROOT-8131; 7. Fix - preserve attributes and draw options when call drawingJSON() #307; 8. Fix - menu for text align selection typo. ## Changes in 7.6.0; 1. Implement ""tickz"" draw option, used for color palette ticks; 2. Implement skewness and kurtosis calculations for histogram stats box; 3. Introduce ""logv"" draw option for `TH3`, configures logarithmic scale for box volume; 4. Implement color palette drawing for `TH3`; 5. Implement cutg draw option for `TH2`/`TF2` surfac",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/changes.md:5164,log,log,5164,js/changes.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/changes.md,1,['log'],['log']
Testability,"items:; - with Shift key typically object inspector will be activated; - with Ctrl key alternative draw options will be used (like colz for TH2); 9. Update libraries; - d3.js - 4.4.4; - three.js - 84; - jquery - 3.3.1; - jquery-ui - 1.12.1. ## Changes in 4.8.2; 1. Support compressed array, produced with newest TBufferJSON; - $arr field identify such array and contains data type; - native arrays are used when decoding such array; - zero values are not stored; - many similar values stored as one with repetition factor; - position stored only when differ from produced with previous block; - array [3,3,3,3,3,3,1,2,2,2,2,2,2,2] compressed as {$arr:""Int"",len:14,v:3,n:6,v1:1,v2:2,n2:7}. ## Changes in 4.8.1; 1. Support new JSON format, produced with newest TBufferJSON; - object references stored as {""$ref"":12}; - pair objects for std::map marked with ""$pair"" : ""pair<type1,type2>"" data member; - old JSON format will be recognized automatically and supported as well; 2. Fix - better selection of Y range for log scale; 3. Provide JSROOT.parse_multi function to correctly parse response of multi.json request,; support it in the JSROOT.NewHttpRequest method as well.; 4. Fix - correctly calculate integral for TH1; 5. Partially support new TFormula with complex C code inside. ## Changes in 4.8.0; 1. Many improvements in the I/O part; - support most of STL containers; - support TMap and TClonesArray containers; - all kind of multidimensional arrays; - correct treatment of foreign classes; - supports different versions of class in the same file; - support members like ClassName* fField; //[fCnt]; - support const char*; - support fixed-size array of TString, TObject and TNamed; 2. Many new draw options for different classes are supported:; - TGraph - 'z', 'x', '||', '[]', '>', '|>', '5', 'X+', 'Y+'; - TH1 - '*', 'L', 'LF2', 'B', 'B1', 'TEXT', 'E0', 'E3', 'E4', 'EX0', 'X+', 'Y+'; - TH2 - 'E', 'col1', 'box', 'box1', 'surf3', 'surf7', 'base0'; - TH2 - 'same' with 'box', 'col', 'cont', 'l",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/changes.md:49246,log,log,49246,js/changes.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/changes.md,1,['log'],['log']
Testability,"iterations.*``' intrinsics, used to specify the; hardware-loop trip count but also produce a value identical to the input; that can be used as the input to the loop. They are placed in the loop; preheader basic block and the output is expected to be the input to the; phi for the induction variable of the loop, decremented by the; '``llvm.loop.decrement.reg.*``'. Arguments:; """""""""""""""""""". The integer operand is the loop trip count of the hardware-loop, and thus; not e.g. the loop back-edge taken count. Semantics:; """""""""""""""""""". The '``llvm.start.loop.iterations.*``' intrinsics do not perform any arithmetic; on their operand. It's a hint to the backend that can use this to set up the; hardware-loop count with a target specific instruction, usually a move of this; value to a special register or a hardware-loop instruction. '``llvm.test.set.loop.iterations.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. ::. declare i1 @llvm.test.set.loop.iterations.i32(i32); declare i1 @llvm.test.set.loop.iterations.i64(i64). Overview:; """""""""""""""""". The '``llvm.test.set.loop.iterations.*``' intrinsics are used to specify the; the loop trip count, and also test that the given count is not zero, allowing; it to control entry to a while-loop. They are placed in the loop preheader's; predecessor basic block, and are marked as ``IntrNoDuplicate`` to avoid; optimizers duplicating these instructions. Arguments:; """""""""""""""""""". The integer operand is the loop trip count of the hardware-loop, and thus; not e.g. the loop back-edge taken count. Semantics:; """""""""""""""""""". The '``llvm.test.set.loop.iterations.*``' intrinsics do not perform any; arithmetic on their operand. It's a hint to the backend that can use this to; set up the hardware-loop count with a target specific instruction, usually a; move of this value to a special register or a hardware-loop instruction.; The result is the conditional value of whether the given count is not zero. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:645406,test,test,645406,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"ith different instructions. For example, we can generate; ""vsplti -1"" with ""vcmpequw R,R"" and 1,1,1,1 with ""vsubcuw R,R"", and 0,0,0,0 with; ""vsplti 0"" or ""vxor"", each of which use different execution units, thus could; help scheduling. This is probably only reasonable for a post-pass scheduler. //===----------------------------------------------------------------------===//. For this function:. void test(vector float *A, vector float *B) {; vector float C = (vector float)vec_cmpeq(*A, *B);; if (!vec_any_eq(*A, *B)); *B = (vector float){0,0,0,0};; *A = C;; }. we get the following basic block:. 	...; lvx v2, 0, r4; lvx v3, 0, r3; vcmpeqfp v4, v3, v2; vcmpeqfp. v2, v3, v2; bne cr6, LBB1_2 ; cond_next. The vcmpeqfp/vcmpeqfp. instructions currently cannot be merged when the; vcmpeqfp. result is used by a branch. This can be improved. //===----------------------------------------------------------------------===//. The code generated for this is truly aweful:. vector float test(float a, float b) {; return (vector float){ 0.0, a, 0.0, 0.0}; ; }. LCPI1_0: ; float; .space 4; .text; .globl _test; .align 4; _test:; mfspr r2, 256; oris r3, r2, 4096; mtspr 256, r3; lis r3, ha16(LCPI1_0); addi r4, r1, -32; stfs f1, -16(r1); addi r5, r1, -16; lfs f0, lo16(LCPI1_0)(r3); stfs f0, -32(r1); lvx v2, 0, r4; lvx v3, 0, r5; vmrghw v3, v3, v2; vspltw v2, v2, 0; vmrghw v2, v2, v3; mtspr 256, r2; blr. //===----------------------------------------------------------------------===//. int foo(vector float *x, vector float *y) {; if (vec_all_eq(*x,*y)) return 3245; ; else return 12;; }. A predicate compare being used in a select_cc should have the same peephole; applied to it as a predicate compare used by a br_cc. There should be no; mfcr here:. _foo:; mfspr r2, 256; oris r5, r2, 12288; mtspr 256, r5; li r5, 12; li r6, 3245; lvx v2, 0, r4; lvx v3, 0, r3; vcmpeqfp. v2, v3, v2; mfcr r3, 2; rlwinm r3, r3, 25, 31, 31; cmpwi cr0, r3, 0; bne cr0, LBB1_2 ; entry; LBB1_1: ; entry; mr r6, r5; LBB1_2: ; e",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/README_ALTIVEC.txt:3642,test,test,3642,interpreter/llvm-project/llvm/lib/Target/PowerPC/README_ALTIVEC.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/README_ALTIVEC.txt,1,['test'],['test']
Testability,"ith mutable variables. The short (and happy) summary of this chapter is that there is no need; for your front-end to build SSA form: LLVM provides highly tuned and; well tested support for this, though the way it works is a bit; unexpected for some. Why is this a hard problem?; ===========================. To understand why mutable variables cause complexities in SSA; construction, consider this extremely simple C example:. .. code-block:: c. int G, H;; int test(_Bool Condition) {; int X;; if (Condition); X = G;; else; X = H;; return X;; }. In this case, we have the variable ""X"", whose value depends on the path; executed in the program. Because there are two different possible values; for X before the return instruction, a PHI node is inserted to merge the; two values. The LLVM IR that we want for this example looks like this:. .. code-block:: llvm. @G = weak global i32 0 ; type of @G is i32*; @H = weak global i32 0 ; type of @H is i32*. define i32 @test(i1 %Condition) {; entry:; br i1 %Condition, label %cond_true, label %cond_false. cond_true:; %X.0 = load i32, i32* @G; br label %cond_next. cond_false:; %X.1 = load i32, i32* @H; br label %cond_next. cond_next:; %X.2 = phi i32 [ %X.1, %cond_false ], [ %X.0, %cond_true ]; ret i32 %X.2; }. In this example, the loads from the G and H global variables are; explicit in the LLVM IR, and they live in the then/else branches of the; if statement (cond\_true/cond\_false). In order to merge the incoming; values, the X.2 phi node in the cond\_next block selects the right value; to use based on where control flow is coming from: if control flow comes; from the cond\_false block, X.2 gets the value of X.1. Alternatively, if; control flow comes from cond\_true, it gets the value of X.0. The intent; of this chapter is not to explain the details of SSA form. For more; information, see one of the many `online; references <http://en.wikipedia.org/wiki/Static_single_assignment_form>`_. The question for this article is ""who places the p",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl07.rst:2116,test,test,2116,interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl07.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl07.rst,1,['test'],['test']
Testability,"ith the 'nonnull' attribute. .. code-block:: cpp. int f(int *p) __attribute__((nonnull));. void test(int *p) {; if (!p); f(p); // warn; }. .. _core-NullDereference:. core.NullDereference (C, C++, ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for dereferences of null pointers. This checker specifically does; not report null pointer dereferences for x86 and x86-64 targets when the; address space is 256 (x86 GS Segment), 257 (x86 FS Segment), or 258 (x86 SS; segment). See `X86/X86-64 Language Extensions; <https://clang.llvm.org/docs/LanguageExtensions.html#memory-references-to-specified-segments>`__; for reference. The ``SuppressAddressSpaces`` option suppresses; warnings for null dereferences of all pointers with address spaces. You can; disable this behavior with the option; ``-analyzer-config core.NullDereference:SuppressAddressSpaces=false``.; *Defaults to true*. .. code-block:: objc. // C; void test(int *p) {; if (p); return;. int x = p[0]; // warn; }. // C; void test(int *p) {; if (!p); *p = 0; // warn; }. // C++; class C {; public:; int x;; };. void test() {; C *pc = 0;; int k = pc->x; // warn; }. // Objective-C; @interface MyClass {; @public; int x;; }; @end. void test() {; MyClass *obj = 0;; obj->x = 1; // warn; }. .. _core-StackAddressEscape:. core.StackAddressEscape (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""; Check that addresses to stack memory do not escape the function. .. code-block:: c. char const *p;. void test() {; char const str[] = ""string"";; p = str; // warn; }. void* test() {; return __builtin_alloca(12); // warn; }. void test() {; static int *x;; int y;; x = &y; // warn; }. .. _core-UndefinedBinaryOperatorResult:. core.UndefinedBinaryOperatorResult (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for undefined results of binary operators. .. code-block:: c. void test() {; int x;; int y = x + 1; // warn: left operand is garbage; }. .. _core-VLASize:. core.VLASize (C); """"""""""""""""""""""""""""""""; Check for declarations of Variable Length Arrays of undefined or z",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:4385,test,test,4385,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"ith the library under test, and feeds fuzzed inputs to the; library via a specific fuzzing entrypoint (aka ""target function""); the fuzzer; then tracks which areas of the code are reached, and generates mutations on the; corpus of input data in order to maximize the code coverage.; The code coverage; information for libFuzzer is provided by LLVM's SanitizerCoverage_; instrumentation. Contact: libfuzzer(#)googlegroups.com. Status; ======. The original authors of libFuzzer have stopped active work on it and switched; to working on another fuzzing engine, Centipede_. LibFuzzer is still fully; supported in that important bugs will get fixed. However, please do not expect; major new features or code reviews, other than for bug fixes. Versions; ========. LibFuzzer requires a matching version of Clang. Getting Started; ===============. .. contents::; :local:; :depth: 1. Fuzz Target; -----------. The first step in using libFuzzer on a library is to implement a; *fuzz target* -- a function that accepts an array of bytes and; does something interesting with these bytes using the API under test.; Like this:. .. code-block:: c++. // fuzz_target.cc; extern ""C"" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {; DoSomethingInterestingWithMyAPI(Data, Size);; return 0; // Values other than 0 and -1 are reserved for future use.; }. Note that this fuzz target does not depend on libFuzzer in any way; and so it is possible and even desirable to use it with other fuzzing engines; e.g. AFL_ and/or Radamsa_. Some important things to remember about fuzz targets:. * The fuzzing engine will execute the fuzz target many times with different inputs in the same process.; * It must tolerate any kind of input (empty, huge, malformed, etc).; * It must not `exit()` on any input.; * It may use threads but ideally all threads should be joined at the end of the function.; * It must be as deterministic as possible. Non-determinism (e.g. random decisions not based on the input bytes) will mak",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst:1424,test,test,1424,interpreter/llvm-project/llvm/docs/LibFuzzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst,1,['test'],['test']
Testability,"ith; *name*. That *key* could be either an integer index or a string name. ``!setdagop(``\ *dag*\ ``,`` *op*\ ``)``; This operator produces a DAG node with the same arguments as *dag*, but with its; operator replaced with *op*. Example: ``!setdagop((foo 1, 2), bar)`` results in ``(bar 1, 2)``. ``!shl(``\ *a*\ ``,`` *count*\ ``)``; This operator shifts *a* left logically by *count* bits and produces the resulting; value. The operation is performed on a 64-bit integer; the result; is undefined for shift counts outside 0...63. ``!size(``\ *a*\ ``)``; This operator produces the size of the string, list, or dag *a*.; The size of a DAG is the number of arguments; the operator does not count. ``!sra(``\ *a*\ ``,`` *count*\ ``)``; This operator shifts *a* right arithmetically by *count* bits and produces the resulting; value. The operation is performed on a 64-bit integer; the result; is undefined for shift counts outside 0...63. ``!srl(``\ *a*\ ``,`` *count*\ ``)``; This operator shifts *a* right logically by *count* bits and produces the resulting; value. The operation is performed on a 64-bit integer; the result; is undefined for shift counts outside 0...63. ``!strconcat(``\ *str1*\ ``,`` *str2*\ ``, ...)``; This operator concatenates the string arguments *str1*, *str2*, etc., and; produces the resulting string. ``!sub(``\ *a*\ ``,`` *b*\ ``)``; This operator subtracts *b* from *a* and produces the arithmetic difference. ``!subst(``\ *target*\ ``,`` *repl*\ ``,`` *value*\ ``)``; This operator replaces all occurrences of the *target* in the *value* with; the *repl* and produces the resulting value. The *value* can; be a string, in which case substring substitution is performed. The *value* can be a record name, in which case the operator produces the *repl*; record if the *target* record name equals the *value* record name; otherwise it; produces the *value*. ``!substr(``\ *string*\ ``,`` *start*\ [``,`` *length*]\ ``)``; This operator extracts a substring of the given *s",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:72007,log,logically,72007,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,1,['log'],['logically']
Testability,"ith; ``-no-checkout``, but you'll have to create the ``final`` directory by hand; and link the correct source dir to ``final/llvm.src``. * For release candidates, you need ``-test-asserts``, or it won't create a; ""Release+Asserts"" directory, which is needed for release testing and; benchmarking. This will take twice as long. * On the final candidate you just need Release builds, and that's the binary; directory you'll have to pack. * On macOS, you must export ``MACOSX_DEPLOYMENT_TARGET=10.9`` before running; the script. This script builds three phases of Clang+LLVM twice each (Release and; Release+Asserts), so use screen or nohup to avoid headaches, since it'll take; a long time. Use the ``--help`` option to see all the options and chose it according to; your needs. findRegressions-nightly.py; --------------------------. TODO. .. _test-suite:. Test Suite; ==========. .. contents::; :local:. Follow the `LNT Quick Start Guide; <https://llvm.org/docs/lnt/quickstart.html>`__ link on how to set-up the; test-suite. The binary location you'll have to use for testing is inside the; ``rcN/Phase3/Release+Asserts/llvmCore-REL-RC.install``.; Link that directory to an easier location and run the test-suite. An example on the run command line, assuming you created a link from the correct; install directory to ``~/devel/llvm/install``::. ./sandbox/bin/python sandbox/bin/lnt runtest \; nt \; -j4 \; --sandbox sandbox \; --test-suite ~/devel/llvm/test/test-suite \; --cc ~/devel/llvm/install/bin/clang \; --cxx ~/devel/llvm/install/bin/clang++. It should have no new regressions, compared to the previous release or release; candidate. You don't need to fix all the bugs in the test-suite, since they're; not necessarily meant to pass on all architectures all the time. This is; due to the nature of the result checking, which relies on direct comparison,; and most of the time, the failures are related to bad output checking, rather; than bad code generation. If the errors are in LLVM itself,",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ReleaseProcess.rst:3539,test,test-suite,3539,interpreter/llvm-project/llvm/docs/ReleaseProcess.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ReleaseProcess.rst,1,['test'],['test-suite']
Testability,"ither is specified, ""CODE"" is assumed. DATA is; symbolized as address and symbol size rather than line number. :program:`llvm-symbolizer` parses options from the environment variable; ``LLVM_SYMBOLIZER_OPTS`` after parsing options from the command line.; ``LLVM_SYMBOLIZER_OPTS`` is primarily useful for supplementing the command-line; options when :program:`llvm-symbolizer` is invoked by another program or; runtime. EXAMPLES; --------. All of the following examples use the following two source files as input. They; use a mixture of C-style and C++-style linkage to illustrate how these names are; printed differently (see :option:`--demangle`). .. code-block:: c. // test.h; extern ""C"" inline int foz() {; return 1234;; }. .. code-block:: c. // test.cpp; #include ""test.h""; int bar=42;. int foo() {; return bar;; }. int baz() {; volatile int k = 42;; return foz() + k;; }. int main() {; return foo() + baz();; }. These files are built as follows:. .. code-block:: console. $ clang -g test.cpp -o test.elf; $ clang -g -O2 test.cpp -o inlined.elf. Example 1 - addresses and object on command-line:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf 0x4004d0 0x400490; foz; /tmp/test.h:1:0. baz(); /tmp/test.cpp:11:0. Example 2 - addresses on standard input:. .. code-block:: console. $ cat addr.txt; 0x4004a0; 0x400490; 0x4004d0; $ llvm-symbolizer --obj=test.elf < addr.txt; main; /tmp/test.cpp:15:0. baz(); /tmp/test.cpp:11:0. foz; /tmp/./test.h:1:0. Example 3 - object specified with address:. .. code-block:: console. $ llvm-symbolizer ""test.elf 0x400490"" ""FILE:inlined.elf 0x400480""; baz(); /tmp/test.cpp:11:0. foo(); /tmp/test.cpp:8:10. $ cat addr2.txt; FILE:test.elf 0x4004a0; inlined.elf 0x400480. $ llvm-symbolizer < addr2.txt; main; /tmp/test.cpp:15:0. foo(); /tmp/test.cpp:8:10. Example 4 - BUILDID and FILE prefixes:. .. code-block:: console. $ llvm-symbolizer ""FILE:test.elf 0x400490"" ""DATA BUILDID:123456789abcdef 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat ad",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:2529,test,test,2529,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"itwise shifts that are out of bounds for their data type; * Dereferencing misaligned or null pointers; * Signed integer overflow; * Conversion to, from, or between floating-point types which would; overflow the destination. See the full list of available :ref:`checks <ubsan-checks>` below. UBSan has an optional run-time library which provides better error reporting.; The checks have small runtime cost and no impact on address space layout or ABI. How to build; ============. Build LLVM/Clang with `CMake <https://llvm.org/docs/CMake.html>`_. Usage; =====. Use ``clang++`` to compile and link your program with the ``-fsanitize=undefined``; option. Make sure to use ``clang++`` (not ``ld``) as a linker, so that your; executable is linked with proper UBSan runtime libraries, unless all enabled; checks use trap mode. You can use ``clang`` instead of ``clang++`` if you're; compiling/linking C code. .. code-block:: console. % cat test.cc; int main(int argc, char **argv) {; int k = 0x7fffffff;; k += argc;; return 0;; }; % clang++ -fsanitize=undefined test.cc; % ./a.out; test.cc:3:5: runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type 'int'. You can use ``-fsanitize=...`` and ``-fno-sanitize=`` to enable and disable one; check or one check group. For an individual check, the last option that enabling; or disabling it wins. .. code-block:: console. # Enable all checks in the ""undefined"" group, but disable ""alignment"".; % clang -fsanitize=undefined -fno-sanitize=alignment a.c. # Enable just ""alignment"".; % clang -fsanitize=alignment a.c. # The same. -fno-sanitize=undefined nullifies the previous -fsanitize=undefined.; % clang -fsanitize=undefined -fno-sanitize=undefined -fsanitize=alignment a.c. For most checks (:ref:`checks <ubsan-checks>`), the instrumented program prints; a verbose error report and continues execution upon a failed check.; You can use the following options to change the error reporting behavior:. * ``-fno-sanitize-recover=...``",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UndefinedBehaviorSanitizer.rst:1479,test,test,1479,interpreter/llvm-project/clang/docs/UndefinedBehaviorSanitizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UndefinedBehaviorSanitizer.rst,1,['test'],['test']
Testability,"ity Assurance. Each contribution should contain developer documentation in the form of code; comments and sufficient amount of tests in the form of unit and/or integration; tests. Unit tests are relatively small and quick programs focused to check if; small pieces of code and API work as expected. Integration tests are checks; which ensure the synergy between different (unit tested) components. Put in; practice, unit tests verify (member) function behavior whereas integration tests; check classes and their cooperation. The boundary between both kinds of testing; is blurred. ROOT has support for both kinds of tests in the [roottest repository](https://github.com/root-project/roottest); and supports ""inline"" unit tests in each component's `test` folder. Unit testing; uses the [GTest and GMock](https://github.com/google/googletest) infrastructure; along with small ROOT-specific extensions located in; [TestSupport](../core/test_support/). The documentation of GTest; and GMock is rather extensive and we will describe some of the features of; ROOT::TestSupport. In order to write an inline unit test, add a new file in the; nearest to the tested component's `test` folder and call `ROOT_ADD_GTEST` in the; `CMakeLists.txt` file. In many cases using standard GTest facility is sufficient to write a good test.; However, we disallow error messages in gtests, or sometimes we want to test the; error conditions of an interface and its diagnostics. For example,. ```cpp. void MyROOTFunc(unsigned x); {; if (x == 0) {; Error(""MyROOTFunc"", ""x should be greater than 0!"");; return;; }; /* some work */; }. ```. In order to check if the error is printed on the right spot we can write the; following test:. ```cpp. #include ""ROOT/TestSupport.hxx"". #include ""gtest/gtest.h"". TEST(MyROOTFunc, ErrorCases); {; ROOT_EXPECT_ERROR(MyROOTFunc(0), ""MyROOTFunc"", ""x should be greater than 0!"");; // Also ROOT_EXPECT_WARNING, ROOT_EXPECT_INFO, ROOT_EXPECT_NODIAG and ROOT_EXPECT_SYSERROR available.; }. ```. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/DEVELOPMENT.md:1783,test,test,1783,README/DEVELOPMENT.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/DEVELOPMENT.md,6,['test'],"['test', 'tested']"
Testability,"ity and have; consistently validated and released binaries for their targets/OSs. To contact; them, you should post on the `Discourse forums (Project; Infrastructure - Release Testers). <https://discourse.llvm.org/c/infrastructure/release-testers/66>`_. The official testers list is in the file ``RELEASE_TESTERS.TXT``, in the ``LLVM``; repository. Community Testing; -----------------. Once all testing has been completed and appropriate bugs filed, the release; candidate tarballs are put on the website and the LLVM community is notified. We ask that all LLVM developers test the release in any the following ways:. #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang``; binary. Build LLVM. Run ``make check`` and the full LLVM test suite (``make; TEST=nightly report``). #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the ``clang`` sources. Compile; everything. Run ``make check`` and the full LLVM test suite (``make; TEST=nightly report``). #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang``; binary. Build whole programs with it (ex. Chromium, Firefox, Apache) for; your platform. #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang``; binary. Build *your* programs with it and check for conformance and; performance regressions. #. Run the :doc:`release process <ReleaseProcess>`, if your platform is; *different* than that which is officially supported, and report back errors; only if they were not reported by the official release tester for that; architecture. We also ask that the OS distribution release managers test their packages with; the first candidate of every release, and report any *new* errors in GitHub.; If the bug can be reproduced with an unpatched upstream version of the release; candidate (as opposed to the distribution's own build), the priority should be; release blocker. During the first round of testing, all regressions must be fixed before the; second release candidate is tagged. In the subse",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst:8585,test,test-X,8585,interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,1,['test'],['test-X']
Testability,"ity, cantFail simplifies control flow. Their treatment; of error cases is very different however: Where ExitOnError is guaranteed to; terminate the program on an error input, cantFail simply asserts that the result; is success. In debug builds this will result in an assertion failure if an error; is encountered. In release builds the behavior of cantFail for failure values is; undefined. As such, care must be taken in the use of cantFail: clients must be; certain that a cantFail wrapped call really can not fail with the given; arguments. Use of the cantFail functions should be rare in library code, but they are; likely to be of more use in tool and unit-test code where inputs and/or; mocked-up classes or functions may be known to be safe. Fallible constructors; """""""""""""""""""""""""""""""""""""""""". Some classes require resource acquisition or other complex initialization that; can fail during construction. Unfortunately constructors can't return errors,; and having clients test objects after they're constructed to ensure that they're; valid is error prone as it's all too easy to forget the test. To work around; this, use the named constructor idiom and return an ``Expected<T>``:. .. code-block:: c++. class Foo {; public:. static Expected<Foo> Create(Resource R1, Resource R2) {; Error Err = Error::success();; Foo F(R1, R2, Err);; if (Err); return std::move(Err);; return std::move(F);; }. private:. Foo(Resource R1, Resource R2, Error &Err) {; ErrorAsOutParameter EAO(&Err);; if (auto Err2 = R1.acquire()) {; Err = std::move(Err2);; return;; }; Err = R2.acquire();; }; };. Here, the named constructor passes an ``Error`` by reference into the actual; constructor, which the constructor can then use to return errors. The; ``ErrorAsOutParameter`` utility sets the ``Error`` value's checked flag on entry; to the constructor so that the error can be assigned to, then resets it on exit; to force the client (the named constructor) to check the error. By using this idiom, clients attempting to con",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst:33639,test,test,33639,interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,2,['test'],['test']
Testability,iv_t.h; libc/include/llvm-libc-types/jmp_buf.h; libc/include/llvm-libc-types/ldiv_t.h; libc/include/llvm-libc-types/lldiv_t.h; libc/include/llvm-libc-types/mode_t.h; libc/include/llvm-libc-types/mtx_t.h; libc/include/llvm-libc-types/off_t.h; libc/include/llvm-libc-types/once_flag.h; libc/include/llvm-libc-types/size_t.h; libc/include/llvm-libc-types/ssize_t.h; libc/include/llvm-libc-types/struct_sigaction.h; libc/include/llvm-libc-types/struct_tm.h; libc/include/llvm-libc-types/thrd_start_t.h; libc/include/llvm-libc-types/thrd_t.h; libc/include/llvm-libc-types/time_t.h; libc/include/llvm-libc-types/__atexithandler_t.h; libc/include/llvm-libc-types/__bsearchcompare_t.h; libc/include/llvm-libc-types/__call_once_func_t.h; libc/include/llvm-libc-types/__futex_word.h; libc/include/llvm-libc-types/__mutex_type.h; libc/include/llvm-libc-types/__qsortcompare_t.h; libc/include/llvm-libc-types/__sighandler_t.h; libc/loader/linux/aarch64/start.cpp; libc/loader/linux/x86_64/start.cpp; libc/src/assert/__assert_fail.h; libc/src/ctype/isalnum.cpp; libc/src/ctype/isalnum.h; libc/src/ctype/isalpha.cpp; libc/src/ctype/isalpha.h; libc/src/ctype/isascii.cpp; libc/src/ctype/isascii.h; libc/src/ctype/isblank.cpp; libc/src/ctype/isblank.h; libc/src/ctype/iscntrl.cpp; libc/src/ctype/iscntrl.h; libc/src/ctype/isdigit.cpp; libc/src/ctype/isdigit.h; libc/src/ctype/isgraph.cpp; libc/src/ctype/isgraph.h; libc/src/ctype/islower.cpp; libc/src/ctype/islower.h; libc/src/ctype/isprint.cpp; libc/src/ctype/isprint.h; libc/src/ctype/ispunct.cpp; libc/src/ctype/ispunct.h; libc/src/ctype/isspace.cpp; libc/src/ctype/isspace.h; libc/src/ctype/isupper.cpp; libc/src/ctype/isupper.h; libc/src/ctype/isxdigit.cpp; libc/src/ctype/isxdigit.h; libc/src/ctype/toascii.cpp; libc/src/ctype/toascii.h; libc/src/ctype/tolower.cpp; libc/src/ctype/tolower.h; libc/src/ctype/toupper.cpp; libc/src/ctype/toupper.h; libc/src/errno/dummy_errno.cpp; libc/src/errno/dummy_errno.h; libc/src/errno/errno.cpp; libc/src/errno/llvmlibc_er,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:132321,assert,assert,132321,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['assert'],['assert']
Testability,"ive rotation, i.e. a rotation of objects; inside a static system of coordinates. In case you want to rotate the; frame and want to know the coordinates of objects in the rotated system,; you should apply the inverse rotation to the objects. If you want to; transform coordinates from the rotated frame to the original frame you; have to apply the direct transformation. A rotation around a specified; axis means counterclockwise rotation around the positive direction of; the axis. ### Declaration, Access, Comparisons. ``` {.cpp}; TRotation r; // r initialized as identity; TRotation m(r); // m = r; ```. There is no direct way to set the matrix elements - to ensure that a; **`TRotation`** always describes a real rotation. But you can get the; values by with the methods `XX()..ZZ()` or the `(,)` operator:. ``` {.cpp}; Double_t xx = r.XX(); // the same as xx=r(0,0); xx = r(0,0);; if (r==m) {...} // test for equality; if (r!=m) {..} // test for inequality; if (r.IsIdentity()) {...} // test for identity; ```. ### Rotation around Axes. The following matrices describe counter-clockwise rotations around the; coordinate axes and are implemented in: `RotateX()`,` RotateY()` and; `RotateZ()`:. $$; Rx(a) = \left|; \begin{array}{ccc}; 1 & 0 & 0 \\; 0 & cos(a) & -sin(a) \\; 0 & sin(a) & cos(a); \end{array}; \right|; Ry(a) = \left|; \begin{array}{ccc}; cos(a) & 0 & sin(a) \\; 0 & 1 & 0 \\; -sin(a) & 0 & cos(a); \end{array}; \right|; Rz(a) = \left|; \begin{array}{ccc}; cos(a) & -sin(a) & 0 \\; sin(a) & cos(a) & 0 \\; 0 & 0 & 1; \end{array}; \right|; $$. ``` {.cpp}; r.RotateX(TMath::Pi()); // rotation around the x-axis; ```. ### Rotation around Arbitrary Axis. The `Rotate()` method allows you to rotate around an arbitrary vector; (not necessary a unit one) and returns the result. ``` {.cpp}; r.Rotate(TMath::Pi()/3,TVector3(3,4,5));; ```. It is possible to find a unit vector and an angle, which describe the; same rotation as the current one:. ``` {.cpp}; Double_t angle;; TVector3 axis;; r",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/PhysicsVectors.md:6789,test,test,6789,documentation/users-guide/PhysicsVectors.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/PhysicsVectors.md,1,['test'],['test']
Testability,"ix-test-suite/>`_; and is itself a collection of benchmark suites. Parboil Benchmarks; ------------------; http://impact.crhc.illinois.edu/parboil/parboil.aspx. MachSuite; ---------; https://breagen.github.io/MachSuite/. Rodinia; -------; http://lava.cs.virginia.edu/Rodinia/download_links.htm. Rodinia has already been partially included in; MultiSource/Benchmarks/Rodinia. Benchmarks still missing are:. * streamcluster; * particlefilter; * nw; * nn; * myocyte; * mummergpu; * lud; * leukocyte; * lavaMD; * kmeans; * hotspot3D; * heartwall; * cfd; * bfs; * b+tree. vecmathlib tests harness; ------------------------; https://bitbucket.org/eschnett/vecmathlib/wiki/Home. PARSEC; ------; http://parsec.cs.princeton.edu/. Graph500 reference implementations; ----------------------------------; https://github.com/graph500/graph500/tree/v2-spec. NAS Parallel Benchmarks; -----------------------; https://www.nas.nasa.gov/publications/npb.html. The official benchmark is written in Fortran, but an unofficial; C-translation is available as well:; https://github.com/benchmark-subsetting/NPB3.0-omp-C. DARPA HPCS SSCA#2 C/OpenMP reference implementation; ---------------------------------------------------; http://www.highproductivity.org/SSCABmks.htm. This web site does not exist any more, but there seems to be a copy of; some of the benchmarks; https://github.com/gtcasl/hpc-benchmarks/tree/master/SSCA2v2.2. Kokkos; ------; https://github.com/kokkos/kokkos-kernels/tree/master/perf_test; https://github.com/kokkos/kokkos/tree/master/benchmarks. PolyMage; --------; https://github.com/bondhugula/polymage-benchmarks. PolyBench; ---------; https://sourceforge.net/projects/polybench/. A modified version of Polybench 3.2 is already presented in; SingleSource/Benchmarks/Polybench. A newer version 4.2.1 is available. High Performance Geometric Multigrid; ------------------------------------; https://crd.lbl.gov/departments/computer-science/PAR/research/hpgmg/. RAJA Performance Suite; -------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst:3390,benchmark,benchmark,3390,interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst,1,['benchmark'],['benchmark']
Testability,"izations---┴--- optimizations -┘. ┌-----------------------------------------------------------------------------------------------┐; │ │; │ source file │; │ │; └-----------------------------------------------------------------------------------------------┘; ┌---------------------------------------┐; │ │; │ │; │ imported code │; │ │; │ │; └---------------------------------------┘. It would be very unfortunate if we end up with worse performance after using modules.; The main concern is that when we compile a source file, the compiler needs to see the function body; of imported module units so that it can perform IPO (InterProcedural Optimization, primarily inlining; in practice) to optimize functions in current source file with the help of the information provided by; the imported module units.; In other words, the imported code would be processed again and again in importee units; by optimizations (including IPO itself).; The optimizations before IPO and the IPO itself are the most time-consuming part in whole compilation process.; So from this perspective, we might not be able to get the improvements described in the theory.; But we could still save the time for optimizations after IPO and the whole backend. Overall, at ``O0`` the implementations of functions defined in a module will not impact module users,; but at higher optimization levels the definitions of such functions are provided to user compilations for the; purposes of optimization (but definitions of these functions are still not included in the use's object file)-; this means the build speedup at higher optimization levels may be lower than expected given ``O0`` experience,; but does provide by more optimization opportunities. Interoperability with Clang Modules; -----------------------------------. We **wish** to support clang modules and standard c++ modules at the same time,; but the mixed using form is not well used/tested yet. Please file new github issues as you find interoperability problems.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/StandardCPlusPlusModules.rst:43621,test,tested,43621,interpreter/llvm-project/clang/docs/StandardCPlusPlusModules.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/StandardCPlusPlusModules.rst,1,['test'],['tested']
Testability,ize of base class subobject; Not resolved. 2325; drafting; std::launder and reuse of character buffers; Not resolved. 2326; dup; Type deduction with initializer list containing ambiguous functions; Unknown. 2327; drafting; Copy elision for direct-initialization with a conversion function; Not resolved. 2328; drafting; Unclear presentation style of template argument deduction rules; Not resolved. 2329; drafting; Virtual base classes and generated assignment operators; Not resolved. 2330; CD5; Missing references to variable templates; Unknown. 2331; CD6; Redundancy in description of class scope; N/A. 2332; CD5; template-name as simple-type-name vs injected-class-name; Unknown. 2333; CD6; Escape sequences in UTF-8 character literals; Unknown. 2334; open; Creation of objects by typeid; Not resolved. 2335; drafting; Deduced return types vs member types; No. 2336; CD5; Destructor characteristics vs potentially-constructed subobjects; Unknown. 2337; open; Incorrect implication of logic ladder for conversion sequence tiebreakers; Not resolved. 2338; CD5; Undefined behavior converting to short enums with fixed underlying types; Clang 12. 2339; CD5; Underspecified template arguments in structured bindings; Unknown. 2340; open; Reference collapsing and structured bindings; Not resolved. 2341; CD5; Structured bindings with static storage duration; Unknown. 2342; CD5; Reference reinterpret_cast and pointer-interconvertibility; Unknown. 2343; C++20; void* non-type template parameters; Unknown. 2344; NAD; Redeclaration of names in init-statements; Unknown. 2345; CD5; Jumping across initializers in init-statements and conditions; Unknown. 2346; CD5; Local variables in default arguments; Clang 11. 2347; C++20; Passing short scoped enumerations to ellipsis; Unknown. 2348; NAD; Non-templated constexpr if; Unknown. 2349; NAD; Class/enumeration names vs conditions; Unknown. 2350; NAD; Forwarding references and deduction guides; Unknown. 2351; CD5; void{}; Unknown. 2352; CD5; Similar type,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/cxx_dr_status.html:159565,log,logic,159565,interpreter/llvm-project/clang/www/cxx_dr_status.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/cxx_dr_status.html,1,['log'],['logic']
Testability,"izer bug. Jump ahead to; :ref:`middle-end bugs <middleend-crash>`. * Otherwise, you have a backend code generator crash. Jump ahead to :ref:`code; generator bugs <backend-crash>`. .. _frontend-crash:. Front-end bugs; --------------. On a ``clang`` crash, the compiler will dump a preprocessed file and a script; to replay the ``clang`` command. For example, you should see something like. .. code-block:: text. PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:; Preprocessed source(s) and associated run script(s) are located at:; clang: note: diagnostic msg: /tmp/foo-xxxxxx.c; clang: note: diagnostic msg: /tmp/foo-xxxxxx.sh. The `creduce <https://github.com/csmith-project/creduce>`_ tool helps to; reduce the preprocessed file down to the smallest amount of code that still; replicates the problem. You're encouraged to use creduce to reduce the code; to make the developers' lives easier. The; ``clang/utils/creduce-clang-crash.py`` script can be used on the files; that clang dumps to help with automating creating a test to check for the; compiler crash. `cvise <https://github.com/marxin/cvise>`_ is an alternative to ``creduce``. .. _middleend-crash:. Middle-end optimization bugs; ----------------------------. If you find that a bug crashes in the optimizer, compile your test-case to a; ``.bc`` file by passing ""``-emit-llvm -O1 -Xclang -disable-llvm-passes -c -o; foo.bc``"". The ``-O1`` is important because ``-O0`` adds the ``optnone``; function attribute to all functions and many passes don't run on ``optnone``; functions. Then run:. .. code-block:: bash. opt -O3 foo.bc -disable-output. If this doesn't crash, please follow the instructions for a :ref:`front-end; bug <frontend-crash>`. If this does crash, then you should be able to debug this with the following; :doc:`bugpoint <Bugpoint>` command:. .. code-block:: bash. bugpoint foo.bc -O3. Run this, then file a bug with the instructions and reduced .bc; files that bugpoint emits. If bugpoint doesn't reproduce the crash, `",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst:3363,test,test,3363,interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst,1,['test'],['test']
Testability,"izer can otherwise deduce or facts that are of little use to the; optimizer. .. _int_ssa_copy:. '``llvm.ssa.copy``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare type @llvm.ssa.copy(type returned %operand) memory(none). Arguments:; """""""""""""""""""". The first argument is an operand which is used as the returned value. Overview:; """""""""""""""""""". The ``llvm.ssa.copy`` intrinsic can be used to attach information to; operations by copying them and giving them new names. For example,; the PredicateInfo utility uses it to build Extended SSA form, and; attach various forms of information to operands that dominate specific; uses. It is not meant for general use, only for building temporary; renaming forms that require value splits at certain points. .. _type.test:. '``llvm.type.test``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare i1 @llvm.type.test(ptr %ptr, metadata %type) nounwind memory(none). Arguments:; """""""""""""""""""". The first argument is a pointer to be tested. The second argument is a; metadata object representing a :doc:`type identifier <TypeMetadata>`. Overview:; """""""""""""""""". The ``llvm.type.test`` intrinsic tests whether the given pointer is associated; with the given type identifier. .. _type.checked.load:. '``llvm.type.checked.load``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare {ptr, i1} @llvm.type.checked.load(ptr %ptr, i32 %offset, metadata %type) nounwind memory(argmem: read). Arguments:; """""""""""""""""""". The first argument is a pointer from which to load a function pointer. The; second argument is the byte offset from which to load the function pointer. The; third argument is a metadata object representing a :doc:`type identifier; <TypeMetadata>`. Overview:; """""""""""""""""". The ``llvm.type.checked.load`` intrinsic safely loads a function pointer from a; virtual table pointer using type metadata. This intrinsic is used to implement; control flow integrity in conjunction with virtual ca",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:937424,test,tested,937424,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['tested']
Testability,"izer``. :doc:`The Microsoft PDB File Format <PDB/index>`; A detailed description of the Microsoft PDB (Program Database) file format. ==================; Garbage Collection; ==================. :doc:`GarbageCollection`; The interfaces source-language compilers should use for compiling GC'd; programs. :doc:`Statepoints`; This describes a set of experimental extensions for garbage; collection support. =========; LibFuzzer; =========. :doc:`LibFuzzer`; A library for writing in-process guided fuzzers. :doc:`FuzzingLLVM`; Information on writing and using Fuzzers to find bugs in LLVM. ========; LLVM IR; ========. :doc:`LLVM Language Reference Manual <LangRef>`; Defines the LLVM intermediate representation and the assembly form of the; different nodes. :doc:`InAlloca`; Description of the ``inalloca`` argument attribute. :doc:`BitCodeFormat`; This describes the file format and encoding used for LLVM ""bc"" files. :doc:`Machine IR (MIR) Format Reference Manual <MIRLangRef>`; A reference manual for the MIR serialization format, which is used to test; LLVM's code generation passes. :doc:`GlobalISel/index`; This describes the prototype instruction selection replacement, GlobalISel. :doc:`ConvergentOperations`; Description of ``convergent`` operation semantics and related intrinsics. =====================; Testing and Debugging; =====================. :doc:`LLVM Testing Infrastructure Guide <TestingGuide>`; A reference manual for using the LLVM testing infrastructure. :doc:`TestSuiteGuide`; Describes how to compile and run the test-suite benchmarks. :doc:`GwpAsan`; A sampled heap memory error detection toolkit designed for production use. ====; XRay; ====. :doc:`XRay`; High-level documentation of how to use XRay in LLVM. :doc:`XRayExample`; An example of how to debug an application with XRay. =================; Additional Topics; =================. :doc:`FaultMaps`; LLVM support for folding control flow into faulting machine instructions. :doc:`Atomics`; Information about LLVM's co",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Reference.rst:2655,test,test,2655,interpreter/llvm-project/llvm/docs/Reference.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Reference.rst,1,['test'],['test']
Testability,"jc_externally_retained`` attribute. This attribute can apply to strong local; variables, functions, methods, or blocks:. .. code-block:: objc. @class WobbleAmount;. @interface Widget : NSObject; -(void)wobble:(WobbleAmount *)amount;; @end. @implementation Widget. -(void)wobble:(WobbleAmount *)amount; __attribute__((objc_externally_retained)) {; // 'amount' and 'alias' aren't retained on entry, nor released on exit.; __attribute__((objc_externally_retained)) WobbleAmount *alias = amount;; }; @end. Annotating a function with this attribute makes every parameter with strong; retainable object pointer type externally-retained, unless the variable was; explicitly qualified with ``__strong``. For instance, ``first_param`` is; externally-retained (and therefore ``const``) below, but not ``second_param``:. .. code-block:: objc. __attribute__((objc_externally_retained)); void f(NSArray *first_param, __strong NSArray *second_param) {; // ...; }. You can test if your compiler has support for ``objc_externally_retained`` with; ``__has_attribute``:. .. code-block:: objc. #if __has_attribute(objc_externally_retained); // Use externally retained...; #endif. .. _arc.misc.self:. ``self``; --------. The ``self`` parameter variable of an non-init Objective-C method is considered; :ref:`externally-retained <arc.misc.externally_retained>` by the implementation.; It is undefined behavior, or at least dangerous, to cause an object to be; deallocated during a message send to that object. In an init method, ``self``; follows the :ref:``init family rules <arc.family.semantics.init>``. .. admonition:: Rationale. The cost of retaining ``self`` in all methods was found to be prohibitive, as; it tends to be live across calls, preventing the optimizer from proving that; the retain and release are unnecessary --- for good reason, as it's quite; possible in theory to cause an object to be deallocated during its execution; without this retain and release. Since it's extremely uncommon to actually; do",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/AutomaticReferenceCounting.rst:93947,test,test,93947,interpreter/llvm-project/clang/docs/AutomaticReferenceCounting.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/AutomaticReferenceCounting.rst,1,['test'],['test']
Testability,"ject is written into if and only if the function returns a zero value:. bool OSUnserializeXML(void *data, LIBKERN_RETURNS_RETAINED_ON_ZERO OSString **errString);. Then the caller has to release an object if the function has returned zero.; 4. Retained out parameters on non-zero return; Similarly, LIBKERN_RETURNS_RETAINED_ON_NONZERO specifies that a; retained object is written into the parameter if and only if the function has; returned a non-zero value.; Note that for non-retained out parameters conditionals do not matter, as the; caller has no obligations regardless of whether an object is written into or; not. Custom Assertion Handlers. The analyzer exploits code assertions by pruning off paths where the; assertion condition is false. The idea is capture any program invariants; specified in the assertion that the developer may know but is not immediately; apparent in the code itself. In this way assertions make implicit assumptions; explicit in the code, which not only makes the analyzer more accurate when; finding bugs, but can help others better able to understand your code as well.; It can also help remove certain kinds of analyzer false positives by pruning off; false paths.; In order to exploit assertions, however, the analyzer must understand when it; encounters an ""assertion handler."" Typically assertions are; implemented with a macro, with the macro performing a check for the assertion; condition and, when the check fails, calling an assertion handler. For example, consider the following code; fragment:. void foo(int *p) {; assert(p != NULL);; }. When this code is preprocessed on Mac OS X it expands to the following:. void foo(int *p) {; (__builtin_expect(!(p != NULL), 0) ? __assert_rtn(__func__, ""t.c"", 4, ""p != NULL"") : (void)0);; }. In this example, the assertion handler is __assert_rtn. When called,; most assertion handlers typically print an error and terminate the program. The; analyzer can exploit such semantics by ending the analysis of a path once i",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html:19881,assert,assertions,19881,interpreter/llvm-project/clang/www/analyzer/annotations.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html,1,['assert'],['assertions']
Testability,"k that,; along each conditional edge, we need to track the data which would allow that; edge to be taken. On x86, this data is stored in the flags register used by the; conditional jump instruction. Along both edges after this fork in control flow,; the flags register remains alive and contains data that we can use to build up; our accumulated predicate state. We accumulate it using the x86 conditional; move instruction which also reads the flag registers where the state resides.; These conditional move instructions are known to not be predicted on any x86; processors, making them immune to misprediction that could reintroduce the; vulnerability. When we insert the conditional moves, the code ends up looking; like the following:; ```; # %bb.0: # %entry; pushq %rax; xorl %eax, %eax # Zero out initial predicate state.; movq $-1, %r8 # Put all-ones mask into a register.; testl %edi, %edi; jne .LBB0_1; # %bb.2: # %then1; cmovneq %r8, %rax # Conditionally update predicate state.; testl %esi, %esi; jne .LBB0_1; # %bb.3: # %then2; cmovneq %r8, %rax # Conditionally update predicate state.; testl %edx, %edx; je .LBB0_4; .LBB0_1:; cmoveq %r8, %rax # Conditionally update predicate state.; popq %rax; retq; .LBB0_4: # %danger; cmovneq %r8, %rax # Conditionally update predicate state.; ...; ```. Here we create the ""empty"" or ""correct execution"" predicate state by zeroing; `%rax`, and we create a constant ""incorrect execution"" predicate value by; putting `-1` into `%r8`. Then, along each edge coming out of a conditional; branch we do a conditional move that in a correct execution will be a no-op,; but if misspeculated, will replace the `%rax` with the value of `%r8`.; Misspeculating any one of the three predicates will cause `%rax` to hold the; ""incorrect execution"" value from `%r8` as we preserve incoming values when; execution is correct rather than overwriting it. We now have a value in `%rax` in each basic block that indicates if at some; point previously a predicate was mispre",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md:16693,test,testl,16693,interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,1,['test'],['testl']
Testability,"k traces. Therefore, it should be used with care,; and only if absolutely required; for example for certain code that cannot; tolerate any instrumentation and resulting side-effects. This attribute; overrides ``no_sanitize(""thread"")``. Ignorelist; ----------. ThreadSanitizer supports ``src`` and ``fun`` entity types in; :doc:`SanitizerSpecialCaseList`, that can be used to suppress data race reports; in the specified source files or functions. Unlike functions marked with; ``no_sanitize(""thread"")`` attribute, ignored functions are not instrumented; at all. This can lead to false positives due to missed synchronization via; atomic operations and missed stack frames in reports. Limitations; -----------. * ThreadSanitizer uses more real memory than a native run. At the default; settings the memory overhead is 5x plus 1Mb per each thread. Settings with 3x; (less accurate analysis) and 9x (more accurate analysis) overhead are also; available.; * ThreadSanitizer maps (but does not reserve) a lot of virtual address space.; This means that tools like ``ulimit`` may not work as usually expected.; * Libc/libstdc++ static linking is not supported.; * Non-position-independent executables are not supported. Therefore, the; ``fsanitize=thread`` flag will cause Clang to act as though the ``-fPIE``; flag had been supplied if compiling without ``-fPIC``, and as though the; ``-pie`` flag had been supplied if linking an executable. Current Status; --------------. ThreadSanitizer is in beta stage. It is known to work on large C++ programs; using pthreads, but we do not promise anything (yet). C++11 threading is; supported with llvm libc++. The test suite is integrated into CMake build; and can be run with ``make check-tsan`` command. We are actively working on enhancing the tool --- stay tuned. Any help,; especially in the form of minimized standalone tests is more than welcome. More Information; ----------------; `<https://github.com/google/sanitizers/wiki/ThreadSanitizerCppManual>`_; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ThreadSanitizer.rst:4891,test,test,4891,interpreter/llvm-project/clang/docs/ThreadSanitizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ThreadSanitizer.rst,2,['test'],"['test', 'tests']"
Testability,k.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl/tsan_ilist.h; compiler-rt/lib/tsan/rtl/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl/tsan_mman.h; compiler-rt/lib/tsan/rtl/tsan_mutexset.h; compiler-rt/lib/tsan/rtl/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl/tsan_shadow.h; compiler-rt/lib/tsan/rtl/tsan_stack_trace.h; c,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:103183,test,tests,103183,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,k_dim.h; libclc/generic/include/integer/popcount.h; libclc/generic/include/math/clc_exp10.h; libclc/generic/include/math/clc_fma.h; libclc/generic/include/math/clc_fmod.h; libclc/generic/include/math/clc_hypot.h; libclc/generic/include/math/clc_ldexp.h; libclc/generic/include/math/clc_nextafter.h; libclc/generic/include/math/clc_pow.h; libclc/generic/include/math/clc_pown.h; libclc/generic/include/math/clc_powr.h; libclc/generic/include/math/clc_remainder.h; libclc/generic/include/math/clc_remquo.h; libclc/generic/include/math/clc_rootn.h; libclc/generic/include/math/clc_sqrt.h; libclc/generic/include/math/clc_tan.h; libclc/generic/include/math/clc_tanpi.h; libclc/generic/lib/math/ep_log.h; libcxx/benchmarks/format.bench.cpp; libcxx/benchmarks/formatted_size.bench.cpp; libcxx/benchmarks/formatter_float.bench.cpp; libcxx/benchmarks/format_to.bench.cpp; libcxx/benchmarks/format_to_n.bench.cpp; libcxx/benchmarks/to_chars.bench.cpp; libcxx/benchmarks/util_smartptr.bench.cpp; libcxx/benchmarks/variant_visit_1.bench.cpp; libcxx/benchmarks/variant_visit_2.bench.cpp; libcxx/benchmarks/variant_visit_3.bench.cpp; libcxx/include/__algorithm/adjacent_find.h; libcxx/include/__algorithm/all_of.h; libcxx/include/__algorithm/any_of.h; libcxx/include/__algorithm/count.h; libcxx/include/__algorithm/count_if.h; libcxx/include/__algorithm/find.h; libcxx/include/__algorithm/find_first_of.h; libcxx/include/__algorithm/find_if.h; libcxx/include/__algorithm/find_if_not.h; libcxx/include/__algorithm/for_each.h; libcxx/include/__algorithm/for_each_n.h; libcxx/include/__algorithm/iter_swap.h; libcxx/include/__algorithm/mismatch.h; libcxx/include/__algorithm/none_of.h; libcxx/include/__algorithm/swap_ranges.h; libcxx/include/__compare/is_eq.h; libcxx/include/__filesystem/file_time_type.h; libcxx/include/__filesystem/file_type.h; libcxx/include/__filesystem/space_info.h; libcxx/include/__format/formatter_floating_point.h; libcxx/include/__format/formatter_pointer.h; libcxx/include/__memory/voidi,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:159715,benchmark,benchmarks,159715,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,"k_mtx_t lck1, lck2;. void test() {; lck_mtx_lock(&lck1);; lck_mtx_lock(&lck2);; lck_mtx_unlock(&lck1);; // warn: this was not the most recently acquired lock; }. lck_mtx_t lck1, lck2;. void test() {; if (lck_mtx_try_lock(&lck1) == 0); return;. lck_mtx_lock(&lck2);; lck_mtx_unlock(&lck1);; // warn: this was not the most recently acquired lock; }. alpha.unix.SimpleStream; (C); Check for misuses of stream APIs:; fopen; fclose(demo checker, the subject of the demo; (Slides; ,Video); by Anna Zaks and Jordan Rose presented at the ; 2012 LLVM Developers' Meeting). void test() {; FILE *F = fopen(""myfile.txt"", ""w"");; } // warn: opened file is never closed. void test() {; FILE *F = fopen(""myfile.txt"", ""w"");. if (F); fclose(F);. fclose(F); // warn: closing a previously closed file stream; }. alpha.unix.Stream; (C); Check stream handling functions:fopen; tmpfile; fclose; fread; fwrite; fseek; ftell; rewind; fgetpos; fsetpos; clearerr; feof; ferror; fileno. void test() {; FILE *p = fopen(""foo"", ""r"");; } // warn: opened file is never closed. void test() {; FILE *p = fopen(""foo"", ""r"");; fseek(p, 1, SEEK_SET); // warn: stream pointer might be NULL; fclose(p);; }. void test() {; FILE *p = fopen(""foo"", ""r"");. if (p); fseek(p, 1, 3);; // warn: third arg should be SEEK_SET, SEEK_END, or SEEK_CUR. fclose(p);; }. void test() {; FILE *p = fopen(""foo"", ""r"");; fclose(p);; fclose(p); // warn: already closed; }. void test() {; FILE *p = tmpfile();; ftell(p); // warn: stream pointer might be NULL; fclose(p);; }. alpha.unix.cstring.BufferOverlap; (C); Checks for overlap in two buffer arguments; applies to:; memcpy; mempcpy. void test() {; int a[4] = {0};; memcpy(a + 2, a + 1, 8); // warn; }. alpha.unix.cstring.NotNullTerminated; (C); Check for arguments which are not null-terminated strings; applies; to:; strlen; strnlen; strcpy; strncpy; strcat; strncat. void test() {; int y = strlen((char *)&test); // warn; }. alpha.unix.cstring.OutOfBounds; (C); Check for out-of-bounds access in string functi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html:14484,test,test,14484,interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,1,['test'],['test']
Testability,"k`` and ``make clang-test`` are affected.; By default, ``'-sv --no-progress-bar'`` on Visual C++ and Xcode, ``'-sv'`` on; others. **LLVM_LIT_TOOLS_DIR**:PATH; The path to GnuWin32 tools for tests. Valid on Windows host. Defaults to; the empty string, in which case lit will look for tools needed for tests; (e.g. ``grep``, ``sort``, etc.) in your %PATH%. If GnuWin32 is not in your; %PATH%, then you can set this variable to the GnuWin32 directory so that; lit can find tools needed for tests in that directory. **LLVM_NATIVE_TOOL_DIR**:STRING; Full path to a directory containing executables for the build host; (containing binaries such as ``llvm-tblgen`` and ``clang-tblgen``). This is; intended for cross-compiling: if the user sets this variable and the; directory contains executables with the expected names, no separate; native versions of those executables will be built. **LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE**:BOOL; Defaults to ``OFF``. If set to ``ON``, CMake's default logic for library IDs; on Darwin in the build tree will be used. Otherwise the install-time library; IDs will be used in the build tree as well. Mainly useful when other CMake; library ID control variables (e.g., ``CMAKE_INSTALL_NAME_DIR``) are being; set to non-standard values. **LLVM_OPTIMIZED_TABLEGEN**:BOOL; If enabled and building a debug or asserts build the CMake build system will; generate a Release build tree to build a fully optimized tablegen for use; during the build. Enabling this option can significantly speed up build times; especially when building LLVM in Debug configurations. **LLVM_PARALLEL_COMPILE_JOBS**:STRING; Define the maximum number of concurrent compilation jobs. **LLVM_PARALLEL_LINK_JOBS**:STRING; Define the maximum number of concurrent link jobs. **LLVM_RAM_PER_COMPILE_JOB**:STRING; Calculates the amount of Ninja compile jobs according to available resources.; Value has to be in MB, overwrites LLVM_PARALLEL_COMPILE_JOBS. Compile jobs ; will be between one and amount of log",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst:31794,log,logic,31794,interpreter/llvm-project/llvm/docs/CMake.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst,1,['log'],['logic']
Testability,"kdir test-suite-build; % cd test-suite-build; % cmake -DCMAKE_C_COMPILER=<path to llvm build>/bin/clang \; -C../test-suite/cmake/caches/O3.cmake \; ../test-suite; ```. **NOTE!** if you are using your built clang, and you want to build and run the; MicroBenchmarks/XRay microbenchmarks, you need to add `compiler-rt` to your; `LLVM_ENABLE_RUNTIMES` cmake flag. 4. Build the benchmarks:. ```text; % make; Scanning dependencies of target timeit-target; [ 0%] Building C object tools/CMakeFiles/timeit-target.dir/timeit.c.o; [ 0%] Linking C executable timeit-target; ...; ```. 5. Run the tests with lit:. ```text; % llvm-lit -v -j 1 -o results.json .; -- Testing: 474 tests, 1 threads --; PASS: test-suite :: MultiSource/Applications/ALAC/decode/alacconvert-decode.test (1 of 474); ********** TEST 'test-suite :: MultiSource/Applications/ALAC/decode/alacconvert-decode.test' RESULTS **********; compile_time: 0.2192; exec_time: 0.0462; hash: ""59620e187c6ac38b36382685ccd2b63b""; size: 83348; **********; PASS: test-suite :: MultiSource/Applications/ALAC/encode/alacconvert-encode.test (2 of 474); ...; ```. 6. Show and compare result files (optional):. ```bash; # Make sure pandas and scipy are installed. Prepend `sudo` if necessary.; % pip install pandas scipy; # Show a single result file:; % test-suite/utils/compare.py results.json; # Compare two result files:; % test-suite/utils/compare.py results_a.json results_b.json; ```. Structure; ---------. The test-suite contains benchmark and test programs. The programs come with; reference outputs so that their correctness can be checked. The suite comes; with tools to collect metrics such as benchmark runtime, compilation time and; code size. The test-suite is divided into several directories:. - `SingleSource/`. Contains test programs that are only a single source file in size. A; subdirectory may contain several programs. - `MultiSource/`. Contains subdirectories which entire programs with multiple source files.; Large benchmarks and whole ap",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:1832,test,test-suite,1832,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['test'],['test-suite']
Testability,"ke 3.17 or newer sets CMAKE_DEFAULT_BUILD_TYPE to one of the; # items from CMAKE_CONFIGURATION_TYPES. Logic below can be further; # simplified once LLVM's minimum CMake version is updated to 3.17.; if(CMAKE_DEFAULT_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_DEFAULT_BUILD_TYPE}); else(); if(CMAKE_CONFIGURATION_TYPES); list(GET CMAKE_CONFIGURATION_TYPES 0 CMAKE_TRY_COMPILE_CONFIGURATION); elseif(CMAKE_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_BUILD_TYPE}); endif(); endif(). # Side-by-side subprojects layout: automatically set the; # LLVM_EXTERNAL_${project}_SOURCE_DIR using LLVM_ALL_PROJECTS; # This allows an easy way of setting up a build directory for llvm and another; # one for llvm+clang+... using the same sources.; set(LLVM_ALL_PROJECTS ""bolt;clang;clang-tools-extra;compiler-rt;cross-project-tests;libc;libclc;lld;lldb;mlir;openmp;polly;pstl""); # The flang project is not yet part of ""all"" projects (see C++ requirements); set(LLVM_EXTRA_PROJECTS ""flang""); # List of all known projects in the mono repo; set(LLVM_KNOWN_PROJECTS ""${LLVM_ALL_PROJECTS};${LLVM_EXTRA_PROJECTS}""); set(LLVM_ENABLE_PROJECTS """" CACHE STRING; ""Semicolon-separated list of projects to build (${LLVM_KNOWN_PROJECTS}), or \""all\"".""); # Make sure expansion happens first to not handle ""all"" in rest of the checks.; if( LLVM_ENABLE_PROJECTS STREQUAL ""all"" ); set( LLVM_ENABLE_PROJECTS ${LLVM_ALL_PROJECTS}); endif(); foreach(proj ${LLVM_ENABLE_PROJECTS}); if (NOT proj STREQUAL ""llvm"" AND NOT ""${proj}"" IN_LIST LLVM_KNOWN_PROJECTS); MESSAGE(FATAL_ERROR ""${proj} isn't a known project: ${LLVM_KNOWN_PROJECTS}. Did you mean to enable it as a runtime in LLVM_ENABLE_RUNTIMES?""); endif(); endforeach(). if (""flang"" IN_LIST LLVM_ENABLE_PROJECTS); if (NOT ""mlir"" IN_LIST LLVM_ENABLE_PROJECTS); message(STATUS ""Enabling MLIR as a dependency to flang""); list(APPEND LLVM_ENABLE_PROJECTS ""mlir""); endif(). if (NOT ""clang"" IN_LIST LLVM_ENABLE_PROJECTS); message(FATAL_ERROR ""Clang is not enabled, ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:5362,test,tests,5362,interpreter/llvm-project/llvm/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt,1,['test'],['tests']
Testability,"ke check LIT_ARGS=""-v --vg --vg-leak"". to enable testing with valgrind and with leak checking enabled. To run individual tests or subsets of tests, you can use the ``llvm-lit``; script which is built as part of LLVM. For example, to run the; ``Integer/BitPacked.ll`` test by itself you can run:. .. code-block:: bash. % llvm-lit ~/llvm/test/Integer/BitPacked.ll. or to run all of the ARM CodeGen tests:. .. code-block:: bash. % llvm-lit ~/llvm/test/CodeGen/ARM. The regression tests will use the Python psutil module only if installed in a; **non-user** location. Under Linux, install with sudo or within a virtual; environment. Under Windows, install Python for all users and then run; ``pip install psutil`` in an elevated command prompt. For more information on using the :program:`lit` tool, see ``llvm-lit --help``; or the :doc:`lit man page <CommandGuide/lit>`. Debugging Information tests; ---------------------------. To run debugging information tests simply add the ``cross-project-tests``; project to your ``LLVM_ENABLE_PROJECTS`` define on the cmake; command-line. Regression test structure; =========================. The LLVM regression tests are driven by :program:`lit` and are located in the; ``llvm/test`` directory. This directory contains a large array of small tests that exercise; various features of LLVM and to ensure that regressions do not occur.; The directory is broken into several sub-directories, each focused on a; particular area of LLVM. Writing new regression tests; ----------------------------. The regression test structure is very simple, but does require some; information to be set. This information is gathered via ``cmake``; and is written to a file, ``test/lit.site.cfg.py`` in the build directory.; The ``llvm/test`` Makefile does this work for you. In order for the regression tests to work, each directory of tests must; have a ``lit.local.cfg`` file. :program:`lit` looks for this file to determine; how to run the tests. This file is just Python code a",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:6782,test,tests,6782,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,2,['test'],['tests']
Testability,"ke sure we didn't break something. .. code:: console. $ ninja check-clang. Notice that it is much faster to build this time, but the tests take; just as long to run. Ninja doesn't know which tests might be affected,; so it runs them all. .. code:: console. ********************; Testing Time: 408.84s; ********************; Failing Tests (1):; Clang :: SemaCXX/warn-infinite-recursion.cpp. Well, that makes sense… and the test output suggests it's looking for; the old string ""call itself"" and finding our new message instead.; Note that more tests may fail in a similar way as new tests are; added time to time. Let's fix it by updating the expectation in the test. .. code:: console. $ vi ../clang/test/SemaCXX/warn-infinite-recursion.cpp. Everywhere we see `// expected-warning{{call itself}}` (or something similar; from the original warning text), let's replace it with; `// expected-warning{{to understand recursion}}`. Now we could run **all** the tests again, but this is a slow way to; iterate on a change! Instead, let's find a way to re-run just the; specific test. There are two main types of tests in LLVM:. - **lit tests** (e.g. SemaCXX/warn-infinite-recursion.cpp). These are fancy shell scripts that run command-line tools and verify the; output. They live in files like; clang/**test**/FixIt/dereference-addressof.c. Re-run like this:. .. code:: console. $ bin/llvm-lit -v ../clang/test/SemaCXX/warn-infinite-recursion.cpp. - **unit tests** (e.g. ToolingTests/ReplacementTest.CanDeleteAllText). These are C++ programs that call LLVM functions and verify the results.; They live in suites like ToolingTests. Re-run like this:. .. code:: console. $ ninja ToolingTests && tools/clang/unittests/Tooling/ToolingTests; --gtest_filter=ReplacementTest.CanDeleteAllText. Commit locally; --------------. We'll save the change to a local git branch. This lets us work on other; things while the change is being reviewed. Changes should have a; description, to explain to reviewers and future rea",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst:7347,test,tests,7347,interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,2,['test'],"['test', 'tests']"
Testability,kmp_wrapper_getpid.h; openmp/runtime/src/kmp_wrapper_malloc.h; openmp/runtime/src/ompd-specific.cpp; openmp/runtime/src/ompd-specific.h; openmp/runtime/src/ompt-event-specific.h; openmp/runtime/src/ompt-general.cpp; openmp/runtime/src/ompt-internal.h; openmp/runtime/src/ompt-specific.cpp; openmp/runtime/src/ompt-specific.h; openmp/runtime/src/z_Linux_util.cpp; openmp/runtime/src/z_Windows_NT-586_util.cpp; openmp/runtime/src/z_Windows_NT_util.cpp; openmp/runtime/src/thirdparty/ittnotify/ittnotify.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_config.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp; openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_types.h; openmp/runtime/src/thirdparty/ittnotify/legacy/ittnotify.h; openmp/tools/archer/ompt-tsan.cpp; openmp/tools/archer/tests/ompt/ompt-signal.h; openmp/tools/multiplex/ompt-multiplex.h; openmp/tools/multiplex/tests/ompt-signal.h; openmp/tools/multiplex/tests/custom_data_storage/second-tool.h; openmp/tools/multiplex/tests/print/first-tool.h; openmp/tools/multiplex/tests/print/second-tool.h; polly/include/polly/Canonicalization.h; polly/include/polly/CodePreparation.h; polly/include/polly/DeadCodeElimination.h; polly/include/polly/DeLICM.h; polly/include/polly/DependenceInfo.h; polly/include/polly/FlattenAlgo.h; polly/include/polly/FlattenSchedule.h; polly/include/polly/ForwardOpTree.h; polly/include/polly/JSONExporter.h; polly/include/polly/LinkAllPasses.h; polly/include/polly/ManualOptimizer.h; polly/include/polly/MatmulOptimizer.h; polly/include/polly/Options.h; polly/include/polly/PolyhedralInfo.h; polly/include/polly/PruneUnprofitable.h; polly/include/polly/RegisterPasses.h; polly/include/polly/ScheduleOptimizer.h; polly/include/polly/ScheduleTreeTransform.h; polly/include/polly/ScopBuilder.h; polly/include/polly/ScopDetection.h; polly/include/polly/ScopDetectionDiagnostic.h; polly/include/polly/ScopInfo.h; polly/include/polly/ScopPass.,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:411452,test,tests,411452,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,ks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/math/TwoInputSingleOutputDiff.h; libc/fuzzing/stdlib/atof_differential_fuzz.cpp; libc/fuzzing/stdlib/qsort_fuzz.cpp; libc/fuzzing/stdlib/StringParserOutputDiff.h; libc/fuzzing/string/strcmp_fuzz.cpp; libc/fuzzing/string/strstr_fuzz.cpp; libc/include/__llvm-libc-common.h; libc/include/llvm-libc-macros/fcntl-macros.h; libc/include/llvm-libc-macros/stdio-macros.h; libc/include/llvm-libc-macros/linux/fcntl-macros.h; libc/include/llvm-libc-types/cnd_t.h; libc/include/llvm-libc-types/div_t.h; libc/include/llvm-libc-types/double_t.h; libc/include/llvm-libc-types/fenv_t.h; libc/include/llvm-libc-types/fexcept_t.h; libc/include/llvm-libc-types/FILE.h; libc/includ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:130244,benchmark,benchmarks,130244,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,"l Runtime; ===============. There is a minimal UBSan runtime available suitable for use in production; environments. This runtime has a small attack surface. It only provides very; basic issue logging and deduplication, and does not support ``-fsanitize=vptr``; checking. To use the minimal runtime, add ``-fsanitize-minimal-runtime`` to the clang; command line options. For example, if you're used to compiling with; ``-fsanitize=undefined``, you could enable the minimal runtime with; ``-fsanitize=undefined -fsanitize-minimal-runtime``. Stack traces and report symbolization; =====================================; If you want UBSan to print symbolized stack trace for each error report, you; will need to:. #. Compile with ``-g`` and ``-fno-omit-frame-pointer`` to get proper debug; information in your binary.; #. Run your program with environment variable; ``UBSAN_OPTIONS=print_stacktrace=1``.; #. Make sure ``llvm-symbolizer`` binary is in ``PATH``. Logging; =======. The default log file for diagnostics is ""stderr"". To log diagnostics to another; file, you can set ``UBSAN_OPTIONS=log_path=...``. Silencing Unsigned Integer Overflow; ===================================; To silence reports from unsigned integer overflow, you can set; ``UBSAN_OPTIONS=silence_unsigned_overflow=1``. This feature, combined with; ``-fsanitize-recover=unsigned-integer-overflow``, is particularly useful for; providing fuzzing signal without blowing up logs. Issue Suppression; =================. UndefinedBehaviorSanitizer is not expected to produce false positives.; If you see one, look again; most likely it is a true positive!. Disabling Instrumentation with ``__attribute__((no_sanitize(""undefined"")))``; ----------------------------------------------------------------------------. You disable UBSan checks for particular functions with; ``__attribute__((no_sanitize(""undefined"")))``. You can use all values of; ``-fsanitize=`` flag in this attribute, e.g. if your function deliberately; contains possib",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UndefinedBehaviorSanitizer.rst:12764,log,log,12764,interpreter/llvm-project/clang/docs/UndefinedBehaviorSanitizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UndefinedBehaviorSanitizer.rst,1,['log'],['log']
Testability,"l Suites; ---------------. External suites such as SPEC can be enabled by either. - placing (or linking) them into the `test-suite/test-suite-externals/xxx` directory (example: `test-suite/test-suite-externals/speccpu2000`); - using a configuration option such as `-D TEST_SUITE_SPEC2000_ROOT=path/to/speccpu2000`. You can find further information in the respective README files such as; `test-suite/External/SPEC/README`. For the SPEC benchmarks you can switch between the `test`, `train` and; `ref` input datasets via the `TEST_SUITE_RUN_TYPE` configuration option.; The `train` dataset is used by default. Custom Suites; -------------. You can build custom suites using the test-suite infrastructure. A custom suite; has a `CMakeLists.txt` file at the top directory. The `CMakeLists.txt` will be; picked up automatically if placed into a subdirectory of the test-suite or when; setting the `TEST_SUITE_SUBDIRS` variable:. ```bash; % cmake -DTEST_SUITE_SUBDIRS=path/to/my/benchmark-suite ../test-suite; ```. Profile Guided Optimization; ---------------------------. Profile guided optimization requires to compile and run twice. First the; benchmark should be compiled with profile generation instrumentation enabled; and setup for training data. The lit runner will merge the profile files; using `llvm-profdata` so they can be used by the second compilation run. Example:; ```bash; # Profile generation run using LLVM IR PGO:; % cmake -DTEST_SUITE_PROFILE_GENERATE=ON \; -DTEST_SUITE_USE_IR_PGO=ON \; -DTEST_SUITE_RUN_TYPE=train \; ../test-suite; % make; % llvm-lit .; # Use the profile data for compilation and actual benchmark run:; % cmake -DTEST_SUITE_PROFILE_GENERATE=OFF \; -DTEST_SUITE_PROFILE_USE=ON \; -DTEST_SUITE_RUN_TYPE=ref \; .; % make; % llvm-lit -o result.json .; ```. To use Clang frontend's PGO instead of LLVM IR PGO, set `-DTEST_SUITE_USE_IR_PGO=OFF`. The `TEST_SUITE_RUN_TYPE` setting only affects the SPEC benchmark suites. Cross Compilation and External Devices; -----------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:9915,test,test-suite,9915,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['test'],['test-suite']
Testability,l Test Reference; ROOT_EXECUTABLE(testFullRNN TestFullRNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-FullRNN COMMAND testFullRNN). endif(). #--- CUDA tests. ---------------------------; if (tmva-gpu). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES}). add_executable(testRecurrentBackpropagationCuda TestRecurrentBackpropagationCuda.cxx); target_link_libraries(testRecurrentBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-BackpropagationCuda COMMAND testRecurrentBackpropagationCuda); #mark the native Cuda test failing since RNN are supported only with Cudnn; set_tests_properties(TMVA-DNN-RNN-BackpropagationCuda PROPERTIES WILL_FAIL true). if (tmva-cudnn). add_executable(testRecurrentForwardPassCudnn TestRecurrentForwardPassCudnn.cxx); target_link_libraries(testRecurrentForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-Forwaed-Cudnn COMMAND testRecurrentForwardPassCudnn). add_executable(testRecurrentBackpropagationCudnn TestRecurrentBackpropagationCudnn.cxx); target_link_libraries(testRecurrentBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-BackpropagationCudnn COMMAND testRecurrentBackpropagationCudnn). # Full Test GPU; add_executable(testFullRNNCudnn TestFullRNNCudnn.cxx); target_link_libraries(testFullRNNCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-Full-Cudnn COMMAND testFullRNNCudnn). endif(). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). # DNN - Forward CPU; ROOT_EXECUTABLE(testRecurrentForwardPassCpu TestRecurrentForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-Forward-Cpu COMMAND testRecurrentForwardPassCpu). ROOT_EXECUTABLE(testRecurrentBackpropagationCpu TestRecurrentBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-Backpropagation-Cpu COMMAND testRecurrentBackpropagationCpu). # RNN - Full Test Reference; ROOT_EXECUTA,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/CMakeLists.txt:1974,test,testRecurrentBackpropagationCudnn,1974,tmva/tmva/test/DNN/RNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/CMakeLists.txt,1,['test'],['testRecurrentBackpropagationCudnn']
Testability,"l be converted to HTML; before they are copied to the output directory. For each file, the; link's text will be the file name without extension, with underscores; replaced by spaces. You can see an example of the module documentation including links, the; corresponding `index.html`, and the module class index at; <http://root.cern.ch/root/html/HIST_Index.html>. ## Converting Sources (and Other Files) to HTML. **`THtml`** can take a file (C++ or text) and convert it to HTML. There; are two main use cases:. The output of a **macro** converted to HTML will almost look like the; beautified source file of a class reference. The `Begin_Html/End_Html`; keywords are supported; comments, strings, and keywords are colored like; in **`THtml`**'s output for source code. The macro `Event.cxx` in `$ROOTSYS/test` can be seen as an example of; documented ROOT macros at; <http://root.cern.ch/root/html/examples/Event.cxx.html>. `THtml::Convert()`converts a single text file to HTML. For example, it; can be run on a change log. Each known class name will be linked to its; documentation page. An example is ROOT's change log at; <http://root.cern.ch/root/html/examples/V5.16.txt.html>. To convert the source file MyCode.C to HTML, you can run. ``` {.cpp}; root[] THtml h; root[] h.Convert(""MyCode.C"", ""Look At My Code"", ""htmlout/"");; ```. This will create the file `htmlout/MyCode.C.html`. The HTML page will; have the title ""Look At My Code"". ## Special Documentation Elements: Directives. A common documentation problem is the inclusion of images. They are; usually generated externally, which poses problems with where to keep; the images, and how to keep them up to date. **`THtml`** solves this by; offering a few special documentation elements: macro and latex; directives. ### Latex Directive. Documentation surrounded by the keywords `BEGIN_LATEX / END_LATEX` will; be passed to ROOT Latex engine **`TLatex`**. The keywords can be written; with small or capital letters (case insensitive). The out",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/HTMLDoc.md:4755,log,log,4755,documentation/users-guide/HTMLDoc.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/HTMLDoc.md,1,['log'],['log']
Testability,"l expressions, we; remove the module from the JIT when we're done to free the associated memory.; Recall, however, that the module we created a few lines earlier (via; ``InitializeModuleAndPassManager``) is still open and waiting for new code to be; added. With just these two changes, let's see how Kaleidoscope works now!. ::. ready> 4+5;; Read top-level expression:; define double @0() {; entry:; ret double 9.000000e+00; }. Evaluated to 9.000000. Well this looks like it is basically working. The dump of the function; shows the ""no argument function that always returns double"" that we; synthesize for each top-level expression that is typed in. This; demonstrates very basic functionality, but can we do more?. ::. ready> def testfunc(x y) x + y*2;; Read function definition:; define double @testfunc(double %x, double %y) {; entry:; %multmp = fmul double %y, 2.000000e+00; %addtmp = fadd double %multmp, %x; ret double %addtmp; }. ready> testfunc(4, 10);; Read top-level expression:; define double @1() {; entry:; %calltmp = call double @testfunc(double 4.000000e+00, double 1.000000e+01); ret double %calltmp; }. Evaluated to 24.000000. ready> testfunc(5, 10);; ready> LLVM ERROR: Program used external function 'testfunc' which could not be resolved!. Function definitions and calls also work, but something went very wrong on that; last line. The call looks valid, so what happened? As you may have guessed from; the API a Module is a unit of allocation for the JIT, and testfunc was part; of the same module that contained anonymous expression. When we removed that; module from the JIT to free the memory for the anonymous expression, we deleted; the definition of ``testfunc`` along with it. Then, when we tried to call; testfunc a second time, the JIT could no longer find it. The easiest way to fix this is to put the anonymous expression in a separate; module from the rest of the function definitions. The JIT will happily resolve; function calls across module boundaries, as long as",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl04.rst:15997,test,testfunc,15997,interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl04.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl04.rst,2,['test'],['testfunc']
Testability,"l legal Block invocations:. .. code-block:: c. x('a');; (*y)('a');; (true ? x : *y)('a'). The Copy and Release Operations; ===============================. The compiler and runtime provide :block-term:`copy` and; :block-term:`release` operations for Block references that create and,; in matched use, release allocated storage for referenced Blocks. The copy operation ``Block_copy()`` is styled as a function that takes; an arbitrary Block reference and returns a Block reference of the same; type. The release operation, ``Block_release()``, is styled as a; function that takes an arbitrary Block reference and, if dynamically; matched to a Block copy operation, allows recovery of the referenced; allocated memory. The ``__block`` Storage Qualifier; =================================. In addition to the new Block type we also introduce a new storage; qualifier, :block-term:`__block`, for local variables. [testme: a; __block declaration within a block literal] The ``__block`` storage; qualifier is mutually exclusive to the existing local storage; qualifiers auto, register, and static. [testme] Variables qualified by; ``__block`` act as if they were in allocated storage and this storage; is automatically recovered after last use of said variable. An; implementation may choose an optimization where the storage is; initially automatic and only ""moved"" to allocated (heap) storage upon; a Block_copy of a referencing Block. Such variables may be mutated as; normal variables are. In the case where a ``__block`` variable is a Block one must assume; that the ``__block`` variable resides in allocated storage and as such; is assumed to reference a Block that is also in allocated storage; (that it is the result of a ``Block_copy`` operation). Despite this; there is no provision to do a ``Block_copy`` or a ``Block_release`` if; an implementation provides initial automatic storage for Blocks. This; is due to the inherent race condition of potentially several threads; trying to update the s",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/BlockLanguageSpec.rst:7045,test,testme,7045,interpreter/llvm-project/clang/docs/BlockLanguageSpec.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/BlockLanguageSpec.rst,1,['test'],['testme']
Testability,"l nodes; corresponding to the elements from the string path, as well as the; global transformation matrix for each of them. The top node corresponds; to the level 0 in the stored array, while the last node will correspond; to level `n`. For each level, the node, volume and global matrix can be; retrieved using corresponding getters:. ~~~{.cpp}; TGeoHMatrix *GetMatrix(Int_t level=-1) const; TGeoNode *GetNode(Int_t level=-1) const; TGeoShape *GetShape(Int_t level=-1) const; TGeoVolume *GetVolume(Int_t level=-1) const; ~~~. By default the object at level n is retrieved (the align-able object). Once created, a physical node can be misaligned, meaning that its; positioning matrix or even the shape.:. ~~~{.cpp}; void Align(TGeoMatrix* newmat=0, TGeoShape* newshape=0,; Bool_t check=kFALSE); ~~~. The convention used is that newmat represents the new local matrix of; the last node in the branch with respect to its mother volume. The; `Align()` method will actually duplicate the corresponding branch within; the logical hierarchy, creating new volumes and nodes. This is mandatory; in order to avoid problems due to replicated volumes and can create; exhaustive memory consumption if used abusively. Once aligned, a physical node is ready to be tracked. The operation can; be done only after the geometry was closed. Important NOTE: Calling the `Align()` method for a physical node changes; the node pointers for the stored node branch in the active geometry, Due; to this the other defined physical nodes containing elements of this; path will be invalid. Example:. ~~~{.cpp}; TGeoPhysicalNode *pn1 =; gGeoManager->MakePhysicalNode(""/A_1/B_1/C_2"");; TGeoPhysicalNode *pn2 =; gGeoManager->MakePhysicalNode(""/A_1/B_1/C_3"");; ...; pn1->Align(...);; ~~~. The call to `pn1->Align()` will invalidate the pointer to the node `B_1`; in `pn2` object.. The way out is to either call `pn1->Align()` before; the creation of `pn2`, either to use a global method that will correct; all existing physical node",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md:109449,log,logical,109449,geom/geom/doc/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md,1,['log'],['logical']
Testability,"l ones.; For example, if ``opt`` crashes while optimizing a file, it will identify the; optimization (or combination of optimizations) that causes the crash, and reduce; the file down to a small example which triggers the crash. For detailed case scenarios, such as debugging ``opt``, or one of the LLVM code; generators, see :doc:`HowToSubmitABug`. Design Philosophy; =================. ``bugpoint`` is designed to be a useful tool without requiring any hooks into; the LLVM infrastructure at all. It works with any and all LLVM passes and code; generators, and does not need to ""know"" how they work. Because of this, it may; appear to do stupid things or miss obvious simplifications. ``bugpoint`` is; also designed to trade off programmer time for computer time in the; compiler-debugging process; consequently, it may take a long period of; (unattended) time to reduce a test case, but we feel it is still worth it. Note; that ``bugpoint`` is generally very quick unless debugging a miscompilation; where each test of the program (which requires executing it) takes a long time. Automatic Debugger Selection; ----------------------------. ``bugpoint`` reads each ``.bc`` or ``.ll`` file specified on the command line; and links them together into a single module, called the test program. If any; LLVM passes are specified on the command line, it runs these passes on the test; program. If any of the passes crash, or if they produce malformed output (which; causes the verifier to abort), ``bugpoint`` starts the `crash debugger`_. Otherwise, if the ``-output`` option was not specified, ``bugpoint`` runs the; test program with the ""safe"" backend (which is assumed to generate good code) to; generate a reference output. Once ``bugpoint`` has a reference output for the; test program, it tries executing it with the selected code generator. If the; selected code generator crashes, ``bugpoint`` starts the `crash debugger`_ on; the code generator. Otherwise, if the resulting output differs from",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst:1489,test,test,1489,interpreter/llvm-project/llvm/docs/Bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst,1,['test'],['test']
Testability,"l oppositely changed pairs of; tracks, you would need to write a program that loops over all events,; finds all pairs of tracks, and calculates the required quantities. We; have shown how to retrieve the data arrays from the branches of the tree; in the previous section, and you could just write that program from; scratch. Since this is a very common task, ROOT provides a utility that; generates a skeleton class designed to loop over the entries of the; tree. This is the `TTree::MakeClass` method. We will now go through the steps; of using `MakeClass` with a simplified example. The methods used here; obviously work for complex event loop calculations. These are our assumptions: we would like to do selective plotting and; loop through each entry of the tree and tracks. We chose a simple; example: we want to plot `fPx` of the first 100 tracks of each entry. We; have a ROOT tree with a branch for each data member in the ""`Event`""; object. To build this file and tree follow the instructions on how to; build the examples in `$ROOTSYS/test`. Execute `Event` and instruct it; to split the object with this command (from the UNIX command line). ``` {.cpp}; > $ROOTSYS/test/Event 400 1 2 1; ```. This creates an `Event.root` file with 400 events, compressed, split,; and filled. See `$ROOTSYS/test/MainEvent.cxx` for more info. The person who designed the tree makes a shared library available to; you, which defines the classes needed. In this case, the classes are; Event, `EventHeader`, and Track and they are defined in the shared; library `libEvent.so`. The designer also gives you the `Event.h` file to; see the definition of the classes. You can locate `Event.h` in; `$ROOTSYS/test`, and if you have not yet built `libEvent.so`, please see; the instructions of how to build it (typing make in \$ROOTSYS/test is; enough). If you have already built it, you can now use it again. ### Creating a Class with MakeClass. First, we load the shared library and open `Event.root`. ``` {.cpp}; roo",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md:122232,test,test,122232,documentation/users-guide/Trees.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md,1,['test'],['test']
Testability,"l other options, such as std::multiset and; std::unordered_set. We never use containers like unordered_set because; they are generally very expensive (each insertion requires a malloc). std::multiset is useful if you're not interested in elimination of duplicates,; but has all the drawbacks of :ref:`std::set <dss_set>`. A sorted vector; (where you don't delete duplicate entries) or some other approach is almost; always better. .. _ds_map:. Map-Like Containers (std::map, DenseMap, etc); ---------------------------------------------. Map-like containers are useful when you want to associate data to a key. As; usual, there are a lot of different ways to do this. :). .. _dss_sortedvectormap:. A sorted 'vector'; ^^^^^^^^^^^^^^^^^. If your usage pattern follows a strict insert-then-query approach, you can; trivially use the same approach as :ref:`sorted vectors for set-like containers; <dss_sortedvectorset>`. The only difference is that your query function (which; uses std::lower_bound to get efficient log(n) lookup) should only compare the; key, not both the key and value. This yields the same advantages as sorted; vectors for sets. .. _dss_stringmap:. llvm/ADT/StringMap.h; ^^^^^^^^^^^^^^^^^^^^. Strings are commonly used as keys in maps, and they are difficult to support; efficiently: they are variable length, inefficient to hash and compare when; long, expensive to copy, etc. StringMap is a specialized container designed to; cope with these issues. It supports mapping an arbitrary range of bytes to an; arbitrary other object. The StringMap implementation uses a quadratically-probed hash table, where the; buckets store a pointer to the heap allocated entries (and some other stuff).; The entries in the map must be heap allocated because the strings are variable; length. The string data (key) and the element object (value) are stored in the; same allocation with the string data immediately after the element object.; This container guarantees the ""``(char*)(&Value+1)``"" poi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst:88272,log,log,88272,interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,1,['log'],['log']
Testability,"l print something like:. ::. test.c:28:8: warning: extra tokens at end of #endif directive [-Wextra-tokens]; #endif bad; ^; //. When this is disabled, Clang will not print the ""test.c:28:8: ""; part. .. _opt_fcaret-diagnostics:. .. option:: -f[no-]caret-diagnostics. Print source line and ranges from source code in diagnostic.; This option, which defaults to on, controls whether or not Clang; prints the source line, source ranges, and caret when emitting a; diagnostic. For example, when this is enabled, Clang will print; something like:. ::. test.c:28:8: warning: extra tokens at end of #endif directive [-Wextra-tokens]; #endif bad; ^; //. .. option:: -f[no-]color-diagnostics. This option, which defaults to on when a color-capable terminal is; detected, controls whether or not Clang prints diagnostics in color. When this option is enabled, Clang will use colors to highlight; specific parts of the diagnostic, e.g.,. .. nasty hack to not lose our dignity. .. raw:: html. <pre>; <b><span style=""color:black"">test.c:28:8: <span style=""color:magenta"">warning</span>: extra tokens at end of #endif directive [-Wextra-tokens]</span></b>; #endif bad; <span style=""color:green"">^</span>; <span style=""color:green"">//</span>; </pre>. When this is disabled, Clang will just print:. ::. test.c:2:8: warning: extra tokens at end of #endif directive [-Wextra-tokens]; #endif bad; ^; //. If the ``NO_COLOR`` environment variable is defined and not empty; (regardless of value), color diagnostics are disabled. If ``NO_COLOR`` is; defined and ``-fcolor-diagnostics`` is passed on the command line, Clang; will honor the command line argument. .. option:: -fansi-escape-codes. Controls whether ANSI escape codes are used instead of the Windows Console; API to output colored diagnostics. This option is only used on Windows and; defaults to off. .. option:: -fdiagnostics-format=clang/msvc/vi. Changes diagnostic output format to better match IDEs and command line tools. This option controls the output fo",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:7515,test,test,7515,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"l the uses of this definition.; LLVM implements this property by keeping a list of all the uses of a Value; in an internal data structure. ""More Canonical"" Loops; ======================. .. _loop-terminology-loop-rotate:. Rotated Loops; -------------. Loops are rotated by the LoopRotate (:ref:`loop-rotate <passes-loop-rotate>`); pass, which converts loops into do/while style loops and is; implemented in; `LoopRotation.h <https://llvm.org/doxygen/LoopRotation_8h_source.html>`_. Example:. .. code-block:: C. void test(int n) {; for (int i = 0; i < n; i += 1); // Loop body; }. is transformed to:. .. code-block:: C. void test(int n) {; int i = 0;; do {; // Loop body; i += 1;; } while (i < n);; }. **Warning**: This transformation is valid only if the compiler; can prove that the loop body will be executed at least once. Otherwise,; it has to insert a guard which will test it at runtime. In the example; above, that would be:. .. code-block:: C. void test(int n) {; int i = 0;; if (n > 0) {; do {; // Loop body; i += 1;; } while (i < n);; }; }. It's important to understand the effect of loop rotation; at the LLVM IR level. We follow with the previous examples; in LLVM IR while also providing a graphical representation; of the control-flow graphs (CFG). You can get the same graphical; results by utilizing the :ref:`view-cfg <passes-view-cfg>` pass. The initial **for** loop could be translated to:. .. code-block:: none. define void @test(i32 %n) {; entry:; br label %for.header. for.header:; %i = phi i32 [ 0, %entry ], [ %i.next, %latch ]; %cond = icmp slt i32 %i, %n; br i1 %cond, label %body, label %exit. body:; ; Loop body; br label %latch. latch:; %i.next = add nsw i32 %i, 1; br label %for.header. exit:; ret void; }. .. image:: ./loop-terminology-initial-loop.png; :width: 400 px. Before we explain how LoopRotate will actually; transform this loop, here's how we could convert; it (by hand) to a do-while style loop. .. code-block:: none. define void @test(i32 %n) {; entry:; br l",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LoopTerminology.rst:19293,test,test,19293,interpreter/llvm-project/llvm/docs/LoopTerminology.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LoopTerminology.rst,1,['test'],['test']
Testability,"l""; LABELS ${labels}; DEPENDS tutorial-hsimple ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; TIMEOUT ${thisTestTimeout}). if(${t} IN_LIST multithreaded); # Makes sure that this doesn't run in parallel with other multithreaded tutorials, and that cmake doesn't start too; # many other tests. That we use 4 processors is actually a lie, because IMT takes whatever it finds.; # However, even this poor indication of MT behaviour is a good hint for cmake to reduce congestion.; set_tests_properties(tutorial-${tname} PROPERTIES RESOURCE_LOCK multithreaded PROCESSORS ${NProcessors}); endif(); endforeach(). #---Loop over all MPI tutorials and define the corresponding test---------; foreach(t ${mpi_tutorials}); list(FIND returncode_1 ${t} index); if(index EQUAL -1); set(rc 0); else(); set(rc 255); endif(); string(REPLACE "".C"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). # These tests on ARM64 need much more than 20 minutes - increase the timeout; if(ROOT_ARCHITECTURE MATCHES arm64 OR ROOT_ARCHITECTURE MATCHES ppc64); set(thisTestTimeout 3000) # 50m; else(); set(thisTestTimeout 1200) # 20m; endif(). ROOT_ADD_TEST(tutorial-${tname}; COMMAND ${MPIEXEC_EXECUTABLE} ${MPIEXEC_NUMPROC_FLAG} 4 ${ROOT_root_CMD} -b -l -q ${CMAKE_CURRENT_SOURCE_DIR}/${t}${${tname}-aclic}; PASSRC ${rc} FAILREGEX ""Error in <"" "": error:"" ""segmentation violation"" ""FROM HESSE STATUS=FAILED"" ""warning: Failed to call""; LABELS tutorial; DEPENDS tutorial-hsimple ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; TIMEOUT ${thisTestTimeout}); endforeach(). #---Python tutorials-----------------------------------------------------; if(ROOT_pyroot_FOUND). # Copy .rootlogon.py file into the build directory. It disables graphics for the Python tutorials; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/.rootlogon.py ${CMAKE_CURRENT_BINARY_DIR} COPYONLY); # Copy .enableImplicitMTWrapper.py file into the build directory. It can limit the size of the thread pool; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/.enableImpli",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:25406,test,tests,25406,tutorials/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt,1,['test'],['tests']
Testability,"l) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; default: return """";; }. * ``bool AcrossEmptyLines`` Whether to align across empty lines. .. code-block:: c++. true:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";. default: return """";; }. false:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";. default: return """";; }. * ``bool AcrossComments`` Whether to align across comments. .. code-block:: c++. true:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; /* A comment. */; default: return """";; }. false:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; /* A comment. */; default: return """";; }. * ``bool AlignCaseColons`` Whether aligned case labels are aligned on the colon, or on the; , or on the tokens after the colon. .. code-block:: c++. true:; switch (level) {; case log::info : return ""info:"";; case log::warning: return ""warning:"";; default : return """";; }. false:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; default: return """";; }. .. _AlignEscapedNewlines:. **AlignEscapedNewlines** (``EscapedNewlineAlignmentStyle``) :versionbadge:`clang-format 5` :ref:`¶ <AlignEscapedNewlines>`; Options for aligning backslashes in escaped newlines. Possible values:. * ``ENAS_DontAlign`` (in configuration: ``DontAlign``); Don't align escaped newlines. .. code-block:: c++. #define A \; int aaaa; \; int b; \; int dddddddddd;. * ``ENAS_Left`` (in configuration: ``Left``); Align escaped newlines as far left as possible. .. code-block:: c++. true:; #define A \; int aaaa; \; int b; \; int dddddddddd;. false:. * ``ENAS_Right`` (in configuration: ``Right``); Align escaped newlines in the right-most column. .. code-block:: c++. #define A \; int aaaa; \; int b; \; int dddddddddd;. .. _AlignOperands:. **AlignOperands** (``OperandAlignmentStyle``) :versionbadge",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst:20352,log,log,20352,interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,2,['log'],['log']
Testability,"l); // ij_label has i_label; assert(ij_label & j_label); // ij_label has j_label; assert(!(ij_label & k_label)); // ij_label doesn't have k_label; assert(ij_label == 3); // Verifies all of the above. // Or, equivalently:; assert(dfsan_has_label(ij_label, i_label));; assert(dfsan_has_label(ij_label, j_label));; assert(!dfsan_has_label(ij_label, k_label));. dfsan_label ijk_label = dfsan_get_label(i + j + k);. assert(ijk_label & i_label); // ijk_label has i_label; assert(ijk_label & j_label); // ijk_label has j_label; assert(ijk_label & k_label); // ijk_label has k_label; assert(ijk_label == 7); // Verifies all of the above. // Or, equivalently:; assert(dfsan_has_label(ijk_label, i_label));; assert(dfsan_has_label(ijk_label, j_label));; assert(dfsan_has_label(ijk_label, k_label));. return 0;; }. Origin Tracking; ===============. DataFlowSanitizer can track origins of labeled values. This feature is enabled by; ``-mllvm -dfsan-track-origins=1``. For example,. .. code-block:: console. % cat test.cc; #include <sanitizer/dfsan_interface.h>; #include <stdio.h>. int main(int argc, char** argv) {; int i = 0;; dfsan_set_label(i_label, &i, sizeof(i));; int j = i + 1;; dfsan_print_origin_trace(&j, ""A flow from i to j"");; return 0;; }. % clang++ -fsanitize=dataflow -mllvm -dfsan-track-origins=1 -fno-omit-frame-pointer -g -O2 test.cc; % ./a.out; Taint value 0x1 (at 0x7ffd42bf415c) origin tracking (A flow from i to j); Origin value: 0x13900001, Taint value was stored to memory at; #0 0x55676db85a62 in main test.cc:7:7; #1 0x7f0083611bbc in __libc_start_main libc-start.c:285. Origin value: 0x9e00001, Taint value was created at; #0 0x55676db85a08 in main test.cc:6:3; #1 0x7f0083611bbc in __libc_start_main libc-start.c:285. By ``-mllvm -dfsan-track-origins=1`` DataFlowSanitizer collects only; intermediate stores a labeled value went through. Origin tracking slows down; program execution by a factor of 2x on top of the usual DataFlowSanitizer; slowdown and increases memory overhead by ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/DataFlowSanitizer.rst:12426,test,test,12426,interpreter/llvm-project/clang/docs/DataFlowSanitizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/DataFlowSanitizer.rst,1,['test'],['test']
Testability,"l. * Run the test-release.sh script on ``final`` mode (change ``-rc 1`` to; ``-final``). * Once all three stages are done, it'll test the final stage. * Using the ``Phase3/Release+Asserts/llvmCore-MAJ.MIN-final.install`` base,; run the test-suite. If the final phase's ``make check-all`` failed, it's a good idea to also test; the intermediate stages by going on the obj directory and running; ``make check-all`` to find if there's at least one stage that passes (helps; when reducing the error for bug report purposes). .. _release-process:. Release Process; ===============. .. contents::; :local:. When the Release Manager sends you the release candidate, download all sources,; unzip on the same directory (there will be sym-links from the appropriate places; to them), and run the release test as above. You should:. * Download the current candidate sources from where the release manager points; you (ex. https://llvm.org/pre-releases/3.3/rc1/). * Repeat the steps above with ``-rc 1``, ``-rc 2`` etc modes and run the; test-suite the same way. * Compare the results, report all errors on Bugzilla and publish the binary blob; where the release manager can grab it. Once the release manages announces that the latest candidate is the good one,; you have to pack the ``Release`` (no Asserts) install directory on ``Phase3``; and that will be the official binary. * Rename (or link) ``clang+llvm-REL-ARCH-ENV`` to the .install directory. * Tar that into the same name with ``.tar.gz`` extension from outside the; directory. * Make it available for the release manager to download. .. _bug-reporting:. Bug Reporting Process; =====================. .. contents::; :local:. If you found regressions or failures when comparing a release candidate with the; previous release, follow the rules below:. * Critical bugs on compilation should be fixed as soon as possible, possibly; before releasing the binary blobs. * Check-all tests should be fixed before the next release candidate, but can; wait until",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ReleaseProcess.rst:6148,test,test-suite,6148,interpreter/llvm-project/llvm/docs/ReleaseProcess.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ReleaseProcess.rst,1,['test'],['test-suite']
Testability,l.h; libc/src/__support/FPUtil/x86_64/sqrt.h; libc/src/__support/OSUtil/io.h; libc/src/__support/OSUtil/quick_exit.h; libc/src/__support/OSUtil/syscall.h; libc/src/__support/OSUtil/linux/io.h; libc/src/__support/OSUtil/linux/syscall.h; libc/src/__support/OSUtil/linux/aarch64/syscall.h; libc/src/__support/OSUtil/linux/x86_64/syscall.h; libc/src/__support/threads/mutex.h; libc/src/__support/threads/linux/mutex.h; libc/utils/HdrGen/Command.cpp; libc/utils/HdrGen/Command.h; libc/utils/HdrGen/Generator.cpp; libc/utils/HdrGen/Generator.h; libc/utils/HdrGen/IncludeFileCommand.cpp; libc/utils/HdrGen/IncludeFileCommand.h; libc/utils/HdrGen/Main.cpp; libc/utils/HdrGen/PublicAPICommand.cpp; libc/utils/HdrGen/PublicAPICommand.h; libc/utils/HdrGen/PrototypeTestGen/PrototypeTestGen.cpp; libc/utils/LibcTableGenUtil/APIIndexer.cpp; libc/utils/LibcTableGenUtil/APIIndexer.h; libc/utils/MPFRWrapper/check_mpfr.cpp; libc/utils/MPFRWrapper/MPFRUtils.cpp; libc/utils/MPFRWrapper/MPFRUtils.h; libc/utils/testutils/ExecuteFunction.h; libc/utils/testutils/ExecuteFunctionUnix.cpp; libc/utils/testutils/FDReader.h; libc/utils/testutils/FDReaderUnix.cpp; libc/utils/testutils/RandUtils.cpp; libc/utils/testutils/RandUtils.h; libc/utils/testutils/StreamWrapper.h; libc/utils/testutils/Timer.cpp; libc/utils/testutils/Timer.h; libc/utils/tools/WrapperGen/Main.cpp; libc/utils/UnitTest/FPExceptMatcher.cpp; libc/utils/UnitTest/FPExceptMatcher.h; libc/utils/UnitTest/FPMatcher.cpp; libc/utils/UnitTest/FPMatcher.h; libc/utils/UnitTest/FuchsiaTest.h; libc/utils/UnitTest/LibcTest.cpp; libc/utils/UnitTest/LibcTestMain.cpp; libc/utils/UnitTest/MemoryMatcher.cpp; libc/utils/UnitTest/MemoryMatcher.h; libc/utils/UnitTest/PlatformDefs.h; libc/utils/UnitTest/Test.h; libclc/generic/include/config.h; libclc/generic/include/clc/as_type.h; libclc/generic/include/clc/clcfunc.h; libclc/generic/include/clc/async/async_work_group_copy.h; libclc/generic/include/clc/async/async_work_group_strided_copy.h; libclc/generic/include/,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:148803,test,testutils,148803,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['testutils']
Testability,"l9 functions; 6. Fix - TGraph bar width should be at least 1 pixel; 7. Fix - prevent drawing of empty TGraph. ## Changes in 7.5.1; 1. Fix - expand item in hierarchy painter; 2. Fix - correctly use saved TF1 values for non-equidistant bins #270; 3. Fix - in log scales replace 10^1 label by 10; 4. Fix - vertical align of log labels on X axis; 5. Fix - second click of the same item in hierarchy painter. ## Changes in 7.5.0; 1. Correctly implement `TH2` projections like MERCATOR or PARABOLIC, add MOLLWEIDE; 2. Support ""pol"", ""cyl"", ""sph"" and ""psr"" coordinates systems for lego and surf plots; 3. Support orthographic camera for lego and surface plots; 4. Implement ""tri1"", ""tri2"", ""triw"" draw options for `TGraph2D` with Delaunay algorithm; 5. Add support of `TProfile3D` and `TPaveClass` classes; 6. Use ""col"" as default draw option for `TH2`, ""box2"" for `TH3`; 7. Draw axes grids in front of objects - making it equivalent to original ROOT; 8. Change `TF1` and `TF2` drawing - always convert into histogram, support TWebCanvas, handle log scales; 9. Provide ""Bring to front"" menu command for different objects like pave, box, marker, ...; 10. Provide ""Build legend"" context menu command for the pad; 11. Let toggle vertical/horizontal flag for color palette via context menu; 12. Support canvas grayscale, let toggle via context menu; 13. Basic latex support when drawing axes labels and titles in 3D; 14. Handle ""dark mode"" in geom painter - automatically adjust background; 15. Let configure material and scene properties in geom control gui; 16. Reset pad enlarge state when pressing ""Escape"" key #265; 17. Scale special fill patterns like 3244 to pad size; 18. Add ""Superimpose"" menu command in hierarchy - let select draw option when append item to pad; 19. Support `inspectN` draw option, allows automatically expand object content to specified level; 20. Implement `allfunc` draw option for histograms, force drawing disregard of TF1::kNotDraw bit; 21. Use `eslint` for static code checkin",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/changes.md:9482,log,log,9482,js/changes.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/changes.md,1,['log'],['log']
Testability,"lPrintTypeImpl()``. Annotation Token (annot_repl_input_end); ---------------------------------------. This feature uses a new token (``annot_repl_input_end``) to consider printing the; value of an expression if it doesn't end with a semicolon. When parsing an; Expression Statement, if the last semicolon is missing, then the code will; pretend that there one and set a marker there for later utilization, and; continue parsing. A semicolon is normally required in C++, but this feature expands the C++; syntax to handle cases where a missing semicolon is expected (i.e., when; handling an expression statement). It also makes sure that an error is not; generated for the missing semicolon in this specific case. This is accomplished by identifying the end position of the user input; (expression statement). This helps store and return the expression statement; effectively, so that it can be printed (displayed to the user automatically). **Note:** This logic is only available for C++ for now, since part of the; implementation itself requires C++ features. Future versions may support more; languages. .. code-block:: console. Token *CurTok = nullptr;; // If the semicolon is missing at the end of REPL input, consider if; // we want to do value printing. Note this is only enabled in C++ mode; // since part of the implementation requires C++ language features.; // Note we shouldn't eat the token since the callback needs it.; if (Tok.is(tok::annot_repl_input_end) && Actions.getLangOpts().CPlusPlus); CurTok = &Tok;; else; // Otherwise, eat the semicolon.; ExpectAndConsumeSemi(diag::err_expected_semi_after_expr);. StmtResult R = handleExprStmt(Expr, StmtCtx);; if (CurTok && !R.isInvalid()); CurTok->setAnnotationValue(R.get());. return R;; }. AST Transformation; -------------------. When Sema encounters the ``annot_repl_input_end`` token, it knows to transform; the AST before the real CodeGen process. It will consume the token and set a; 'semi missing' bit in the respective decl. .. co",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangRepl.rst:18820,log,logic,18820,interpreter/llvm-project/clang/docs/ClangRepl.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangRepl.rst,1,['log'],['logic']
Testability,"lVar to categories with labels that correspond to bins of input RooRealVar. See rf405_realtocatfuncs.C for details . RooStats; This is a new package introduced in this version for statistical tools built on top of RooFit. It is a joint effort between the LHC experiments and the ROOT team (see the RooStats Wiki page).; ; This version contains the interfaces for performing the statistical calculations and dealing with the obtained results and concrete classes implementing the statistical methods.; ; All the classes and functions in RooStats are provided in the namespace RooStats.; ; RooStats interfaces. ConfInterval: interface for describing a confidence interval. ; IntervalCalculator: interface for a statistical tool producing confidence intervals (class ConfInterval).; HypoTestResult: interface for representing results of a hypothesis test; HypoTestCalculator: interface for a statistical tool performing an hypothesis test. ; CombinedCalculator: interface for a statistical tool which can produce both hypothesis test results and confidence intervals. ; RooStats concrete classes. The concrete classes describing statistical tools implementing the above interfaces are:; ; ProfileLikelihoodCalculator: it is an implementation of a CombinedCalculator using the profile likelihood ratio as a test statistics. After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer).; LikelihoodInterval: concrete implementation of a ConfInterval interface. It implements connected N-dimensional intervals based on the contour of a likelihood ratio. The boundary of the interval is equivalent to a MINUIT/MINOS contour about the maximum likelihood estimator. . HybridCalculator: hypothesis test calculator using a Bayesian-frequentist hybrid method (often called in HEP as CLs method). This class extends the functionality of the TLimit class by taking advantage of the RooFit package. T",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v522/index.html:10244,test,test,10244,roofit/doc/v522/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v522/index.html,1,['test'],['test']
Testability,"l_khr_fp64 test.cl. Enabling all extensions except double support in R600 AMD GPU can be done using:. .. code-block:: console. $ clang --target=r600 -cl-ext=-all,+cl_khr_fp16 test.cl. Note that some generic targets e.g. SPIR/SPIR-V enable all extensions/features in; clang by default. OpenCL Targets; --------------. OpenCL targets are derived from the regular Clang target classes. The OpenCL; specific parts of the target representation provide address space mapping as; well as a set of supported extensions. Specific Targets; ^^^^^^^^^^^^^^^^. There is a set of concrete HW architectures that OpenCL can be compiled for. - For AMD target:. .. code-block:: console. $ clang --target=amdgcn-amd-amdhsa -mcpu=gfx900 test.cl. - For Nvidia architectures:. .. code-block:: console. $ clang --target=nvptx64-unknown-unknown test.cl. Generic Targets; ^^^^^^^^^^^^^^^. - A SPIR-V binary can be produced for 32 or 64 bit targets. .. code-block:: console. $ clang --target=spirv32 -c test.cl; $ clang --target=spirv64 -c test.cl. More details can be found in :ref:`the SPIR-V support section <spir-v>`. - SPIR is available as a generic target to allow portable bitcode to be produced; that can be used across GPU toolchains. The implementation follows `the SPIR; specification <https://www.khronos.org/spir>`_. There are two flavors; available for 32 and 64 bits. .. code-block:: console. $ clang --target=spir test.cl -emit-llvm -c; $ clang --target=spir64 test.cl -emit-llvm -c. Clang will generate SPIR v1.2 compatible IR for OpenCL versions up to 2.0 and; SPIR v2.0 for OpenCL v2.0 or C++ for OpenCL. - x86 is used by some implementations that are x86 compatible and currently; remains for backwards compatibility (with older implementations prior to; SPIR target support). For ""non-SPMD"" targets which cannot spawn multiple; work-items on the fly using hardware, which covers practically all non-GPU; devices such as CPUs and DSPs, additional processing is needed for the kernels; to support multiple wo",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:145404,test,test,145404,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"lable - for example, it returns null for a; call of symbolic function pointer.; addTransition, generateSink, generateNonFatalErrorNode,; generateErrorNode are nullable because you can transition to a node that you have already visited.; Methods of CallExpr/FunctionDecl/CallEvent that; return arguments crash when the argument is out-of-bounds. If you checked the function name,; it doesn't mean that the function has the expected number of arguments!; Which is why you should use CallDescription.; Nullability of different entities within different kinds of symbols and regions is usually; documented via assertions in their constructors.; NamedDecl::getName will fail if the name of the declaration is not a single token,; e.g. for destructors. You could use NamedDecl::getNameAsString for those cases.; Note that this method is much slower and should be used sparringly, e.g. only when generating reports; but not during analysis.; Is -analyzer-checker=core included in all test RUN: lines? It was never supported; to run the analyzer with the core checks disabled. It might cause unexpected behavior and; crashes. You should do all your testing with the core checks enabled. Patterns that you should most likely avoid even if they're not technically wrong:. BugReporterVisitor should most likely not match the AST of the current program point; to decide when to emit a note. It is much easier to determine that by observing changes in; the program state.; In State->getSVal(Region), if Region is not known to be a TypedValueRegion; and the optional type argument is not specified, the checker may accidentally try to dereference a; void pointer.; Checker logic should not depend on whether a certain value is a Loc or NonLoc.; It should be immediately obvious whether the SVal is a Loc or a; NonLoc depending on the AST that is being checked. Checking whether a value; is Loc or Unknown/Undefined or whether the value is; NonLoc or Unknown/Undefined is totally fine.; New symbols should not be con",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html:25775,test,test,25775,interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,1,['test'],['test']
Testability,"lag to remove labels which may exceed graphical range; 22. Let disable usage of TAxis custom labels via context menu; 23. Let configure default draw options via context menu, they can be preserved in the local storage; 24. Let save canvas as JSON file from context menu, object as JSON from inspector; 25. Upgrade three.js r162 -> r168, use r162 only in node.js because of ""gl"" module; 26. Create unified svg2pdf/jspdf ES6 modules, integrate in jsroot builds; 27. Let create multipage PDF document - in TWebCanvas batch mode; 28. Let add external links via `#url[link]{label}` syntax - including jsPDF support; 29. Support TAttMarker style with line width bigger than 1; 30. Internals - upgrade to eslint 9; 31. Internals - do not select pad (aka gPad) for objects drawing, always use assigned pad painter; 32. Fix - properly save zoomed ranges in drawingJSON(); 33. Fix - properly redraw TMultiGraph; 34. Fix - show empty bin in TProfile2D if it has entries #316; 35. Fix - unzooming on log scale was extending range forevever; 36. Fix - do not force style 8 for hist markers; 37. Fix - ensure minimal hist title height; 38. Fix - disable Bloom effects on Android TGeo displays; 39. Fix - handle reordering of fragments in multipart reply #319; 40. Fix - properly show non-zero entries #320; 41. Fix - display empty hist bin if fSumw2 not zero. ## Changes in 7.7.4; 1. Fix - TGraph Y range selection, do not cross 0; 2. Fix - correctly handle `#font[id]` in latex; 3. Fix - store canvas with embed geometry drawing; 4. Fix - upgrade rollup and import.meta polyfill. ## Changes in 7.7.3; 1. Fix - correctly handle in I/O empty std::map; 2. Fix - reading of small (<1KB) ROOT files; 3. Fix - race condition in zstd initialization #318; 4. Fix - deployment with zstd #317. ## Changes in 7.7.2; 1. Fix - hide empty title on the canvas; 2. Fix - properly handle zooming in THStack histogram; 3. Fix - always use 0 as minimum in THStack drawings; 4. Fix - always show all ticks for labeled axis; 5. Fix - ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/changes.md:2478,log,log,2478,js/changes.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/changes.md,1,['log'],['log']
Testability,"lag to the linker. Using the specified flags will generate four intermediate bytecode files:. #. a.out.0.0.preopt.bc (Before any link-time optimizations (LTO) are applied); #. a.out.0.2.internalize.bc (After initial optimizations are applied); #. a.out.0.4.opt.bc (After an extensive set of optimizations); #. a.out.0.5.precodegen.bc (After LTO but before translating into machine code). Execute one of the following commands to identify the source of the problem:. #. ``opt ""-passes=lto<O3>"" a.out.0.2.internalize.bc``; #. ``llc a.out.0.5.precodegen.bc``. If one of these do crash, you should be able to reduce; this with :program:`llvm-reduce`; command line (use the bc file corresponding to the command above that failed):. .. code-block:: bash. llvm-reduce --test reduce.sh a.out.0.2.internalize.bc. Example of reduce.sh script. .. code-block:: bash. $ cat reduce.sh; #!/bin/bash -e. path/to/not --crash path/to/opt ""-passes=lto<O3>"" $1 -o temp.bc 2> err.log; grep -q ""It->second == &Insn"" err.log. Here we have grepped the failed assert message. Please run this, then file a bug with the instructions and reduced .bc file; that llvm-reduce emits. .. _miscompiling:. Miscompilations; ===============. If clang successfully produces an executable, but that executable doesn't run; right, this is either a bug in the code or a bug in the compiler. The first; thing to check is to make sure it is not using undefined behavior (e.g.; reading a variable before it is defined). In particular, check to see if the; program is clean under various `sanitizers; <https://github.com/google/sanitizers>`_ (e.g. ``clang; -fsanitize=undefined,address``) and `valgrind <http://valgrind.org/>`_. Many; ""LLVM bugs"" that we have chased down ended up being bugs in the program being; compiled, not LLVM. Once you determine that the program itself is not buggy, you should choose; which code generator you wish to compile the program with (e.g. LLC or the JIT); and optionally a series of LLVM passes to run. For exa",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst:7770,log,log,7770,interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst,1,['log'],['log']
Testability,lang (Windows); ^^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: none. Logical View:; [000] {File} 'pr-43860-codeview-clang.o' -> COFF-x86-64. [001] {CompileUnit} 'pr-43860.cpp'; [002] {Producer} 'clang version 14.0.0'; [002] 2 {Function} inlined 'InlineFunction' -> 'int'; [003] {Parameter} '' -> 'int'; [002] {Function} extern not_inlined 'test' -> 'int'; [003] {Variable} 'A' -> 'int'; [003] {InlinedFunction} inlined 'InlineFunction' -> 'int'; [004] {Parameter} 'Param' -> 'int'; [004] {Variable} 'Var_1' -> 'int'; [004] {Variable} 'Var_2' -> 'int'; [003] {Parameter} 'Param_1' -> 'int'; [003] {Parameter} 'Param_2' -> 'int'. CODEVIEW - MSVC (Windows); ^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: none. Logical View:; [000] {File} 'pr-43860-codeview-msvc.o' -> COFF-i386. [001] {CompileUnit} 'pr-43860.cpp'; [002] {Producer} 'Microsoft (R) Optimizing Compiler'; [002] {Function} extern not_inlined 'InlineFunction' -> 'int'; [003] {Block}; [004] {Variable} 'Var_2' -> 'int'; [003] {Variable} 'Param' -> 'int'; [003] {Variable} 'Var_1' -> 'int'; [002] {Function} extern not_inlined 'test' -> 'int'; [003] {Variable} 'A' -> 'int'; [003] {Variable} 'Param_1' -> 'int'; [003] {Variable} 'Param_2' -> 'int'. DWARF - Clang (Linux); ^^^^^^^^^^^^^^^^^^^^^. .. code-block:: none. Logical View:; [000] {File} 'pr-43860-dwarf-clang.o' -> elf64-x86-64. [001] {CompileUnit} 'pr-43860.cpp'; [002] {Producer} 'clang version 14.0.0'; [002] 2 {Function} extern inlined 'InlineFunction' -> 'int'; [003] {Block}; [004] 5 {Variable} 'Var_2' -> 'int'; [003] 2 {Parameter} 'Param' -> 'int'; [003] 3 {Variable} 'Var_1' -> 'int'; [002] 11 {Function} extern not_inlined 'test' -> 'int'; [003] 12 {Variable} 'A' -> 'int'; [003] 14 {InlinedFunction} inlined 'InlineFunction' -> 'int'; [004] {Block}; [005] {Variable} 'Var_2' -> 'int'; [004] {Parameter} 'Param' -> 'int'; [004] {Variable} 'Var_1' -> 'int'; [003] 11 {Parameter} 'Param_1' -> 'int'; [003] 11 {Parameter} 'Param_2' -> 'int'. DWARF - GCC (Linux); ^^^^^^^^^^^^^^^^^^^.,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:51306,test,test,51306,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['test'],['test']
Testability,"lang - Features and Goals. Clang - Features and Goals. This page describes the features and goals of; Clang in more detail and gives a more broad explanation about what we mean.; These features are:. End-User Features:. Fast compiles and low memory use; Expressive diagnostics; GCC compatibility. Utility and Applications:. Library based architecture; Support diverse clients; Integration with IDEs; Use the LLVM 'BSD' License. Internal Design and Implementation:. A real-world, production quality compiler; A simple and hackable code base; A single unified parser for C, Objective C, C++,; and Objective C++; Conformance with C/C++/ObjC and their; variants. End-User Features. Fast compiles and Low Memory Use. A major focus of our work on clang is to make it fast, light and scalable.; The library-based architecture of clang makes it straight-forward to time and; profile the cost of each layer of the stack, and the driver has a number of; options for performance analysis. Many detailed benchmarks can be found online.; Compile time performance is important, but when using clang as an API, often; memory use is even more so: the less memory the code takes the more code you can; fit into memory at a time (useful for whole program analysis tools, for; example).; In addition to being efficient when pitted head-to-head against GCC in batch; mode, clang is built with a library based; architecture that makes it relatively easy to adapt it and build new tools; with it. This means that it is often possible to apply out-of-the-box thinking; and novel techniques to improve compilation in various ways. Expressive Diagnostics. In addition to being fast and functional, we aim to make Clang extremely user; friendly. As far as a command-line compiler goes, this basically boils down to; making the diagnostics (error and warning messages) generated by the compiler; be as useful as possible. There are several ways that we do this, but the; most important are pinpointing exactly what is wrong in ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/features.html:995,benchmark,benchmarks,995,interpreter/llvm-project/clang/www/features.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/features.html,1,['benchmark'],['benchmarks']
Testability,"lang -c --target=spirv64 -cl-ext=-cl_khr_fp64 test.cl. Enabling all extensions except double support in R600 AMD GPU can be done using:. .. code-block:: console. $ clang --target=r600 -cl-ext=-all,+cl_khr_fp16 test.cl. Note that some generic targets e.g. SPIR/SPIR-V enable all extensions/features in; clang by default. OpenCL Targets; --------------. OpenCL targets are derived from the regular Clang target classes. The OpenCL; specific parts of the target representation provide address space mapping as; well as a set of supported extensions. Specific Targets; ^^^^^^^^^^^^^^^^. There is a set of concrete HW architectures that OpenCL can be compiled for. - For AMD target:. .. code-block:: console. $ clang --target=amdgcn-amd-amdhsa -mcpu=gfx900 test.cl. - For Nvidia architectures:. .. code-block:: console. $ clang --target=nvptx64-unknown-unknown test.cl. Generic Targets; ^^^^^^^^^^^^^^^. - A SPIR-V binary can be produced for 32 or 64 bit targets. .. code-block:: console. $ clang --target=spirv32 -c test.cl; $ clang --target=spirv64 -c test.cl. More details can be found in :ref:`the SPIR-V support section <spir-v>`. - SPIR is available as a generic target to allow portable bitcode to be produced; that can be used across GPU toolchains. The implementation follows `the SPIR; specification <https://www.khronos.org/spir>`_. There are two flavors; available for 32 and 64 bits. .. code-block:: console. $ clang --target=spir test.cl -emit-llvm -c; $ clang --target=spir64 test.cl -emit-llvm -c. Clang will generate SPIR v1.2 compatible IR for OpenCL versions up to 2.0 and; SPIR v2.0 for OpenCL v2.0 or C++ for OpenCL. - x86 is used by some implementations that are x86 compatible and currently; remains for backwards compatibility (with older implementations prior to; SPIR target support). For ""non-SPMD"" targets which cannot spawn multiple; work-items on the fly using hardware, which covers practically all non-GPU; devices such as CPUs and DSPs, additional processing is needed for",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:145367,test,test,145367,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,lang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/math/TwoInputSingleOutputDiff.h; libc/fuzzing/stdlib/atof_differential_fuzz.cpp; libc/fuzzing/stdlib/qsort_fuzz.cpp; libc/fuzzing/stdlib/StringPar,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129724,benchmark,benchmarks,129724,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,"lang::coro_lifetimebound]]`` attribute.; All parameters of a function are considered to be lifetime bound if the function; returns a type annotated with ``[[clang::coro_lifetimebound]]`` and ``[[clang::coro_return_type]]``.; This analysis can be disabled for a function by annotating the function with ``[[clang::coro_disable_lifetimebound]]``. Improvements to Clang's diagnostics; -----------------------------------; - Clang constexpr evaluator now prints template arguments when displaying; template-specialization function calls.; - Clang contexpr evaluator now displays notes as well as an error when a constructor; of a base class is not called in the constructor of its derived class.; - Clang no longer emits ``-Wmissing-variable-declarations`` for variables declared; with the ``register`` storage class.; - Clang's ``-Wswitch-default`` flag now diagnoses whenever a ``switch`` statement; does not have a ``default`` label.; - Clang's ``-Wtautological-negation-compare`` flag now diagnoses logical; tautologies like ``x && !x`` and ``!x || x`` in expressions. This also; makes ``-Winfinite-recursion`` diagnose more cases.; (`#56035 <https://github.com/llvm/llvm-project/issues/56035>`_).; - Clang constexpr evaluator now diagnoses compound assignment operators against; uninitialized variables as a read of uninitialized object.; (`#51536 <https://github.com/llvm/llvm-project/issues/51536>`_); - Clang's ``-Wformat-truncation`` now diagnoses ``snprintf`` call that is known to; result in string truncation.; (`#64871 <https://github.com/llvm/llvm-project/issues/64871>`_).; Existing warnings that similarly warn about the overflow in ``sprintf``; now falls under its own warning group ```-Wformat-overflow`` so that it can; be disabled separately from ``Wfortify-source``.; These two new warning groups have subgroups ``-Wformat-truncation-non-kprintf``; and ``-Wformat-overflow-non-kprintf``, respectively. These subgroups are used when; the format string contains ``%p`` format specifier",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst:23387,log,logical,23387,interpreter/llvm-project/clang/docs/ReleaseNotes.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst,1,['log'],['logical']
Testability,"lang\test. For CMake builds e.g. on Windows with Visual Studio, you will need; to specify your build configuration (Debug, Release, etc.) via; --param=build_config=(build config). You may also need to specify; the build mode (Win32, etc) via --param=build_mode=(build mode).; Additionally, you will need to specify the lit site configuration which; lives in (build dir)\tools\clang\test, via; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg.; ; To run a single test:. python (path to llvm)\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg; (path to llvm)\llvm\tools\clang\test\(dir)\(test). For example:. python C:\Tools\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site_config=C:\Tools\build\tools\clang\test\lit.site.cfg; C:\Tools\llvm\tools\clang\test\Sema\wchar.c. The -sv option above tells the runner to show the test output if; any tests failed, to help you determine the cause of failure.; You can also pass in the --no-progress-bar option if you wish to disable; progress indications while the tests are running.; Your output might look something like this:; lit.py: lit.cfg:152: note: using clang: 'C:\Tools\llvm\bin\Release\clang.EXE'; -- Testing: Testing: 2534 tests, 4 threads --; Testing: 0 .. 10.. 20.. 30.. 40.. 50.. 60.. 70.. 80.. 90..; Testing Time: 81.52s; Passed : 2503; Expectedly Failed: 28; Unsupported : 3. The statistic, ""Failed"" (not shown if all tests pass), is the important one. Testing changes affecting libc++. Some changes in Clang affect libc++,; for example:. Changing the output of Clang's diagnostics.; Changing compiler builtins, especially the builtins used for type traits; or replacements of library functions like std::move or; std::forward. After adjusting libc++ to work with the changes, the next revision will be; tested by libc++'s; pre-commit CI. For most configurations, the pre-commi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html:7299,test,test,7299,interpreter/llvm-project/clang/www/hacking.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html,2,['test'],"['test', 'tests']"
Testability,"laps` folder is empty but can be filled after; performing a geometry validity check (see section: ""Checking the; Geometry""). If tracking is performed using `TGeo`, the folder; `Tracks` might contain user-defined tracks that can be; visualized/animated in the geometry context (see section: ""Creating and; Visualizing Tracks""). Since for the time being we are interested more in; the geometrical hierarchy, we will focus on the last two displayed items; `TOP `and `TOP_1`. These are the top volume and the corresponding top; node in the hierarchy. Double clicking on the `TOP` volume will unfold all different volumes; contained by the top volume. In the right panel, we will see all the; volumes contained by `TOP` (if the same is positioned 4 times we will; get 4 identical items). This rule will apply to any clicked volume in; the hierarchy. Note that right clicking a volume item activates the; volume context menu containing several specific methods. We will call; the volume hierarchy developed in this way as the; `logical geometry graph`. The volume objects are nodes inside this graph; and the same volume can be accessed starting from different branches. On the other hand, the real geometrical objects that are seen when; visualizing or tracking the geometry are depicted in the `TOP_1` branch.; These are the nodes of the `physical` `tree` of positioned volumes; represented by TGeoNode objects. This hierarchy is a tree since a; node can have only one parent and several daughters. For a better; understanding of the hierarchy, have a look at TGeoManage. Just close now the `X3D` window and focus at the wire frame picture; drawn in a pad. Activate Options/Event Status. Moving the mouse in the; pad, you will notice that objects are sometimes changing color to red.; Volumes are highlighted in this way whenever the mouse pointer is close; enough to one of its vertices. When this happens, the corresponding; volume is selected and you will see in the bottom right size of the %ROOT; can",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md:12868,log,logical,12868,geom/geom/doc/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md,1,['log'],['logical']
Testability,"lar code path is; unconditionally a bug (not originating from user input; see below) of some kind.; Use of ``assert`` should always include a testable predicate (as opposed to; ``assert(false)``). If the error condition can be triggered by user input then the; recoverable error mechanism described in :doc:`ProgrammersManual` should be; used instead. In cases where this is not practical, ``report_fatal_error`` may; be used. Another issue is that values used only by assertions will produce an ""unused; value"" warning when assertions are disabled. For example, this code will warn:. .. code-block:: c++. unsigned Size = V.size();; assert(Size > 42 && ""Vector smaller than it should be"");. bool NewToSet = Myset.insert(Value);; assert(NewToSet && ""The value shouldn't be in the set yet"");. These are two interesting different cases. In the first case, the call to; ``V.size()`` is only useful for the assert, and we don't want it executed when; assertions are disabled. Code like this should move the call into the assert; itself. In the second case, the side effects of the call must happen whether; the assert is enabled or not. In this case, the value should be cast to void to; disable the warning. To be specific, it is preferred to write the code like; this:. .. code-block:: c++. assert(V.size() > 42 && ""Vector smaller than it should be"");. bool NewToSet = Myset.insert(Value); (void)NewToSet;; assert(NewToSet && ""The value shouldn't be in the set yet"");. Do Not Use ``using namespace std``; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. In LLVM, we prefer to explicitly prefix all identifiers from the standard; namespace with an ""``std::``"" prefix, rather than rely on ""``using namespace; std;``"". In header files, adding a ``'using namespace XXX'`` directive pollutes the; namespace of any source file that ``#include``\s the header, creating; maintenance issues. In implementation files (e.g. ``.cpp`` files), the rule is more of a stylistic; rule, but is still important. Basically, using expli",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst:48306,assert,assert,48306,interpreter/llvm-project/llvm/docs/CodingStandards.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst,1,['assert'],['assert']
Testability,"lasses) are an important part of the AST.; Types are accessed through the ``ASTContext`` class, which implicitly creates; and uniques them as they are needed. Types have a couple of non-obvious; features: 1) they do not capture type qualifiers like ``const`` or ``volatile``; (see :ref:`QualType <QualType>`), and 2) they implicitly capture typedef; information. Once created, types are immutable (unlike decls). Typedefs in C make semantic analysis a bit more complex than it would be without; them. The issue is that we want to capture typedef information and represent it; in the AST perfectly, but the semantics of operations need to ""see through""; typedefs. For example, consider this code:. .. code-block:: c++. void func() {; typedef int foo;; foo X, *Y;; typedef foo *bar;; bar Z;; *X; // error; **Y; // error; **Z; // error; }. The code above is illegal, and thus we expect there to be diagnostics emitted; on the annotated lines. In this example, we expect to get:. .. code-block:: text. test.c:6:1: error: indirection requires pointer operand ('foo' invalid); *X; // error; ^~; test.c:7:1: error: indirection requires pointer operand ('foo' invalid); **Y; // error; ^~~; test.c:8:1: error: indirection requires pointer operand ('foo' invalid); **Z; // error; ^~~. While this example is somewhat silly, it illustrates the point: we want to; retain typedef information where possible, so that we can emit errors about; ""``std::string``"" instead of ""``std::basic_string<char, std:...``"". Doing this; requires properly keeping typedef information (for example, the type of ``X``; is ""``foo``"", not ""``int``""), and requires properly propagating it through the; various operators (for example, the type of ``*Y`` is ""``foo``"", not; ""``int``""). In order to retain this information, the type of these expressions; is an instance of the ``TypedefType`` class, which indicates that the type of; these expressions is a typedef for ""``foo``"". Representing types like this is great for diagnostics, bec",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:62162,test,test,62162,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,1,['test'],['test']
Testability,"lck_mtx_lock; lck_rw_lock_exclusive; lck_rw_lock_shared; pthread_mutex_trylock; pthread_rwlock_tryrdlock; pthread_rwlock_tryrwlock; lck_mtx_try_lock; lck_rw_try_lock_exclusive; lck_rw_try_lock_shared; pthread_mutex_unlock; pthread_rwlock_unlock; lck_mtx_unlock; lck_rw_done. pthread_mutex_t mtx;. void test() {; pthread_mutex_lock(&mtx);; pthread_mutex_lock(&mtx);; // warn: this lock has already been acquired; }. lck_mtx_t lck1, lck2;. void test() {; lck_mtx_lock(&lck1);; lck_mtx_lock(&lck2);; lck_mtx_unlock(&lck1);; // warn: this was not the most recently acquired lock; }. lck_mtx_t lck1, lck2;. void test() {; if (lck_mtx_try_lock(&lck1) == 0); return;. lck_mtx_lock(&lck2);; lck_mtx_unlock(&lck1);; // warn: this was not the most recently acquired lock; }. alpha.unix.SimpleStream; (C); Check for misuses of stream APIs:; fopen; fclose(demo checker, the subject of the demo; (Slides; ,Video); by Anna Zaks and Jordan Rose presented at the ; 2012 LLVM Developers' Meeting). void test() {; FILE *F = fopen(""myfile.txt"", ""w"");; } // warn: opened file is never closed. void test() {; FILE *F = fopen(""myfile.txt"", ""w"");. if (F); fclose(F);. fclose(F); // warn: closing a previously closed file stream; }. alpha.unix.Stream; (C); Check stream handling functions:fopen; tmpfile; fclose; fread; fwrite; fseek; ftell; rewind; fgetpos; fsetpos; clearerr; feof; ferror; fileno. void test() {; FILE *p = fopen(""foo"", ""r"");; } // warn: opened file is never closed. void test() {; FILE *p = fopen(""foo"", ""r"");; fseek(p, 1, SEEK_SET); // warn: stream pointer might be NULL; fclose(p);; }. void test() {; FILE *p = fopen(""foo"", ""r"");. if (p); fseek(p, 1, 3);; // warn: third arg should be SEEK_SET, SEEK_END, or SEEK_CUR. fclose(p);; }. void test() {; FILE *p = fopen(""foo"", ""r"");; fclose(p);; fclose(p); // warn: already closed; }. void test() {; FILE *p = tmpfile();; ftell(p); // warn: stream pointer might be NULL; fclose(p);; }. alpha.unix.cstring.BufferOverlap; (C); Checks for overlap in two buffer a",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html:14089,test,test,14089,interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,1,['test'],['test']
Testability,"ld a store into ""zeroing a reg"". Instead of:. xorl %eax, %eax; movl %eax, 124(%esp). we should get:. movl $0, 124(%esp). if the flags of the xor are dead. Likewise, we isel ""x<<1"" into ""add reg,reg"". If reg is spilled, this should; be folded into: shl [mem], 1. //===---------------------------------------------------------------------===//. In SSE mode, we turn abs and neg into a load from the constant pool plus a xor; or and instruction, for example:. 	xorpd	LCPI1_0, %xmm2. However, if xmm2 gets spilled, we end up with really ugly code like this:. 	movsd	(%esp), %xmm0; 	xorpd	LCPI1_0, %xmm0; 	movsd	%xmm0, (%esp). Since we 'know' that this is a 'neg', we can actually ""fold"" the spill into; the neg/abs instruction, turning it into an *integer* operation, like this:. 	xorl 2147483648, [mem+4] ## 2147483648 = (1 << 31). you could also use xorb, but xorl is less likely to lead to a partial register; stall. Here is a contrived testcase:. double a, b, c;; void test(double *P) {; double X = *P;; a = X;; bar();; X = -X;; b = X;; bar();; c = X;; }. //===---------------------------------------------------------------------===//. The generated code on x86 for checking for signed overflow on a multiply the; obvious way is much longer than it needs to be. int x(int a, int b) {; long long prod = (long long)a*b;; return prod > 0x7FFFFFFF || prod < (-0x7FFFFFFF-1);; }. See PR2053 for more details. //===---------------------------------------------------------------------===//. We should investigate using cdq/ctld (effect: edx = sar eax, 31); more aggressively; it should cost the same as a move+shift on any modern; processor, but it's a lot shorter. Downside is that it puts more; pressure on register allocation because it has fixed operands. Example:; int abs(int x) {return x < 0 ? -x : x;}. gcc compiles this to the following when using march/mtune=pentium2/3/4/m/etc.:; abs:; movl 4(%esp), %eax; cltd; xorl %edx, %eax; subl %edx, %eax; ret. //===---------------------------------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:22896,test,test,22896,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt,1,['test'],['test']
Testability,"ld be; run before every commit. The whole programs tests are referred to as the ""LLVM test suite"" (or; ""test-suite"") and are in the ``test-suite``; `repository on GitHub <https://github.com/llvm/llvm-test-suite.git>`_.; For historical reasons, these tests are also referred to as the ""nightly; tests"" in places, which is less ambiguous than ""test-suite"" and remains; in use although we run them much more often than nightly. Unit tests; ----------. Unit tests are written using `Google Test <https://github.com/google/googletest/blob/master/docs/primer.md>`_; and `Google Mock <https://github.com/google/googletest/blob/master/docs/gmock_for_dummies.md>`_; and are located in the ``llvm/unittests`` directory.; In general unit tests are reserved for targeting the support library and other; generic data structure, we prefer relying on regression tests for testing; transformations and analysis on the IR. Regression tests; ----------------. The regression tests are small pieces of code that test a specific; feature of LLVM or trigger a specific bug in LLVM. The language they are; written in depends on the part of LLVM being tested. These tests are driven by; the :doc:`Lit <CommandGuide/lit>` testing tool (which is part of LLVM), and; are located in the ``llvm/test`` directory. Typically when a bug is found in LLVM, a regression test containing just; enough code to reproduce the problem should be written and placed; somewhere underneath this directory. For example, it can be a small; piece of LLVM IR distilled from an actual application or benchmark. Testing Analysis; ----------------. An analysis is a pass that infer properties on some part of the IR and not; transforming it. They are tested in general using the same infrastructure as the; regression tests, by creating a separate ""Printer"" pass to consume the analysis; result and print it on the standard output in a textual format suitable for; FileCheck.; See `llvm/test/Analysis/BranchProbabilityInfo/loop.ll <https://github.com/",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:1955,test,tests,1955,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,2,['test'],"['test', 'tests']"
Testability,"ld could be; obtained by reading a 32 bit value and applying the mask ``0x0FFFFFFF``. Function action types are as follows. +---------------+--------------+-----------------------------------------------+; | Type | Number | Description |; +===============+==============+===============================================+; | Entry | ``0`` | Typical function entry. |; +---------------+--------------+-----------------------------------------------+; | Exit | ``1`` | Typical function exit. |; +---------------+--------------+-----------------------------------------------+; | Tail_Exit | ``2`` | An exit from a function due to tail call |; | | | optimization. |; +---------------+--------------+-----------------------------------------------+; | Entry_Args | ``3`` | A function entry that records arguments. |; +---------------+--------------+-----------------------------------------------+. Entry_Args records do not contain the arguments themselves. Instead, metadata; records for each of the logged args follow the function record in the stream. Metadata Records; ----------------. Interspersed throughout the buffer are 16 byte Metadata records. For typically; instrumented binaries, they will be sparser than Function records, and they; provide a fuller picture of the binary execution state. Metadata record layout is partially record dependent, but they share a common; structure. The same bit field rules described for function records apply to the first byte; of MetadataRecords. Within this byte, little endian machines use lsb to msb; ordering and big endian machines use msb to lsb ordering. +---------------+--------------+-----------------------------------------------+; | Field | Size | Description |; +===============+==============+===============================================+; | discriminant | ``1 bit`` | Indicates whether a reader should read a |; | | | Function or Metadata record. Set to ``1`` for |; | | | Metadata records. |; +---------------+--------------+-------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRayFDRFormat.rst:7926,log,logged,7926,interpreter/llvm-project/llvm/docs/XRayFDRFormat.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRayFDRFormat.rst,1,['log'],['logged']
Testability,"ld; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF sessions in valgrind. The second; argument of TProof::Open is used to trigger the relevant; settings. To valgrind the master session start PROOF; with TProof::Open(""<master>"",""valgrind=master"");; to valgrind two workers sessions use; TProof::Open(""<master>"",""valgrind=workers""); to valgrind; master and 2 workers, use; TProof::Open(""<master>"",""valgrind=master+workers""). Other; combinations are available. ; The valgrind logs are available with the tag; '<ordinal>-valgrind' in the log dialog or form; TProofMgr::GetSessionLogs() .; To add options to valgrind execute; TProof::AddEnvVar(""PROOF_WRAPPERCMD"",; ""valgrind_opts:<options>"") before starting the; session. ; Add new static TProof::LogViewer(""<master>""); to graphically browse the session logs independently of the progress; dialog. The improved log window allows to chose a different master; and/or session  and displays human readable information about; the starting time of the session being browsed.; A set of scripts for quick interaction with a dataset; manager via PROOF are available under $ROOTSYS/etc/proof/utils/pq2 .; The scripts are prefixed; pq2 (proof; quick query - or; proof-dq2); and allow to {browse, register, remove, verify} datasets on a given; PROOF master. See $ROOTSYS/etc/proof/utils/pq2/README for more; information. Improvements. Enable by default schema evolution in TMessage; can be; disabled setting 'Proof.SchemaEvolution:; 0' .; Extend the functionality of the dataset API to obtaine; information on per-server base; add also two new methods:. TProof::SetDataSetTreeName(<dataset>,<treename>):; set/change the default tree name in the TFileCollection;; TProof::ExistsDataSet(<dataset>):; check; by-name the availability of a given dataset;. In ProofBench, . Load the macro before executing it. This allows to; circumvent a problem recently fixed giving less dependency on the; server v",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:4502,log,log,4502,proof/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html,1,['log'],['log']
Testability,"le -- ``git bisect; run`` doesn't check for that, it just assumes the run script failed each time. Once your run script works, run ``git bisect run ./run.sh`` and a few hours; later you'll know which commit caused the regression. (This is a very simple run script. Often, you want to use just-built clang; to build a different project and then run a built executable of that project; in the run script.). Bisecting across multiple roots; ===============================. Here's how LLVM's history currently looks:. .. code-block:: none. A-o-o-......-o-D-o-o-HEAD; /; B-o-...-o-C-. ``A`` is the first commit in LLVM ever, ``97724f18c79c``. ``B`` is the first commit in MLIR, ``aed0d21a62db``. ``D`` is the merge commit that merged MLIR into the main LLVM repository,; ``0f0d0ed1c78f``. ``C`` is the last commit in MLIR before it got merged, ``0f0d0ed1c78f^2``. (The; ``^n`` modifier selects the n'th parent of a merge commit.). ``git bisect`` goes through all parent revisions. Due to the way MLIR was; merged, at every revision at ``C`` or earlier, *only* the ``mlir/`` directory; exists, and nothing else does. As of early 2020, there is no flag to ``git bisect`` to tell it to not; descend into all reachable commits. Ideally, we'd want to tell it to only; follow the first parent of ``D``. The best workaround is to pass a list of directories to ``git bisect``:; If you know the bug is due to a change in llvm, clang, or compiler-rt, use. .. code-block:: bash. git bisect start -- clang llvm compiler-rt. That way, the commits in ``mlir`` are never evaluated. Alternatively, ``git bisect skip aed0d21a6 aed0d21a6..0f0d0ed1c78f`` explicitly; skips all commits on that branch. It takes 1.5 minutes to run on a fast; machine, and makes ``git bisect log`` output unreadable. (``aed0d21a6`` is; listed twice because git ranges exclude the revision listed on the left,; so it needs to be ignored explicitly.). More Resources; ==============. https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GitBisecting.rst:4459,log,log,4459,interpreter/llvm-project/llvm/docs/GitBisecting.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GitBisecting.rst,1,['log'],['log']
Testability,"le a bug with the instructions and reduced .bc file; that llvm-reduce emits. .. _miscompiling:. Miscompilations; ===============. If clang successfully produces an executable, but that executable doesn't run; right, this is either a bug in the code or a bug in the compiler. The first; thing to check is to make sure it is not using undefined behavior (e.g.; reading a variable before it is defined). In particular, check to see if the; program is clean under various `sanitizers; <https://github.com/google/sanitizers>`_ (e.g. ``clang; -fsanitize=undefined,address``) and `valgrind <http://valgrind.org/>`_. Many; ""LLVM bugs"" that we have chased down ended up being bugs in the program being; compiled, not LLVM. Once you determine that the program itself is not buggy, you should choose; which code generator you wish to compile the program with (e.g. LLC or the JIT); and optionally a series of LLVM passes to run. For example:. .. code-block:: bash. bugpoint -run-llc [... optzn passes ...] file-to-test.bc --args -- [program arguments]. bugpoint will try to narrow down your list of passes to the one pass that; causes an error, and simplify the bitcode file as much as it can to assist; you. It will print a message letting you know how to reproduce the; resulting error. The :doc:`OptBisect <OptBisect>` page shows an alternative method for finding; incorrect optimization passes. Incorrect code generation; =========================. Similarly to debugging incorrect compilation by mis-behaving passes, you; can debug incorrect code generation by either LLC or the JIT, using; ``bugpoint``. The process ``bugpoint`` follows in this case is to try to; narrow the code down to a function that is miscompiled by one or the other; method, but since for correctness, the entire program must be run,; ``bugpoint`` will compile the code it deems to not be affected with the C; Backend, and then link in the shared object it generates. To debug the JIT:. .. code-block:: bash. bugpoint -run-jit -outpu",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst:8850,test,test,8850,interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst,1,['test'],['test']
Testability,"le baseline and experiment result files by taking the minimum; runtime each:. ```bash; % test-suite/utils/compare.py base0.json base1.json base2.json vs exp0.json exp1.json exp2.json; ```. ### Continuous Tracking with LNT. LNT is a set of client and server tools for continuously monitoring; performance. You can find more information at; [https://llvm.org/docs/lnt](https://llvm.org/docs/lnt). The official LNT instance; of the LLVM project is hosted at [http://lnt.llvm.org](http://lnt.llvm.org). External Suites; ---------------. External suites such as SPEC can be enabled by either. - placing (or linking) them into the `test-suite/test-suite-externals/xxx` directory (example: `test-suite/test-suite-externals/speccpu2000`); - using a configuration option such as `-D TEST_SUITE_SPEC2000_ROOT=path/to/speccpu2000`. You can find further information in the respective README files such as; `test-suite/External/SPEC/README`. For the SPEC benchmarks you can switch between the `test`, `train` and; `ref` input datasets via the `TEST_SUITE_RUN_TYPE` configuration option.; The `train` dataset is used by default. Custom Suites; -------------. You can build custom suites using the test-suite infrastructure. A custom suite; has a `CMakeLists.txt` file at the top directory. The `CMakeLists.txt` will be; picked up automatically if placed into a subdirectory of the test-suite or when; setting the `TEST_SUITE_SUBDIRS` variable:. ```bash; % cmake -DTEST_SUITE_SUBDIRS=path/to/my/benchmark-suite ../test-suite; ```. Profile Guided Optimization; ---------------------------. Profile guided optimization requires to compile and run twice. First the; benchmark should be compiled with profile generation instrumentation enabled; and setup for training data. The lit runner will merge the profile files; using `llvm-profdata` so they can be used by the second compilation run. Example:; ```bash; # Profile generation run using LLVM IR PGO:; % cmake -DTEST_SUITE_PROFILE_GENERATE=ON \; -DTEST_SUITE_USE_IR_",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:9358,benchmark,benchmarks,9358,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,2,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,"le contains more comprehensive tests including whole C; and C++ programs. See the :doc:`TestSuiteGuide` for details. Unit and Regression tests; -------------------------. To run all of the LLVM unit tests use the check-llvm-unit target:. .. code-block:: bash. % make check-llvm-unit. To run all of the LLVM regression tests use the check-llvm target:. .. code-block:: bash. % make check-llvm. In order to get reasonable testing performance, build LLVM and subprojects; in release mode, i.e. .. code-block:: bash. % cmake -DCMAKE_BUILD_TYPE=""Release"" -DLLVM_ENABLE_ASSERTIONS=On. If you have `Clang <https://clang.llvm.org/>`_ checked out and built, you; can run the LLVM and Clang tests simultaneously using:. .. code-block:: bash. % make check-all. To run the tests with Valgrind (Memcheck by default), use the ``LIT_ARGS`` make; variable to pass the required options to lit. For example, you can use:. .. code-block:: bash. % make check LIT_ARGS=""-v --vg --vg-leak"". to enable testing with valgrind and with leak checking enabled. To run individual tests or subsets of tests, you can use the ``llvm-lit``; script which is built as part of LLVM. For example, to run the; ``Integer/BitPacked.ll`` test by itself you can run:. .. code-block:: bash. % llvm-lit ~/llvm/test/Integer/BitPacked.ll. or to run all of the ARM CodeGen tests:. .. code-block:: bash. % llvm-lit ~/llvm/test/CodeGen/ARM. The regression tests will use the Python psutil module only if installed in a; **non-user** location. Under Linux, install with sudo or within a virtual; environment. Under Windows, install Python for all users and then run; ``pip install psutil`` in an elevated command prompt. For more information on using the :program:`lit` tool, see ``llvm-lit --help``; or the :doc:`lit man page <CommandGuide/lit>`. Debugging Information tests; ---------------------------. To run debugging information tests simply add the ``cross-project-tests``; project to your ``LLVM_ENABLE_PROJECTS`` define on the cmake; command",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:5876,test,testing,5876,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['testing']
Testability,"le instead; reminderText =; NSLocalizedString(@""1 Reminder"", @""Indicates single reminder"");; } else if (reminderCount >= 2) {; // Warning: Plural cases are not supported across all languages.; // Use a .stringsdict file instead; reminderText =; [NSString stringWithFormat:; NSLocalizedString(@""%@ Reminders"", @""Indicates multiple reminders""),; reminderCount];; }. Security Alpha Checkers. Name, DescriptionExample. alpha.security.ArrayBound; (C); Warn about buffer overflows (older checker). void test() {; char *s = """";; char c = s[1]; // warn; }. struct seven_words {; int c[7];; };. void test() {; struct seven_words a, *p;; p = &a; p[0] = a;; p[1] = a;; p[2] = a; // warn; }. // note: requires unix.Malloc or; // alpha.unix.MallocWithAnnotations checks enabled.; void test() {; int *p = malloc(12);; p[3] = 4; // warn; }. void test() {; char a[2];; int *b = (int*)a;; b[1] = 3; // warn; }. alpha.security.ArrayBoundV2; (C); Warn about buffer overflows (newer checker). void test() {; char *s = """";; char c = s[1]; // warn; }. void test() {; int buf[100];; int *p = buf;; p = p + 99;; p[1] = 1; // warn; }. // note: compiler has internal check for this.; // Use -Wno-array-bounds to suppress compiler warning.; void test() {; int buf[100][100];; buf[0][-1] = 1; // warn; }. // note: requires alpha.security.taint check turned on.; void test() {; char s[] = ""abc"";; int x = getchar();; char c = s[x]; // warn: index is tainted; }. alpha.security.MallocOverflow; (C); Check for overflows in the arguments to malloc(). void test(int n) {; void *p = malloc(n * sizeof(int)); // warn; }. alpha.security.MmapWriteExec; (C); Warn on mmap() calls that are both writable and executable. void test(int n) {; void *c = mmap(NULL, 32, PROT_READ | PROT_WRITE | PROT_EXEC,; MAP_PRIVATE | MAP_ANON, -1, 0);; // warn: Both PROT_WRITE and PROT_EXEC flags are set. This can lead to; // exploitable memory regions, which could be overwritten with malicious; // code; }. alpha.security.ReturnPtrRange; (C); Check for a",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html:10407,test,test,10407,interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,1,['test'],['test']
Testability,"le instead; reminderText =; [NSString stringWithFormat:; NSLocalizedString(@""%@ Reminders"", @""Indicates multiple reminders""),; reminderCount];; }. alpha.security; ^^^^^^^^^^^^^^. .. _alpha-security-ArrayBound:. alpha.security.ArrayBound (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn about buffer overflows (older checker). .. code-block:: c. void test() {; char *s = """";; char c = s[1]; // warn; }. struct seven_words {; int c[7];; };. void test() {; struct seven_words a, *p;; p = &a;; p[0] = a;; p[1] = a;; p[2] = a; // warn; }. // note: requires unix.Malloc or; // alpha.unix.MallocWithAnnotations checks enabled.; void test() {; int *p = malloc(12);; p[3] = 4; // warn; }. void test() {; char a[2];; int *b = (int*)a;; b[1] = 3; // warn; }. .. _alpha-security-ArrayBoundV2:. alpha.security.ArrayBoundV2 (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn about buffer overflows (newer checker). .. code-block:: c. void test() {; char *s = """";; char c = s[1]; // warn; }. void test() {; int buf[100];; int *p = buf;; p = p + 99;; p[1] = 1; // warn; }. // note: compiler has internal check for this.; // Use -Wno-array-bounds to suppress compiler warning.; void test() {; int buf[100][100];; buf[0][-1] = 1; // warn; }. // note: requires alpha.security.taint check turned on.; void test() {; char s[] = ""abc"";; int x = getchar();; char c = s[x]; // warn: index is tainted; }. .. _alpha-security-MallocOverflow:. alpha.security.MallocOverflow (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for overflows in the arguments to ``malloc()``.; It tries to catch ``malloc(n * c)`` patterns, where:. - ``n``: a variable or member access of an object; - ``c``: a constant foldable integral. This checker was designed for code audits, so expect false-positive reports.; One is supposed to silence this checker by ensuring proper bounds checking on; the variable in question using e.g. an ``assert()`` or a branch. .. code-block:: c. void test(int n) {; void *p = malloc(n * sizeof(int)); // warn; }. void test2(int n) {; if",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:61108,test,test,61108,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"le to ( -O3 -static -fomit-frame-pointer):; _x:; movzwl 4(%esp), %eax; movd %eax, %xmm0; movaps _a, %xmm1; pslld %xmm0, %xmm1; movaps %xmm1, _a; ret; _y:; movd 4(%esp), %xmm0; movaps _a, %xmm1; pslld %xmm0, %xmm1; movaps %xmm1, _a; ret. ""y"" looks good, but ""x"" does silly movzwl stuff around into a GPR. It seems; like movd would be sufficient in both cases as the value is already zero ; extended in the 32-bit stack slot IIRC. For signed short, it should also be; save, as a really-signed value would be undefined for pslld. //===---------------------------------------------------------------------===//. #include <math.h>; int t1(double d) { return signbit(d); }. This currently compiles to:; 	subl	$12, %esp; 	movsd	16(%esp), %xmm0; 	movsd	%xmm0, (%esp); 	movl	4(%esp), %eax; 	shrl	$31, %eax; 	addl	$12, %esp; 	ret. We should use movmskp{s|d} instead. //===---------------------------------------------------------------------===//. CodeGen/X86/vec_align.ll tests whether we can turn 4 scalar loads into a single; (aligned) vector load. This functionality has a couple of problems. 1. The code to infer alignment from loads of globals is in the X86 backend,; not the dag combiner. This is because dagcombine2 needs to be able to see; through the X86ISD::Wrapper node, which DAGCombine can't really do.; 2. The code for turning 4 x load into a single vector load is target ; independent and should be moved to the dag combiner.; 3. The code for turning 4 x load into a vector load can only handle a direct ; load from a global or a direct load from the stack. It should be generalized; to handle any load from P, P+4, P+8, P+12, where P can be anything.; 4. The alignment inference code cannot handle loads from globals in non-static; mode because it doesn't look through the extra dyld stub load. If you try; vec_align.ll without -relocation-model=static, you'll see what I mean. //===---------------------------------------------------------------------===//. We should lower store(fneg(load p),",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt:11408,test,tests,11408,interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt,1,['test'],['tests']
Testability,"le. These files serve as both a marker of test suites; and as configuration files which :program:`lit` loads in order to understand; how to find and run the tests inside the test suite. Once :program:`lit` has mapped the inputs into test suites it traverses the; list of inputs adding tests for individual files and recursively searching for; tests in directories. This behavior makes it easy to specify a subset of tests to run, while still; allowing the test suite configuration to control exactly how tests are; interpreted. In addition, :program:`lit` always identifies tests by the test; suite they are in, and their relative path inside the test suite. For; appropriately configured projects, this allows :program:`lit` to provide; convenient and flexible support for out-of-tree builds. .. _test-status-results:. TEST STATUS RESULTS; -------------------. Each test ultimately produces one of the following eight results:. **PASS**. The test succeeded. **FLAKYPASS**. The test succeeded after being re-run more than once. This only applies to; tests containing an ``ALLOW_RETRIES:`` annotation. **XFAIL**. The test failed, but that is expected. This is used for test formats which allow; specifying that a test does not currently work, but wish to leave it in the test; suite. **XPASS**. The test succeeded, but it was expected to fail. This is used for tests which; were specified as expected to fail, but are now succeeding (generally because; the feature they test was broken and has been fixed). **FAIL**. The test failed. **UNRESOLVED**. The test result could not be determined. For example, this occurs when the test; could not be run, the test itself is invalid, or the test was interrupted. **UNSUPPORTED**. The test is not supported in this environment. This is used by test formats; which can report unsupported tests. **TIMEOUT**. The test was run, but it timed out before it was able to complete. This is; considered a failure. Depending on the test format tests may produce additio",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:12498,test,test,12498,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,le/PDB/Inputs; - `5`; - `5`; - `0`; - :good:`100%`; * - lldb/unittests/Target; - `10`; - `6`; - `4`; - :part:`60%`; * - lldb/unittests/TestingSupport; - `5`; - `4`; - `1`; - :part:`80%`; * - lldb/unittests/TestingSupport/Host; - `1`; - `1`; - `0`; - :good:`100%`; * - lldb/unittests/TestingSupport/Symbol; - `3`; - `3`; - `0`; - :good:`100%`; * - lldb/unittests/Thread; - `1`; - `1`; - `0`; - :good:`100%`; * - lldb/unittests/tools/lldb-server/inferior; - `2`; - `0`; - `2`; - :none:`0%`; * - lldb/unittests/tools/lldb-server/tests; - `7`; - `0`; - `7`; - :none:`0%`; * - lldb/unittests/UnwindAssembly/ARM64; - `1`; - `0`; - `1`; - :none:`0%`; * - lldb/unittests/UnwindAssembly/PPC64; - `1`; - `1`; - `0`; - :good:`100%`; * - lldb/unittests/UnwindAssembly/x86; - `1`; - `0`; - `1`; - :none:`0%`; * - lldb/unittests/Utility; - `45`; - `32`; - `13`; - :part:`71%`; * - lldb/utils/lit-cpuid; - `1`; - `0`; - `1`; - :none:`0%`; * - lldb/utils/TableGen; - `6`; - `6`; - `0`; - :good:`100%`; * - llvm/benchmarks; - `1`; - `0`; - `1`; - :none:`0%`; * - llvm/bindings/go/llvm; - `6`; - `3`; - `3`; - :part:`50%`; * - llvm/bindings/ocaml/llvm; - `1`; - `1`; - `0`; - :good:`100%`; * - llvm/cmake; - `2`; - `2`; - `0`; - :good:`100%`; * - llvm/examples/BrainF; - `3`; - `0`; - `3`; - :none:`0%`; * - llvm/examples/Bye; - `1`; - `1`; - `0`; - :good:`100%`; * - llvm/examples/ExceptionDemo; - `1`; - `0`; - `1`; - :none:`0%`; * - llvm/examples/Fibonacci; - `1`; - `0`; - `1`; - :none:`0%`; * - llvm/examples/HowToUseJIT; - `1`; - `0`; - `1`; - :none:`0%`; * - llvm/examples/HowToUseLLJIT; - `1`; - `1`; - `0`; - :good:`100%`; * - llvm/examples/IRTransforms; - `4`; - `4`; - `0`; - :good:`100%`; * - llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1; - `2`; - `1`; - `1`; - :part:`50%`; * - llvm/examples/Kaleidoscope/BuildingAJIT/Chapter2; - `2`; - `1`; - `1`; - :part:`50%`; * - llvm/examples/Kaleidoscope/BuildingAJIT/Chapter3; - `2`; - `1`; - `1`; - :part:`50%`; * - llvm/examples/Kaleidoscope/BuildingAJIT/Chap,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:57930,benchmark,benchmarks,57930,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['benchmark'],['benchmarks']
Testability,"leading ``/`` removed.; %:t On Windows, %/t but a ``:`` is removed if its the second character.; Otherwise, %t but with a single leading ``/`` removed.; %:T On Windows, %/T but a ``:`` is removed if its the second character.; Otherwise, %T but with a single leading ``/`` removed.; ======================= ==============. Other substitutions are provided that are variations on this base set and; further substitution patterns can be defined by each test module. See the; modules :ref:`local-configuration-files`. More detailed information on substitutions can be found in the; :doc:`../TestingGuide`. TEST RUN OUTPUT FORMAT; ~~~~~~~~~~~~~~~~~~~~~~. The :program:`lit` output for a test run conforms to the following schema, in; both short and verbose modes (although in short mode no PASS lines will be; shown). This schema has been chosen to be relatively easy to reliably parse by; a machine (for example in buildbot log scraping), and for other tools to; generate. Each test result is expected to appear on a line that matches:. .. code-block:: none. <result code>: <test name> (<progress info>). where ``<result-code>`` is a standard test result such as PASS, FAIL, XFAIL,; XPASS, UNRESOLVED, or UNSUPPORTED. The performance result codes of IMPROVED and; REGRESSED are also allowed. The ``<test name>`` field can consist of an arbitrary string containing no; newline. The ``<progress info>`` field can be used to report progress information such; as (1/300) or can be empty, but even when empty the parentheses are required. Each test result may include additional (multiline) log information in the; following format:. .. code-block:: none. <log delineator> TEST '(<test name>)' <trailing delineator>; ... log message ...; <log delineator>. where ``<test name>`` should be the name of a preceding reported test, ``<log; delineator>`` is a string of ""*"" characters *at least* four characters long; (the recommended length is 20), and ``<trailing delineator>`` is an arbitrary; (unparsed) string.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:22529,test,test,22529,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"lem, Double_t density); ```. To create a radioactive mixture, one can use radionuclides as well as; stable elements:. ``` {.cpp}; TGeoMixture(const char *name, Int_t nelements, Double_t density);; TGeoMixture::AddElement(TGeoElement *elem,; Double_t weight_fraction);; ```. Once defined, one can retrieve the time evolution for the radioactive; materials/mixtures by using one of the next two methods:. 1. `TGeoMaterial::FillMaterialEvolution(TObjArray *population,`; ` Double_t precision=0.001)`. To use this method, one has to provide an empty **`TObjArray`** object; that will be filled with all elements coming from the decay chain of the; initial radionuclides contained by the material/mixture. The precision; represent the cumulative branching ratio for which decay products are; still considered. ![Concentration of C14 derived elements](pictures/030001B3.png). The population list may contain stable elements as well as; radionuclides, depending on the initial elements. To test if an element; is a radionuclide:. ``` {.cpp}; Bool_t TGeoElement::IsRadioNuclide() const; ```. All radionuclides in the output population list have attached objects; that represent the time evolution of their fraction of nuclei with; respect to the top radionuclide in the decay chain. These objects; (Bateman solutions) can be retrieved and drawn:. ``` {.cpp}; TGeoBatemanSol *TGeoElementRN::Ratio();; void TGeoBatemanSol::Draw();; ```. Another method allows to create the evolution of a given radioactive; material/mixture at a given moment in time:. 2. `TGeoMaterial::DecayMaterial(Double_t time, Double_t precision=0.001)`. The method will create the mixture that result from the decay of a; initial material/mixture at time, while all resulting elements having a; fractional weight less than precision are excluded. A demo macro for radioactive material features is; `$ROOTSYS/tutorials/geom/RadioNuclides.C` It demonstrates also the decay; of a mixture made of radionuclides. ![Concentracion of elements de",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md:20687,test,test,20687,documentation/users-guide/Geometry.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md,1,['test'],['test']
Testability,"lement *elem, Double_t density); ~~~. To create a radioactive mixture, one can use radionuclides as well as; stable elements:. ~~~{.cpp}; TGeoMixture(const char *name, Int_t nelements, Double_t density);; TGeoMixture::AddElement(TGeoElement *elem,; Double_t weight_fraction);; ~~~. Once defined, one can retrieve the time evolution for the radioactive; materials/mixtures by using one of the next two methods:. #### Method 1. ~~~{.cpp}; TGeoMaterial::FillMaterialEvolution(TObjArray *population, Double_t precision=0.001); ~~~. To use this method, one has to provide an empty TObjArray object; that will be filled with all elements coming from the decay chain of the; initial radionuclides contained by the material/mixture. The precision; represent the cumulative branching ratio for which decay products are; still considered. \image html geometry003.png width=600px. The population list may contain stable elements as well as; radionuclides, depending on the initial elements. To test if an element; is a radionuclide:. ~~~{.cpp}; Bool_t TGeoElement::IsRadioNuclide() const; ~~~. All radionuclides in the output population list have attached objects; that represent the time evolution of their fraction of nuclei with; respect to the top radionuclide in the decay chain. These objects; (Bateman solutions) can be retrieved and drawn:. ~~~{.cpp}; TGeoBatemanSol *TGeoElementRN::Ratio();; void TGeoBatemanSol::Draw();; ~~~. #### Method 2. Another method allows to create the evolution of a given radioactive; material/mixture at a given moment in time:. ~~~{.cpp}; TGeoMaterial::DecayMaterial(Double_t time, Double_t precision=0.001); ~~~. The method will create the mixture that result from the decay of a; initial material/mixture at time, while all resulting elements having a; fractional weight less than precision are excluded. A demo macro for radioactive material features is; `$ROOTSYS/tutorials/geom/RadioNuclides.C` It demonstrates also the decay; of a mixture made of radionuclides. \image",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/materials.md:8083,test,test,8083,geom/geom/doc/materials.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/materials.md,1,['test'],['test']
Testability,"lement kinds. .. code-block:: text. =kind: Sort by element kind.; =line: Sort by element line number.; =name: Sort by element name.; =offset: Sort by element offset. .. _report_:. REPORT; ~~~~~~; Depending on the task being executed (print, compare, select), several; layouts are supported to display the elements in a more suitable way,; to make the output easier to understand. .. option:: --report=<value[,value,...]>. With **value** being one of the options in the following list. .. code-block:: text. =all: Include all the below reports. .. code-block:: text. =children: Elements and children are displayed in a tree format.; =list: Elements are displayed in a tabular format.; =parents: Elements and parents are displayed in a tree format.; =view: Elements, parents and children are displayed in a tree format. The **list** layout presents the logical elements in a tabular form; without any parent-child relationship. This may be the preferred way to; display elements that match specific conditions when comparing logical; views, making it easier to find differences. The **children**, **parents** and **view** layout displays the elements; in a tree format, with the scopes representing their nodes, and types,; symbols, lines and other scopes representing the children. The layout; shows the lexical scoping relationship between elements, with the binary; file being the tree root (level 0) and each compilation unit being a; child (level 1). The **children** layout includes the elements that match any given; criteria (:option:`--select`) or (:option:`--compare`) and its children. The **parents** layout includes the elements that match any given; criteria (:option:`--select`) or (:option:`--compare`) and its parents. The combined **view** layout includes the elements that match any given; criteria (:option:`--select`) or (:option:`--compare`), its parents; and children. **Notes**:. 1. When a selection criteria (:option:`--select`) is specified with no; report option, the **list**",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:13138,log,logical,13138,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['log'],['logical']
Testability,"lementationSymbol; JITSymbolFlags::Exported | JITSymbolFlags::Callable } }; });. The ``symbolAliases`` function allows you to define aliases within a single; JITDylib. The ``reexports`` function provides the same functionality, but; operates across JITDylib boundaries. E.g. .. code-block:: c++. auto &JD1 = ... ;; auto &JD2 = ... ;. // Make 'bar' in JD2 an alias for 'foo' from JD1.; JD2.define(; reexports(JD1, SymbolAliasMap({; { Mangle(""bar""), { Mangle(""foo""), JITSymbolFlags::Exported } }; });. The reexports utility can be handy for composing a single JITDylib interface by; re-exporting symbols from several other JITDylibs. .. _Laziness:. Laziness; ========. Laziness in ORC is provided by a utility called ""lazy reexports"". A lazy; reexport is similar to a regular reexport or alias: It provides a new name for; an existing symbol. Unlike regular reexports however, lookups of lazy reexports; do not trigger immediate materialization of the reexported symbol. Instead, they; only trigger materialization of a function stub. This function stub is; initialized to point at a *lazy call-through*, which provides reentry into the; JIT. If the stub is called at runtime then the lazy call-through will look up; the reexported symbol (triggering materialization for it if necessary), update; the stub (to call directly to the reexported symbol on subsequent calls), and; then return via the reexported symbol. By re-using the existing symbol lookup; mechanism, lazy reexports inherit the same concurrency guarantees: calls to lazy; reexports can be made from multiple threads concurrently, and the reexported; symbol can be any state of compilation (uncompiled, already in the process of; being compiled, or already compiled) and the call will succeed. This allows; laziness to be safely mixed with features like remote compilation, concurrent; compilation, concurrent JIT'd code, and speculative compilation. There is one other key difference between regular reexports and lazy reexports; that so",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ORCv2.rst:16945,stub,stub,16945,interpreter/llvm-project/llvm/docs/ORCv2.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ORCv2.rst,1,['stub'],['stub']
Testability,"lemented using a SIMT execution model,; this is the zero-based lane number that corresponds to the source language; thread of execution upon which the user is focused.*. The value must be greater than or equal to 0 and less than the value of the; ``DW_AT_LLVM_lanes`` attribute, otherwise the DWARF expression is; ill-formed. See :ref:`amdgpu-dwarf-low-level-information`. 9. ``DW_OP_LLVM_push_iteration`` *New*. ``DW_OP_LLVM_push_iteration`` pushes the current iteration as a value with; the generic type. *For source language implementations with optimizations that cause multiple; loop iterations to execute concurrently, this is the zero-based iteration; number that corresponds to the source language concurrent loop iteration; upon which the user is focused.*. The value must be greater than or equal to 0 and less than the value of the; ``DW_AT_LLVM_iterations`` attribute, otherwise the DWARF expression is; ill-formed. See :ref:`amdgpu-dwarf-low-level-information`. .. _amdgpu-dwarf-arithmetic-logical-operations:. A.2.5.4.3.2 Arithmetic and Logical Operations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. note::. This section is the same as DWARF Version 5 section 2.5.1.4. .. _amdgpu-dwarf-type-conversions-operations:. A.2.5.4.3.3 Type Conversion Operations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. note::. This section is the same as DWARF Version 5 section 2.5.1.6. .. _amdgpu-dwarf-general-operations:. A.2.5.4.3.4 Special Value Operations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. note::. This section replaces parts of DWARF Version 5 sections 2.5.1.2, 2.5.1.3, and; 2.5.1.7. There are these special value operations currently defined:. 1. ``DW_OP_regval_type``. ``DW_OP_regval_type`` has two operands. The first is an unsigned LEB128; integer that represents a register number R. The second is an unsigned; LEB128 integer DR that represents the byte offset of a debugging information; entry D relative to the beginning of the current compilation unit, that; provides the ty",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AMDGPUDwarfExtensionsForHeterogeneousDebugging.rst:86345,log,logical-operations,86345,interpreter/llvm-project/llvm/docs/AMDGPUDwarfExtensionsForHeterogeneousDebugging.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AMDGPUDwarfExtensionsForHeterogeneousDebugging.rst,1,['log'],['logical-operations']
Testability,"lementing operator new, has many warnings; * [[ROOT-9983](https://its.cern.ch/jira/browse/ROOT-9983)] - [DOC] hadd --help does not show description and epilogue; * [[ROOT-10033](https://its.cern.ch/jira/browse/ROOT-10033)] - ROOT::EnableImplicitMT: Number of threads in scheduling environments; * [[ROOT-10231](https://its.cern.ch/jira/browse/ROOT-10231)] - TMatrixD(a,TMatrixD::kInvMult,b) requires b.GetNcols() = a.GetNcols(); * [[ROOT-10320](https://its.cern.ch/jira/browse/ROOT-10320)] - ROOT/meta does not support anonymous unions/structs; * [[ROOT-10425](https://its.cern.ch/jira/browse/ROOT-10425)] - Missing symbols not reported as missing anymore; * [[ROOT-10546](https://its.cern.ch/jira/browse/ROOT-10546)] - RDataFrame cannot be interrupted from PyROOT; * [[ROOT-10593](https://its.cern.ch/jira/browse/ROOT-10593)] - Segmentation fault when calling a not-yet-defined function from ROOT interpreter; * [[ROOT-10607](https://its.cern.ch/jira/browse/ROOT-10607)] - Several ROOT 7 tests fail when assertions are enabled; * [[ROOT-10613](https://its.cern.ch/jira/browse/ROOT-10613)] - Configuration does not fail when fail-on-missing is ON and cudnn is not found; * [[ROOT-10621](https://its.cern.ch/jira/browse/ROOT-10621)] - Segfault if TFile is used with TRint in teardown; * [[ROOT-10705](https://its.cern.ch/jira/browse/ROOT-10705)] - The ""x"" and ""x0"" options in THnBase::PrintEntries misbehave; * [[ROOT-10789](https://its.cern.ch/jira/browse/ROOT-10789)] - some cppyy examples do not work under ROOT; * [[ROOT-10827](https://its.cern.ch/jira/browse/ROOT-10827)] - Missing contribution of extended term in the error Correction for extended weighted likelihood fits ; * [[ROOT-10859](https://its.cern.ch/jira/browse/ROOT-10859)] - std.make_shared[T] does not work on macOS; * [[ROOT-10866](https://its.cern.ch/jira/browse/ROOT-10866)] - Numerical instabilities when calculating the derivatives for the asymptotically correct erros; * [[ROOT-10958](https://its.cern.ch/jira/browse/ROOT-1095",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v632/index.md:54921,test,tests,54921,README/ReleaseNotes/v632/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v632/index.md,2,"['assert', 'test']","['assertions', 'tests']"
Testability,"lems caused by memory; mis-management. **-find-bugs**. Continually randomize the specified passes and run them on the test program; until a bug is found or the user kills **bugpoint**. **-help**. Print a summary of command line options. **--input** *filename*. Open *filename* and redirect the standard input of the test program, whenever; it runs, to come from that file. **--load** *plugin*. Load the dynamic object *plugin* into **bugpoint** itself. This object should; register new optimization passes. Once loaded, the object will add new command; line options to enable various optimizations. To see the new complete list of; optimizations, use the **-help** and **--load** options together; for example:. .. code-block:: bash. bugpoint --load myNewPass.so -help. **--mlimit** *megabytes*. Specifies an upper limit on memory usage of the optimization and codegen. Set; to zero to disable the limit. **--output** *filename*. Whenever the test program produces output on its standard output stream, it; should match the contents of *filename* (the ""reference output""). If you; do not use this option, **bugpoint** will attempt to generate a reference output; by compiling the program with the ""safe"" backend and running it. **--run-{int,jit,llc,custom}**. Whenever the test program is compiled, **bugpoint** should generate code for it; using the specified code generator. These options allow you to choose the; interpreter, the JIT compiler, the static native code compiler, or a; custom command (see **--exec-command**) respectively. **--safe-{llc,custom}**. When debugging a code generator, **bugpoint** should use the specified code; generator as the ""safe"" code generator. This is a known-good code generator; used to generate the ""reference output"" if it has not been provided, and to; compile portions of the program that as they are excluded from the testcase.; These options allow you to choose the; static native code compiler, or a custom command, (see **--exec-command**); respectively",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst:3862,test,test,3862,interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst,1,['test'],['test']
Testability,"lent @func``. A '``dso_local_equivalent``' constant represents a function which is; functionally equivalent to a given function, but is always defined in the; current linkage unit. The resulting pointer has the same type as the underlying; function. The resulting pointer is permitted, but not required, to be different; from a pointer to the function, and it may have different values in different; translation units. The target function may not have ``extern_weak`` linkage. ``dso_local_equivalent`` can be implemented as such:. - If the function has local linkage, hidden visibility, or is; ``dso_local``, ``dso_local_equivalent`` can be implemented as simply a pointer; to the function.; - ``dso_local_equivalent`` can be implemented with a stub that tail-calls the; function. Many targets support relocations that resolve at link time to either; a function or a stub for it, depending on if the function is defined within the; linkage unit; LLVM will use this when available. (This is commonly called a; ""PLT stub"".) On other targets, the stub may need to be emitted explicitly. This can be used wherever a ``dso_local`` instance of a function is needed without; needing to explicitly make the original function ``dso_local``. An instance where; this can be used is for static offset calculations between a function and some other; ``dso_local`` symbol. This is especially useful for the Relative VTables C++ ABI,; where dynamic relocations for function pointers in VTables can be replaced with; static relocations for offsets between the VTable and virtual functions which; may not be ``dso_local``. This is currently only supported for ELF binary formats. .. _no_cfi:. No CFI; ------. ``no_cfi @func``. With `Control-Flow Integrity (CFI); <https://clang.llvm.org/docs/ControlFlowIntegrity.html>`_, a '``no_cfi``'; constant represents a function reference that does not get replaced with a; reference to the CFI jump table in the ``LowerTypeTests`` pass. These constants; may be useful in low-l",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:202046,stub,stub,202046,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['stub'],['stub']
Testability,"ler will dump a preprocessed file and a script; to replay the ``clang`` command. For example, you should see something like. .. code-block:: text. PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:; Preprocessed source(s) and associated run script(s) are located at:; clang: note: diagnostic msg: /tmp/foo-xxxxxx.c; clang: note: diagnostic msg: /tmp/foo-xxxxxx.sh. The `creduce <https://github.com/csmith-project/creduce>`_ tool helps to; reduce the preprocessed file down to the smallest amount of code that still; replicates the problem. You're encouraged to use creduce to reduce the code; to make the developers' lives easier. The; ``clang/utils/creduce-clang-crash.py`` script can be used on the files; that clang dumps to help with automating creating a test to check for the; compiler crash. `cvise <https://github.com/marxin/cvise>`_ is an alternative to ``creduce``. .. _middleend-crash:. Middle-end optimization bugs; ----------------------------. If you find that a bug crashes in the optimizer, compile your test-case to a; ``.bc`` file by passing ""``-emit-llvm -O1 -Xclang -disable-llvm-passes -c -o; foo.bc``"". The ``-O1`` is important because ``-O0`` adds the ``optnone``; function attribute to all functions and many passes don't run on ``optnone``; functions. Then run:. .. code-block:: bash. opt -O3 foo.bc -disable-output. If this doesn't crash, please follow the instructions for a :ref:`front-end; bug <frontend-crash>`. If this does crash, then you should be able to debug this with the following; :doc:`bugpoint <Bugpoint>` command:. .. code-block:: bash. bugpoint foo.bc -O3. Run this, then file a bug with the instructions and reduced .bc; files that bugpoint emits. If bugpoint doesn't reproduce the crash, ``llvm-reduce`` is an alternative; way to reduce LLVM IR. Create a script that repros the crash and run:. .. code-block:: bash. llvm-reduce --test=path/to/script foo.bc. which should produce reduced IR that reproduces the crash. Be warned the; ``llvm-reduce`` is st",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst:3623,test,test-case,3623,interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst,1,['test'],['test-case']
Testability,"les are copied to llvm/include/llvm/Demangle. The simple reason for; this comes from before the monorepo, and both [sub]projects need to; demangle symbols, but neither can depend on each other. * libcxxabi needs the demangler to implement __cxa_demangle, which is; part of the itanium ABI spec. * LLVM needs a copy for a bunch of places, and cannot rely on the; system's __cxa_demangle because it a) might not be available (i.e.,; on Windows), and b) may not be up-to-date on the latest language; features. The copy of the demangler in LLVM has some extra stuff that aren't; needed in libcxxabi (ie, the MSVC demangler, ItaniumPartialDemangler),; which depend on the shared generic components. Despite these; differences, we want to keep the ""core"" generic demangling library; identical between both copies to simplify development and testing. If you're working on the generic library, then do the work first in; libcxxabi, then run libcxxabi/src/demangle/cp-to-llvm.sh. This; script takes as an optional argument the path to llvm, and copies the; changes you made to libcxxabi over. Note that this script just; blindly overwrites all changes to the generic library in llvm, so be; careful. Because the core demangler needs to work in libcxxabi, everything; needs to be declared in an anonymous namespace (see; DEMANGLE_NAMESPACE_BEGIN), and you can't introduce any code that; depends on the libcxx dylib. FIXME: Now that LLVM is a monorepo, it should be possible to; de-duplicate this code, and have both LLVM and libcxxabi depend on a; shared demangler library. Testing; -------. The tests are split up between libcxxabi/test/{unit,}test_demangle.cpp, and; llvm/unittest/Demangle. The llvm directory should only get tests for stuff not; included in the core library. In the future though, we should probably move all; the tests to LLVM. It is also a really good idea to run libFuzzer after non-trivial changes, see; libcxxabi/fuzz/cxa_demangle_fuzzer.cpp and https://llvm.org/docs/LibFuzzer.html.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/README.txt:2247,test,tests,2247,interpreter/llvm-project/llvm/include/llvm/Demangle/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/README.txt,4,['test'],"['test', 'tests']"
Testability,"les the test if all expressions are true.; | ``UNSUPPORTED`` disables the test if any expression is true.; | ``XFAIL`` expects the test to fail if any expression is true. As a special case, ``XFAIL: *`` is expected to fail everywhere. .. code-block:: llvm. ; This test is disabled when running on Windows,; ; and is disabled when targeting Linux, except for Android Linux.; ; UNSUPPORTED: system-windows, target={{.*linux.*}} && !target={{.*android.*}}; ; This test is expected to fail when targeting PowerPC or running on Darwin.; ; XFAIL: target=powerpc{{.*}}, system-darwin. Tips for writing constraints; ----------------------------. **``REQUIRES`` and ``UNSUPPORTED``**. These are logical inverses. In principle, ``UNSUPPORTED`` isn't absolutely; necessary (the logical negation could be used with ``REQUIRES`` to get; exactly the same effect), but it can make these clauses easier to read and; understand. Generally, people use ``REQUIRES`` to state things that the test; depends on to operate correctly, and ``UNSUPPORTED`` to exclude cases where; the test is expected never to work. **``UNSUPPORTED`` and ``XFAIL``**. Both of these indicate that the test isn't expected to work; however, they; have different effects. ``UNSUPPORTED`` causes the test to be skipped;; this saves execution time, but then you'll never know whether the test; actually would start working. Conversely, ``XFAIL`` actually runs the test; but expects a failure output, taking extra execution time but alerting you; if/when the test begins to behave correctly (an XPASS test result). You; need to decide which is more appropriate in each case. **Using ``target=...``**. Checking the target triple can be tricky; it's easy to mis-specify. For; example, ``target=mips{{.*}}`` will match not only mips, but also mipsel,; mips64, and mips64el. ``target={{.*}}-linux-gnu`` will match; x86_64-unknown-linux-gnu, but not armv8l-unknown-linux-gnueabihf.; Prefer to use hyphens to delimit triple components (``target=mips-{{.*}}",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:22150,test,test,22150,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,2,['test'],['test']
Testability,"les, blocks and functions) meaningful; names, and avoid retaining complex names generated by the optimization; pipeline (such as ``%foo.0.0.0.0.0.0``). Extra files; -----------. If your test requires extra files besides the file containing the ``RUN:`` lines; and the extra files are small, consider specifying them in the same file and; using ``split-file`` to extract them. For example,. .. code-block:: llvm. ; RUN: split-file %s %t; ; RUN: llvm-link -S %t/a.ll %t/b.ll | FileCheck %s. ; CHECK: ... ;--- a.ll; ...; ;--- b.ll; ... The parts are separated by the regex ``^(.|//)--- <part>``. If you want to test relative line numbers like ``[[#@LINE+1]]``, specify; ``--leading-lines`` to add leading empty lines to preserve line numbers. If the extra files are large, the idiomatic place to put them is in a subdirectory ``Inputs``.; You can then refer to the extra files as ``%S/Inputs/foo.bar``. For example, consider ``test/Linker/ident.ll``. The directory structure is; as follows::. test/; Linker/; ident.ll; Inputs/; ident.a.ll; ident.b.ll. For convenience, these are the contents:. .. code-block:: llvm. ;;;;; ident.ll:. ; RUN: llvm-link %S/Inputs/ident.a.ll %S/Inputs/ident.b.ll -S | FileCheck %s. ; Verify that multiple input llvm.ident metadata are linked together. ; CHECK-DAG: !llvm.ident = !{!0, !1, !2}; ; CHECK-DAG: ""Compiler V1""; ; CHECK-DAG: ""Compiler V2""; ; CHECK-DAG: ""Compiler V3"". ;;;;; Inputs/ident.a.ll:. !llvm.ident = !{!0, !1}; !0 = metadata !{metadata !""Compiler V1""}; !1 = metadata !{metadata !""Compiler V2""}. ;;;;; Inputs/ident.b.ll:. !llvm.ident = !{!0}; !0 = metadata !{metadata !""Compiler V3""}. For symmetry reasons, ``ident.ll`` is just a dummy file that doesn't; actually participate in the test besides holding the ``RUN:`` lines. .. note::. Some existing tests use ``RUN: true`` in extra files instead of just; putting the extra files in an ``Inputs/`` directory. This pattern is; deprecated. Fragile tests; -------------. It is easy to write a fragile test that w",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:15467,test,test,15467,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"lete.; C++11: one should use unique_ptr<type[]> to keep a; pointer to memory allocated by new[].; C++11: to keep a pointer to memory allocated by new[] in; a shared_ptr one should use a custom deleter that calls ; delete[]..; Source: C++03 20.4.5p1; C++11 auto_ptr is deprecated (D.10). #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p1(new int); // Ok; std::auto_ptr<int> p2(new int[3]); // warn; }. #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p((int *)malloc(sizeof(int))); // warn; }. dead code. Name, DescriptionExampleProgress. deadcode.UnmodifiedVariable; (C, C++); A variable is never modified but was not declared const and is not a; reference.(opt-in checker). extern int computeDelta();. int test(bool cond) {; int i = 0;; if (cond) {; const int delta = computeDelta();; // warn: forgot to modify 'i'; }; return i;; }. PR16890. deadcode.IdempotentOperations; (C); Warn about idempotent operations. void test() {; int x = 7;; x = x; // warn: value is always the same; }. void test() {; int x = 7;; x /= x; // warn: value is always 1; }. void test() {; int x = 7, one = 1;; x *= one; // warn: right op is always 1; }. void test() {; int x = 7, zero = 0;; x = x - zero;; // warn: the right operand to '-' is always 0; }. removed from alpha.deadcode.* at; r198476. POSIX. Name, DescriptionExampleProgress. posix.Errno; (C); Record that errno is non-zero when certain functions; fail. #include <stdlib.h>. int readWrapper(int fd, int *count) {; int lcount = read(fd, globalBuf, sizeof(globalBuf));; if (lcount < 0); return errno;; *count = lcount;; return 0;; }. void use(int fd) {; int count;; if (!readWrapper(fd, &count)); print(""%d"", count); // should not warn; }. PR18701. undefined behavior. Name, DescriptionExampleProgress. undefbehavior.ExitInDtor; (C++); Undefined behavior: std::exit() is called to end the program during; the destruction of an object with static storage duration.; Source: C++11 3.6.1p4. #include <cstdlib>. c",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:4563,test,test,4563,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"le} 'test.cpp'; {Public} 'foo' [0x0000000000:0x000000003a]; [0x000000000b][002] {Range} Lines 2:9 [0x0000000000:0x000000003a]; [0x00000000bc][002] {BaseType} 'bool'; [0x0000000099][002] {BaseType} 'int'; [0x00000000b5][002] {BaseType} 'unsigned int'. [0x00000000a0][002] {Source} '/test.cpp'; [0x00000000a0][002] 1 {TypeAlias} 'INTPTR' -> [0x00000000ab]'* const int'; [0x000000002a][002] 2 {Function} extern not_inlined 'foo' -> [0x0000000099]'int'; [0x000000002a][003] {Range} Lines 2:9 [0x0000000000:0x000000003a]; [0x000000002a][003] {Linkage} 0x2 '_Z3fooPKijb'; [0x0000000071][003] {Block}; [0x0000000071][004] {Range} Lines 5:8 [0x000000001c:0x000000002f]; [0x000000007e][004] 5 {Variable} 'CONSTANT' -> [0x00000000c3]'const INTEGER'; [0x000000007e][005] {Coverage} 100.00%; [0x000000007f][005] {Location}; [0x000000007f][006] {Entry} Stack Offset: -28 (0xffffffffffffffe4) [DW_OP_fbreg]; [0x000000001c][004] 5 {Line} {NewStatement} '/test.cpp'; [0x000000001c][004] {Code} 'movl	$0x7, -0x1c(%rbp)'; [0x0000000023][004] 6 {Line} {NewStatement} '/test.cpp'; [0x0000000023][004] {Code} 'movl	$0x7, -0x4(%rbp)'; [0x000000002a][004] {Code} 'jmp	0x6'; [0x000000002f][004] 8 {Line} {NewStatement} '/test.cpp'; [0x000000002f][004] {Code} 'movl	-0x14(%rbp), %eax'; [0x0000000063][003] 2 {Parameter} 'ParamBool' -> [0x00000000bc]'bool'; [0x0000000063][004] {Coverage} 100.00%; [0x0000000064][004] {Location}; [0x0000000064][005] {Entry} Stack Offset: -21 (0xffffffffffffffeb) [DW_OP_fbreg]; [0x0000000047][003] 2 {Parameter} 'ParamPtr' -> [0x00000000a0]'INTPTR'; [0x0000000047][004] {Coverage} 100.00%; [0x0000000048][004] {Location}; [0x0000000048][005] {Entry} Stack Offset: -16 (0xfffffffffffffff0) [DW_OP_fbreg]; [0x0000000055][003] 2 {Parameter} 'ParamUnsigned' -> [0x00000000b5]'unsigned int'; [0x0000000055][004] {Coverage} 100.00%; [0x0000000056][004] {Location}; [0x0000000056][005] {Entry} Stack Offset: -20 (0xffffffffffffffec) [DW_OP_fbreg]; [0x000000008d][003] 4 {TypeAlias} 'INTEGER' -> [0x0",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:56403,test,test,56403,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['test'],['test']
Testability,lgorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h; ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:417801,benchmark,benchmark,417801,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,22,"['benchmark', 'log']","['benchmark', 'log']"
Testability,"lgorithms, or with different kinds of optimization ""back-ends"" in mind.; One implementation of each is ready for use in `RooFit` currently:. 1. `LikelihoodSerial` is more or less simply a rewrite of the existing serial calculation of a `RooNLLVar`.; 2. `LikelihoodGradientJob` calculates the partial derivatives or the gradient in parallel on multiple CPUs/cores, based on `RooFit::MultiProcess`, which is a fork-based multi-processing task execution framework with dynamic load balancing. Other possible implementations could use the GPU or external tools like TensorFlow. The coupling of all these classes to `RooMinimizer` is made via the `MinuitFcnGrad` class, which owns the `Wrappers` that calculate the likelihood components. Note: a second `LikelihoodWrapper` class called `LikelihoodJob` is also available.; This class emulates the existing `NumCPU(>1)` functionality of the `RooAbsTestStatistic` tree, which is implemented based on `RooRealMPFE`.; This class is not yet thoroughly tested and should not be considered production ready. ### Usage example: `MultiProcess` enabled parallel gradient calculator. The main selling point of using `RooFit::TestStatistics` from a performance point of view is the implementation of the `RooFit::MultiProcess` based `LikelihoodGradientJob` calculator class.; To use it, one should create a `RooMinimizer` using the new constructor that takes a `RooAbsL`-based likelihood instead of a `RooAbsReal`. Taking any of the above created `likelihood` objects (as long as they are in a `std::shared_ptr`), we can create a `RooMinimizer` with parallel gradient calculation using:; ``` {.cpp}; std::shared_ptr<RooAbsL> likelihood = /* see examples above */;; RooMinimizer m(likelihood);; ```. By default, `RooFit::MultiProcess` spins up as many workers as there are cores in the system (as detected by `std::thread::hardware_concurrency()`).; To change the number of workers, call `RooFit::MultiProcess::Config::setDefaultNWorkers(desired_N_workers)` **before** ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/test_statistics.md:7935,test,tested,7935,roofit/doc/developers/test_statistics.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/test_statistics.md,1,['test'],['tested']
Testability,lib/BlocksRuntime; - `2`; - `0`; - `2`; - :none:`0%`; * - compiler-rt/lib/builtins; - `11`; - `9`; - `2`; - :part:`81%`; * - compiler-rt/lib/builtins/arm; - `1`; - `0`; - `1`; - :none:`0%`; * - compiler-rt/lib/builtins/ppc; - `1`; - `1`; - `0`; - :good:`100%`; * - compiler-rt/lib/cfi; - `1`; - `0`; - `1`; - :none:`0%`; * - compiler-rt/lib/dfsan; - `14`; - `9`; - `5`; - :part:`64%`; * - compiler-rt/lib/fuzzer; - `47`; - `9`; - `38`; - :part:`19%`; * - compiler-rt/lib/fuzzer/afl; - `1`; - `0`; - `1`; - :none:`0%`; * - compiler-rt/lib/fuzzer/dataflow; - `3`; - `0`; - `3`; - :none:`0%`; * - compiler-rt/lib/fuzzer/tests; - `2`; - `1`; - `1`; - :part:`50%`; * - compiler-rt/lib/gwp_asan; - `12`; - `12`; - `0`; - :good:`100%`; * - compiler-rt/lib/gwp_asan/optional; - `10`; - `10`; - `0`; - :good:`100%`; * - compiler-rt/lib/gwp_asan/platform_specific; - `13`; - `13`; - `0`; - :good:`100%`; * - compiler-rt/lib/gwp_asan/tests; - `15`; - `14`; - `1`; - :part:`93%`; * - compiler-rt/lib/gwp_asan/tests/platform_specific; - `1`; - `1`; - `0`; - :good:`100%`; * - compiler-rt/lib/hwasan; - `30`; - `9`; - `21`; - :part:`30%`; * - compiler-rt/lib/interception; - `8`; - `1`; - `7`; - :part:`12%`; * - compiler-rt/lib/interception/tests; - `3`; - `1`; - `2`; - :part:`33%`; * - compiler-rt/lib/lsan; - `20`; - `4`; - `16`; - :part:`20%`; * - compiler-rt/lib/memprof; - `31`; - `29`; - `2`; - :part:`93%`; * - compiler-rt/lib/memprof/tests; - `2`; - `2`; - `0`; - :good:`100%`; * - compiler-rt/lib/msan; - `18`; - `4`; - `14`; - :part:`22%`; * - compiler-rt/lib/msan/tests; - `4`; - `0`; - `4`; - :none:`0%`; * - compiler-rt/lib/orc; - `21`; - `16`; - `5`; - :part:`76%`; * - compiler-rt/lib/orc/unittests; - `10`; - `9`; - `1`; - :part:`90%`; * - compiler-rt/lib/profile; - `6`; - `0`; - `6`; - :none:`0%`; * - compiler-rt/lib/safestack; - `3`; - `1`; - `2`; - :part:`33%`; * - compiler-rt/lib/sanitizer_common; - `167`; - `29`; - `138`; - :part:`17%`; * - compiler-rt/lib/sanitizer_common/symbolizer; -,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:23144,test,tests,23144,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,lib/Common/idioms.cpp; flang/lib/Decimal/big-radix-floating-point.h; flang/lib/Decimal/binary-to-decimal.cpp; flang/lib/Decimal/decimal-to-binary.cpp; flang/lib/Evaluate/call.cpp; flang/lib/Evaluate/character.h; flang/lib/Evaluate/check-expression.cpp; flang/lib/Evaluate/common.cpp; flang/lib/Evaluate/complex.cpp; flang/lib/Evaluate/constant.cpp; flang/lib/Evaluate/expression.cpp; flang/lib/Evaluate/fold-character.cpp; flang/lib/Evaluate/fold-complex.cpp; flang/lib/Evaluate/fold-designator.cpp; flang/lib/Evaluate/fold-implementation.h; flang/lib/Evaluate/fold-logical.cpp; flang/lib/Evaluate/fold-real.cpp; flang/lib/Evaluate/fold-reduction.cpp; flang/lib/Evaluate/fold-reduction.h; flang/lib/Evaluate/fold.cpp; flang/lib/Evaluate/formatting.cpp; flang/lib/Evaluate/host.cpp; flang/lib/Evaluate/host.h; flang/lib/Evaluate/initial-image.cpp; flang/lib/Evaluate/int-power.h; flang/lib/Evaluate/integer.cpp; flang/lib/Evaluate/intrinsics-library.cpp; flang/lib/Evaluate/intrinsics.cpp; flang/lib/Evaluate/logical.cpp; flang/lib/Evaluate/real.cpp; flang/lib/Evaluate/shape.cpp; flang/lib/Evaluate/static-data.cpp; flang/lib/Evaluate/tools.cpp; flang/lib/Evaluate/type.cpp; flang/lib/Evaluate/variable.cpp; flang/lib/Frontend/CompilerInstance.cpp; flang/lib/Frontend/FrontendAction.cpp; flang/lib/Frontend/FrontendOptions.cpp; flang/lib/Frontend/TextDiagnostic.cpp; flang/lib/Frontend/TextDiagnosticBuffer.cpp; flang/lib/Frontend/TextDiagnosticPrinter.cpp; flang/lib/FrontendTool/ExecuteCompilerInvocation.cpp; flang/lib/Lower/Allocatable.cpp; flang/lib/Lower/Bridge.cpp; flang/lib/Lower/CallInterface.cpp; flang/lib/Lower/Coarray.cpp; flang/lib/Lower/ComponentPath.cpp; flang/lib/Lower/ConvertExpr.cpp; flang/lib/Lower/ConvertType.cpp; flang/lib/Lower/ConvertVariable.cpp; flang/lib/Lower/DumpEvaluateExpr.cpp; flang/lib/Lower/IntervalSet.h; flang/lib/Lower/IntrinsicCall.cpp; flang/lib/Lower/IO.cpp; flang/lib/Lower/IterationSpace.cpp; flang/lib/Lower/Mangler.cpp; flang/lib/Lower/OpenACC.cpp; fla,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:117021,log,logical,117021,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['log'],['logical']
Testability,lib/gwp_asan/platform_specific/guarded_pool_allocator_tls.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.h; compiler-rt/lib/gwp_asan/platform_specific/utilities_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/utilities_posix.cpp; compiler-rt/lib/gwp_asan/tests/backtrace.cpp; compiler-rt/lib/gwp_asan/tests/basic.cpp; compiler-rt/lib/gwp_asan/tests/compression.cpp; compiler-rt/lib/gwp_asan/tests/crash_handler_api.cpp; compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.h; compiler-rt/lib/hwasan/hwasan_preinit.cpp; compiler-rt/lib/interception/interception_mac.cpp; compiler-rt/lib/interception/tests/interception_test_main.cpp; compiler-rt/lib/lsan/lsan.h; compiler-rt/lib/lsan/lsan_common.cpp; compiler-rt/lib/lsan/lsan_thread.cpp; compiler-rt/lib/lsan/lsan_thread.h; compiler-rt/lib/memprof/memprof_allocator.cpp; compiler-rt/lib/memprof/memprof_allocator.h; compiler-rt/lib/memprof/memprof_descriptions.cpp; compiler-rt/lib/memprof/memprof_descriptions.h; compiler-rt/,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:93679,test,tests,93679,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,lib/msan/tests; - `4`; - `0`; - `4`; - :none:`0%`; * - compiler-rt/lib/orc; - `21`; - `16`; - `5`; - :part:`76%`; * - compiler-rt/lib/orc/unittests; - `10`; - `9`; - `1`; - :part:`90%`; * - compiler-rt/lib/profile; - `6`; - `0`; - `6`; - :none:`0%`; * - compiler-rt/lib/safestack; - `3`; - `1`; - `2`; - :part:`33%`; * - compiler-rt/lib/sanitizer_common; - `167`; - `29`; - `138`; - :part:`17%`; * - compiler-rt/lib/sanitizer_common/symbolizer; - `2`; - `2`; - `0`; - :good:`100%`; * - compiler-rt/lib/sanitizer_common/tests; - `46`; - `12`; - `34`; - :part:`26%`; * - compiler-rt/lib/scudo; - `20`; - `0`; - `20`; - :none:`0%`; * - compiler-rt/lib/scudo/standalone; - `49`; - `48`; - `1`; - :part:`97%`; * - compiler-rt/lib/scudo/standalone/benchmarks; - `1`; - `1`; - `0`; - :good:`100%`; * - compiler-rt/lib/scudo/standalone/fuzz; - `1`; - `1`; - `0`; - :good:`100%`; * - compiler-rt/lib/scudo/standalone/include/scudo; - `1`; - `1`; - `0`; - :good:`100%`; * - compiler-rt/lib/scudo/standalone/tests; - `25`; - `24`; - `1`; - :part:`96%`; * - compiler-rt/lib/scudo/standalone/tools; - `1`; - `1`; - `0`; - :good:`100%`; * - compiler-rt/lib/stats; - `3`; - `0`; - `3`; - :none:`0%`; * - compiler-rt/lib/tsan/benchmarks; - `6`; - `0`; - `6`; - :none:`0%`; * - compiler-rt/lib/tsan/dd; - `3`; - `0`; - `3`; - :none:`0%`; * - compiler-rt/lib/tsan/go; - `1`; - `0`; - `1`; - :none:`0%`; * - compiler-rt/lib/tsan/rtl; - `59`; - `14`; - `45`; - :part:`23%`; * - compiler-rt/lib/tsan/rtl-old; - `61`; - `13`; - `48`; - :part:`21%`; * - compiler-rt/lib/tsan/tests/rtl; - `10`; - `0`; - `10`; - :none:`0%`; * - compiler-rt/lib/tsan/tests/unit; - `11`; - `3`; - `8`; - :part:`27%`; * - compiler-rt/lib/ubsan; - `27`; - `7`; - `20`; - :part:`25%`; * - compiler-rt/lib/ubsan_minimal; - `1`; - `0`; - `1`; - :none:`0%`; * - compiler-rt/lib/xray; - `40`; - `27`; - `13`; - :part:`67%`; * - compiler-rt/lib/xray/tests/unit; - `10`; - `8`; - `2`; - :part:`80%`; * - compiler-rt/tools/gwp_asan; - `2`; - `2`; - `0`;,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:24698,test,tests,24698,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,lib/sanitizer_common/sanitizer_stacktrace_printer.h; compiler-rt/lib/sanitizer_common/sanitizer_stack_store.cpp; compiler-rt/lib/sanitizer_common/sanitizer_stack_store.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_fuchsia.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_win.cpp; compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_markup_constants.h; compiler-rt/lib/sanitizer_common/sanitizer_thread_safety.h; compiler-rt/lib/sanitizer_common/sanitizer_tls_get_addr.h; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.cpp; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_symbolize.cpp; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compiler-rt/lib/scudo/standalone/checksum.h; compiler-rt/lib/scudo/standalone/chunk.h; compiler-rt/lib/scudo/standalone/combined.h; compiler-rt/lib/scudo/standalone/common.cpp; compiler-rt/lib/scudo/standalone/common.h; compi,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:99325,test,tests,99325,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,lib/scudo/standalone/tsd_shared.h; compiler-rt/lib/scudo/standalone/vector.h; compiler-rt/lib/scudo/standalone/wrappers_c.cpp; compiler-rt/lib/scudo/standalone/wrappers_c.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:102842,test,tests,102842,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"libcxx``, ``libomp`` and ``clang-extra-tools``) in; three stages, and will test the final stage.; It'll have installed the final binaries on the Phase3/Releasei(+Asserts); directory, and that's the one you should use for the test-suite and other; external tests. To run the script on a specific release candidate run::. ./test-release.sh \; -release 3.3 \; -rc 1 \; -no-64bit \; -test-asserts \; -no-compare-files. Each system will require different options. For instance, x86_64 will; obviously not need ``-no-64bit`` while 32-bit systems will, or the script will; fail. The important flags to get right are:. * On the pre-release, you should change ``-rc 1`` to ``-final``. On RC2,; change it to ``-rc 2`` and so on. * On non-release testing, you can use ``-final`` in conjunction with; ``-no-checkout``, but you'll have to create the ``final`` directory by hand; and link the correct source dir to ``final/llvm.src``. * For release candidates, you need ``-test-asserts``, or it won't create a; ""Release+Asserts"" directory, which is needed for release testing and; benchmarking. This will take twice as long. * On the final candidate you just need Release builds, and that's the binary; directory you'll have to pack. * On macOS, you must export ``MACOSX_DEPLOYMENT_TARGET=10.9`` before running; the script. This script builds three phases of Clang+LLVM twice each (Release and; Release+Asserts), so use screen or nohup to avoid headaches, since it'll take; a long time. Use the ``--help`` option to see all the options and chose it according to; your needs. findRegressions-nightly.py; --------------------------. TODO. .. _test-suite:. Test Suite; ==========. .. contents::; :local:. Follow the `LNT Quick Start Guide; <https://llvm.org/docs/lnt/quickstart.html>`__ link on how to set-up the; test-suite. The binary location you'll have to use for testing is inside the; ``rcN/Phase3/Release+Asserts/llvmCore-REL-RC.install``.; Link that directory to an easier location and run the test-suite. An",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ReleaseProcess.rst:2701,test,test-asserts,2701,interpreter/llvm-project/llvm/docs/ReleaseProcess.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ReleaseProcess.rst,3,"['benchmark', 'test']","['benchmarking', 'test-asserts', 'testing']"
Testability,"libomp :: affinity/kmp-hw-subset.c; libomptarget :: nvptx64-nvidia-cuda :: offloading/memory_manager.cpp; libomptarget :: x86_64-pc-linux-gnu :: offloading/memory_manager.cpp. Alternatively, a test name can be specified as the full test name; reported in LIT output. For example, we can adjust the previous; example not to treat the ``nvptx64-nvidia-cuda`` version of; ``offloading/memory_manager.cpp`` as XFAIL:. .. code-block:: none. LIT_XFAIL=""affinity/kmp-hw-subset.c;libomptarget :: x86_64-pc-linux-gnu :: offloading/memory_manager.cpp"". .. option:: --xfail-not=LIST. Do not treat the specified tests as ``XFAIL``. The environment variable; ``LIT_XFAIL_NOT`` can also be used in place of this option. The syntax is the; same as for :option:`--xfail` and ``LIT_XFAIL``. :option:`--xfail-not` and; ``LIT_XFAIL_NOT`` always override all other ``XFAIL`` specifications,; including an :option:`--xfail` appearing later on the command line. The; primary purpose is to suppress an ``XPASS`` result without modifying a test; case that uses the ``XFAIL`` directive. ADDITIONAL OPTIONS; ------------------. .. option:: --debug. Run :program:`lit` in debug mode, for debugging configuration issues and; :program:`lit` itself. .. option:: --show-suites. List the discovered test suites and exit. .. option:: --show-tests. List all of the discovered tests and exit. EXIT STATUS; -----------. :program:`lit` will exit with an exit code of 1 if there are any FAIL or XPASS; results. Otherwise, it will exit with the status 0. Other exit codes are used; for non-test related failures (for example a user error or an internal program; error). .. _test-discovery:. TEST DISCOVERY; --------------. The inputs passed to :program:`lit` can be either individual tests, or entire; directories or hierarchies of tests to run. When :program:`lit` starts up, the; first thing it does is convert the inputs into a complete list of tests to run; as part of *test discovery*. In the :program:`lit` model, every test must exi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:10324,test,test,10324,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"library for JIT'd code:. class MyJIT {; public:; void log(const char *Msg);; };. void log(const char *Msg) { ((MyJIT*)0x1234)->log(Msg); }. We can turn this into a symbolic reference in the JIT standard library:. .. code-block:: c++. extern MyJIT *__MyJITInstance;. void log(const char *Msg) { __MyJITInstance->log(Msg); }. And then make our JIT object visible to the JIT standard library with an; absolute symbol definition when the JIT is started:. .. code-block:: c++. MyJIT J = ...;. auto &JITStdLibJD = ... ;. JITStdLibJD.define(absoluteSymbols(SymbolMap({; { Mangle(""__MyJITInstance""),; { ExecutorAddr::fromPtr(&J), JITSymbolFlags() } }; });. Aliases and Reexports; ---------------------. Aliases and reexports allow you to define new symbols that map to existing; symbols. This can be useful for changing linkage relationships between symbols; across sessions without having to recompile code. For example, imagine that; JIT'd code has access to a log function, ``void log(const char*)`` for which; there are two implementations in the JIT standard library: ``log_fast`` and; ``log_detailed``. Your JIT can choose which one of these definitions will be; used when the ``log`` symbol is referenced by setting up an alias at JIT startup; time:. .. code-block:: c++. auto &JITStdLibJD = ... ;. auto LogImplementationSymbol =; Verbose ? Mangle(""log_detailed"") : Mangle(""log_fast"");. JITStdLibJD.define(; symbolAliases(SymbolAliasMap({; { Mangle(""log""),; { LogImplementationSymbol; JITSymbolFlags::Exported | JITSymbolFlags::Callable } }; });. The ``symbolAliases`` function allows you to define aliases within a single; JITDylib. The ``reexports`` function provides the same functionality, but; operates across JITDylib boundaries. E.g. .. code-block:: c++. auto &JD1 = ... ;; auto &JD2 = ... ;. // Make 'bar' in JD2 an alias for 'foo' from JD1.; JD2.define(; reexports(JD1, SymbolAliasMap({; { Mangle(""bar""), { Mangle(""foo""), JITSymbolFlags::Exported } }; });. The reexports utility can be handy ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ORCv2.rst:15408,log,log,15408,interpreter/llvm-project/llvm/docs/ORCv2.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ORCv2.rst,2,['log'],['log']
Testability,"lic_attribute2);; }; ```. `TTree::Process()` is aware of PROOF, ROOT parallel processing facility.; If PROOF is setup, it divides the processing amongst the slave CPUs. ### Performance Benchmarks; \index{benchmarks}. The program `$ROOTSYS/test/bench.cxx` compares the I/O performance of; STL vectors to the ROOT native **`TClonesArray`**`s` collection class.; It creates trees with and without compression for the following cases:; `vector<THit>`, `vector<THit*>`, `TClonesArray(`**`TObjHit`**`)`; not split `TClonesArray(`**`TObjHit`**`)` split. The next graphs show the two columns on the right which represent the split and; non-split **`TClonesArray`**, are significantly lower than the vectors. The most; significant difference is in reading a file without compression. The file size with compression, write times with and without compression; and the read times with and without compression all favor the; **`TClonesArray`**. ## Impact of Compression on I/O. This benchmark illustrates the pros and cons of the compression option.; We recommend using compression when the time spent in I/O is small; compared to the total processing time. In this case, if the I/O; operation is increased by a factor of 5 it is still a small percentage; of the total time and it may very well save a factor of 10 on disk; space. On the other hand if the time spend on I/O is large, compression; may slow down the program's performance. The standard test program; `$ROOTSYS/test/Event` was used in various configurations with 400; events. The data file contains a **`TTree`**. The program was invoked; with:. ``` {.cpp}; Event 400 comp split; ```. - comp = 0 means: no compression at all.; - comp = 1 means: compress everything if split = 0.; - comp = 1 means: compress only the tree branches with integers if; split = 1.; - comp = 2 means: compress everything if split=1.; - split = 0 : the full event is serialized into one single buffer.; - split = 1 : the event is split into branches. One branch for each; d",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md:135900,benchmark,benchmark,135900,documentation/users-guide/Trees.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md,1,['benchmark'],['benchmark']
Testability,"licit-integer-sign-change``.; - ``-fsanitize=integer``: Checks for undefined or suspicious integer; behavior (e.g. unsigned integer overflow).; Enables ``signed-integer-overflow``, ``unsigned-integer-overflow``,; ``shift``, ``integer-divide-by-zero``,; ``implicit-unsigned-integer-truncation``,; ``implicit-signed-integer-truncation``, and; ``implicit-integer-sign-change``.; - ``-fsanitize=nullability``: Enables ``nullability-arg``,; ``nullability-assign``, and ``nullability-return``. While violating; nullability does not have undefined behavior, it is often unintentional,; so UBSan offers to catch it. Volatile; --------. The ``null``, ``alignment``, ``object-size``, ``local-bounds``, and ``vptr`` checks do not apply; to pointers to types with the ``volatile`` qualifier. Minimal Runtime; ===============. There is a minimal UBSan runtime available suitable for use in production; environments. This runtime has a small attack surface. It only provides very; basic issue logging and deduplication, and does not support ``-fsanitize=vptr``; checking. To use the minimal runtime, add ``-fsanitize-minimal-runtime`` to the clang; command line options. For example, if you're used to compiling with; ``-fsanitize=undefined``, you could enable the minimal runtime with; ``-fsanitize=undefined -fsanitize-minimal-runtime``. Stack traces and report symbolization; =====================================; If you want UBSan to print symbolized stack trace for each error report, you; will need to:. #. Compile with ``-g`` and ``-fno-omit-frame-pointer`` to get proper debug; information in your binary.; #. Run your program with environment variable; ``UBSAN_OPTIONS=print_stacktrace=1``.; #. Make sure ``llvm-symbolizer`` binary is in ``PATH``. Logging; =======. The default log file for diagnostics is ""stderr"". To log diagnostics to another; file, you can set ``UBSAN_OPTIONS=log_path=...``. Silencing Unsigned Integer Overflow; ===================================; To silence reports from unsigned ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UndefinedBehaviorSanitizer.rst:11969,log,logging,11969,interpreter/llvm-project/clang/docs/UndefinedBehaviorSanitizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UndefinedBehaviorSanitizer.rst,1,['log'],['logging']
Testability,"lick on any button to execute another example. To see the; source, open the corresponding source file (for example `fit1.C`). Once; you are done, and want to quit the ROOT session, you can do so by typing; **`.q`**. ``` {.cpp}; root[] .x demos.C; root[] .q; ```. ## \$ROOTSYS/test. The test directory contains a set of examples that represent all areas; of the framework. When a new release is cut, the examples in this; directory are compiled and run to test the new release's backward; compatibility. We see these source files:. +-------------------+--------------------------------------------------------+; | `Makefile` | Makefile to build all test programs. |; +-------------------+--------------------------------------------------------+; | `hsimple.cxx` | Simple test program that creates and saves some |; | | histograms |; +-------------------+--------------------------------------------------------+; | `MainEvent.cxx` | Simple test program that creates a ROOT Tree object |; | | and fills it with some simple structures but also with |; | | complete histograms. This program uses the files |; | | `Event.cxx`, `EventCint.cxx` and `Event.h`. An example |; | | of a procedure to link this program is in |; | | `bind_Event`. Note that the `Makefile` invokes the |; | | `rootcling` utility to generate the Cling interface |; | | `EventCint.cxx` |; +-------------------+--------------------------------------------------------+; | `Event.cxx` | Implementation for classes Event and Track |; +-------------------+--------------------------------------------------------+; | `minexam.cxx` | Simple test program for data fitting |; +-------------------+--------------------------------------------------------+; | `tcollex.cxx` | Example usage of the ROOT collection classes |; +-------------------+--------------------------------------------------------+; | `tcollbm.cxx` | Benchmarks of ROOT collection classes |; +-------------------+--------------------------------------------------------+",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/TutorialsandTests.md:2159,test,test,2159,documentation/users-guide/TutorialsandTests.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/TutorialsandTests.md,1,['test'],['test']
Testability,lievski; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). list(APPEND Libraries CUDA::cuda_driver CUDA::cudart). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). add_executable(testIm2ColCuda TestIm2ColCuda.cxx); target_link_libraries(testIm2ColCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2ColCuda COMMAND testIm2ColCuda). add_executable(testPoolingLayerCuda TestPoolingLayerCuda.cxx); target_link_libraries(testPoolingLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCuda COMMAND testPoolingLayerCuda). add_executable(testReshapeCuda TestReshapeCuda.cxx); target_link_libraries(testReshapeCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ReshapeCuda COMMAND testReshapeCuda). add_executable(testConvLayerCuda TestConvLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_exec,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:1302,test,testConvLayerCuda,1302,tmva/tmva/test/DNN/CNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt,2,['test'],['testConvLayerCuda']
Testability,"light = M.makeLight(""head""); // Good: descriptive.; ...; }. Assert Liberally; ^^^^^^^^^^^^^^^^. Use the ""``assert``"" macro to its fullest. Check all of your preconditions and; assumptions, you never know when a bug (not necessarily even yours) might be; caught early by an assertion, which reduces debugging time dramatically. The; ""``<cassert>``"" header file is probably already included by the header files you; are using, so it doesn't cost anything to use it. To further assist with debugging, make sure to put some kind of error message in; the assertion statement, which is printed if the assertion is tripped. This; helps the poor debugger make sense of why an assertion is being made and; enforced, and hopefully what to do about it. Here is one complete example:. .. code-block:: c++. inline Value *getOperand(unsigned I) {; assert(I < Operands.size() && ""getOperand() out of range!"");; return Operands[I];; }. Here are more examples:. .. code-block:: c++. assert(Ty->isPointerType() && ""Can't allocate a non-pointer type!"");. assert((Opcode == Shl || Opcode == Shr) && ""ShiftInst Opcode invalid!"");. assert(idx < getNumSuccessors() && ""Successor # out of range!"");. assert(V1.getType() == V2.getType() && ""Constant types must be identical!"");. assert(isa<PHINode>(Succ->front()) && ""Only works on PHId BBs!"");. You get the idea. In the past, asserts were used to indicate a piece of code that should not be; reached. These were typically of the form:. .. code-block:: c++. assert(0 && ""Invalid radix for integer literal"");. This has a few issues, the main one being that some compilers might not; understand the assertion, or warn about a missing return in builds where; assertions are compiled out. Today, we have something much better: ``llvm_unreachable``:. .. code-block:: c++. llvm_unreachable(""Invalid radix for integer literal"");. When assertions are enabled, this will print the message if it's ever reached; and then exit the program. When assertions are disabled (i.e. in release;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst:45846,assert,assert,45846,interpreter/llvm-project/llvm/docs/CodingStandards.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst,1,['assert'],['assert']
Testability,"ligned is; essential since there is no other way of identifying them. One can; however create ""symbolic links"" to any complex path to make it more; representable for the object it designates:. ~~~{.cpp}; TGeoPNEntry(const char* unique_name, const char* path); void TGeoPNEntry::SetPhysicalNode(TGeoPhysicalNode *node); ~~~. Such a symbolic link hides the complexity of the path to the align; object and replaces it with a more meaningful name. In addition,; TGeoPNEntry objects are faster to search by name and they may; optionally store an additional user matrix. ~~~{.cpp}; // Creating a symlink object.; TGeoPNEntry *TGeoManager::SetAlignableEntry(const char *unique_n,; const char*path); // Retrieving an existing alignable object.; TGeoPNEntry *TGeoManager::GetAlignableEntry(const char *name); // Retrieving an existing alignable object at a given index.; TGeoPNEntry *GetAlignableEntry(Int_t index); ~~~. Physical nodes store internally the full list of logical nodes; corresponding to the elements from the string path, as well as the; global transformation matrix for each of them. The top node corresponds; to the level 0 in the stored array, while the last node will correspond; to level `n`. For each level, the node, volume and global matrix can be; retrieved using corresponding getters:. ~~~{.cpp}; TGeoHMatrix *GetMatrix(Int_t level=-1) const; TGeoNode *GetNode(Int_t level=-1) const; TGeoShape *GetShape(Int_t level=-1) const; TGeoVolume *GetVolume(Int_t level=-1) const; ~~~. By default the object at level n is retrieved (the align-able object). Once created, a physical node can be misaligned, meaning that its; positioning matrix or even the shape.:. ~~~{.cpp}; void Align(TGeoMatrix* newmat=0, TGeoShape* newshape=0,; Bool_t check=kFALSE); ~~~. The convention used is that newmat represents the new local matrix of; the last node in the branch with respect to its mother volume. The; `Align()` method will actually duplicate the corresponding branch within; the logical hierarchy",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md:108426,log,logical,108426,geom/geom/doc/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md,1,['log'],['logical']
Testability,"liminated by using EFLAGS values from arithmetic; instructions. This is currently not done for mul, and, or, xor, neg, shl,; sra, srl, shld, shrd, atomic ops, and others. It is also currently not done; for read-modify-write instructions. It is also current not done if the; OF or CF flags are needed. The shift operators have the complication that when the shift count is; zero, EFLAGS is not set, so they can only subsume a test instruction if; the shift count is known to be non-zero. Also, using the EFLAGS value; from a shift is apparently very slow on some x86 implementations. In read-modify-write instructions, the root node in the isel match is; the store, and isel has no way for the use of the EFLAGS result of the; arithmetic to be remapped to the new node. Add and subtract instructions set OF on signed overflow and CF on unsiged; overflow, while test instructions always clear OF and CF. In order to; replace a test with an add or subtract in a situation where OF or CF is; needed, codegen must be able to prove that the operation cannot see; signed or unsigned overflow, respectively. //===---------------------------------------------------------------------===//. memcpy/memmove do not lower to SSE copies when possible. A silly example is:; define <16 x float> @foo(<16 x float> %A) nounwind {; 	%tmp = alloca <16 x float>, align 16; 	%tmp2 = alloca <16 x float>, align 16; 	store <16 x float> %A, <16 x float>* %tmp; 	%s = bitcast <16 x float>* %tmp to i8*; 	%s2 = bitcast <16 x float>* %tmp2 to i8*; 	call void @llvm.memcpy.i64(i8* %s, i8* %s2, i64 64, i32 16); 	%R = load <16 x float>* %tmp2; 	ret <16 x float> %R; }. declare void @llvm.memcpy.i64(i8* nocapture, i8* nocapture, i64, i32) nounwind. which compiles to:. _foo:; 	subl	$140, %esp; 	movaps	%xmm3, 112(%esp); 	movaps	%xmm2, 96(%esp); 	movaps	%xmm1, 80(%esp); 	movaps	%xmm0, 64(%esp); 	movl	60(%esp), %eax; 	movl	%eax, 124(%esp); 	movl	56(%esp), %eax; 	movl	%eax, 120(%esp); 	movl	52(%esp), %eax; <many many more 32-bit ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:31329,test,test,31329,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt,1,['test'],['test']
Testability,"ling link-time optimization. Possible values are ``Off``,; ``On``, ``Thin`` and ``Full``. Defaults to OFF. **LLVM_ENABLE_MODULES**:BOOL; Compile with `Clang Header Modules; <https://clang.llvm.org/docs/Modules.html>`_. **LLVM_ENABLE_PEDANTIC**:BOOL; Enable pedantic mode. This disables compiler-specific extensions, if; possible. Defaults to ON. **LLVM_ENABLE_PIC**:BOOL; Add the ``-fPIC`` flag to the compiler command-line, if the compiler supports; this flag. Some systems, like Windows, do not need this flag. Defaults to ON. **LLVM_ENABLE_PROJECTS**:STRING; Semicolon-separated list of projects to build, or *all* for building all; (clang, lldb, lld, polly, etc) projects. This flag assumes that projects; are checked out side-by-side and not nested, i.e. clang needs to be in; parallel of llvm instead of nested in `llvm/tools`. This feature allows; to have one build for only LLVM and another for clang+llvm using the same; source checkout.; The full list is:; ``clang;clang-tools-extra;cross-project-tests;libc;libclc;lld;lldb;openmp;polly;pstl``. **LLVM_ENABLE_RUNTIMES**:STRING; Build libc++, libc++abi, libunwind or compiler-rt using the just-built compiler.; This is the correct way to build runtimes when putting together a toolchain.; It will build the builtins separately from the other runtimes to preserve; correct dependency ordering. If you want to build the runtimes using a system; compiler, see the `libc++ documentation <https://libcxx.llvm.org/BuildingLibcxx.html>`_.; Note: the list should not have duplicates with `LLVM_ENABLE_PROJECTS`.; The full list is:; ``compiler-rt;libc;libcxx;libcxxabi;libunwind;openmp``; To enable all of them, use:; ``LLVM_ENABLE_RUNTIMES=all``. **LLVM_ENABLE_RTTI**:BOOL; Build LLVM with run-time type information. Defaults to OFF. **LLVM_ENABLE_SPHINX**:BOOL; If specified, CMake will search for the ``sphinx-build`` executable and will make; the ``SPHINX_OUTPUT_HTML`` and ``SPHINX_OUTPUT_MAN`` CMake options available.; Defaults to OFF. **LLVM_",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst:24426,test,tests,24426,interpreter/llvm-project/llvm/docs/CMake.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst,1,['test'],['tests']
Testability,"ling psutil for all; users for the regression tests and make Python available from the command; line.; 6. In the second install screen, select (again) **Install for all users** and; if you want to develop `lldb <https://lldb.llvm.org/>`_, selecting; **Download debug binaries** is useful.; 7. Complete the Python installation.; 8. Run a ""Developer Command Prompt for VS 2019"" **as administrator**. This command; prompt provides correct path and environment variables to Visual Studio and; the installed tools.; 9. In the terminal window, type the commands:. .. code-block:: bat. c:; cd \. You may install the llvm sources in other location than ``c:\llvm`` but do not; install into a path containing spaces (e.g. ``c:\Documents and Settings\...``); as it will fail. 10. Register the Microsoft Debug Interface Access (DIA) DLLs. .. code-block:: bat. regsvr32 ""%VSINSTALLDIR%\DIA SDK\bin\msdia140.dll""; regsvr32 ""%VSINSTALLDIR%\DIA SDK\bin\amd64\msdia140.dll"". The DIA library is required for LLVM PDB tests and; `LLDB development <https://lldb.llvm.org/resources/build.html>`_. 11. Install psutil and obtain LLVM source code:. .. code-block:: bat. pip install psutil; git clone https://github.com/llvm/llvm-project.git llvm. Instead of ``git clone`` you may download a compressed source distribution; from the `releases page <https://github.com/llvm/llvm-project/releases>`_.; Select the last link: ``Source code (zip)`` and unpack the downloaded file using; Windows Explorer built-in zip support or any other unzip tool. 12. Finally, configure LLVM using CMake:. .. code-block:: bat. cmake -S llvm\llvm -B build -DLLVM_ENABLE_PROJECTS=clang -DLLVM_TARGETS_TO_BUILD=X86 -Thost=x64; exit. ``LLVM_ENABLE_PROJECTS`` specifies any additional LLVM projects you want to; build while ``LLVM_TARGETS_TO_BUILD`` selects the compiler targets. If; ``LLVM_TARGETS_TO_BUILD`` is omitted by default all targets are built; slowing compilation and using more disk space.; See the :doc:`LLVM CMake guide <CMake>` for de",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStartedVS.rst:4401,test,tests,4401,interpreter/llvm-project/llvm/docs/GettingStartedVS.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStartedVS.rst,1,['test'],['tests']
Testability,ling/Refactoring/Extract/Extract.cpp; clang/lib/Tooling/Refactoring/Rename/SymbolOccurrences.cpp; clang/lib/Tooling/Refactoring/Rename/USRFinder.cpp; clang/lib/Tooling/Syntax/BuildTree.cpp; clang/lib/Tooling/Syntax/ComputeReplacements.cpp; clang/lib/Tooling/Syntax/Mutations.cpp; clang/lib/Tooling/Syntax/Nodes.cpp; clang/lib/Tooling/Syntax/Synthesis.cpp; clang/lib/Tooling/Syntax/Tree.cpp; clang/lib/Tooling/Syntax/Pseudo/Grammar.cpp; clang/lib/Tooling/Syntax/Pseudo/GrammarBNF.cpp; clang/lib/Tooling/Syntax/Pseudo/Lex.cpp; clang/lib/Tooling/Syntax/Pseudo/LRGraph.cpp; clang/lib/Tooling/Syntax/Pseudo/LRTable.cpp; clang/lib/Tooling/Syntax/Pseudo/LRTableBuild.cpp; clang/lib/Tooling/Syntax/Pseudo/Preprocess.cpp; clang/lib/Tooling/Syntax/Pseudo/Token.cpp; clang/lib/Tooling/Transformer/Parsing.cpp; clang/lib/Tooling/Transformer/SourceCodeBuilders.cpp; clang/lib/Tooling/Transformer/Stencil.cpp; clang/lib/Tooling/Transformer/Transformer.cpp; clang/tools/amdgpu-arch/AMDGPUArch.cpp; clang/tools/apinotes-test/APINotesTest.cpp; clang/tools/clang-format/ClangFormat.cpp; clang/tools/clang-fuzzer/ClangFuzzer.cpp; clang/tools/clang-fuzzer/DummyClangFuzzer.cpp; clang/tools/clang-fuzzer/ExampleClangLLVMProtoFuzzer.cpp; clang/tools/clang-fuzzer/ExampleClangLoopProtoFuzzer.cpp; clang/tools/clang-fuzzer/handle-llvm/handle_llvm.h; clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp; clang/tools/clang-linker-wrapper/OffloadWrapper.cpp; clang/tools/clang-pseudo/ClangPseudo.cpp; clang/tools/clang-refactor/ClangRefactor.cpp; clang/tools/clang-refactor/TestSupport.cpp; clang/tools/clang-refactor/TestSupport.h; clang/tools/clang-refactor/ToolRefactoringResultConsumer.h; clang/tools/clang-rename/ClangRename.cpp; clang/tools/clang-repl/ClangRepl.cpp; clang/tools/clang-scan-deps/ClangScanDeps.cpp; clang/tools/clang-shlib/clang-shlib.cpp; clang/tools/driver/cc1gen_reproducer_main.cpp; clang/tools/libclang/CIndex.cpp; clang/tools/libclang/CIndexUSRs.cpp; clang/tools/libclang/CursorVisitor.h; clang/t,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:27491,test,test,27491,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['test']
Testability,"linking with the libFuzzer library.; Note that ``-fsanitize=fuzzer`` links in the libFuzzer's ``main()`` symbol. If modifying ``CFLAGS`` of a large project, which also compiles executables; requiring their own ``main`` symbol, it may be desirable to request just the; instrumentation without linking::. clang -fsanitize=fuzzer-no-link mytarget.c. Then libFuzzer can be linked to the desired driver by passing in; ``-fsanitize=fuzzer`` during the linking stage. .. _libfuzzer-corpus:. Corpus; ------. Coverage-guided fuzzers like libFuzzer rely on a corpus of sample inputs for the; code under test. This corpus should ideally be seeded with a varied collection; of valid and invalid inputs for the code under test; for example, for a graphics; library the initial corpus might hold a variety of different small PNG/JPG/GIF; files. The fuzzer generates random mutations based around the sample inputs in; the current corpus. If a mutation triggers execution of a previously-uncovered; path in the code under test, then that mutation is saved to the corpus for; future variations. LibFuzzer will work without any initial seeds, but will be less; efficient if the library under test accepts complex,; structured inputs. The corpus can also act as a sanity/regression check, to confirm that the; fuzzing entrypoint still works and that all of the sample inputs run through; the code under test without problems. If you have a large corpus (either generated by fuzzing or acquired by other means); you may want to minimize it while still preserving the full coverage. One way to do that; is to use the `-merge=1` flag:. .. code-block:: console. mkdir NEW_CORPUS_DIR # Store minimized corpus here.; ./my_fuzzer -merge=1 NEW_CORPUS_DIR FULL_CORPUS_DIR. You may use the same flag to add more interesting items to an existing corpus.; Only the inputs that trigger new coverage will be added to the first corpus. .. code-block:: console. ./my_fuzzer -merge=1 CURRENT_CORPUS_DIR NEW_POTENTIALLY_INTERESTING_INPUT",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst:4564,test,test,4564,interpreter/llvm-project/llvm/docs/LibFuzzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst,1,['test'],['test']
Testability,"list of contributors see $ROOTSYS/README/CREDITS. # @author Danilo Piparo CERN, 2018; # @author Patrick Bos, NL eScience Center, 2018. ROOT_ADD_GTEST(testSimple testSimple.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAddPdf testRooAddPdf.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooCacheManager testRooCacheManager.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCategory testRooCategory.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testWorkspace testWorkspace.cxx LIBRARIES RooFitCore RooStats); ROOT_ADD_GTEST(testRooDataHist testRooDataHist.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv4_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv5_ref.root; ${CMAKE_CURRENT_SOURCE_DIR}/dataHistv6_ref.root); ROOT_ADD_GTEST(testRooBinSamplingPdf testRooBinSamplingPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooWrapperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1152,test,testRooAbsPdf,1152,roofit/roofitcore/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt,2,['test'],['testRooAbsPdf']
Testability,"list(APPEND LLVM_COMMON_DEPENDS intrinsics_gen). list(APPEND LLVM_TABLEGEN_FLAGS -I ${LLVM_MAIN_SRC_DIR}/lib/Target). add_llvm_component_library(LLVMTarget; Target.cpp; TargetIntrinsicInfo.cpp; TargetLoweringObjectFile.cpp; TargetMachine.cpp; TargetMachineC.cpp. ADDITIONAL_HEADER_DIRS; ${LLVM_MAIN_INCLUDE_DIR}/llvm/Target. LINK_COMPONENTS; Analysis; Core; MC; Support; TargetParser; ). # When building shared objects for each target there are some internal APIs; # that are used across shared objects which we can't hide.; if (NOT BUILD_SHARED_LIBS AND NOT APPLE AND; (NOT (WIN32 OR CYGWIN) OR (MINGW AND CMAKE_CXX_COMPILER_ID MATCHES ""Clang"")) AND; NOT (${CMAKE_SYSTEM_NAME} MATCHES ""AIX"") AND; NOT DEFINED CMAKE_CXX_VISIBILITY_PRESET); # Set default visibility to hidden, so we don't export all the Target classes; # in libLLVM.so.; set(CMAKE_CXX_VISIBILITY_PRESET hidden); endif(). foreach(t ${LLVM_TARGETS_TO_BUILD}); message(STATUS ""Targeting ${t}""); add_subdirectory(${t}); endforeach(). # Currently we do not allow libraries from lib to reference targets directly.; # This property is used to enforce that convention. It is important because the; # logic in llvm_map_components_to_libnames is order dependent on the target; # libraries being created.; set_property(GLOBAL PROPERTY LLVM_TARGETS_CONFIGURED On); ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/CMakeLists.txt:1158,log,logic,1158,interpreter/llvm-project/llvm/lib/Target/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/CMakeLists.txt,1,['log'],['logic']
Testability,"lit - LLVM Integrated Tester; ============================. .. program:: lit. SYNOPSIS; --------. :program:`lit` [*options*] [*tests*]. DESCRIPTION; -----------. :program:`lit` is a portable tool for executing LLVM and Clang style test; suites, summarizing their results, and providing indication of failures.; :program:`lit` is designed to be a lightweight testing tool with as simple a; user interface as possible. :program:`lit` should be run with one or more *tests* to run specified on the; command line. Tests can be either individual test files or directories to; search for tests (see :ref:`test-discovery`). Each specified test will be executed (potentially concurrently) and once all; tests have been run :program:`lit` will print summary information on the number; of tests which passed or failed (see :ref:`test-status-results`). The; :program:`lit` program will execute with a non-zero exit code if any tests; fail. By default :program:`lit` will use a succinct progress display and will only; print summary information for test failures. See :ref:`output-options` for; options controlling the :program:`lit` progress display and output. :program:`lit` also includes a number of options for controlling how tests are; executed (specific features may depend on the particular test format). See; :ref:`execution-options` for more information. Finally, :program:`lit` also supports additional options for only running a; subset of the options specified on the command line, see; :ref:`selection-options` for more information. :program:`lit` parses options from the environment variable ``LIT_OPTS`` after; parsing options from the command line. ``LIT_OPTS`` is primarily useful for; supplementing or overriding the command-line options supplied to :program:`lit`; by ``check`` targets defined by a project's build system. :program:`lit` can also read options from response files which are specified as; inputs using the ``@path/to/file.rsp`` syntax. Arguments read from a file must; be one p",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:127,test,tests,127,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,13,['test'],"['test', 'test-discovery', 'test-status-results', 'testing', 'tests']"
Testability,"ll Requests as its review process.; We still have an active :ref:`Phabricator <phabricator-reviews>`; instance for the duration of the migration. If you want to contribute to LLVM; now, please use GitHub. For more information about the workflow of using GitHub; Pull Requests see our :ref:`GitHub <github-reviews>` documentation. To make sure the right people see your patch, please select suitable reviewers; and add them to your patch when requesting a review. Suitable reviewers are the; code owner (see CODE_OWNERS.txt) and other people doing work in the area your; patch touches. Github will normally suggest some reviewers based on rules or; people that have worked on the code before. If you are a new contributor, you; will not be able to select reviewers in such a way, in which case you can still; get the attention of potential reviewers by CC'ing them in a comment -- just; @name them. A reviewer may request changes or ask questions during the review. If you are; uncertain on how to provide test cases, documentation, etc., feel free to ask; for guidance during the review. Please address the feedback and re-post an; updated version of your patch. This cycle continues until all requests and comments; have been addressed and a reviewer accepts the patch with a `Looks good to me` or `LGTM`.; Once that is done the change can be committed. If you do not have commit; access, please let people know during the review and someone should commit it; on your behalf. If you have received no comments on your patch for a week, you can request a; review by 'ping'ing the GitHub PR with ""Ping"". The common courtesy 'ping' rate; is once a week. Please remember that you are asking for valuable time from other; professional developers. For more information on LLVM's code-review process, please see :doc:`CodeReview`. .. _commit_from_git:. For developers to commit changes from Git; -----------------------------------------. Once a patch is reviewed, you can select the ""Squash and merge"" butt",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Contributing.rst:4483,test,test,4483,interpreter/llvm-project/llvm/docs/Contributing.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Contributing.rst,1,['test'],['test']
Testability,"ll may call. For example, if a program assumes; a pointer to be a member of ``!""_ZST1A""``, we know that the address can; be only be one of ``_ZTV1A+16``, ``_ZTV1B+16`` or ``_ZTV1D+16`` (i.e. the; address points of the vtables of A, B and D respectively). If we then load; an address from that pointer, we know that the address can only be one of; ``&A::f``, ``&B::f`` or ``&D::f``. .. _address point: https://itanium-cxx-abi.github.io/cxx-abi/abi.html#vtable-general. Testing Addresses For Type Membership; =====================================. If a program tests an address using ``llvm.type.test``, this will cause; a link-time optimization pass, ``LowerTypeTests``, to replace calls to this; intrinsic with efficient code to perform type member tests. At a high level,; the pass will lay out referenced globals in a consecutive memory region in; the object file, construct bit vectors that map onto that memory region,; and generate code at each of the ``llvm.type.test`` call sites to test; pointers against those bit vectors. Because of the layout manipulation, the; globals' definitions must be available at LTO time. For more information,; see the `control flow integrity design document`_. A type identifier that identifies functions is transformed into a jump table,; which is a block of code consisting of one branch instruction for each; of the functions associated with the type identifier that branches to the; target function. The pass will redirect any taken function addresses to the; corresponding jump table entry. In the object file's symbol table, the jump; table entries take the identities of the original functions, so that addresses; taken outside the module will pass any verification done inside the module. Jump tables may call external functions, so their definitions need not; be available at LTO time. Note that if an externally defined function is; associated with a type identifier, there is no guarantee that its identity; within the module will be the same as its i",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TypeMetadata.rst:5411,test,test,5411,interpreter/llvm-project/llvm/docs/TypeMetadata.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TypeMetadata.rst,2,['test'],['test']
Testability,"ll this looks like it is basically working. The dump of the function; shows the ""no argument function that always returns double"" that we; synthesize for each top-level expression that is typed in. This; demonstrates very basic functionality, but can we do more?. ::. ready> def testfunc(x y) x + y*2;; Read function definition:; define double @testfunc(double %x, double %y) {; entry:; %multmp = fmul double %y, 2.000000e+00; %addtmp = fadd double %multmp, %x; ret double %addtmp; }. ready> testfunc(4, 10);; Read top-level expression:; define double @1() {; entry:; %calltmp = call double @testfunc(double 4.000000e+00, double 1.000000e+01); ret double %calltmp; }. Evaluated to 24.000000. ready> testfunc(5, 10);; ready> LLVM ERROR: Program used external function 'testfunc' which could not be resolved!. Function definitions and calls also work, but something went very wrong on that; last line. The call looks valid, so what happened? As you may have guessed from; the API a Module is a unit of allocation for the JIT, and testfunc was part; of the same module that contained anonymous expression. When we removed that; module from the JIT to free the memory for the anonymous expression, we deleted; the definition of ``testfunc`` along with it. Then, when we tried to call; testfunc a second time, the JIT could no longer find it. The easiest way to fix this is to put the anonymous expression in a separate; module from the rest of the function definitions. The JIT will happily resolve; function calls across module boundaries, as long as each of the functions called; has a prototype, and is added to the JIT before it is called. By putting the; anonymous expression in a different module we can delete it without affecting; the rest of the functions. In fact, we're going to go a step further and put every function in its own; module. Doing so allows us to exploit a useful property of the KaleidoscopeJIT; that will make our environment more REPL-like: Functions can be added to the; JIT ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl04.rst:16533,test,testfunc,16533,interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl04.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl04.rst,1,['test'],['testfunc']
Testability,"ll users and then run; ``pip install psutil`` in an elevated command prompt. For more information on using the :program:`lit` tool, see ``llvm-lit --help``; or the :doc:`lit man page <CommandGuide/lit>`. Debugging Information tests; ---------------------------. To run debugging information tests simply add the ``cross-project-tests``; project to your ``LLVM_ENABLE_PROJECTS`` define on the cmake; command-line. Regression test structure; =========================. The LLVM regression tests are driven by :program:`lit` and are located in the; ``llvm/test`` directory. This directory contains a large array of small tests that exercise; various features of LLVM and to ensure that regressions do not occur.; The directory is broken into several sub-directories, each focused on a; particular area of LLVM. Writing new regression tests; ----------------------------. The regression test structure is very simple, but does require some; information to be set. This information is gathered via ``cmake``; and is written to a file, ``test/lit.site.cfg.py`` in the build directory.; The ``llvm/test`` Makefile does this work for you. In order for the regression tests to work, each directory of tests must; have a ``lit.local.cfg`` file. :program:`lit` looks for this file to determine; how to run the tests. This file is just Python code and thus is very; flexible, but we've standardized it for the LLVM regression tests. If; you're adding a directory of tests, just copy ``lit.local.cfg`` from; another directory to get running. The standard ``lit.local.cfg`` simply; specifies which files to look in for tests. Any directory that contains; only directories does not need the ``lit.local.cfg`` file. Read the :doc:`Lit; documentation <CommandGuide/lit>` for more information. Each test file must contain lines starting with ""RUN:"" that tell :program:`lit`; how to run it. If there are no RUN lines, :program:`lit` will issue an error; while running a test. RUN lines are specified in the comments of ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:7523,test,test,7523,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,ll_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Common/default-kinds.h; flang/include/flang/Common/enum-set.h; flang/include/flang/Common/fast-int-set.h; flang/include/flang/Common/format.h; flang/include/flang/Common/Fortran-features.h; flang/include/flang/Common/Fortran.h; flang/,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107771,test,tests,107771,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,2,['test'],['tests']
Testability,"llo-world.o hello-world.c; % llvm-jitlink hello-world.o; Hello, World!. Multiple objects may be specified, and arguments may be provided to the JIT'd; main function using the -args option:. .. code-block:: sh. % cat print-args.c; #include <stdio.h>. void print_args(int argc, char *argv[]) {; for (int i = 0; i != argc; ++i); printf(""arg %i is \""%s\""\n"", i, argv[i]);; }. % cat print-args-main.c; void print_args(int argc, char *argv[]);. int main(int argc, char *argv[]) {; print_args(argc, argv);; return 0;; }. % clang -c -o print-args.o print-args.c; % clang -c -o print-args-main.o print-args-main.c; % llvm-jitlink print-args.o print-args-main.o -args a b c; arg 0 is ""a""; arg 1 is ""b""; arg 2 is ""c"". Alternative entry points may be specified using the ``-entry <entry point; name>`` option. Other options can be found by calling ``llvm-jitlink -help``. llvm-jitlink as a regression testing utility; --------------------------------------------. One of the primary aims of ``llvm-jitlink`` was to enable readable regression; tests for JITLink. To do this it supports two options:. The ``-noexec`` option tells llvm-jitlink to stop after looking up the entry; point, and before attempting to execute it. Since the linked code is not; executed, this can be used to link for other targets even if you do not have; access to the target being linked (the ``-define-abs`` or ``-phony-externals``; options can be used to supply any missing definitions in this case). The ``-check <check-file>`` option can be used to run a set of ``jitlink-check``; expressions against working memory. It is typically used in conjunction with; ``-noexec``, since the aim is to validate JIT'd memory rather than to run the; code and ``-noexec`` allows us to link for any supported target architecture; from the current process. In ``-check`` mode, ``llvm-jitlink`` will scan the; given check-file for lines of the form ``# jitlink-check: <expr>``. See; examples of this usage in ``llvm/test/ExecutionEngine/JITLink``. R",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/JITLink.rst:38705,test,tests,38705,interpreter/llvm-project/llvm/docs/JITLink.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/JITLink.rst,1,['test'],['tests']
Testability,"llocator:. unix.MismatchedDeallocator (C, C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for mismatched deallocators. .. literalinclude:: checkers/mismatched_deallocator_example.cpp; :language: c. .. _unix-Vfork:. unix.Vfork (C); """"""""""""""""""""""""""""; Check for proper usage of ``vfork``. .. code-block:: c. int test(int x) {; pid_t pid = vfork(); // warn; if (pid != 0); return 0;. switch (x) {; case 0:; pid = 1;; execl("""", """", 0);; _exit(1);; break;; case 1:; x = 0; // warn: this assignment is prohibited; break;; case 2:; foo(); // warn: this function call is prohibited; break;; default:; return 0; // warn: return is prohibited; }. while(1);; }. .. _unix-cstring-BadSizeArg:. unix.cstring.BadSizeArg (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""; Check the size argument passed into C string functions for common erroneous patterns. Use ``-Wno-strncat-size`` compiler option to mute other ``strncat``-related compiler warnings. .. code-block:: c. void test() {; char dest[3];; strncat(dest, """"""""""""""""""""""""""""""""""""""""""""""""""*"", sizeof(dest));; // warn: potential buffer overflow; }. .. _unix-cstring-NullArg:. unix.cstring.NullArg (C); """"""""""""""""""""""""""""""""""""""""""""""""; Check for null pointers being passed as arguments to C string functions:; ``strlen, strnlen, strcpy, strncpy, strcat, strncat, strcmp, strncmp, strcasecmp, strncasecmp, wcslen, wcsnlen``. .. code-block:: c. int test() {; return strlen(0); // warn; }. .. _unix-StdCLibraryFunctions:. unix.StdCLibraryFunctions (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for calls of standard library functions that violate predefined argument; constraints. For example, according to the C standard the behavior of function; ``int isalnum(int ch)`` is undefined if the value of ``ch`` is not representable; as ``unsigned char`` and is not equal to ``EOF``. You can think of this checker as defining restrictions (pre- and postconditions); on standard library functions. Preconditions are checked, and when they are; violated, a warning is emitted. Postconditions are added to ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:30159,test,test,30159,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"llowing a suggestion by G. Raven. Functions like SetX instead of returning a void return now a reference to the vector class itself (*this).; Detailed description of the current GenVector release can be found at this location. SMatrix; Fix a bug discovered by Harals Soleng in the addition of two matrix expressions. Remove also some compilation warning found on Windows when compiling matrices instantiated using float types.; Detailed description of the current SMatrix release can be found at this location. Minuit; Two new classes have been added:; ; TMinuitMinimizer: implementation of the ROOT::Math::Minimizer interface with TMinuit. This class is used for example by the new Fitter class.; TLinearMinimizer: implementation of the ROOT::Math::Minimizer interface with the TLinearFitter.; ; In addition, the method TLinearFitter::SetBasisFunction(TObjArray * f) has been added to set directly the linear terms of the fit function. Minuit2. Various fixes have been applied to different problems discovered mainly by a test program from Alfio Lazzaro. In detail:; . Fix a bug in MnMinos which was setting wrong initial values when the parameters were limited.; This was resulting in a much larger number of function calls used inside MnMinos. ; Improve MnHesse by returning in the final state the improved gradient step values used in HessianGradientCalculator. With this change same results are obtained from using Hesse in Minuit2 or TMinuit. In addition, the interface of MnHesse (MnHesse::operator() ) has been improved to use it from the FunctionMinimum object (similar to MnMinos) in order to be called after the minimization (Migrad). The API with a MnUserParameterState should not be used after minimization, because in that case the latest state information resulting from the minimum (gradient values and step sizes) is lost. Add support in MnMigrad and MnMinimize for user provided analytical gradient of the FCN function. One needs to pass an instance of a function implementing the R",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:12873,test,test,12873,math/doc/v520/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html,1,['test'],['test']
Testability,"llows you to create MIR tests that invoke just; a single code generation pass. When this option is used, llc will parse an; input MIR file, run the specified code generation pass(es), and output the; resulting MIR code. You can generate an input MIR file for the test by using the ``-stop-after`` or; ``-stop-before`` option in llc. For example, if you would like to write a test; for the post register allocation pseudo instruction expansion pass, you can; specify the machine copy propagation pass in the ``-stop-after`` option, as it; runs just before the pass that we are trying to test:. ``llc -stop-after=machine-cp bug-trigger.ll -o test.mir``. If the same pass is run multiple times, a run index can be included; after the name with a comma. ``llc -stop-after=dead-mi-elimination,1 bug-trigger.ll -o test.mir``. After generating the input MIR file, you'll have to add a run line that uses; the ``-run-pass`` option to it. In order to test the post register allocation; pseudo instruction expansion pass on X86-64, a run line like the one shown; below can be used:. ``# RUN: llc -o - %s -mtriple=x86_64-- -run-pass=postrapseudos | FileCheck %s``. The MIR files are target dependent, so they have to be placed in the target; specific test directories (``lib/CodeGen/TARGETNAME``). They also need to; specify a target triple or a target architecture either in the run line or in; the embedded LLVM IR module. Simplifying MIR files; ^^^^^^^^^^^^^^^^^^^^^. The MIR code coming out of ``-stop-after``/``-stop-before`` is very verbose;; Tests are more accessible and future proof when simplified:. - Use the ``-simplify-mir`` option with llc. - Machine function attributes often have default values or the test works just; as well with default values. Typical candidates for this are: `alignment:`,; `exposesReturnsTwice`, `legalized`, `regBankSelected`, `selected`.; The whole `frameInfo` section is often unnecessary if there is no special; frame usage in the function. `tracksRegLiveness` on the o",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MIRLangRef.rst:2492,test,test,2492,interpreter/llvm-project/llvm/docs/MIRLangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MIRLangRef.rst,1,['test'],['test']
Testability,"llvm-config - Print LLVM compilation options; ============================================. .. program:: llvm-config. SYNOPSIS; --------. **llvm-config** *option* [*components*...]. DESCRIPTION; -----------. **llvm-config** makes it easier to build applications that use LLVM. It can; print the compiler flags, linker flags and object libraries needed to link; against LLVM. EXAMPLES; --------. To link against the JIT:. .. code-block:: sh. g++ `llvm-config --cxxflags` -o HowToUseJIT.o -c HowToUseJIT.cpp; g++ `llvm-config --ldflags` -o HowToUseJIT HowToUseJIT.o \; `llvm-config --libs engine bcreader scalaropts`. OPTIONS; -------. **--assertion-mode**. Print the assertion mode used when LLVM was built (ON or OFF). **--bindir**. Print the installation directory for LLVM binaries. **--build-mode**. Print the build mode used when LLVM was built (e.g. Debug or Release). **--build-system**. Print the build system used to build LLVM (e.g. `cmake` or `gn`). **--cflags**. Print the C compiler flags needed to use LLVM headers. **--cmakedir**. Print the installation directory for LLVM CMake modules. **--components**. Print all valid component names. **--cppflags**. Print the C preprocessor flags needed to use LLVM headers. **--cxxflags**. Print the C++ compiler flags needed to use LLVM headers. **--has-rtti**. Print whether or not LLVM was built with rtti (YES or NO). **--help**. Print a summary of **llvm-config** arguments. **--host-target**. Print the target triple used to configure LLVM. **--ignore-libllvm**. Ignore libLLVM and link component libraries instead. **--includedir**. Print the installation directory for LLVM headers. **--ldflags**. Print the flags needed to link against LLVM libraries. **--libdir**. Print the installation directory for LLVM libraries. **--libfiles**. Similar to **--libs**, but print the full path to each library file. This is; useful when creating makefile dependencies, to ensure that a tool is relinked if; any library it uses changes. **--libnames**",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-config.rst:638,assert,assertion-mode,638,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-config.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-config.rst,2,['assert'],"['assertion', 'assertion-mode']"
Testability,"llvm-debuginfo-analyzer - Print a logical representation of low-level debug information.; ========================================================================================. .. program:: llvm-debuginfo-analyzer. .. contents::; :local:. SYNOPSIS; --------; :program:`llvm-debuginfo-analyzer` [*options*] [*filename ...*]. DESCRIPTION; -----------; :program:`llvm-debuginfo-analyzer` parses debug and text sections in; binary object files and prints their contents in a logical view, which; is a human readable representation that closely matches the structure; of the original user source code. Supported object file formats include; ELF, Mach-O, PDB and COFF. The **logical view** abstracts the complexity associated with the; different low-level representations of the debugging information that; is embedded in the object file. :program:`llvm-debuginfo-analyzer`; produces a canonical view of the debug information regardless of how it; is formatted. The same logical view will be seen regardless of object; file format, assuming the debug information correctly represents the; same original source code. The logical view includes the following **logical elements**: *type*,; *scope*, *symbol* and *line*, which are the basic software elements used; in the C/C++ programming language. Each logical element has a set of; **attributes**, such as *types*, *classes*, *functions*, *variables*,; *parameters*, etc. The :option:`--attribute` can be used to specify which; attributes to include when printing a logical element. A logical element; may have a **kind** that describes specific types of elements. For; instance, a *scope* could have a kind value of *function*, *class*,; *namespace*. :program:`llvm-debuginfo-analyzer` defaults to print a pre-defined; layout of logical elements and attributes. The command line options can; be used to control the printed elements (:option:`--print`), using a; specific layout (:option:`--report`), matching a given pattern; (:option:`--select`, :option",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:34,log,logical,34,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,3,['log'],['logical']
Testability,"llvm-exegesis - LLVM Machine Instruction Benchmark; ==================================================. .. program:: llvm-exegesis. SYNOPSIS; --------. :program:`llvm-exegesis` [*options*]. DESCRIPTION; -----------. :program:`llvm-exegesis` is a benchmarking tool that uses information available; in LLVM to measure host machine instruction characteristics like latency,; throughput, or port decomposition. Given an LLVM opcode name and a benchmarking mode, :program:`llvm-exegesis`; generates a code snippet that makes execution as serial (resp. as parallel) as; possible so that we can measure the latency (resp. inverse throughput/uop decomposition); of the instruction.; The code snippet is jitted and, unless requested not to, executed on the; host subtarget. The time taken (resp. resource usage) is measured using; hardware performance counters. The result is printed out as YAML; to the standard output. The main goal of this tool is to automatically (in)validate the LLVM's TableDef; scheduling models. To that end, we also provide analysis of the results. :program:`llvm-exegesis` can also benchmark arbitrary user-provided code; snippets. SUPPORTED PLATFORMS; -------------------. :program:`llvm-exegesis` currently only supports X86 (64-bit only), ARM (AArch64; only), MIPS, and PowerPC (PowerPC64LE only) on Linux for benchmarking. Not all; benchmarking functionality is guaranteed to work on every platform.; :program:`llvm-exegesis` also has a separate analysis mode that is supported; on every platform that LLVM is. SNIPPET ANNOTATIONS; -------------------. :program:`llvm-exegesis` supports benchmarking arbitrary snippets of assembly.; However, benchmarking these snippets often requires some setup so that they; can execute properly. :program:`llvm-exegesis` has five annotations and some; additional utilities to help with setup so that snippets can be benchmarked; properly. * `LLVM-EXEGESIS-DEFREG <register name>` - Adding this annotation to the text; assembly snippet to be be",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst:246,benchmark,benchmarking,246,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,2,['benchmark'],['benchmarking']
Testability,"llvm-extract - extract a function from an LLVM module; =====================================================. .. program:: llvm-extract. SYNOPSIS; --------. :program:`llvm-extract` [*options*] **--func** *function-name* [*filename*]. DESCRIPTION; -----------. The :program:`llvm-extract` command takes the name of a function and extracts; it from the specified LLVM bitcode file. It is primarily used as a debugging; tool to reduce test cases from larger programs that are triggering a bug. In addition to extracting the bitcode of the specified function,; :program:`llvm-extract` will also remove unreachable global variables,; prototypes, and unused types. The :program:`llvm-extract` command reads its input from standard input if; filename is omitted or if filename is ``-``. The output is always written to; standard output, unless the **-o** option is specified (see below). OPTIONS; -------. **--alias** *alias-name*. Extract the alias named *function-name* from the LLVM bitcode. May be; specified multiple times to extract multiple alias at once. **--ralias** *alias-regular-expr*. Extract the alias matching *alias-regular-expr* from the LLVM bitcode.; All alias matching the regular expression will be extracted. May be; specified multiple times. **--bb** *basic-block-specifier*. Extract basic blocks(s) specified in *basic-block-specifier*. May be; specified multiple times. Each <function:bb[;bb]> specifier pair will create; a function. If multiple basic blocks are specified in one pair, the first; block in the sequence should dominate the rest. **--delete**. Delete specified Globals from Module. **-f**. Enable binary output on terminals. Normally, :program:`llvm-extract` will; refuse to write raw bitcode output if the output stream is a terminal. With; this option, :program:`llvm-extract` will write raw bitcode regardless of the; output device. **--func** *function-name*. Extract the function named *function-name* from the LLVM bitcode. May be; specified multiple times to ex",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-extract.rst:432,test,test,432,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-extract.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-extract.rst,1,['test'],['test']
Testability,"llvm-ifs - shared object stubbing tool; ======================================. .. program:: llvm-ifs. SYNOPSIS; --------. :program:`llvm-ifs` [*options*] *inputs*. DESCRIPTION; -----------. :program:`llvm-ifs` is a tool that jointly produces human readable text-based; stubs (.ifs files) for shared objects and linkable shared object stubs; (.so files) from either ELF shared objects or text-based stubs. The text-based; stubs is useful for monitoring ABI changes of the shared object. The linkable; shared object stubs can be used to avoid unnecessary relinks when the ABI of; shared libraries does not change. IFS FORMATS; -----------. Here is an example of the text representation (IFS) of a shared object produced; by the :program:`llvm-ifs`:. ::. --- !ifs-v1; IFSVersion: 3.0; SoName: libtest.so /* Optional */; Target: x86_64-unknown-linux-gnu /* Optional, format 1, same format as llvm target triple */; Target: { Arch: x86_64, Endianness: little, Bitwidth: 64 } /* Optional, format 2 */; NeededLibs:; - libc.so.6; Symbols:; - { Name: sym0, Type: Notype }; - { Name: sym1, Type: Object, Size: 0 }; - { Name: sym2, Type: Func, Weak: false }; - { Name: sym3, Type: TLS }; - { Name: sym4, Type: Unknown, Warning: foo }; ... * ``IFSVersion``: Version of the IFS file for reader compatibility. * ``SoName`` (optional): Name of the shared object file that is being stubbed. * ``Target`` (optional): The architecture, endianness and bitwise information of; this shared object. It can be either in explicit format or in implicit LLVM; triple format. It can be optional and can be overridden from command line; options. * ``NeededLibs``: The list of the external shared objects that this library depends on. * ``Symbols``: A collection of all data needed to link objects for each symbol, sorted by name in ascending order. + ``Name``: Symbol name. + ``Type``: Whether the symbol is an object, function, no-type, thread local storage, or unknown. Symbol types not explicitly supported are mapped as unkn",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-ifs.rst:25,stub,stubbing,25,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-ifs.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-ifs.rst,6,['stub'],"['stubbing', 'stubs']"
Testability,"llvm-original-di-preservation.py`` script; to generate an HTML page with the issues reported in a more human readable form; as follows:. .. code-block:: bash. $ llvm-original-di-preservation.py sample.json sample.html. Testing of original debug info preservation can be invoked from front-end level; as follows:. .. code-block:: bash. # Test each pass.; $ clang -Xclang -fverify-debuginfo-preserve -g -O2 sample.c. # Test each pass and export the issues report into the JSON file.; $ clang -Xclang -fverify-debuginfo-preserve -Xclang -fverify-debuginfo-preserve-export=sample.json -g -O2 sample.c. Please do note that there are some known false positives, for source locations; and debug intrinsic checking, so that will be addressed as a future work. Mutation testing for MIR-level transformations; ----------------------------------------------. A variant of the ``debugify`` utility described in; :ref:`Mutation testing for IR-level transformations<IRDebugify>` can be used; for MIR-level transformations as well: much like the IR-level pass,; ``mir-debugify`` inserts sequentially increasing line locations to each; ``MachineInstr`` in a ``Module``. And the MIR-level ``mir-check-debugify`` is; similar to IR-level ``check-debugify`` pass. For example, here is a snippet before:. .. code-block:: llvm. name: test; body: |; bb.1 (%ir-block.0):; %0:_(s32) = IMPLICIT_DEF; %1:_(s32) = IMPLICIT_DEF; %2:_(s32) = G_CONSTANT i32 2; %3:_(s32) = G_ADD %0, %2; %4:_(s32) = G_SUB %3, %1. and after running ``llc -run-pass=mir-debugify``:. .. code-block:: llvm. name: test; body: |; bb.0 (%ir-block.0):; %0:_(s32) = IMPLICIT_DEF debug-location !12; DBG_VALUE %0(s32), $noreg, !9, !DIExpression(), debug-location !12; %1:_(s32) = IMPLICIT_DEF debug-location !13; DBG_VALUE %1(s32), $noreg, !11, !DIExpression(), debug-location !13; %2:_(s32) = G_CONSTANT i32 2, debug-location !14; DBG_VALUE %2(s32), $noreg, !9, !DIExpression(), debug-location !14; %3:_(s32) = G_ADD %0, %2, debug-location !DILocation(line:",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst:15821,test,testing,15821,interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,1,['test'],['testing']
Testability,"llvm-pdbutil - PDB File forensics and diagnostics; =================================================. .. program:: llvm-pdbutil. .. contents::; :local:. Synopsis; --------. :program:`llvm-pdbutil` [*subcommand*] [*options*]. Description; -----------. Display types, symbols, CodeView records, and other information from a; PDB file, as well as manipulate and create PDB files. :program:`llvm-pdbutil`; is normally used by FileCheck-based tests to test LLVM's PDB reading and; writing functionality, but can also be used for general PDB file investigation; and forensics, or as a replacement for cvdump. Subcommands; -----------. :program:`llvm-pdbutil` is separated into several subcommands each tailored to; a different purpose. A brief summary of each command follows, with more detail; in the sections that follow. * :ref:`pretty_subcommand` - Dump symbol and type information in a format that; tries to look as much like the original source code as possible.; * :ref:`dump_subcommand` - Dump low level types and structures from the PDB; file, including CodeView records, hash tables, PDB streams, etc.; * :ref:`bytes_subcommand` - Dump data from the PDB file's streams, records,; types, symbols, etc as raw bytes.; * :ref:`yaml2pdb_subcommand` - Given a yaml description of a PDB file, produce; a valid PDB file that matches that description.; * :ref:`pdb2yaml_subcommand` - For a given PDB file, produce a YAML; description of some or all of the file in a way that the PDB can be; reconstructed.; * :ref:`merge_subcommand` - Given two PDBs, produce a third PDB that is the; result of merging the two input PDBs. .. _pretty_subcommand:. pretty; ~~~~~~. .. program:: llvm-pdbutil pretty. .. important::; The **pretty** subcommand is built on the Windows DIA SDK, and as such is not; supported on non-Windows platforms. USAGE: :program:`llvm-pdbutil` pretty [*options*] <input PDB file>. Summary; ^^^^^^^^^^^. The *pretty* subcommand displays a very high level representation of your; program's debu",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-pdbutil.rst:438,test,tests,438,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-pdbutil.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-pdbutil.rst,2,['test'],"['test', 'tests']"
Testability,"llvm-reduce - LLVM automatic testcase reducer.; ==============================================. .. program:: llvm-reduce. SYNOPSIS; --------. :program:`llvm-reduce` [*options*] [*input...*]. DESCRIPTION; -----------. The :program:`llvm-reduce` tool project that can be used for reducing the size of LLVM test cases.; It works by removing redundant or unnecessary code from LLVM test cases while still preserving ; their ability to detect bugs. If ``input`` is ""``-``"", :program:`llvm-reduce` reads from standard; input. Otherwise, it will read from the specified ``filenames``. LLVM-Reduce is a useful tool for reducing the size and ; complexity of LLVM test cases, making it easier to identify and debug issues in ; the LLVM compiler infrastructure. GENERIC OPTIONS; ---------------. .. option:: --help. Display available options (--help-hidden for more). .. option:: --abort-on-invalid-reduction. Abort if any reduction results in invalid IR. .. option::--delta-passes=<string> . Delta passes to run, separated by commas. By default, run all delta passes. .. option:: --in-place . WARNING: This option will replace your input file with the reduced version!. .. option:: --ir-passes=<string> . A textual description of the pass pipeline, same as what's passed to `opt -passes`. .. option:: -j <uint> . Maximum number of threads to use to process chunks. Set to 1 to disable parallelism. .. option:: --max-pass-iterations=<int>. Maximum number of times to run the full set of delta passes (default=5). .. option:: --mtriple=<string> . Set the target triple. .. option:: --preserve-debug-environment. Don't disable features used for crash debugging (crash reports, llvm-symbolizer and core dumps). .. option:: --print-delta-passes . Print list of delta passes, passable to --delta-passes as a comma separated liste. .. option:: --skip-delta-passes=<string> . Delta passes to not run, separated by commas. By default, run all delta passes. .. option:: --starting-granularity-level=<uint>. Number of time",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-reduce.rst:29,test,testcase,29,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-reduce.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-reduce.rst,4,['test'],"['test', 'testcase']"
Testability,llvm-stress - generate random .ll files; =======================================. .. program:: llvm-stress. SYNOPSIS; --------. :program:`llvm-stress` [-size=filesize] [-seed=initialseed] [-o=outfile]. DESCRIPTION; -----------. The :program:`llvm-stress` tool is used to generate random ``.ll`` files that; can be used to test different components of LLVM. OPTIONS; -------. .. option:: -o filename. Specify the output filename. .. option:: -size size. Specify the size of the generated ``.ll`` file. .. option:: -seed seed. Specify the seed to be used for the randomly generated instructions. EXIT STATUS; -----------. :program:`llvm-stress` returns 0.; ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-stress.rst:322,test,test,322,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-stress.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-stress.rst,1,['test'],['test']
Testability,"llvm-symbolizer - convert addresses into source code locations; ==============================================================. .. program:: llvm-symbolizer. SYNOPSIS; --------. :program:`llvm-symbolizer` [*options*] [*addresses...*]. DESCRIPTION; -----------. :program:`llvm-symbolizer` reads input names and addresses from the command-line; and prints corresponding source code locations to standard output. It can also; symbolize logs containing :doc:`Symbolizer Markup </SymbolizerMarkupFormat>` via; :option:`--filter-markup`. Addresses may be specified as numbers or symbol names. If no address is specified on the command-line, it reads the addresses from; standard input. If no input name is specified on the command-line, but addresses; are, the first address value is treated as an input name. If an input value is not; recognized, it reports that source information is not found. Input names can be specified together with the addresses either on standard; input or as positional arguments on the command-line. By default, input names; are interpreted as object file paths. However, prefixing a name with; ``BUILDID:`` states that it is a hex build ID rather than a path. This will look; up the corresponding debug binary. For consistency, prefixing a name with; ``FILE:`` explicitly states that it is an object file path (the default). A positional argument or standard input value can be preceded by ""DATA"" or; ""CODE"" to indicate that the address should be symbolized as data or executable; code respectively. If neither is specified, ""CODE"" is assumed. DATA is; symbolized as address and symbol size rather than line number. :program:`llvm-symbolizer` parses options from the environment variable; ``LLVM_SYMBOLIZER_OPTS`` after parsing options from the command line.; ``LLVM_SYMBOLIZER_OPTS`` is primarily useful for supplementing the command-line; options when :program:`llvm-symbolizer` is invoked by another program or; runtime. EXAMPLES; --------. All of the following examples use ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:433,log,logs,433,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['log'],['logs']
Testability,"llvm.org/docs/LanguageExtensions.html#memory-references-to-specified-segments>`__; for reference. The ``SuppressAddressSpaces`` option suppresses; warnings for null dereferences of all pointers with address spaces. You can; disable this behavior with the option; ``-analyzer-config core.NullDereference:SuppressAddressSpaces=false``.; *Defaults to true*. .. code-block:: objc. // C; void test(int *p) {; if (p); return;. int x = p[0]; // warn; }. // C; void test(int *p) {; if (!p); *p = 0; // warn; }. // C++; class C {; public:; int x;; };. void test() {; C *pc = 0;; int k = pc->x; // warn; }. // Objective-C; @interface MyClass {; @public; int x;; }; @end. void test() {; MyClass *obj = 0;; obj->x = 1; // warn; }. .. _core-StackAddressEscape:. core.StackAddressEscape (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""; Check that addresses to stack memory do not escape the function. .. code-block:: c. char const *p;. void test() {; char const str[] = ""string"";; p = str; // warn; }. void* test() {; return __builtin_alloca(12); // warn; }. void test() {; static int *x;; int y;; x = &y; // warn; }. .. _core-UndefinedBinaryOperatorResult:. core.UndefinedBinaryOperatorResult (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for undefined results of binary operators. .. code-block:: c. void test() {; int x;; int y = x + 1; // warn: left operand is garbage; }. .. _core-VLASize:. core.VLASize (C); """"""""""""""""""""""""""""""""; Check for declarations of Variable Length Arrays of undefined or zero size. Check for declarations of VLA of undefined or zero size. .. code-block:: c. void test() {; int x;; int vla1[x]; // warn: garbage as size; }. void test() {; int x = 0;; int vla2[x]; // warn: zero size; }. .. _core-uninitialized-ArraySubscript:. core.uninitialized.ArraySubscript (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for uninitialized values used as array subscripts. .. code-block:: c. void test() {; int i, a[10];; int x = a[i]; // warn: array subscript is undefined; }. .. _core-uninitialized-Assign:. c",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:4906,test,test,4906,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"llvm.reset.fpmode``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare void @llvm.reset.fpmode(). Overview:; """""""""""""""""". The '``llvm.reset.fpmode``' intrinsic sets the default dynamic floating-point; control modes. Arguments:; """""""""""""""""""". None. Semantics:; """""""""""""""""""". The '``llvm.reset.fpmode``' intrinsic sets the current dynamic floating-point; environment to default state. It is similar to the C library function call; 'fesetmode(FE_DFL_MODE)', however this function does not return any value. Floating-Point Test Intrinsics; ------------------------------. These functions get properties of floating-point values. .. _llvm.is.fpclass:. '``llvm.is.fpclass``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare i1 @llvm.is.fpclass(<fptype> <op>, i32 <test>); declare <N x i1> @llvm.is.fpclass(<vector-fptype> <op>, i32 <test>). Overview:; """""""""""""""""". The '``llvm.is.fpclass``' intrinsic returns a boolean value or vector of boolean; values depending on whether the first argument satisfies the test specified by; the second argument. If the first argument is a floating-point scalar, then the result type is a; boolean (:ref:`i1 <t_integer>`). If the first argument is a floating-point vector, then the result type is a; vector of boolean with the same number of elements as the first argument. Arguments:; """""""""""""""""""". The first argument to the '``llvm.is.fpclass``' intrinsic must be; :ref:`floating-point <t_floating>` or :ref:`vector <t_vector>`; of floating-point values. The second argument specifies, which tests to perform. It must be a compile-time; integer constant, each bit in which specifies floating-point class:. +-------+----------------------+; | Bit # | floating-point class |; +=======+======================+; | 0 | Signaling NaN |; +-------+----------------------+; | 1 | Quiet NaN |; +-------+----------------------+; | 2 | Negative infinity |; +-------+----------------------+; | 3 | Negative normal |; +-------+----------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:921680,test,test,921680,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"lly command line tools) this can be a reasonable approach. Calling; ``exit`` upon encountering an error dramatically simplifies control flow as the; error no longer needs to be propagated up the stack. This allows code to be; written in straight-line style, as long as each fallible call is wrapped in a; check and call to exit. The ``ExitOnError`` class supports this pattern by; providing call operators that inspect ``Error`` values, stripping the error away; in the success case and logging to ``stderr`` then exiting in the failure case. To use this class, declare a global ``ExitOnError`` variable in your program:. .. code-block:: c++. ExitOnError ExitOnErr;. Calls to fallible functions can then be wrapped with a call to ``ExitOnErr``,; turning them into non-failing calls:. .. code-block:: c++. Error mayFail();; Expected<int> mayFail2();. void foo() {; ExitOnErr(mayFail());; int X = ExitOnErr(mayFail2());; }. On failure, the error's log message will be written to ``stderr``, optionally; preceded by a string ""banner"" that can be set by calling the setBanner method. A; mapping can also be supplied from ``Error`` values to exit codes using the; ``setExitCodeMapper`` method:. .. code-block:: c++. int main(int argc, char *argv[]) {; ExitOnErr.setBanner(std::string(argv[0]) + "" error:"");; ExitOnErr.setExitCodeMapper(; [](const Error &Err) {; if (Err.isA<BadFileFormat>()); return 2;; return 1;; });. Use ``ExitOnError`` in your tool code where possible as it can greatly improve; readability. .. _err_cantfail:. Using cantFail to simplify safe callsites; """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""". Some functions may only fail for a subset of their inputs, so calls using known; safe inputs can be assumed to succeed. The cantFail functions encapsulate this by wrapping an assertion that their; argument is a success value and, in the case of Expected<T>, unwrapping the; T value:. .. code-block:: c++. Error onlyFailsForSomeXValues(int X);; Expected<int> onlyFailsForSomeXValues2(int ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst:31447,log,log,31447,interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,1,['log'],['log']
Testability,"lnt.llvm.org](http://lnt.llvm.org). External Suites; ---------------. External suites such as SPEC can be enabled by either. - placing (or linking) them into the `test-suite/test-suite-externals/xxx` directory (example: `test-suite/test-suite-externals/speccpu2000`); - using a configuration option such as `-D TEST_SUITE_SPEC2000_ROOT=path/to/speccpu2000`. You can find further information in the respective README files such as; `test-suite/External/SPEC/README`. For the SPEC benchmarks you can switch between the `test`, `train` and; `ref` input datasets via the `TEST_SUITE_RUN_TYPE` configuration option.; The `train` dataset is used by default. Custom Suites; -------------. You can build custom suites using the test-suite infrastructure. A custom suite; has a `CMakeLists.txt` file at the top directory. The `CMakeLists.txt` will be; picked up automatically if placed into a subdirectory of the test-suite or when; setting the `TEST_SUITE_SUBDIRS` variable:. ```bash; % cmake -DTEST_SUITE_SUBDIRS=path/to/my/benchmark-suite ../test-suite; ```. Profile Guided Optimization; ---------------------------. Profile guided optimization requires to compile and run twice. First the; benchmark should be compiled with profile generation instrumentation enabled; and setup for training data. The lit runner will merge the profile files; using `llvm-profdata` so they can be used by the second compilation run. Example:; ```bash; # Profile generation run using LLVM IR PGO:; % cmake -DTEST_SUITE_PROFILE_GENERATE=ON \; -DTEST_SUITE_USE_IR_PGO=ON \; -DTEST_SUITE_RUN_TYPE=train \; ../test-suite; % make; % llvm-lit .; # Use the profile data for compilation and actual benchmark run:; % cmake -DTEST_SUITE_PROFILE_GENERATE=OFF \; -DTEST_SUITE_PROFILE_USE=ON \; -DTEST_SUITE_RUN_TYPE=ref \; .; % make; % llvm-lit -o result.json .; ```. To use Clang frontend's PGO instead of LLVM IR PGO, set `-DTEST_SUITE_USE_IR_PGO=OFF`. The `TEST_SUITE_RUN_TYPE` setting only affects the SPEC benchmark suites. Cross Co",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:9896,benchmark,benchmark-suite,9896,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['benchmark'],['benchmark-suite']
Testability,"loading the header text into ``cling``, you can now load the; dictionary:. .. code-block:: python. >>> import cppyy; >>> cppyy.load_reflection_info('MyClassDict'); >>> cppyy.gbl.MyClass(42); <cppyy.gbl.MyClass object at 0x7ffb9f230950>; >>> print(_.get_int()); 42; >>>. and use the selected C++ entities as if the header was loaded. The dictionary shared library can be relocated, as long as it can be found; by the dynamic loader (e.g. through ``LD_LIBRARY_PATH``) and the header file; is fully embedded or still accessible (e.g. through a path added to; ``cppyy.add_include_path`` at run-time, or with ``-I`` to; ``rootcling``/``genreflex`` during build time).; When relocating the shared library, move the .pcm with it.; Once support for C++ modules is fully fleshed out, access to the header file; will no longer be needed. .. _`rootcling manual`: https://root.cern.ch/root/html/guides/users-guide/AddingaClass.html#the-linkdef.h-file; .. _`helper script`: https://github.com/wlav/cppyy/blob/master/test/make_dict_win32.py. Class loader; ^^^^^^^^^^^^. Explicitly loading dictionaries is fine if this is hidden under the hood of; a Python package and thus transparently done on ``import``.; Otherwise, the automatic class loader is more convenient, as it allows direct; use without having to manually find and load dictionaries (assuming these are; locatable by the dynamic loader). The class loader utilizes so-called rootmap files, which by convention should; live alongside the dictionary shared library (and C++ module file).; These are simple text files, which map C++ entities (such as classes) to the; dictionaries and other libraries that need to be loaded for their use. With ``genreflex``, the mapping file can be automatically created with; ``--rootmap-lib=MyClassDict``, where ""MyClassDict"" is the name of the shared; library (without the extension) build from the dictionary file.; With ``rootcling``, create the same mapping file with; ``-rmf MyClassDict.rootmap -rml MyClassDict``.;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/utilities.rst:8128,test,test,8128,bindings/pyroot/cppyy/cppyy/doc/source/utilities.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/utilities.rst,1,['test'],['test']
Testability,"loat B) {; return A+B;; }. into:. _f32: ## @f32; 	movdqa	%xmm0, %xmm2; 	addss	%xmm1, %xmm2; 	pshufd	$1, %xmm1, %xmm1 ## xmm1 = xmm1[1,0,0,0]; 	pshufd	$1, %xmm0, %xmm3 ## xmm3 = xmm0[1,0,0,0]; 	addss	%xmm1, %xmm3; 	movaps	%xmm2, %xmm0; 	unpcklps	%xmm3, %xmm0 ## xmm0 = xmm0[0],xmm3[0],xmm0[1],xmm3[1]; 	ret. seems silly when it could just be one addps. //===---------------------------------------------------------------------===//. Expand libm rounding functions inline: Significant speedups possible.; http://gcc.gnu.org/ml/gcc-patches/2006-10/msg00909.html. //===---------------------------------------------------------------------===//. When compiled with unsafemath enabled, ""main"" should enable SSE DAZ mode and; other fast SSE modes. //===---------------------------------------------------------------------===//. Think about doing i64 math in SSE regs on x86-32. //===---------------------------------------------------------------------===//. This testcase should have no SSE instructions in it, and only one load from; a constant pool:. double %test3(bool %B) {; %C = select bool %B, double 123.412, double 523.01123123; ret double %C; }. Currently, the select is being lowered, which prevents the dag combiner from; turning 'select (load CPI1), (load CPI2)' -> 'load (select CPI1, CPI2)'. The pattern isel got this one right. //===---------------------------------------------------------------------===//. Lower memcpy / memset to a series of SSE 128 bit move instructions when it's; feasible. //===---------------------------------------------------------------------===//. Codegen:; if (copysign(1.0, x) == copysign(1.0, y)); into:; if (x^y & mask); when using SSE. //===---------------------------------------------------------------------===//. Use movhps to update upper 64-bits of a v4sf value. Also movlps on lower half; of a v4sf value. //===---------------------------------------------------------------------===//. Better codegen for vector_shuffles like this { x, 0, 0, 0 } o",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt:2500,test,testcase,2500,interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt,1,['test'],['testcase']
Testability,"loc(n * sizeof(int)); // warn; }. void test2(int n) {; if (n > 100) // gives an upper-bound; return;; void *p = malloc(n * sizeof(int)); // no warning; }. void test3(int n) {; assert(n <= 100 && ""Contract violated."");; void *p = malloc(n * sizeof(int)); // no warning; }. Limitations:. - The checker won't warn for variables involved in explicit casts,; since that might limit the variable's domain.; E.g.: ``(unsigned char)int x`` would limit the domain to ``[0,255]``.; The checker will miss the true-positive cases when the explicit cast would; not tighten the domain to prevent the overflow in the subsequent; multiplication operation. - It is an AST-based checker, thus it does not make use of the; path-sensitive taint-analysis. .. _alpha-security-MmapWriteExec:. alpha.security.MmapWriteExec (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on mmap() calls that are both writable and executable. .. code-block:: c. void test(int n) {; void *c = mmap(NULL, 32, PROT_READ | PROT_WRITE | PROT_EXEC,; MAP_PRIVATE | MAP_ANON, -1, 0);; // warn: Both PROT_WRITE and PROT_EXEC flags are set. This can lead to; // exploitable memory regions, which could be overwritten with malicious; // code; }. .. _alpha-security-ReturnPtrRange:. alpha.security.ReturnPtrRange (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for an out-of-bound pointer being returned to callers. .. code-block:: c. static int A[10];. int *test() {; int *p = A + 10;; return p; // warn; }. int test(void) {; int x;; return x; // warn: undefined or garbage returned; }. alpha.security.cert; ^^^^^^^^^^^^^^^^^^^. SEI CERT checkers which tries to find errors based on their `C coding rules <https://wiki.sei.cmu.edu/confluence/display/c/2+Rules>`_. .. _alpha-security-cert-pos-checkers:. alpha.security.cert.pos; ^^^^^^^^^^^^^^^^^^^^^^^. SEI CERT checkers of `POSIX C coding rules <https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152405>`_. .. _alpha-security-cert-pos-34c:. alpha.security.cert.pos.34c; """"""""""""""""""""""""""""""""""""""""""",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:63007,test,test,63007,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,loc.h; openmp/runtime/src/ompd-specific.cpp; openmp/runtime/src/ompd-specific.h; openmp/runtime/src/ompt-event-specific.h; openmp/runtime/src/ompt-general.cpp; openmp/runtime/src/ompt-internal.h; openmp/runtime/src/ompt-specific.cpp; openmp/runtime/src/ompt-specific.h; openmp/runtime/src/z_Linux_util.cpp; openmp/runtime/src/z_Windows_NT-586_util.cpp; openmp/runtime/src/z_Windows_NT_util.cpp; openmp/runtime/src/thirdparty/ittnotify/ittnotify.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_config.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp; openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_types.h; openmp/runtime/src/thirdparty/ittnotify/legacy/ittnotify.h; openmp/tools/archer/ompt-tsan.cpp; openmp/tools/archer/tests/ompt/ompt-signal.h; openmp/tools/multiplex/ompt-multiplex.h; openmp/tools/multiplex/tests/ompt-signal.h; openmp/tools/multiplex/tests/custom_data_storage/second-tool.h; openmp/tools/multiplex/tests/print/first-tool.h; openmp/tools/multiplex/tests/print/second-tool.h; polly/include/polly/Canonicalization.h; polly/include/polly/CodePreparation.h; polly/include/polly/DeadCodeElimination.h; polly/include/polly/DeLICM.h; polly/include/polly/DependenceInfo.h; polly/include/polly/FlattenAlgo.h; polly/include/polly/FlattenSchedule.h; polly/include/polly/ForwardOpTree.h; polly/include/polly/JSONExporter.h; polly/include/polly/LinkAllPasses.h; polly/include/polly/ManualOptimizer.h; polly/include/polly/MatmulOptimizer.h; polly/include/polly/Options.h; polly/include/polly/PolyhedralInfo.h; polly/include/polly/PruneUnprofitable.h; polly/include/polly/RegisterPasses.h; polly/include/polly/ScheduleOptimizer.h; polly/include/polly/ScheduleTreeTransform.h; polly/include/polly/ScopBuilder.h; polly/include/polly/ScopDetection.h; polly/include/polly/ScopDetectionDiagnostic.h; polly/include/polly/ScopInfo.h; polly/include/polly/ScopPass.h; polly/include/polly/Simplify.h; polly/include/polly/Zo,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:411516,test,tests,411516,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"lock; mtx_unlock; lock_guard; unique_lock. void test() {; std::mutex m;; m.lock();; sleep(3); // warn: a blocking function sleep is called inside a critical; // section; m.unlock();; }. alpha.unix.Chroot; (C); Check improper use of chroot. void f();. void test() {; chroot(""/usr/local"");; f(); // warn: no call of chdir(""/"") immediately after chroot; }. alpha.unix.PthreadLock; (C); Simple lock -> unlock checker; applies to:; pthread_mutex_lock; pthread_rwlock_rdlock; pthread_rwlock_wrlock; lck_mtx_lock; lck_rw_lock_exclusive; lck_rw_lock_shared; pthread_mutex_trylock; pthread_rwlock_tryrdlock; pthread_rwlock_tryrwlock; lck_mtx_try_lock; lck_rw_try_lock_exclusive; lck_rw_try_lock_shared; pthread_mutex_unlock; pthread_rwlock_unlock; lck_mtx_unlock; lck_rw_done. pthread_mutex_t mtx;. void test() {; pthread_mutex_lock(&mtx);; pthread_mutex_lock(&mtx);; // warn: this lock has already been acquired; }. lck_mtx_t lck1, lck2;. void test() {; lck_mtx_lock(&lck1);; lck_mtx_lock(&lck2);; lck_mtx_unlock(&lck1);; // warn: this was not the most recently acquired lock; }. lck_mtx_t lck1, lck2;. void test() {; if (lck_mtx_try_lock(&lck1) == 0); return;. lck_mtx_lock(&lck2);; lck_mtx_unlock(&lck1);; // warn: this was not the most recently acquired lock; }. alpha.unix.SimpleStream; (C); Check for misuses of stream APIs:; fopen; fclose(demo checker, the subject of the demo; (Slides; ,Video); by Anna Zaks and Jordan Rose presented at the ; 2012 LLVM Developers' Meeting). void test() {; FILE *F = fopen(""myfile.txt"", ""w"");; } // warn: opened file is never closed. void test() {; FILE *F = fopen(""myfile.txt"", ""w"");. if (F); fclose(F);. fclose(F); // warn: closing a previously closed file stream; }. alpha.unix.Stream; (C); Check stream handling functions:fopen; tmpfile; fclose; fread; fwrite; fseek; ftell; rewind; fgetpos; fsetpos; clearerr; feof; ferror; fileno. void test() {; FILE *p = fopen(""foo"", ""r"");; } // warn: opened file is never closed. void test() {; FILE *p = fopen(""foo"", ""r"");; fs",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html:13546,test,test,13546,interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,1,['test'],['test']
Testability,"lock_guard, unique_lock``. .. code-block:: c. void test() {; std::mutex m;; m.lock();; sleep(3); // warn: a blocking function sleep is called inside a critical; // section; m.unlock();; }. .. _alpha-unix-Chroot:. alpha.unix.Chroot (C); """"""""""""""""""""""""""""""""""""""""""; Check improper use of chroot. .. code-block:: c. void f();. void test() {; chroot(""/usr/local"");; f(); // warn: no call of chdir(""/"") immediately after chroot; }. .. _alpha-unix-PthreadLock:. alpha.unix.PthreadLock (C); """"""""""""""""""""""""""""""""""""""""""""""""""""; Simple lock -> unlock checker.; Applies to: ``pthread_mutex_lock, pthread_rwlock_rdlock, pthread_rwlock_wrlock, lck_mtx_lock, lck_rw_lock_exclusive``; ``lck_rw_lock_shared, pthread_mutex_trylock, pthread_rwlock_tryrdlock, pthread_rwlock_tryrwlock, lck_mtx_try_lock,; lck_rw_try_lock_exclusive, lck_rw_try_lock_shared, pthread_mutex_unlock, pthread_rwlock_unlock, lck_mtx_unlock, lck_rw_done``. .. code-block:: c. pthread_mutex_t mtx;. void test() {; pthread_mutex_lock(&mtx);; pthread_mutex_lock(&mtx);; // warn: this lock has already been acquired; }. lck_mtx_t lck1, lck2;. void test() {; lck_mtx_lock(&lck1);; lck_mtx_lock(&lck2);; lck_mtx_unlock(&lck1);; // warn: this was not the most recently acquired lock; }. lck_mtx_t lck1, lck2;. void test() {; if (lck_mtx_try_lock(&lck1) == 0); return;. lck_mtx_lock(&lck2);; lck_mtx_unlock(&lck1);; // warn: this was not the most recently acquired lock; }. .. _alpha-unix-SimpleStream:. alpha.unix.SimpleStream (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""; Check for misuses of stream APIs. Check for misuses of stream APIs: ``fopen, fclose``; (demo checker, the subject of the demo (`Slides <https://llvm.org/devmtg/2012-11/Zaks-Rose-Checker24Hours.pdf>`_ ,; `Video <https://youtu.be/kdxlsP5QVPw>`_) by Anna Zaks and Jordan Rose presented at the; `2012 LLVM Developers' Meeting <https://llvm.org/devmtg/2012-11/>`_). .. code-block:: c. void test() {; FILE *F = fopen(""myfile.txt"", ""w"");; } // warn: opened file is never closed. void test() {; FILE *F = fopen",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:75759,test,test,75759,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"logic is; defined by *test suites*. TEST SUITES; ~~~~~~~~~~~. As described in :ref:`test-discovery`, tests are always located inside a *test; suite*. Test suites serve to define the format of the tests they contain, the; logic for finding those tests, and any additional information to run the tests. :program:`lit` identifies test suites as directories containing ``lit.cfg`` or; ``lit.site.cfg`` files (see also :option:`--config-prefix`). Test suites are; initially discovered by recursively searching up the directory hierarchy for; all the input files passed on the command line. You can use; :option:`--show-suites` to display the discovered test suites at startup. Once a test suite is discovered, its config file is loaded. Config files; themselves are Python modules which will be executed. When the config file is; executed, two important global variables are predefined:. **lit_config**. The global **lit** configuration object (a *LitConfig* instance), which defines; the builtin test formats, global configuration parameters, and other helper; routines for implementing test configurations. **config**. This is the config object (a *TestingConfig* instance) for the test suite,; which the config file is expected to populate. The following variables are also; available on the *config* object, some of which must be set by the config and; others are optional or predefined:. **name** *[required]* The name of the test suite, for use in reports and; diagnostics. **test_format** *[required]* The test format object which will be used to; discover and run tests in the test suite. Generally this will be a builtin test; format available from the *lit.formats* module. **test_source_root** The filesystem path to the test suite root. For out-of-dir; builds this is the directory that will be scanned for tests. **test_exec_root** For out-of-dir builds, the path to the test suite root inside; the object directory. This is where tests will be run and temporary output files; placed. **enviro",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:15102,test,test,15102,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,2,['test'],['test']
Testability,"lowing examples use the following two source files as input. They; use a mixture of C-style and C++-style linkage to illustrate how these names are; printed differently (see :option:`--demangle`). .. code-block:: c. // test.h; extern ""C"" inline int foz() {; return 1234;; }. .. code-block:: c. // test.cpp; #include ""test.h""; int bar=42;. int foo() {; return bar;; }. int baz() {; volatile int k = 42;; return foz() + k;; }. int main() {; return foo() + baz();; }. These files are built as follows:. .. code-block:: console. $ clang -g test.cpp -o test.elf; $ clang -g -O2 test.cpp -o inlined.elf. Example 1 - addresses and object on command-line:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf 0x4004d0 0x400490; foz; /tmp/test.h:1:0. baz(); /tmp/test.cpp:11:0. Example 2 - addresses on standard input:. .. code-block:: console. $ cat addr.txt; 0x4004a0; 0x400490; 0x4004d0; $ llvm-symbolizer --obj=test.elf < addr.txt; main; /tmp/test.cpp:15:0. baz(); /tmp/test.cpp:11:0. foz; /tmp/./test.h:1:0. Example 3 - object specified with address:. .. code-block:: console. $ llvm-symbolizer ""test.elf 0x400490"" ""FILE:inlined.elf 0x400480""; baz(); /tmp/test.cpp:11:0. foo(); /tmp/test.cpp:8:10. $ cat addr2.txt; FILE:test.elf 0x4004a0; inlined.elf 0x400480. $ llvm-symbolizer < addr2.txt; main; /tmp/test.cpp:15:0. foo(); /tmp/test.cpp:8:10. Example 4 - BUILDID and FILE prefixes:. .. code-block:: console. $ llvm-symbolizer ""FILE:test.elf 0x400490"" ""DATA BUILDID:123456789abcdef 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr3.txt; FILE:test.elf 0x400490; DATA BUILDID:123456789abcdef 0x601028. $ llvm-symbolizer < addr3.txt; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. Example 5 - CODE and DATA prefixes:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf ""CODE 0x400490"" ""DATA 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr4.txt; CODE test.elf 0x4004a0; DATA inlined.elf 0x601028. $ llvm-symbolizer < addr4.txt; main; /tmp/test.cpp:15:0. bar; 629559",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:2979,test,test,2979,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"lp build times over Make, particularly for highly; parallel builds. LLD helps to reduce both link times and memory usage; during linking significantly. With a build machine with sufficient; parallelism, link times tend to dominate critical path of the build, and are; thus worth optimizing. Use CCache and NOT incremental builds; Using ccache materially improves average build times. Incremental builds; can be slightly faster, but introduce the risk of build corruption due to; e.g. state changes, etc... At this point, the recommendation is not to; use incremental builds and instead use ccache as the latter captures the; majority of the benefit with less risk of false positives. One of the non-obvious benefits of using ccache is that it makes the; builder less sensitive to which projects are being monitored vs built.; If a change triggers a build request, but doesn't change the build output; (e.g. doc changes, python utility changes, etc..), the build will entirely; hit in cache and the build request will complete in just the testing time. With multiple workers, it is tempting to try to configure a shared cache; between the workers. Experience to date indicates this is difficult to; well, and that having local per-worker caches gets most of the benefit; anyways. We don't currently recommend shared caches. CCache does depend on the builder hardware having sufficient IO to access; the cache with reasonable access times - i.e. a fast disk, or enough memory; for a RAM cache, etc.. For builders without, incremental may be your best; option, but is likely to require higher ongoing involvement from the; sponsor. Enable batch builds; As a last resort, you can configure your builder to batch build requests.; This makes the build failure notifications markedly less actionable, and; should only be done once all other reasonable measures have been taken. Leave it on the staging buildmaster; While most of this section has been biased towards builders intended for; the main buildmast",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToAddABuilder.rst:11793,test,testing,11793,interpreter/llvm-project/llvm/docs/HowToAddABuilder.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToAddABuilder.rst,1,['test'],['testing']
Testability,"lp`` can be modified prior to calling `cl::ParseCommandLineOptions`_.; Note this method should not be called during any static initialisation because; it cannot be guaranteed that all options will have been initialised. Hence it; should be called from ``main``. This function can be used to gain access to options declared in libraries that; the tool writer may not have direct access to. The function retrieves a :ref:`StringMap <dss_stringmap>` that maps the option; string (e.g. ``-help``) to an ``Option*``. Here is an example of how the function could be used:. .. code-block:: c++. using namespace llvm;; int main(int argc, char **argv) {; cl::OptionCategory AnotherCategory(""Some options"");. StringMap<cl::Option*> &Map = cl::getRegisteredOptions();. //Unhide useful option and put it in a different category; assert(Map.count(""print-all-options"") > 0);; Map[""print-all-options""]->setHiddenFlag(cl::NotHidden);; Map[""print-all-options""]->setCategory(AnotherCategory);. //Hide an option we don't want to see; assert(Map.count(""enable-no-infs-fp-math"") > 0);; Map[""enable-no-infs-fp-math""]->setHiddenFlag(cl::Hidden);. //Change --version to --show-version; assert(Map.count(""version"") > 0);; Map[""version""]->setArgStr(""show-version"");. //Change --help description; assert(Map.count(""help"") > 0);; Map[""help""]->setDescription(""Shows help"");. cl::ParseCommandLineOptions(argc, argv, ""This is a small program to demo the LLVM CommandLine API"");; ...; }. .. _cl::ParseCommandLineOptions:. The ``cl::ParseCommandLineOptions`` function; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The ``cl::ParseCommandLineOptions`` function is designed to be called directly; from ``main``, and is used to fill in the values of all of the command line; option variables once ``argc`` and ``argv`` are available. The ``cl::ParseCommandLineOptions`` function requires two parameters (``argc``; and ``argv``), but may also take an optional third parameter which holds; `additional extra text`_ to emit when the ``-help",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandLine.rst:52472,assert,assert,52472,interpreter/llvm-project/llvm/docs/CommandLine.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandLine.rst,1,['assert'],['assert']
Testability,"ls can be run on a set of Poisson data or Gaussian over flat with model considering optionally the nuisance parameters. The data can be generated with the rs500 tutorials. HybridCalculator. In the constructor the signature passing a name and a title string has been removed, for being consistent with all the other calculator classes. Name and title can be set optionally using the SetName and SetTitle methods. Please note that this change is not backward compatible.; Add the option to use binned generation (via SetGenerateBinned).; An estimated of the error in the obtained p values is now computed in the HybridResult class thanks to Matthias Wolf. The errors can be obtained with HybridResult::CLbError(), HybridResult::CLsplusbError() or HybridResult::CLsError().; A new tutorial has been added for showing the usage of the hybrid calculator: rs505_HybridCalculator_significance.C. new class HypoTestInverter. New class for performing an hypothesis test inversion by scanning; the hypothesis test results of the HybridCalculator for; various values of the parameter of interest. An upper (or lower) limit can be derived by looking at the; confidence level curve of the result as function of the parameter of; interest, where it intersects the desired confidence level. The class implements the IntervalCalculator interface and returns an HypoTestInverterResult class. The result is a SimpleInterval, which via the method UpperLimit returns to the user the upper limit value. The HypoTestInverter implements various option for performing the scan. HypoTestInverter::RunFixedScan will scan using a fixed grid the parameter of interest. HypoTestInverter::RunAutoScan will perform an automatic scan to find optimally the curve and it will stop when the desired precision is obtained.; The confidence level value at a given point can also be done via HypoTestInverter::RunOnePoint.; The class can scan the CLs+b values (default) or alternatively CLs (if the; method HypoTestInverter::UseCLs has been",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v526/index.html:14599,test,test,14599,roofit/doc/v526/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v526/index.html,2,['test'],['test']
Testability,"ls, to achieve low CPU and code; size overhead. Base labels are simply 8-bit unsigned integers that are; powers of 2 (i.e. 1, 2, 4, 8, ..., 128), and union labels are created; by ORing base labels. The following program demonstrates label propagation by checking that; the correct labels are propagated. .. code-block:: c++. #include <sanitizer/dfsan_interface.h>; #include <assert.h>. int main(void) {; int i = 100;; int j = 200;; int k = 300;; dfsan_label i_label = 1;; dfsan_label j_label = 2;; dfsan_label k_label = 4;; dfsan_set_label(i_label, &i, sizeof(i));; dfsan_set_label(j_label, &j, sizeof(j));; dfsan_set_label(k_label, &k, sizeof(k));. dfsan_label ij_label = dfsan_get_label(i + j);. assert(ij_label & i_label); // ij_label has i_label; assert(ij_label & j_label); // ij_label has j_label; assert(!(ij_label & k_label)); // ij_label doesn't have k_label; assert(ij_label == 3); // Verifies all of the above. // Or, equivalently:; assert(dfsan_has_label(ij_label, i_label));; assert(dfsan_has_label(ij_label, j_label));; assert(!dfsan_has_label(ij_label, k_label));. dfsan_label ijk_label = dfsan_get_label(i + j + k);. assert(ijk_label & i_label); // ijk_label has i_label; assert(ijk_label & j_label); // ijk_label has j_label; assert(ijk_label & k_label); // ijk_label has k_label; assert(ijk_label == 7); // Verifies all of the above. // Or, equivalently:; assert(dfsan_has_label(ijk_label, i_label));; assert(dfsan_has_label(ijk_label, j_label));; assert(dfsan_has_label(ijk_label, k_label));. return 0;; }. Origin Tracking; ===============. DataFlowSanitizer can track origins of labeled values. This feature is enabled by; ``-mllvm -dfsan-track-origins=1``. For example,. .. code-block:: console. % cat test.cc; #include <sanitizer/dfsan_interface.h>; #include <stdio.h>. int main(int argc, char** argv) {; int i = 0;; dfsan_set_label(i_label, &i, sizeof(i));; int j = i + 1;; dfsan_print_origin_trace(&j, ""A flow from i to j"");; return 0;; }. % clang++ -fsanitize=dataflow -mllvm",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/DataFlowSanitizer.rst:11647,assert,assert,11647,interpreter/llvm-project/clang/docs/DataFlowSanitizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/DataFlowSanitizer.rst,3,['assert'],['assert']
Testability,ls-extra/clangd/refactor; - `6`; - `5`; - `1`; - :part:`83%`; * - clang-tools-extra/clangd/refactor/tweaks; - `14`; - `10`; - `4`; - :part:`71%`; * - clang-tools-extra/clangd/support; - `25`; - `24`; - `1`; - :part:`96%`; * - clang-tools-extra/clangd/tool; - `2`; - `2`; - `0`; - :good:`100%`; * - clang-tools-extra/clangd/unittests; - `79`; - `66`; - `13`; - :part:`83%`; * - clang-tools-extra/clangd/unittests/decision_forest_model; - `1`; - `1`; - `0`; - :good:`100%`; * - clang-tools-extra/clangd/unittests/remote; - `1`; - `1`; - `0`; - :good:`100%`; * - clang-tools-extra/clangd/unittests/support; - `11`; - `11`; - `0`; - :good:`100%`; * - clang-tools-extra/clangd/unittests/tweaks; - `20`; - `19`; - `1`; - :part:`95%`; * - clang-tools-extra/clangd/unittests/xpc; - `1`; - `1`; - `0`; - :good:`100%`; * - clang-tools-extra/clangd/xpc; - `3`; - `3`; - `0`; - :good:`100%`; * - clang-tools-extra/clangd/xpc/framework; - `1`; - `1`; - `0`; - :good:`100%`; * - clang-tools-extra/clangd/xpc/test-client; - `1`; - `1`; - `0`; - :good:`100%`; * - clang-tools-extra/modularize; - `9`; - `1`; - `8`; - :part:`11%`; * - clang-tools-extra/pp-trace; - `3`; - `1`; - `2`; - :part:`33%`; * - clang-tools-extra/tool-template; - `1`; - `1`; - `0`; - :good:`100%`; * - clang-tools-extra/unittests/clang-apply-replacements; - `1`; - `1`; - `0`; - :good:`100%`; * - clang-tools-extra/unittests/clang-change-namespace; - `1`; - `0`; - `1`; - :none:`0%`; * - clang-tools-extra/unittests/clang-doc; - `9`; - `9`; - `0`; - :good:`100%`; * - clang-tools-extra/unittests/clang-include-fixer; - `2`; - `0`; - `2`; - :none:`0%`; * - clang-tools-extra/unittests/clang-include-fixer/find-all-symbols; - `1`; - `0`; - `1`; - :none:`0%`; * - clang-tools-extra/unittests/clang-move; - `1`; - `0`; - `1`; - :none:`0%`; * - clang-tools-extra/unittests/clang-query; - `2`; - `0`; - `2`; - :none:`0%`; * - clang-tools-extra/unittests/clang-tidy; - `16`; - `9`; - `7`; - :part:`56%`; * - clang-tools-extra/unittests/include/commo,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:20749,test,test-client,20749,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['test-client']
Testability,"ls. Documentation for all Clang AST nodes is available via the generated; `Doxygen <https://clang.llvm.org/doxygen>`_. The doxygen online; documentation is also indexed by your favorite search engine, which will; make a search for clang and the AST node's class name usually turn up; the doxygen of the class you're looking for (for example, search for:; clang ParenExpr). Examining the AST; =================. A good way to familiarize yourself with the Clang AST is to actually look; at it on some simple example code. Clang has a builtin AST-dump mode,; which can be enabled with the flag ``-ast-dump``. Let's look at a simple example AST:. ::. $ cat test.cc; int f(int x) {; int result = (x / 42);; return result;; }. # Clang by default is a frontend for many tools; -Xclang is used to pass; # options directly to the C++ frontend.; $ clang -Xclang -ast-dump -fsyntax-only test.cc; TranslationUnitDecl 0x5aea0d0 <<invalid sloc>>; ... cutting out internal declarations of clang ...; `-FunctionDecl 0x5aeab50 <test.cc:1:1, line:4:1> f 'int (int)'; |-ParmVarDecl 0x5aeaa90 <line:1:7, col:11> x 'int'; `-CompoundStmt 0x5aead88 <col:14, line:4:1>; |-DeclStmt 0x5aead10 <line:2:3, col:24>; | `-VarDecl 0x5aeac10 <col:3, col:23> result 'int'; | `-ParenExpr 0x5aeacf0 <col:16, col:23> 'int'; | `-BinaryOperator 0x5aeacc8 <col:17, col:21> 'int' '/'; | |-ImplicitCastExpr 0x5aeacb0 <col:17> 'int' <LValueToRValue>; | | `-DeclRefExpr 0x5aeac68 <col:17> 'int' lvalue ParmVar 0x5aeaa90 'x' 'int'; | `-IntegerLiteral 0x5aeac90 <col:21> 'int' 42; `-ReturnStmt 0x5aead68 <line:3:3, col:10>; `-ImplicitCastExpr 0x5aead50 <col:10> 'int' <LValueToRValue>; `-DeclRefExpr 0x5aead28 <col:10> 'int' lvalue Var 0x5aeac10 'result' 'int'. The toplevel declaration in; a translation unit is always the `translation unit; declaration <https://clang.llvm.org/doxygen/classclang_1_1TranslationUnitDecl.html>`_.; In this example, our first user written declaration is the `function; declaration <https://clang.llvm.org/doxygen/c",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/IntroductionToTheClangAST.rst:1891,test,test,1891,interpreter/llvm-project/clang/docs/IntroductionToTheClangAST.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/IntroductionToTheClangAST.rst,1,['test'],['test']
Testability,"ls. Setup Clang Tooling Using CMake and Make; ========================================. If you intend to use make to build LLVM, you should have CMake 2.8.6 or; later installed (can be found `here <https://cmake.org>`_). First, you need to generate Makefiles for LLVM with CMake. You need to; make a build directory and run CMake from it:. .. code-block:: console. $ mkdir your/build/directory; $ cd your/build/directory; $ cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON path/to/llvm/sources. If you want to use clang instead of GCC, you can add; ``-DCMAKE_C_COMPILER=/path/to/clang -DCMAKE_CXX_COMPILER=/path/to/clang++``.; You can also use ``ccmake``, which provides a curses interface to configure; CMake variables. As a result, the new ``compile_commands.json`` file should appear in the; current directory. You should link it to the LLVM source tree so that; Clang Tooling is able to use it:. .. code-block:: console. $ ln -s $PWD/compile_commands.json path/to/llvm/source/. Now you are ready to build and test LLVM using make:. .. code-block:: console. $ make check-all. Setup Clang Tooling Using CMake on Windows; ==========================================. For Windows developers, the Visual Studio project generators in CMake do; not support `CMAKE_EXPORT_COMPILE_COMMANDS; <https://cmake.org/cmake/help/latest/variable/CMAKE_EXPORT_COMPILE_COMMANDS.html>`_.; However, the Ninja generator does support this variable and can be used; on Windows to generate a suitable ``compile_commands.json`` that invokes; the MSVC compiler. First, you will need to install `Ninja`_. Once installed, the Ninja; executable will need to be in your search path for CMake to locate it. Next, assuming you already have Visual Studio installed on your machine, you; need to have the appropriate environment variables configured so that CMake; will locate the MSVC compiler for the Ninja generator. The `documentation; <https://docs.microsoft.com/en-us/cpp/build/building-on-the-command-line?view=msvc-170#path_and_envir",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/HowToSetupToolingForLLVM.rst:1921,test,test,1921,interpreter/llvm-project/clang/docs/HowToSetupToolingForLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/HowToSetupToolingForLLVM.rst,1,['test'],['test']
Testability,"lt and stored in memory. In such; case each state automatically gets an index that can be retrieved; after any state initialization. These indices can prove to be quite; useful for being able to keep track of the navigation history and; force certain states. Let's illustrate how this works with a simple; example:; - Suppose we have a simple geometry with a volume B positioned twice; inside a container A. Then A is positioned twice in a top container; T. The complete list of logical nodes is: `T_1`, `A_1`, `A_2`,; `B_1`, `B_2`. On the other hand we will have more states than; logical nodes:; - `/T_1`- 1 state at level = 0; - `/T_1/A_1,/T_1/A_2`- 2 states at level = 1; - `/T_1/A_1/B_1,/T_1/A_1/B_2,/T_1/A_2/B_1,/T_1/A_2/B_2` - 4 states at; level = 2; - All these states will get automatic numbers, starting with 0; corresponding to the top-level state and ending with an integer; corresponding to Ntotal\_states-1. The mapping from a given logical; node to a state number is generally not possible, as for the node; B\_1 that appears as current node for 2 different states. The; numbering order of states is therefore not important, but it can be; used as in the following lines:. ``` {.cpp}; gGeoManager->InitTrack(pt,dir); // anything to initialize a state; Int_t istate = gGeoManager->GetCurrentNodeId(); // in fact state Id; {; //... code changing the current state; }; gGeoManager->CdNode(istate); // forces state's re-initialization; ```. - Current `global transformation`. This represents the transformation; from `MARS` to the local reference of the current node, being the; product of all local mother-daughter transformations in the branch.; The global transformation can be referenced or copied:. ``` {.cpp}; const TGeoHMatrix *global = gGeoManager->GetCurrentMatrix();; TGeoHMatrix *copy = new TGeoHMatrix(*global);; ```. - One often needs to perform `master-to-local` and `local-to-master`; point and vector conversions to get from `MARS` to the local node; coordinates. This can b",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md:110799,log,logical,110799,documentation/users-guide/Geometry.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md,1,['log'],['logical']
Testability,"lt and stored in memory. In such; case each state automatically gets an index that can be retrieved; after any state initialization. These indices can prove to be quite; useful for being able to keep track of the navigation history and; force certain states. Let's illustrate how this works with a simple; example:; - Suppose we have a simple geometry with a volume B positioned twice; inside a container A. Then A is positioned twice in a top container; T. The complete list of logical nodes is: `T_1`, `A_1`, `A_2`,; `B_1`, `B_2`. On the other hand we will have more states than; logical nodes:; - `/T_1`- 1 state at level = 0; - `/T_1/A_1,/T_1/A_2`- 2 states at level = 1; - `/T_1/A_1/B_1,/T_1/A_1/B_2,/T_1/A_2/B_1,/T_1/A_2/B_2` - 4 states at; level = 2; - All these states will get automatic numbers, starting with 0; corresponding to the top-level state and ending with an integer; corresponding to Ntotal\_states-1. The mapping from a given logical; node to a state number is generally not possible, as for the node; B\_1 that appears as current node for 2 different states. The; numbering order of states is therefore not important, but it can be; used as in the following lines:. ~~~{.cpp}; gGeoManager->InitTrack(pt,dir); // anything to initialize a state; Int_t istate = gGeoManager->GetCurrentNodeId(); // in fact state Id; {; //... code changing the current state; }; gGeoManager->CdNode(istate); // forces state's re-initialization; ~~~. - Current `global transformation`. This represents the transformation; from `MARS` to the local reference of the current node, being the; product of all local mother-daughter transformations in the branch.; The global transformation can be referenced or copied:. ~~~{.cpp}; const TGeoHMatrix *global = gGeoManager->GetCurrentMatrix();; TGeoHMatrix *copy = new TGeoHMatrix(*global);; ~~~. - One often needs to perform `master-to-local` and `local-to-master`; point and vector conversions to get from `MARS` to the local node; coordinates. This can be ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md:71202,log,logical,71202,geom/geom/doc/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md,1,['log'],['logical']
Testability,"lt while ``struct`` makes all; members public by default. * All declarations and definitions of a given ``class`` or ``struct`` must use; the same keyword. For example:. .. code-block:: c++. // Avoid if `Example` is defined as a struct.; class Example;. // OK.; struct Example;. struct Example { ... };. * ``struct`` should be used when *all* members are declared public. .. code-block:: c++. // Avoid using `struct` here, use `class` instead.; struct Foo {; private:; int Data;; public:; Foo() : Data(0) { }; int getData() const { return Data; }; void setData(int D) { Data = D; }; };. // OK to use `struct`: all members are public.; struct Bar {; int Data;; Bar() : Data(0) { }; };. Do not use Braced Initializer Lists to Call a Constructor; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Starting from C++11 there is a ""generalized initialization syntax"" which allows; calling constructors using braced initializer lists. Do not use these to call; constructors with non-trivial logic or if you care that you're calling some; *particular* constructor. Those should look like function calls using; parentheses rather than like aggregate initialization. Similarly, if you need; to explicitly name the type and call its constructor to create a temporary,; don't use a braced initializer list. Instead, use a braced initializer list; (without any type for temporaries) when doing aggregate initialization or; something notionally equivalent. Examples:. .. code-block:: c++. class Foo {; public:; // Construct a Foo by reading data from the disk in the whizbang format, ...; Foo(std::string filename);. // Construct a Foo by looking up the Nth element of some global data ...; Foo(int N);. // ...; };. // The Foo constructor call is reading a file, don't use braces to call it.; std::fill(foo.begin(), foo.end(), Foo(""name""));. // The pair is being constructed like an aggregate, use braces.; bar_map.insert({my_key, my_value});. If you use a braced initializer list when initializing a varia",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst:25192,log,logic,25192,interpreter/llvm-project/llvm/docs/CodingStandards.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst,1,['log'],['logic']
Testability,lta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7616,test,testActivationFunctions,7616,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testActivationFunctions']
Testability,ltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testD,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7682,test,testLossFunctions,7682,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testLossFunctions']
Testability,"lts to false*. * ``IgnoreRecordsWithField`` (string). If supplied, the checker will not analyze; structures that have a field with a name or type name that matches the given; pattern. *Defaults to """"*. .. _optin-cplusplus-VirtualCall:. optin.cplusplus.VirtualCall (C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check virtual function calls during construction or destruction. .. code-block:: cpp. class A {; public:; A() {; f(); // warn; }; virtual void f();; };. class A {; public:; ~A() {; this->f(); // warn; }; virtual void f();; };. .. _optin-mpi-MPI-Checker:. optin.mpi.MPI-Checker (C); """"""""""""""""""""""""""""""""""""""""""""""""""; Checks MPI code. .. code-block:: c. void test() {; double buf = 0;; MPI_Request sendReq1;; MPI_Ireduce(MPI_IN_PLACE, &buf, 1, MPI_DOUBLE, MPI_SUM,; 0, MPI_COMM_WORLD, &sendReq1);; } // warn: request 'sendReq1' has no matching wait. void test() {; double buf = 0;; MPI_Request sendReq;; MPI_Isend(&buf, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD, &sendReq);; MPI_Irecv(&buf, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD, &sendReq); // warn; MPI_Isend(&buf, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD, &sendReq); // warn; MPI_Wait(&sendReq, MPI_STATUS_IGNORE);; }. void missingNonBlocking() {; int rank = 0;; MPI_Comm_rank(MPI_COMM_WORLD, &rank);; MPI_Request sendReq1[10][10][10];; MPI_Wait(&sendReq1[1][7][9], MPI_STATUS_IGNORE); // warn; }. .. _optin-osx-cocoa-localizability-EmptyLocalizationContextChecker:. optin.osx.cocoa.localizability.EmptyLocalizationContextChecker (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check that NSLocalizedString macros include a comment for context. .. code-block:: objc. - (void)test {; NSString *string = NSLocalizedString(@""LocalizedString"", nil); // warn; NSString *string2 = NSLocalizedString(@""LocalizedString"", @"" ""); // warn; NSString *string3 = NSLocalizedStringWithDefaultValue(; @""LocalizedString"", nil, [[NSBundle alloc] init], nil,@""""); // warn; }. .. _optin-osx-cocoa-localizability-NonLocalizedStringChecker:. optin.osx.coc",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:17623,test,test,17623,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"lude all sources identified by the tooling. **LLVM_INDIVIDUAL_TEST_COVERAGE**:BOOL; Enable individual test case coverage. When set to ON, code coverage data for; each test case will be generated and stored in a separate directory under the; config.test_exec_root path. This feature allows code coverage analysis of each; individual test case. Defaults to OFF. **LLVM_BUILD_LLVM_DYLIB**:BOOL; If enabled, the target for building the libLLVM shared library is added.; This library contains all of LLVM's components in a single shared library.; Defaults to OFF. This cannot be used in conjunction with BUILD_SHARED_LIBS.; Tools will only be linked to the libLLVM shared library if LLVM_LINK_LLVM_DYLIB; is also ON.; The components in the library can be customised by setting LLVM_DYLIB_COMPONENTS; to a list of the desired components.; This option is not available on Windows. **LLVM_BUILD_TESTS**:BOOL; Include LLVM unit tests in the 'all' build target. Defaults to OFF. Targets; for building each unit test are generated in any case. You can build a; specific unit test using the targets defined under *unittests*, such as; ADTTests, IRTests, SupportTests, etc. (Search for ``add_llvm_unittest`` in; the subdirectories of *unittests* for a complete list of unit tests.) It is; possible to build all unit tests with the target *UnitTests*. **LLVM_BUILD_TOOLS**:BOOL; Build LLVM tools. Defaults to ON. Targets for building each tool are generated; in any case. You can build a tool separately by invoking its target. For; example, you can build *llvm-as* with a Makefile-based system by executing *make; llvm-as* at the root of your build directory. **LLVM_CCACHE_BUILD**:BOOL; If enabled and the ``ccache`` program is available, then LLVM will be; built using ``ccache`` to speed up rebuilds of LLVM and its components.; Defaults to OFF. The size and location of the cache maintained; by ``ccache`` can be adjusted via the LLVM_CCACHE_MAXSIZE and LLVM_CCACHE_DIR; options, which are passed to the CCACH",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst:16783,test,test,16783,interpreter/llvm-project/llvm/docs/CMake.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst,1,['test'],['test']
Testability,lude/clc/math/half_cos.h; libclc/generic/include/clc/math/half_divide.h; libclc/generic/include/clc/math/half_exp.h; libclc/generic/include/clc/math/half_exp10.h; libclc/generic/include/clc/math/half_exp2.h; libclc/generic/include/clc/math/half_log.h; libclc/generic/include/clc/math/half_log10.h; libclc/generic/include/clc/math/half_log2.h; libclc/generic/include/clc/math/half_powr.h; libclc/generic/include/clc/math/half_recip.h; libclc/generic/include/clc/math/half_rsqrt.h; libclc/generic/include/clc/math/half_sin.h; libclc/generic/include/clc/math/half_sqrt.h; libclc/generic/include/clc/math/half_tan.h; libclc/generic/include/clc/math/hypot.h; libclc/generic/include/clc/math/ilogb.h; libclc/generic/include/clc/math/ldexp.h; libclc/generic/include/clc/math/lgamma.h; libclc/generic/include/clc/math/lgamma_r.h; libclc/generic/include/clc/math/log.h; libclc/generic/include/clc/math/log10.h; libclc/generic/include/clc/math/log1p.h; libclc/generic/include/clc/math/log2.h; libclc/generic/include/clc/math/logb.h; libclc/generic/include/clc/math/mad.h; libclc/generic/include/clc/math/maxmag.h; libclc/generic/include/clc/math/minmag.h; libclc/generic/include/clc/math/modf.h; libclc/generic/include/clc/math/native_cos.h; libclc/generic/include/clc/math/native_divide.h; libclc/generic/include/clc/math/native_exp.h; libclc/generic/include/clc/math/native_exp10.h; libclc/generic/include/clc/math/native_exp2.h; libclc/generic/include/clc/math/native_log.h; libclc/generic/include/clc/math/native_log10.h; libclc/generic/include/clc/math/native_log2.h; libclc/generic/include/clc/math/native_powr.h; libclc/generic/include/clc/math/native_recip.h; libclc/generic/include/clc/math/native_rsqrt.h; libclc/generic/include/clc/math/native_sin.h; libclc/generic/include/clc/math/native_sqrt.h; libclc/generic/include/clc/math/native_tan.h; libclc/generic/include/clc/math/nextafter.h; libclc/generic/include/clc/math/pow.h; libclc/generic/include/clc/math/pown.h; libclc/generic/include/clc/math,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:155790,log,logb,155790,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['log'],['logb']
Testability,"lude/module.modulemap.extra.tmp""; ""${CMAKE_BINARY_DIR}/include/module.modulemap.extra""; COPYONLY). # From now on we handled all exposed module and want to make all new modulemaps private to ROOT.; set(ROOT_CXXMODULES_WRITE_TO_CURRENT_DIR ON). set (CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS}""). string(REGEX REPLACE ""[ ]-"" "";-"" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); if(MSVC); string(REPLACE ""-Zc:__cplusplus"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); string(REPLACE ""-nologo"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); string(REPLACE ""-EHsc-"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); string(REPLACE ""-GR"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); string(REPLACE ""-MDd"" """" CMAKE_CXX_FLAGS_SEPARATE ""${CMAKE_CXX_FLAGS_SEPARATE}""); endif(). if(runtime_cxxmodules); # Dummy target that does nothing, we don't need a PCH for modules.; # Onepcm target has all dependencies needed for allDict.cxx.pch, which allow; # to test hsimple.C after all C++ modules are updated.; add_custom_target(onepcm); foreach(target_dependency ${ROOT_LIBRARY_TARGETS}); add_dependencies(onepcm ${target_dependency}); endforeach(); unset(ROOT_LIBRARY_TARGETS CACHE); else(); get_property(incdirs DIRECTORY PROPERTY INCLUDE_DIRECTORIES). if(WIN32); list(APPEND incdirs; ${CMAKE_SOURCE_DIR}/graf2d/win32gdk/gdk/src; ${CMAKE_SOURCE_DIR}/graf2d/win32gdk/gdk/src/gdk; ${CMAKE_SOURCE_DIR}/graf2d/win32gdk/gdk/src/glib; ); endif(). foreach(d ${incdirs}); if(NOT ""${d}"" MATCHES ""AFTER|BEFORE|INTERFACE|PRIVATE|PUBLIC|SYSTEM""); set(__allIncludes ${__allIncludes} -I${d}); endif(); endforeach(). get_property(__cling_pch GLOBAL PROPERTY CLINGETCPCH); get_property(__pch_dependencies GLOBAL PROPERTY ROOT_PCH_DEPENDENCIES); get_property(__pch_dictionaries GLOBAL PROPERTY ROOT_PCH_DICTIONARIES). add_custom_command(OUTPUT etc/allDict.cxx.pch; BYPRODUCTS; etc/dictpch/allCppflags.txt; etc/dictpch/allHeaders.h; etc/dictpch/allLinkDefs.h; COMMAND; $",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:19468,test,test,19468,CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt,1,['test'],['test']
Testability,"ly (check for correctness); clang file.c -S -emit-llvm -o - (print out unoptimized llvm code); clang file.c -S -emit-llvm -o - -O3; clang file.c -S -O3 -o - (output native machine code). Run the testsuite:; ; make check-clang. Using Visual Studio; The following details setting up for and building Clang on Windows using; Visual Studio:. Get the required tools:; ; Git. Source code control program. Get it from:; ; https://git-scm.com/download; CMake. This is used for generating Visual Studio solution and; project files. Get it from:; ; https://cmake.org/download/; Visual Studio 2019 16.7 or later; Python. It is used to run the clang test suite. Get it from:; ; https://www.python.org/download/; GnuWin32 tools; The Clang and LLVM test suite use various GNU core utilities, such as; grep, sed, and find. The gnuwin32 packages; are the oldest and most well-tested way to get these tools. However, the; MSys utilities provided by git for Windows have been known to work.; Cygwin has worked in the past, but is not well tested.; If you don't already have the core utilies from some other source, get; gnuwin32 from ; http://getgnuwin32.sourceforge.net/. Check out LLVM and Clang:; ; git clone https://github.com/llvm/llvm-project.git. Note: Some Clang tests are sensitive to the line endings. Ensure; that checking out the files does not convert LF line endings to CR+LF. If; you're using git on Windows, make sure your core.autocrlf setting; is false. Run CMake to generate the Visual Studio solution and project files:; ; cd llvm-project; mkdir build (for building without polluting the source dir); cd build. If you are using Visual Studio 2019:; cmake -DLLVM_ENABLE_PROJECTS=clang -G ""Visual Studio 16 2019"" -A x64 -Thost=x64 ..\llvm; -Thost=x64 is required, since the 32-bit linker will run out of memory.; ; To generate x86 binaries instead of x64, pass -A Win32.; See the LLVM CMake guide for; more information on other configuration options for CMake.; The above, if successful, will have cr",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/get_started.html:4098,test,tested,4098,interpreter/llvm-project/clang/www/get_started.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/get_started.html,1,['test'],['tested']
Testability,"ly acceptable course of action.; * Negatively affect development of core tier code, with the sub-community; involved responsible for making changes to address specific concerns.; * Negatively affect other peripheral tier code, with the sub-communities; involved tasked to resolve the issues, still making sure the solution doesn't; break or invalidate the core tier.; * Impose sub-optimal implementation strategies on core tier components as a; result of idiosyncrasies in the peripheral component.; * Have build infrastructure that spams all developers about their breakages.; * Fall into disrepair. This is a reflection of lack of an active sub-community; and will result in removal. Code in this tier should:; * Have infrastructure to test, whenever meaningful, with either no warnings or; notification contained within the sub-community.; * Have support and testing that scales with the complexity and resilience of; the component, with the bar for simple and gracefully-degrading components; (such as editor bindings) much lower than for complex components that must; remain fresh with HEAD (such as experimental back-ends or alternative build; systems).; * Have a document making clear the status of implementation, level of support; available, who the sub-community is and, if applicable, roadmap for inclusion; into the core tier.; * Be restricted to a specific directory or have a consistent pattern (ex.; unique file suffix), making it easy to remove when necessary. Inclusion Policy; ================. To add a new peripheral component, send an RFC to the appropriate dev list; proposing its addition and explaining how it will meet the support requirements; listed above. Different types of components could require different levels of; detail. when in doubt, ask the community what's the best approach. Inclusion must reach consensus in the RFC by the community and the approval of; the corresponding review (by multiple members of the community) is the official; note of acceptance. Aft",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SupportPolicy.rst:6053,test,testing,6053,interpreter/llvm-project/llvm/docs/SupportPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SupportPolicy.rst,1,['test'],['testing']
Testability,"ly acquired lock; }. .. _alpha-unix-SimpleStream:. alpha.unix.SimpleStream (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""; Check for misuses of stream APIs. Check for misuses of stream APIs: ``fopen, fclose``; (demo checker, the subject of the demo (`Slides <https://llvm.org/devmtg/2012-11/Zaks-Rose-Checker24Hours.pdf>`_ ,; `Video <https://youtu.be/kdxlsP5QVPw>`_) by Anna Zaks and Jordan Rose presented at the; `2012 LLVM Developers' Meeting <https://llvm.org/devmtg/2012-11/>`_). .. code-block:: c. void test() {; FILE *F = fopen(""myfile.txt"", ""w"");; } // warn: opened file is never closed. void test() {; FILE *F = fopen(""myfile.txt"", ""w"");. if (F); fclose(F);. fclose(F); // warn: closing a previously closed file stream; }. .. _alpha-unix-Stream:. alpha.unix.Stream (C); """"""""""""""""""""""""""""""""""""""""""; Check stream handling functions: ``fopen, tmpfile, fclose, fread, fwrite, fseek, ftell, rewind, fgetpos,``; ``fsetpos, clearerr, feof, ferror, fileno``. .. code-block:: c. void test() {; FILE *p = fopen(""foo"", ""r"");; } // warn: opened file is never closed. void test() {; FILE *p = fopen(""foo"", ""r"");; fseek(p, 1, SEEK_SET); // warn: stream pointer might be NULL; fclose(p);; }. void test() {; FILE *p = fopen(""foo"", ""r"");. if (p); fseek(p, 1, 3);; // warn: third arg should be SEEK_SET, SEEK_END, or SEEK_CUR. fclose(p);; }. void test() {; FILE *p = fopen(""foo"", ""r"");; fclose(p);; fclose(p); // warn: already closed; }. void test() {; FILE *p = tmpfile();; ftell(p); // warn: stream pointer might be NULL; fclose(p);; }. .. _alpha-unix-cstring-BufferOverlap:. alpha.unix.cstring.BufferOverlap (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Checks for overlap in two buffer arguments. Applies to: ``memcpy, mempcpy, wmemcpy, wmempcpy``. .. code-block:: c. void test() {; int a[4] = {0};; memcpy(a + 2, a + 1, 8); // warn; }. .. _alpha-unix-cstring-NotNullTerminated:. alpha.unix.cstring.NotNullTerminated (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for arguments which are not null-terminated strings; applie",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:77165,test,test,77165,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"ly created blank pad, one may use `TPad::Range` to set the user; coordinate system. This function is defined as:. ``` {.cpp}; void Range(float x1,float y1,float x2,float y2); ```. The arguments `x1`, `x2` defines the new range in the x direction, and; the `y1`, `y2` define the new range in the y-direction. ``` {.cpp}; root[] TCanvas MyCanvas (""MyCanvas""); root[] gPad->Range(-100,-100,100,100); ```. This will set the active pad to have both coordinates to go from -100 to; 100, with the center of the pad at (0,0). You can visually check the; coordinates by viewing the status bar in the canvas. To display the; status bar select Event Status entry in the View canvas menu. ![The status bar](pictures/020000A4.jpg). #### The Normalized Coordinate System (NDC). Normalized coordinates are independent of the window size and of the; user system. The coordinates range from 0 to 1 and (0, 0) corresponds to; the bottom-left corner of the pad. Several internal ROOT functions use; the NDC system (3D primitives, PostScript, log scale mapping to linear; scale). You may want to use this system if the user coordinates are not; known ahead of time. #### The Pixel Coordinate System. The least common is the pixel coordinate system, used by functions such; as `DistancetoPrimitive()` and `ExecuteEvent()`. Its primary use is for; cursor position, which is always given in pixel coordinates. If; (`px,py`) is the cursor position, `px=0` and `py=0` corresponds to the; top-left corner of the pad, which is the standard convention in; windowing systems. #### Using NDC for a particular Object. Most of the time, you will be using the user coordinate system. But; sometimes, you will want to use NDC. For example, if you want to draw; text always at the same place over a histogram, no matter what the; histogram coordinates are. There are two ways to do this. You can set; the NDC for one object or may convert NDC to user coordinates. Most; graphical objects offer an option to be drawn in NDC. For instance",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md:20472,log,log,20472,documentation/users-guide/Graphics.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md,1,['log'],['log']
Testability,"ly produces one of the following eight results:. **PASS**. The test succeeded. **FLAKYPASS**. The test succeeded after being re-run more than once. This only applies to; tests containing an ``ALLOW_RETRIES:`` annotation. **XFAIL**. The test failed, but that is expected. This is used for test formats which allow; specifying that a test does not currently work, but wish to leave it in the test; suite. **XPASS**. The test succeeded, but it was expected to fail. This is used for tests which; were specified as expected to fail, but are now succeeding (generally because; the feature they test was broken and has been fixed). **FAIL**. The test failed. **UNRESOLVED**. The test result could not be determined. For example, this occurs when the test; could not be run, the test itself is invalid, or the test was interrupted. **UNSUPPORTED**. The test is not supported in this environment. This is used by test formats; which can report unsupported tests. **TIMEOUT**. The test was run, but it timed out before it was able to complete. This is; considered a failure. Depending on the test format tests may produce additional information about; their status (generally only for failures). See the :ref:`output-options`; section for more information. .. _lit-infrastructure:. LIT INFRASTRUCTURE; ------------------. This section describes the :program:`lit` testing architecture for users interested in; creating a new :program:`lit` testing implementation, or extending an existing one. :program:`lit` proper is primarily an infrastructure for discovering and running; arbitrary tests, and to expose a single convenient interface to these; tests. :program:`lit` itself doesn't know how to run tests, rather this logic is; defined by *test suites*. TEST SUITES; ~~~~~~~~~~~. As described in :ref:`test-discovery`, tests are always located inside a *test; suite*. Test suites serve to define the format of the tests they contain, the; logic for finding those tests, and any additional information to run t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:13372,test,test,13372,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"ly. Before; running tests from the command line, you will need to ensure that; lit.site.cfg files have been created for your build. You can do; this by running the tests as described in the previous sections. Once the; tests have started running, you can stop them with control+C, as the; files are generated before running any tests.; Once that is done, to run all the tests from the command line,; execute a command like the following:. python (path to llvm)\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg; (path to llvm)\llvm\tools\clang\test. For CMake builds e.g. on Windows with Visual Studio, you will need; to specify your build configuration (Debug, Release, etc.) via; --param=build_config=(build config). You may also need to specify; the build mode (Win32, etc) via --param=build_mode=(build mode).; Additionally, you will need to specify the lit site configuration which; lives in (build dir)\tools\clang\test, via; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg.; ; To run a single test:. python (path to llvm)\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg; (path to llvm)\llvm\tools\clang\test\(dir)\(test). For example:. python C:\Tools\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site_config=C:\Tools\build\tools\clang\test\lit.site.cfg; C:\Tools\llvm\tools\clang\test\Sema\wchar.c. The -sv option above tells the runner to show the test output if; any tests failed, to help you determine the cause of failure.; You can also pass in the --no-progress-bar option if you wish to disable; progress indications while the tests are running.; Your output might look something like this:; lit.py: lit.cfg:152: note: using clang: 'C:\Tools\llvm\bin\Release\clang.EXE'; -- Testing: Testing: 2534 tests, 4 threads --; T",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html:6694,test,test,6694,interpreter/llvm-project/clang/www/hacking.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html,2,['test'],['test']
Testability,"lying motivation of the approach is that it is common for; the same (and often large) header files to be included by multiple; source files. Consequently, compile times can often be greatly improved; by caching some of the (redundant) work done by a compiler to process; headers. Precompiled header files, which represent one of many ways to; implement this optimization, are literally files that represent an; on-disk cache that contains the vital information necessary to reduce; some of the work needed to process a corresponding header file. While; details of precompiled headers vary between compilers, precompiled; headers have been shown to be highly effective at speeding up program; compilation on systems with very large system headers (e.g., macOS). Generating a PCH File; ^^^^^^^^^^^^^^^^^^^^^. To generate a PCH file using Clang, one invokes Clang with the; `-x <language>-header` option. This mirrors the interface in GCC; for generating PCH files:. .. code-block:: console. $ gcc -x c-header test.h -o test.h.gch; $ clang -x c-header test.h -o test.h.pch. Using a PCH File; ^^^^^^^^^^^^^^^^. A PCH file can then be used as a prefix header when a ``-include-pch``; option is passed to ``clang``:. .. code-block:: console. $ clang -include-pch test.h.pch test.c -o test. The ``clang`` driver will check if the PCH file ``test.h.pch`` is; available; if so, the contents of ``test.h`` (and the files it includes); will be processed from the PCH file. Otherwise, Clang will report an error. .. note::. Clang does *not* automatically use PCH files for headers that are directly; included within a source file or indirectly via :option:`-include`.; For example:. .. code-block:: console. $ clang -x c-header test.h -o test.h.pch; $ cat test.c; #include ""test.h""; $ clang test.c -o test. In this example, ``clang`` will not automatically use the PCH file for; ``test.h`` since ``test.h`` was included directly in the source file and not; specified on the command line using ``-include-pch``. R",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:46835,test,test,46835,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"m ""same"" option used (#159); 2. Fix - when draw histogram as markers improve optimization algorithm; 3. Fix - correct histogram Y-axis range selection in logarithmic scale; 4. Fix - for TH2 draw options allow combination ""colztext"" (#162); 5. Fix - PNG file generation with 3D drawings inside. ## Changes in 5.4.2; 1. Fix - take into account extra quotes in multipart http reply (#157); 2. Fix - display of labels on X axis with TProfile; 3. Fix - support time display in TMultiGraph; 4. Fix - correctly parse ""optstat"" and ""optfit"" in URL; 5. Fix - correctly update TGraph drawing when X range is changing; 6. Fix - return only TF1/TF2 object when searching function (#158). ## Changes in 5.4.1; 1. Fix - monitoring mode in draw.htm page; 2. Fix - zooming in colz palette; 3. Fix - support both 9.x and 10.x jsdom version in Node.js (#149); 4. Fix - draw axis main line with appropriate attributes (#150); 5. Fix - use axis color when drawing grids lines (#150); 6. Fix - when set pad logx/logy, reset existing user ranges in pad; 7. Fix - avoid too deep calling stack when drawing many graphs or histos (#154); 8. Fix - correctly (re)draw tooltips on canvas with many subpads. ## Changes in 5.4.0; 1. New supported classes:; - TDiamond; - TArc; - TCurlyLine; - TCurlyArc; - TCrown; 2. New draw options:; - ""RX"" and ""RY"" for TGraph to reverse axis; - ""noopt"" for TGraph to disable drawing optimization; - ""CPN"" for TCanvas to create color palette from N last colors; - ""line"" for TGraph2D; 3. New features:; - support LZ4 compression; - tooltips and zooming in TGraphPolar drawings; - TPavesText with multiple underlying paves; - implement all fill styles; - draw borders for TWbox; - draw all objects from TList/TObjArray as they appear in list of primitives; - let enable/disable highlight of extra objects in geometry viewer; - draw axis labels on both sides when pad.fTick[x/y] > 1; - make drawing of TCanvas with many primitives smoother; - add fOptTitle, fOptLogx/y/z fields in JSROOT.gStyle; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/changes.md:35426,log,logx,35426,js/changes.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/changes.md,2,['log'],"['logx', 'logy']"
Testability,"m %esi, 1, %noreg, 32; 	%edi = MOV32rr %eax; 	SHL32ri %edi<def&use>, 4; 	ADD32rr %edi<def&use>, %esi; 	%xmm0 = MOVAPSrm %ecx, 1, %noreg, 0; 	%xmm1 = MOVAPSrr %xmm0; 	SHUFPSrr %xmm1<def&use>, %xmm1, 170; 	%xmm2 = MOVAPSrr %xmm0; 	SHUFPSrr %xmm2<def&use>, %xmm2, 0; 	%xmm3 = MOVAPSrr %xmm0; 	SHUFPSrr %xmm3<def&use>, %xmm3, 255; 	SHUFPSrr %xmm0<def&use>, %xmm0, 85; 	%ebx = MOV32rr %edi; 	AND32ri8 %ebx<def&use>, 15; 	CMP32ri8 %ebx, 0; 	JE mbb<cond_next204,0xa914d30>. This looks really bad. The problem is shufps is a destructive opcode. Since it; appears as operand two in more than one shufps ops. It resulted in a number of; copies. Note icc also suffers from the same problem. Either the instruction; selector should select pshufd or The register allocator can made the two-address; to three-address transformation. It also exposes some other problems. See MOV32ri -3 and the spills. //===---------------------------------------------------------------------===//. Consider:. __m128 test(float a) {; return _mm_set_ps(0.0, 0.0, 0.0, a*a);; }. This compiles into:. movss 4(%esp), %xmm1; mulss %xmm1, %xmm1; xorps %xmm0, %xmm0; movss %xmm1, %xmm0; ret. Because mulss doesn't modify the top 3 elements, the top elements of ; xmm1 are already zero'd. We could compile this to:. movss 4(%esp), %xmm0; mulss %xmm0, %xmm0; ret. //===---------------------------------------------------------------------===//. Here's a sick and twisted idea. Consider code like this:. __m128 test(__m128 a) {; float b = *(float*)&A;; ...; return _mm_set_ps(0.0, 0.0, 0.0, b);; }. This might compile to this code:. movaps c(%esp), %xmm1; xorps %xmm0, %xmm0; movss %xmm1, %xmm0; ret. Now consider if the ... code caused xmm1 to get spilled. This might produce; this code:. movaps c(%esp), %xmm1; movaps %xmm1, c2(%esp); ... xorps %xmm0, %xmm0; movaps c2(%esp), %xmm1; movss %xmm1, %xmm0; ret. However, since the reload is only used by these instructions, we could ; ""fold"" it into the uses, producing something like this:. mo",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt:6710,test,test,6710,interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt,1,['test'],['test']
Testability,"m pointer might be NULL; fclose(p);; }. void test() {; FILE *p = fopen(""foo"", ""r"");. if (p); fseek(p, 1, 3);; // warn: third arg should be SEEK_SET, SEEK_END, or SEEK_CUR. fclose(p);; }. void test() {; FILE *p = fopen(""foo"", ""r"");; fclose(p);; fclose(p); // warn: already closed; }. void test() {; FILE *p = tmpfile();; ftell(p); // warn: stream pointer might be NULL; fclose(p);; }. .. _alpha-unix-cstring-BufferOverlap:. alpha.unix.cstring.BufferOverlap (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Checks for overlap in two buffer arguments. Applies to: ``memcpy, mempcpy, wmemcpy, wmempcpy``. .. code-block:: c. void test() {; int a[4] = {0};; memcpy(a + 2, a + 1, 8); // warn; }. .. _alpha-unix-cstring-NotNullTerminated:. alpha.unix.cstring.NotNullTerminated (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for arguments which are not null-terminated strings; applies to: ``strlen, strnlen, strcpy, strncpy, strcat, strncat, wcslen, wcsnlen``. .. code-block:: c. void test() {; int y = strlen((char *)&test); // warn; }. .. _alpha-unix-cstring-OutOfBounds:. alpha.unix.cstring.OutOfBounds (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for out-of-bounds access in string functions, such as:; ``memcpy, bcopy, strcpy, strncpy, strcat, strncat, memmove, memcmp, memset`` and more. This check also works with string literals, except there is a known bug in that; the analyzer cannot detect embedded NULL characters when determining the string length. .. code-block:: c. void test1() {; const char str[] = ""Hello world"";; char buffer[] = ""Hello world"";; memcpy(buffer, str, sizeof(str) + 1); // warn; }. void test2() {; const char str[] = ""Hello world"";; char buffer[] = ""Helloworld"";; memcpy(buffer, str, sizeof(str)); // warn; }. .. _alpha-unix-cstring-UninitializedRead:. alpha.unix.cstring.UninitializedRead (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for uninitialized reads from common memory copy/manipulation functions such as:; ``memcpy, mempcpy, memmove, memcmp, strcmp, strnc",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:78304,test,test,78304,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,2,['test'],['test']
Testability,"m suites using the test-suite infrastructure. A custom suite; has a `CMakeLists.txt` file at the top directory. The `CMakeLists.txt` will be; picked up automatically if placed into a subdirectory of the test-suite or when; setting the `TEST_SUITE_SUBDIRS` variable:. ```bash; % cmake -DTEST_SUITE_SUBDIRS=path/to/my/benchmark-suite ../test-suite; ```. Profile Guided Optimization; ---------------------------. Profile guided optimization requires to compile and run twice. First the; benchmark should be compiled with profile generation instrumentation enabled; and setup for training data. The lit runner will merge the profile files; using `llvm-profdata` so they can be used by the second compilation run. Example:; ```bash; # Profile generation run using LLVM IR PGO:; % cmake -DTEST_SUITE_PROFILE_GENERATE=ON \; -DTEST_SUITE_USE_IR_PGO=ON \; -DTEST_SUITE_RUN_TYPE=train \; ../test-suite; % make; % llvm-lit .; # Use the profile data for compilation and actual benchmark run:; % cmake -DTEST_SUITE_PROFILE_GENERATE=OFF \; -DTEST_SUITE_PROFILE_USE=ON \; -DTEST_SUITE_RUN_TYPE=ref \; .; % make; % llvm-lit -o result.json .; ```. To use Clang frontend's PGO instead of LLVM IR PGO, set `-DTEST_SUITE_USE_IR_PGO=OFF`. The `TEST_SUITE_RUN_TYPE` setting only affects the SPEC benchmark suites. Cross Compilation and External Devices; --------------------------------------. ### Compilation. CMake allows to cross compile to a different target via toolchain files. More; information can be found here:. - [https://llvm.org/docs/lnt/tests.html#cross-compiling](https://llvm.org/docs/lnt/tests.html#cross-compiling). - [https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html](https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html). Cross compilation from macOS to iOS is possible with the; `test-suite/cmake/caches/target-target-*-iphoneos-internal.cmake` CMake cache; files; this requires an internal iOS SDK. ### Running. There are two ways to run the tests in a cross compilati",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:10545,benchmark,benchmark,10545,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['benchmark'],['benchmark']
Testability,"m the; reference output, it assumes the difference resulted from a code generator; failure, and starts the `code generator debugger`_. Finally, if the output of the selected code generator matches the reference; output, ``bugpoint`` runs the test program after all of the LLVM passes have; been applied to it. If its output differs from the reference output, it assumes; the difference resulted from a failure in one of the LLVM passes, and enters the; `miscompilation debugger`_. Otherwise, there is no problem ``bugpoint`` can; debug. .. _crash debugger:. Crash debugger; --------------. If an optimizer or code generator crashes, ``bugpoint`` will try as hard as it; can to reduce the list of passes (for optimizer crashes) and the size of the; test program. First, ``bugpoint`` figures out which combination of optimizer; passes triggers the bug. This is useful when debugging a problem exposed by; ``opt``, for example, because it runs over 38 passes. Next, ``bugpoint`` tries removing functions from the test program, to reduce its; size. Usually it is able to reduce a test program to a single function, when; debugging intraprocedural optimizations. Once the number of functions has been; reduced, it attempts to delete various edges in the control flow graph, to; reduce the size of the function as much as possible. Finally, ``bugpoint``; deletes any individual LLVM instructions whose absence does not eliminate the; failure. At the end, ``bugpoint`` should tell you what passes crash, give you a; bitcode file, and give you instructions on how to reproduce the failure with; ``opt`` or ``llc``. .. _code generator debugger:. Code generator debugger; -----------------------. The code generator debugger attempts to narrow down the amount of code that is; being miscompiled by the selected code generator. To do this, it takes the test; program and partitions it into two pieces: one piece which it compiles with the; ""safe"" backend (into a shared object), and one piece which it runs with",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst:3485,test,test,3485,interpreter/llvm-project/llvm/docs/Bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst,1,['test'],['test']
Testability,"m);; struct MakeHilbert : public TElementPosActionD {; void Operation(Double_t &element); { element = 1./(fI+fJ-1); }; };; m1.Apply(MakeHilbert());; }; ~~~. of course, using a special method THilbertMatrixD() is; still more optimal, but not by a whole lot. And that's right,; class MakeHilbert is declared *within* a function and local to; that function. It means one can define another MakeHilbert class; (within another function or outside of any function, that is, in; the global scope), and it still will be OK. Note, this currently; is not yet supported by the interpreter CINT. Another example is applying of a simple function to each matrix element:. ~~~ {.cpp}; void foo(TMatrixD &m,TMatrixD &m1); {; typedef double (*dfunc_t)(double);; class ApplyFunction : public TElementActionD {; dfunc_t fFunc;; void Operation(Double_t &element); { element=fFunc(element); }; public:; ApplyFunction(dfunc_t func):fFunc(func) {}; };; ApplyFunction x(TMath::Sin);; m.Apply(x);; }; ~~~. Validation code `$ROOTSYS/test/vmatrix.cxx` and `vvector.cxx` contain; a few more examples of that kind. #### 6. Lazy matrices:. instead of returning an object return a ""recipe""; how to make it. The full matrix would be rolled out only when; and where it's needed:. ~~~ {.cpp}; TMatrixD haar = THaarMatrixD(5);; ~~~. THaarMatrixD() is a *class*, not a simple function. However; similar this looks to a returning of an object (see note #1; above), it's dramatically different. THaarMatrixD() constructs a; TMatrixDLazy, an object of just a few bytes long. A special; ""TMatrixD(const TMatrixDLazy &recipe)"" constructor follows the; recipe and makes the matrix haar() right in place. No matrix; element is moved whatsoever!. ### Acknowledgements. 1. Oleg E. Kiselyov; First implementations were based on the his code . We have diverged; quite a bit since then but the ideas/code for lazy matrix and; ""nested function"" are 100% his .; You can see him and his code in action at http://okmij.org/ftp; 2. Chris R. Birchenhall,",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/doc/index.md:18290,test,test,18290,math/matrix/doc/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/doc/index.md,1,['test'],['test']
Testability,"m-only]. By default, all benchmark results are analysed, but sometimes it may be useful; to only look at those that to not involve memory, or vice versa. This option; allows to either keep all benchmarks, or filter out (ignore) either all the; ones that do involve memory (involve instructions that may read or write to; memory), or the opposite, to only keep such benchmarks. .. option:: --analysis-clustering=[dbscan,naive]. Specify the clustering algorithm to use. By default DBSCAN will be used.; Naive clustering algorithm is better for doing further work on the; `-analysis-inconsistencies-output-file=` output, it will create one cluster; per opcode, and check that the cluster is stable (all points are neighbours). .. option:: --analysis-numpoints=<dbscan numPoints parameter>. Specify the numPoints parameters to be used for DBSCAN clustering; (`analysis` mode, DBSCAN only). .. option:: --analysis-clustering-epsilon=<dbscan epsilon parameter>. Specify the epsilon parameter used for clustering of benchmark points; (`analysis` mode). .. option:: --analysis-inconsistency-epsilon=<epsilon>. Specify the epsilon parameter used for detection of when the cluster; is different from the LLVM schedule profile values (`analysis` mode). .. option:: --analysis-display-unstable-clusters. If there is more than one benchmark for an opcode, said benchmarks may end up; not being clustered into the same cluster if the measured performance; characteristics are different. by default all such opcodes are filtered out.; This flag will instead show only such unstable opcodes. .. option:: --ignore-invalid-sched-class=false. If set, ignore instructions that do not have a sched class (class idx = 0). .. option:: --mtriple=<triple name>. Target triple. See `-version` for available targets. .. option:: --mcpu=<cpu name>. If set, measure the cpu characteristics using the counters for this CPU. This; is useful when creating new sched models (the host CPU is unknown to LLVM).; (`-mcpu=help` for detai",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst:16086,benchmark,benchmark,16086,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,1,['benchmark'],['benchmark']
Testability,"m-strings` looks for strings in each ``input`` file specified.; Unlike GNU :program:`strings` it looks in the entire input file, regardless of; file format, rather than restricting the search to certain sections of object; files. If ""``-``"" is specified as an ``input``, or no ``input`` is specified,; the program reads from the standard input stream. EXAMPLE; -------. .. code-block:: console. $ cat input.txt; bars; foo; wibble blob; $ llvm-strings input.txt; bars; wibble blob. OPTIONS; -------. .. option:: --all, -a. Silently ignored. Present for GNU :program:`strings` compatibility. .. option:: --bytes=<length>, -n. Set the minimum number of printable ASCII characters required for a sequence of; bytes to be considered a string. The default value is 4. .. option:: --help, -h. Display a summary of command line options. .. option:: --print-file-name, -f. Display the name of the containing file before each string. Example:. .. code-block:: console. $ llvm-strings --print-file-name test.o test.elf; test.o: _Z5hellov; test.o: some_bss; test.o: test.cpp; test.o: main; test.elf: test.cpp; test.elf: test2.cpp; test.elf: _Z5hellov; test.elf: main; test.elf: some_bss. .. option:: --radix=<radix>, -t. Display the offset within the file of each string, before the string and using; the specified radix. Valid ``<radix>`` values are ``o``, ``d`` and ``x`` for; octal, decimal and hexadecimal respectively. Example:. .. code-block:: console. $ llvm-strings --radix=o test.o; 1054 _Z5hellov; 1066 .rela.text; 1101 .comment; 1112 some_bss; 1123 .bss; 1130 test.cpp; 1141 main; $ llvm-strings --radix=d test.o; 556 _Z5hellov; 566 .rela.text; 577 .comment; 586 some_bss; 595 .bss; 600 test.cpp; 609 main; $ llvm-strings -t x test.o; 22c _Z5hellov; 236 .rela.text; 241 .comment; 24a some_bss; 253 .bss; 258 test.cpp; 261 main. .. option:: --version. Display the version of the :program:`llvm-strings` executable. .. option:: @<FILE>. Read command-line options from response file ``<FILE>``. EXIT STATU",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst:1552,test,test,1552,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst,1,['test'],['test']
Testability,"m.org/svn/llvm-project/llvm/trunk/utils/lit; % lit --version; lit 0.8.0dev; ```. 2. Check out the `test-suite` module with:. ```bash; % git clone https://github.com/llvm/llvm-test-suite.git test-suite; ```. 3. Create a build directory and use CMake to configure the suite. Use the; `CMAKE_C_COMPILER` option to specify the compiler to test. Use a cache file; to choose a typical build configuration:. ```bash; % mkdir test-suite-build; % cd test-suite-build; % cmake -DCMAKE_C_COMPILER=<path to llvm build>/bin/clang \; -C../test-suite/cmake/caches/O3.cmake \; ../test-suite; ```. **NOTE!** if you are using your built clang, and you want to build and run the; MicroBenchmarks/XRay microbenchmarks, you need to add `compiler-rt` to your; `LLVM_ENABLE_RUNTIMES` cmake flag. 4. Build the benchmarks:. ```text; % make; Scanning dependencies of target timeit-target; [ 0%] Building C object tools/CMakeFiles/timeit-target.dir/timeit.c.o; [ 0%] Linking C executable timeit-target; ...; ```. 5. Run the tests with lit:. ```text; % llvm-lit -v -j 1 -o results.json .; -- Testing: 474 tests, 1 threads --; PASS: test-suite :: MultiSource/Applications/ALAC/decode/alacconvert-decode.test (1 of 474); ********** TEST 'test-suite :: MultiSource/Applications/ALAC/decode/alacconvert-decode.test' RESULTS **********; compile_time: 0.2192; exec_time: 0.0462; hash: ""59620e187c6ac38b36382685ccd2b63b""; size: 83348; **********; PASS: test-suite :: MultiSource/Applications/ALAC/encode/alacconvert-encode.test (2 of 474); ...; ```. 6. Show and compare result files (optional):. ```bash; # Make sure pandas and scipy are installed. Prepend `sudo` if necessary.; % pip install pandas scipy; # Show a single result file:; % test-suite/utils/compare.py results.json; # Compare two result files:; % test-suite/utils/compare.py results_a.json results_b.json; ```. Structure; ---------. The test-suite contains benchmark and test programs. The programs come with; reference outputs so that their correctness can be checked. T",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:1411,test,tests,1411,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['test'],['tests']
Testability,m/google/benchmark); library. The programs define functions that are run multiple times until the; measurement results are statistically significant. - `External/`. Contains descriptions and test data for code that cannot be directly; distributed with the test-suite. The most prominent members of this; directory are the SPEC CPU benchmark suites.; See [External Suites](#external-suites). - `Bitcode/`. These tests are mostly written in LLVM bitcode. - `CTMark/`. Contains symbolic links to other benchmarks forming a representative sample; for compilation performance measurements. ### Benchmarks. Every program can work as a correctness test. Some programs are unsuitable for; performance measurements. Setting the `TEST_SUITE_BENCHMARKING_ONLY` CMake; option to `ON` will disable them. Configuration; -------------. The test-suite has configuration options to customize building and running the; benchmarks. CMake can print a list of them:. ```bash; % cd test-suite-build; # Print basic options:; % cmake -LH; # Print all options:; % cmake -LAH; ```. ### Common Configuration Options. - `CMAKE_C_FLAGS`. Specify extra flags to be passed to C compiler invocations. The flags are; also passed to the C++ compiler and linker invocations. See; [https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_FLAGS.html](https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_FLAGS.html). - `CMAKE_C_COMPILER`. Select the C compiler executable to be used. Note that the C++ compiler is; inferred automatically i.e. when specifying `path/to/clang` CMake will; automatically use `path/to/clang++` as the C++ compiler. See; [https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER.html](https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER.html). - `CMAKE_Fortran_COMPILER`. Select the Fortran compiler executable to be used. Not set by default and not; required unless running the Fortran Test Suite. - `CMAKE_BUILD_TYPE`. Select a build type like `OPTIMIZE` or `DEBUG` selecting a set o,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:3885,test,test-suite-build,3885,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['test'],['test-suite-build']
Testability,"m/lib/CodeGen/``. The major parts of the code generator: Instruction Selector, Instruction; Scheduling, and Register Allocation. ``llvm/lib/MC/``. The libraries represent and process code at machine code level. Handles; assembly and object-file emission. ``llvm/lib/ExecutionEngine/``. Libraries for directly executing bitcode at runtime in interpreted and; JIT-compiled scenarios. ``llvm/lib/Support/``. Source code that corresponding to the header files in ``llvm/include/ADT/``; and ``llvm/include/Support/``. ``llvm/bindings``; ----------------------. Contains bindings for the LLVM compiler infrastructure to allow; programs written in languages other than C or C++ to take advantage of the LLVM; infrastructure.; LLVM project provides language bindings for OCaml and Python. ``llvm/projects``; -----------------. Projects not strictly part of LLVM but shipped with LLVM. This is also the; directory for creating your own LLVM-based projects which leverage the LLVM; build system. ``llvm/test``; -------------. Feature and regression tests and other sanity checks on LLVM infrastructure. These; are intended to run quickly and cover a lot of territory without being exhaustive. ``test-suite``; --------------. A comprehensive correctness, performance, and benchmarking test suite; for LLVM. This comes in a ``separate git repository; <https://github.com/llvm/llvm-test-suite>``, because it contains a; large amount of third-party code under a variety of licenses. For; details see the :doc:`Testing Guide <TestingGuide>` document. .. _tools:. ``llvm/tools``; --------------. Executables built out of the libraries; above, which form the main part of the user interface. You can always get help; for a tool by typing ``tool_name -help``. The following is a brief introduction; to the most important tools. More detailed information is in; the `Command Guide <CommandGuide/index.html>`_. ``bugpoint``. ``bugpoint`` is used to debug optimization passes or code generation backends; by narrowing dow",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst:37964,test,test,37964,interpreter/llvm-project/llvm/docs/GettingStarted.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst,1,['test'],['test']
Testability,"m:`lit` that it should treat; everything enclosed as one value. In general, you should strive to keep your RUN lines as simple as possible,; using them only to run tools that generate textual output you can then examine.; The recommended way to examine output to figure out if the test passes is using; the :doc:`FileCheck tool <CommandGuide/FileCheck>`. *[The usage of grep in RUN; lines is deprecated - please do not send or commit patches that use it.]*. Put related tests into a single file rather than having a separate file per; test. Check if there are files already covering your feature and consider; adding your code there instead of creating a new file. Generating assertions in regression tests; -----------------------------------------. Some regression test cases are very large and complex to write/update by hand.; In that case to reduce the human work we can use the scripts available in; llvm/utils/ to generate the assertions. For example to generate assertions in an :program:`llc`-based test, after; adding one or more RUN lines use:. .. code-block:: bash. % llvm/utils/update_llc_test_checks.py --llc-binary build/bin/llc test.ll. This will generate FileCheck assertions, and insert a ``NOTE:`` line at the; top to indicate that assertions were automatically generated. If you want to update assertions in an existing test case, pass the `-u` option; which first checks the ``NOTE:`` line exists and matches the script name. Sometimes a test absolutely depends on hand-written assertions and should not; have assertions automatically generated. In that case, add the text ``NOTE: Do; not autogenerate`` to the first line, and the scripts will skip that test. It; is a good idea to explain why generated assertions will not work for the test; so future developers will understand what is going on. These are the most common scripts and their purposes/applications in generating; assertions:. .. code-block:: none. update_analyze_test_checks.py; opt -passes='print<cost-model>'. u",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:11453,assert,assertions,11453,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,2,"['assert', 'test']","['assertions', 'test']"
Testability,"m=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg; (path to llvm)\llvm\tools\clang\test. For CMake builds e.g. on Windows with Visual Studio, you will need; to specify your build configuration (Debug, Release, etc.) via; --param=build_config=(build config). You may also need to specify; the build mode (Win32, etc) via --param=build_mode=(build mode).; Additionally, you will need to specify the lit site configuration which; lives in (build dir)\tools\clang\test, via; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg.; ; To run a single test:. python (path to llvm)\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg; (path to llvm)\llvm\tools\clang\test\(dir)\(test). For example:. python C:\Tools\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site_config=C:\Tools\build\tools\clang\test\lit.site.cfg; C:\Tools\llvm\tools\clang\test\Sema\wchar.c. The -sv option above tells the runner to show the test output if; any tests failed, to help you determine the cause of failure.; You can also pass in the --no-progress-bar option if you wish to disable; progress indications while the tests are running.; Your output might look something like this:; lit.py: lit.cfg:152: note: using clang: 'C:\Tools\llvm\bin\Release\clang.EXE'; -- Testing: Testing: 2534 tests, 4 threads --; Testing: 0 .. 10.. 20.. 30.. 40.. 50.. 60.. 70.. 80.. 90..; Testing Time: 81.52s; Passed : 2503; Expectedly Failed: 28; Unsupported : 3. The statistic, ""Failed"" (not shown if all tests pass), is the important one. Testing changes affecting libc++. Some changes in Clang affect libc++,; for example:. Changing the output of Clang's diagnostics.; Changing compiler builtins, especially the builtins used for type traits; or replacements of library functions like std::move or; std::forward. After adjusting libc++ to work with the changes, the next re",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html:7230,test,test,7230,interpreter/llvm-project/clang/www/hacking.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html,1,['test'],['test']
Testability,"ma No 0.1 − Width (wrt volume size) of Gaussian kernel estimator. NormTree No False − Normalize binary search tree. Configuration options for MVA method :. Configuration options reference for MVA method: FDA. Option Array Default value Predefined values Description. V No False − Verbose output (short form of VerbosityLevel below - overrides the latter one). VerbosityLevel No Default Default, Debug, Verbose, Info, Warning, Error, Fatal Verbosity level. VarTransform No None − List of variable transformations performed before training, e.g., D_Background,P_Signal,G,N_AllClasses for: Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed). H No False − Print method-specific help message. CreateMVAPdfs No False − Create PDFs for classifier outputs (signal and background). IgnoreNegWeightsInTraining No False − Events with negative weights are ignored in the training (but are included for testing and performance evaluation). Formula No (0) − The discrimination formula. ParRanges No () − Parameter ranges. FitMethod No MINUIT MC, GA, SA, MINUIT Optimisation Method. Converger No None None, MINUIT FitMethod uses Converger to improve result. Configuration options for MVA method :. Configuration options reference for MVA method: LD. Option Array Default value Predefined values Description. V No False − Verbose output (short form of VerbosityLevel below - overrides the latter one). VerbosityLevel No Default Default, Debug, Verbose, Info, Warning, Error, Fatal Verbosity level. VarTransform No None − List of variable transformations performed before training, e.g., D_Background,P_Signal,G,N_AllClasses for: Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed). H No False − Print method-specifi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html:5984,test,testing,5984,documentation/tmva/UsersGuide/optionRef.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html,1,['test'],['testing']
Testability,"maller; changes increases the odds that any of the work will be committed to the main; repository. To address these problems, LLVM uses an incremental development style and we; require contributors to follow this practice when making a large/invasive; change. Some tips:. * Large/invasive changes usually have a number of secondary changes that are; required before the big change can be made (e.g. API cleanup, etc). These; sorts of changes can often be done before the major change is done,; independently of that work. * The remaining inter-related work should be decomposed into unrelated sets of; changes if possible. Once this is done, define the first increment and get; consensus on what the end goal of the change is. * Each change in the set can be stand alone (e.g. to fix a bug), or part of a; planned series of changes that works towards the development goal. * Each change should be kept as small as possible. This simplifies your work; (into a logical progression), simplifies code review and reduces the chance; that you will get negative feedback on the change. Small increments also; facilitate the maintenance of a high quality code base. * Often, an independent precursor to a big change is to add a new API and slowly; migrate clients to use the new API. Each change to use the new API is often; ""obvious"" and can be committed without review. Once the new API is in place; and used, it is much easier to replace the underlying implementation of the; API. This implementation change is logically separate from the API; change. If you are interested in making a large change, and this scares you, please make; sure to first `discuss the change/gather consensus`_ then ask about the best way; to go about making the change. Attribution of Changes; ----------------------. When contributors submit a patch to an LLVM project, other developers with; commit access may commit it for the author once appropriate (based on the; progression of code review, etc.). When doing so, it is impo",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst:28809,log,logical,28809,interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,1,['log'],['logical']
Testability,"mation about how to contribute in the following documentation:. * :doc:`Contributing`; * :doc:`MyFirstTypoFix`. Example Pull Request with git; ====================================. Instead of using the GitHub CLI to create a PR, you can push your code to a; remote branch on your fork and create the PR to upstream using the GitHub web; interface. Here is an example of making a PR using git and the GitHub web interface:. First follow the instructions to [fork the repository](https://docs.github.com/en/get-started/quickstart/fork-a-repo?tool=webui#forking-a-repository). Next follow the instructions to [clone your forked repository](https://docs.github.com/en/get-started/quickstart/fork-a-repo?tool=webui#cloning-your-forked-repository). Once you've cloned your forked repository,. ::. # Switch to the forked repo; cd llvm-project. # Create a new branch; git switch -c my_change. # Create your changes; $EDITOR file.cpp. # Don't forget clang-format; git clang-format. # and don't forget running your tests; ninja check-llvm. # Commit, use a good commit message; git commit file.cpp. # Push your changes to your fork branch, be mindful of; # your remotes here, if you don't remember what points to your; # fork, use git remote -v to see. Usually origin points to your; # fork and upstream to llvm/llvm-project; git push origin my_change. Navigate to the URL printed to the console from the git push command in the last step.; Create a pull request from your branch to llvm::main. ::. # If you get any review comments, come back to the branch and; # adjust them.; git switch my_change; $EDITOR file.cpp. # Commit your changes; git commit file.cpp -m ""Code Review adjustments"". # Format changes; git clang-format HEAD~. # Recommit if any formatting changes; git commit -a --amend. # Re-run tests and make sure nothing broke.; ninja check. # Push your changes to your fork branch, be mindful of; # your remotes here, if you don't remember what points to your; # fork, use git remote -v to see. Usuall",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GitHub.rst:10269,test,tests,10269,interpreter/llvm-project/llvm/docs/GitHub.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GitHub.rst,1,['test'],['tests']
Testability,"may require spilling and restoring registers in the stack and working with; register allocators. As seen in ``SparcISelLowering.cpp`` code below, to perform a type conversion; from a floating point value to a signed integer, first the; ``setOperationAction`` should be called with ``Custom`` as the third parameter:. .. code-block:: c++. setOperationAction(ISD::FP_TO_SINT, MVT::i32, Custom);. In the ``LowerOperation`` method, for each ``Custom`` operation, a case; statement should be added to indicate what function to call. In the following; code, an ``FP_TO_SINT`` opcode will call the ``LowerFP_TO_SINT`` method:. .. code-block:: c++. SDValue SparcTargetLowering::LowerOperation(SDValue Op, SelectionDAG &DAG) {; switch (Op.getOpcode()) {; case ISD::FP_TO_SINT: return LowerFP_TO_SINT(Op, DAG);; ...; }; }. Finally, the ``LowerFP_TO_SINT`` method is implemented, using an FP register to; convert the floating-point value to an integer. .. code-block:: c++. static SDValue LowerFP_TO_SINT(SDValue Op, SelectionDAG &DAG) {; assert(Op.getValueType() == MVT::i32);; Op = DAG.getNode(SPISD::FTOI, MVT::f32, Op.getOperand(0));; return DAG.getNode(ISD::BITCAST, MVT::i32, Op);; }. Legal; ^^^^^. The ``Legal`` ``LegalizeAction`` enum value simply indicates that an operation; **is** natively supported. ``Legal`` represents the default condition, so it; is rarely used. In ``SparcISelLowering.cpp``, the action for ``CTPOP`` (an; operation to count the bits set in an integer) is natively supported only for; SPARC v9. The following code enables the ``Expand`` conversion technique for; non-v9 SPARC implementations. .. code-block:: c++. setOperationAction(ISD::CTPOP, MVT::i32, Expand);; ...; if (TM.getSubtarget<SparcSubtarget>().isV9()); setOperationAction(ISD::CTPOP, MVT::i32, Legal);. Calling Conventions; -------------------. To support target-specific calling conventions, ``XXXGenCallingConv.td`` uses; interfaces (such as ``CCIfType`` and ``CCAssignToReg``) that are defined in; ``lib/Target/",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/WritingAnLLVMBackend.rst:60841,assert,assert,60841,interpreter/llvm-project/llvm/docs/WritingAnLLVMBackend.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/WritingAnLLVMBackend.rst,1,['assert'],['assert']
Testability,"mber of times to run the full set of delta passes (default=5). .. option:: --mtriple=<string> . Set the target triple. .. option:: --preserve-debug-environment. Don't disable features used for crash debugging (crash reports, llvm-symbolizer and core dumps). .. option:: --print-delta-passes . Print list of delta passes, passable to --delta-passes as a comma separated liste. .. option:: --skip-delta-passes=<string> . Delta passes to not run, separated by commas. By default, run all delta passes. .. option:: --starting-granularity-level=<uint>. Number of times to divide chunks prior to first test. Note : Granularity refers to the level of detail at which the reduction process operates.; A lower granularity means that the reduction process operates at a more coarse-grained level,; while a higher granularity means that it operates at a more fine-grained level. .. option:: --test=<string> . Name of the interesting-ness test to be run. .. option:: --test-arg=<string> . Arguments passed onto the interesting-ness test. .. option:: --verbose . Print extra debugging information.; ; .. option:: --write-tmp-files-as-bitcode . Always write temporary files as bitcode instead of textual IR. .. option:: -x={ir|mir}. Input language as ir or mir. EXIT STATUS; ------------. :program:`llvm-reduce` returns 0 under normal operation. It returns a non-zero; exit code if there were any errors. EXAMPLE; -------. :program:`llvm-reduce` can be used to simplify a test that causes a; compiler crash. For example, let's assume that `opt` is crashing on the IR file; `test.ll` with error message `Assertion failed at line 1234 of; WhateverFile.cpp`, when running at `-O2`. The test case of `test.ll` can be reduced by invoking the following; command:. .. code-block:: bash. $(LLVM_BUILD_FOLDER)/bin/llvm-reduce --test=script.sh <path to>/test.ll. The shell script passed to the option `test` consists of the; following:. .. code-block:: bash. $(LLVM_BUILD_FOLDER)/bin/opt -O2 -disable-output $1 \; |& grep ""As",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-reduce.rst:2459,test,test,2459,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-reduce.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-reduce.rst,1,['test'],['test']
Testability,"mbling and positioning volumes. If we define now `C` as an assembly containing `A` and `B`, positioning; the assembly into `D,E` and `F` will actually position only `A` and; `B `directly into these volumes, taking into account their combined; transformations `A/B` to `C` and `C` to `D/E/F`. This looks much nicer,; is it? In fact, it is and it is not. Of course, we managed to get rid of; the ""unnecessary"" volume `C` in our geometry, but we end-up with a more; flat structure for `D,E` and `F` (more daughters inside). This can get; much worse when extensively used, as in the case: assemblies of; assemblies. For deciding what to choose between using virtual containers or; assemblies for a specific case, one can use for both cases, after the; geometry was closed:. ~~~{.cpp}; gGeoManager->SetTopVolume(ptr_D);; gGeoManager->Test();; gGeoManager->RestoreMasterVolume();; ~~~. The `ptr_D` is a pointer to volume `D` containing the interesting; structure. The test will provide the timing for classifying 1 million; random points inside `D`. \anchor GP01be; #### Examples of Volume Positioning. Now let us make a simple volume representing a copper wire. We suppose; that a medium is already created (see TGeoMedium class on how to; create media). We will create a `TUBE` shape for our wire, having `Rmin=0cm`,; `Rmax=0.01cm` and a half-length `dZ=1cm`:. ~~~{.cpp}; TGeoTube *tube = new TGeoTube(""wire_tube"",0,0.01,1);; ~~~. One may omit the name for the shape `wire_tube,` if no retrieving by; name is further needed during geometry building. Different volumes; having different names and materials can share the same shape. Now let's make the volume for our wire:. ~~~{.cpp}; TGeoVolume *wire_co = new TGeoVolume(""WIRE_CO"",tube,ptrCOPPER); //(*); ~~~. (*) Do not bother to delete the media, shapes or volumes that you; have created since all will be automatically cleaned on exit by the; manager class. If we would have taken a look inside `TGeoManager::MakeTube()` method,; we would have been ab",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md:33274,test,test,33274,geom/geom/doc/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md,1,['test'],['test']
Testability,"me could figure out source file or function name to match; against the suppression.; * It is only possible to suppress recoverable checks. For the example above,; you can additionally pass; ``-fsanitize-recover=signed-integer-overflow,alignment,vptr``, although; most of UBSan checks are recoverable by default.; * Check groups (like ``undefined``) can't be used in suppressions file, only; fine-grained checks are supported. Supported Platforms; ===================. UndefinedBehaviorSanitizer is supported on the following operating systems:. * Android; * Linux; * NetBSD; * FreeBSD; * OpenBSD; * macOS; * Windows. The runtime library is relatively portable and platform independent. If the OS; you need is not listed above, UndefinedBehaviorSanitizer may already work for; it, or could be made to work with a minor porting effort. Current Status; ==============. UndefinedBehaviorSanitizer is available on selected platforms starting from LLVM; 3.3. The test suite is integrated into the CMake build and can be run with; ``check-ubsan`` command. Additional Configuration; ========================. UndefinedBehaviorSanitizer adds static check data for each check unless it is; in trap mode. This check data includes the full file name. The option; ``-fsanitize-undefined-strip-path-components=N`` can be used to trim this; information. If ``N`` is positive, file information emitted by; UndefinedBehaviorSanitizer will drop the first ``N`` components from the file; path. If ``N`` is negative, the last ``N`` components will be kept. Example; -------. For a file called ``/code/library/file.cpp``, here is what would be emitted:. * Default (No flag, or ``-fsanitize-undefined-strip-path-components=0``): ``/code/library/file.cpp``; * ``-fsanitize-undefined-strip-path-components=1``: ``code/library/file.cpp``; * ``-fsanitize-undefined-strip-path-components=2``: ``library/file.cpp``; * ``-fsanitize-undefined-strip-path-components=-1``: ``file.cpp``; * ``-fsanitize-undefined-strip-path-component",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UndefinedBehaviorSanitizer.rst:15964,test,test,15964,interpreter/llvm-project/clang/docs/UndefinedBehaviorSanitizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UndefinedBehaviorSanitizer.rst,1,['test'],['test']
Testability,"me length as long ones in order to; put all assignment operators to the right of the left hand side. .. code-block:: c++. true:; a >>= 2;; bbb = 2;. a = 2;; bbb >>= 2;. false:; a >>= 2;; bbb = 2;. a = 2;; bbb >>= 2;. .. _AlignConsecutiveShortCaseStatements:. **AlignConsecutiveShortCaseStatements** (``ShortCaseStatementsAlignmentStyle``) :versionbadge:`clang-format 17` :ref:`¶ <AlignConsecutiveShortCaseStatements>`; Style of aligning consecutive short case labels.; Only applies if ``AllowShortCaseLabelsOnASingleLine`` is ``true``. .. code-block:: yaml. # Example of usage:; AlignConsecutiveShortCaseStatements:; Enabled: true; AcrossEmptyLines: true; AcrossComments: true; AlignCaseColons: false. Nested configuration flags:. Alignment options. * ``bool Enabled`` Whether aligning is enabled. .. code-block:: c++. true:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; default: return """";; }. false:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; default: return """";; }. * ``bool AcrossEmptyLines`` Whether to align across empty lines. .. code-block:: c++. true:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";. default: return """";; }. false:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";. default: return """";; }. * ``bool AcrossComments`` Whether to align across comments. .. code-block:: c++. true:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; /* A comment. */; default: return """";; }. false:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; /* A comment. */; default: return """";; }. * ``bool AlignCaseColons`` Whether aligned case labels are aligned on the colon, or on the; , or on the tokens after the colon. .. code-block:: c++. true:; switch (level) {; case log::info : return ""info:"";; case log::warning: return ""warning:"";; de",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst:19393,log,log,19393,interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,2,['log'],['log']
Testability,"me to validate the release; candidates and volunteered to be the official release testers for each; architecture. These will be the ones testing, generating and uploading the official binaries; to the server, and will be the minimum tests *necessary* for the release to; proceed. This will obviously not cover all OSs and distributions, so additional community; validation is important. However, if community input is not reached before the; release is out, all bugs reported will have to go on the next stable release. The official release managers are:. * Even releases: Tom Stellard (tstellar@redhat.com); * Odd releases: Tobias Hieta (tobias@hieta.se). The official release testers are volunteered from the community and have; consistently validated and released binaries for their targets/OSs. To contact; them, you should post on the `Discourse forums (Project; Infrastructure - Release Testers). <https://discourse.llvm.org/c/infrastructure/release-testers/66>`_. The official testers list is in the file ``RELEASE_TESTERS.TXT``, in the ``LLVM``; repository. Community Testing; -----------------. Once all testing has been completed and appropriate bugs filed, the release; candidate tarballs are put on the website and the LLVM community is notified. We ask that all LLVM developers test the release in any the following ways:. #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang``; binary. Build LLVM. Run ``make check`` and the full LLVM test suite (``make; TEST=nightly report``). #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the ``clang`` sources. Compile; everything. Run ``make check`` and the full LLVM test suite (``make; TEST=nightly report``). #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang``; binary. Build whole programs with it (ex. Chromium, Firefox, Apache) for; your platform. #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang``; binary. Build *your* programs with it and check for conformance and; per",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst:7849,test,testers,7849,interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,1,['test'],['testers']
Testability,"me; * Ponnuvel Palaniyappan; * qinch; * qinchao; * Radoslaw Zarzynski; * Red54; * Retallack Mark mark.retallack; * Richard Screene; * Rimas Misevi-ìius; * Rinat Dobrokhotov; * ryankopf; * Sage Weil; * Sangwhan Moon; * Saumitra Vikram; * Scott Nations; * Sebastien Jodogne; * Sergey Linev; * sgmesservey; * shantanugadgil; * Sherwyn Sen; * shreyajaggi8; * Simon Hailes; * slidertom; * SpaceIm; * SpaceLord; * Stefan Codrescu; * sunfch; * suzukibitman; * Símal Rasmussen; * Tamotsu Kanoh; * thewaterymoon; * Thiago Macedo; * THILMANT, Bernard; * Thomas Davis; * Thomas Klausner; * Thorsten Horstmann; * Tim Gates; * Tim Hudson; * tnoho; * Tom Deblauwe; * Tomas Andrle; * Tomasz Gorochowik; * Toni Wilk; * Torben Jonas; * Uilian Ries; * Ulrich Hertlein; * Walt Steverson; * wangli28; * webxer; * William Greathouse; * Wolfram Rösler; * xeoshow; * xtne6f; * Yehuda Sadeh; * Yury Z; * zhen.wang. and others. # Mongoose Contributors; CivetWeb is based on the Mongoose code. The following users contributed to the original Mongoose release between 2010 and 2013. This list was generated from the Mongoose GIT logs. It does not contain contributions from the Mongoose mailing list. There is no record for contributors prior to 2010. * Sergey Lyubka; * Arnout Vandecappelle (Essensium/Mind); * Benoît Amiaux; * Cody Hanson; * Colin Leitner; * Daniel Oaks; * Eric Bakan; * Erik Oomen; * Filipp Kovalev; * Ger Hobbelt; * Hendrik Polczynski; * Henrique Mendonça; * Igor Okulist; * Jay; * Joe Mucchiello; * John Safranek; * Joseph Mainwaring; * José Miguel Gonçalves; * KIU Shueng Chuan; * Katerina Blinova; * Konstantin Sorokin; * Marin Atanasov Nikolov; * Matt Healy; * Miguel Morales; * Mikhail Nikalyukin; * MikieMorales; * Mitch Hendrickson; * Nigel Stewart; * Pavel; * Pavel Khlebovich; * Rogerz Zhang; * Sebastian Reinhard; * Stefan Doehla; * Thileepan; * abadc0de; * arvidn; * bick; * ff.feng; * jmucchiello; * jwang; * lsm; * migal; * mlamb; * nullable.type; * shantanugadgil; * tayS; * test; * valenok; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/CREDITS.md:3568,log,logs,3568,net/http/civetweb/CREDITS.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/CREDITS.md,2,"['log', 'test']","['logs', 'test']"
Testability,"memory; }. void test() {; int *p = malloc(sizeof(int));; free(p);; *p = 1; // warn: use after free; }. void test() {; int *p = malloc(1);; if (p); return; // warn: memory is never released; }. void test() {; int a[] = { 1 };; free(a); // warn: argument is not allocated by malloc; }. void test() {; int *p = malloc(sizeof(char));; p = p - 1;; free(p); // warn: argument to free() is offset by -4 bytes; }. unix.MallocSizeof; (C); Check for dubious malloc, calloc or; realloc arguments involving sizeof. void test() {; long *p = malloc(sizeof(short));; // warn: result is converted to 'long *', which is; // incompatible with operand type 'short'; free(p);; }. unix.MismatchedDeallocator; (C, C++, ObjC); Check for mismatched deallocators (e.g. passing a pointer allocating; with new to free()). // C, C++; void test() {; int *p = (int *)malloc(sizeof(int));; delete p; // warn; }. // C, C++; void __attribute((ownership_returns(malloc))) *user_malloc(size_t);. void test() {; int *p = (int *)user_malloc(sizeof(int));; delete p; // warn; }. // C, C++; void test() {; int *p = new int;; free(p); // warn; }. // C, C++; void test() {; int *p = new int[1];; realloc(p, sizeof(long)); // warn; }. // C, C++; template <typename T>; struct SimpleSmartPointer {; T *ptr;. explicit SimpleSmartPointer(T *p = 0) : ptr(p) {}; ~SimpleSmartPointer() {; delete ptr; // warn; }; };. void test() {; SimpleSmartPointer<int> a((int *)malloc(4));; }. // C++; void test() {; int *p = (int *)operator new(0);; delete[] p; // warn; }. // Objective-C, C++; void test(NSUInteger dataLength) {; int *p = new int;; NSData *d = [NSData dataWithBytesNoCopy:p; length:sizeof(int) freeWhenDone:1];; // warn +dataWithBytesNoCopy:length:freeWhenDone: cannot take; // ownership of memory allocated by 'new'; }. unix.Vfork; (C); Check for proper usage of vfork. int test(int x) {; pid_t pid = vfork(); // warn; if (pid != 0); return 0;. switch (x) {; case 0:; pid = 1;; execl("""", """", 0);; _exit(1);; break;; case 1:; x = 0; // warn: ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:25336,test,test,25336,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"ment. Please do not implement handling logic directly in the; ``case`` for the attribute. Unless otherwise specified by the attribute definition, common semantic checking; of the parsed attribute is handled automatically. This includes diagnosing; parsed attributes that do not appertain to the given ``Decl`` or ``Stmt``,; ensuring the correct minimum number of arguments are passed, etc. If the attribute adds additional warnings, define a ``DiagGroup`` in; `include/clang/Basic/DiagnosticGroups.td; <https://github.com/llvm/llvm-project/blob/main/clang/include/clang/Basic/DiagnosticGroups.td>`_; named after the attribute's ``Spelling`` with ""_""s replaced by ""-""s. If there; is only a single diagnostic, it is permissible to use ``InGroup<DiagGroup<""your-attribute"">>``; directly in `DiagnosticSemaKinds.td; <https://github.com/llvm/llvm-project/blob/main/clang/include/clang/Basic/DiagnosticSemaKinds.td>`_. All semantic diagnostics generated for your attribute, including automatically-; generated ones (such as subjects and argument counts), should have a; corresponding test case. Semantic handling; ^^^^^^^^^^^^^^^^^; Most attributes are implemented to have some effect on the compiler. For; instance, to modify the way code is generated, or to add extra semantic checks; for an analysis pass, etc. Having added the attribute definition and conversion; to the semantic representation for the attribute, what remains is to implement; the custom logic requiring use of the attribute. The ``clang::Decl`` object can be queried for the presence or absence of an; attribute using ``hasAttr<T>()``. To obtain a pointer to the semantic; representation of the attribute, ``getAttr<T>`` may be used. The ``clang::AttributedStmt`` object can be queried for the presence or absence; of an attribute by calling ``getAttrs()`` and looping over the list of; attributes. How to add an expression or statement; -------------------------------------. Expressions and statements are one of the most fundamenta",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:143628,test,test,143628,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,1,['test'],['test']
Testability,"ment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull = sll; // warn; return ull;; }. void f(unsigned int i);. void test(int si) {; f(si); // warn; }. unsigned int test(int i) {; return i;; }. different.NumericTruncation; (C); Numeric truncation might take place.; Source: ; CWE-197. unsigned long test(unsigned long long ull) {; unsigned long ul = ull; // warn; return ul;; }. void f(int i);. void test(long long sll) {; f(sll); // warn; }. int f();. short test(long long sll) {; short ss = f();; return ss;; }. different.MissingCopyCtorAssignOp; (C++); A class has dynamically allocated data members but do not define a copy; constructor/assignment operator.; Source: Scott Meyers ""Effective C++"", item 11: Prevent exceptions from; leaving destructors. class C {; int *p; // warn; public:; C() { p = new int; }; ~C() { delete p; }; };. WinAPI. Name, DescriptionExampleProgress. WinAPI.CreateProcess; (C); CreateProcess(): if the first parameter ; lpApplicationName is NULL then the executable name must be in the; white space-delimited",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:24969,test,test,24969,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"mentation MyObj; - (id)init {; [super init];; x = 0; // warn: instance variable used while 'self' is not; // initialized; return 0;; }; @end. @interface MyObj : NSObject; - (id)init;; @end. @implementation MyObj; - (id)init {; [super init];; return self; // warn: returning uninitialized 'self'; }; @end. osx.cocoa.SuperDealloc; (ObjC); Warn about improper use of '[super dealloc]' in Objective-C. @interface SuperDeallocThenReleaseIvarClass : NSObject {; NSObject *_ivar;; }; @end. @implementation SuperDeallocThenReleaseIvarClass; - (void)dealloc {; [super dealloc];; [_ivar release]; // warn; }; @end. osx.cocoa.UnusedIvars; (ObjC); Warn about private ivars that are never used. @interface MyObj : NSObject {; @private; id x; // warn; }; @end. @implementation MyObj; @end. osx.cocoa.VariadicMethodTypes; (ObjC); Check for passing non-Objective-C types to variadic collection initialization; methods that expect only Objective-C types. void test() {; [NSSet setWithObjects:@""Foo"", ""Bar"", nil];; // warn: argument should be an ObjC pointer type, not 'char *'; }. osx.coreFoundation.CFError; (C); Check usage of CFErrorRef* parameters. void test(CFErrorRef *error) {; // warn: function accepting CFErrorRef* should have a; // non-void return; }. int foo(CFErrorRef *error) {; *error = 0; // warn: potential null dereference; return 0;; }. osx.coreFoundation.CFNumber; (C); Check for improper uses of CFNumberCreate. CFNumberRef test(unsigned char x) {; return CFNumberCreate(0, kCFNumberSInt16Type, &x);; // warn: 8 bit integer is used to initialize a 16 bit integer; }. osx.coreFoundation.CFRetainRelease; (C); Check for null arguments to CFRetain, CFRelease,; CFMakeCollectable. void test(CFTypeRef p) {; if (!p); CFRetain(p); // warn; }. void test(int x, CFTypeRef p) {; if (p); return;. CFRelease(p); // warn; }. osx.coreFoundation.containers.OutOfBounds; (C); Checks for index out-of-bounds when using CFArray API. void test() {; CFArrayRef A = CFArrayCreate(0, 0, 0, &kCFTypeArrayCallBacks);; C",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:19636,test,test,19636,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"ments without considering if their; parents are the same. For both comparison methods, the equal criteria; includes the name, source code location, type, lexical scope level. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level; --compare=types; --report=list; --print=symbols,types,summary; test-dwarf-clang.o test-dwarf-gcc.o. Reference: 'test-dwarf-clang.o'; Target: 'test-dwarf-gcc.o'. (1) Missing Types:; -[003] 4 {TypeAlias} 'INTEGER' -> 'int'. (1) Added Types:; +[004] 4 {TypeAlias} 'INTEGER' -> 'int'. ----------------------------------------; Element Expected Missing Added; ----------------------------------------; Scopes 4 0 0; Symbols 0 0 0; Types 2 1 1; Lines 0 0 0; ----------------------------------------; Total 6 1 1. Changing the *Reference* and *Target* order:. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level; --compare=types; --report=list; --print=symbols,types,summary; test-dwarf-gcc.o test-dwarf-clang.o. Reference: 'test-dwarf-gcc.o'; Target: 'test-dwarf-clang.o'. (1) Missing Types:; -[004] 4 {TypeAlias} 'INTEGER' -> 'int'. (1) Added Types:; +[003] 4 {TypeAlias} 'INTEGER' -> 'int'. ----------------------------------------; Element Expected Missing Added; ----------------------------------------; Scopes 4 0 0; Symbols 0 0 0; Types 2 1 1; Lines 0 0 0; ----------------------------------------; Total 6 1 1. As the *Reference* and *Target* are switched, the *Added Types* from; the first case now are listed as *Missing Types*. TEST CASE 2 - ASSEMBLER INSTRUCTIONS; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; The below example is used to show different output generated by; :program:`llvm-debuginfo-analyzer`. We compiled the example for an X86; Codeview and ELF targets with recent versions of Clang, GCC and MSVC; (-O0 -g) for Windows and Linux. .. code-block:: c++. 1 extern int printf(const char * format, ... );; 2; 3 int main(); 4 {; 5 printf(""Hello, World\n"");; 6 return 0;; 7 }. These are the logical views that :program:`llvm-debuginfo-ana",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:32107,test,test-dwarf-clang,32107,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['test'],['test-dwarf-clang']
Testability,"message if it's ever reached; and then exit the program. When assertions are disabled (i.e. in release; builds), ``llvm_unreachable`` becomes a hint to compilers to skip generating; code for this branch. If the compiler does not support this, it will fall back; to the ""abort"" implementation. Use ``llvm_unreachable`` to mark a specific point in code that should never be; reached. This is especially desirable for addressing warnings about unreachable; branches, etc., but can be used whenever reaching a particular code path is; unconditionally a bug (not originating from user input; see below) of some kind.; Use of ``assert`` should always include a testable predicate (as opposed to; ``assert(false)``). If the error condition can be triggered by user input then the; recoverable error mechanism described in :doc:`ProgrammersManual` should be; used instead. In cases where this is not practical, ``report_fatal_error`` may; be used. Another issue is that values used only by assertions will produce an ""unused; value"" warning when assertions are disabled. For example, this code will warn:. .. code-block:: c++. unsigned Size = V.size();; assert(Size > 42 && ""Vector smaller than it should be"");. bool NewToSet = Myset.insert(Value);; assert(NewToSet && ""The value shouldn't be in the set yet"");. These are two interesting different cases. In the first case, the call to; ``V.size()`` is only useful for the assert, and we don't want it executed when; assertions are disabled. Code like this should move the call into the assert; itself. In the second case, the side effects of the call must happen whether; the assert is enabled or not. In this case, the value should be cast to void to; disable the warning. To be specific, it is preferred to write the code like; this:. .. code-block:: c++. assert(V.size() > 42 && ""Vector smaller than it should be"");. bool NewToSet = Myset.insert(Value); (void)NewToSet;; assert(NewToSet && ""The value shouldn't be in the set yet"");. Do Not Use ``using nam",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst:47759,assert,assertions,47759,interpreter/llvm-project/llvm/docs/CodingStandards.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst,2,['assert'],['assertions']
Testability,"meter dimensions; in addition to the automatically determined set of observables.; as well. Also a complete new line of classes with similar functionality has been added inheriting from RooAbsReal.; These are RooAbsCachedReal,RooAbsSelfCachedReal and RooCachedReal. A newly; added class RooHistFunc presents these shapes and is capable of handling negative entries. New PDF error handling structure. New infrastructure has been put into place to propagate and process p.d.f evaluation errors during fitting.; Previously evaluation errors were marked with a zero p.d.f value and propagated as a special condition; in RooAddPdf, RooProdPdf etc to result in a zero top-level p.d.f value that was caught by the RooFit minuit; interface as a special condition. Summary information on the value of the parameters and the observables; was printed for the first 10 occurrences of such conditions. . Now, each p.d.f component that generates an error; in its evaluation logs the error into a separate facility during fitting and the RooFit minuit interface; polls this error logging facility for problems. This allows much more detailed and accurate warning messages; during the minimization phase. The level of verbosity of this new error facility can be controlled with; a new . PrintEvalErrors(Int_t code). argument to fitTo(). . With code of -1, no errors are printed at all.; With a; code of zero, one line is printed for each p.d.f component with problems summarizing the number of times; problems occurred during the likelihood evaluation. . [#0] WARNING:Minization -- RooFitGlue: Minimized function has error status. ; Returning maximum FCN so far (-1e+30) to force MIGRAD to back out of this region. Error log follows; Parameter values: m=-7.397; RooGaussian::gx[ x=x mean=m sigma=sx ] has 3 errors. A code greater than zero will generate even more detail and; print the details of each evaluation error as provided by the p.d.f (zero value, not-a-number, normalization zero etc..); and show the obser",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v520/index.html:15574,log,logs,15574,roofit/doc/v520/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v520/index.html,2,['log'],"['logging', 'logs']"
Testability,"meters in a frequentist way. ToyMCSampler. The primary interface for this class is to return a SamplingDistribution of a given TestStatistic.; The ToyMCSampler had a number of internal changes for improved performance with PROOF. These should be transparent. In addition, a new method was added RooAbsData* GenerateToyData(RooArgSet& paramPoint) that gives public access to the generation of toy data with all the same options for the treatment of nuisance parameters, binned or unbinned data, treatment of the global observables, importance sampling, etc. This is new method particularly useful for producing the expected limit bands where one needs to generate background-only pseudo-experiments in the same way that was used for the primary limit calculation. HypoTestResult. In the process of writing the new HypoTestInverter the conventions for p-values, CLb, CLs+b, and CLs were revisited. The situation is complicated by the fact that when performing a hypothesis test for discovery the null is background-only, but when performing an inverted hypothesis test the null is a signal+background model. The new convention is that the p-value for both the null and the alternate are taken from the same tail (as specified by the test statistic). Both CLs+b and CLb are equivalent to these p-values, and the HypoTestResult has a simple switch SetBackgroundIsAlt() to specify the pairing between (null p-value, alternate p-value) and (CLb, CLs+b). HypoTestInverter, HypoTestInverterResult, HypoTestInverterPlot. These classes have been rewritten for using them with the new hypothesis test calculators. The HypoTestInverter; class can now be constructed by any generic HypoTestCalculator, and both the HybridCalculator and the new; FrequentistCalculator are supported. The HypoTestInverter class can be constructed in two ways: either passing an; HypoTestCalculator and a data set or by passing the model for the signal, for the background and a data set.; In the first case the user configure the Hy",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v530/index.html:2796,test,test,2796,roofit/doc/v530/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v530/index.html,2,['test'],['test']
Testability,metic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND t,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4999,test,testBackpropagationDLCpu,4999,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testBackpropagationDLCpu']
Testability,"me} ${component}); list(APPEND ${name}_extra_targets ${component}-${name}); endforeach(). foreach(target IN LISTS SUB_INSTALL_TARGETS); set(${target}-${name} ${target}); set(${target}-${name}-stripped ${target}-stripped); list(APPEND ${name}_extra_targets ${target}-${name} ${target}-${name}-stripped); endforeach(). foreach(component ${LLVM_RUNTIME_DISTRIBUTION_COMPONENTS}); if(NOT component IN_LIST SUB_COMPONENTS); set(${component}-${name} ${component}); set(install-${component}-${name} install-${component}); set(install-${component}-${name}-stripped install-${component}-stripped); list(APPEND ${name}_extra_targets ${component}-${name} install-${component}-${name} install-${component}-${name}-stripped); endif(); endforeach(). if(LLVM_INCLUDE_TESTS); set_property(GLOBAL APPEND PROPERTY LLVM_ALL_LIT_TESTSUITES ""@${LLVM_BINARY_DIR}/runtimes/runtimes-${name}-bins/lit.tests""); set(runtimes-test-depends-${name} runtimes-test-depends); set(check-runtimes-${name} check-runtimes); list(APPEND ${name}_test_targets runtimes-test-depends-${name} check-runtimes-${name}); list(APPEND test_targets ${${name}_test_targets}). set(component_check_targets); foreach(component IN LISTS LLVM_RUNTIME_DISTRIBUTION_COMPONENTS); if(NOT ""check-${component}"" IN_LIST SUB_CHECK_TARGETS); list(APPEND component_check_targets ""check-${component}""); endif(); endforeach(). foreach(target IN LISTS SUB_CHECK_TARGETS component_check_targets); set(${target}-${name} ${target}); list(APPEND ${name}_test_targets ${target}-${name}); list(APPEND test_targets ${target}-${name}); endforeach(); set(test_targets ""${test_targets}"" PARENT_SCOPE); endif(). set(${name}_extra_args ${ARG_CMAKE_ARGS}); string(REPLACE "";"" ""|"" LLVM_ENABLE_RUNTIMES_PASSTHROUGH ""${LLVM_ENABLE_RUNTIMES}""); list(APPEND ${name}_extra_args -DLLVM_ENABLE_RUNTIMES=${LLVM_ENABLE_RUNTIMES_PASSTHROUGH}); list(APPEND ${name}_extra_args -DLLVM_USE_LINKER=${LLVM_USE_LINKER}). get_cmake_property(variable_names VARIABLES); foreach(extra_name IN ITEMS ${ARG",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/runtimes/CMakeLists.txt:11528,test,tests,11528,interpreter/llvm-project/llvm/runtimes/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/runtimes/CMakeLists.txt,4,['test'],"['test-depends', 'tests']"
Testability,"mis-behaving passes, you; can debug incorrect code generation by either LLC or the JIT, using; ``bugpoint``. The process ``bugpoint`` follows in this case is to try to; narrow the code down to a function that is miscompiled by one or the other; method, but since for correctness, the entire program must be run,; ``bugpoint`` will compile the code it deems to not be affected with the C; Backend, and then link in the shared object it generates. To debug the JIT:. .. code-block:: bash. bugpoint -run-jit -output=[correct output file] [bitcode file] \; --tool-args -- [arguments to pass to lli] \; --args -- [program arguments]. Similarly, to debug the LLC, one would run:. .. code-block:: bash. bugpoint -run-llc -output=[correct output file] [bitcode file] \; --tool-args -- [arguments to pass to llc] \; --args -- [program arguments]. **Special note:** if you are debugging MultiSource or SPEC tests that; already exist in the ``llvm/test`` hierarchy, there is an easier way to; debug the JIT, LLC, and CBE, using the pre-written Makefile targets, which; will pass the program options specified in the Makefiles:. .. code-block:: bash. cd llvm/test/../../program; make bugpoint-jit. At the end of a successful ``bugpoint`` run, you will be presented; with two bitcode files: a *safe* file which can be compiled with the C; backend and the *test* file which either LLC or the JIT; mis-codegenerates, and thus causes the error. To reproduce the error that ``bugpoint`` found, it is sufficient to do; the following:. #. Regenerate the shared object from the safe bitcode file:. .. code-block:: bash. llc -march=c safe.bc -o safe.c; gcc -shared safe.c -o safe.so. #. If debugging LLC, compile test bitcode native and link with the shared; object:. .. code-block:: bash. llc test.bc -o test.s; gcc test.s safe.so -o test.llc; ./test.llc [program options]. #. If debugging the JIT, load the shared object and supply the test; bitcode:. .. code-block:: bash. lli -load=safe.so test.bc [program options]; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst:10484,test,test,10484,interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst,10,['test'],['test']
Testability,"mismatched deallocators (e.g. passing a pointer allocating; with new to free()). // C, C++; void test() {; int *p = (int *)malloc(sizeof(int));; delete p; // warn; }. // C, C++; void __attribute((ownership_returns(malloc))) *user_malloc(size_t);. void test() {; int *p = (int *)user_malloc(sizeof(int));; delete p; // warn; }. // C, C++; void test() {; int *p = new int;; free(p); // warn; }. // C, C++; void test() {; int *p = new int[1];; realloc(p, sizeof(long)); // warn; }. // C, C++; template <typename T>; struct SimpleSmartPointer {; T *ptr;. explicit SimpleSmartPointer(T *p = 0) : ptr(p) {}; ~SimpleSmartPointer() {; delete ptr; // warn; }; };. void test() {; SimpleSmartPointer<int> a((int *)malloc(4));; }. // C++; void test() {; int *p = (int *)operator new(0);; delete[] p; // warn; }. // Objective-C, C++; void test(NSUInteger dataLength) {; int *p = new int;; NSData *d = [NSData dataWithBytesNoCopy:p; length:sizeof(int) freeWhenDone:1];; // warn +dataWithBytesNoCopy:length:freeWhenDone: cannot take; // ownership of memory allocated by 'new'; }. unix.Vfork; (C); Check for proper usage of vfork. int test(int x) {; pid_t pid = vfork(); // warn; if (pid != 0); return 0;. switch (x) {; case 0:; pid = 1;; execl("""", """", 0);; _exit(1);; break;; case 1:; x = 0; // warn: this assignment is prohibited; break;; case 2:; foo(); // warn: this function call is prohibited; break;; default:; return 0; // warn: return is prohibited; }. while(1);; }. unix.cstring.BadSizeArg; (C); Check the size argument passed to strncat for common erroneous; patterns. Use -Wno-strncat-size compiler option to mute other; strncat-related compiler warnings. void test() {; char dest[3];; strncat(dest, ""***"", sizeof(dest));; // warn: potential buffer overflow; }. unix.cstring.NullArg; (C); Check for null pointers being passed as arguments to C string functions:; strlen; strnlen; strcpy; strncpy; strcat; strncat; strcmp; strncmp; strcasecmp; strncasecmp. int test() {; return strlen(0); // warn; }. ; . ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:26203,test,test,26203,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,3,['test'],['test']
Testability,"mmand (from the UNIX command line). ``` {.cpp}; > $ROOTSYS/test/Event 400 1 2 1; ```. This creates an `Event.root` file with 400 events, compressed, split,; and filled. See `$ROOTSYS/test/MainEvent.cxx` for more info. The person who designed the tree makes a shared library available to; you, which defines the classes needed. In this case, the classes are; Event, `EventHeader`, and Track and they are defined in the shared; library `libEvent.so`. The designer also gives you the `Event.h` file to; see the definition of the classes. You can locate `Event.h` in; `$ROOTSYS/test`, and if you have not yet built `libEvent.so`, please see; the instructions of how to build it (typing make in \$ROOTSYS/test is; enough). If you have already built it, you can now use it again. ### Creating a Class with MakeClass. First, we load the shared library and open `Event.root`. ``` {.cpp}; root[] .L libEvent.so; root[] TFile *f = new TFile(""Event.root"");; root[] f->ls();; TFile** Event.root TTree benchmark ROOT file; TFile* Event.root TTree benchmark ROOT file; KEY: TH1F htime;1 Real-Time to write versus time; KEY: TTree T;1 An example of a ROOT tree; ```. We can see there is a tree ""`T`"", and just to verify that we are working; with the correct one, we print the tree, which will show us the header; and branches. ``` {.cpp}; root[] T->Print();; ```. From the output of print we can see that the tree has one branch for; each data member of `Event`, `Track`, and `EventHeader`. Now we can use; `TTree::MakeClass` on our tree ""`T`"". `MakeClass` takes one parameter, a; string containing the name of the class to be made. In the command; below, the name of our class will be ""`MyClass`"". ``` {.cpp}; root[] T->MakeClass(""MyClass""); Files: MyClass.h and MyClass.C generated from Tree: T; ```. Cling informs us that it has created two files. `MyClass.`h contains the; class definition and `MyClass.C` contains the `MyClass::Loop()` method.; `MyClass` has more methods than just `Loop()`. The other methods a",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md:123293,benchmark,benchmark,123293,documentation/users-guide/Trees.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md,1,['benchmark'],['benchmark']
Testability,"mmand contains the -cc1 flag, you can attach the; debugger to it directly:. $ gdb --args clang -cc1 -analyze -analyzer-checker=core test.c; $ lldb -- clang -cc1 -analyze -analyzer-checker=core test.c. Otherwise, if your command line contains --analyze,; the actual clang instance would be run in a separate process. In; order to debug it, use the -### flag for obtaining; the command line of the child process:. $ clang --analyze test.c -\#\#\#. Below we describe a few useful command line arguments, all of which assume that; you are running clang -cc1. Narrowing Down the Problem; While investigating a checker-related issue, instruct the analyzer to only; execute a single checker:. $ clang -cc1 -analyze -analyzer-checker=osx.KeychainAPI test.c. If you are experiencing a crash, to see which function is failing while; processing a large file use the -analyzer-display-progress; option.; To selectively analyze only the given function, use the; -analyze-function option:. $ clang -cc1 -analyze -analyzer-checker=core test.c -analyzer-display-progress; ANALYZE (Syntax): test.c foo; ANALYZE (Syntax): test.c bar; ANALYZE (Path, Inline_Regular): test.c bar; ANALYZE (Path, Inline_Regular): test.c foo; $ clang -cc1 -analyze -analyzer-checker=core test.c -analyzer-display-progress -analyze-function=foo; ANALYZE (Syntax): test.c foo; ANALYZE (Path, Inline_Regular): test.c foo. Note: a fully qualified function name has to be used when selecting; C++ functions and methods, Objective-C methods and blocks, e.g.:. $ clang -cc1 -analyze -analyzer-checker=core test.cc -analyze-function='foo(int)'. The fully qualified name can be found from the; -analyzer-display-progress output. The bug reporter mechanism removes path diagnostics inside intermediate; function calls that have returned by the time the bug was found and contain; no interesting pieces. Usually it is up to the checkers to produce more; interesting pieces by adding custom BugReporterVisitor objects.; However, you can disable path pr",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html:19913,test,test,19913,interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,1,['test'],['test']
Testability,"mmar Additions; =================. To support the new syntax described above, the Objective-C; ``@``-expression grammar has the following new productions:. ::. objc-at-expression : '@' (string-literal | encode-literal | selector-literal | protocol-literal | object-literal); ;. object-literal : ('+' | '-')? numeric-constant; | character-constant; | boolean-constant; | array-literal; | dictionary-literal; ;. boolean-constant : '__objc_yes' | '__objc_no' | 'true' | 'false' /* boolean keywords. */; ;. array-literal : '[' assignment-expression-list ']'; ;. assignment-expression-list : assignment-expression (',' assignment-expression-list)?; | /* empty */; ;. dictionary-literal : '{' key-value-list '}'; ;. key-value-list : key-value-pair (',' key-value-list)?; | /* empty */; ;. key-value-pair : assignment-expression ':' assignment-expression; ;. Note: ``@true`` and ``@false`` are only supported in Objective-C++. Availability Checks; ===================. Programs test for the new features by using clang's \_\_has\_feature; checks. Here are examples of their use:. .. code-block:: objc. #if __has_feature(objc_array_literals); // new way.; NSArray *elements = @[ @""H"", @""He"", @""O"", @""C"" ];; #else; // old way (equivalent).; id objects[] = { @""H"", @""He"", @""O"", @""C"" };; NSArray *elements = [NSArray arrayWithObjects:objects count:4];; #endif. #if __has_feature(objc_dictionary_literals); // new way.; NSDictionary *masses = @{ @""H"" : @1.0078, @""He"" : @4.0026, @""O"" : @15.9990, @""C"" : @12.0096 };; #else; // old way (equivalent).; id keys[] = { @""H"", @""He"", @""O"", @""C"" };; id values[] = { [NSNumber numberWithDouble:1.0078], [NSNumber numberWithDouble:4.0026],; [NSNumber numberWithDouble:15.9990], [NSNumber numberWithDouble:12.0096] };; NSDictionary *masses = [NSDictionary dictionaryWithObjects:objects forKeys:keys count:4];; #endif. #if __has_feature(objc_subscripting); NSUInteger i, count = elements.count;; for (i = 0; i < count; ++i) {; NSString *element = elements[i];; NSNumber *mass",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ObjectiveCLiterals.rst:18907,test,test,18907,interpreter/llvm-project/clang/docs/ObjectiveCLiterals.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ObjectiveCLiterals.rst,1,['test'],['test']
Testability,"mments; to a revision. To add an inline comment, select the lines of code you want; to comment on by clicking and dragging the line numbers in the diff pane.; When you have added all your comments, scroll to the bottom of the page and; click the Submit button. You can add overall comments in the text box at the bottom of the page.; When you're done, click the Submit button. Phabricator has many useful features, for example allowing you to select; diffs between different versions of the patch as it was reviewed in the; *Revision Update History*. Most features are self descriptive - explore, and; if you have a question, drop by on #llvm in IRC to get help. Note that as e-mail is the system of reference for code reviews, and some; people prefer it over a web interface, we do not generate automated mail; when a review changes state, for example by clicking ""Accept Revision"" in; the web interface. Thus, please type LGTM into the comment box to accept; a change from Phabricator. .. _pre-merge-testing:. Pre-merge testing; -----------------. The pre-merge tests are a continuous integration (CI) workflow. The workflow; checks the patches uploaded to Phabricator before a user merges them to the main; branch - thus the term *pre-merge testing*. When a user uploads a patch to Phabricator, Phabricator triggers the checks and; then displays the results. This way bugs in a patch are contained during the; code review stage and do not pollute the main branch. Our goal with pre-merge testing is to report most true problems while strongly; minimizing the number of false positive reports. Our goal is that problems; reported are always actionable. If you notice a false positive, please report; it so that we can identify the cause. If you notice issues or have an idea on how to improve pre-merge checks, please; `create a new issue <https://github.com/google/llvm-premerge-checks/issues/new>`_; or give a ❤️ to an existing one. Requirements; ^^^^^^^^^^^^. To get a patch on Phabricator tested",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Phabricator.rst:10348,test,testing,10348,interpreter/llvm-project/llvm/docs/Phabricator.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Phabricator.rst,1,['test'],['testing']
Testability,"mmon scripts and their purposes/applications in generating; assertions:. .. code-block:: none. update_analyze_test_checks.py; opt -passes='print<cost-model>'. update_cc_test_checks.py; C/C++, or clang/clang++ (IR checks). update_llc_test_checks.py; llc (assembly checks). update_mca_test_checks.py; llvm-mca. update_mir_test_checks.py; llc (MIR checks). update_test_checks.py; opt. Precommit workflow for tests; ----------------------------. If the test does not crash, assert, or infinite loop, commit the test with; baseline check-lines first. That is, the test will show a miscompile or; missing optimization. Add a ""TODO"" or ""FIXME"" comment to indicate that; something is expected to change in a test. A follow-up patch with code changes to the compiler will then show check-line; differences to the tests, so it is easier to see the effect of the patch.; Remove TODO/FIXME comments added in the previous step if a problem is solved. Baseline tests (no-functional-change or NFC patch) may be pushed to main; without pre-commit review if you have commit access. Best practices for regression tests; -----------------------------------. - Use auto-generated check lines (produced by the scripts mentioned above); whenever feasible.; - Include comments about what is tested/expected in a particular test. If there; are relevant issues in the bug tracker, add references to those bug reports; (for example, ""See PR999 for more details"").; - Avoid undefined behavior and poison/undef values unless necessary. For; example, do not use patterns like ``br i1 undef``, which are likely to break; as a result of future optimizations.; - Minimize tests by removing unnecessary instructions, metadata, attributes,; etc. Tools like ``llvm-reduce`` can help automate this.; - Outside PhaseOrdering tests, only run a minimal set of passes. For example,; prefer ``opt -S -passes=instcombine`` over ``opt -S -O3``.; - Avoid unnamed instructions/blocks (such as ``%0`` or ``1:``), because they may; require renumber",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:13270,test,tests,13270,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['tests']
Testability,"module will be the same as its identity outside of the module,; as the former will be the jump table entry if a jump table is necessary. The `GlobalLayoutBuilder`_ class is responsible for laying out the globals; efficiently to minimize the sizes of the underlying bitsets. .. _control flow integrity design document: https://clang.llvm.org/docs/ControlFlowIntegrityDesign.html. :Example:. ::. target datalayout = ""e-p:32:32"". @a = internal global i32 0, !type !0; @b = internal global i32 0, !type !0, !type !1; @c = internal global i32 0, !type !1; @d = internal global [2 x i32] [i32 0, i32 0], !type !2. define void @e() !type !3 {; ret void; }. define void @f() {; ret void; }. declare void @g() !type !3. !0 = !{i32 0, !""typeid1""}; !1 = !{i32 0, !""typeid2""}; !2 = !{i32 4, !""typeid2""}; !3 = !{i32 0, !""typeid3""}. declare i1 @llvm.type.test(i8* %ptr, metadata %typeid) nounwind readnone. define i1 @foo(i32* %p) {; %pi8 = bitcast i32* %p to i8*; %x = call i1 @llvm.type.test(i8* %pi8, metadata !""typeid1""); ret i1 %x; }. define i1 @bar(i32* %p) {; %pi8 = bitcast i32* %p to i8*; %x = call i1 @llvm.type.test(i8* %pi8, metadata !""typeid2""); ret i1 %x; }. define i1 @baz(void ()* %p) {; %pi8 = bitcast void ()* %p to i8*; %x = call i1 @llvm.type.test(i8* %pi8, metadata !""typeid3""); ret i1 %x; }. define void @main() {; %a1 = call i1 @foo(i32* @a) ; returns 1; %b1 = call i1 @foo(i32* @b) ; returns 1; %c1 = call i1 @foo(i32* @c) ; returns 0; %a2 = call i1 @bar(i32* @a) ; returns 0; %b2 = call i1 @bar(i32* @b) ; returns 1; %c2 = call i1 @bar(i32* @c) ; returns 1; %d02 = call i1 @bar(i32* getelementptr ([2 x i32]* @d, i32 0, i32 0)) ; returns 0; %d12 = call i1 @bar(i32* getelementptr ([2 x i32]* @d, i32 0, i32 1)) ; returns 1; %e = call i1 @baz(void ()* @e) ; returns 1; %f = call i1 @baz(void ()* @f) ; returns 0; %g = call i1 @baz(void ()* @g) ; returns 1; ret void; }. .. _GlobalLayoutBuilder: https://github.com/llvm/llvm-project/blob/main/llvm/include/llvm/Transforms/IPO/LowerTypeTests.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TypeMetadata.rst:7385,test,test,7385,interpreter/llvm-project/llvm/docs/TypeMetadata.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TypeMetadata.rst,1,['test'],['test']
Testability,mon/sanitizer_symbolizer_markup_constants.h; compiler-rt/lib/sanitizer_common/sanitizer_thread_safety.h; compiler-rt/lib/sanitizer_common/sanitizer_tls_get_addr.h; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.cpp; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_symbolize.cpp; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compiler-rt/lib/scudo/standalone/checksum.h; compiler-rt/lib/scudo/standalone/chunk.h; compiler-rt/lib/scudo/standalone/combined.h; compiler-rt/lib/scudo/standalone/common.cpp; compiler-rt/lib/scudo/standalone/common.h; compiler-rt/lib/scudo/standalone/crc32_hw.cpp; compiler-rt/lib/scudo/standalone/flags.cpp; compiler-rt/lib/scudo/standalone/flags.h; compiler-rt/lib/scudo/standalone/flags_parser.cpp; compiler-rt/lib/scudo/standalone/flags_parser.h; compiler-rt/lib/scudo/standalone/fuchsia.cpp; compiler-rt/lib/scudo/standalone/fuchsia.h; compiler-rt/lib,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:99656,test,tests,99656,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"more efficient and use less memory. RooStats Package; AsymptoticCalculator. New Class for doing an hypothesis tests using the asymptotic likelihood formulae, described in the paper from; G. Cowan, K. Cranmer, E. Gross and O. Vitells, Asymptotic formulae for likelihood- based tests of new physics,; Eur. Phys. J., C71 (1), 2011.; The class computes the p-value for the null and also for the alternate using the Asimov data set. In this; differs form the ProfileLikelihoodCalculator which computes only the p-values for the null hypothesis.; The Asimov data set is generated with the utility function AsymptoticCalculator::MakeAsimovData and then; it is used to evaluate the likelihood. ; ; This class implements the HypoTestCalculatorGeneric interface and can be used as an alternative Hypothesis test; calculator in the HypoTestInverter class. It can then plugged in the HypoTestInverter for computing asymptotic CLs and CLs+b; limits. In this way the limits will be computed by just performing a fit for each test parameter value and without; generating any toys. . The class can be used via the StandardHypothesisTest.C tutorial passing a value of 2 for the; calculator type. . RooStats Utils. Add a utility function (from G. Petrucciani), RooStats::MakeNuisancePdf, which given a model configuration (or the global pdf and the; observables), factorizes from the model pdf the constraint probability density functions for the nuisance parameters; and builds a global nuisance pdf. This function can then be used in the HybridCalculator or in the BayesianCalculator; with the option ""TOYMC"".; . HypotestInverter and HypoTestInverterResult. Several improvements and bug fixes in merging results and in computing the observed and expected limits.; Provide support now for using the AsympoticCalculator. MCMCCalculator. Add now possibility to store in the chain only the parameter of interested via the method MCMCCalculator::SetChainParameters. This saves memory in case of models with a; large number",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v532/index.html:7892,test,test,7892,roofit/doc/v532/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v532/index.html,1,['test'],['test']
Testability,"most basic and fundamental tools are kept in the; primary Clang tree. The rest of the tools are kept in a separate; directory tree, `clang-tools-extra; <https://github.com/llvm/llvm-project/tree/main/clang-tools-extra>`_. This document describes a high-level overview of the organization of; Clang Tools within the project as well as giving an introduction to some; of the more important tools. However, it should be noted that this; document is currently focused on Clang and Clang Tool developers, not on; end users of these tools. Clang Tools Organization; ========================. Clang Tools are CLI or GUI programs that are intended to be directly; used by C++ developers. That is they are *not* primarily for use by; Clang developers, although they are hopefully useful to C++ developers; who happen to work on Clang, and we try to actively dogfood their; functionality. They are developed in three components: the underlying; infrastructure for building a standalone tool based on Clang, core; shared logic used by many different tools in the form of refactoring and; rewriting libraries, and the tools themselves. The underlying infrastructure for Clang Tools is the; :doc:`LibTooling <LibTooling>` platform. See its documentation for much; more detailed information about how this infrastructure works. The; common refactoring and rewriting toolkit-style library is also part of; LibTooling organizationally. A few Clang Tools are developed along side the core Clang libraries as; examples and test cases of fundamental functionality. However, most of; the tools are developed in a side repository to provide easy separation; from the core libraries. We intentionally do not support public; libraries in the side repository, as we want to carefully review and; find good APIs for libraries as they are lifted out of a few tools and; into the core Clang library set. Regardless of which repository Clang Tools' code resides in, the; development process and practices for all Clang Tools are ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangTools.rst:1351,log,logic,1351,interpreter/llvm-project/clang/docs/ClangTools.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangTools.rst,1,['log'],['logic']
Testability,mp/runtime/src/kmp_wait_release.h; openmp/runtime/src/kmp_wrapper_getpid.h; openmp/runtime/src/kmp_wrapper_malloc.h; openmp/runtime/src/ompd-specific.cpp; openmp/runtime/src/ompd-specific.h; openmp/runtime/src/ompt-event-specific.h; openmp/runtime/src/ompt-general.cpp; openmp/runtime/src/ompt-internal.h; openmp/runtime/src/ompt-specific.cpp; openmp/runtime/src/ompt-specific.h; openmp/runtime/src/z_Linux_util.cpp; openmp/runtime/src/z_Windows_NT-586_util.cpp; openmp/runtime/src/z_Windows_NT_util.cpp; openmp/runtime/src/thirdparty/ittnotify/ittnotify.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_config.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp; openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_types.h; openmp/runtime/src/thirdparty/ittnotify/legacy/ittnotify.h; openmp/tools/archer/ompt-tsan.cpp; openmp/tools/archer/tests/ompt/ompt-signal.h; openmp/tools/multiplex/ompt-multiplex.h; openmp/tools/multiplex/tests/ompt-signal.h; openmp/tools/multiplex/tests/custom_data_storage/second-tool.h; openmp/tools/multiplex/tests/print/first-tool.h; openmp/tools/multiplex/tests/print/second-tool.h; polly/include/polly/Canonicalization.h; polly/include/polly/CodePreparation.h; polly/include/polly/DeadCodeElimination.h; polly/include/polly/DeLICM.h; polly/include/polly/DependenceInfo.h; polly/include/polly/FlattenAlgo.h; polly/include/polly/FlattenSchedule.h; polly/include/polly/ForwardOpTree.h; polly/include/polly/JSONExporter.h; polly/include/polly/LinkAllPasses.h; polly/include/polly/ManualOptimizer.h; polly/include/polly/MatmulOptimizer.h; polly/include/polly/Options.h; polly/include/polly/PolyhedralInfo.h; polly/include/polly/PruneUnprofitable.h; polly/include/polly/RegisterPasses.h; polly/include/polly/ScheduleOptimizer.h; polly/include/polly/ScheduleTreeTransform.h; polly/include/polly/ScopBuilder.h; polly/include/polly/ScopDetection.h; polly/include/polly/ScopDetectionDiagnostic.h; polly/i,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:411408,test,tests,411408,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"mp/test.cpp:11:0. foz; /tmp/./test.h:1:0. Example 3 - object specified with address:. .. code-block:: console. $ llvm-symbolizer ""test.elf 0x400490"" ""FILE:inlined.elf 0x400480""; baz(); /tmp/test.cpp:11:0. foo(); /tmp/test.cpp:8:10. $ cat addr2.txt; FILE:test.elf 0x4004a0; inlined.elf 0x400480. $ llvm-symbolizer < addr2.txt; main; /tmp/test.cpp:15:0. foo(); /tmp/test.cpp:8:10. Example 4 - BUILDID and FILE prefixes:. .. code-block:: console. $ llvm-symbolizer ""FILE:test.elf 0x400490"" ""DATA BUILDID:123456789abcdef 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr3.txt; FILE:test.elf 0x400490; DATA BUILDID:123456789abcdef 0x601028. $ llvm-symbolizer < addr3.txt; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. Example 5 - CODE and DATA prefixes:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf ""CODE 0x400490"" ""DATA 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr4.txt; CODE test.elf 0x4004a0; DATA inlined.elf 0x601028. $ llvm-symbolizer < addr4.txt; main; /tmp/test.cpp:15:0. bar; 6295592 4. Example 6 - path-style options:. This example uses the same source file as above, but the source file's; full path is /tmp/foo/test.cpp and is compiled as follows. The first case; shows the default absolute path, the second --basenames, and the third; shows --relativenames. .. code-block:: console. $ pwd; /tmp; $ clang -g foo/test.cpp -o test.elf; $ llvm-symbolizer --obj=test.elf 0x4004a0; main; /tmp/foo/test.cpp:15:0; $ llvm-symbolizer --obj=test.elf 0x4004a0 --basenames; main; test.cpp:15:0; $ llvm-symbolizer --obj=test.elf 0x4004a0 --relativenames; main; foo/test.cpp:15:0. Example 7 - Addresses as symbol names:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf main; main; /tmp/test.cpp:14:0; $ llvm-symbolizer --obj=test.elf ""CODE foz""; foz; /tmp/test.h:1:0. OPTIONS; -------. .. option:: --adjust-vma <offset>. Add the specified offset to object file addresses when performing lookups.; This can be used to perform lookups as if the object we",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:3955,test,test,3955,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"mpares individual logical elements without considering if their; parents are the same. For both comparison methods, the equal criteria; includes the name, source code location, type, lexical scope level. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level; --compare=types; --report=list; --print=symbols,types,summary; test-dwarf-clang.o test-dwarf-gcc.o. Reference: 'test-dwarf-clang.o'; Target: 'test-dwarf-gcc.o'. (1) Missing Types:; -[003] 4 {TypeAlias} 'INTEGER' -> 'int'. (1) Added Types:; +[004] 4 {TypeAlias} 'INTEGER' -> 'int'. ----------------------------------------; Element Expected Missing Added; ----------------------------------------; Scopes 4 0 0; Symbols 0 0 0; Types 2 1 1; Lines 0 0 0; ----------------------------------------; Total 6 1 1. Changing the *Reference* and *Target* order:. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level; --compare=types; --report=list; --print=symbols,types,summary; test-dwarf-gcc.o test-dwarf-clang.o. Reference: 'test-dwarf-gcc.o'; Target: 'test-dwarf-clang.o'. (1) Missing Types:; -[004] 4 {TypeAlias} 'INTEGER' -> 'int'. (1) Added Types:; +[003] 4 {TypeAlias} 'INTEGER' -> 'int'. ----------------------------------------; Element Expected Missing Added; ----------------------------------------; Scopes 4 0 0; Symbols 0 0 0; Types 2 1 1; Lines 0 0 0; ----------------------------------------; Total 6 1 1. As the *Reference* and *Target* are switched, the *Added Types* from; the first case now are listed as *Missing Types*. TEST CASE 2 - ASSEMBLER INSTRUCTIONS; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; The below example is used to show different output generated by; :program:`llvm-debuginfo-analyzer`. We compiled the example for an X86; Codeview and ELF targets with recent versions of Clang, GCC and MSVC; (-O0 -g) for Windows and Linux. .. code-block:: c++. 1 extern int printf(const char * format, ... );; 2; 3 int main(); 4 {; 5 printf(""Hello, World\n"");; 6 return 0;; 7 }. These are the logical views that",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:32079,test,test-dwarf-gcc,32079,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['test'],['test-dwarf-gcc']
Testability,"mpatible Class. A, 16, A; B, 16, A; , , B; C, 16, C; D, 16, A; , , D; , 48, C. The next step is to encode this compatibility information into the IR. The way; this is done is to create type metadata named after each of the compatible; classes, with which we associate each of the compatible address points in; each vtable. For example, these type metadata entries encode the compatibility; information for the above hierarchy:. ::. @_ZTV1A = constant [...], !type !0; @_ZTV1B = constant [...], !type !0, !type !1; @_ZTV1C = constant [...], !type !2; @_ZTV1D = constant [...], !type !0, !type !3, !type !4. !0 = !{i64 16, !""_ZTS1A""}; !1 = !{i64 16, !""_ZTS1B""}; !2 = !{i64 16, !""_ZTS1C""}; !3 = !{i64 16, !""_ZTS1D""}; !4 = !{i64 48, !""_ZTS1C""}. With this type metadata, we can now use the ``llvm.type.test`` intrinsic to; test whether a given pointer is compatible with a type identifier. Working; backwards, if ``llvm.type.test`` returns true for a particular pointer,; we can also statically determine the identities of the virtual functions; that a particular virtual call may call. For example, if a program assumes; a pointer to be a member of ``!""_ZST1A""``, we know that the address can; be only be one of ``_ZTV1A+16``, ``_ZTV1B+16`` or ``_ZTV1D+16`` (i.e. the; address points of the vtables of A, B and D respectively). If we then load; an address from that pointer, we know that the address can only be one of; ``&A::f``, ``&B::f`` or ``&D::f``. .. _address point: https://itanium-cxx-abi.github.io/cxx-abi/abi.html#vtable-general. Testing Addresses For Type Membership; =====================================. If a program tests an address using ``llvm.type.test``, this will cause; a link-time optimization pass, ``LowerTypeTests``, to replace calls to this; intrinsic with efficient code to perform type member tests. At a high level,; the pass will lay out referenced globals in a consecutive memory region in; the object file, construct bit vectors that map onto that memory region,; and gene",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TypeMetadata.rst:4293,test,test,4293,interpreter/llvm-project/llvm/docs/TypeMetadata.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TypeMetadata.rst,1,['test'],['test']
Testability,"mpilation fails). Unified Parsing & Pipelining; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Parsing and pipelining both occur without reference to a Compilation; instance. This is by design; the driver expects that both of these; phases are platform neutral, with a few very well defined exceptions; such as whether the platform uses a driver driver. ToolChain Argument Translation; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. In order to match gcc very closely, the clang driver currently allows; tool chains to perform their own translation of the argument list (into; a new ArgList data structure). Although this allows the clang driver to; match gcc easily, it also makes the driver operation much harder to; understand (since the Tools stop seeing some arguments the user; provided, and see new ones instead). For example, on Darwin ``-gfull`` gets translated into two separate; arguments, ``-g`` and ``-fno-eliminate-unused-debug-symbols``. Trying to; write Tool logic to do something with ``-gfull`` will not work, because; Tool argument translation is done after the arguments have been; translated. A long term goal is to remove this tool chain specific translation, and; instead force each tool to change its own logic to do the right thing on; the untranslated original arguments. Unused Argument Warnings; ^^^^^^^^^^^^^^^^^^^^^^^^. The driver operates by parsing all arguments but giving Tools the; opportunity to choose which arguments to pass on. One downside of this; infrastructure is that if the user misspells some option, or is confused; about which options to use, some command line arguments the user really; cared about may go unused. This problem is particularly important when; using clang as a compiler, since the clang compiler does not support; anywhere near all the options that gcc does, and we want to make sure; users know which ones are being used. To support this, the driver maintains a bit associated with each; argument of whether it has been used (at all) during the compilation.; This bit ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/DriverInternals.rst:13587,log,logic,13587,interpreter/llvm-project/clang/docs/DriverInternals.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/DriverInternals.rst,1,['log'],['logic']
Testability,mpiler-rt/lib/xray/xray_flags.cpp; compiler-rt/lib/xray/xray_flags.h; compiler-rt/lib/xray/xray_interface_internal.h; compiler-rt/lib/xray/xray_log_interface.cpp; compiler-rt/lib/xray/xray_mips.cpp; compiler-rt/lib/xray/xray_mips64.cpp; compiler-rt/lib/xray/xray_powerpc64.cpp; compiler-rt/lib/xray/xray_profile_collector.cpp; compiler-rt/lib/xray/xray_profile_collector.h; compiler-rt/lib/xray/xray_profiling.cpp; compiler-rt/lib/xray/xray_profiling_flags.cpp; compiler-rt/lib/xray/xray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/de,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:106967,test,tests,106967,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,mpiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Common/default-kinds.h; flang/include/flang/Common/enum-set.h; flang/include/flang/Common/fast-int-set.h; flang/include/flang/Common/format.h; flang/include/flang/Common/Fortran-features.h; flang/include/flang/Common/Fortran.h; flang/include/flang/Common/idioms.h; flang/include/flang/Common/indirection.h; flang/include/flang/Common/interval.h; flang/include/flang/Common/leading-zero-bit-count.h; flang/include/flang/Common/long-double.h; flang/include/flang/Common/real.h; flang/include/flang/Common/reference-counted.h; flang/,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:108087,test,tests,108087,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,2,['test'],['tests']
Testability,"mple of such test. ``test-suite``; --------------. The test suite contains whole programs, which are pieces of code which; can be compiled and linked into a stand-alone program that can be; executed. These programs are generally written in high level languages; such as C or C++. These programs are compiled using a user specified compiler and set of; flags, and then executed to capture the program output and timing; information. The output of these programs is compared to a reference; output to ensure that the program is being compiled correctly. In addition to compiling and executing programs, whole program tests; serve as a way of benchmarking LLVM performance, both in terms of the; efficiency of the programs generated as well as the speed with which; LLVM compiles, optimizes, and generates code. The test-suite is located in the ``test-suite``; `repository on GitHub <https://github.com/llvm/llvm-test-suite.git>`_. See the :doc:`TestSuiteGuide` for details. Debugging Information tests; ---------------------------. The test suite contains tests to check quality of debugging information.; The test are written in C based languages or in LLVM assembly language. These tests are compiled and run under a debugger. The debugger output; is checked to validate of debugging information. See README.txt in the; test suite for more information. This test suite is located in the; ``cross-project-tests/debuginfo-tests`` directory. Quick start; ===========. The tests are located in two separate repositories. The unit and; regression tests are in the main ""llvm""/ directory under the directories; ``llvm/unittests`` and ``llvm/test`` (so you get these tests for free with the; main LLVM tree). Use ``make check-all`` to run the unit and regression tests; after building LLVM. The ``test-suite`` module contains more comprehensive tests including whole C; and C++ programs. See the :doc:`TestSuiteGuide` for details. Unit and Regression tests; -------------------------. To run all of the LLVM",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:4084,test,tests,4084,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['tests']
Testability,"mplementation with the special and statistical functions defined in ROOT::Math. The functions which have been changed and thus they can return a sightly different result than before are:; ; TMath::Erf and TMath::Erfc call ROOT::Math::erf and ROOT::math::erfc which are implemented using the Cephes algorithms, which is accurate at the required double precision level.; TMath::Gamma(z) is implemented with ROOT::Math::tgamma, which again uses Cephes.; The incomplete gamma function, TMath::Gamma(a,x) it is implemented using ROOT::Math::inc_gamma based on a corresponding Cephes function.; TMath::Prob (the upper chi2 probability) is implemented also using ROOT::Math::chisquared_cdf_c which uses ROOT::Math::inc_gamma_c based on a corresponding Cephes function. Now the implementation does not suffer anymore from large numerical error present when the result of TMath::Prob was approaching zero.; TMath::LnGamma(z) is implemented using ROOT::Math::lgamma. This affects also TMath::Beta which is implemented using the log of the gamma function.; TMath::BetaIncomplete is implemented using ROOT::Math::beta_inc.; TMath::GammaDist is implemented using ROOT::Math::gamma_pdf.; TMath::LogNormal is implemented using ROOT::Math::lognormal_pdf.; TMath::PoissonI: fixed a problem for large values and is implemented using directly TMath::Poisson with integer values. Fit; Mathcore include now new classes for performing fits and minimization of multi-dimensional functions. The aim of these classes is to extend and improve the fitting functionality provided in ROOT via the TVirtualFitter classes and the fitting methods present in many data analysis object, such as TH1::Fit.; ; The fit data are decoupled from the fitter class and described by the dedicated fit data classes like the ROOT::Fit::BinData for bin data containing coordinate values of any dimensions, bin content values and optionally errors in coordinate and bin content, and ROOT::Fit::UnBinData classes for any dimension un-bin data.; The",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html:3643,log,log,3643,math/doc/v520/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v520/index.html,1,['log'],['log']
Testability,"mportant usage notes:. * ""``COM:``"" within another directive's pattern does *not* comment out the; remainder of the pattern. For example:. .. code-block:: llvm. ; X32: pinsrd $1, 4(%esp), %xmm0 COM: This is part of the X32 pattern!. If you need to temporarily comment out part of a directive's pattern, move it; to another line. The reason is that FileCheck parses ""``COM:``"" in the same; manner as any other directive: only the first directive on the line is; recognized as a directive. * For the sake of LIT, FileCheck treats ""``RUN:``"" just like ""``COM:``"". If this; is not suitable for your test environment, see :option:`--comment-prefixes`. * FileCheck does not recognize ""``COM``"", ""``RUN``"", or any user-defined comment; prefix as a comment directive if it's combined with one of the usual check; directive suffixes, such as ""``-NEXT:``"" or ""``-NOT:``"", discussed below.; FileCheck treats such a combination as plain text instead. If it needs to act; as a comment directive for your test environment, define it as such with; :option:`--comment-prefixes`. The ""CHECK-NEXT:"" directive; ~~~~~~~~~~~~~~~~~~~~~~~~~~~. Sometimes you want to match lines and would like to verify that matches; happen on exactly consecutive lines with no other lines in between them. In; this case, you can use ""``CHECK:``"" and ""``CHECK-NEXT:``"" directives to specify; this. If you specified a custom check prefix, just use ""``<PREFIX>-NEXT:``"".; For example, something like this works as you'd expect:. .. code-block:: llvm. define void @t2(<2 x double>* %r, <2 x double>* %A, double %B) {; 	%tmp3 = load <2 x double>* %A, align 16; 	%tmp7 = insertelement <2 x double> undef, double %B, i32 0; 	%tmp9 = shufflevector <2 x double> %tmp3,; <2 x double> %tmp7,; <2 x i32> < i32 0, i32 2 >; 	store <2 x double> %tmp9, <2 x double>* %r, align 16; 	ret void. ; CHECK: t2:; ; CHECK: 	 movl	8(%esp), %eax; ; CHECK-NEXT: 	movapd	(%eax), %xmm0; ; CHECK-NEXT: 	movhpd	12(%esp), %xmm0; ; CHECK-NEXT: 	movl	4(%esp), %eax; ; CHECK",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst:12876,test,test,12876,interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,1,['test'],['test']
Testability,"mprovements from the previous release and new feature work. Note that if you are reading this file from a git checkout or the main Cling; web page, this document applies to the *next* release, not the current one. What's New in Cling 1.2?; ========================. Some of the major new features and improvements to Cling are listed; here. Generic improvements to Cling as a whole or to its underlying; infrastructure are described first. External Dependencies; ---------------------; * Upgrade to LLVM r0000000. Major New Features; ------------------; * A major new feature. Misc; ----; * A misc feature. Experimental Features; ---------------------; * An experimental feature. Jupyter; -------; * A Jupyter feature. Fixed Bugs; ----------; [ROOT-XXXX](https://sft.its.cern.ch/jira/browse/ROOT-XXXX). <!---Get release bugs; git log v1.1..master | grep -i ""fix"" | grep '#' | sed -E 's,.*\#([0-9]*).*,\[\1\]\(https://github.com/root-project/cling/issues/\1\),g' | sort; --->; <!---Standard MarkDown doesn't support neither variables nor <base>; [ROOT-XXX](https://sft.its.cern.ch/jira/browse/ROOT-XXX); --->. <!---Additional Information; ----------------------; A wide variety of additional information is available on the; [Cling web page](http://root.cern/cling). The web page contains versions of; the API documentation which are up-to-date with the git version of the source; code. You can access versions of these documents specific to this release by; going into the “clang/docs/” directory in the Cling source tree. If you have any questions or comments about Cling, please feel free to contact; us via the mailing list.--->. Special Kudos; =============; This release wouldn't have happened without the efforts of our contributors,; listed in the form of Firstname Lastname (#contributions):. FirstName LastName (#commits). <!---Find contributor list for this release; git log --pretty=format:""%an"" v1.1...master | sort | uniq -c | sort -rn |\; sed -E 's,^ *([0-9]+) (.*)$,\2 \(\1\),'; --->; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/ReleaseNotes.md:2190,log,log,2190,interpreter/cling/docs/ReleaseNotes.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/ReleaseNotes.md,1,['log'],['log']
Testability,"mpt or; (preferably) humor. It be a curious world and it always beed."". > Basically, my argument for this type construction system is that it is; > VERY simple to use and understand (although it IS different than C, it is; > very simple and straightforward, which C is NOT). In fact, I would assert; > that most programmers TODAY do not understand pointers to member; > functions, and have to look up an example when they have to write them. Again, I don't disagree with this at all. But to some extent this; particular problem is inherently difficult. Your syntax for the above; example may be easier for you to read because this is the way you have been; thinking about it. Honestly, I don't find it much easier than the C syntax.; In either case, I would have to look up an example to write pointers to; member functions. But pointers to member functions are nowhere near as common as arrays. And; the old array syntax:; type [ int, int, ...]; is just much more familiar and clear to people than anything new you; introduce, no matter how logical it is. Introducing a new syntax that may; make function pointers easier but makes arrays much more difficult seems; very risky to me. > In my opinion, it is critically important to have clear and concise type; > specifications, because types are going to be all over the programs. I absolutely agree. But the question is, what is more clear and concise?; The syntax programmers are used to out of years of experience or a new; syntax that they have never seen that has a more logical structure. I think; the answer is the former. Sometimes, you have to give up a better idea; because you can't overcome sociological barriers to it. Qwerty keyboards; and Windows are two classic examples of bad technology that are difficult to; root out. P.S. Also, while I agree that most your syntax is more logical, there is; one part that isn't:. Arrays (without and with size):; type ::= '[' type ']' | '[' INT ',' type ']'. The arrays with size lists the dimens",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HistoricalNotes/2001-02-06-TypeNotationDebateResp1.txt:1865,log,logical,1865,interpreter/llvm-project/llvm/docs/HistoricalNotes/2001-02-06-TypeNotationDebateResp1.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HistoricalNotes/2001-02-06-TypeNotationDebateResp1.txt,1,['log'],['logical']
Testability,"mptions, you never know when a bug (not necessarily even yours) might be; caught early by an assertion, which reduces debugging time dramatically. The; ""``<cassert>``"" header file is probably already included by the header files you; are using, so it doesn't cost anything to use it. To further assist with debugging, make sure to put some kind of error message in; the assertion statement, which is printed if the assertion is tripped. This; helps the poor debugger make sense of why an assertion is being made and; enforced, and hopefully what to do about it. Here is one complete example:. .. code-block:: c++. inline Value *getOperand(unsigned I) {; assert(I < Operands.size() && ""getOperand() out of range!"");; return Operands[I];; }. Here are more examples:. .. code-block:: c++. assert(Ty->isPointerType() && ""Can't allocate a non-pointer type!"");. assert((Opcode == Shl || Opcode == Shr) && ""ShiftInst Opcode invalid!"");. assert(idx < getNumSuccessors() && ""Successor # out of range!"");. assert(V1.getType() == V2.getType() && ""Constant types must be identical!"");. assert(isa<PHINode>(Succ->front()) && ""Only works on PHId BBs!"");. You get the idea. In the past, asserts were used to indicate a piece of code that should not be; reached. These were typically of the form:. .. code-block:: c++. assert(0 && ""Invalid radix for integer literal"");. This has a few issues, the main one being that some compilers might not; understand the assertion, or warn about a missing return in builds where; assertions are compiled out. Today, we have something much better: ``llvm_unreachable``:. .. code-block:: c++. llvm_unreachable(""Invalid radix for integer literal"");. When assertions are enabled, this will print the message if it's ever reached; and then exit the program. When assertions are disabled (i.e. in release; builds), ``llvm_unreachable`` becomes a hint to compilers to skip generating; code for this branch. If the compiler does not support this, it will fall back; to the ""abort"" impleme",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst:46056,assert,assert,46056,interpreter/llvm-project/llvm/docs/CodingStandards.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst,1,['assert'],['assert']
Testability,"ms. |; +-------------------+--------------------------------------------------------+; | `hsimple.cxx` | Simple test program that creates and saves some |; | | histograms |; +-------------------+--------------------------------------------------------+; | `MainEvent.cxx` | Simple test program that creates a ROOT Tree object |; | | and fills it with some simple structures but also with |; | | complete histograms. This program uses the files |; | | `Event.cxx`, `EventCint.cxx` and `Event.h`. An example |; | | of a procedure to link this program is in |; | | `bind_Event`. Note that the `Makefile` invokes the |; | | `rootcling` utility to generate the Cling interface |; | | `EventCint.cxx` |; +-------------------+--------------------------------------------------------+; | `Event.cxx` | Implementation for classes Event and Track |; +-------------------+--------------------------------------------------------+; | `minexam.cxx` | Simple test program for data fitting |; +-------------------+--------------------------------------------------------+; | `tcollex.cxx` | Example usage of the ROOT collection classes |; +-------------------+--------------------------------------------------------+; | `tcollbm.cxx` | Benchmarks of ROOT collection classes |; +-------------------+--------------------------------------------------------+; | ctorture.cxx | Test program for the class **`TComplex`** |; +-------------------+--------------------------------------------------------+; | `tstring.cxx` | Example usage of the ROOT string class |; +-------------------+--------------------------------------------------------+; | `vmatrix.cxx` | Verification program for the **`TMatrix`** class |; +-------------------+--------------------------------------------------------+; | `vvector.cxx` | Verification program for the **`TVector `**class |; +-------------------+--------------------------------------------------------+; | `vlazy.cxx` | Verification program for lazy matrices |; +----------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/TutorialsandTests.md:2823,test,test,2823,documentation/users-guide/TutorialsandTests.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/TutorialsandTests.md,1,['test'],['test']
Testability,"must be followed by a ``DBG_VALUE`` use of that def. If; an instruction does not define a register, but can be followed by a debug inst,; MIRDebugify inserts a ``DBG_VALUE`` that references a constant. Insertion of; ``DBG_VALUE``'s can be disabled by setting ``-debugify-level=locations``. To run MIRDebugify once, simply insert ``mir-debugify`` into your ``llc``; invocation, like:. .. code-block:: bash. # Before some other pass.; $ llc -run-pass=mir-debugify,other-pass ... # After some other pass.; $ llc -run-pass=other-pass,mir-debugify ... To run MIRDebugify before each pass in a pipeline, use; ``-debugify-and-strip-all-safe``. This can be combined with ``-start-before``; and ``-start-after``. For example:. .. code-block:: bash. $ llc -debugify-and-strip-all-safe -run-pass=... <other llc args>; $ llc -debugify-and-strip-all-safe -O1 <other llc args>. If you want to check it after each pass in a pipeline, use; ``-debugify-check-and-strip-all-safe``. This can also be combined with; ``-start-before`` and ``-start-after``. For example:. .. code-block:: bash. $ llc -debugify-check-and-strip-all-safe -run-pass=... <other llc args>; $ llc -debugify-check-and-strip-all-safe -O1 <other llc args>. To check all debug info from a test, use ``mir-check-debugify``, like:. .. code-block:: bash. $ llc -run-pass=mir-debugify,other-pass,mir-check-debugify. To strip out all debug info from a test, use ``mir-strip-debug``, like:. .. code-block:: bash. $ llc -run-pass=mir-debugify,other-pass,mir-strip-debug. It can be useful to combine ``mir-debugify``, ``mir-check-debugify`` and/or; ``mir-strip-debug`` to identify backend transformations which break in; the presence of debug info. For example, to run the AArch64 backend tests; with all normal passes ""sandwiched"" in between MIRDebugify and; MIRStripDebugify mutation passes, run:. .. code-block:: bash. $ llvm-lit test/CodeGen/AArch64 -Dllc=""llc -debugify-and-strip-all-safe"". Using LostDebugLocObserver; --------------------------. TODO; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst:18649,test,test,18649,interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,4,['test'],"['test', 'tests']"
Testability,"n = load i32, ptr %n.addr, align 4. br i1 %switch, label %loop.resume, label %loop. loop.resume:; %sub = sub nsw i32 0, %n; call void @print(i32 %sub); br label %suspend; loop:; %inc = add nsw i32 %n, 1; store i32 %inc, ptr %n.addr, align 4; tail call void @print(i32 %inc); br label %suspend. suspend:; %storemerge = phi i8 [ 0, %loop ], [ 1, %loop.resume ]; store i8 %storemerge, ptr %index.addr, align 1; ret void; }. If different cleanup code needs to get executed for different suspend points,; a similar switch will be in the `f.destroy` function. .. note ::. Using suspend index in a coroutine state and having a switch in `f.resume` and; `f.destroy` is one of the possible implementation strategies. We explored; another option where a distinct `f.resume1`, `f.resume2`, etc. are created for; every suspend point, and instead of storing an index, the resume and destroy; function pointers are updated at every suspend. Early testing showed that the; current approach is easier on the optimizer than the latter so it is a; lowering strategy implemented at the moment. Distinct Save and Suspend; -------------------------. In the previous example, setting a resume index (or some other state change that; needs to happen to prepare a coroutine for resumption) happens at the same time as; a suspension of a coroutine. However, in certain cases, it is necessary to control; when coroutine is prepared for resumption and when it is suspended. In the following example, a coroutine represents some activity that is driven; by completions of asynchronous operations `async_op1` and `async_op2` which get; a coroutine handle as a parameter and resume the coroutine once async; operation is finished. .. code-block:: text. void g() {; for (;;); if (cond()) {; async_op1(<coroutine-handle>); // will resume once async_op1 completes; <suspend>; do_one();; }; else {; async_op2(<coroutine-handle>); // will resume once async_op2 completes; <suspend>; do_two();; }; }; }. In this case, coroutine should b",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Coroutines.rst:20347,test,testing,20347,interpreter/llvm-project/llvm/docs/Coroutines.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Coroutines.rst,1,['test'],['testing']
Testability,"n DiagnosticSemaKinds.td is the one that is; printed by Clang. \*.td files define tables - in this case it's a list; of warnings and errors clang can emit and their messages. Let's update; the message in your favorite editor:. .. code:: console. $ vi ../clang/include/clang/Basic/DiagnosticSemaKinds.td. Find the message (it should be under; ``warn_infinite_recursive_function``). Change the message to ""in order to; understand recursion, you must first understand recursion"". Test again; ----------. To verify our change, we can build clang and manually check that it; works. .. code:: console. $ ninja clang; $ bin/clang -Wall ~/test.cc; /path/test.cc:1:124: warning: in order to understand recursion, you must; first understand recursion [-Winfinite-recursion]. We should also run the tests to make sure we didn't break something. .. code:: console. $ ninja check-clang. Notice that it is much faster to build this time, but the tests take; just as long to run. Ninja doesn't know which tests might be affected,; so it runs them all. .. code:: console. ********************; Testing Time: 408.84s; ********************; Failing Tests (1):; Clang :: SemaCXX/warn-infinite-recursion.cpp. Well, that makes sense… and the test output suggests it's looking for; the old string ""call itself"" and finding our new message instead.; Note that more tests may fail in a similar way as new tests are; added time to time. Let's fix it by updating the expectation in the test. .. code:: console. $ vi ../clang/test/SemaCXX/warn-infinite-recursion.cpp. Everywhere we see `// expected-warning{{call itself}}` (or something similar; from the original warning text), let's replace it with; `// expected-warning{{to understand recursion}}`. Now we could run **all** the tests again, but this is a slow way to; iterate on a change! Instead, let's find a way to re-run just the; specific test. There are two main types of tests in LLVM:. - **lit tests** (e.g. SemaCXX/warn-infinite-recursion.cpp). These are fancy shel",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst:6583,test,tests,6583,interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,1,['test'],['tests']
Testability,"n JSON. If addresses are; supplied via stdin, the output JSON will be a series of individual objects.; Otherwise, all results will be contained in a single array. .. code-block:: console. $ llvm-symbolizer --obj=inlined.elf 0x4004be 0x400486 -p; baz() at /tmp/test.cpp:11:18; (inlined by) main at /tmp/test.cpp:15:0. foo() at /tmp/test.cpp:6:3. $ llvm-symbolizer --output-style=LLVM --obj=inlined.elf 0x4004be 0x400486 -p --no-inlines; main at /tmp/test.cpp:11:18. foo() at /tmp/test.cpp:6:3. $ llvm-symbolizer --output-style=GNU --obj=inlined.elf 0x4004be 0x400486 -p --no-inlines; baz() at /tmp/test.cpp:11; foo() at /tmp/test.cpp:6. $ clang -g -fdebug-info-for-profiling test.cpp -o profiling.elf; $ llvm-symbolizer --output-style=GNU --obj=profiling.elf 0x401167 -p --no-inlines; main at /tmp/test.cpp:15 (discriminator 2). $ llvm-symbolizer --output-style=JSON --obj=inlined.elf 0x4004be 0x400486 -p; [; {; ""Address"": ""0x4004be"",; ""ModuleName"": ""inlined.elf"",; ""Symbol"": [; {; ""Column"": 18,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""baz()"",; ""Line"": 11,; ""StartAddress"": ""0x4004be"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 9; },; {; ""Column"": 0,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""main"",; ""Line"": 15,; ""StartAddress"": ""0x4004be"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 14; }; ]; },; {; ""Address"": ""0x400486"",; ""ModuleName"": ""inlined.elf"",; ""Symbol"": [; {; ""Column"": 3,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""foo()"",; ""Line"": 6,; ""StartAddress"": ""0x400486"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 5; }; ]; }; ]. .. option:: --pretty-print, -p. Print human readable output. If :option:`--inlining` is specified, the; enclosing scope is prefixed by (inlined by).; For JSON output, the option will cause JSON to be indented and split over; new lines. Otherwise, the JSON output will be printed in a compact form. .. code-block:: console. $ llvm-symbolizer --obj=inlined.elf 0x400",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:10045,test,test,10045,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"n ObjC pointer type, not 'char *'; }. .. _osx-coreFoundation-CFError:. osx.coreFoundation.CFError (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check usage of CFErrorRef* parameters. .. code-block:: c. void test(CFErrorRef *error) {; // warn: function accepting CFErrorRef* should have a; // non-void return; }. int foo(CFErrorRef *error) {; *error = 0; // warn: potential null dereference; return 0;; }. .. _osx-coreFoundation-CFNumber:. osx.coreFoundation.CFNumber (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for proper uses of CFNumber APIs. .. code-block:: c. CFNumberRef test(unsigned char x) {; return CFNumberCreate(0, kCFNumberSInt16Type, &x);; // warn: 8 bit integer is used to initialize a 16 bit integer; }. .. _osx-coreFoundation-CFRetainRelease:. osx.coreFoundation.CFRetainRelease (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for null arguments to CFRetain/CFRelease/CFMakeCollectable. .. code-block:: c. void test(CFTypeRef p) {; if (!p); CFRetain(p); // warn; }. void test(int x, CFTypeRef p) {; if (p); return;. CFRelease(p); // warn; }. .. _osx-coreFoundation-containers-OutOfBounds:. osx.coreFoundation.containers.OutOfBounds (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Checks for index out-of-bounds when using 'CFArray' API. .. code-block:: c. void test() {; CFArrayRef A = CFArrayCreate(0, 0, 0, &kCFTypeArrayCallBacks);; CFArrayGetValueAtIndex(A, 0); // warn; }. .. _osx-coreFoundation-containers-PointerSizedValues:. osx.coreFoundation.containers.PointerSizedValues (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warns if 'CFArray', 'CFDictionary', 'CFSet' are created with non-pointer-size values. .. code-block:: c. void test() {; int x[] = { 1 };; CFArrayRef A = CFArrayCreate(0, (const void """""""""""""""""""""""""""""""""""""""""""""""")x, 1,; &kCFTypeArrayCallBacks); // warn; }. Fuchsia; ^^^^^^^. Fuchsia is an open source capability-based operating system currently being; developed by Google. This section describes checkers that can find various; misuses of Fuchsia APIs.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:42945,test,test,42945,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"n address. * Does not replace the name of an inlined function with the name of the; topmost caller when inlined frames are not shown. * Prints an address's debug-data discriminator when it is non-zero. One way to; produce discriminators is to compile with clang's -fdebug-info-for-profiling. ``JSON`` style provides a machine readable output in JSON. If addresses are; supplied via stdin, the output JSON will be a series of individual objects.; Otherwise, all results will be contained in a single array. .. code-block:: console. $ llvm-symbolizer --obj=inlined.elf 0x4004be 0x400486 -p; baz() at /tmp/test.cpp:11:18; (inlined by) main at /tmp/test.cpp:15:0. foo() at /tmp/test.cpp:6:3. $ llvm-symbolizer --output-style=LLVM --obj=inlined.elf 0x4004be 0x400486 -p --no-inlines; main at /tmp/test.cpp:11:18. foo() at /tmp/test.cpp:6:3. $ llvm-symbolizer --output-style=GNU --obj=inlined.elf 0x4004be 0x400486 -p --no-inlines; baz() at /tmp/test.cpp:11; foo() at /tmp/test.cpp:6. $ clang -g -fdebug-info-for-profiling test.cpp -o profiling.elf; $ llvm-symbolizer --output-style=GNU --obj=profiling.elf 0x401167 -p --no-inlines; main at /tmp/test.cpp:15 (discriminator 2). $ llvm-symbolizer --output-style=JSON --obj=inlined.elf 0x4004be 0x400486 -p; [; {; ""Address"": ""0x4004be"",; ""ModuleName"": ""inlined.elf"",; ""Symbol"": [; {; ""Column"": 18,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""baz()"",; ""Line"": 11,; ""StartAddress"": ""0x4004be"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 9; },; {; ""Column"": 0,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""main"",; ""Line"": 15,; ""StartAddress"": ""0x4004be"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 14; }; ]; },; {; ""Address"": ""0x400486"",; ""ModuleName"": ""inlined.elf"",; ""Symbol"": [; {; ""Column"": 3,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""foo()"",; ""Line"": 6,; ""StartAddress"": ""0x400486"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 5; }; ]; }; ]. .. option:: --pretty-",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:9683,test,test,9683,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"n all tools.; static cl::extrahelp CommonHelp(CommonOptionsParser::HelpMessage);. // A help message for this specific tool can be added afterwards.; static cl::extrahelp MoreHelp(""\nMore help text...\n"");. int main(int argc, const char **argv) {; auto ExpectedParser = CommonOptionsParser::create(argc, argv, MyToolCategory);; if (!ExpectedParser) {; // Fail gracefully for unsupported options.; llvm::errs() << ExpectedParser.takeError();; return 1;; }; CommonOptionsParser& OptionsParser = ExpectedParser.get();; ClangTool Tool(OptionsParser.getCompilations(),; OptionsParser.getSourcePathList());; return Tool.run(newFrontendActionFactory<clang::SyntaxOnlyAction>().get());; }. And that's it! You can compile our new tool by running ninja from the; ``build`` directory. .. code-block:: console. cd ~/clang-llvm/build; ninja. You should now be able to run the syntax checker, which is located in; ``~/clang-llvm/build/bin``, on any source file. Try it!. .. code-block:: console. echo ""int main() { return 0; }"" > test.cpp; bin/loop-convert test.cpp --. Note the two dashes after we specify the source file. The additional; options for the compiler are passed after the dashes rather than loading; them from a compilation database - there just aren't any options needed; right now. Intermezzo: Learn AST matcher basics; ====================================. Clang recently introduced the :doc:`ASTMatcher; library <LibASTMatchers>` to provide a simple, powerful, and; concise way to describe specific patterns in the AST. Implemented as a; DSL powered by macros and templates (see; `ASTMatchers.h <../doxygen/ASTMatchers_8h_source.html>`_ if you're; curious), matchers offer the feel of algebraic data types common to; functional programming languages. For example, suppose you wanted to examine only binary operators. There; is a matcher to do exactly that, conveniently named ``binaryOperator``.; I'll give you one guess what this matcher does:. .. code-block:: c++. binaryOperator(hasOperatorName",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTMatchersTutorial.rst:5361,test,test,5361,interpreter/llvm-project/clang/docs/LibASTMatchersTutorial.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTMatchersTutorial.rst,1,['test'],['test']
Testability,"n configuration: ``LexicographicNumeric``); Using declarations are sorted in the order defined as follows:; Split the strings by ""::"" and discard any initial empty strings. The; last element of each list is a non-namespace name; all others are; namespace names. Sort the lists of names lexicographically, where the; sort order of individual names is that all non-namespace names come; before all namespace names, and within those groups, names are in; case-insensitive lexicographic order. .. code-block:: c++. using boost::regex;; using boost::regex_constants::icase;; using std::move;; using std::string;; using std::chrono::duration_cast;. .. _SpaceAfterCStyleCast:. **SpaceAfterCStyleCast** (``Boolean``) :versionbadge:`clang-format 3.5` :ref:`¶ <SpaceAfterCStyleCast>`; If ``true``, a space is inserted after C style casts. .. code-block:: c++. true: false:; (int) i; vs. (int)i;. .. _SpaceAfterLogicalNot:. **SpaceAfterLogicalNot** (``Boolean``) :versionbadge:`clang-format 9` :ref:`¶ <SpaceAfterLogicalNot>`; If ``true``, a space is inserted after the logical not operator (``!``). .. code-block:: c++. true: false:; ! someExpression(); vs. !someExpression();. .. _SpaceAfterTemplateKeyword:. **SpaceAfterTemplateKeyword** (``Boolean``) :versionbadge:`clang-format 4` :ref:`¶ <SpaceAfterTemplateKeyword>`; If ``true``, a space will be inserted after the 'template' keyword. .. code-block:: c++. true: false:; template <int> void foo(); vs. template<int> void foo();. .. _SpaceAroundPointerQualifiers:. **SpaceAroundPointerQualifiers** (``SpaceAroundPointerQualifiersStyle``) :versionbadge:`clang-format 12` :ref:`¶ <SpaceAroundPointerQualifiers>`; Defines in which cases to put a space before or after pointer qualifiers. Possible values:. * ``SAPQ_Default`` (in configuration: ``Default``); Don't ensure spaces around pointer qualifiers and use PointerAlignment; instead. .. code-block:: c++. PointerAlignment: Left PointerAlignment: Right; void* const* x = NULL; vs. void *const *x = NULL;. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst:112652,log,logical,112652,interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,1,['log'],['logical']
Testability,"n functions).; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125782#inline-1293920. In the comparison functions, pass references instead of pointers (when; pointers cannot be null). //===----------------------------------------------------------------------===//; // Use StringMap where possible.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1294211. LLVM has a StringMap class that is advertised as more efficient than; std::map<std::string, ValueType>. Mainly it does fewer allocations; because the key is not a std::string. Replace the use of std::map<std::string, ValueType> with String Map.; One specific case is the LVSymbolNames definitions. //===----------------------------------------------------------------------===//; // Calculate unique offset for CodeView elements.; //===----------------------------------------------------------------------===//; In order to have the same logical functionality as the ELF Reader, such; as:. - find scopes contribution to debug info; - sort by its physical location. The logical elements must have an unique offset (similar like the DWARF; DIE offset). //===----------------------------------------------------------------------===//; // Move 'initializeFileAndStringTables' to the COFF Library.; //===----------------------------------------------------------------------===//; There is some code in the CodeView reader that was extracted/adapted; from 'tools/llvm-readobj/COFFDumper.cpp' that can be moved to the COFF; library. We had a similar case with code shared with llvm-pdbutil that was moved; to the PDB library: https://reviews.llvm.org/D122226. //===----------------------------------------------------------------------===//; // Move 'getSymbolKindName'/'formatRegisterId' to the CodeView Library.; //===----------------------------------------------------------------------===//; There is some cod",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:5098,log,logical,5098,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,1,['log'],['logical']
Testability,"n in a separate process. In; order to debug it, use the -### flag for obtaining; the command line of the child process:. $ clang --analyze test.c -\#\#\#. Below we describe a few useful command line arguments, all of which assume that; you are running clang -cc1. Narrowing Down the Problem; While investigating a checker-related issue, instruct the analyzer to only; execute a single checker:. $ clang -cc1 -analyze -analyzer-checker=osx.KeychainAPI test.c. If you are experiencing a crash, to see which function is failing while; processing a large file use the -analyzer-display-progress; option.; To selectively analyze only the given function, use the; -analyze-function option:. $ clang -cc1 -analyze -analyzer-checker=core test.c -analyzer-display-progress; ANALYZE (Syntax): test.c foo; ANALYZE (Syntax): test.c bar; ANALYZE (Path, Inline_Regular): test.c bar; ANALYZE (Path, Inline_Regular): test.c foo; $ clang -cc1 -analyze -analyzer-checker=core test.c -analyzer-display-progress -analyze-function=foo; ANALYZE (Syntax): test.c foo; ANALYZE (Path, Inline_Regular): test.c foo. Note: a fully qualified function name has to be used when selecting; C++ functions and methods, Objective-C methods and blocks, e.g.:. $ clang -cc1 -analyze -analyzer-checker=core test.cc -analyze-function='foo(int)'. The fully qualified name can be found from the; -analyzer-display-progress output. The bug reporter mechanism removes path diagnostics inside intermediate; function calls that have returned by the time the bug was found and contain; no interesting pieces. Usually it is up to the checkers to produce more; interesting pieces by adding custom BugReporterVisitor objects.; However, you can disable path pruning while debugging with the; -analyzer-config prune-paths=false option. Visualizing the Analysis; To dump the AST, which often helps understanding how the program should; behave:. $ clang -cc1 -ast-dump test.c. To view/dump CFG use debug.ViewCFG or debug.DumpCFG; checkers:. $ clang -cc1 ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html:20216,test,test,20216,interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,1,['test'],['test']
Testability,"n is a typical; example.; - representing invalid node: the invalid node is preserved in the AST in some; form, e.g. when the ""declaration"" part of the declaration contains semantic; errors, the Decl node is marked as invalid.; - dropping invalid node: this often happens for errors that we don’t have; graceful recovery. Prior to Recovery AST, a mismatched-argument function call; expression was dropped though a CallExpr was created for semantic analysis. With these strategies, clang surfaces better diagnostics, and provides AST; consumers a rich AST reflecting the written source code as much as possible even; for broken code. Recovery AST; ^^^^^^^^^^^^. The idea of Recovery AST is to use recovery nodes which act as a placeholder to; maintain the rough structure of the parsing tree, preserve locations and; children but have no language semantics attached to them. For example, consider the following mismatched function call:. .. code-block:: c++. int NoArg();; void test(int abc) {; NoArg(abc); // oops, mismatched function arguments.; }. Without Recovery AST, the invalid function call expression (and its child; expressions) would be dropped in the AST:. ::. |-FunctionDecl <line:1:1, col:11> NoArg 'int ()'; `-FunctionDecl <line:2:1, line:4:1> test 'void (int)'; |-ParmVarDecl <col:11, col:15> col:15 used abc 'int'; `-CompoundStmt <col:20, line:4:1>. With Recovery AST, the AST looks like:. ::. |-FunctionDecl <line:1:1, col:11> NoArg 'int ()'; `-FunctionDecl <line:2:1, line:4:1> test 'void (int)'; |-ParmVarDecl <col:11, col:15> used abc 'int'; `-CompoundStmt <col:20, line:4:1>; `-RecoveryExpr <line:3:3, col:12> 'int' contains-errors; |-UnresolvedLookupExpr <col:3> '<overloaded function type>' lvalue (ADL) = 'NoArg'; `-DeclRefExpr <col:9> 'int' lvalue ParmVar 'abc' 'int'. An alternative is to use existing Exprs, e.g. CallExpr for the above example.; This would capture more call details (e.g. locations of parentheses) and allow; it to be treated uniformly with valid CallExprs.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:86004,test,test,86004,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,1,['test'],['test']
Testability,"n limits; ---------------------------------. .. option:: -fopenmp-use-tls. Controls code generation for OpenMP threadprivate variables. In presence of; this option all threadprivate variables are generated the same way as thread; local variables, using TLS support. If `-fno-openmp-use-tls`; is provided or target does not support TLS, code generation for threadprivate; variables relies on OpenMP runtime library. .. _opencl:. OpenCL Features; ===============. Clang can be used to compile OpenCL kernels for execution on a device; (e.g. GPU). It is possible to compile the kernel into a binary (e.g. for AMDGPU); that can be uploaded to run directly on a device (e.g. using; `clCreateProgramWithBinary; <https://www.khronos.org/registry/OpenCL/specs/opencl-1.1.pdf#111>`_) or; into generic bitcode files loadable into other toolchains. Compiling to a binary using the default target from the installation can be done; as follows:. .. code-block:: console. $ echo ""kernel void k(){}"" > test.cl; $ clang test.cl. Compiling for a specific target can be done by specifying the triple corresponding; to the target, for example:. .. code-block:: console. $ clang --target=nvptx64-unknown-unknown test.cl; $ clang --target=amdgcn-amd-amdhsa -mcpu=gfx900 test.cl. Compiling to bitcode can be done as follows:. .. code-block:: console. $ clang -c -emit-llvm test.cl. This will produce a file `test.bc` that can be used in vendor toolchains; to perform machine code generation. Note that if compiled to bitcode for generic targets such as SPIR/SPIR-V,; portable IR is produced that can be used with various vendor; tools as well as open source tools such as `SPIRV-LLVM Translator; <https://github.com/KhronosGroup/SPIRV-LLVM-Translator>`_; to produce SPIR-V binary. More details are provided in `the offline; compilation from OpenCL kernel sources into SPIR-V using open source; tools; <https://github.com/KhronosGroup/OpenCL-Guide/blob/main/chapters/os_tooling.md>`_.; From clang 14 onwards SPIR-V can be ge",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:140943,test,test,140943,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"n our case let us suppose it is *B\_3*). Since a node is just a; positioned volume, we can then get a pointer to the volume, medium or; material objects related to it. *Deepest* means that *B\_3* still; contains point *P* (as well as *A\_1* and *TOP\_1*), but none of the; daughters of volume **B** does. After finding out the node containing; the particle, one can check if the geometry state is different compared; to the last located point:. ``` {.cpp}; Bool_t *TGeoManager::IsSameLocation(); ```. The algorithm for finding where a point is located in geometry is; presented in the figure 17-36. It always starts by checking if the last computed modeller state is the; answer. This optimizes the search when continuously tracking a particle.; The main actions performed are:. - moving up and down in the logical node tree while updating the; current node and its global matrix; - converting the global position into the local frame of the current; node/volume; - checking whether the local position lies within the geometrical; shape of the current volume - if this is the case continue the; search downwards for the daughters of the current node, otherwise; search upwards its containers until the top level is reached.; - the number of candidate nodes to be checked at a given level is; minimized by an additional optimization structure: voxels. This is; effective even in case there is only one daughter of the current; volume.; - in case the current node is declared as possibly overlapping, the; method FindInCluster() is invoked. This method checks all different; possibilities within the cluster of overlapping candidates. One of; the candidates is prioritized if one of the following conditions id; fulfilled (in order):; - Is declared as non-overlapping (these are anyway searched first); - Has at least one daughter that contains the current point; - Was already declared as containing the point at a previous step. ![Finding the location of a point in the geometry hierarchy](pictures/08",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md:157237,log,logical,157237,documentation/users-guide/Geometry.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md,1,['log'],['logical']
Testability,"n points of the pipeline. For example, a; function with the ``legalized`` property can have the ``MachineVerifier``; enforce that no illegal instructions occur. Similarly, a; ``regBankSelected`` function may not have virtual registers without a register; bank assigned. .. note::. For layering reasons, ``MachineVerifier`` isn't able to be the sole verifier; in GlobalISel. Currently some of the passes also perform verification while; we find a way to solve this problem. The main issue is that GlobalISel is a separate library, so we can't; directly reference it from CodeGen. Testing; -------. The ability to test GlobalISel is significantly improved over SelectionDAG.; SelectionDAG is something of a black box and there's a lot going on inside it.; This makes it difficult to write a test that reliably tests a particular aspect; of its behaviour. For comparison, see the following diagram:. .. image:: testing-pass-level.png. Each of the grey boxes indicates an opportunity to serialize the current state; and test the behaviour between two points in the pipeline. The current state; can be serialized using ``-stop-before`` or ``-stop-after`` and loaded using; ``-start-before``, ``-start-after``, and ``-run-pass``. We can also go further still, as many of GlobalISel's passes are readily unit; testable:. .. image:: testing-unit-level.png. It's possible to create an imaginary target such as in `LegalizerHelperTest.cpp <https://github.com/llvm/llvm-project/blob/93b29d3882baf7df42e4e9bc26b977b00373ef56/llvm/unittests/CodeGen/GlobalISel/LegalizerHelperTest.cpp#L28-L57>`_; and perform a single step of the algorithm and check the result. The MIR and; FileCheck directives can be embedded using strings so you still have access to; the convenience available in llvm-lit. Debugging; ---------. One debugging technique that's proven particularly valuable is to use the; BlockExtractor to extract basic blocks into new functions. This can be used; to track down correctness bugs and can also be ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GlobalISel/Pipeline.rst:4321,test,test,4321,interpreter/llvm-project/llvm/docs/GlobalISel/Pipeline.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GlobalISel/Pipeline.rst,1,['test'],['test']
Testability,"n psutil module only if installed in a; **non-user** location. Under Linux, install with sudo or within a virtual; environment. Under Windows, install Python for all users and then run; ``pip install psutil`` in an elevated command prompt. For more information on using the :program:`lit` tool, see ``llvm-lit --help``; or the :doc:`lit man page <CommandGuide/lit>`. Debugging Information tests; ---------------------------. To run debugging information tests simply add the ``cross-project-tests``; project to your ``LLVM_ENABLE_PROJECTS`` define on the cmake; command-line. Regression test structure; =========================. The LLVM regression tests are driven by :program:`lit` and are located in the; ``llvm/test`` directory. This directory contains a large array of small tests that exercise; various features of LLVM and to ensure that regressions do not occur.; The directory is broken into several sub-directories, each focused on a; particular area of LLVM. Writing new regression tests; ----------------------------. The regression test structure is very simple, but does require some; information to be set. This information is gathered via ``cmake``; and is written to a file, ``test/lit.site.cfg.py`` in the build directory.; The ``llvm/test`` Makefile does this work for you. In order for the regression tests to work, each directory of tests must; have a ``lit.local.cfg`` file. :program:`lit` looks for this file to determine; how to run the tests. This file is just Python code and thus is very; flexible, but we've standardized it for the LLVM regression tests. If; you're adding a directory of tests, just copy ``lit.local.cfg`` from; another directory to get running. The standard ``lit.local.cfg`` simply; specifies which files to look in for tests. Any directory that contains; only directories does not need the ``lit.local.cfg`` file. Read the :doc:`Lit; documentation <CommandGuide/lit>` for more information. Each test file must contain lines starting with ""RUN:"" that t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:7322,test,tests,7322,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['tests']
Testability,"n results_b.json; ```. Structure; ---------. The test-suite contains benchmark and test programs. The programs come with; reference outputs so that their correctness can be checked. The suite comes; with tools to collect metrics such as benchmark runtime, compilation time and; code size. The test-suite is divided into several directories:. - `SingleSource/`. Contains test programs that are only a single source file in size. A; subdirectory may contain several programs. - `MultiSource/`. Contains subdirectories which entire programs with multiple source files.; Large benchmarks and whole applications go here. - `MicroBenchmarks/`. Programs using the [google-benchmark](https://github.com/google/benchmark); library. The programs define functions that are run multiple times until the; measurement results are statistically significant. - `External/`. Contains descriptions and test data for code that cannot be directly; distributed with the test-suite. The most prominent members of this; directory are the SPEC CPU benchmark suites.; See [External Suites](#external-suites). - `Bitcode/`. These tests are mostly written in LLVM bitcode. - `CTMark/`. Contains symbolic links to other benchmarks forming a representative sample; for compilation performance measurements. ### Benchmarks. Every program can work as a correctness test. Some programs are unsuitable for; performance measurements. Setting the `TEST_SUITE_BENCHMARKING_ONLY` CMake; option to `ON` will disable them. Configuration; -------------. The test-suite has configuration options to customize building and running the; benchmarks. CMake can print a list of them:. ```bash; % cd test-suite-build; # Print basic options:; % cmake -LH; # Print all options:; % cmake -LAH; ```. ### Common Configuration Options. - `CMAKE_C_FLAGS`. Specify extra flags to be passed to C compiler invocations. The flags are; also passed to the C++ compiler and linker invocations. See; [https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_FLAGS.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:3256,benchmark,benchmark,3256,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['benchmark'],['benchmark']
Testability,"n searching for executables in tests. .. option:: --vg. Run individual tests under valgrind (using the memcheck tool). The; ``--error-exitcode`` argument for valgrind is used so that valgrind failures; will cause the program to exit with a non-zero status. When this option is enabled, :program:`lit` will also automatically provide a; ""``valgrind``"" feature that can be used to conditionally disable (or expect; failure in) certain tests. .. option:: --vg-arg=ARG. When :option:`--vg` is used, specify an additional argument to pass to; :program:`valgrind` itself. .. option:: --vg-leak. When :option:`--vg` is used, enable memory leak checks. When this option is; enabled, :program:`lit` will also automatically provide a ""``vg_leak``""; feature that can be used to conditionally disable (or expect failure in); certain tests. .. option:: --time-tests. Track the wall time individual tests take to execute and includes the results; in the summary output. This is useful for determining which tests in a test; suite take the most time to execute. .. option:: --ignore-fail. Exit with status zero even if some tests fail. .. _selection-options:. SELECTION OPTIONS; -----------------. By default, `lit` will run failing tests first, then run tests in descending; execution time order to optimize concurrency. The execution order can be; changed using the :option:`--order` option. The timing data is stored in the `test_exec_root` in a file named; `.lit_test_times.txt`. If this file does not exist, then `lit` checks the; `test_source_root` for the file to optionally accelerate clean builds. .. option:: --shuffle. Run the tests in a random order, not failing/slowest first. Deprecated,; use :option:`--order` instead. .. option:: --per-test-coverage. Emit the necessary test coverage data, divided per test case (involves; setting a unique value to LLVM_PROFILE_FILE for each RUN). The coverage; data files will be emitted in the directory specified by `config.test_exec_root`. .. option:: --max-fail",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:5180,test,tests,5180,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,2,['test'],"['test', 'tests']"
Testability,"n source form. :doc:`HowToSubmitABug`; Instructions for properly submitting information about any bugs you run into; in the LLVM system. :doc:`BugLifeCycle`; Describes how bugs are reported, triaged and closed. :doc:`CodingStandards`; Details the LLVM coding standards and provides useful information on writing; efficient C++ code. :doc:`GitHub`; Describes how to use the llvm-project repository and code reviews on GitHub. :doc:`GitBisecting`; Describes how to use ``git bisect`` on LLVM's repository. :doc:`GitRepositoryPolicy`; Collection of policies around the git repositories. .. _development-process:. Development Process; -------------------. Information about LLVM's development process. .. toctree::; :hidden:. Projects; HowToReleaseLLVM; Packaging; ReleaseProcess; HowToAddABuilder; ReleaseNotes. :doc:`Projects`; How-to guide and templates for new projects that *use* the LLVM; infrastructure. The templates (directory organization, Makefiles, and test; tree) allow the project code to be located outside (or inside) the ``llvm/``; tree, while using LLVM header files and libraries. :doc:`HowToReleaseLLVM`; This is a guide to preparing LLVM releases. Most developers can ignore it. :doc:`ReleaseProcess`; This is a guide to validate a new release, during the release process. Most developers can ignore it. :doc:`HowToAddABuilder`; Instructions for adding new builder to LLVM buildbot master. :doc:`Packaging`; Advice on packaging LLVM into a distribution. :doc:`Release notes for the current release <ReleaseNotes>`; This describes new features, known bugs, and other limitations. .. _lists-forums:. Forums & Mailing Lists; ----------------------. If you can't find what you need in these docs, try consulting the; Discourse forums. There are also commit mailing lists for all commits to the LLVM Project.; The :doc:`CodeOfConduct` applies to all these forums and mailing lists. `LLVM Discourse`__; The forums for all things LLVM and related sub-projects. There are categories and subca",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingInvolved.rst:1729,test,test,1729,interpreter/llvm-project/llvm/docs/GettingInvolved.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingInvolved.rst,1,['test'],['test']
Testability,"n tests to work, each directory of tests must; have a ``lit.local.cfg`` file. :program:`lit` looks for this file to determine; how to run the tests. This file is just Python code and thus is very; flexible, but we've standardized it for the LLVM regression tests. If; you're adding a directory of tests, just copy ``lit.local.cfg`` from; another directory to get running. The standard ``lit.local.cfg`` simply; specifies which files to look in for tests. Any directory that contains; only directories does not need the ``lit.local.cfg`` file. Read the :doc:`Lit; documentation <CommandGuide/lit>` for more information. Each test file must contain lines starting with ""RUN:"" that tell :program:`lit`; how to run it. If there are no RUN lines, :program:`lit` will issue an error; while running a test. RUN lines are specified in the comments of the test program using the; keyword ``RUN`` followed by a colon, and lastly the command (pipeline); to execute. Together, these lines form the ""script"" that :program:`lit`; executes to run the test case. The syntax of the RUN lines is similar to a; shell's syntax for pipelines including I/O redirection and variable; substitution. However, even though these lines may *look* like a shell; script, they are not. RUN lines are interpreted by :program:`lit`.; Consequently, the syntax differs from shell in a few ways. You can specify; as many RUN lines as needed. :program:`lit` performs substitution on each RUN line to replace LLVM tool names; with the full paths to the executable built for each tool (in; ``$(LLVM_OBJ_ROOT)/bin``). This ensures that :program:`lit` does; not invoke any stray LLVM tools in the user's path during testing. Each RUN line is executed on its own, distinct from other lines unless; its last character is ``\``. This continuation character causes the RUN; line to be concatenated with the next one. In this way you can build up; long pipelines of commands without making huge line lengths. The lines; ending in ``\`` are concat",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:8684,test,test,8684,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"n the assertion that the developer may know but is not immediately; apparent in the code itself. In this way assertions make implicit assumptions; explicit in the code, which not only makes the analyzer more accurate when; finding bugs, but can help others better able to understand your code as well.; It can also help remove certain kinds of analyzer false positives by pruning off; false paths.; In order to exploit assertions, however, the analyzer must understand when it; encounters an ""assertion handler."" Typically assertions are; implemented with a macro, with the macro performing a check for the assertion; condition and, when the check fails, calling an assertion handler. For example, consider the following code; fragment:. void foo(int *p) {; assert(p != NULL);; }. When this code is preprocessed on Mac OS X it expands to the following:. void foo(int *p) {; (__builtin_expect(!(p != NULL), 0) ? __assert_rtn(__func__, ""t.c"", 4, ""p != NULL"") : (void)0);; }. In this example, the assertion handler is __assert_rtn. When called,; most assertion handlers typically print an error and terminate the program. The; analyzer can exploit such semantics by ending the analysis of a path once it; hits a call to an assertion handler.; The trick, however, is that the analyzer needs to know that a called function; is an assertion handler; otherwise the analyzer might assume the function call; returns and it will continue analyzing the path where the assertion condition; failed. This can lead to false positives, as the assertion condition usually; implies a safety condition (e.g., a pointer is not null) prior to performing; some action that depends on that condition (e.g., dereferencing a pointer).; The analyzer knows about several well-known assertion handlers, but can; automatically infer if a function should be treated as an assertion handler if; it is annotated with the 'noreturn' attribute or the (Clang-specific); 'analyzer_noreturn' attribute. Note that, currently, clang does n",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html:20766,assert,assertion,20766,interpreter/llvm-project/clang/www/analyzer/annotations.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html,1,['assert'],['assertion']
Testability,"n x86 processors may speculate into called functions and out of functions; to their return address. As a consequence, we need a way to check loads that; occur after a misspeculated predicate but where the load and the misspeculated; predicate are in different functions. In essence, we need some interprocedural; generalization of the predicate state tracking. A primary challenge to passing; the predicate state between functions is that we would like to not require a; change to the ABI or calling convention in order to make this mitigation more; deployable, and further would like code mitigated in this way to be easily; mixed with code not mitigated in this way and without completely losing the; value of the mitigation. ##### Embed the predicate state into the high bit(s) of the stack pointer. We can use the same technique that allows hardening pointers to pass the; predicate state into and out of functions. The stack pointer is trivially; passed between functions and we can test for it having the high bits set to; detect when it has been marked due to misspeculation. The callsite instruction; sequence looks like (assuming a misspeculated state value of `-1`):; ```; ... .LBB0_4: # %danger; cmovneq %r8, %rax # Conditionally update predicate state.; shlq $47, %rax; orq %rax, %rsp; callq other_function; movq %rsp, %rax; sarq 63, %rax # Sign extend the high bit to all bits.; ```. This first puts the predicate state into the high bits of `%rsp` before calling; the function and then reads it back out of high bits of `%rsp` afterward. When; correctly executing (speculatively or not), these are all no-ops. When; misspeculating, the stack pointer will end up negative. We arrange for it to; remain a canonical address, but otherwise leave the low bits alone to allow; stack adjustments to proceed normally without disrupting this. Within the; called function, we can extract this predicate state and then reset it on; return:; ```; other_function:; # prolog; callq other_function; mov",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md:38796,test,test,38796,interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,1,['test'],['test']
Testability,"n(M_PI / 6.0);; if (b == 0.5) // warn; b = 0;; return b;; }. different.BitwiseOpBoolArg; (C, C++); Boolean value met at the left/right part of the bitwise &; or | operator.; Did you mean && (||) ?. int f();. void test() {; bool b = true;; if (b & f()) {} // warn; }. different.LabelInsideSwitch; (C); Possibly a misprint: label found inside a switch(); statement. void test(int c) {; switch(c){; case 1:; c += 1; break;; defalt: // warn (did you mean 'default'?); c -= 1; break;; }; }. different.IdenticalCondIfIf; (C); The conditions of two subsequent if statements are; identical. int test(int c) {; if (c > 5); c += 1;; if (c > 5) // warn; c -= 1;; return c;; }. different.LogicalOpUselessArg; (C); The second operand of a && operator has no impact on; expression result. void test(unsigned a) {; if (a<7 && a<10) {}; // warn; }. different.SameResLogicalExpr; (C); An expression is always evaluated to true/false. void test() {; int i = 0;; if (i != 0) {}; // warn; }. void test(int i) {; if (i == 0 && i == 1) {}; // warn; }. void test(int i) {; if (i < 0 || i >= 0) {}; // warn; }. different.OpPrecedenceAssignCmp; (C, C++); Comparison operation has higher precedence then assignment. Boolean value is; assigned to a variable of other type. Parenthesis may bee required around an; assignment. int f();. void test(int x, int y) {; bool b;; if((b = x != y)) {} // ok; if((x = f() != y)) {} // warn; }. different.OpPrecedenceIifShift; (C, C++); ?: has lower precedence then <<.; Source: Stephen C. Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception();; // warn (did you mean 'throw std::exception()'?); }.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:22666,test,test,22666,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"n(llvm::Function const&); 123 1 [ 0.000302, 0.000302, 0.000302, 0.000302, 0.000302] 0.000302 LLVMContextImpl.cpp:54:0: llvm::LLVMContextImpl::~LLVMContextImpl(); 139 46 [ 0.000000, 0.000002, 0.000006, 0.000008, 0.000019] 0.000138 TargetLowering.cpp:506:0: llvm::TargetLowering::SimplifyDemandedBits(llvm::SDValue, llvm::APInt const&, llvm::APInt&, llvm::APInt&, llvm::TargetLowering::TargetLoweringOpt&, unsigned int, bool) const. This shows us that for our input file, ``llc`` spent the most cumulative time; in the lexer (a total of 1 millisecond). If we wanted for example to work with; this data in a spreadsheet, we can output the results as CSV using the; ``-format=csv`` option to the command for further analysis. If we want to get a textual representation of the raw trace we can use the; ``llvm-xray convert`` tool to get YAML output. The first few lines of that; output for an example trace would look like the following:. ::. $ llvm-xray convert -f yaml --symbolize --instr_map=./bin/llc xray-log.llc.m35qPB; ---; header:; version: 1; type: 0; constant-tsc: true; nonstop-tsc: true; cycle-frequency: 2601000000; records:; - { type: 0, func-id: 110, function: __cxx_global_var_init.8, cpu: 37, thread: 69819, kind: function-enter, tsc: 5434426023268520 }; - { type: 0, func-id: 110, function: __cxx_global_var_init.8, cpu: 37, thread: 69819, kind: function-exit, tsc: 5434426023523052 }; - { type: 0, func-id: 164, function: __cxx_global_var_init, cpu: 37, thread: 69819, kind: function-enter, tsc: 5434426029925386 }; - { type: 0, func-id: 164, function: __cxx_global_var_init, cpu: 37, thread: 69819, kind: function-exit, tsc: 5434426030031128 }; - { type: 0, func-id: 142, function: '(anonymous namespace)::CommandLineParser::ParseCommandLineOptions(int, char const* const*, llvm::StringRef, llvm::raw_ostream*)', cpu: 37, thread: 69819, kind: function-enter, tsc: 5434426046951388 }; - { type: 0, func-id: 142, function: '(anonymous namespace)::CommandLineParser::ParseCommandLineOptio",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRayExample.rst:5301,log,log,5301,interpreter/llvm-project/llvm/docs/XRayExample.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRayExample.rst,1,['log'],['log']
Testability,"n, usually a; move of this value to a special register or a hardware-loop instruction.; The result is the conditional value of whether the given count is not zero. '``llvm.test.start.loop.iterations.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. ::. declare {i32, i1} @llvm.test.start.loop.iterations.i32(i32); declare {i64, i1} @llvm.test.start.loop.iterations.i64(i64). Overview:; """""""""""""""""". The '``llvm.test.start.loop.iterations.*``' intrinsics are similar to the; '``llvm.test.set.loop.iterations.*``' and '``llvm.start.loop.iterations.*``'; intrinsics, used to specify the hardware-loop trip count, but also produce a; value identical to the input that can be used as the input to the loop. The; second i1 output controls entry to a while-loop. Arguments:; """""""""""""""""""". The integer operand is the loop trip count of the hardware-loop, and thus; not e.g. the loop back-edge taken count. Semantics:; """""""""""""""""""". The '``llvm.test.start.loop.iterations.*``' intrinsics do not perform any; arithmetic on their operand. It's a hint to the backend that can use this to; set up the hardware-loop count with a target specific instruction, usually a; move of this value to a special register or a hardware-loop instruction.; The result is a pair of the input and a conditional value of whether the; given count is not zero. '``llvm.loop.decrement.reg.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. ::. declare i32 @llvm.loop.decrement.reg.i32(i32, i32); declare i64 @llvm.loop.decrement.reg.i64(i64, i64). Overview:; """""""""""""""""". The '``llvm.loop.decrement.reg.*``' intrinsics are used to lower the loop; iteration counter and return an updated value that will be used in the next; loop test check. Arguments:; """""""""""""""""""". Both arguments must have identical integer types. The first operand is the; loop iteration counter. The second operand is the maximum number of element",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:647243,test,test,647243,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"n-CFRetainRelease:. osx.coreFoundation.CFRetainRelease (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for null arguments to CFRetain/CFRelease/CFMakeCollectable. .. code-block:: c. void test(CFTypeRef p) {; if (!p); CFRetain(p); // warn; }. void test(int x, CFTypeRef p) {; if (p); return;. CFRelease(p); // warn; }. .. _osx-coreFoundation-containers-OutOfBounds:. osx.coreFoundation.containers.OutOfBounds (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Checks for index out-of-bounds when using 'CFArray' API. .. code-block:: c. void test() {; CFArrayRef A = CFArrayCreate(0, 0, 0, &kCFTypeArrayCallBacks);; CFArrayGetValueAtIndex(A, 0); // warn; }. .. _osx-coreFoundation-containers-PointerSizedValues:. osx.coreFoundation.containers.PointerSizedValues (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warns if 'CFArray', 'CFDictionary', 'CFSet' are created with non-pointer-size values. .. code-block:: c. void test() {; int x[] = { 1 };; CFArrayRef A = CFArrayCreate(0, (const void """""""""""""""""""""""""""""""""""""""""""""""")x, 1,; &kCFTypeArrayCallBacks); // warn; }. Fuchsia; ^^^^^^^. Fuchsia is an open source capability-based operating system currently being; developed by Google. This section describes checkers that can find various; misuses of Fuchsia APIs. .. _fuchsia-HandleChecker:. fuchsia.HandleChecker; """"""""""""""""""""""""""""""""""""""""""""""""""""""""; Handles identify resources. Similar to pointers they can be leaked,; double freed, or use after freed. This check attempts to find such problems. .. code-block:: cpp. void checkLeak08(int tag) {; zx_handle_t sa, sb;; zx_channel_create(0, &sa, &sb);; if (tag); zx_handle_close(sa);; use(sb); // Warn: Potential leak of handle; zx_handle_close(sb);; }. WebKit; ^^^^^^. WebKit is an open-source web browser engine available for macOS, iOS and Linux.; This section describes checkers that can find issues in WebKit codebase. Most of the checkers focus on memory management for which WebKit uses custom implementation of reference counted smartpointers. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:43628,test,test,43628,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"n-clang compilers.; #if __is_identifier(__wchar_t); typedef wchar_t __wchar_t;; #endif; #endif. __wchar_t WideCharacter;; ... Include File Checking Macros; ============================. Not all developments systems have the same include files. The; :ref:`langext-__has_include` and :ref:`langext-__has_include_next` macros allow; you to check for the existence of an include file before doing a possibly; failing ``#include`` directive. Include file checking macros must be used; as expressions in ``#if`` or ``#elif`` preprocessing directives. .. _langext-__has_include:. ``__has_include``; -----------------. This function-like macro takes a single file name string argument that is the; name of an include file. It evaluates to 1 if the file can be found using the; include paths, or 0 otherwise:. .. code-block:: c++. // Note the two possible file name string formats.; #if __has_include(""myinclude.h"") && __has_include(<stdint.h>); # include ""myinclude.h""; #endif. To test for this feature, use ``#if defined(__has_include)``:. .. code-block:: c++. // To avoid problem with non-clang compilers not having this macro.; #if defined(__has_include); #if __has_include(""myinclude.h""); # include ""myinclude.h""; #endif; #endif. .. _langext-__has_include_next:. ``__has_include_next``; ----------------------. This function-like macro takes a single file name string argument that is the; name of an include file. It is like ``__has_include`` except that it looks for; the second instance of the given file found in the include paths. It evaluates; to 1 if the second instance of the file can be found using the include paths,; or 0 otherwise:. .. code-block:: c++. // Note the two possible file name string formats.; #if __has_include_next(""myinclude.h"") && __has_include_next(<stdint.h>); # include_next ""myinclude.h""; #endif. // To avoid problem with non-clang compilers not having this macro.; #if defined(__has_include_next); #if __has_include_next(""myinclude.h""); # include_next ""myinclude.h""; #end",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LanguageExtensions.rst:10587,test,test,10587,interpreter/llvm-project/clang/docs/LanguageExtensions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LanguageExtensions.rst,1,['test'],['test']
Testability,"n-database P1689.json. And we will get:. .. code-block:: text. {; ""revision"": 0,; ""rules"": [; {; ""primary-output"": ""Impl.o"",; ""requires"": [; {; ""logical-name"": ""M"",; ""source-path"": ""M.cppm""; }; ]; },; {; ""primary-output"": ""M.o"",; ""provides"": [; {; ""is-interface"": true,; ""logical-name"": ""M"",; ""source-path"": ""M.cppm""; }; ],; ""requires"": [; {; ""logical-name"": ""M:interface_part"",; ""source-path"": ""interface_part.cppm""; },; {; ""logical-name"": ""M:impl_part"",; ""source-path"": ""impl_part.cppm""; }; ]; },; {; ""primary-output"": ""User.o"",; ""requires"": [; {; ""logical-name"": ""M"",; ""source-path"": ""M.cppm""; },; {; ""logical-name"": ""third_party_module""; }; ]; },; {; ""primary-output"": ""impl_part.o"",; ""provides"": [; {; ""is-interface"": false,; ""logical-name"": ""M:impl_part"",; ""source-path"": ""impl_part.cppm""; }; ],; ""requires"": [; {; ""logical-name"": ""M:interface_part"",; ""source-path"": ""interface_part.cppm""; }; ]; },; {; ""primary-output"": ""interface_part.o"",; ""provides"": [; {; ""is-interface"": true,; ""logical-name"": ""M:interface_part"",; ""source-path"": ""interface_part.cppm""; }; ]; }; ],; ""version"": 1; }. See the P1689 paper for the meaning of the fields. And if the user want a finer-grained control for any reason, e.g., to scan the generated source files,; the user can choose to get the dependency information per file. For example:. .. code-block:: console. $ clang-scan-deps -format=p1689 -- <path-to-compiler-executable>/clang++ -std=c++20 impl_part.cppm -c -o impl_part.o. And we'll get:. .. code-block:: text. {; ""revision"": 0,; ""rules"": [; {; ""primary-output"": ""impl_part.o"",; ""provides"": [; {; ""is-interface"": false,; ""logical-name"": ""M:impl_part"",; ""source-path"": ""impl_part.cppm""; }; ],; ""requires"": [; {; ""logical-name"": ""M:interface_part""; }; ]; }; ],; ""version"": 1; }. In this way, we can pass the single command line options after the ``--``.; Then clang-scan-deps will extract the necessary information from the options.; Note that we need to specify the path to the compiler executable instea",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/StandardCPlusPlusModules.rst:35917,log,logical-name,35917,interpreter/llvm-project/clang/docs/StandardCPlusPlusModules.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/StandardCPlusPlusModules.rst,1,['log'],['logical-name']
Testability,"n. When :program:`lit` starts up, the; first thing it does is convert the inputs into a complete list of tests to run; as part of *test discovery*. In the :program:`lit` model, every test must exist inside some *test suite*.; :program:`lit` resolves the inputs specified on the command line to test suites; by searching upwards from the input path until it finds a :file:`lit.cfg` or; :file:`lit.site.cfg` file. These files serve as both a marker of test suites; and as configuration files which :program:`lit` loads in order to understand; how to find and run the tests inside the test suite. Once :program:`lit` has mapped the inputs into test suites it traverses the; list of inputs adding tests for individual files and recursively searching for; tests in directories. This behavior makes it easy to specify a subset of tests to run, while still; allowing the test suite configuration to control exactly how tests are; interpreted. In addition, :program:`lit` always identifies tests by the test; suite they are in, and their relative path inside the test suite. For; appropriately configured projects, this allows :program:`lit` to provide; convenient and flexible support for out-of-tree builds. .. _test-status-results:. TEST STATUS RESULTS; -------------------. Each test ultimately produces one of the following eight results:. **PASS**. The test succeeded. **FLAKYPASS**. The test succeeded after being re-run more than once. This only applies to; tests containing an ``ALLOW_RETRIES:`` annotation. **XFAIL**. The test failed, but that is expected. This is used for test formats which allow; specifying that a test does not currently work, but wish to leave it in the test; suite. **XPASS**. The test succeeded, but it was expected to fail. This is used for tests which; were specified as expected to fail, but are now succeeding (generally because; the feature they test was broken and has been fixed). **FAIL**. The test failed. **UNRESOLVED**. The test result could not be determined. For",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:12094,test,tests,12094,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,3,['test'],"['test', 'tests']"
Testability,"n3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py merge ${LLVM_PROFDATA} ${CMAKE_CURRENT_BINARY_DIR}/clang.profdata ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_BINARY_DIR}/profiles/; COMMENT ""Merging profdata""; DEPENDS generate-profraw); if (CLANG_PGO_TRAINING_DATA_SOURCE_DIR); llvm_ExternalProject_Add(generate-profraw-external ${CLANG_PGO_TRAINING_DATA_SOURCE_DIR}; USE_TOOLCHAIN EXLUDE_FROM_ALL NO_INSTALL DEPENDS generate-profraw); add_dependencies(generate-profdata generate-profraw-external); endif(); endif(); endif(). find_program(DTRACE dtrace); # TODO: Look into supporting this for the driver build. It will require changing; # the perf-helper.py file to understand to call `llvm` as `llvm clang`.; if(APPLE AND DTRACE AND NOT LLVM_TOOL_LLVM_DRIVER_BUILD); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/order-files.lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/order-files/lit.site.cfg; ). add_lit_testsuite(generate-dtrace-logs ""Generating clang dtrace data""; ${CMAKE_CURRENT_BINARY_DIR}/order-files/; EXCLUDE_FROM_CHECK_ALL; ARGS -j 1; DEPENDS clang clear-dtrace-logs; ). add_custom_target(clear-dtrace-logs; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py clean ${CMAKE_CURRENT_BINARY_DIR} dtrace; COMMENT ""Clearing old dtrace data""). if(NOT CLANG_ORDER_FILE); message(FATAL_ERROR ""Output clang order file is not set""); endif(). add_custom_target(generate-order-file; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py gen-order-file --binary $<TARGET_FILE:clang> --output ${CLANG_ORDER_FILE} ${CMAKE_CURRENT_BINARY_DIR}; COMMENT ""Generating order file""; DEPENDS generate-dtrace-logs); endif(). if(CLANG_BOLT_INSTRUMENT AND NOT LLVM_BUILD_INSTRUMENTED); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/bolt.lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/bolt-fdata/lit.site.cfg; ). add_lit_testsuite(generate-bolt-fdata ""Generating BOLT profile for Clang""; ${CMAKE_CURRENT_BINARY_DIR}/bolt-fdata/; EXCLUDE_FROM_CHECK_ALL; DE",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt:2207,log,logs,2207,interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt,2,['log'],['logs']
Testability,"n:; % cmake -DTEST_SUITE_PROFILE_GENERATE=OFF \; -DTEST_SUITE_PROFILE_USE=ON \; -DTEST_SUITE_RUN_TYPE=ref \; .; % make; % llvm-lit -o result.json .; ```. To use Clang frontend's PGO instead of LLVM IR PGO, set `-DTEST_SUITE_USE_IR_PGO=OFF`. The `TEST_SUITE_RUN_TYPE` setting only affects the SPEC benchmark suites. Cross Compilation and External Devices; --------------------------------------. ### Compilation. CMake allows to cross compile to a different target via toolchain files. More; information can be found here:. - [https://llvm.org/docs/lnt/tests.html#cross-compiling](https://llvm.org/docs/lnt/tests.html#cross-compiling). - [https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html](https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html). Cross compilation from macOS to iOS is possible with the; `test-suite/cmake/caches/target-target-*-iphoneos-internal.cmake` CMake cache; files; this requires an internal iOS SDK. ### Running. There are two ways to run the tests in a cross compilation setting:. - Via SSH connection to an external device: The `TEST_SUITE_REMOTE_HOST` option; should be set to the SSH hostname. The executables and data files need to be; transferred to the device after compilation. This is typically done via the; `rsync` make target. After this, the lit runner can be used on the host; machine. It will prefix the benchmark and verification command lines with an; `ssh` command. Example:. ```bash; % cmake -G Ninja -D CMAKE_C_COMPILER=path/to/clang \; -C ../test-suite/cmake/caches/target-arm64-iphoneos-internal.cmake \; -D CMAKE_BUILD_TYPE=Release \; -D TEST_SUITE_REMOTE_HOST=mydevice \; ../test-suite; % ninja; % ninja rsync; % llvm-lit -j1 -o result.json .; ```. - You can specify a simulator for the target machine with the; `TEST_SUITE_RUN_UNDER` setting. The lit runner will prefix all benchmark; invocations with it. Running the test-suite via LNT; ------------------------------. The LNT tool can run the test-suite. Use this when s",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:11554,test,tests,11554,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['test'],['tests']
Testability,"n:; int a(int a, int b) { return (a==12)&(b>47)&(b<58); }. The sgt and slt should be combined into a single comparison. Testcase derived; from gcc. //===---------------------------------------------------------------------===//. Missed instcombine transformation:. %382 = srem i32 %tmp14.i, 64 ; [#uses=1]; %383 = zext i32 %382 to i64 ; [#uses=1]; %384 = shl i64 %381, %383 ; [#uses=1]; %385 = icmp slt i32 %tmp14.i, 64 ; [#uses=1]. The srem can be transformed to an and because if %tmp14.i is negative, the; shift is undefined. Testcase derived from 403.gcc. //===---------------------------------------------------------------------===//. This is a range comparison on a divided result (from 403.gcc):. %1337 = sdiv i32 %1336, 8 ; [#uses=1]; %.off.i208 = add i32 %1336, 7 ; [#uses=1]; %1338 = icmp ult i32 %.off.i208, 15 ; [#uses=1]; ; We already catch this (removing the sdiv) if there isn't an add, we should; handle the 'add' as well. This is a common idiom with it's builtin_alloca code.; C testcase:. int a(int x) { return (unsigned)(x/16+7) < 15; }. Another similar case involves truncations on 64-bit targets:. %361 = sdiv i64 %.046, 8 ; [#uses=1]; %362 = trunc i64 %361 to i32 ; [#uses=2]; ...; %367 = icmp eq i32 %362, 0 ; [#uses=1]. //===---------------------------------------------------------------------===//. Missed instcombine/dagcombine transformation:; define void @lshift_lt(i8 zeroext %a) nounwind {; entry:; %conv = zext i8 %a to i32; %shl = shl i32 %conv, 3; %cmp = icmp ult i32 %shl, 33; br i1 %cmp, label %if.then, label %if.end. if.then:; tail call void @bar() nounwind; ret void. if.end:; ret void; }; declare void @bar() nounwind. The shift should be eliminated. Testcase derived from gcc. //===---------------------------------------------------------------------===//. These compile into different code, one gets recognized as a switch and the; other doesn't due to phase ordering issues (PR6212):. int test1(int mainType, int subType) {; if (mainType == 7); subType = ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt:48861,test,testcase,48861,interpreter/llvm-project/llvm/lib/Target/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt,1,['test'],['testcase']
Testability,"n; }. // Objective-C; @interface MyClass {; @public; int x;; }; @end. void test() {; MyClass *obj = 0;; obj->x = 1; // warn; }. .. _core-StackAddressEscape:. core.StackAddressEscape (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""; Check that addresses to stack memory do not escape the function. .. code-block:: c. char const *p;. void test() {; char const str[] = ""string"";; p = str; // warn; }. void* test() {; return __builtin_alloca(12); // warn; }. void test() {; static int *x;; int y;; x = &y; // warn; }. .. _core-UndefinedBinaryOperatorResult:. core.UndefinedBinaryOperatorResult (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for undefined results of binary operators. .. code-block:: c. void test() {; int x;; int y = x + 1; // warn: left operand is garbage; }. .. _core-VLASize:. core.VLASize (C); """"""""""""""""""""""""""""""""; Check for declarations of Variable Length Arrays of undefined or zero size. Check for declarations of VLA of undefined or zero size. .. code-block:: c. void test() {; int x;; int vla1[x]; // warn: garbage as size; }. void test() {; int x = 0;; int vla2[x]; // warn: zero size; }. .. _core-uninitialized-ArraySubscript:. core.uninitialized.ArraySubscript (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for uninitialized values used as array subscripts. .. code-block:: c. void test() {; int i, a[10];; int x = a[i]; // warn: array subscript is undefined; }. .. _core-uninitialized-Assign:. core.uninitialized.Assign (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for assigning uninitialized values. .. code-block:: c. void test() {; int x;; x |= 1; // warn: left expression is uninitialized; }. .. _core-uninitialized-Branch:. core.uninitialized.Branch (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for uninitialized values used as branch conditions. .. code-block:: c. void test() {; int x;; if (x) // warn; return;; }. .. _core-uninitialized-CapturedBlockVariable:. core.uninitialized.CapturedBlockVariable (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for blocks that capture u",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:5492,test,test,5492,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"n> <input file>. OPTIONS:; -help - display available options (-help-hidden for more). ... and the resultant program could be used just like the standard ``grep``; tool. Positional arguments are sorted by their order of construction. This means that; command line options will be ordered according to how they are listed in a .cpp; file, but will not have an ordering defined if the positional arguments are; defined in multiple .cpp files. The fix for this problem is simply to define; all of your positional arguments in one .cpp file. Specifying positional options with hyphens; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sometimes you may want to specify a value to your positional argument that; starts with a hyphen (for example, searching for '``-foo``' in a file). At; first, you will have trouble doing this, because it will try to find an argument; named '``-foo``', and will fail (and single quotes will not save you). Note; that the system ``grep`` has the same problem:. ::. $ spiffygrep '-foo' test.txt; Unknown command line argument '-foo'. Try: spiffygrep -help'. $ grep '-foo' test.txt; grep: illegal option -- f; grep: illegal option -- o; grep: illegal option -- o; Usage: grep -hblcnsviw pattern file . . . The solution for this problem is the same for both your tool and the system; version: use the '``--``' marker. When the user specifies '``--``' on the; command line, it is telling the program that all options after the '``--``'; should be treated as positional arguments, not options. Thus, we can use it; like this:. ::. $ spiffygrep -- -foo test.txt; ...output... Determining absolute position with getPosition(); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sometimes an option can affect or modify the meaning of another option. For; example, consider ``gcc``'s ``-x LANG`` option. This tells ``gcc`` to ignore the; suffix of subsequent positional arguments and force the file to be interpreted; as if it contained source code in language ``LANG``. In order to han",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandLine.rst:28048,test,test,28048,interpreter/llvm-project/llvm/docs/CommandLine.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandLine.rst,1,['test'],['test']
Testability,nCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestD,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6871,test,testRegressionCpu,6871,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testRegressionCpu']
Testability,"nInitRefArg:. alpha.core.CallAndMessageUnInitRefArg (C,C++, ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for logical errors for function calls and Objective-C; message expressions (e.g., uninitialized arguments, null function pointers, and pointer to undefined variables). .. code-block:: c. void test(void) {; int t;; int &p = t;; int &s = p;; int &q = s;; foo(q); // warn; }. void test(void) {; int x;; foo(&x); // warn; }. .. _alpha-core-CastSize:. alpha.core.CastSize (C); """"""""""""""""""""""""""""""""""""""""""""""; Check when casting a malloc'ed type ``T``, whether the size is a multiple of the size of ``T``. .. code-block:: c. void test() {; int *x = (int *) malloc(11); // warn; }. .. _alpha-core-CastToStruct:. alpha.core.CastToStruct (C, C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for cast from non-struct pointer to struct pointer. .. code-block:: cpp. // C; struct s {};. void test(int *p) {; struct s *ps = (struct s *) p; // warn; }. // C++; class c {};. void test(int *p) {; c *pc = (c *) p; // warn; }. .. _alpha-core-Conversion:. alpha.core.Conversion (C, C++, ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Loss of sign/precision in implicit conversions. .. code-block:: c. void test(unsigned U, signed S) {; if (S > 10) {; if (U < S) {; }; }; if (S < -10) {; if (U < S) { // warn (loss of sign); }; }; }. void test() {; long long A = 1LL << 60;; short X = A; // warn (loss of precision); }. .. _alpha-core-DynamicTypeChecker:. alpha.core.DynamicTypeChecker (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for cases where the dynamic and the static type of an object are unrelated. .. code-block:: objc. id date = [NSDate date];. // Warning: Object has a dynamic type 'NSDate *' which is; // incompatible with static type 'NSNumber *'""; NSNumber *number = date;; [number doubleValue];. .. _alpha-core-FixedAddr:. alpha.core.FixedAddr (C); """"""""""""""""""""""""""""""""""""""""""""""""; Check for assignment of a fixed address to a pointer. .. code-block:: c. void test() {; int *p;; p = (int *)",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:48724,test,test,48724,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"nagers are:. * Even releases: Tom Stellard (tstellar@redhat.com); * Odd releases: Tobias Hieta (tobias@hieta.se). The official release testers are volunteered from the community and have; consistently validated and released binaries for their targets/OSs. To contact; them, you should post on the `Discourse forums (Project; Infrastructure - Release Testers). <https://discourse.llvm.org/c/infrastructure/release-testers/66>`_. The official testers list is in the file ``RELEASE_TESTERS.TXT``, in the ``LLVM``; repository. Community Testing; -----------------. Once all testing has been completed and appropriate bugs filed, the release; candidate tarballs are put on the website and the LLVM community is notified. We ask that all LLVM developers test the release in any the following ways:. #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang``; binary. Build LLVM. Run ``make check`` and the full LLVM test suite (``make; TEST=nightly report``). #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the ``clang`` sources. Compile; everything. Run ``make check`` and the full LLVM test suite (``make; TEST=nightly report``). #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang``; binary. Build whole programs with it (ex. Chromium, Firefox, Apache) for; your platform. #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang``; binary. Build *your* programs with it and check for conformance and; performance regressions. #. Run the :doc:`release process <ReleaseProcess>`, if your platform is; *different* than that which is officially supported, and report back errors; only if they were not reported by the official release tester for that; architecture. We also ask that the OS distribution release managers test their packages with; the first candidate of every release, and report any *new* errors in GitHub.; If the bug can be reproduced with an unpatched upstream version of the release; candidate (as opposed to the distribution's own ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst:8411,test,test-X,8411,interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,1,['test'],['test-X']
Testability,"nal increment: loadpre18.c loadpre19.c. //===---------------------------------------------------------------------===//. [LOAD PRE / STORE SINKING / SPEC HACK]. This is a chunk of code from 456.hmmer:. int f(int M, int *mc, int *mpp, int *tpmm, int *ip, int *tpim, int *dpp,; int *tpdm, int xmb, int *bp, int *ms) {; int k, sc;; for (k = 1; k <= M; k++) {; mc[k] = mpp[k-1] + tpmm[k-1];; if ((sc = ip[k-1] + tpim[k-1]) > mc[k]) mc[k] = sc;; if ((sc = dpp[k-1] + tpdm[k-1]) > mc[k]) mc[k] = sc;; if ((sc = xmb + bp[k]) > mc[k]) mc[k] = sc;; mc[k] += ms[k];; }; }. It is very profitable for this benchmark to turn the conditional stores to mc[k]; into a conditional move (select instr in IR) and allow the final store to do the; store. See GCC PR27313 for more details. Note that this is valid to xform even; with the new C++ memory model, since mc[k] is previously loaded and later; stored. //===---------------------------------------------------------------------===//. [SCALAR PRE]; There are many PRE testcases in testsuite/gcc.dg/tree-ssa/ssa-pre-*.c in the; GCC testsuite. //===---------------------------------------------------------------------===//. There are some interesting cases in testsuite/gcc.dg/tree-ssa/pred-comm* in the; GCC testsuite. For example, we get the first example in predcom-1.c, but ; miss the second one:. unsigned fib[1000];; unsigned avg[1000];. __attribute__ ((noinline)); void count_averages(int n) {; int i;; for (i = 1; i < n; i++); avg[i] = (((unsigned long) fib[i - 1] + fib[i] + fib[i + 1]) / 3) & 0xffff;; }. which compiles into two loads instead of one in the loop. predcom-2.c is the same as predcom-1.c. predcom-3.c is very similar but needs loads feeding each other instead of; store->load. //===---------------------------------------------------------------------===//. [ALIAS ANALYSIS]. Type based alias analysis:; http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14705. We should do better analysis of posix_memalign. At the least it should; no-capture its ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt:34714,test,testcases,34714,interpreter/llvm-project/llvm/lib/Target/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt,2,['test'],"['testcases', 'testsuite']"
Testability,"nals; =========================. .. contents::; :local:. Introduction; ============. This document describes the Clang driver. The purpose of this document; is to describe both the motivation and design goals for the driver, as; well as details of the internal implementation. Features and Goals; ==================. The Clang driver is intended to be a production quality compiler driver; providing access to the Clang compiler and tools, with a command line; interface which is compatible with the gcc driver. Although the driver is part of and driven by the Clang project, it is; logically a separate tool which shares many of the same goals as Clang:. .. contents:: Features; :local:. GCC Compatibility; -----------------. The number one goal of the driver is to ease the adoption of Clang by; allowing users to drop Clang into a build system which was designed to; call GCC. Although this makes the driver much more complicated than; might otherwise be necessary, we decided that being very compatible with; the gcc command line interface was worth it in order to allow users to; quickly test clang on their projects. Flexible; --------. The driver was designed to be flexible and easily accommodate new uses; as we grow the clang and LLVM infrastructure. As one example, the driver; can easily support the introduction of tools which have an integrated; assembler; something we hope to add to LLVM in the future. Similarly, most of the driver functionality is kept in a library which; can be used to build other tools which want to implement or accept a gcc; like interface. Low Overhead; ------------. The driver should have as little overhead as possible. In practice, we; found that the gcc driver by itself incurred a small but meaningful; overhead when compiling many small files. The driver doesn't do much; work compared to a compilation, but we have tried to keep it as; efficient as possible by following a few simple principles:. - Avoid memory allocation and string copying when possi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/DriverInternals.rst:1141,test,test,1141,interpreter/llvm-project/clang/docs/DriverInternals.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/DriverInternals.rst,1,['test'],['test']
Testability,"nals; ========================================. .. contents::; :local:. This document describes the design and implementation of Clang's precompiled; headers (PCH) and modules. If you are interested in the end-user view, please; see the :ref:`User's Manual <usersmanual-precompiled-headers>`. Using Precompiled Headers with ``clang``; ----------------------------------------. The Clang compiler frontend, ``clang -cc1``, supports two command line options; for generating and using PCH files. To generate PCH files using ``clang -cc1``, use the option `-emit-pch`:. .. code-block:: bash. $ clang -cc1 test.h -emit-pch -o test.h.pch. This option is transparently used by ``clang`` when generating PCH files. The; resulting PCH file contains the serialized form of the compiler's internal; representation after it has completed parsing and semantic analysis. The PCH; file can then be used as a prefix header with the `-include-pch`; option:. .. code-block:: bash. $ clang -cc1 -include-pch test.h.pch test.c -o test.s. Design Philosophy; -----------------. Precompiled headers are meant to improve overall compile times for projects, so; the design of precompiled headers is entirely driven by performance concerns.; The use case for precompiled headers is relatively simple: when there is a; common set of headers that is included in nearly every source file in the; project, we *precompile* that bundle of headers into a single precompiled; header (PCH file). Then, when compiling the source files in the project, we; load the PCH file first (as a prefix header), which acts as a stand-in for that; bundle of headers. A precompiled header implementation improves performance when:. * Loading the PCH file is significantly faster than re-parsing the bundle of; headers stored within the PCH file. Thus, a precompiled header design; attempts to minimize the cost of reading the PCH file. Ideally, this cost; should not vary with the size of the precompiled header file. * The cost of generating the PCH",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/PCHInternals.rst:1078,test,test,1078,interpreter/llvm-project/clang/docs/PCHInternals.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/PCHInternals.rst,1,['test'],['test']
Testability,"name.; [2] Average number of used buffer entries.; [3] Maximum number of used buffer entries.; [4] Total number of buffer entries. [1] [2] [3] [4]; JALU01 0 0 20; JFPU01 17 18 18; JLSAGU 0 0 12. Retire Control Unit - number of cycles where we saw N instructions retired:; [# retired], [# cycles]; 0, 109 (17.9%); 1, 102 (16.7%); 2, 399 (65.4%). Total ROB Entries: 64; Max Used ROB Entries: 35 ( 54.7% ); Average Used ROB Entries per cy: 32 ( 50.0% ). Register File statistics:; Total number of mappings created: 900; Max number of mappings used: 35. * Register File #1 -- JFpuPRF:; Number of physical registers: 72; Total number of mappings created: 900; Max number of mappings used: 35. * Register File #2 -- JIntegerPRF:; Number of physical registers: 64; Total number of mappings created: 0; Max number of mappings used: 0. If we look at the *Dynamic Dispatch Stall Cycles* table, we see the counter for; SCHEDQ reports 272 cycles. This counter is incremented every time the dispatch; logic is unable to dispatch a full group because the scheduler's queue is full. Looking at the *Dispatch Logic* table, we see that the pipeline was only able to; dispatch two micro opcodes 51.5% of the time. The dispatch group was limited to; one micro opcode 44.6% of the cycles, which corresponds to 272 cycles. The; dispatch statistics are displayed by either using the command option; ``-all-stats`` or ``-dispatch-stats``. The next table, *Schedulers*, presents a histogram displaying a count,; representing the number of micro opcodes issued on some number of cycles. In; this case, of the 610 simulated cycles, single opcodes were issued 306 times; (50.2%) and there were 7 cycles where no opcodes were issued. The *Scheduler's queue usage* table shows that the average and maximum number of; buffer entries (i.e., scheduler queue entries) used at runtime. Resource JFPU01; reached its maximum (18 of 18 queue entries). Note that AMD Jaguar implements; three schedulers:. * JALU01 - A scheduler for ALU ins",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-mca.rst:30578,log,logic,30578,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-mca.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-mca.rst,1,['log'],['logic']
Testability,"name>, i64 <hash>,; i32 <bitmap-bytes>); i32 <bitmap-index>,; ptr <mcdc-temp-addr>). Overview:; """""""""""""""""". The '``llvm.instrprof.mcdc.tvbitmap.update``' intrinsic is used to track MC/DC; test vector execution after each boolean expression has been fully executed.; The overall value of the condition bitmap, after it has been successively; updated using the '``llvm.instrprof.mcdc.condbitmap.update``' intrinsic with; the true or false evaluation of each condition, uniquely identifies an executed; MC/DC test vector and is used as a bit index into the global test vector; bitmap. Arguments:; """""""""""""""""""". The first argument is a pointer to a global variable containing the; name of the entity being instrumented. This should generally be the; (mangled) function name for a set of counters. The second argument is a hash value that can be used by the consumer; of the profile data to detect changes to the instrumented source. The third argument is the number of bitmap bytes required by the function to; record the number of test vectors executed for each boolean expression. The fourth argument is the byte index into the global test vector bitmap; corresponding to the function. The fifth argument is the address of the condition bitmap, which contains a; value representing an executed MC/DC test vector. It is loaded and used as the; bit index of the test vector bitmap. Semantics:; """""""""""""""""""". This intrinsic represents the final operation of an MC/DC instrumentation; sequence and will cause the ``-instrprof`` pass to generate the code to; instrument an update of a function's global test vector bitmap to indicate that; a test vector has been executed. The global test vector bitmap can be consumed; by the ``llvm-profdata`` and ``llvm-cov`` tools. '``llvm.thread.pointer``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare ptr @llvm.thread.pointer(). Overview:; """""""""""""""""". The '``llvm.thread.pointer``' intrinsic returns the value of the thread; pointer. Semanti",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:535960,test,test,535960,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"nce; the same node can be found on different branches. In other words,; the number of states corresponds to the number of nodes in the; `expanded geometry tree`. Since unfortunately this expansion from; logical to physical hierarchy cannot be stored on regular basis due; to the large size of the latter, one cannot directly assign state; numbers. If the size of the expansion proves however to be small; enough (less than about 50 million objects), a parallel structure; storing these state indices is built and stored in memory. In such; case each state automatically gets an index that can be retrieved; after any state initialization. These indices can prove to be quite; useful for being able to keep track of the navigation history and; force certain states. Let's illustrate how this works with a simple; example:; - Suppose we have a simple geometry with a volume B positioned twice; inside a container A. Then A is positioned twice in a top container; T. The complete list of logical nodes is: `T_1`, `A_1`, `A_2`,; `B_1`, `B_2`. On the other hand we will have more states than; logical nodes:; - `/T_1`- 1 state at level = 0; - `/T_1/A_1,/T_1/A_2`- 2 states at level = 1; - `/T_1/A_1/B_1,/T_1/A_1/B_2,/T_1/A_2/B_1,/T_1/A_2/B_2` - 4 states at; level = 2; - All these states will get automatic numbers, starting with 0; corresponding to the top-level state and ending with an integer; corresponding to Ntotal\_states-1. The mapping from a given logical; node to a state number is generally not possible, as for the node; B\_1 that appears as current node for 2 different states. The; numbering order of states is therefore not important, but it can be; used as in the following lines:. ``` {.cpp}; gGeoManager->InitTrack(pt,dir); // anything to initialize a state; Int_t istate = gGeoManager->GetCurrentNodeId(); // in fact state Id; {; //... code changing the current state; }; gGeoManager->CdNode(istate); // forces state's re-initialization; ```. - Current `global transformation`. This rep",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md:110331,log,logical,110331,documentation/users-guide/Geometry.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md,1,['log'],['logical']
Testability,"nce; the same node can be found on different branches. In other words,; the number of states corresponds to the number of nodes in the; `expanded geometry tree`. Since unfortunately this expansion from; logical to physical hierarchy cannot be stored on regular basis due; to the large size of the latter, one cannot directly assign state; numbers. If the size of the expansion proves however to be small; enough (less than about 50 million objects), a parallel structure; storing these state indices is built and stored in memory. In such; case each state automatically gets an index that can be retrieved; after any state initialization. These indices can prove to be quite; useful for being able to keep track of the navigation history and; force certain states. Let's illustrate how this works with a simple; example:; - Suppose we have a simple geometry with a volume B positioned twice; inside a container A. Then A is positioned twice in a top container; T. The complete list of logical nodes is: `T_1`, `A_1`, `A_2`,; `B_1`, `B_2`. On the other hand we will have more states than; logical nodes:; - `/T_1`- 1 state at level = 0; - `/T_1/A_1,/T_1/A_2`- 2 states at level = 1; - `/T_1/A_1/B_1,/T_1/A_1/B_2,/T_1/A_2/B_1,/T_1/A_2/B_2` - 4 states at; level = 2; - All these states will get automatic numbers, starting with 0; corresponding to the top-level state and ending with an integer; corresponding to Ntotal\_states-1. The mapping from a given logical; node to a state number is generally not possible, as for the node; B\_1 that appears as current node for 2 different states. The; numbering order of states is therefore not important, but it can be; used as in the following lines:. ~~~{.cpp}; gGeoManager->InitTrack(pt,dir); // anything to initialize a state; Int_t istate = gGeoManager->GetCurrentNodeId(); // in fact state Id; {; //... code changing the current state; }; gGeoManager->CdNode(istate); // forces state's re-initialization; ~~~. - Current `global transformation`. This repr",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md:70734,log,logical,70734,geom/geom/doc/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md,1,['log'],['logical']
Testability,"ncode.test (2 of 474); ...; ```. 6. Show and compare result files (optional):. ```bash; # Make sure pandas and scipy are installed. Prepend `sudo` if necessary.; % pip install pandas scipy; # Show a single result file:; % test-suite/utils/compare.py results.json; # Compare two result files:; % test-suite/utils/compare.py results_a.json results_b.json; ```. Structure; ---------. The test-suite contains benchmark and test programs. The programs come with; reference outputs so that their correctness can be checked. The suite comes; with tools to collect metrics such as benchmark runtime, compilation time and; code size. The test-suite is divided into several directories:. - `SingleSource/`. Contains test programs that are only a single source file in size. A; subdirectory may contain several programs. - `MultiSource/`. Contains subdirectories which entire programs with multiple source files.; Large benchmarks and whole applications go here. - `MicroBenchmarks/`. Programs using the [google-benchmark](https://github.com/google/benchmark); library. The programs define functions that are run multiple times until the; measurement results are statistically significant. - `External/`. Contains descriptions and test data for code that cannot be directly; distributed with the test-suite. The most prominent members of this; directory are the SPEC CPU benchmark suites.; See [External Suites](#external-suites). - `Bitcode/`. These tests are mostly written in LLVM bitcode. - `CTMark/`. Contains symbolic links to other benchmarks forming a representative sample; for compilation performance measurements. ### Benchmarks. Every program can work as a correctness test. Some programs are unsuitable for; performance measurements. Setting the `TEST_SUITE_BENCHMARKING_ONLY` CMake; option to `ON` will disable them. Configuration; -------------. The test-suite has configuration options to customize building and running the; benchmarks. CMake can print a list of them:. ```bash; % cd test-suite-",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:2897,benchmark,benchmark,2897,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['benchmark'],['benchmark']
Testability,"ncorrect compilation by mis-behaving passes, you; can debug incorrect code generation by either LLC or the JIT, using; ``bugpoint``. The process ``bugpoint`` follows in this case is to try to; narrow the code down to a function that is miscompiled by one or the other; method, but since for correctness, the entire program must be run,; ``bugpoint`` will compile the code it deems to not be affected with the C; Backend, and then link in the shared object it generates. To debug the JIT:. .. code-block:: bash. bugpoint -run-jit -output=[correct output file] [bitcode file] \; --tool-args -- [arguments to pass to lli] \; --args -- [program arguments]. Similarly, to debug the LLC, one would run:. .. code-block:: bash. bugpoint -run-llc -output=[correct output file] [bitcode file] \; --tool-args -- [arguments to pass to llc] \; --args -- [program arguments]. **Special note:** if you are debugging MultiSource or SPEC tests that; already exist in the ``llvm/test`` hierarchy, there is an easier way to; debug the JIT, LLC, and CBE, using the pre-written Makefile targets, which; will pass the program options specified in the Makefiles:. .. code-block:: bash. cd llvm/test/../../program; make bugpoint-jit. At the end of a successful ``bugpoint`` run, you will be presented; with two bitcode files: a *safe* file which can be compiled with the C; backend and the *test* file which either LLC or the JIT; mis-codegenerates, and thus causes the error. To reproduce the error that ``bugpoint`` found, it is sufficient to do; the following:. #. Regenerate the shared object from the safe bitcode file:. .. code-block:: bash. llc -march=c safe.bc -o safe.c; gcc -shared safe.c -o safe.so. #. If debugging LLC, compile test bitcode native and link with the shared; object:. .. code-block:: bash. llc test.bc -o test.s; gcc test.s safe.so -o test.llc; ./test.llc [program options]. #. If debugging the JIT, load the shared object and supply the test; bitcode:. .. code-block:: bash. lli -load=safe.so test",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst:10234,test,tests,10234,interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst,2,['test'],"['test', 'tests']"
Testability,"nction call to it. Since user-defined operators are just; built as normal functions (because the ""prototype"" boils down to a; function with the right name) everything falls into place. The final piece of code we are missing, is a bit of top-level magic:. .. code-block:: c++. Function *FunctionAST::codegen() {; // Transfer ownership of the prototype to the FunctionProtos map, but keep a; // reference to it for use below.; auto &P = *Proto;; FunctionProtos[Proto->getName()] = std::move(Proto);; Function *TheFunction = getFunction(P.getName());; if (!TheFunction); return nullptr;. // If this is an operator, install it.; if (P.isBinaryOp()); BinopPrecedence[P.getOperatorName()] = P.getBinaryPrecedence();. // Create a new basic block to start insertion into.; BasicBlock *BB = BasicBlock::Create(*TheContext, ""entry"", TheFunction);; ... Basically, before codegening a function, if it is a user-defined; operator, we register it in the precedence table. This allows the binary; operator parsing logic we already have in place to handle it. Since we; are working on a fully-general operator precedence parser, this is all; we need to do to ""extend the grammar"". Now we have useful user-defined binary operators. This builds a lot on; the previous framework we built for other operators. Adding unary; operators is a bit more challenging, because we don't have any framework; for it yet - let's see what it takes. User-defined Unary Operators; ============================. Since we don't currently support unary operators in the Kaleidoscope; language, we'll need to add everything to support them. Above, we added; simple support for the 'unary' keyword to the lexer. In addition to; that, we need an AST node:. .. code-block:: c++. /// UnaryExprAST - Expression class for a unary operator.; class UnaryExprAST : public ExprAST {; char Opcode;; std::unique_ptr<ExprAST> Operand;. public:; UnaryExprAST(char Opcode, std::unique_ptr<ExprAST> Operand); : Opcode(Opcode), Operand(std::move(Operand)) ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl06.rst:9905,log,logic,9905,interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl06.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl06.rst,1,['log'],['logic']
Testability,nctions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMeth,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5409,test,testOptimizationCpu,5409,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testOptimizationCpu']
